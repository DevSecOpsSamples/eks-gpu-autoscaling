{
  "version": 3,
  "sources": ["annotations.ts"],
  "sourcesContent": ["import { Stack, Stage } from '../../core';\nimport { SynthesisMessage } from '../../cx-api';\nimport { Messages } from './private/message';\nimport { findMessage, hasMessage, hasNoMessage } from './private/messages';\n\n/**\n * Suite of assertions that can be run on a CDK Stack.\n * Focused on asserting annotations.\n */\nexport class Annotations {\n  /**\n   * Base your assertions on the messages returned by a synthesized CDK `Stack`.\n   * @param stack the CDK Stack to run assertions on\n   */\n  public static fromStack(stack: Stack): Annotations {\n    return new Annotations(toMessages(stack));\n  }\n\n  private readonly _messages: Messages;\n\n  private constructor(messages: SynthesisMessage[]) {\n    this._messages = convertArrayToMessagesType(messages);\n  }\n\n  /**\n   * Assert that an error with the given message exists in the synthesized CDK `Stack`.\n   *\n   * @param constructPath the construct path to the error. Provide `'*'` to match all errors in the template.\n   * @param message the error message as should be expected. This should be a string or Matcher object.\n   */\n  public hasError(constructPath: string, message: any): void {\n    const matchError = hasMessage(this._messages, constructPath, constructMessage('error', message));\n    if (matchError) {\n      throw new Error(matchError);\n    }\n  }\n\n  /**\n   * Assert that an error with the given message does not exist in the synthesized CDK `Stack`.\n   *\n   * @param constructPath the construct path to the error. Provide `'*'` to match all errors in the template.\n   * @param message the error message as should be expected. This should be a string or Matcher object.\n   */\n  public hasNoError(constructPath: string, message: any): void {\n    const matchError = hasNoMessage(this._messages, constructPath, constructMessage('error', message));\n    if (matchError) {\n      throw new Error(matchError);\n    }\n  }\n\n  /**\n   * Get the set of matching errors of a given construct path and message.\n   *\n   * @param constructPath the construct path to the error. Provide `'*'` to match all errors in the template.\n   * @param message the error message as should be expected. This should be a string or Matcher object.\n   */\n  public findError(constructPath: string, message: any): SynthesisMessage[] {\n    return convertMessagesTypeToArray(findMessage(this._messages, constructPath, constructMessage('error', message)) as Messages);\n  }\n\n  /**\n   * Assert that an warning with the given message exists in the synthesized CDK `Stack`.\n   *\n   * @param constructPath the construct path to the warning. Provide `'*'` to match all warnings in the template.\n   * @param message the warning message as should be expected. This should be a string or Matcher object.\n   */\n  public hasWarning(constructPath: string, message: any): void {\n    const matchError = hasMessage(this._messages, constructPath, constructMessage('warning', message));\n    if (matchError) {\n      throw new Error(matchError);\n    }\n  }\n\n  /**\n   * Assert that an warning with the given message does not exist in the synthesized CDK `Stack`.\n   *\n   * @param constructPath the construct path to the warning. Provide `'*'` to match all warnings in the template.\n   * @param message the warning message as should be expected. This should be a string or Matcher object.\n   */\n  public hasNoWarning(constructPath: string, message: any): void {\n    const matchError = hasNoMessage(this._messages, constructPath, constructMessage('warning', message));\n    if (matchError) {\n      throw new Error(matchError);\n    }\n  }\n\n  /**\n   * Get the set of matching warning of a given construct path and message.\n   *\n   * @param constructPath the construct path to the warning. Provide `'*'` to match all warnings in the template.\n   * @param message the warning message as should be expected. This should be a string or Matcher object.\n   */\n  public findWarning(constructPath: string, message: any): SynthesisMessage[] {\n    return convertMessagesTypeToArray(findMessage(this._messages, constructPath, constructMessage('warning', message)) as Messages);\n  }\n\n  /**\n   * Assert that an info with the given message exists in the synthesized CDK `Stack`.\n   *\n   * @param constructPath the construct path to the info. Provide `'*'` to match all info in the template.\n   * @param message the info message as should be expected. This should be a string or Matcher object.\n   */\n  public hasInfo(constructPath: string, message: any): void {\n    const matchError = hasMessage(this._messages, constructPath, constructMessage('info', message));\n    if (matchError) {\n      throw new Error(matchError);\n    }\n  }\n\n  /**\n   * Assert that an info with the given message does not exist in the synthesized CDK `Stack`.\n   *\n   * @param constructPath the construct path to the info. Provide `'*'` to match all info in the template.\n   * @param message the info message as should be expected. This should be a string or Matcher object.\n   */\n  public hasNoInfo(constructPath: string, message: any): void {\n    const matchError = hasNoMessage(this._messages, constructPath, constructMessage('info', message));\n    if (matchError) {\n      throw new Error(matchError);\n    }\n  }\n\n  /**\n   * Get the set of matching infos of a given construct path and message.\n   *\n   * @param constructPath the construct path to the info. Provide `'*'` to match all infos in the template.\n   * @param message the info message as should be expected. This should be a string or Matcher object.\n   */\n  public findInfo(constructPath: string, message: any): SynthesisMessage[] {\n    return convertMessagesTypeToArray(findMessage(this._messages, constructPath, constructMessage('info', message)) as Messages);\n  }\n}\n\nfunction constructMessage(type: 'info' | 'warning' | 'error', message: any): {[key:string]: any } {\n  return {\n    level: type,\n    entry: {\n      data: message,\n    },\n  };\n}\n\nfunction convertArrayToMessagesType(messages: SynthesisMessage[]): Messages {\n  return messages.reduce((obj, item, index) => {\n    return {\n      ...obj,\n      [index]: item,\n    };\n  }, {}) as Messages;\n}\n\nfunction convertMessagesTypeToArray(messages: Messages): SynthesisMessage[] {\n  return Object.values(messages) as SynthesisMessage[];\n}\n\nfunction toMessages(stack: Stack): any {\n  const root = stack.node.root;\n  if (!Stage.isStage(root)) {\n    throw new Error('unexpected: all stacks must be part of a Stage or an App');\n  }\n\n  // to support incremental assertions (i.e. \"expect(stack).toNotContainSomething(); doSomething(); expect(stack).toContainSomthing()\")\n  const force = true;\n\n  const assembly = root.synth({ force });\n\n  return assembly.getStackArtifact(stack.artifactId).messages;\n}\n"],
  "mappings": "kNAAA,OAAA,QAAA,YAAA,EAGA,WAAA,QAAA,oBAAA,EAMA,MAAa,WAAW,CAWtB,YAAoB,SAA4B,CAC9C,KAAK,UAAY,2BAA2B,QAAQ,QAPxC,WAAU,MAAY,yDAC3B,GAAI,aAAY,WAAW,KAAK,CAAC,EAenC,SAAS,cAAuB,QAAY,CACjD,KAAM,YAAa,WAAA,WAAW,KAAK,UAAW,cAAe,iBAAiB,QAAS,OAAO,CAAC,EAC/F,GAAI,WACF,KAAM,IAAI,OAAM,UAAU,EAUvB,WAAW,cAAuB,QAAY,CACnD,KAAM,YAAa,WAAA,aAAa,KAAK,UAAW,cAAe,iBAAiB,QAAS,OAAO,CAAC,EACjG,GAAI,WACF,KAAM,IAAI,OAAM,UAAU,EAUvB,UAAU,cAAuB,QAAY,CAClD,MAAO,4BAA2B,WAAA,YAAY,KAAK,UAAW,cAAe,iBAAiB,QAAS,OAAO,CAAC,CAAa,EASvH,WAAW,cAAuB,QAAY,CACnD,KAAM,YAAa,WAAA,WAAW,KAAK,UAAW,cAAe,iBAAiB,UAAW,OAAO,CAAC,EACjG,GAAI,WACF,KAAM,IAAI,OAAM,UAAU,EAUvB,aAAa,cAAuB,QAAY,CACrD,KAAM,YAAa,WAAA,aAAa,KAAK,UAAW,cAAe,iBAAiB,UAAW,OAAO,CAAC,EACnG,GAAI,WACF,KAAM,IAAI,OAAM,UAAU,EAUvB,YAAY,cAAuB,QAAY,CACpD,MAAO,4BAA2B,WAAA,YAAY,KAAK,UAAW,cAAe,iBAAiB,UAAW,OAAO,CAAC,CAAa,EASzH,QAAQ,cAAuB,QAAY,CAChD,KAAM,YAAa,WAAA,WAAW,KAAK,UAAW,cAAe,iBAAiB,OAAQ,OAAO,CAAC,EAC9F,GAAI,WACF,KAAM,IAAI,OAAM,UAAU,EAUvB,UAAU,cAAuB,QAAY,CAClD,KAAM,YAAa,WAAA,aAAa,KAAK,UAAW,cAAe,iBAAiB,OAAQ,OAAO,CAAC,EAChG,GAAI,WACF,KAAM,IAAI,OAAM,UAAU,EAUvB,SAAS,cAAuB,QAAY,CACjD,MAAO,4BAA2B,WAAA,YAAY,KAAK,UAAW,cAAe,iBAAiB,OAAQ,OAAO,CAAC,CAAa,GAxH/H,QAAA,YAAA,8GA4HA,0BAA0B,KAAoC,QAAY,CACxE,MAAO,CACL,MAAO,KACP,MAAO,CACL,KAAM,SAGZ,CAEA,oCAAoC,SAA4B,CAC9D,MAAO,UAAS,OAAO,CAAC,IAAK,KAAM,QAC1B,KACF,KACF,OAAQ,OAEV,CAAA,CAAE,CACP,CAEA,oCAAoC,SAAkB,CACpD,MAAO,QAAO,OAAO,QAAQ,CAC/B,CAEA,oBAAoB,MAAY,CAC9B,KAAM,MAAO,MAAM,KAAK,KACxB,GAAI,CAAC,OAAA,MAAM,QAAQ,IAAI,EACrB,KAAM,IAAI,OAAM,0DAA0D,EAI5E,KAAM,OAAQ,GAId,MAAO,AAFU,MAAK,MAAM,CAAE,KAAK,CAAE,EAErB,iBAAiB,MAAM,UAAU,EAAE,QACrD",
  "names": []
}
