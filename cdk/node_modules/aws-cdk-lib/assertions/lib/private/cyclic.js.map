{
  "version": 3,
  "sources": ["cyclic.ts"],
  "sourcesContent": ["import { Resource, Template } from './template';\n\n/**\n * Check a template for cyclic dependencies\n *\n * This will make sure that we don't happily validate templates\n * in unit tests that wouldn't deploy to CloudFormation anyway.\n */\nexport function checkTemplateForCyclicDependencies(template: Template): void {\n  const logicalIds = new Set(Object.keys(template.Resources ?? {}));\n\n  const dependencies = new Map<string, Set<string>>();\n  for (const [logicalId, resource] of Object.entries(template.Resources ?? {})) {\n    dependencies.set(logicalId, intersect(findResourceDependencies(resource), logicalIds));\n  }\n\n  // We will now progressively remove entries from the map of 'dependencies' that have\n  // 0 elements in them. If we can't do that anymore and the map isn't empty, we\n  // have a cyclic dependency.\n  while (dependencies.size > 0) {\n    const free = Array.from(dependencies.entries()).filter(([_, deps]) => deps.size === 0);\n    if (free.length === 0) {\n      // Oops!\n      const cycle = findCycle(dependencies);\n\n      const cycleResources: any = {};\n      for (const logicalId of cycle) {\n        cycleResources[logicalId] = template.Resources?.[logicalId];\n      }\n\n      throw new Error(`Template is undeployable, these resources have a dependency cycle: ${cycle.join(' -> ')}:\\n\\n${JSON.stringify(cycleResources, undefined, 2)}`);\n    }\n\n    for (const [logicalId, _] of free) {\n      for (const deps of dependencies.values()) {\n        deps.delete(logicalId);\n      }\n      dependencies.delete(logicalId);\n    }\n  }\n}\n\nfunction findResourceDependencies(res: Resource): Set<string> {\n  return new Set([\n    ...toArray(res.DependsOn ?? []),\n    ...findExpressionDependencies(res.Properties),\n  ]);\n}\n\nfunction toArray<A>(x: A | A[]): A[] {\n  return Array.isArray(x) ? x : [x];\n}\n\nfunction findExpressionDependencies(obj: any): Set<string> {\n  const ret = new Set<string>();\n  recurse(obj);\n  return ret;\n\n  function recurse(x: any): void {\n    if (!x) { return; }\n    if (Array.isArray(x)) {\n      x.forEach(recurse);\n    }\n    if (typeof x === 'object') {\n      const keys = Object.keys(x);\n      if (keys.length === 1 && keys[0] === 'Ref') {\n        ret.add(x[keys[0]]);\n      } else if (keys.length === 1 && keys[0] === 'Fn::GetAtt') {\n        ret.add(x[keys[0]][0]);\n      } else if (keys.length === 1 && keys[0] === 'Fn::Sub') {\n        const argument = x[keys[0]];\n        const pattern = Array.isArray(argument) ? argument[0] : argument;\n\n        // pattern should always be a string, but we've encountered some cases in which\n        // it isn't. Better safeguard.\n        if (typeof pattern === 'string') {\n          for (const logId of logicalIdsInSubString(pattern)) {\n            ret.add(logId);\n          }\n        }\n        const contextDict = Array.isArray(argument) ? argument[1] : undefined;\n        if (contextDict && typeof contextDict === 'object') {\n          Object.values(contextDict).forEach(recurse);\n        }\n      } else {\n        Object.values(x).forEach(recurse);\n      }\n    }\n  }\n}\n\n/**\n * Return the logical IDs found in a {Fn::Sub} format string\n */\nfunction logicalIdsInSubString(x: string): string[] {\n  return analyzeSubPattern(x).flatMap((fragment) => {\n    switch (fragment.type) {\n      case 'getatt':\n      case 'ref':\n        return [fragment.logicalId];\n      case 'literal':\n        return [];\n    }\n  });\n}\n\n\nfunction analyzeSubPattern(pattern: string): SubFragment[] {\n  const ret: SubFragment[] = [];\n  let start = 0;\n\n  let ph0 = pattern.indexOf('${', start);\n  while (ph0 > -1) {\n    if (pattern[ph0 + 2] === '!') {\n      // \"${!\" means \"don't actually substitute\"\n      start = ph0 + 3;\n      ph0 = pattern.indexOf('${', start);\n      continue;\n    }\n\n    const ph1 = pattern.indexOf('}', ph0 + 2);\n    if (ph1 === -1) {\n      break;\n    }\n    const placeholder = pattern.substring(ph0 + 2, ph1);\n\n    if (ph0 > start) {\n      ret.push({ type: 'literal', content: pattern.substring(start, ph0) });\n    }\n    if (placeholder.includes('.')) {\n      const [logicalId, attr] = placeholder.split('.');\n      ret.push({ type: 'getatt', logicalId: logicalId!, attr: attr! });\n    } else {\n      ret.push({ type: 'ref', logicalId: placeholder });\n    }\n\n    start = ph1 + 1;\n    ph0 = pattern.indexOf('${', start);\n  }\n\n  if (start < pattern.length - 1) {\n    ret.push({ type: 'literal', content: pattern.slice(start) });\n  }\n\n  return ret;\n}\n\ntype SubFragment =\n  | { readonly type: 'literal'; readonly content: string }\n  | { readonly type: 'ref'; readonly logicalId: string }\n  | { readonly type: 'getatt'; readonly logicalId: string; readonly attr: string };\n\n\nfunction intersect<A>(xs: Set<A>, ys: Set<A>): Set<A> {\n  return new Set<A>(Array.from(xs).filter(x => ys.has(x)));\n}\n\n/**\n * Find cycles in a graph\n *\n * Not the fastest, but effective and should be rare\n */\nfunction findCycle(deps: ReadonlyMap<string, ReadonlySet<string>>): string[] {\n  for (const node of deps.keys()) {\n    const cycle = recurse(node, [node]);\n    if (cycle) { return cycle; }\n  }\n  throw new Error('No cycle found. Assertion failure!');\n\n  function recurse(node: string, path: string[]): string[] | undefined {\n    for (const dep of deps.get(node) ?? []) {\n      if (dep === path[0]) { return [...path, dep]; }\n\n      const cycle = recurse(dep, [...path, dep]);\n      if (cycle) { return cycle; }\n    }\n\n    return undefined;\n  }\n}"],
  "mappings": "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",
  "names": []
}
