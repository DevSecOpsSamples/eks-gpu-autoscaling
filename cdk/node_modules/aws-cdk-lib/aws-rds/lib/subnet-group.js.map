{
  "version": 3,
  "sources": ["subnet-group.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport { IResource, RemovalPolicy, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnDBSubnetGroup } from './rds.generated';\n\n/**\n * Interface for a subnet group.\n */\nexport interface ISubnetGroup extends IResource {\n  /**\n   * The name of the subnet group.\n   * @attribute\n   */\n  readonly subnetGroupName: string;\n}\n\n/**\n * Properties for creating a SubnetGroup.\n */\nexport interface SubnetGroupProps {\n  /**\n   * Description of the subnet group.\n   */\n  readonly description: string;\n\n  /**\n   * The VPC to place the subnet group in.\n   */\n  readonly vpc: ec2.IVpc;\n\n  /**\n   * The name of the subnet group.\n   *\n   * @default - a name is generated\n   */\n  readonly subnetGroupName?: string;\n\n  /**\n   * Which subnets within the VPC to associate with this group.\n   *\n   * @default - private subnets\n   */\n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n  /**\n   * The removal policy to apply when the subnet group are removed\n   * from the stack or replaced during an update.\n   *\n   * @default RemovalPolicy.DESTROY\n   */\n  readonly removalPolicy?: RemovalPolicy\n}\n\n/**\n * Class for creating a RDS DB subnet group\n *\n * @resource AWS::RDS::DBSubnetGroup\n */\nexport class SubnetGroup extends Resource implements ISubnetGroup {\n\n  /**\n   * Imports an existing subnet group by name.\n   */\n  public static fromSubnetGroupName(scope: Construct, id: string, subnetGroupName: string): ISubnetGroup {\n    return new class extends Resource implements ISubnetGroup {\n      public readonly subnetGroupName = subnetGroupName;\n    }(scope, id);\n  }\n\n  public readonly subnetGroupName: string;\n\n  constructor(scope: Construct, id: string, props: SubnetGroupProps) {\n    super(scope, id);\n\n    const { subnetIds } = props.vpc.selectSubnets(props.vpcSubnets ?? { subnetType: ec2.SubnetType.PRIVATE });\n\n    // Using 'Default' as the resource id for historical reasons (usage from `Instance` and `Cluster`).\n    const subnetGroup = new CfnDBSubnetGroup(this, 'Default', {\n      dbSubnetGroupDescription: props.description,\n      // names are actually stored by RDS changed to lowercase on the server side,\n      // and not lowercasing them in CloudFormation means things like { Ref }\n      // do not work correctly\n      dbSubnetGroupName: Token.isUnresolved(props.subnetGroupName)\n        ? props.subnetGroupName\n        : props.subnetGroupName?.toLowerCase(),\n      subnetIds,\n    });\n\n    if (props.removalPolicy) {\n      subnetGroup.applyRemovalPolicy(props.removalPolicy);\n    }\n\n    this.subnetGroupName = subnetGroup.ref;\n  }\n}\n"],
  "mappings": "kNAAA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EAEA,gBAAA,QAAA,iBAAA,EAuDA,MAAa,mBAAoB,QAAA,QAAQ,CAavC,YAAY,MAAkB,GAAY,MAAuB,WAC/D,MAAM,MAAO,EAAE,sEAEf,KAAM,CAAE,WAAc,MAAM,IAAI,cAAa,IAAC,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,CAAE,WAAY,IAAI,WAAW,OAAO,CAAE,EAGlG,YAAc,GAAI,iBAAA,iBAAiB,KAAM,UAAW,CACxD,yBAA0B,MAAM,YAIhC,kBAAmB,OAAA,MAAM,aAAa,MAAM,eAAe,EACvD,MAAM,gBACP,IAAC,MAAM,mBAAe,MAAA,KAAA,OAAA,OAAA,GAAE,YAAW,EACtC,UACD,EAED,AAAI,MAAM,eACR,YAAY,mBAAmB,MAAM,aAAa,EAGpD,KAAK,gBAAkB,YAAY,UA7BvB,qBAAoB,MAAkB,GAAY,gBAAuB,CACrF,MAAO,IAAI,cAAc,QAAA,QAAQ,CAAtB,aAAA,qBACO,KAAA,gBAAkB,eACpC,GAAE,MAAO,EAAE,GARf,QAAA,YAAA",
  "names": []
}
