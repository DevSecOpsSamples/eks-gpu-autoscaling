{
  "version": 3,
  "sources": ["rds-augmentations.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\nimport * as cloudwatch from '../../aws-cloudwatch';\nimport { DatabaseClusterBase } from \"./cluster\";\ndeclare module \"./cluster-ref\" {\n    interface IDatabaseCluster {\n        /**\n         * Return the given named metric for this DBCluster\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The percentage of CPU utilization.\n         *\n         * Average over 5 minutes\n         */\n        metricCPUUtilization(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of database connections in use.\n         *\n         * Average over 5 minutes\n         */\n        metricDatabaseConnections(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The average number of deadlocks in the database per second.\n         *\n         * Average over 5 minutes\n         */\n        metricDeadlocks(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of time that the instance has been running, in seconds.\n         *\n         * Average over 5 minutes\n         */\n        metricEngineUptime(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of available random access memory, in bytes.\n         *\n         * Average over 5 minutes\n         */\n        metricFreeableMemory(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of local storage available, in bytes.\n         *\n         * Average over 5 minutes\n         */\n        metricFreeLocalStorage(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of network throughput received from clients by each instance, in bytes per second.\n         *\n         * Average over 5 minutes\n         */\n        metricNetworkReceiveThroughput(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of network throughput both received from and transmitted to clients by each instance, in bytes per second.\n         *\n         * Average over 5 minutes\n         */\n        metricNetworkThroughput(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of network throughput sent to clients by each instance, in bytes per second.\n         *\n         * Average over 5 minutes\n         */\n        metricNetworkTransmitThroughput(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The total amount of backup storage in bytes consumed by all Aurora snapshots outside its backup retention window.\n         *\n         * Average over 5 minutes\n         */\n        metricSnapshotStorageUsed(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The total amount of backup storage in bytes for which you are billed.\n         *\n         * Average over 5 minutes\n         */\n        metricTotalBackupStorageBilled(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of storage used by your Aurora DB instance, in bytes.\n         *\n         * Average over 5 minutes\n         */\n        metricVolumeBytesUsed(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of billed read I/O operations from a cluster volume, reported at 5-minute intervals.\n         *\n         * Average over 5 minutes\n         */\n        metricVolumeReadIOPs(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of write disk I/O operations to the cluster volume, reported at 5-minute intervals.\n         *\n         * Average over 5 minutes\n         */\n        metricVolumeWriteIOPs(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n}\ndeclare module \"./cluster\" {\n    interface DatabaseClusterBase {\n        /**\n         * Return the given named metric for this DBCluster\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The percentage of CPU utilization.\n         *\n         * Average over 5 minutes\n         */\n        metricCPUUtilization(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of database connections in use.\n         *\n         * Average over 5 minutes\n         */\n        metricDatabaseConnections(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The average number of deadlocks in the database per second.\n         *\n         * Average over 5 minutes\n         */\n        metricDeadlocks(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of time that the instance has been running, in seconds.\n         *\n         * Average over 5 minutes\n         */\n        metricEngineUptime(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of available random access memory, in bytes.\n         *\n         * Average over 5 minutes\n         */\n        metricFreeableMemory(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of local storage available, in bytes.\n         *\n         * Average over 5 minutes\n         */\n        metricFreeLocalStorage(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of network throughput received from clients by each instance, in bytes per second.\n         *\n         * Average over 5 minutes\n         */\n        metricNetworkReceiveThroughput(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of network throughput both received from and transmitted to clients by each instance, in bytes per second.\n         *\n         * Average over 5 minutes\n         */\n        metricNetworkThroughput(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of network throughput sent to clients by each instance, in bytes per second.\n         *\n         * Average over 5 minutes\n         */\n        metricNetworkTransmitThroughput(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The total amount of backup storage in bytes consumed by all Aurora snapshots outside its backup retention window.\n         *\n         * Average over 5 minutes\n         */\n        metricSnapshotStorageUsed(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The total amount of backup storage in bytes for which you are billed.\n         *\n         * Average over 5 minutes\n         */\n        metricTotalBackupStorageBilled(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of storage used by your Aurora DB instance, in bytes.\n         *\n         * Average over 5 minutes\n         */\n        metricVolumeBytesUsed(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of billed read I/O operations from a cluster volume, reported at 5-minute intervals.\n         *\n         * Average over 5 minutes\n         */\n        metricVolumeReadIOPs(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of write disk I/O operations to the cluster volume, reported at 5-minute intervals.\n         *\n         * Average over 5 minutes\n         */\n        metricVolumeWriteIOPs(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n}\nDatabaseClusterBase.prototype.metric = function(metricName: string, props?: cloudwatch.MetricOptions) {\n  return new cloudwatch.Metric({\n    namespace: 'AWS/RDS',\n    metricName,\n    dimensionsMap: { DBClusterIdentifier: this.clusterIdentifier },\n    ...props\n  }).attachTo(this);\n};\nDatabaseClusterBase.prototype.metricCPUUtilization = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('CPUUtilization', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricDatabaseConnections = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('DatabaseConnections', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricDeadlocks = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('Deadlocks', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricEngineUptime = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('EngineUptime', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricFreeableMemory = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('FreeableMemory', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricFreeLocalStorage = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('FreeLocalStorage', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricNetworkReceiveThroughput = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NetworkReceiveThroughput', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricNetworkThroughput = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NetworkThroughput', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricNetworkTransmitThroughput = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NetworkTransmitThroughput', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricSnapshotStorageUsed = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('SnapshotStorageUsed', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricTotalBackupStorageBilled = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('TotalBackupStorageBilled', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricVolumeBytesUsed = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('VolumeBytesUsed', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricVolumeReadIOPs = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('VolumeReadIOPs', { statistic: 'Average', ...props });\n};\nDatabaseClusterBase.prototype.metricVolumeWriteIOPs = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('VolumeWriteIOPs', { statistic: 'Average', ...props });\n};\nimport { DatabaseInstanceBase } from \"./instance\";\ndeclare module \"./instance\" {\n    interface IDatabaseInstance {\n        /**\n         * Return the given named metric for this DBInstance\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The percentage of CPU utilization.\n         *\n         * Average over 5 minutes\n         */\n        metricCPUUtilization(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of database connections in use.\n         *\n         * Average over 5 minutes\n         */\n        metricDatabaseConnections(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of available storage space.\n         *\n         * Average over 5 minutes\n         */\n        metricFreeStorageSpace(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of available random access memory.\n         *\n         * Average over 5 minutes\n         */\n        metricFreeableMemory(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The average number of disk read I/O operations per second.\n         *\n         * Average over 5 minutes\n         */\n        metricWriteIOPS(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The average number of disk write I/O operations per second.\n         *\n         * Average over 5 minutes\n         */\n        metricReadIOPS(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n    interface DatabaseInstanceBase {\n        /**\n         * Return the given named metric for this DBInstance\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The percentage of CPU utilization.\n         *\n         * Average over 5 minutes\n         */\n        metricCPUUtilization(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of database connections in use.\n         *\n         * Average over 5 minutes\n         */\n        metricDatabaseConnections(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of available storage space.\n         *\n         * Average over 5 minutes\n         */\n        metricFreeStorageSpace(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The amount of available random access memory.\n         *\n         * Average over 5 minutes\n         */\n        metricFreeableMemory(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The average number of disk read I/O operations per second.\n         *\n         * Average over 5 minutes\n         */\n        metricWriteIOPS(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The average number of disk write I/O operations per second.\n         *\n         * Average over 5 minutes\n         */\n        metricReadIOPS(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n}\nDatabaseInstanceBase.prototype.metric = function(metricName: string, props?: cloudwatch.MetricOptions) {\n  return new cloudwatch.Metric({\n    namespace: 'AWS/RDS',\n    metricName,\n    dimensionsMap: { DBInstanceIdentifier: this.instanceIdentifier },\n    ...props\n  }).attachTo(this);\n};\nDatabaseInstanceBase.prototype.metricCPUUtilization = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('CPUUtilization', { statistic: 'Average', ...props });\n};\nDatabaseInstanceBase.prototype.metricDatabaseConnections = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('DatabaseConnections', { statistic: 'Average', ...props });\n};\nDatabaseInstanceBase.prototype.metricFreeStorageSpace = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('FreeStorageSpace', { statistic: 'Average', ...props });\n};\nDatabaseInstanceBase.prototype.metricFreeableMemory = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('FreeableMemory', { statistic: 'Average', ...props });\n};\nDatabaseInstanceBase.prototype.metricWriteIOPS = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('WriteIOPS', { statistic: 'Average', ...props });\n};\nDatabaseInstanceBase.prototype.metricReadIOPS = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('ReadIOPS', { statistic: 'Average', ...props });\n};\n"],
  "mappings": "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",
  "names": []
}
