{
  "version": 3,
  "sources": ["util.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport * as s3 from '../../../aws-s3';\nimport { RemovalPolicy } from '../../../core';\nimport { DatabaseSecret } from '../database-secret';\nimport { IEngine } from '../engine';\nimport { CommonRotationUserOptions, Credentials } from '../props';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * The default set of characters we exclude from generated passwords for database users.\n * It's a combination of characters that have a tendency to cause problems in shell scripts,\n * some engine-specific characters (for example, Oracle doesn't like '@' in its passwords),\n * and some that trip up other services, like DMS.\n *\n * This constant is private to the RDS module.\n */\nexport const DEFAULT_PASSWORD_EXCLUDE_CHARS = \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\";\n\n/** Common base of `DatabaseInstanceProps` and `DatabaseClusterBaseProps` that has only the S3 props */\nexport interface DatabaseS3ImportExportProps {\n  readonly s3ImportRole?: iam.IRole;\n  readonly s3ImportBuckets?: s3.IBucket[];\n  readonly s3ExportRole?: iam.IRole;\n  readonly s3ExportBuckets?: s3.IBucket[];\n}\n\n/**\n * Validates the S3 import/export props and returns the import/export roles, if any.\n * If `combineRoles` is true, will reuse the import role for export (or vice versa) if possible.\n *\n * Notably, `combineRoles` is set to true for instances, but false for clusters.\n * This is because the `combineRoles` functionality is most applicable to instances and didn't exist\n * for the initial clusters implementation. To maintain backwards compatibility, it is set to false for clusters.\n */\nexport function setupS3ImportExport(\n  scope: Construct,\n  props: DatabaseS3ImportExportProps,\n  combineRoles: boolean): { s3ImportRole?: iam.IRole, s3ExportRole?: iam.IRole } {\n\n  let s3ImportRole = props.s3ImportRole;\n  let s3ExportRole = props.s3ExportRole;\n\n  if (props.s3ImportBuckets && props.s3ImportBuckets.length > 0) {\n    if (props.s3ImportRole) {\n      throw new Error('Only one of s3ImportRole or s3ImportBuckets must be specified, not both.');\n    }\n\n    s3ImportRole = (combineRoles && s3ExportRole) ? s3ExportRole : new iam.Role(scope, 'S3ImportRole', {\n      assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n    });\n    for (const bucket of props.s3ImportBuckets) {\n      bucket.grantRead(s3ImportRole);\n    }\n  }\n\n  if (props.s3ExportBuckets && props.s3ExportBuckets.length > 0) {\n    if (props.s3ExportRole) {\n      throw new Error('Only one of s3ExportRole or s3ExportBuckets must be specified, not both.');\n    }\n\n    s3ExportRole = (combineRoles && s3ImportRole) ? s3ImportRole : new iam.Role(scope, 'S3ExportRole', {\n      assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n    });\n    for (const bucket of props.s3ExportBuckets) {\n      bucket.grantReadWrite(s3ExportRole);\n    }\n  }\n\n  return { s3ImportRole, s3ExportRole };\n}\n\nexport function engineDescription(engine: IEngine) {\n  return engine.engineType + (engine.engineVersion?.fullVersion ? `-${engine.engineVersion.fullVersion}` : '');\n}\n\n/**\n * By default, deletion protection is disabled.\n * Enable if explicitly provided or if the RemovalPolicy has been set to RETAIN\n */\nexport function defaultDeletionProtection(deletionProtection?: boolean, removalPolicy?: RemovalPolicy): boolean | undefined {\n  return deletionProtection ?? (removalPolicy === RemovalPolicy.RETAIN ? true : undefined);\n}\n\n/**\n * Renders the credentials for an instance or cluster\n */\nexport function renderCredentials(scope: Construct, engine: IEngine, credentials?: Credentials): Credentials {\n  let renderedCredentials = credentials ?? Credentials.fromUsername(engine.defaultUsername ?? 'admin'); // For backwards compatibilty\n\n  if (!renderedCredentials.secret && !renderedCredentials.password) {\n    renderedCredentials = Credentials.fromSecret(\n      new DatabaseSecret(scope, 'Secret', {\n        username: renderedCredentials.username,\n        secretName: renderedCredentials.secretName,\n        encryptionKey: renderedCredentials.encryptionKey,\n        excludeCharacters: renderedCredentials.excludeCharacters,\n        // if username must be referenced as a string we can safely replace the\n        // secret when customization options are changed without risking a replacement\n        replaceOnPasswordCriteriaChanges: credentials?.usernameAsString,\n        replicaRegions: renderedCredentials.replicaRegions,\n      }),\n      // pass username if it must be referenced as a string\n      credentials?.usernameAsString ? renderedCredentials.username : undefined,\n    );\n  }\n\n  return renderedCredentials;\n}\n\n/**\n * The RemovalPolicy that should be applied to a \"helper\" resource, if the base resource has the given removal policy\n *\n * - For Clusters, this determines the RemovalPolicy for Instances/SubnetGroups.\n * - For Instances, this determines the RemovalPolicy for SubnetGroups.\n *\n * If the basePolicy is:\n *\n *  DESTROY or SNAPSHOT -> DESTROY (snapshot is good enough to recreate)\n *  RETAIN              -> RETAIN  (anything else will lose data or fail to deploy)\n *  (undefined)         -> DESTROY (base policy is assumed to be SNAPSHOT)\n */\nexport function helperRemovalPolicy(basePolicy?: RemovalPolicy): RemovalPolicy {\n  return basePolicy === RemovalPolicy.RETAIN\n    ? RemovalPolicy.RETAIN\n    : RemovalPolicy.DESTROY;\n}\n\n/**\n * Return a given value unless it's the same as another value\n */\nexport function renderUnless<A>(value: A, suppressValue: A): A | undefined {\n  return value === suppressValue ? undefined : value;\n}\n\n/**\n * Applies defaults for rotation options\n */\nexport function applyDefaultRotationOptions(options: CommonRotationUserOptions, defaultvpcSubnets?: ec2.SubnetSelection): CommonRotationUserOptions {\n  return {\n    excludeCharacters: DEFAULT_PASSWORD_EXCLUDE_CHARS,\n    vpcSubnets: defaultvpcSubnets,\n    ...options,\n  };\n}\n"],
  "mappings": "yTACA,KAAA,KAAA,QAAA,kBAAA,EAEA,OAAA,QAAA,eAAA,EACA,kBAAA,QAAA,oBAAA,EAEA,QAAA,QAAA,UAAA,EAca,QAAA,+BAAiC,gCAkB9C,6BACE,MACA,MACA,aAAqB,CAErB,GAAI,cAAe,MAAM,aACrB,aAAe,MAAM,aAEzB,GAAI,MAAM,iBAAmB,MAAM,gBAAgB,OAAS,EAAG,CAC7D,GAAI,MAAM,aACR,KAAM,IAAI,OAAM,0EAA0E,EAG5F,aAAgB,cAAgB,aAAgB,aAAe,GAAI,KAAI,KAAK,MAAO,eAAgB,CACjG,UAAW,GAAI,KAAI,iBAAiB,mBAAmB,EACxD,EACD,SAAW,UAAU,OAAM,gBACzB,OAAO,UAAU,YAAY,EAIjC,GAAI,MAAM,iBAAmB,MAAM,gBAAgB,OAAS,EAAG,CAC7D,GAAI,MAAM,aACR,KAAM,IAAI,OAAM,0EAA0E,EAG5F,aAAgB,cAAgB,aAAgB,aAAe,GAAI,KAAI,KAAK,MAAO,eAAgB,CACjG,UAAW,GAAI,KAAI,iBAAiB,mBAAmB,EACxD,EACD,SAAW,UAAU,OAAM,gBACzB,OAAO,eAAe,YAAY,EAItC,MAAO,CAAE,aAAc,YAAY,CACrC,CAnCA,QAAA,oBAAA,oBAqCA,2BAAkC,OAAe,QAC/C,MAAO,QAAO,WAAc,OAAA,OAAO,iBAAa,MAAA,KAAA,SAAA,GAAE,YAAc,IAAI,OAAO,cAAc,cAAgB,GAC3G,CAFA,QAAA,kBAAA,kBAQA,mCAA0C,mBAA8B,cAA6B,CACnG,MAAO,qBAAkB,KAAlB,mBAAuB,gBAAkB,OAAA,cAAc,OAAS,GAAO,MAChF,CAFA,QAAA,0BAAA,0BAOA,2BAAkC,MAAkB,OAAiB,YAAyB,QAC5F,GAAI,qBAAsB,aAAW,KAAX,YAAe,QAAA,YAAY,aAAY,IAAC,OAAO,mBAAe,MAAA,KAAA,OAAA,GAAI,OAAO,EAEnG,MAAI,CAAC,oBAAoB,QAAU,CAAC,oBAAoB,UACtD,qBAAsB,QAAA,YAAY,WAChC,GAAI,mBAAA,eAAe,MAAO,SAAU,CAClC,SAAU,oBAAoB,SAC9B,WAAY,oBAAoB,WAChC,cAAe,oBAAoB,cACnC,kBAAmB,oBAAoB,kBAGvC,iCAAkC,aAAW,KAAA,OAAX,YAAa,iBAC/C,eAAgB,oBAAoB,eACrC,EAED,aAAW,MAAX,YAAa,iBAAmB,oBAAoB,SAAW,MAAS,GAIrE,mBACT,CArBA,QAAA,kBAAA,kBAmCA,6BAAoC,WAA0B,CAC5D,MAAO,cAAe,OAAA,cAAc,OAChC,OAAA,cAAc,OACd,OAAA,cAAc,OACpB,CAJA,QAAA,oBAAA,oBASA,sBAAgC,MAAU,cAAgB,CACxD,MAAO,SAAU,cAAgB,OAAY,KAC/C,CAFA,QAAA,aAAA,aAOA,qCAA4C,QAAoC,kBAAuC,CACrH,MAAO,CACL,kBAAmB,QAAA,+BACnB,WAAY,qBACT,QAEP,CANA,QAAA,4BAAA",
  "names": []
}
