{
  "version": 3,
  "sources": ["option-group.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport { IResource, Lazy, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { IInstanceEngine } from './instance-engine';\nimport { CfnOptionGroup } from './rds.generated';\n\n/**\n * An option group\n */\nexport interface IOptionGroup extends IResource {\n  /**\n   * The name of the option group.\n   *\n   * @attribute\n   */\n  readonly optionGroupName: string;\n\n  /**\n   * Adds a configuration to this OptionGroup.\n   * This method is a no-op for an imported OptionGroup.\n   *\n   * @returns true if the OptionConfiguration was successfully added.\n   */\n  addConfiguration(configuration: OptionConfiguration): boolean;\n}\n\n/**\n * Configuration properties for an option.\n */\nexport interface OptionConfiguration {\n  /**\n   * The name of the option.\n   */\n  readonly name: string;\n\n  /**\n   * The settings for the option.\n   *\n   * @default - no settings\n   */\n  readonly settings?: { [name: string]: string };\n\n  /**\n   * The version for the option.\n   *\n   * @default - no version\n   */\n  readonly version?: string;\n\n  /**\n   * The port number that this option uses. If `port` is specified then `vpc`\n   * must also be specified.\n   *\n   * @default - no port\n   */\n  readonly port?: number;\n\n  /**\n   * The VPC where a security group should be created for this option. If `vpc`\n   * is specified then `port` must also be specified.\n   *\n   * @default - no VPC\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * Optional list of security groups to use for this option, if `vpc` is specified.\n   * If no groups are provided, a default one will be created.\n   *\n   * @default - a default group will be created if `port` or `vpc` are specified.\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n}\n\n/**\n * Construction properties for an OptionGroup.\n */\nexport interface OptionGroupProps {\n  /**\n   * The database engine that this option group is associated with.\n   */\n  readonly engine: IInstanceEngine;\n\n  /**\n   * A description of the option group.\n   *\n   * @default a CDK generated description\n   */\n  readonly description?: string;\n\n  /**\n   * The configurations for this option group.\n   */\n  readonly configurations: OptionConfiguration[];\n}\n\n/**\n * An option group\n */\nexport class OptionGroup extends Resource implements IOptionGroup {\n  /**\n   * Import an existing option group.\n   */\n  public static fromOptionGroupName(scope: Construct, id: string, optionGroupName: string): IOptionGroup {\n    class Import extends Resource {\n      public readonly optionGroupName = optionGroupName;\n      public addConfiguration(_: OptionConfiguration) { return false; }\n    }\n    return new Import(scope, id);\n  }\n\n  /**\n   * The name of the option group.\n   */\n  public readonly optionGroupName: string;\n\n  /**\n   * The connections object for the options.\n   */\n  public readonly optionConnections: { [key: string]: ec2.Connections } = {};\n\n  private readonly configurations: OptionConfiguration[] = [];\n\n  constructor(scope: Construct, id: string, props: OptionGroupProps) {\n    super(scope, id);\n\n    const majorEngineVersion = props.engine.engineVersion?.majorVersion;\n    if (!majorEngineVersion) {\n      throw new Error(\"OptionGroup cannot be used with an engine that doesn't specify a version\");\n    }\n\n    props.configurations.forEach(config => this.addConfiguration(config));\n\n    const optionGroup = new CfnOptionGroup(this, 'Resource', {\n      engineName: props.engine.engineType,\n      majorEngineVersion,\n      optionGroupDescription: props.description || `Option group for ${props.engine.engineType} ${majorEngineVersion}`,\n      optionConfigurations: Lazy.any({ produce: () => this.renderConfigurations(this.configurations) }),\n    });\n\n    this.optionGroupName = optionGroup.ref;\n  }\n\n  public addConfiguration(configuration: OptionConfiguration) {\n    this.configurations.push(configuration);\n\n    if (configuration.port) {\n      if (!configuration.vpc) {\n        throw new Error('`port` and `vpc` must be specified together.');\n      }\n\n      const securityGroups = configuration.securityGroups && configuration.securityGroups.length > 0\n        ? configuration.securityGroups\n        : [new ec2.SecurityGroup(this, `SecurityGroup${configuration.name}`, {\n          description: `Security group for ${configuration.name} option`,\n          vpc: configuration.vpc,\n        })];\n\n      this.optionConnections[configuration.name] = new ec2.Connections({\n        securityGroups: securityGroups,\n        defaultPort: ec2.Port.tcp(configuration.port),\n      });\n    }\n\n    return true;\n  }\n\n  /**\n   * Renders the option configurations specifications.\n   */\n  private renderConfigurations(configurations: OptionConfiguration[]): CfnOptionGroup.OptionConfigurationProperty[] {\n    const configs: CfnOptionGroup.OptionConfigurationProperty[] = [];\n    for (const config of configurations) {\n      const securityGroups = config.vpc\n        ? this.optionConnections[config.name].securityGroups.map(sg => sg.securityGroupId)\n        : undefined;\n\n      configs.push({\n        optionName: config.name,\n        optionSettings: config.settings && Object.entries(config.settings).map(([name, value]) => ({ name, value })),\n        optionVersion: config.version,\n        port: config.port,\n        vpcSecurityGroupMemberships: securityGroups,\n      });\n    }\n\n    return configs;\n  }\n}\n"],
  "mappings": "kNAAA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EAGA,gBAAA,QAAA,iBAAA,EA+FA,MAAa,mBAAoB,QAAA,QAAQ,CAwBvC,YAAY,MAAkB,GAAY,MAAuB,QAC/D,MAAM,MAAO,EAAE,EALD,KAAA,kBAAwD,CAAA,EAEvD,KAAA,eAAwC,CAAA,sEAKvD,KAAM,oBAAkB,IAAG,MAAM,OAAO,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,aACvD,GAAI,CAAC,mBACH,KAAM,IAAI,OAAM,0EAA0E,EAG5F,MAAM,eAAe,QAAQ,QAAU,KAAK,iBAAiB,MAAM,CAAC,EAEpE,KAAM,aAAc,GAAI,iBAAA,eAAe,KAAM,WAAY,CACvD,WAAY,MAAM,OAAO,WACzB,mBACA,uBAAwB,MAAM,aAAe,oBAAoB,MAAM,OAAO,cAAc,qBAC5F,qBAAsB,OAAA,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,qBAAqB,KAAK,cAAc,CAAC,CAAE,EACjG,EAED,KAAK,gBAAkB,YAAY,UArCvB,qBAAoB,MAAkB,GAAY,gBAAuB,CACrF,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,gBAAkB,eAEpC,CADS,iBAAiB,EAAsB,CAAI,MAAO,EAAO,EAElE,MAAO,IAAI,QAAO,MAAO,EAAE,EAmCtB,iBAAiB,cAAkC,CAGxD,kFAFA,KAAK,eAAe,KAAK,aAAa,EAElC,cAAc,KAAM,CACtB,GAAI,CAAC,cAAc,IACjB,KAAM,IAAI,OAAM,8CAA8C,EAGhE,KAAM,gBAAiB,cAAc,gBAAkB,cAAc,eAAe,OAAS,EACzF,cAAc,eACd,CAAC,GAAI,KAAI,cAAc,KAAM,gBAAgB,cAAc,OAAQ,CACnE,YAAa,sBAAsB,cAAc,cACjD,IAAK,cAAc,IACpB,CAAC,EAEJ,KAAK,kBAAkB,cAAc,MAAQ,GAAI,KAAI,YAAY,CAC/D,eACA,YAAa,IAAI,KAAK,IAAI,cAAc,IAAI,EAC7C,EAGH,MAAO,GAMD,qBAAqB,eAAqC,CAChE,KAAM,SAAwD,CAAA,EAC9D,SAAW,UAAU,gBAAgB,CACnC,KAAM,gBAAiB,OAAO,IAC1B,KAAK,kBAAkB,OAAO,MAAM,eAAe,IAAI,IAAM,GAAG,eAAe,EAC/E,OAEJ,QAAQ,KAAK,CACX,WAAY,OAAO,KACnB,eAAgB,OAAO,UAAY,OAAO,QAAQ,OAAO,QAAQ,EAAE,IAAI,CAAC,CAAC,KAAM,SAAY,EAAE,KAAM,KAAK,EAAG,EAC3G,cAAe,OAAO,QACtB,KAAM,OAAO,KACb,4BAA6B,eAC9B,EAGH,MAAO,UAvFX,QAAA,YAAA",
  "names": []
}
