{
  "version": 3,
  "sources": ["instance.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as logs from '../../aws-logs';\nimport * as s3 from '../../aws-s3';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport { ArnComponents, ArnFormat, Duration, FeatureFlags, IResource, Lazy, RemovalPolicy, Resource, Stack, Token, Tokenization } from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { DatabaseSecret } from './database-secret';\nimport { Endpoint } from './endpoint';\nimport { IInstanceEngine } from './instance-engine';\nimport { IOptionGroup } from './option-group';\nimport { IParameterGroup, ParameterGroup } from './parameter-group';\nimport { applyDefaultRotationOptions, defaultDeletionProtection, engineDescription, renderCredentials, setupS3ImportExport, helperRemovalPolicy, renderUnless } from './private/util';\nimport { Credentials, PerformanceInsightRetention, RotationMultiUserOptions, RotationSingleUserOptions, SnapshotCredentials } from './props';\nimport { DatabaseProxy, DatabaseProxyOptions, ProxyTarget } from './proxy';\nimport { CfnDBInstance, CfnDBInstanceProps } from './rds.generated';\nimport { ISubnetGroup, SubnetGroup } from './subnet-group';\n\n/**\n * A database instance\n */\nexport interface IDatabaseInstance extends IResource, ec2.IConnectable, secretsmanager.ISecretAttachmentTarget {\n  /**\n   * The instance identifier.\n   */\n  readonly instanceIdentifier: string;\n\n  /**\n   * The instance arn.\n   */\n  readonly instanceArn: string;\n\n  /**\n   * The instance endpoint address.\n   *\n   * @attribute EndpointAddress\n   */\n  readonly dbInstanceEndpointAddress: string;\n\n  /**\n   * The instance endpoint port.\n   *\n   * @attribute EndpointPort\n   */\n  readonly dbInstanceEndpointPort: string;\n\n  /**\n   * The instance endpoint.\n   */\n  readonly instanceEndpoint: Endpoint;\n\n  /**\n   * The engine of this database Instance.\n   * May be not known for imported Instances if it wasn't provided explicitly,\n   * or for read replicas.\n   */\n  readonly engine?: IInstanceEngine;\n\n  /**\n   * Add a new db proxy to this instance.\n   */\n  addProxy(id: string, options: DatabaseProxyOptions): DatabaseProxy;\n\n  /**\n   * Grant the given identity connection access to the database.\n   * **Note**: this method does not currently work, see https://github.com/aws/aws-cdk/issues/11851 for details.\n   * @see https://github.com/aws/aws-cdk/issues/11851\n   */\n  grantConnect(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Defines a CloudWatch event rule which triggers for instance events. Use\n   * `rule.addEventPattern(pattern)` to specify a filter.\n   */\n  onEvent(id: string, options?: events.OnEventOptions): events.Rule;\n}\n\n/**\n * Properties that describe an existing instance\n */\nexport interface DatabaseInstanceAttributes {\n  /**\n   * The instance identifier.\n   */\n  readonly instanceIdentifier: string;\n\n  /**\n   * The endpoint address.\n   */\n  readonly instanceEndpointAddress: string;\n\n  /**\n   * The database port.\n   */\n  readonly port: number;\n\n  /**\n   * The security groups of the instance.\n   */\n  readonly securityGroups: ec2.ISecurityGroup[];\n\n  /**\n   * The engine of the existing database Instance.\n   *\n   * @default - the imported Instance's engine is unknown\n   */\n  readonly engine?: IInstanceEngine;\n}\n\n/**\n * A new or imported database instance.\n */\nexport abstract class DatabaseInstanceBase extends Resource implements IDatabaseInstance {\n  /**\n   * Import an existing database instance.\n   */\n  public static fromDatabaseInstanceAttributes(scope: Construct, id: string, attrs: DatabaseInstanceAttributes): IDatabaseInstance {\n    class Import extends DatabaseInstanceBase implements IDatabaseInstance {\n      public readonly defaultPort = ec2.Port.tcp(attrs.port);\n      public readonly connections = new ec2.Connections({\n        securityGroups: attrs.securityGroups,\n        defaultPort: this.defaultPort,\n      });\n      public readonly instanceIdentifier = attrs.instanceIdentifier;\n      public readonly dbInstanceEndpointAddress = attrs.instanceEndpointAddress;\n      public readonly dbInstanceEndpointPort = Tokenization.stringifyNumber(attrs.port);\n      public readonly instanceEndpoint = new Endpoint(attrs.instanceEndpointAddress, attrs.port);\n      public readonly engine = attrs.engine;\n      protected enableIamAuthentication = true;\n    }\n\n    return new Import(scope, id);\n  }\n\n  public abstract readonly instanceIdentifier: string;\n  public abstract readonly dbInstanceEndpointAddress: string;\n  public abstract readonly dbInstanceEndpointPort: string;\n  public abstract readonly instanceEndpoint: Endpoint;\n  // only required because of JSII bug: https://github.com/aws/jsii/issues/2040\n  public abstract readonly engine?: IInstanceEngine;\n  protected abstract enableIamAuthentication?: boolean;\n\n  /**\n   * Access to network connections.\n   */\n  public abstract readonly connections: ec2.Connections;\n\n  /**\n   * Add a new db proxy to this instance.\n   */\n  public addProxy(id: string, options: DatabaseProxyOptions): DatabaseProxy {\n    return new DatabaseProxy(this, id, {\n      proxyTarget: ProxyTarget.fromInstance(this),\n      ...options,\n    });\n  }\n\n  public grantConnect(grantee: iam.IGrantable): iam.Grant {\n    if (this.enableIamAuthentication === false) {\n      throw new Error('Cannot grant connect when IAM authentication is disabled');\n    }\n\n    this.enableIamAuthentication = true;\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['rds-db:connect'],\n      resourceArns: [this.instanceArn],\n    });\n  }\n\n  /**\n   * Defines a CloudWatch event rule which triggers for instance events. Use\n   * `rule.addEventPattern(pattern)` to specify a filter.\n   */\n  public onEvent(id: string, options: events.OnEventOptions = {}) {\n    const rule = new events.Rule(this, id, options);\n    rule.addEventPattern({\n      source: ['aws.rds'],\n      resources: [this.instanceArn],\n    });\n    rule.addTarget(options.target);\n    return rule;\n  }\n\n  /**\n   * The instance arn.\n   */\n  public get instanceArn(): string {\n    const commonAnComponents: ArnComponents = {\n      service: 'rds',\n      resource: 'db',\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n    };\n    const localArn = Stack.of(this).formatArn({\n      ...commonAnComponents,\n      resourceName: this.instanceIdentifier,\n    });\n    return this.getResourceArnAttribute(localArn, {\n      ...commonAnComponents,\n      resourceName: this.physicalName,\n    });\n  }\n\n  /**\n   * Renders the secret attachment target specifications.\n   */\n  public asSecretAttachmentTarget(): secretsmanager.SecretAttachmentTargetProps {\n    return {\n      targetId: this.instanceIdentifier,\n      targetType: secretsmanager.AttachmentTargetType.RDS_DB_INSTANCE,\n    };\n  }\n}\n\n/**\n * The license model.\n */\nexport enum LicenseModel {\n  /**\n   * License included.\n   */\n  LICENSE_INCLUDED = 'license-included',\n\n  /**\n   * Bring your own licencse.\n   */\n  BRING_YOUR_OWN_LICENSE = 'bring-your-own-license',\n\n  /**\n   * General public license.\n   */\n  GENERAL_PUBLIC_LICENSE = 'general-public-license'\n}\n\n/**\n * The processor features.\n */\nexport interface ProcessorFeatures {\n  /**\n   * The number of CPU core.\n   *\n   * @default - the default number of CPU cores for the chosen instance class.\n   */\n  readonly coreCount?: number;\n\n  /**\n   * The number of threads per core.\n   *\n   * @default - the default number of threads per core for the chosen instance class.\n   */\n  readonly threadsPerCore?: number;\n}\n\n/**\n * The type of storage.\n */\nexport enum StorageType {\n  /**\n   * Standard.\n   */\n  STANDARD = 'standard',\n\n  /**\n   * General purpose (SSD).\n   */\n  GP2 = 'gp2',\n\n  /**\n   * Provisioned IOPS (SSD).\n   */\n  IO1 = 'io1'\n}\n\n/**\n * Construction properties for a DatabaseInstanceNew\n */\nexport interface DatabaseInstanceNewProps {\n  /**\n   * Specifies if the database instance is a multiple Availability Zone deployment.\n   *\n   * @default false\n   */\n  readonly multiAz?: boolean;\n\n  /**\n   * The name of the Availability Zone where the DB instance will be located.\n   *\n   * @default - no preference\n   */\n  readonly availabilityZone?: string;\n\n  /**\n   * The storage type. Storage types supported are gp2, io1, standard.\n   *\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#Concepts.Storage.GeneralSSD\n   *\n   * @default GP2\n   */\n  readonly storageType?: StorageType;\n\n  /**\n   * The number of I/O operations per second (IOPS) that the database provisions.\n   * The value must be equal to or greater than 1000.\n   *\n   * @default - no provisioned iops\n   */\n  readonly iops?: number;\n\n  /**\n   * The number of CPU cores and the number of threads per core.\n   *\n   * @default - the default number of CPU cores and threads per core for the\n   * chosen instance class.\n   *\n   * See https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor\n   */\n  readonly processorFeatures?: ProcessorFeatures;\n\n  /**\n   * A name for the DB instance. If you specify a name, AWS CloudFormation\n   * converts it to lowercase.\n   *\n   * @default - a CloudFormation generated name\n   */\n  readonly instanceIdentifier?: string;\n\n  /**\n   * The VPC network where the DB subnet group should be created.\n   */\n  readonly vpc: ec2.IVpc;\n\n  /**\n   * The type of subnets to add to the created DB subnet group.\n   *\n   * @deprecated use `vpcSubnets`\n   * @default - private subnets\n   */\n  readonly vpcPlacement?: ec2.SubnetSelection;\n\n  /**\n   * The type of subnets to add to the created DB subnet group.\n   *\n   * @default - private subnets\n   */\n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n  /**\n   * The security groups to assign to the DB instance.\n   *\n   * @default - a new security group is created\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n  /**\n   * The port for the instance.\n   *\n   * @default - the default port for the chosen engine.\n   */\n  readonly port?: number;\n\n  /**\n   * The DB parameter group to associate with the instance.\n   *\n   * @default - no parameter group\n   */\n  readonly parameterGroup?: IParameterGroup;\n\n  /**\n   * The option group to associate with the instance.\n   *\n   * @default - no option group\n   */\n  readonly optionGroup?: IOptionGroup;\n\n  /**\n   * Whether to enable mapping of AWS Identity and Access Management (IAM) accounts\n   * to database accounts.\n   *\n   * @default false\n   */\n  readonly iamAuthentication?: boolean;\n\n  /**\n   * The number of days during which automatic DB snapshots are retained.\n   * Set to zero to disable backups.\n   * When creating a read replica, you must enable automatic backups on the source\n   * database instance by setting the backup retention to a value other than zero.\n   *\n   * @default - Duration.days(1) for source instances, disabled for read replicas\n   */\n  readonly backupRetention?: Duration;\n\n  /**\n   * The daily time range during which automated backups are performed.\n   *\n   * Constraints:\n   * - Must be in the format `hh24:mi-hh24:mi`.\n   * - Must be in Universal Coordinated Time (UTC).\n   * - Must not conflict with the preferred maintenance window.\n   * - Must be at least 30 minutes.\n   *\n   * @default - a 30-minute window selected at random from an 8-hour block of\n   * time for each AWS Region. To see the time blocks available, see\n   * https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow\n   */\n  readonly preferredBackupWindow?: string;\n\n  /**\n   * Indicates whether to copy all of the user-defined tags from the\n   * DB instance to snapshots of the DB instance.\n   *\n   * @default true\n   */\n  readonly copyTagsToSnapshot?: boolean;\n\n  /**\n   * Indicates whether automated backups should be deleted or retained when\n   * you delete a DB instance.\n   *\n   * @default false\n   */\n  readonly deleteAutomatedBackups?: boolean;\n\n  /**\n   * The interval, in seconds, between points when Amazon RDS collects enhanced\n   * monitoring metrics for the DB instance.\n   *\n   * @default - no enhanced monitoring\n   */\n  readonly monitoringInterval?: Duration;\n\n  /**\n   * Role that will be used to manage DB instance monitoring.\n   *\n   * @default - A role is automatically created for you\n   */\n  readonly monitoringRole?: iam.IRole;\n\n  /**\n   * Whether to enable Performance Insights for the DB instance.\n   *\n   * @default - false, unless ``performanceInsightRentention`` or ``performanceInsightEncryptionKey`` is set.\n   */\n  readonly enablePerformanceInsights?: boolean;\n\n  /**\n   * The amount of time, in days, to retain Performance Insights data.\n   *\n   * @default 7\n   */\n  readonly performanceInsightRetention?: PerformanceInsightRetention;\n\n  /**\n   * The AWS KMS key for encryption of Performance Insights data.\n   *\n   * @default - default master key\n   */\n  readonly performanceInsightEncryptionKey?: kms.IKey;\n\n  /**\n   * The list of log types that need to be enabled for exporting to\n   * CloudWatch Logs.\n   *\n   * @default - no log exports\n   */\n  readonly cloudwatchLogsExports?: string[];\n\n  /**\n   * The number of days log events are kept in CloudWatch Logs. When updating\n   * this property, unsetting it doesn't remove the log retention policy. To\n   * remove the retention policy, set the value to `Infinity`.\n   *\n   * @default - logs never expire\n   */\n  readonly cloudwatchLogsRetention?: logs.RetentionDays;\n\n  /**\n   * The IAM role for the Lambda function associated with the custom resource\n   * that sets the retention policy.\n   *\n   * @default - a new role is created.\n   */\n  readonly cloudwatchLogsRetentionRole?: iam.IRole;\n\n  /**\n   * Indicates that minor engine upgrades are applied automatically to the\n   * DB instance during the maintenance window.\n   *\n   * @default true\n   */\n  readonly autoMinorVersionUpgrade?: boolean;\n\n  /**\n   * The weekly time range (in UTC) during which system maintenance can occur.\n   *\n   * Format: `ddd:hh24:mi-ddd:hh24:mi`\n   * Constraint: Minimum 30-minute window\n   *\n   * @default - a 30-minute window selected at random from an 8-hour block of\n   * time for each AWS Region, occurring on a random day of the week. To see\n   * the time blocks available, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance\n   */\n  readonly preferredMaintenanceWindow?: string;\n\n  /**\n   * Indicates whether the DB instance should have deletion protection enabled.\n   *\n   * @default - true if ``removalPolicy`` is RETAIN, false otherwise\n   */\n  readonly deletionProtection?: boolean;\n\n  /**\n   * The CloudFormation policy to apply when the instance is removed from the\n   * stack or replaced during an update.\n   *\n   * @default - RemovalPolicy.SNAPSHOT (remove the resource, but retain a snapshot of the data)\n   */\n  readonly removalPolicy?: RemovalPolicy;\n\n  /**\n   * Upper limit to which RDS can scale the storage in GiB(Gibibyte).\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling\n   * @default - No autoscaling of RDS instance\n   */\n  readonly maxAllocatedStorage?: number;\n\n  /**\n   * The Active Directory directory ID to create the DB instance in.\n   *\n   * @default - Do not join domain\n   */\n  readonly domain?: string;\n\n  /**\n   * The IAM role to be used when making API calls to the Directory Service. The role needs the AWS-managed policy\n   * AmazonRDSDirectoryServiceAccess or equivalent.\n   *\n   * @default - The role will be created for you if {@link DatabaseInstanceNewProps#domain} is specified\n   */\n  readonly domainRole?: iam.IRole;\n\n  /**\n   * Existing subnet group for the instance.\n   *\n   * @default - a new subnet group will be created.\n   */\n  readonly subnetGroup?: ISubnetGroup;\n\n  /**\n   * Role that will be associated with this DB instance to enable S3 import.\n   * This feature is only supported by the Microsoft SQL Server, Oracle, and PostgreSQL engines.\n   *\n   * This property must not be used if `s3ImportBuckets` is used.\n   *\n   * For Microsoft SQL Server:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.Procedural.Importing.html\n   * For Oracle:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-s3-integration.html\n   * For PostgreSQL:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/PostgreSQL.Procedural.Importing.html\n   *\n   * @default - New role is created if `s3ImportBuckets` is set, no role is defined otherwise\n   */\n  readonly s3ImportRole?: iam.IRole;\n\n  /**\n   * S3 buckets that you want to load data from.\n   * This feature is only supported by the Microsoft SQL Server, Oracle, and PostgreSQL engines.\n   *\n   * This property must not be used if `s3ImportRole` is used.\n   *\n   * For Microsoft SQL Server:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.Procedural.Importing.html\n   * For Oracle:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-s3-integration.html\n   * For PostgreSQL:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/PostgreSQL.Procedural.Importing.html\n   *\n   * @default - None\n   */\n  readonly s3ImportBuckets?: s3.IBucket[];\n\n  /**\n   * Role that will be associated with this DB instance to enable S3 export.\n   *\n   * This property must not be used if `s3ExportBuckets` is used.\n   *\n   * For Microsoft SQL Server:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.Procedural.Importing.html\n   * For Oracle:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-s3-integration.html\n   *\n   * @default - New role is created if `s3ExportBuckets` is set, no role is defined otherwise\n   */\n  readonly s3ExportRole?: iam.IRole;\n\n  /**\n   * S3 buckets that you want to load data into.\n   *\n   * This property must not be used if `s3ExportRole` is used.\n   *\n   * For Microsoft SQL Server:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.Procedural.Importing.html\n   * For Oracle:\n   * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-s3-integration.html\n   *\n   * @default - None\n   */\n  readonly s3ExportBuckets?: s3.IBucket[];\n\n  /**\n   * Indicates whether the DB instance is an internet-facing instance.\n   *\n   * @default - `true` if `vpcSubnets` is `subnetType: SubnetType.PUBLIC`, `false` otherwise\n   */\n  readonly publiclyAccessible?: boolean;\n}\n\n/**\n * A new database instance.\n */\nabstract class DatabaseInstanceNew extends DatabaseInstanceBase implements IDatabaseInstance {\n  /**\n   * The VPC where this database instance is deployed.\n   */\n  public readonly vpc: ec2.IVpc;\n\n  public readonly connections: ec2.Connections;\n\n  protected abstract readonly instanceType: ec2.InstanceType;\n\n  protected readonly vpcPlacement?: ec2.SubnetSelection;\n  protected readonly newCfnProps: CfnDBInstanceProps;\n\n  private readonly cloudwatchLogsExports?: string[];\n  private readonly cloudwatchLogsRetention?: logs.RetentionDays;\n  private readonly cloudwatchLogsRetentionRole?: iam.IRole;\n\n  private readonly domainId?: string;\n  private readonly domainRole?: iam.IRole;\n\n  protected enableIamAuthentication?: boolean;\n\n  constructor(scope: Construct, id: string, props: DatabaseInstanceNewProps) {\n    // RDS always lower-cases the ID of the database, so use that for the physical name\n    // (which is the name used for cross-environment access, so it needs to be correct,\n    // regardless of the feature flag that changes it in the template for the L1)\n    const instancePhysicalName = Token.isUnresolved(props.instanceIdentifier)\n      ? props.instanceIdentifier\n      : props.instanceIdentifier?.toLowerCase();\n    super(scope, id, {\n      physicalName: instancePhysicalName,\n    });\n\n    this.vpc = props.vpc;\n    if (props.vpcSubnets && props.vpcPlacement) {\n      throw new Error('Only one of `vpcSubnets` or `vpcPlacement` can be specified');\n    }\n    this.vpcPlacement = props.vpcSubnets ?? props.vpcPlacement;\n\n    if (props.multiAz === true && props.availabilityZone) {\n      throw new Error('Requesting a specific availability zone is not valid for Multi-AZ instances');\n    }\n\n    const subnetGroup = props.subnetGroup ?? new SubnetGroup(this, 'SubnetGroup', {\n      description: `Subnet group for ${this.node.id} database`,\n      vpc: this.vpc,\n      vpcSubnets: this.vpcPlacement,\n      removalPolicy: renderUnless(helperRemovalPolicy(props.removalPolicy), RemovalPolicy.DESTROY),\n    });\n\n    const securityGroups = props.securityGroups || [new ec2.SecurityGroup(this, 'SecurityGroup', {\n      description: `Security group for ${this.node.id} database`,\n      vpc: props.vpc,\n    })];\n\n    this.connections = new ec2.Connections({\n      securityGroups,\n      defaultPort: ec2.Port.tcp(Lazy.number({ produce: () => this.instanceEndpoint.port })),\n    });\n\n    let monitoringRole;\n    if (props.monitoringInterval && props.monitoringInterval.toSeconds()) {\n      monitoringRole = props.monitoringRole || new iam.Role(this, 'MonitoringRole', {\n        assumedBy: new iam.ServicePrincipal('monitoring.rds.amazonaws.com'),\n        managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSEnhancedMonitoringRole')],\n      });\n    }\n\n    const storageType = props.storageType || StorageType.GP2;\n    const iops = storageType === StorageType.IO1 ? (props.iops || 1000) : undefined;\n\n    this.cloudwatchLogsExports = props.cloudwatchLogsExports;\n    this.cloudwatchLogsRetention = props.cloudwatchLogsRetention;\n    this.cloudwatchLogsRetentionRole = props.cloudwatchLogsRetentionRole;\n    this.enableIamAuthentication = props.iamAuthentication;\n\n    const enablePerformanceInsights = props.enablePerformanceInsights\n      || props.performanceInsightRetention !== undefined || props.performanceInsightEncryptionKey !== undefined;\n    if (enablePerformanceInsights && props.enablePerformanceInsights === false) {\n      throw new Error('`enablePerformanceInsights` disabled, but `performanceInsightRetention` or `performanceInsightEncryptionKey` was set');\n    }\n\n    if (props.domain) {\n      this.domainId = props.domain;\n      this.domainRole = props.domainRole || new iam.Role(this, 'RDSDirectoryServiceRole', {\n        assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n        managedPolicies: [\n          iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n        ],\n      });\n    }\n\n    const maybeLowercasedInstanceId = FeatureFlags.of(this).isEnabled(cxapi.RDS_LOWERCASE_DB_IDENTIFIER)\n      ? props.instanceIdentifier?.toLowerCase()\n      : props.instanceIdentifier;\n\n    const instanceParameterGroupConfig = props.parameterGroup?.bindToInstance({});\n    this.newCfnProps = {\n      autoMinorVersionUpgrade: props.autoMinorVersionUpgrade,\n      availabilityZone: props.multiAz ? undefined : props.availabilityZone,\n      backupRetentionPeriod: props.backupRetention?.toDays(),\n      copyTagsToSnapshot: props.copyTagsToSnapshot ?? true,\n      dbInstanceClass: Lazy.string({ produce: () => `db.${this.instanceType}` }),\n      dbInstanceIdentifier: Token.isUnresolved(props.instanceIdentifier)\n        // if the passed identifier is a Token,\n        // we need to use the physicalName of the database\n        // (we cannot change its case anyway),\n        // as it might be used in a cross-environment fashion\n        ? this.physicalName\n        : maybeLowercasedInstanceId,\n      dbSubnetGroupName: subnetGroup.subnetGroupName,\n      deleteAutomatedBackups: props.deleteAutomatedBackups,\n      deletionProtection: defaultDeletionProtection(props.deletionProtection, props.removalPolicy),\n      enableCloudwatchLogsExports: this.cloudwatchLogsExports,\n      enableIamDatabaseAuthentication: Lazy.any({ produce: () => this.enableIamAuthentication }),\n      enablePerformanceInsights: enablePerformanceInsights || props.enablePerformanceInsights, // fall back to undefined if not set,\n      iops,\n      monitoringInterval: props.monitoringInterval?.toSeconds(),\n      monitoringRoleArn: monitoringRole?.roleArn,\n      multiAz: props.multiAz,\n      dbParameterGroupName: instanceParameterGroupConfig?.parameterGroupName,\n      optionGroupName: props.optionGroup?.optionGroupName,\n      performanceInsightsKmsKeyId: props.performanceInsightEncryptionKey?.keyArn,\n      performanceInsightsRetentionPeriod: enablePerformanceInsights\n        ? (props.performanceInsightRetention || PerformanceInsightRetention.DEFAULT)\n        : undefined,\n      port: props.port !== undefined ? Tokenization.stringifyNumber(props.port) : undefined,\n      preferredBackupWindow: props.preferredBackupWindow,\n      preferredMaintenanceWindow: props.preferredMaintenanceWindow,\n      processorFeatures: props.processorFeatures && renderProcessorFeatures(props.processorFeatures),\n      publiclyAccessible: props.publiclyAccessible ?? (this.vpcPlacement && this.vpcPlacement.subnetType === ec2.SubnetType.PUBLIC),\n      storageType,\n      vpcSecurityGroups: securityGroups.map(s => s.securityGroupId),\n      maxAllocatedStorage: props.maxAllocatedStorage,\n      domain: this.domainId,\n      domainIamRoleName: this.domainRole?.roleName,\n    };\n  }\n\n  protected setLogRetention() {\n    if (this.cloudwatchLogsExports && this.cloudwatchLogsRetention) {\n      for (const log of this.cloudwatchLogsExports) {\n        new logs.LogRetention(this, `LogRetention${log}`, {\n          logGroupName: `/aws/rds/instance/${this.instanceIdentifier}/${log}`,\n          retention: this.cloudwatchLogsRetention,\n          role: this.cloudwatchLogsRetentionRole,\n        });\n      }\n    }\n  }\n}\n\n/**\n * Construction properties for a DatabaseInstanceSource\n */\nexport interface DatabaseInstanceSourceProps extends DatabaseInstanceNewProps {\n  /**\n   * The database engine.\n   */\n  readonly engine: IInstanceEngine;\n\n  /**\n   * The name of the compute and memory capacity for the instance.\n   *\n   * @default - m5.large (or, more specifically, db.m5.large)\n   */\n  readonly instanceType?: ec2.InstanceType;\n\n  /**\n   * The license model.\n   *\n   * @default - RDS default license model\n   */\n  readonly licenseModel?: LicenseModel;\n\n  /**\n   * Whether to allow major version upgrades.\n   *\n   * @default false\n   */\n  readonly allowMajorVersionUpgrade?: boolean;\n\n  /**\n   * The time zone of the instance. This is currently supported only by Microsoft Sql Server.\n   *\n   * @default - RDS default timezone\n   */\n  readonly timezone?: string;\n\n  /**\n   * The allocated storage size, specified in gigabytes (GB).\n   *\n   * @default 100\n   */\n  readonly allocatedStorage?: number;\n\n  /**\n   * The name of the database.\n   *\n   * @default - no name\n   */\n  readonly databaseName?: string;\n\n  /**\n   * The parameters in the DBParameterGroup to create automatically\n   *\n   * You can only specify parameterGroup or parameters but not both.\n   * You need to use a versioned engine to auto-generate a DBParameterGroup.\n   *\n   * @default - None\n   */\n  readonly parameters?: { [key: string]: string };\n}\n\n/**\n * A new source database instance (not a read replica)\n */\nabstract class DatabaseInstanceSource extends DatabaseInstanceNew implements IDatabaseInstance {\n  public readonly engine?: IInstanceEngine;\n  /**\n   * The AWS Secrets Manager secret attached to the instance.\n   */\n  public abstract readonly secret?: secretsmanager.ISecret;\n\n  protected readonly sourceCfnProps: CfnDBInstanceProps;\n  protected readonly instanceType: ec2.InstanceType;\n\n  private readonly singleUserRotationApplication: secretsmanager.SecretRotationApplication;\n  private readonly multiUserRotationApplication: secretsmanager.SecretRotationApplication;\n\n  constructor(scope: Construct, id: string, props: DatabaseInstanceSourceProps) {\n    super(scope, id, props);\n\n    this.singleUserRotationApplication = props.engine.singleUserRotationApplication;\n    this.multiUserRotationApplication = props.engine.multiUserRotationApplication;\n    this.engine = props.engine;\n\n    const engineType = props.engine.engineType;\n    // only Oracle and SQL Server require the import and export Roles to be the same\n    const combineRoles = engineType.startsWith('oracle-') || engineType.startsWith('sqlserver-');\n    let { s3ImportRole, s3ExportRole } = setupS3ImportExport(this, props, combineRoles);\n    const engineConfig = props.engine.bindToInstance(this, {\n      ...props,\n      s3ImportRole,\n      s3ExportRole,\n    });\n\n    const instanceAssociatedRoles: CfnDBInstance.DBInstanceRoleProperty[] = [];\n    const engineFeatures = engineConfig.features;\n    if (s3ImportRole) {\n      if (!engineFeatures?.s3Import) {\n        throw new Error(`Engine '${engineDescription(props.engine)}' does not support S3 import`);\n      }\n      instanceAssociatedRoles.push({ roleArn: s3ImportRole.roleArn, featureName: engineFeatures?.s3Import });\n    }\n    if (s3ExportRole) {\n      if (!engineFeatures?.s3Export) {\n        throw new Error(`Engine '${engineDescription(props.engine)}' does not support S3 export`);\n      }\n      // only add the export feature if it's different from the import feature\n      if (engineFeatures.s3Import !== engineFeatures?.s3Export) {\n        instanceAssociatedRoles.push({ roleArn: s3ExportRole.roleArn, featureName: engineFeatures?.s3Export });\n      }\n    }\n\n    this.instanceType = props.instanceType ?? ec2.InstanceType.of(ec2.InstanceClass.M5, ec2.InstanceSize.LARGE);\n\n    if (props.parameterGroup && props.parameters) {\n      throw new Error('You cannot specify both parameterGroup and parameters');\n    }\n\n    const dbParameterGroupName = props.parameters\n      ? new ParameterGroup(this, 'ParameterGroup', {\n        engine: props.engine,\n        parameters: props.parameters,\n      }).bindToInstance({}).parameterGroupName\n      : this.newCfnProps.dbParameterGroupName;\n\n    this.sourceCfnProps = {\n      ...this.newCfnProps,\n      associatedRoles: instanceAssociatedRoles.length > 0 ? instanceAssociatedRoles : undefined,\n      optionGroupName: engineConfig.optionGroup?.optionGroupName,\n      allocatedStorage: props.allocatedStorage?.toString() ?? '100',\n      allowMajorVersionUpgrade: props.allowMajorVersionUpgrade,\n      dbName: props.databaseName,\n      engine: engineType,\n      engineVersion: props.engine.engineVersion?.fullVersion,\n      licenseModel: props.licenseModel,\n      timezone: props.timezone,\n      dbParameterGroupName,\n    };\n  }\n\n  /**\n   * Adds the single user rotation of the master password to this instance.\n   *\n   * @param options the options for the rotation,\n   *                if you want to override the defaults\n   */\n  public addRotationSingleUser(options: RotationSingleUserOptions = {}): secretsmanager.SecretRotation {\n    if (!this.secret) {\n      throw new Error('Cannot add single user rotation for an instance without secret.');\n    }\n\n    const id = 'RotationSingleUser';\n    const existing = this.node.tryFindChild(id);\n    if (existing) {\n      throw new Error('A single user rotation was already added to this instance.');\n    }\n\n    return new secretsmanager.SecretRotation(this, id, {\n      ...applyDefaultRotationOptions(options, this.vpcPlacement),\n      secret: this.secret,\n      application: this.singleUserRotationApplication,\n      vpc: this.vpc,\n      target: this,\n    });\n  }\n\n  /**\n   * Adds the multi user rotation to this instance.\n   */\n  public addRotationMultiUser(id: string, options: RotationMultiUserOptions): secretsmanager.SecretRotation {\n    if (!this.secret) {\n      throw new Error('Cannot add multi user rotation for an instance without secret.');\n    }\n\n    return new secretsmanager.SecretRotation(this, id, {\n      ...applyDefaultRotationOptions(options, this.vpcPlacement),\n      secret: options.secret,\n      masterSecret: this.secret,\n      application: this.multiUserRotationApplication,\n      vpc: this.vpc,\n      target: this,\n    });\n  }\n}\n\n/**\n * Construction properties for a DatabaseInstance.\n */\nexport interface DatabaseInstanceProps extends DatabaseInstanceSourceProps {\n  /**\n   * Credentials for the administrative user\n   *\n   * @default - A username of 'admin' (or 'postgres' for PostgreSQL) and SecretsManager-generated password\n   */\n  readonly credentials?: Credentials;\n\n  /**\n   * For supported engines, specifies the character set to associate with the\n   * DB instance.\n   *\n   * @default - RDS default character set name\n   */\n  readonly characterSetName?: string;\n\n  /**\n   * Indicates whether the DB instance is encrypted.\n   *\n   * @default - true if storageEncryptionKey has been provided, false otherwise\n   */\n  readonly storageEncrypted?: boolean;\n\n  /**\n   * The KMS key that's used to encrypt the DB instance.\n   *\n   * @default - default master key if storageEncrypted is true, no key otherwise\n   */\n  readonly storageEncryptionKey?: kms.IKey;\n}\n\n/**\n * A database instance\n *\n * @resource AWS::RDS::DBInstance\n */\nexport class DatabaseInstance extends DatabaseInstanceSource implements IDatabaseInstance {\n  public readonly instanceIdentifier: string;\n  public readonly dbInstanceEndpointAddress: string;\n  public readonly dbInstanceEndpointPort: string;\n  public readonly instanceEndpoint: Endpoint;\n  public readonly secret?: secretsmanager.ISecret;\n\n  constructor(scope: Construct, id: string, props: DatabaseInstanceProps) {\n    super(scope, id, props);\n\n    const credentials = renderCredentials(this, props.engine, props.credentials);\n    const secret = credentials.secret;\n\n    const instance = new CfnDBInstance(this, 'Resource', {\n      ...this.sourceCfnProps,\n      characterSetName: props.characterSetName,\n      kmsKeyId: props.storageEncryptionKey && props.storageEncryptionKey.keyArn,\n      masterUsername: credentials.username,\n      masterUserPassword: credentials.password?.toString(),\n      storageEncrypted: props.storageEncryptionKey ? true : props.storageEncrypted,\n    });\n\n    this.instanceIdentifier = this.getResourceNameAttribute(instance.ref);\n    this.dbInstanceEndpointAddress = instance.attrEndpointAddress;\n    this.dbInstanceEndpointPort = instance.attrEndpointPort;\n\n    // create a number token that represents the port of the instance\n    const portAttribute = Token.asNumber(instance.attrEndpointPort);\n    this.instanceEndpoint = new Endpoint(instance.attrEndpointAddress, portAttribute);\n\n    instance.applyRemovalPolicy(props.removalPolicy ?? RemovalPolicy.SNAPSHOT);\n\n    if (secret) {\n      this.secret = secret.attach(this);\n    }\n\n    this.setLogRetention();\n  }\n}\n\n/**\n * Construction properties for a DatabaseInstanceFromSnapshot.\n */\nexport interface DatabaseInstanceFromSnapshotProps extends DatabaseInstanceSourceProps {\n  /**\n   * The name or Amazon Resource Name (ARN) of the DB snapshot that's used to\n   * restore the DB instance. If you're restoring from a shared manual DB\n   * snapshot, you must specify the ARN of the snapshot.\n   */\n  readonly snapshotIdentifier: string;\n\n  /**\n   * Master user credentials.\n   *\n   * Note - It is not possible to change the master username for a snapshot;\n   * however, it is possible to provide (or generate) a new password.\n   *\n   * @default - The existing username and password from the snapshot will be used.\n   */\n  readonly credentials?: SnapshotCredentials;\n}\n\n/**\n * A database instance restored from a snapshot.\n *\n * @resource AWS::RDS::DBInstance\n */\nexport class DatabaseInstanceFromSnapshot extends DatabaseInstanceSource implements IDatabaseInstance {\n  public readonly instanceIdentifier: string;\n  public readonly dbInstanceEndpointAddress: string;\n  public readonly dbInstanceEndpointPort: string;\n  public readonly instanceEndpoint: Endpoint;\n  public readonly secret?: secretsmanager.ISecret;\n\n  constructor(scope: Construct, id: string, props: DatabaseInstanceFromSnapshotProps) {\n    super(scope, id, props);\n\n    let credentials = props.credentials;\n    let secret = credentials?.secret;\n    if (!secret && credentials?.generatePassword) {\n      if (!credentials.username) {\n        throw new Error('`credentials` `username` must be specified when `generatePassword` is set to true');\n      }\n\n      secret = new DatabaseSecret(this, 'Secret', {\n        username: credentials.username,\n        encryptionKey: credentials.encryptionKey,\n        excludeCharacters: credentials.excludeCharacters,\n        replaceOnPasswordCriteriaChanges: credentials.replaceOnPasswordCriteriaChanges,\n        replicaRegions: credentials.replicaRegions,\n      });\n    }\n\n    const instance = new CfnDBInstance(this, 'Resource', {\n      ...this.sourceCfnProps,\n      dbSnapshotIdentifier: props.snapshotIdentifier,\n      masterUserPassword: secret?.secretValueFromJson('password')?.toString() ?? credentials?.password?.toString(),\n    });\n\n    this.instanceIdentifier = instance.ref;\n    this.dbInstanceEndpointAddress = instance.attrEndpointAddress;\n    this.dbInstanceEndpointPort = instance.attrEndpointPort;\n\n    // create a number token that represents the port of the instance\n    const portAttribute = Token.asNumber(instance.attrEndpointPort);\n    this.instanceEndpoint = new Endpoint(instance.attrEndpointAddress, portAttribute);\n\n    instance.applyRemovalPolicy(props.removalPolicy ?? RemovalPolicy.SNAPSHOT);\n\n    if (secret) {\n      this.secret = secret.attach(this);\n    }\n\n    this.setLogRetention();\n  }\n}\n\n/**\n * Construction properties for a DatabaseInstanceReadReplica.\n */\nexport interface DatabaseInstanceReadReplicaProps extends DatabaseInstanceNewProps {\n  /**\n   * The name of the compute and memory capacity classes.\n   */\n  readonly instanceType: ec2.InstanceType;\n\n  /**\n   * The source database instance.\n   *\n   * Each DB instance can have a limited number of read replicas. For more\n   * information, see https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_ReadRepl.html.\n   *\n   */\n  readonly sourceDatabaseInstance: IDatabaseInstance;\n\n  /**\n   * Indicates whether the DB instance is encrypted.\n   *\n   * @default - true if storageEncryptionKey has been provided, false otherwise\n   */\n  readonly storageEncrypted?: boolean;\n\n  /**\n   * The KMS key that's used to encrypt the DB instance.\n   *\n   * @default - default master key if storageEncrypted is true, no key otherwise\n   */\n  readonly storageEncryptionKey?: kms.IKey;\n}\n\n/**\n * A read replica database instance.\n *\n * @resource AWS::RDS::DBInstance\n */\nexport class DatabaseInstanceReadReplica extends DatabaseInstanceNew implements IDatabaseInstance {\n  public readonly instanceIdentifier: string;\n  public readonly dbInstanceEndpointAddress: string;\n  public readonly dbInstanceEndpointPort: string;\n  public readonly instanceEndpoint: Endpoint;\n  public readonly engine?: IInstanceEngine = undefined;\n  protected readonly instanceType: ec2.InstanceType;\n\n  constructor(scope: Construct, id: string, props: DatabaseInstanceReadReplicaProps) {\n    super(scope, id, props);\n\n    if (props.sourceDatabaseInstance.engine\n        && !props.sourceDatabaseInstance.engine.supportsReadReplicaBackups\n        && props.backupRetention) {\n      throw new Error(`Cannot set 'backupRetention', as engine '${engineDescription(props.sourceDatabaseInstance.engine)}' does not support automatic backups for read replicas`);\n    }\n\n    // The read replica instance always uses the same engine as the source instance\n    // but some CF validations require the engine to be explicitely passed when some\n    // properties are specified.\n    const shouldPassEngine = props.domain != null;\n\n    const instance = new CfnDBInstance(this, 'Resource', {\n      ...this.newCfnProps,\n      // this must be ARN, not ID, because of https://github.com/terraform-providers/terraform-provider-aws/issues/528#issuecomment-391169012\n      sourceDbInstanceIdentifier: props.sourceDatabaseInstance.instanceArn,\n      kmsKeyId: props.storageEncryptionKey?.keyArn,\n      storageEncrypted: props.storageEncryptionKey ? true : props.storageEncrypted,\n      engine: shouldPassEngine ? props.sourceDatabaseInstance.engine?.engineType : undefined,\n    });\n\n    this.instanceType = props.instanceType;\n    this.instanceIdentifier = instance.ref;\n    this.dbInstanceEndpointAddress = instance.attrEndpointAddress;\n    this.dbInstanceEndpointPort = instance.attrEndpointPort;\n\n    // create a number token that represents the port of the instance\n    const portAttribute = Token.asNumber(instance.attrEndpointPort);\n    this.instanceEndpoint = new Endpoint(instance.attrEndpointAddress, portAttribute);\n\n    instance.applyRemovalPolicy(props.removalPolicy ?? RemovalPolicy.SNAPSHOT);\n\n    this.setLogRetention();\n  }\n}\n\n/**\n * Renders the processor features specifications\n *\n * @param features the processor features\n */\nfunction renderProcessorFeatures(features: ProcessorFeatures): CfnDBInstance.ProcessorFeatureProperty[] | undefined {\n  const featuresList = Object.entries(features).map(([name, value]) => ({ name, value: value.toString() }));\n\n  return featuresList.length === 0 ? undefined : featuresList;\n}\n"],
  "mappings": "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",
  "names": []
}
