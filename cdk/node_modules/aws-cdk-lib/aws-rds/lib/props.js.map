{
  "version": 3,
  "sources": ["props.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as kms from '../../aws-kms';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport { Duration, SecretValue } from '../../core';\nimport { IParameterGroup } from './parameter-group';\n\n/**\n * Instance properties for database instances\n */\nexport interface InstanceProps {\n  /**\n   * What type of instance to start for the replicas.\n   *\n   * @default - t3.medium (or, more precisely, db.t3.medium)\n   */\n  readonly instanceType?: ec2.InstanceType;\n\n  /**\n   * What subnets to run the RDS instances in.\n   *\n   * Must be at least 2 subnets in two different AZs.\n   */\n  readonly vpc: ec2.IVpc;\n\n  /**\n   * Where to place the instances within the VPC\n   *\n   * @default - the Vpc default strategy if not specified.\n   */\n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n  /**\n   * Security group.\n   *\n   * @default a new security group is created.\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n  /**\n   * The DB parameter group to associate with the instance.\n   *\n   * @default no parameter group\n   */\n  readonly parameterGroup?: IParameterGroup;\n\n  /**\n   * The parameters in the DBParameterGroup to create automatically\n   *\n   * You can only specify parameterGroup or parameters but not both.\n   * You need to use a versioned engine to auto-generate a DBParameterGroup.\n   *\n   * @default - None\n   */\n  readonly parameters?: { [key: string]: string };\n\n  /**\n   * Whether to enable Performance Insights for the DB instance.\n   *\n   * @default - false, unless ``performanceInsightRentention`` or ``performanceInsightEncryptionKey`` is set.\n   */\n  readonly enablePerformanceInsights?: boolean;\n\n  /**\n   * The amount of time, in days, to retain Performance Insights data.\n   *\n   * @default 7\n   */\n  readonly performanceInsightRetention?: PerformanceInsightRetention;\n\n  /**\n   * The AWS KMS key for encryption of Performance Insights data.\n   *\n   * @default - default master key\n   */\n  readonly performanceInsightEncryptionKey?: kms.IKey;\n\n  /**\n   * Whether to enable automatic upgrade of minor version for the DB instance.\n   *\n   * @default - true\n   */\n  readonly autoMinorVersionUpgrade?: boolean;\n\n  /**\n   * Whether to allow upgrade of major version for the DB instance.\n   *\n   * @default - false\n   */\n  readonly allowMajorVersionUpgrade?: boolean;\n\n  /**\n   *  Whether to remove automated backups immediately after the DB instance is deleted for the DB instance.\n   *\n   * @default - true\n   */\n  readonly deleteAutomatedBackups?: boolean;\n\n  /**\n   * Indicates whether the DB instance is an internet-facing instance.\n   *\n   * @default - `true` if `vpcSubnets` is `subnetType: SubnetType.PUBLIC`, `false` otherwise\n   */\n  readonly publiclyAccessible?: boolean;\n}\n\n/**\n * Backup configuration for RDS databases\n *\n * @default - The retention period for automated backups is 1 day.\n * The preferred backup window will be a 30-minute window selected at random\n * from an 8-hour block of time for each AWS Region.\n * @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow\n */\nexport interface BackupProps {\n\n  /**\n   * How many days to retain the backup\n   */\n  readonly retention: Duration;\n\n  /**\n   * A daily time range in 24-hours UTC format in which backups preferably execute.\n   *\n   * Must be at least 30 minutes long.\n   *\n   * Example: '01:00-02:00'\n   *\n   * @default - a 30-minute window selected at random from an 8-hour block of\n   * time for each AWS Region. To see the time blocks available, see\n   * https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow\n   */\n  readonly preferredWindow?: string;\n}\n\n/**\n * Base options for creating Credentials.\n */\nexport interface CredentialsBaseOptions {\n  /**\n   * The name of the secret.\n   *\n   * @default - A name is generated by CloudFormation.\n   */\n  readonly secretName?: string;\n\n  /**\n   * KMS encryption key to encrypt the generated secret.\n   *\n   * @default - default master key\n   */\n  readonly encryptionKey?: kms.IKey;\n\n  /**\n   * The characters to exclude from the generated password.\n   * Has no effect if {@link password} has been provided.\n   *\n   * @default - the DatabaseSecret default exclude character set (\" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\")\n   */\n  readonly excludeCharacters?: string;\n\n  /**\n   * A list of regions where to replicate this secret.\n   *\n   * @default - Secret is not replicated\n   */\n  readonly replicaRegions?: secretsmanager.ReplicaRegion[];\n}\n\n/**\n * Options for creating Credentials from a username.\n */\nexport interface CredentialsFromUsernameOptions extends CredentialsBaseOptions {\n  /**\n   * Password\n   *\n   * Do not put passwords in your CDK code directly.\n   *\n   * @default - a Secrets Manager generated password\n   */\n  readonly password?: SecretValue;\n}\n\n/**\n * Username and password combination\n */\nexport abstract class Credentials {\n  /**\n   * Creates Credentials with a password generated and stored in Secrets Manager.\n   */\n  public static fromGeneratedSecret(username: string, options: CredentialsBaseOptions = {}): Credentials {\n    return {\n      ...options,\n      username,\n      usernameAsString: true,\n    };\n  }\n\n  /**\n   * Creates Credentials from a password\n   *\n   * Do not put passwords in your CDK code directly.\n   */\n  public static fromPassword(username: string, password: SecretValue): Credentials {\n    return {\n      username,\n      password,\n      usernameAsString: true,\n    };\n  }\n\n  /**\n   * Creates Credentials for the given username, and optional password and key.\n   * If no password is provided, one will be generated and stored in Secrets Manager.\n   */\n  public static fromUsername(username: string, options: CredentialsFromUsernameOptions = {}): Credentials {\n    return {\n      ...options,\n      username,\n    };\n  }\n\n  /**\n   * Creates Credentials from an existing Secrets Manager ``Secret`` (or ``DatabaseSecret``)\n   *\n   * The Secret must be a JSON string with a ``username`` and ``password`` field:\n   * ```\n   * {\n   *   ...\n   *   \"username\": <required: username>,\n   *   \"password\": <required: password>,\n   * }\n   * ```\n   *\n   * @param secret The secret where the credentials are stored\n   * @param username The username defined in the secret. If specified the username\n   *   will be referenced as a string and not a dynamic reference to the username\n   *   field in the secret. This allows to replace the secret without replacing the\n   *   instance or cluster.\n   */\n  public static fromSecret(secret: secretsmanager.ISecret, username?: string): Credentials {\n    return {\n      username: username ?? secret.secretValueFromJson('username').toString(),\n      password: secret.secretValueFromJson('password'),\n      encryptionKey: secret.encryptionKey,\n      secret,\n    };\n  }\n\n  /**\n   * Username\n   */\n  public abstract readonly username: string;\n\n  /**\n   * The name to use for the Secret if a new Secret is to be generated in\n   * SecretsManager for these Credentials.\n   *\n   * @default - A name is generated by CloudFormation.\n   */\n  public abstract readonly secretName?: string;\n\n  /**\n   * Whether the username should be referenced as a string and not as a dynamic\n   * reference to the username in the secret.\n   *\n   * @default false\n   */\n  public abstract readonly usernameAsString?: boolean;\n\n  /**\n   * Password\n   *\n   * Do not put passwords in your CDK code directly.\n   *\n   * @default - a Secrets Manager generated password\n   */\n  public abstract readonly password?: SecretValue;\n\n  /**\n   * KMS encryption key to encrypt the generated secret.\n   *\n   * @default - default master key\n   */\n  public abstract readonly encryptionKey?: kms.IKey;\n\n  /**\n   * Secret used to instantiate this Login.\n   *\n   * @default - none\n   */\n  public abstract readonly secret?: secretsmanager.ISecret;\n\n  /**\n   * The characters to exclude from the generated password.\n   * Only used if {@link password} has not been set.\n   *\n   * @default - the DatabaseSecret default exclude character set (\" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\")\n   */\n  public abstract readonly excludeCharacters?: string;\n\n  /**\n   * A list of regions where to replicate the generated secret.\n   *\n   * @default - Secret is not replicated\n   */\n  public abstract readonly replicaRegions?: secretsmanager.ReplicaRegion[];\n}\n\n/**\n * Options used in the {@link SnapshotCredentials.fromGeneratedPassword} method.\n */\nexport interface SnapshotCredentialsFromGeneratedPasswordOptions {\n  /**\n   * KMS encryption key to encrypt the generated secret.\n   *\n   * @default - default master key\n   */\n  readonly encryptionKey?: kms.IKey;\n\n  /**\n   * The characters to exclude from the generated password.\n   *\n   * @default - the DatabaseSecret default exclude character set (\" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\")\n   */\n  readonly excludeCharacters?: string;\n\n  /**\n   * A list of regions where to replicate this secret.\n   *\n   * @default - Secret is not replicated\n   */\n  readonly replicaRegions?: secretsmanager.ReplicaRegion[];\n}\n\n/**\n * Credentials to update the password for a ``DatabaseInstanceFromSnapshot``.\n */\nexport abstract class SnapshotCredentials {\n  /**\n   * Generate a new password for the snapshot, using the existing username and an optional encryption key.\n   * The new credentials are stored in Secrets Manager.\n   *\n   * Note - The username must match the existing master username of the snapshot.\n   */\n  public static fromGeneratedSecret(username: string, options: SnapshotCredentialsFromGeneratedPasswordOptions = {}): SnapshotCredentials {\n    return {\n      ...options,\n      generatePassword: true,\n      replaceOnPasswordCriteriaChanges: true,\n      username,\n    };\n  }\n\n  /**\n   * Generate a new password for the snapshot, using the existing username and an optional encryption key.\n   *\n   * Note - The username must match the existing master username of the snapshot.\n   *\n   * NOTE: use `fromGeneratedSecret()` for new Clusters and Instances.\n   */\n  public static fromGeneratedPassword(username: string, options: SnapshotCredentialsFromGeneratedPasswordOptions = {}): SnapshotCredentials {\n    return {\n      ...options,\n      generatePassword: true,\n      username,\n    };\n  }\n\n  /**\n   * Update the snapshot login with an existing password.\n   */\n  public static fromPassword(password: SecretValue): SnapshotCredentials {\n    return { generatePassword: false, password };\n  }\n\n  /**\n   * Update the snapshot login with an existing password from a Secret.\n   *\n   * The Secret must be a JSON string with a ``password`` field:\n   * ```\n   * {\n   *   ...\n   *   \"password\": <required: password>,\n   * }\n   * ```\n   */\n  public static fromSecret(secret: secretsmanager.ISecret): SnapshotCredentials {\n    return {\n      generatePassword: false,\n      password: secret.secretValueFromJson('password'),\n      secret,\n    };\n  }\n\n  /**\n   * The master user name.\n   *\n   * Must be the **current** master user name of the snapshot.\n   * It is not possible to change the master user name of a RDS instance.\n   *\n   * @default - the existing username from the snapshot\n   */\n  public abstract readonly username?: string;\n\n  /**\n   * Whether a new password should be generated.\n   */\n  public abstract readonly generatePassword: boolean;\n\n  /**\n   * Whether to replace the generated secret when the criteria for the password change.\n   *\n   * @default false\n   */\n  public abstract readonly replaceOnPasswordCriteriaChanges?: boolean;\n\n  /**\n   * The master user password.\n   *\n   * Do not put passwords in your CDK code directly.\n   *\n   * @default - the existing password from the snapshot\n   */\n  public abstract readonly password?: SecretValue;\n\n  /**\n   * KMS encryption key to encrypt the generated secret.\n   *\n   * @default - default master key\n   */\n  public abstract readonly encryptionKey?: kms.IKey;\n\n  /**\n   * Secret used to instantiate this Login.\n   *\n   * @default - none\n   */\n  public abstract readonly secret?: secretsmanager.ISecret;\n\n  /**\n   * The characters to exclude from the generated password.\n   * Only used if {@link generatePassword} if true.\n   *\n   * @default - the DatabaseSecret default exclude character set (\" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\")\n   */\n  public abstract readonly excludeCharacters?: string;\n\n  /**\n   * A list of regions where to replicate the generated secret.\n   *\n   * @default - Secret is not replicated\n   */\n  public abstract readonly replicaRegions?: secretsmanager.ReplicaRegion[];\n}\n\n/**\n * Properties common to single-user and multi-user rotation options.\n */\nexport interface CommonRotationUserOptions {\n  /**\n   * Specifies the number of days after the previous rotation\n   * before Secrets Manager triggers the next automatic rotation.\n   *\n   * @default - 30 days\n   */\n  readonly automaticallyAfter?: Duration;\n\n  /**\n   * Specifies characters to not include in generated passwords.\n   *\n   * @default \" %+~`#$&*()|[]{}:;<>?!'/@\\\"\\\\\"\n   */\n  readonly excludeCharacters?: string;\n\n  /**\n   * Where to place the rotation Lambda function\n   *\n   * @default - same placement as instance or cluster\n   */\n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n  /**\n   * The VPC interface endpoint to use for the Secrets Manager API\n   *\n   * If you enable private DNS hostnames for your VPC private endpoint (the default), you don't\n   * need to specify an endpoint. The standard Secrets Manager DNS hostname the Secrets Manager\n   * CLI and SDKs use by default (https://secretsmanager.<region>.amazonaws.com) automatically\n   * resolves to your VPC endpoint.\n   *\n   * @default https://secretsmanager.<region>.amazonaws.com\n   */\n  readonly endpoint?: ec2.IInterfaceVpcEndpoint;\n}\n\n/**\n * Options to add the multi user rotation\n */\nexport interface RotationSingleUserOptions extends CommonRotationUserOptions {\n}\n\n/**\n * Options to add the multi user rotation\n */\nexport interface RotationMultiUserOptions extends CommonRotationUserOptions {\n  /**\n   * The secret to rotate. It must be a JSON string with the following format:\n   * ```\n   * {\n   *   \"engine\": <required: database engine>,\n   *   \"host\": <required: instance host name>,\n   *   \"username\": <required: username>,\n   *   \"password\": <required: password>,\n   *   \"dbname\": <optional: database name>,\n   *   \"port\": <optional: if not specified, default port will be used>,\n   *   \"masterarn\": <required: the arn of the master secret which will be used to create users/change passwords>\n   * }\n   * ```\n   */\n  readonly secret: secretsmanager.ISecret;\n}\n\n/**\n * The retention period for Performance Insight.\n */\nexport enum PerformanceInsightRetention {\n  /**\n   * Default retention period of 7 days.\n   */\n  DEFAULT = 7,\n\n  /**\n   * Long term retention period of 2 years.\n   */\n  LONG_TERM = 731\n}\n"],
  "mappings": "qRAyLA,MAAsB,WAAW,OAIjB,qBAAoB,SAAkB,QAAkC,CAAA,EAAE,oFAC/E,IACF,QACH,SACA,iBAAkB,UASR,cAAa,SAAkB,SAAqB,kEACzD,CACL,SACA,SACA,iBAAkB,UAQR,cAAa,SAAkB,QAA0C,CAAA,EAAE,4FAChF,IACF,QACH,gBAsBU,YAAW,OAAgC,SAAiB,+EACjE,CACL,SAAU,UAAQ,KAAR,SAAY,OAAO,oBAAoB,UAAU,EAAE,SAAQ,EACrE,SAAU,OAAO,oBAAoB,UAAU,EAC/C,cAAe,OAAO,cACtB,SA3DN,QAAA,YAAA,2GAwJA,MAAsB,mBAAmB,OAOzB,qBAAoB,SAAkB,QAA2D,CAAA,EAAE,6GACxG,IACF,QACH,iBAAkB,GAClB,iCAAkC,GAClC,gBAWU,uBAAsB,SAAkB,QAA2D,CAAA,EAAE,6GAC1G,IACF,QACH,iBAAkB,GAClB,gBAOU,cAAa,SAAqB,kEACvC,CAAE,iBAAkB,GAAO,QAAQ,QAc9B,YAAW,OAA8B,+EAC9C,CACL,iBAAkB,GAClB,SAAU,OAAO,oBAAoB,UAAU,EAC/C,SArDN,QAAA,oBAAA,mIA2LA,GAAY,6BAAZ,AAAA,UAAY,6BAA2B,CAIrC,6BAAA,6BAAA,QAAA,GAAA,UAKA,6BAAA,6BAAA,UAAA,KAAA,WACF,GAVY,4BAAA,QAAA,6BAAA,SAAA,4BAA2B,CAAA,EAAA",
  "names": []
}
