{
  "version": 3,
  "sources": ["wisdom.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-04-07T10:53:59.850Z\",\"fingerprint\":\"CvaosVmXqSlh3gSM8JU8ZjlH9/Selbsw5eKDaN3WbqI=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n/**\n * Properties for defining a `CfnAssistant`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html\n */\nexport interface CfnAssistantProps {\n\n    /**\n     * The name of the assistant.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-name\n     */\n    readonly name: string;\n\n    /**\n     * The type of assistant.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-type\n     */\n    readonly type: string;\n\n    /**\n     * The description of the assistant.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-description\n     */\n    readonly description?: string;\n\n    /**\n     * The KMS key used for encryption.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-serversideencryptionconfiguration\n     */\n    readonly serverSideEncryptionConfiguration?: CfnAssistant.ServerSideEncryptionConfigurationProperty | cdk.IResolvable;\n\n    /**\n     * The tags used to organize, track, or control access for this resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-tags\n     */\n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAssistantProps`\n *\n * @param properties - the TypeScript properties of a `CfnAssistantProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAssistantPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('serverSideEncryptionConfiguration', CfnAssistant_ServerSideEncryptionConfigurationPropertyValidator)(properties.serverSideEncryptionConfiguration));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"CfnAssistantProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Wisdom::Assistant` resource\n *\n * @param properties - the TypeScript properties of a `CfnAssistantProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Wisdom::Assistant` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssistantPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAssistantPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Description: cdk.stringToCloudFormation(properties.description),\n        ServerSideEncryptionConfiguration: cfnAssistantServerSideEncryptionConfigurationPropertyToCloudFormation(properties.serverSideEncryptionConfiguration),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssistantPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAssistantProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAssistantProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('serverSideEncryptionConfiguration', 'ServerSideEncryptionConfiguration', properties.ServerSideEncryptionConfiguration != null ? CfnAssistantServerSideEncryptionConfigurationPropertyFromCloudFormation(properties.ServerSideEncryptionConfiguration) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::Wisdom::Assistant`\n *\n * Specifies an Amazon Connect Wisdom assistant.\n *\n * @cloudformationResource AWS::Wisdom::Assistant\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html\n */\nexport class CfnAssistant extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Wisdom::Assistant\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAssistant {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAssistantPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAssistant(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * The Amazon Resource Name (ARN) of the assistant.\n     * @cloudformationAttribute AssistantArn\n     */\n    public readonly attrAssistantArn: string;\n\n    /**\n     * The ID of the Wisdom assistant.\n     * @cloudformationAttribute AssistantId\n     */\n    public readonly attrAssistantId: string;\n\n    /**\n     * The name of the assistant.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-name\n     */\n    public name: string;\n\n    /**\n     * The type of assistant.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-type\n     */\n    public type: string;\n\n    /**\n     * The description of the assistant.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-description\n     */\n    public description: string | undefined;\n\n    /**\n     * The KMS key used for encryption.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-serversideencryptionconfiguration\n     */\n    public serverSideEncryptionConfiguration: CfnAssistant.ServerSideEncryptionConfigurationProperty | cdk.IResolvable | undefined;\n\n    /**\n     * The tags used to organize, track, or control access for this resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html#cfn-wisdom-assistant-tags\n     */\n    public readonly tags: cdk.TagManager;\n\n    /**\n     * Create a new `AWS::Wisdom::Assistant`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnAssistantProps) {\n        super(scope, id, { type: CfnAssistant.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'type', this);\n        this.attrAssistantArn = cdk.Token.asString(this.getAtt('AssistantArn'));\n        this.attrAssistantId = cdk.Token.asString(this.getAtt('AssistantId'));\n\n        this.name = props.name;\n        this.type = props.type;\n        this.description = props.description;\n        this.serverSideEncryptionConfiguration = props.serverSideEncryptionConfiguration;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Wisdom::Assistant\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAssistant.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            type: this.type,\n            description: this.description,\n            serverSideEncryptionConfiguration: this.serverSideEncryptionConfiguration,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAssistantPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAssistant {\n    /**\n     * The KMS key used for encryption.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-assistant-serversideencryptionconfiguration.html\n     */\n    export interface ServerSideEncryptionConfigurationProperty {\n        /**\n         * The KMS key . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) .\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-assistant-serversideencryptionconfiguration.html#cfn-wisdom-assistant-serversideencryptionconfiguration-kmskeyid\n         */\n        readonly kmsKeyId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServerSideEncryptionConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ServerSideEncryptionConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAssistant_ServerSideEncryptionConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    return errors.wrap('supplied properties not correct for \"ServerSideEncryptionConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Wisdom::Assistant.ServerSideEncryptionConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ServerSideEncryptionConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Wisdom::Assistant.ServerSideEncryptionConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssistantServerSideEncryptionConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAssistant_ServerSideEncryptionConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssistantServerSideEncryptionConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAssistant.ServerSideEncryptionConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAssistant.ServerSideEncryptionConfigurationProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * Properties for defining a `CfnAssistantAssociation`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html\n */\nexport interface CfnAssistantAssociationProps {\n\n    /**\n     * The identifier of the Wisdom assistant.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-assistantid\n     */\n    readonly assistantId: string;\n\n    /**\n     * The identifier of the associated resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-association\n     */\n    readonly association: CfnAssistantAssociation.AssociationDataProperty | cdk.IResolvable;\n\n    /**\n     * The type of association.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-associationtype\n     */\n    readonly associationType: string;\n\n    /**\n     * The tags used to organize, track, or control access for this resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-tags\n     */\n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAssistantAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnAssistantAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAssistantAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('assistantId', cdk.requiredValidator)(properties.assistantId));\n    errors.collect(cdk.propertyValidator('assistantId', cdk.validateString)(properties.assistantId));\n    errors.collect(cdk.propertyValidator('association', cdk.requiredValidator)(properties.association));\n    errors.collect(cdk.propertyValidator('association', CfnAssistantAssociation_AssociationDataPropertyValidator)(properties.association));\n    errors.collect(cdk.propertyValidator('associationType', cdk.requiredValidator)(properties.associationType));\n    errors.collect(cdk.propertyValidator('associationType', cdk.validateString)(properties.associationType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnAssistantAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Wisdom::AssistantAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnAssistantAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Wisdom::AssistantAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssistantAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAssistantAssociationPropsValidator(properties).assertSuccess();\n    return {\n        AssistantId: cdk.stringToCloudFormation(properties.assistantId),\n        Association: cfnAssistantAssociationAssociationDataPropertyToCloudFormation(properties.association),\n        AssociationType: cdk.stringToCloudFormation(properties.associationType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssistantAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAssistantAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAssistantAssociationProps>();\n    ret.addPropertyResult('assistantId', 'AssistantId', cfn_parse.FromCloudFormation.getString(properties.AssistantId));\n    ret.addPropertyResult('association', 'Association', CfnAssistantAssociationAssociationDataPropertyFromCloudFormation(properties.Association));\n    ret.addPropertyResult('associationType', 'AssociationType', cfn_parse.FromCloudFormation.getString(properties.AssociationType));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::Wisdom::AssistantAssociation`\n *\n * Specifies an association between an Amazon Connect Wisdom assistant and another resource. Currently, the only supported association is with a knowledge base. An assistant can have only a single association.\n *\n * @cloudformationResource AWS::Wisdom::AssistantAssociation\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html\n */\nexport class CfnAssistantAssociation extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Wisdom::AssistantAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAssistantAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAssistantAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAssistantAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * The Amazon Resource Name (ARN) of the Wisdom assistant.\n     * @cloudformationAttribute AssistantArn\n     */\n    public readonly attrAssistantArn: string;\n\n    /**\n     * The Amazon Resource Name (ARN) of the assistant association.\n     * @cloudformationAttribute AssistantAssociationArn\n     */\n    public readonly attrAssistantAssociationArn: string;\n\n    /**\n     * The ID of the association.\n     * @cloudformationAttribute AssistantAssociationId\n     */\n    public readonly attrAssistantAssociationId: string;\n\n    /**\n     * The identifier of the Wisdom assistant.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-assistantid\n     */\n    public assistantId: string;\n\n    /**\n     * The identifier of the associated resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-association\n     */\n    public association: CfnAssistantAssociation.AssociationDataProperty | cdk.IResolvable;\n\n    /**\n     * The type of association.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-associationtype\n     */\n    public associationType: string;\n\n    /**\n     * The tags used to organize, track, or control access for this resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html#cfn-wisdom-assistantassociation-tags\n     */\n    public readonly tags: cdk.TagManager;\n\n    /**\n     * Create a new `AWS::Wisdom::AssistantAssociation`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnAssistantAssociationProps) {\n        super(scope, id, { type: CfnAssistantAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'assistantId', this);\n        cdk.requireProperty(props, 'association', this);\n        cdk.requireProperty(props, 'associationType', this);\n        this.attrAssistantArn = cdk.Token.asString(this.getAtt('AssistantArn'));\n        this.attrAssistantAssociationArn = cdk.Token.asString(this.getAtt('AssistantAssociationArn'));\n        this.attrAssistantAssociationId = cdk.Token.asString(this.getAtt('AssistantAssociationId'));\n\n        this.assistantId = props.assistantId;\n        this.association = props.association;\n        this.associationType = props.associationType;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Wisdom::AssistantAssociation\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAssistantAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            assistantId: this.assistantId,\n            association: this.association,\n            associationType: this.associationType,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAssistantAssociationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAssistantAssociation {\n    /**\n     * A union type that currently has a single argument, which is the knowledge base ID.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-assistantassociation-associationdata.html\n     */\n    export interface AssociationDataProperty {\n        /**\n         * The identifier of the knowledge base.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-assistantassociation-associationdata.html#cfn-wisdom-assistantassociation-associationdata-knowledgebaseid\n         */\n        readonly knowledgeBaseId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AssociationDataProperty`\n *\n * @param properties - the TypeScript properties of a `AssociationDataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAssistantAssociation_AssociationDataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('knowledgeBaseId', cdk.requiredValidator)(properties.knowledgeBaseId));\n    errors.collect(cdk.propertyValidator('knowledgeBaseId', cdk.validateString)(properties.knowledgeBaseId));\n    return errors.wrap('supplied properties not correct for \"AssociationDataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Wisdom::AssistantAssociation.AssociationData` resource\n *\n * @param properties - the TypeScript properties of a `AssociationDataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Wisdom::AssistantAssociation.AssociationData` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssistantAssociationAssociationDataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAssistantAssociation_AssociationDataPropertyValidator(properties).assertSuccess();\n    return {\n        KnowledgeBaseId: cdk.stringToCloudFormation(properties.knowledgeBaseId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssistantAssociationAssociationDataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAssistantAssociation.AssociationDataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAssistantAssociation.AssociationDataProperty>();\n    ret.addPropertyResult('knowledgeBaseId', 'KnowledgeBaseId', cfn_parse.FromCloudFormation.getString(properties.KnowledgeBaseId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * Properties for defining a `CfnKnowledgeBase`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html\n */\nexport interface CfnKnowledgeBaseProps {\n\n    /**\n     * The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content. EXTERNAL knowledge bases support integrations with third-party systems whose content is synchronized automatically.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-knowledgebasetype\n     */\n    readonly knowledgeBaseType: string;\n\n    /**\n     * The name of the knowledge base.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-name\n     */\n    readonly name: string;\n\n    /**\n     * The description.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-description\n     */\n    readonly description?: string;\n\n    /**\n     * Information about how to render the content.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-renderingconfiguration\n     */\n    readonly renderingConfiguration?: CfnKnowledgeBase.RenderingConfigurationProperty | cdk.IResolvable;\n\n    /**\n     * The KMS key used for encryption.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-serversideencryptionconfiguration\n     */\n    readonly serverSideEncryptionConfiguration?: CfnKnowledgeBase.ServerSideEncryptionConfigurationProperty | cdk.IResolvable;\n\n    /**\n     * The source of the knowledge base content. Only set this argument for EXTERNAL knowledge bases.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-sourceconfiguration\n     */\n    readonly sourceConfiguration?: CfnKnowledgeBase.SourceConfigurationProperty | cdk.IResolvable;\n\n    /**\n     * The tags used to organize, track, or control access for this resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-tags\n     */\n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnKnowledgeBaseProps`\n *\n * @param properties - the TypeScript properties of a `CfnKnowledgeBaseProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnKnowledgeBasePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('knowledgeBaseType', cdk.requiredValidator)(properties.knowledgeBaseType));\n    errors.collect(cdk.propertyValidator('knowledgeBaseType', cdk.validateString)(properties.knowledgeBaseType));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('renderingConfiguration', CfnKnowledgeBase_RenderingConfigurationPropertyValidator)(properties.renderingConfiguration));\n    errors.collect(cdk.propertyValidator('serverSideEncryptionConfiguration', CfnKnowledgeBase_ServerSideEncryptionConfigurationPropertyValidator)(properties.serverSideEncryptionConfiguration));\n    errors.collect(cdk.propertyValidator('sourceConfiguration', CfnKnowledgeBase_SourceConfigurationPropertyValidator)(properties.sourceConfiguration));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnKnowledgeBaseProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase` resource\n *\n * @param properties - the TypeScript properties of a `CfnKnowledgeBaseProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase` resource.\n */\n// @ts-ignore TS6133\nfunction cfnKnowledgeBasePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnKnowledgeBasePropsValidator(properties).assertSuccess();\n    return {\n        KnowledgeBaseType: cdk.stringToCloudFormation(properties.knowledgeBaseType),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        RenderingConfiguration: cfnKnowledgeBaseRenderingConfigurationPropertyToCloudFormation(properties.renderingConfiguration),\n        ServerSideEncryptionConfiguration: cfnKnowledgeBaseServerSideEncryptionConfigurationPropertyToCloudFormation(properties.serverSideEncryptionConfiguration),\n        SourceConfiguration: cfnKnowledgeBaseSourceConfigurationPropertyToCloudFormation(properties.sourceConfiguration),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnKnowledgeBasePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnKnowledgeBaseProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnKnowledgeBaseProps>();\n    ret.addPropertyResult('knowledgeBaseType', 'KnowledgeBaseType', cfn_parse.FromCloudFormation.getString(properties.KnowledgeBaseType));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('renderingConfiguration', 'RenderingConfiguration', properties.RenderingConfiguration != null ? CfnKnowledgeBaseRenderingConfigurationPropertyFromCloudFormation(properties.RenderingConfiguration) : undefined);\n    ret.addPropertyResult('serverSideEncryptionConfiguration', 'ServerSideEncryptionConfiguration', properties.ServerSideEncryptionConfiguration != null ? CfnKnowledgeBaseServerSideEncryptionConfigurationPropertyFromCloudFormation(properties.ServerSideEncryptionConfiguration) : undefined);\n    ret.addPropertyResult('sourceConfiguration', 'SourceConfiguration', properties.SourceConfiguration != null ? CfnKnowledgeBaseSourceConfigurationPropertyFromCloudFormation(properties.SourceConfiguration) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::Wisdom::KnowledgeBase`\n *\n * Specifies a knowledge base.\n *\n * @cloudformationResource AWS::Wisdom::KnowledgeBase\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html\n */\nexport class CfnKnowledgeBase extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Wisdom::KnowledgeBase\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnKnowledgeBase {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnKnowledgeBasePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnKnowledgeBase(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * The Amazon Resource Name (ARN) of the knowledge base.\n     * @cloudformationAttribute KnowledgeBaseArn\n     */\n    public readonly attrKnowledgeBaseArn: string;\n\n    /**\n     * The ID of the knowledge base.\n     * @cloudformationAttribute KnowledgeBaseId\n     */\n    public readonly attrKnowledgeBaseId: string;\n\n    /**\n     * The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content. EXTERNAL knowledge bases support integrations with third-party systems whose content is synchronized automatically.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-knowledgebasetype\n     */\n    public knowledgeBaseType: string;\n\n    /**\n     * The name of the knowledge base.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-name\n     */\n    public name: string;\n\n    /**\n     * The description.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-description\n     */\n    public description: string | undefined;\n\n    /**\n     * Information about how to render the content.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-renderingconfiguration\n     */\n    public renderingConfiguration: CfnKnowledgeBase.RenderingConfigurationProperty | cdk.IResolvable | undefined;\n\n    /**\n     * The KMS key used for encryption.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-serversideencryptionconfiguration\n     */\n    public serverSideEncryptionConfiguration: CfnKnowledgeBase.ServerSideEncryptionConfigurationProperty | cdk.IResolvable | undefined;\n\n    /**\n     * The source of the knowledge base content. Only set this argument for EXTERNAL knowledge bases.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-sourceconfiguration\n     */\n    public sourceConfiguration: CfnKnowledgeBase.SourceConfigurationProperty | cdk.IResolvable | undefined;\n\n    /**\n     * The tags used to organize, track, or control access for this resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html#cfn-wisdom-knowledgebase-tags\n     */\n    public readonly tags: cdk.TagManager;\n\n    /**\n     * Create a new `AWS::Wisdom::KnowledgeBase`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnKnowledgeBaseProps) {\n        super(scope, id, { type: CfnKnowledgeBase.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'knowledgeBaseType', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrKnowledgeBaseArn = cdk.Token.asString(this.getAtt('KnowledgeBaseArn'));\n        this.attrKnowledgeBaseId = cdk.Token.asString(this.getAtt('KnowledgeBaseId'));\n\n        this.knowledgeBaseType = props.knowledgeBaseType;\n        this.name = props.name;\n        this.description = props.description;\n        this.renderingConfiguration = props.renderingConfiguration;\n        this.serverSideEncryptionConfiguration = props.serverSideEncryptionConfiguration;\n        this.sourceConfiguration = props.sourceConfiguration;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Wisdom::KnowledgeBase\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnKnowledgeBase.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            knowledgeBaseType: this.knowledgeBaseType,\n            name: this.name,\n            description: this.description,\n            renderingConfiguration: this.renderingConfiguration,\n            serverSideEncryptionConfiguration: this.serverSideEncryptionConfiguration,\n            sourceConfiguration: this.sourceConfiguration,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnKnowledgeBasePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnKnowledgeBase {\n    /**\n     * Configuration information for Amazon AppIntegrations to automatically ingest content.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-knowledgebase-appintegrationsconfiguration.html\n     */\n    export interface AppIntegrationsConfigurationProperty {\n        /**\n         * The Amazon Resource Name (ARN) of the AppIntegrations DataIntegration to use for ingesting content.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-knowledgebase-appintegrationsconfiguration.html#cfn-wisdom-knowledgebase-appintegrationsconfiguration-appintegrationarn\n         */\n        readonly appIntegrationArn: string;\n        /**\n         * The fields from the source that are made available to your agents in Wisdom.\n         *\n         * - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , you must include at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` .\n         * - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , you must include at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` .\n         *\n         * Make sure to include additional fields. These fields are indexed and used to source recommendations.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-knowledgebase-appintegrationsconfiguration.html#cfn-wisdom-knowledgebase-appintegrationsconfiguration-objectfields\n         */\n        readonly objectFields: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AppIntegrationsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AppIntegrationsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnKnowledgeBase_AppIntegrationsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appIntegrationArn', cdk.requiredValidator)(properties.appIntegrationArn));\n    errors.collect(cdk.propertyValidator('appIntegrationArn', cdk.validateString)(properties.appIntegrationArn));\n    errors.collect(cdk.propertyValidator('objectFields', cdk.requiredValidator)(properties.objectFields));\n    errors.collect(cdk.propertyValidator('objectFields', cdk.listValidator(cdk.validateString))(properties.objectFields));\n    return errors.wrap('supplied properties not correct for \"AppIntegrationsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase.AppIntegrationsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AppIntegrationsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase.AppIntegrationsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnKnowledgeBaseAppIntegrationsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnKnowledgeBase_AppIntegrationsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AppIntegrationArn: cdk.stringToCloudFormation(properties.appIntegrationArn),\n        ObjectFields: cdk.listMapper(cdk.stringToCloudFormation)(properties.objectFields),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnKnowledgeBaseAppIntegrationsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnKnowledgeBase.AppIntegrationsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnKnowledgeBase.AppIntegrationsConfigurationProperty>();\n    ret.addPropertyResult('appIntegrationArn', 'AppIntegrationArn', cfn_parse.FromCloudFormation.getString(properties.AppIntegrationArn));\n    ret.addPropertyResult('objectFields', 'ObjectFields', cfn_parse.FromCloudFormation.getStringArray(properties.ObjectFields));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnKnowledgeBase {\n    /**\n     * Information about how to render the content.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-knowledgebase-renderingconfiguration.html\n     */\n    export interface RenderingConfigurationProperty {\n        /**\n         * A URI template containing exactly one variable in `${variableName}` format. This can only be set for `EXTERNAL` knowledge bases. For Salesforce and ServiceNow, the variable must be one of the following:\n         *\n         * - Salesforce: `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , or `IsDeleted`\n         * - ServiceNow: `number` , `short_description` , `sys_mod_count` , `workflow_state` , or `active`\n         *\n         * The variable is replaced with the actual value for a piece of content when calling [GetContent](https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetContent.html) .\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-knowledgebase-renderingconfiguration.html#cfn-wisdom-knowledgebase-renderingconfiguration-templateuri\n         */\n        readonly templateUri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RenderingConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `RenderingConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnKnowledgeBase_RenderingConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('templateUri', cdk.validateString)(properties.templateUri));\n    return errors.wrap('supplied properties not correct for \"RenderingConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase.RenderingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `RenderingConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase.RenderingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnKnowledgeBaseRenderingConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnKnowledgeBase_RenderingConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        TemplateUri: cdk.stringToCloudFormation(properties.templateUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnKnowledgeBaseRenderingConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnKnowledgeBase.RenderingConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnKnowledgeBase.RenderingConfigurationProperty>();\n    ret.addPropertyResult('templateUri', 'TemplateUri', properties.TemplateUri != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateUri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnKnowledgeBase {\n    /**\n     * The KMS key used for encryption.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-knowledgebase-serversideencryptionconfiguration.html\n     */\n    export interface ServerSideEncryptionConfigurationProperty {\n        /**\n         * The KMS key . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) .\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-knowledgebase-serversideencryptionconfiguration.html#cfn-wisdom-knowledgebase-serversideencryptionconfiguration-kmskeyid\n         */\n        readonly kmsKeyId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServerSideEncryptionConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ServerSideEncryptionConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnKnowledgeBase_ServerSideEncryptionConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    return errors.wrap('supplied properties not correct for \"ServerSideEncryptionConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase.ServerSideEncryptionConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ServerSideEncryptionConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase.ServerSideEncryptionConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnKnowledgeBaseServerSideEncryptionConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnKnowledgeBase_ServerSideEncryptionConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnKnowledgeBaseServerSideEncryptionConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnKnowledgeBase.ServerSideEncryptionConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnKnowledgeBase.ServerSideEncryptionConfigurationProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnKnowledgeBase {\n    /**\n     * Configuration information about the external data source.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-knowledgebase-sourceconfiguration.html\n     */\n    export interface SourceConfigurationProperty {\n        /**\n         * Configuration information for Amazon AppIntegrations to automatically ingest content.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-wisdom-knowledgebase-sourceconfiguration.html#cfn-wisdom-knowledgebase-sourceconfiguration-appintegrations\n         */\n        readonly appIntegrations?: CfnKnowledgeBase.AppIntegrationsConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `SourceConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnKnowledgeBase_SourceConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appIntegrations', CfnKnowledgeBase_AppIntegrationsConfigurationPropertyValidator)(properties.appIntegrations));\n    return errors.wrap('supplied properties not correct for \"SourceConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase.SourceConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `SourceConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Wisdom::KnowledgeBase.SourceConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnKnowledgeBaseSourceConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnKnowledgeBase_SourceConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AppIntegrations: cfnKnowledgeBaseAppIntegrationsConfigurationPropertyToCloudFormation(properties.appIntegrations),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnKnowledgeBaseSourceConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnKnowledgeBase.SourceConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnKnowledgeBase.SourceConfigurationProperty>();\n    ret.addPropertyResult('appIntegrations', 'AppIntegrations', properties.AppIntegrations != null ? CfnKnowledgeBaseAppIntegrationsConfigurationPropertyFromCloudFormation(properties.AppIntegrations) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "kRAQA,IAAA,QAAA,YAAA,EACA,UAAA,QAAA,0BAAA,EAuDA,oCAAoC,WAAe,CAC/C,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,cAAe,IAAI,cAAc,EAAE,WAAW,WAAW,CAAC,EAC/F,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,iBAAiB,EAAE,WAAW,IAAI,CAAC,EACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,EAAE,WAAW,IAAI,CAAC,EACjF,OAAO,QAAQ,IAAI,kBAAkB,oCAAqC,+DAA+D,EAAE,WAAW,iCAAiC,CAAC,EACxL,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,cAAc,CAAC,EAAE,WAAW,IAAI,CAAC,EACpG,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,iBAAiB,EAAE,WAAW,IAAI,CAAC,EACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,EAAE,WAAW,IAAI,CAAC,EAC1E,OAAO,KAAK,yDAAyD,CAChF,CAUA,2CAA2C,WAAe,CACtD,MAAK,KAAI,WAAW,UAAU,EAC9B,4BAA2B,UAAU,EAAE,cAAa,EAC7C,CACH,KAAM,IAAI,uBAAuB,WAAW,IAAI,EAChD,KAAM,IAAI,uBAAuB,WAAW,IAAI,EAChD,YAAa,IAAI,uBAAuB,WAAW,WAAW,EAC9D,kCAAmC,sEAAsE,WAAW,iCAAiC,EACrJ,KAAM,IAAI,WAAW,IAAI,sBAAsB,EAAE,WAAW,IAAI,IAP1B,UAS9C,CAGA,6CAA6C,WAAe,CAExD,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,OAAQ,OAAQ,UAAU,mBAAmB,UAAU,WAAW,IAAI,CAAC,EAC7F,IAAI,kBAAkB,OAAQ,OAAQ,UAAU,mBAAmB,UAAU,WAAW,IAAI,CAAC,EAC7F,IAAI,kBAAkB,cAAe,cAAe,WAAW,aAAe,KAAO,UAAU,mBAAmB,UAAU,WAAW,WAAW,EAAI,MAAS,EAC/J,IAAI,kBAAkB,oCAAqC,oCAAqC,WAAW,mCAAqC,KAAO,wEAAwE,WAAW,iCAAiC,EAAI,MAAS,EACxR,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,SAAS,EAAE,WAAW,IAAI,EAAI,MAAgB,EACjL,IAAI,iCAAiC,UAAU,EACxC,GACX,CAYA,MAAa,oBAAqB,KAAI,WAAW,CA+E7C,YAAY,MAA6B,GAAY,MAAwB,CACzE,MAAM,MAAO,GAAI,CAAE,KAAM,aAAa,uBAAwB,WAAY,KAAK,CAAE,0EACjF,IAAI,gBAAgB,MAAO,OAAQ,IAAI,EACvC,IAAI,gBAAgB,MAAO,OAAQ,IAAI,EACvC,KAAK,iBAAmB,IAAI,MAAM,SAAS,KAAK,OAAO,cAAc,CAAC,EACtE,KAAK,gBAAkB,IAAI,MAAM,SAAS,KAAK,OAAO,aAAa,CAAC,EAEpE,KAAK,KAAO,MAAM,KAClB,KAAK,KAAO,MAAM,KAClB,KAAK,YAAc,MAAM,YACzB,KAAK,kCAAoC,MAAM,kCAC/C,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,yBAA0B,MAAM,KAAM,CAAE,gBAAiB,MAAM,CAAE,QA7E5G,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,CAAA,EAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,UAAU,EAC5E,YAAc,oCAAoC,kBAAkB,EACpE,IAAM,GAAI,cAAa,MAAO,GAAI,YAAY,KAAK,EACzD,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,eAAe,EACvE,IAAI,oBAAoB,QAAS,OAAO,EAE5C,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,EAAE,EACpD,IA6EJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,aAAa,sBAAsB,EACzF,UAAU,aAAa,+BAAgC,KAAK,aAAa,KAG/D,gBAAa,CACvB,MAAO,CACH,KAAM,KAAK,KACX,KAAM,KAAK,KACX,YAAa,KAAK,YAClB,kCAAmC,KAAK,kCACxC,KAAM,KAAK,KAAK,WAAU,GAIxB,iBAAiB,MAA2B,CAClD,MAAO,mCAAkC,KAAK,GAnHtD,QAAA,aAAA,iHAI2B,aAAA,uBAAyB,yBA6IpD,yEAAyE,WAAe,CACpF,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,cAAc,EAAE,WAAW,QAAQ,CAAC,EAClF,OAAO,KAAK,iFAAiF,CACxG,CAUA,+EAA+E,WAAe,CAC1F,MAAK,KAAI,WAAW,UAAU,EAC9B,iEAAgE,UAAU,EAAE,cAAa,EAClF,CACH,SAAU,IAAI,uBAAuB,WAAW,QAAQ,IAHlB,UAK9C,CAGA,iFAAiF,WAAe,CAC5F,GAAI,IAAI,mBAAmB,UAAU,EACjC,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAG5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,WAAY,WAAY,WAAW,UAAY,KAAO,UAAU,mBAAmB,UAAU,WAAW,QAAQ,EAAI,MAAS,EACnJ,IAAI,iCAAiC,UAAU,EACxC,GACX,CAgDA,+CAA+C,WAAe,CAC1D,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,cAAe,IAAI,iBAAiB,EAAE,WAAW,WAAW,CAAC,EAClG,OAAO,QAAQ,IAAI,kBAAkB,cAAe,IAAI,cAAc,EAAE,WAAW,WAAW,CAAC,EAC/F,OAAO,QAAQ,IAAI,kBAAkB,cAAe,IAAI,iBAAiB,EAAE,WAAW,WAAW,CAAC,EAClG,OAAO,QAAQ,IAAI,kBAAkB,cAAe,wDAAwD,EAAE,WAAW,WAAW,CAAC,EACrI,OAAO,QAAQ,IAAI,kBAAkB,kBAAmB,IAAI,iBAAiB,EAAE,WAAW,eAAe,CAAC,EAC1G,OAAO,QAAQ,IAAI,kBAAkB,kBAAmB,IAAI,cAAc,EAAE,WAAW,eAAe,CAAC,EACvG,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,cAAc,CAAC,EAAE,WAAW,IAAI,CAAC,EAC7F,OAAO,KAAK,oEAAoE,CAC3F,CAUA,sDAAsD,WAAe,CACjE,MAAK,KAAI,WAAW,UAAU,EAC9B,uCAAsC,UAAU,EAAE,cAAa,EACxD,CACH,YAAa,IAAI,uBAAuB,WAAW,WAAW,EAC9D,YAAa,+DAA+D,WAAW,WAAW,EAClG,gBAAiB,IAAI,uBAAuB,WAAW,eAAe,EACtE,KAAM,IAAI,WAAW,IAAI,sBAAsB,EAAE,WAAW,IAAI,IAN1B,UAQ9C,CAGA,wDAAwD,WAAe,CAEnE,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,cAAe,cAAe,UAAU,mBAAmB,UAAU,WAAW,WAAW,CAAC,EAClH,IAAI,kBAAkB,cAAe,cAAe,iEAAiE,WAAW,WAAW,CAAC,EAC5I,IAAI,kBAAkB,kBAAmB,kBAAmB,UAAU,mBAAmB,UAAU,WAAW,eAAe,CAAC,EAC9H,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,SAAS,EAAE,WAAW,IAAI,EAAI,MAAgB,EACjL,IAAI,iCAAiC,UAAU,EACxC,GACX,CAYA,MAAa,+BAAgC,KAAI,WAAW,CA8ExD,YAAY,MAA6B,GAAY,MAAmC,CACpF,MAAM,MAAO,GAAI,CAAE,KAAM,wBAAwB,uBAAwB,WAAY,KAAK,CAAE,qFAC5F,IAAI,gBAAgB,MAAO,cAAe,IAAI,EAC9C,IAAI,gBAAgB,MAAO,cAAe,IAAI,EAC9C,IAAI,gBAAgB,MAAO,kBAAmB,IAAI,EAClD,KAAK,iBAAmB,IAAI,MAAM,SAAS,KAAK,OAAO,cAAc,CAAC,EACtE,KAAK,4BAA8B,IAAI,MAAM,SAAS,KAAK,OAAO,yBAAyB,CAAC,EAC5F,KAAK,2BAA6B,IAAI,MAAM,SAAS,KAAK,OAAO,wBAAwB,CAAC,EAE1F,KAAK,YAAc,MAAM,YACzB,KAAK,YAAc,MAAM,YACzB,KAAK,gBAAkB,MAAM,gBAC7B,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,oCAAqC,MAAM,KAAM,CAAE,gBAAiB,MAAM,CAAE,QA7EvH,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,CAAA,EAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,UAAU,EAC5E,YAAc,+CAA+C,kBAAkB,EAC/E,IAAM,GAAI,yBAAwB,MAAO,GAAI,YAAY,KAAK,EACpE,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,eAAe,EACvE,IAAI,oBAAoB,QAAS,OAAO,EAE5C,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,EAAE,EACpD,IA6EJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,wBAAwB,sBAAsB,EACpG,UAAU,aAAa,+BAAgC,KAAK,aAAa,KAG/D,gBAAa,CACvB,MAAO,CACH,YAAa,KAAK,YAClB,YAAa,KAAK,YAClB,gBAAiB,KAAK,gBACtB,KAAM,KAAK,KAAK,WAAU,GAIxB,iBAAiB,MAA2B,CAClD,MAAO,8CAA6C,KAAK,GAlHjE,QAAA,wBAAA,kJAI2B,wBAAA,uBAAyB,oCA4IpD,kEAAkE,WAAe,CAC7E,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,kBAAmB,IAAI,iBAAiB,EAAE,WAAW,eAAe,CAAC,EAC1G,OAAO,QAAQ,IAAI,kBAAkB,kBAAmB,IAAI,cAAc,EAAE,WAAW,eAAe,CAAC,EAChG,OAAO,KAAK,+DAA+D,CACtF,CAUA,wEAAwE,WAAe,CACnF,MAAK,KAAI,WAAW,UAAU,EAC9B,0DAAyD,UAAU,EAAE,cAAa,EAC3E,CACH,gBAAiB,IAAI,uBAAuB,WAAW,eAAe,IAHhC,UAK9C,CAGA,0EAA0E,WAAe,CACrF,GAAI,IAAI,mBAAmB,UAAU,EACjC,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAG5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,kBAAmB,kBAAmB,UAAU,mBAAmB,UAAU,WAAW,eAAe,CAAC,EAC9H,IAAI,iCAAiC,UAAU,EACxC,GACX,CAqEA,wCAAwC,WAAe,CACnD,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,cAAe,IAAI,cAAc,EAAE,WAAW,WAAW,CAAC,EAC/F,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,iBAAiB,EAAE,WAAW,iBAAiB,CAAC,EAC9G,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,cAAc,EAAE,WAAW,iBAAiB,CAAC,EAC3G,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,iBAAiB,EAAE,WAAW,IAAI,CAAC,EACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,EAAE,WAAW,IAAI,CAAC,EACjF,OAAO,QAAQ,IAAI,kBAAkB,yBAA0B,wDAAwD,EAAE,WAAW,sBAAsB,CAAC,EAC3J,OAAO,QAAQ,IAAI,kBAAkB,oCAAqC,mEAAmE,EAAE,WAAW,iCAAiC,CAAC,EAC5L,OAAO,QAAQ,IAAI,kBAAkB,sBAAuB,qDAAqD,EAAE,WAAW,mBAAmB,CAAC,EAClJ,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,cAAc,CAAC,EAAE,WAAW,IAAI,CAAC,EAC7F,OAAO,KAAK,6DAA6D,CACpF,CAUA,+CAA+C,WAAe,CAC1D,MAAK,KAAI,WAAW,UAAU,EAC9B,gCAA+B,UAAU,EAAE,cAAa,EACjD,CACH,kBAAmB,IAAI,uBAAuB,WAAW,iBAAiB,EAC1E,KAAM,IAAI,uBAAuB,WAAW,IAAI,EAChD,YAAa,IAAI,uBAAuB,WAAW,WAAW,EAC9D,uBAAwB,+DAA+D,WAAW,sBAAsB,EACxH,kCAAmC,0EAA0E,WAAW,iCAAiC,EACzJ,oBAAqB,4DAA4D,WAAW,mBAAmB,EAC/G,KAAM,IAAI,WAAW,IAAI,sBAAsB,EAAE,WAAW,IAAI,IAT1B,UAW9C,CAGA,iDAAiD,WAAe,CAE5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,oBAAqB,oBAAqB,UAAU,mBAAmB,UAAU,WAAW,iBAAiB,CAAC,EACpI,IAAI,kBAAkB,OAAQ,OAAQ,UAAU,mBAAmB,UAAU,WAAW,IAAI,CAAC,EAC7F,IAAI,kBAAkB,cAAe,cAAe,WAAW,aAAe,KAAO,UAAU,mBAAmB,UAAU,WAAW,WAAW,EAAI,MAAS,EAC/J,IAAI,kBAAkB,yBAA0B,yBAA0B,WAAW,wBAA0B,KAAO,iEAAiE,WAAW,sBAAsB,EAAI,MAAS,EACrO,IAAI,kBAAkB,oCAAqC,oCAAqC,WAAW,mCAAqC,KAAO,4EAA4E,WAAW,iCAAiC,EAAI,MAAS,EAC5R,IAAI,kBAAkB,sBAAuB,sBAAuB,WAAW,qBAAuB,KAAO,8DAA8D,WAAW,mBAAmB,EAAI,MAAS,EACtN,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,SAAS,EAAE,WAAW,IAAI,EAAI,MAAgB,EACjL,IAAI,iCAAiC,UAAU,EACxC,GACX,CAYA,MAAa,wBAAyB,KAAI,WAAW,CA6FjD,YAAY,MAA6B,GAAY,MAA4B,CAC7E,MAAM,MAAO,GAAI,CAAE,KAAM,iBAAiB,uBAAwB,WAAY,KAAK,CAAE,8EACrF,IAAI,gBAAgB,MAAO,oBAAqB,IAAI,EACpD,IAAI,gBAAgB,MAAO,OAAQ,IAAI,EACvC,KAAK,qBAAuB,IAAI,MAAM,SAAS,KAAK,OAAO,kBAAkB,CAAC,EAC9E,KAAK,oBAAsB,IAAI,MAAM,SAAS,KAAK,OAAO,iBAAiB,CAAC,EAE5E,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,KAAO,MAAM,KAClB,KAAK,YAAc,MAAM,YACzB,KAAK,uBAAyB,MAAM,uBACpC,KAAK,kCAAoC,MAAM,kCAC/C,KAAK,oBAAsB,MAAM,oBACjC,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,6BAA8B,MAAM,KAAM,CAAE,gBAAiB,MAAM,CAAE,QA7FhH,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,CAAA,EAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,UAAU,EAC5E,YAAc,wCAAwC,kBAAkB,EACxE,IAAM,GAAI,kBAAiB,MAAO,GAAI,YAAY,KAAK,EAC7D,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,eAAe,EACvE,IAAI,oBAAoB,QAAS,OAAO,EAE5C,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,EAAE,EACpD,IA6FJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,iBAAiB,sBAAsB,EAC7F,UAAU,aAAa,+BAAgC,KAAK,aAAa,KAG/D,gBAAa,CACvB,MAAO,CACH,kBAAmB,KAAK,kBACxB,KAAM,KAAK,KACX,YAAa,KAAK,YAClB,uBAAwB,KAAK,uBAC7B,kCAAmC,KAAK,kCACxC,oBAAqB,KAAK,oBAC1B,KAAM,KAAK,KAAK,WAAU,GAIxB,iBAAiB,MAA2B,CAClD,MAAO,uCAAsC,KAAK,GArI1D,QAAA,iBAAA,6HAI2B,iBAAA,uBAAyB,6BA0KpD,wEAAwE,WAAe,CACnF,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,iBAAiB,EAAE,WAAW,iBAAiB,CAAC,EAC9G,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,cAAc,EAAE,WAAW,iBAAiB,CAAC,EAC3G,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,iBAAiB,EAAE,WAAW,YAAY,CAAC,EACpG,OAAO,QAAQ,IAAI,kBAAkB,eAAgB,IAAI,cAAc,IAAI,cAAc,CAAC,EAAE,WAAW,YAAY,CAAC,EAC7G,OAAO,KAAK,4EAA4E,CACnG,CAUA,8EAA8E,WAAe,CACzF,MAAK,KAAI,WAAW,UAAU,EAC9B,gEAA+D,UAAU,EAAE,cAAa,EACjF,CACH,kBAAmB,IAAI,uBAAuB,WAAW,iBAAiB,EAC1E,aAAc,IAAI,WAAW,IAAI,sBAAsB,EAAE,WAAW,YAAY,IAJ1C,UAM9C,CAGA,gFAAgF,WAAe,CAC3F,GAAI,IAAI,mBAAmB,UAAU,EACjC,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAG5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,oBAAqB,oBAAqB,UAAU,mBAAmB,UAAU,WAAW,iBAAiB,CAAC,EACpI,IAAI,kBAAkB,eAAgB,eAAgB,UAAU,mBAAmB,eAAe,WAAW,YAAY,CAAC,EAC1H,IAAI,iCAAiC,UAAU,EACxC,GACX,CAiCA,kEAAkE,WAAe,CAC7E,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,cAAe,IAAI,cAAc,EAAE,WAAW,WAAW,CAAC,EACxF,OAAO,KAAK,sEAAsE,CAC7F,CAUA,wEAAwE,WAAe,CACnF,MAAK,KAAI,WAAW,UAAU,EAC9B,0DAAyD,UAAU,EAAE,cAAa,EAC3E,CACH,YAAa,IAAI,uBAAuB,WAAW,WAAW,IAHxB,UAK9C,CAGA,0EAA0E,WAAe,CACrF,GAAI,IAAI,mBAAmB,UAAU,EACjC,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAG5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,cAAe,cAAe,WAAW,aAAe,KAAO,UAAU,mBAAmB,UAAU,WAAW,WAAW,EAAI,MAAS,EAC/J,IAAI,iCAAiC,UAAU,EACxC,GACX,CA4BA,6EAA6E,WAAe,CACxF,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,WAAY,IAAI,cAAc,EAAE,WAAW,QAAQ,CAAC,EAClF,OAAO,KAAK,iFAAiF,CACxG,CAUA,mFAAmF,WAAe,CAC9F,MAAK,KAAI,WAAW,UAAU,EAC9B,qEAAoE,UAAU,EAAE,cAAa,EACtF,CACH,SAAU,IAAI,uBAAuB,WAAW,QAAQ,IAHlB,UAK9C,CAGA,qFAAqF,WAAe,CAChG,GAAI,IAAI,mBAAmB,UAAU,EACjC,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAG5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,WAAY,WAAY,WAAW,UAAY,KAAO,UAAU,mBAAmB,UAAU,WAAW,QAAQ,EAAI,MAAS,EACnJ,IAAI,iCAAiC,UAAU,EACxC,GACX,CA4BA,+DAA+D,WAAe,CAC1E,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,kBAAmB,8DAA8D,EAAE,WAAW,eAAe,CAAC,EAC5I,OAAO,KAAK,mEAAmE,CAC1F,CAUA,qEAAqE,WAAe,CAChF,MAAK,KAAI,WAAW,UAAU,EAC9B,uDAAsD,UAAU,EAAE,cAAa,EACxE,CACH,gBAAiB,qEAAqE,WAAW,eAAe,IAH1E,UAK9C,CAGA,uEAAuE,WAAe,CAClF,GAAI,IAAI,mBAAmB,UAAU,EACjC,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAG5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,kBAAmB,kBAAmB,WAAW,iBAAmB,KAAO,uEAAuE,WAAW,eAAe,EAAI,MAAS,EAC/M,IAAI,iCAAiC,UAAU,EACxC,GACX",
  "names": []
}
