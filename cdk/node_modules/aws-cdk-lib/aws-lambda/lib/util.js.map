{
  "version": 3,
  "sources": ["util.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Alias, AliasOptions } from './alias';\nimport { IVersion } from './lambda-version';\n\nexport function addAlias(scope: Construct, version: IVersion, aliasName: string, options: AliasOptions = {}) {\n  return new Alias(scope, `Alias${aliasName}`, {\n    aliasName,\n    version,\n    ...options,\n  });\n}\n\n/**\n * Map a function over an array and concatenate the results\n */\nexport function flatMap<T, U>(xs: T[], fn: ((x: T, i: number) => U[])): U[] {\n  return flatten(xs.map(fn));\n}\n\n/**\n * Flatten a list of lists into a list of elements\n */\nexport function flatten<T>(xs: T[][]): T[] {\n  return Array.prototype.concat.apply([], xs);\n}\n"],
  "mappings": "4HACA,KAAA,SAAA,QAAA,SAAA,EAGA,kBAAyB,MAAkB,QAAmB,UAAmB,QAAwB,CAAA,EAAE,CACzG,MAAO,IAAI,SAAA,MAAM,MAAO,QAAQ,YAAa,CAC3C,UACA,WACG,QACJ,CACH,CANA,QAAA,SAAA,SAWA,iBAA8B,GAAS,GAA8B,CACnE,MAAO,SAAQ,GAAG,IAAI,EAAE,CAAC,CAC3B,CAFA,QAAA,QAAA,QAOA,iBAA2B,GAAS,CAClC,MAAO,OAAM,UAAU,OAAO,MAAM,CAAA,EAAI,EAAE,CAC5C,CAFA,QAAA,QAAA",
  "names": []
}
