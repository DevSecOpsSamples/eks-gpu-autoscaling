{
  "version": 3,
  "sources": ["architecture.ts"],
  "sourcesContent": ["/**\n * Architectures supported by AWS Lambda\n */\nexport class Architecture {\n  /**\n   * 64 bit architecture with x86 instruction set.\n   */\n  public static readonly X86_64 = new Architecture('x86_64', 'linux/amd64');\n\n  /**\n   * 64 bit architecture with the ARM instruction set.\n   */\n  public static readonly ARM_64 = new Architecture('arm64', 'linux/arm64');\n\n  /**\n   * Used to specify a custom architecture name.\n   * Use this if the architecture name is not yet supported by the CDK.\n   * @param name the architecture name as recognized by AWS Lambda.\n   * @param [dockerPlatform=linux/amd64] the platform to use for this architecture when building with Docker\n   */\n  public static custom(name: string, dockerPlatform?: string) {\n    return new Architecture(name, dockerPlatform ?? 'linux/amd64');\n  }\n\n  /**\n   * The name of the architecture as recognized by the AWS Lambda service APIs.\n   */\n  public readonly name: string;\n\n  /**\n   * The platform to use for this architecture when building with Docker.\n   */\n  public readonly dockerPlatform: string;\n\n  private constructor(archName: string, dockerPlatform: string) {\n    this.name = archName;\n    this.dockerPlatform = dockerPlatform;\n  }\n}\n"],
  "mappings": "wJAGA,MAAa,YAAY,CA+BvB,YAAoB,SAAkB,eAAsB,CAC1D,KAAK,KAAO,SACZ,KAAK,eAAiB,qBAhBV,QAAO,KAAc,eAAuB,CACxD,MAAO,IAAI,cAAa,KAAM,gBAAc,KAAd,eAAkB,aAAa,GAlBjE,QAAA,aAAA,iHAIyB,aAAA,OAAS,GAAI,cAAa,SAAU,aAAa,EAKjD,aAAA,OAAS,GAAI,cAAa,QAAS,aAAa",
  "names": []
}
