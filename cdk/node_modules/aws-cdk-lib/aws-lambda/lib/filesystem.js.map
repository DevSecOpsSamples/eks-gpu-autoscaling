{
  "version": 3,
  "sources": ["filesystem.ts"],
  "sourcesContent": ["import { Connections } from '../../aws-ec2';\nimport * as efs from '../../aws-efs';\nimport * as iam from '../../aws-iam';\nimport { Stack } from '../../core';\nimport { IDependable } from 'constructs';\n\n/**\n * FileSystem configurations for the Lambda function\n */\nexport interface FileSystemConfig {\n  /**\n   * mount path in the lambda runtime environment\n   */\n  readonly localMountPath: string;\n\n  /**\n   * ARN of the access point\n   */\n  readonly arn: string;\n\n  /**\n   * array of IDependable that lambda function depends on\n   *\n   * @default - no dependency\n   */\n  readonly dependency?: IDependable[]\n\n  /**\n   * connections object used to allow ingress traffic from lambda function\n   *\n   * @default - no connections required to add extra ingress rules for Lambda function\n   */\n  readonly connections?: Connections;\n\n  /**\n   * additional IAM policies required for the lambda function\n   *\n   * @default - no additional policies required\n   */\n  readonly policies?: iam.PolicyStatement[];\n}\n\n/**\n * Represents the filesystem for the Lambda function\n */\nexport class FileSystem {\n  /**\n   * mount the filesystem from Amazon EFS\n   * @param ap the Amazon EFS access point\n   * @param mountPath the target path in the lambda runtime environment\n   */\n  public static fromEfsAccessPoint(ap: efs.IAccessPoint, mountPath: string): FileSystem {\n    return new FileSystem({\n      localMountPath: mountPath,\n      arn: ap.accessPointArn,\n      dependency: [ap.fileSystem.mountTargetsAvailable],\n      connections: ap.fileSystem.connections,\n      policies: [\n        new iam.PolicyStatement({\n          actions: ['elasticfilesystem:ClientMount'],\n          resources: ['*'],\n          conditions: {\n            StringEquals: {\n              'elasticfilesystem:AccessPointArn': ap.accessPointArn,\n            },\n          },\n        }),\n        new iam.PolicyStatement({\n          actions: ['elasticfilesystem:ClientWrite'],\n          resources: [Stack.of(ap).formatArn({\n            service: 'elasticfilesystem',\n            resource: 'file-system',\n            resourceName: ap.fileSystem.fileSystemId,\n          })],\n        }),\n      ],\n    });\n  }\n\n  /**\n   * @param config the FileSystem configurations for the Lambda function\n   */\n  protected constructor(public readonly config: FileSystemConfig) { }\n}\n"],
  "mappings": "iNAEA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EA0CA,MAAa,UAAU,CAqCrB,YAAsC,OAAwB,CAAxB,KAAA,OAAA,qFA/BxB,oBAAmB,GAAsB,UAAiB,qEAC/D,GAAI,YAAW,CACpB,eAAgB,UAChB,IAAK,GAAG,eACR,WAAY,CAAC,GAAG,WAAW,qBAAqB,EAChD,YAAa,GAAG,WAAW,YAC3B,SAAU,CACR,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,+BAA+B,EACzC,UAAW,CAAC,GAAG,EACf,WAAY,CACV,aAAc,CACZ,mCAAoC,GAAG,iBAG5C,EACD,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,+BAA+B,EACzC,UAAW,CAAC,OAAA,MAAM,GAAG,EAAE,EAAE,UAAU,CACjC,QAAS,oBACT,SAAU,cACV,aAAc,GAAG,WAAW,aAC7B,CAAC,EACH,GAEJ,GA/BL,QAAA,WAAA",
  "names": []
}
