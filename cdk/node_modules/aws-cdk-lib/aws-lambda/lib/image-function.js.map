{
  "version": 3,
  "sources": ["image-function.ts"],
  "sourcesContent": ["import * as ecr from '../../aws-ecr';\nimport { Construct } from 'constructs';\nimport { AssetImageCode, AssetImageCodeProps, EcrImageCode, EcrImageCodeProps, Code } from './code';\nimport { Function, FunctionOptions } from './function';\nimport { Handler } from './handler';\nimport { Runtime } from './runtime';\n\n/**\n * Properties to configure a new DockerImageFunction construct.\n */\nexport interface DockerImageFunctionProps extends FunctionOptions {\n  /**\n   * The source code of your Lambda function. You can point to a file in an\n   * Amazon Simple Storage Service (Amazon S3) bucket or specify your source\n   * code as inline text.\n   */\n  readonly code: DockerImageCode;\n}\n\n/**\n * Code property for the DockerImageFunction construct\n */\nexport abstract class DockerImageCode {\n  /**\n   * Use an existing ECR image as the Lambda code.\n   * @param repository the ECR repository that the image is in\n   * @param props properties to further configure the selected image\n   */\n  public static fromEcr(repository: ecr.IRepository, props?: EcrImageCodeProps): DockerImageCode {\n    return {\n      _bind() {\n        return new EcrImageCode(repository, props);\n      },\n    };\n  }\n\n  /**\n   * Create an ECR image from the specified asset and bind it as the Lambda code.\n   * @param directory the directory from which the asset must be created\n   * @param props properties to further configure the selected image\n   */\n  public static fromImageAsset(directory: string, props: AssetImageCodeProps = {}): DockerImageCode {\n    return {\n      _bind() {\n        return new AssetImageCode(directory, props);\n      },\n    };\n  }\n\n  /**\n   * Produce a `Code` instance from this `DockerImageCode`.\n   * @internal\n   */\n  public abstract _bind(): Code;\n}\n\n/**\n * Create a lambda function where the handler is a docker image\n */\nexport class DockerImageFunction extends Function {\n  constructor(scope: Construct, id: string, props: DockerImageFunctionProps) {\n    super(scope, id, {\n      ...props,\n      handler: Handler.FROM_IMAGE,\n      runtime: Runtime.FROM_IMAGE,\n      code: props.code._bind(),\n    });\n  }\n}"],
  "mappings": "qPAEA,OAAA,QAAA,QAAA,EACA,WAAA,QAAA,YAAA,EACA,UAAA,QAAA,WAAA,EACA,UAAA,QAAA,WAAA,EAiBA,MAAsB,eAAe,OAMrB,SAAQ,WAA6B,MAAyB,oJACnE,CACL,OAAK,CACH,MAAO,IAAI,QAAA,aAAa,WAAY,KAAK,CAC3C,SASU,gBAAe,UAAmB,MAA6B,CAAA,EAAE,kFACtE,CACL,OAAK,CACH,MAAO,IAAI,QAAA,eAAe,UAAW,KAAK,CAC5C,IAvBN,QAAA,gBAAA,0HAqCA,MAAa,2BAA4B,YAAA,QAAQ,CAC/C,YAAY,MAAkB,GAAY,MAA+B,CACvE,MAAM,MAAO,GAAI,IACZ,MACH,QAAS,UAAA,QAAQ,WACjB,QAAS,UAAA,QAAQ,WACjB,KAAM,MAAM,KAAK,MAAK,EACvB,kFAPL,QAAA,oBAAA",
  "names": []
}
