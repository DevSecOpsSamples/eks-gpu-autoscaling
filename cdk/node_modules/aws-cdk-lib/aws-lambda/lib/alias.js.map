{
  "version": 3,
  "sources": ["alias.ts"],
  "sourcesContent": ["import * as appscaling from '../../aws-applicationautoscaling';\nimport * as cloudwatch from '../../aws-cloudwatch';\nimport * as iam from '../../aws-iam';\nimport { ArnFormat } from '../../core';\nimport { Construct } from 'constructs';\nimport { Architecture } from './architecture';\nimport { EventInvokeConfigOptions } from './event-invoke-config';\nimport { IFunction, QualifiedFunctionBase } from './function-base';\nimport { extractQualifierFromArn, IVersion } from './lambda-version';\nimport { CfnAlias } from './lambda.generated';\nimport { ScalableFunctionAttribute } from './private/scalable-function-attribute';\nimport { AutoScalingOptions, IScalableFunctionAttribute } from './scalable-attribute-api';\n\nexport interface IAlias extends IFunction {\n  /**\n   * Name of this alias.\n   *\n   * @attribute\n   */\n  readonly aliasName: string;\n\n  /**\n   * The underlying Lambda function version.\n   */\n  readonly version: IVersion;\n}\n\n/**\n * Options for `lambda.Alias`.\n */\nexport interface AliasOptions extends EventInvokeConfigOptions {\n  /**\n   * Description for the alias\n   *\n   * @default No description\n   */\n  readonly description?: string;\n\n  /**\n   * Additional versions with individual weights this alias points to\n   *\n   * Individual additional version weights specified here should add up to\n   * (less than) one. All remaining weight is routed to the default\n   * version.\n   *\n   * For example, the config is\n   *\n   *    version: \"1\"\n   *    additionalVersions: [{ version: \"2\", weight: 0.05 }]\n   *\n   * Then 5% of traffic will be routed to function version 2, while\n   * the remaining 95% of traffic will be routed to function version 1.\n   *\n   * @default No additional versions\n   */\n  readonly additionalVersions?: VersionWeight[];\n\n  /**\n   * Specifies a provisioned concurrency configuration for a function's alias.\n   *\n   * @default No provisioned concurrency\n   */\n  readonly provisionedConcurrentExecutions?: number;\n}\n\n/**\n * Properties for a new Lambda alias\n */\nexport interface AliasProps extends AliasOptions {\n  /**\n   * Name of this alias\n   */\n  readonly aliasName: string;\n\n  /**\n   * Function version this alias refers to\n   *\n   * Use lambda.currentVersion to reference a version with your latest changes.\n   */\n  readonly version: IVersion;\n}\n\nexport interface AliasAttributes {\n  readonly aliasName: string;\n  readonly aliasVersion: IVersion;\n}\n\n/**\n * A new alias to a particular version of a Lambda function.\n */\nexport class Alias extends QualifiedFunctionBase implements IAlias {\n  public static fromAliasAttributes(scope: Construct, id: string, attrs: AliasAttributes): IAlias {\n    class Imported extends QualifiedFunctionBase implements IAlias {\n      public readonly aliasName = attrs.aliasName;\n      public readonly version = attrs.aliasVersion;\n      public readonly lambda = attrs.aliasVersion.lambda;\n      public readonly functionArn = `${attrs.aliasVersion.lambda.functionArn}:${attrs.aliasName}`;\n      public readonly functionName = `${attrs.aliasVersion.lambda.functionName}:${attrs.aliasName}`;\n      public readonly grantPrincipal = attrs.aliasVersion.grantPrincipal;\n      public readonly role = attrs.aliasVersion.role;\n      public readonly architecture = attrs.aliasVersion.lambda.architecture;\n\n      protected readonly canCreatePermissions = this._isStackAccount();\n      protected readonly qualifier = attrs.aliasName;\n    }\n    return new Imported(scope, id);\n  }\n\n  /**\n   * Name of this alias.\n   *\n   * @attribute\n   */\n  public readonly aliasName: string;\n  /**\n   * ARN of this alias\n   *\n   * Used to be able to use Alias in place of a regular Lambda. Lambda accepts\n   * ARNs everywhere it accepts function names.\n   */\n  public readonly functionName: string;\n\n  public readonly lambda: IFunction;\n\n  public readonly architecture: Architecture;\n\n  public readonly version: IVersion;\n\n  /**\n   * ARN of this alias\n   *\n   * Used to be able to use Alias in place of a regular Lambda. Lambda accepts\n   * ARNs everywhere it accepts function names.\n   */\n  public readonly functionArn: string;\n\n  protected readonly qualifier: string;\n\n  protected readonly canCreatePermissions: boolean = true;\n\n  private scalableAlias?: ScalableFunctionAttribute;\n  private readonly scalingRole: iam.IRole;\n\n  constructor(scope: Construct, id: string, props: AliasProps) {\n    super(scope, id, {\n      physicalName: props.aliasName,\n    });\n\n    this.lambda = props.version.lambda;\n    this.aliasName = this.physicalName;\n    this.version = props.version;\n    this.architecture = this.lambda.architecture;\n\n    const alias = new CfnAlias(this, 'Resource', {\n      name: this.aliasName,\n      description: props.description,\n      functionName: this.version.lambda.functionName,\n      functionVersion: props.version.version,\n      routingConfig: this.determineRoutingConfig(props),\n      provisionedConcurrencyConfig: this.determineProvisionedConcurrency(props),\n    });\n\n    // Use a Service Linked Role\n    // https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-service-linked-roles.html\n    this.scalingRole = iam.Role.fromRoleArn(this, 'ScalingRole', this.stack.formatArn({\n      service: 'iam',\n      region: '',\n      resource: 'role/aws-service-role/lambda.application-autoscaling.amazonaws.com',\n      resourceName: 'AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency',\n    }));\n\n    this.functionArn = this.getResourceArnAttribute(alias.ref, {\n      service: 'lambda',\n      resource: 'function',\n      resourceName: `${this.lambda.functionName}:${this.physicalName}`,\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n    });\n\n    this.qualifier = extractQualifierFromArn(alias.ref);\n\n    if (props.onFailure || props.onSuccess || props.maxEventAge || props.retryAttempts !== undefined) {\n      this.configureAsyncInvoke({\n        onFailure: props.onFailure,\n        onSuccess: props.onSuccess,\n        maxEventAge: props.maxEventAge,\n        retryAttempts: props.retryAttempts,\n      });\n    }\n\n    // ARN parsing splits on `:`, so we can only get the function's name from the ARN as resourceName...\n    // And we're parsing it out (instead of using the underlying function directly) in order to have use of it incur\n    // an implicit dependency on the resource.\n    this.functionName = `${this.stack.splitArn(this.functionArn, ArnFormat.COLON_RESOURCE_NAME).resourceName!}:${this.aliasName}`;\n  }\n\n  public get grantPrincipal() {\n    return this.version.grantPrincipal;\n  }\n\n  public get role() {\n    return this.version.role;\n  }\n\n  public metric(metricName: string, props: cloudwatch.MetricOptions = {}): cloudwatch.Metric {\n    // Metrics on Aliases need the \"bare\" function name, and the alias' ARN, this differs from the base behavior.\n    return super.metric(metricName, {\n      dimensionsMap: {\n        FunctionName: this.lambda.functionName,\n        // construct the name from the underlying lambda so that alarms on an alias\n        // don't cause a circular dependency with CodeDeploy\n        // see: https://github.com/aws/aws-cdk/issues/2231\n        Resource: `${this.lambda.functionName}:${this.aliasName}`,\n      },\n      ...props,\n    });\n  }\n\n  /**\n   * Configure provisioned concurrency autoscaling on a function alias. Returns a scalable attribute that can call\n   * `scaleOnUtilization()` and `scaleOnSchedule()`.\n   *\n   * @param options Autoscaling options\n   */\n  public addAutoScaling(options: AutoScalingOptions): IScalableFunctionAttribute {\n    if (this.scalableAlias) {\n      throw new Error('AutoScaling already enabled for this alias');\n    }\n    return this.scalableAlias = new ScalableFunctionAttribute(this, 'AliasScaling', {\n      minCapacity: options.minCapacity ?? 1,\n      maxCapacity: options.maxCapacity,\n      resourceId: `function:${this.functionName}`,\n      dimension: 'lambda:function:ProvisionedConcurrency',\n      serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n      role: this.scalingRole,\n    });\n  }\n\n  /**\n   * Calculate the routingConfig parameter from the input props\n   */\n  private determineRoutingConfig(props: AliasProps) {\n    if (!props.additionalVersions || props.additionalVersions.length === 0) {\n      return undefined;\n    }\n\n    this.validateAdditionalWeights(props.additionalVersions);\n\n    return {\n      additionalVersionWeights: props.additionalVersions.map(vw => {\n        return {\n          functionVersion: vw.version.version,\n          functionWeight: vw.weight,\n        };\n      }),\n    };\n  }\n\n  /**\n   * Validate that the additional version weights make sense\n   *\n   * We validate that they are positive and add up to something <= 1.\n   */\n  private validateAdditionalWeights(weights: VersionWeight[]) {\n    const total = weights.map(w => {\n      if (w.weight < 0 || w.weight > 1) { throw new Error(`Additional version weight must be between 0 and 1, got: ${w.weight}`); }\n      return w.weight;\n    }).reduce((a, x) => a + x);\n\n    if (total > 1) {\n      throw new Error(`Sum of additional version weights must not exceed 1, got: ${total}`);\n    }\n  }\n\n  /**\n   * Validate that the provisionedConcurrentExecutions makes sense\n   *\n   * Member must have value greater than or equal to 1\n   */\n  private determineProvisionedConcurrency(props: AliasProps): CfnAlias.ProvisionedConcurrencyConfigurationProperty | undefined {\n    if (!props.provisionedConcurrentExecutions) {\n      return undefined;\n    }\n\n    if (props.provisionedConcurrentExecutions <= 0) {\n      throw new Error('provisionedConcurrentExecutions must have value greater than or equal to 1');\n    }\n\n    return { provisionedConcurrentExecutions: props.provisionedConcurrentExecutions };\n  }\n}\n\n/**\n * A version/weight pair for routing traffic to Lambda functions\n */\nexport interface VersionWeight {\n  /**\n   * The version to route traffic to\n   */\n  readonly version: IVersion;\n\n  /**\n   * How much weight to assign to this version (0..1)\n   */\n  readonly weight: number;\n}\n"],
  "mappings": "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",
  "names": []
}
