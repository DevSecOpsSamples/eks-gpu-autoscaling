{
  "version": 3,
  "sources": ["event-invoke-config.ts"],
  "sourcesContent": ["import { Duration, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { DestinationType, IDestination } from './destination';\nimport { IFunction } from './function-base';\nimport { CfnEventInvokeConfig } from './lambda.generated';\n\n/**\n * Options to add an EventInvokeConfig to a function.\n */\nexport interface EventInvokeConfigOptions {\n  /**\n   * The destination for failed invocations.\n   *\n   * @default - no destination\n   */\n  readonly onFailure?: IDestination;\n\n  /**\n   * The destination for successful invocations.\n   *\n   * @default - no destination\n   */\n  readonly onSuccess?: IDestination;\n\n  /**\n   * The maximum age of a request that Lambda sends to a function for\n   * processing.\n   *\n   * Minimum: 60 seconds\n   * Maximum: 6 hours\n   *\n   * @default Duration.hours(6)\n   */\n  readonly maxEventAge?: Duration;\n\n  /**\n   * The maximum number of times to retry when the function returns an error.\n   *\n   * Minimum: 0\n   * Maximum: 2\n   *\n   * @default 2\n   */\n  readonly retryAttempts?: number;\n}\n\n/**\n * Properties for an EventInvokeConfig\n */\nexport interface EventInvokeConfigProps extends EventInvokeConfigOptions {\n  /**\n   * The Lambda function\n   */\n  readonly function: IFunction;\n\n  /**\n   * The qualifier\n   *\n   * @default - latest version\n   */\n  readonly qualifier?: string;\n}\n\n/**\n * Configure options for asynchronous invocation on a version or an alias\n *\n * By default, Lambda retries an asynchronous invocation twice if the function\n * returns an error. It retains events in a queue for up to six hours. When an\n * event fails all processing attempts or stays in the asynchronous invocation\n * queue for too long, Lambda discards it.\n */\nexport class EventInvokeConfig extends Resource {\n  constructor(scope: Construct, id: string, props: EventInvokeConfigProps) {\n    super(scope, id);\n\n    if (props.maxEventAge && (props.maxEventAge.toSeconds() < 60 || props.maxEventAge.toSeconds() > 21600)) {\n      throw new Error('`maximumEventAge` must represent a `Duration` that is between 60 and 21600 seconds.');\n    }\n\n    if (props.retryAttempts && (props.retryAttempts < 0 || props.retryAttempts > 2)) {\n      throw new Error('`retryAttempts` must be between 0 and 2.');\n    }\n\n    new CfnEventInvokeConfig(this, 'Resource', {\n      destinationConfig: props.onFailure || props.onSuccess\n        ? {\n          ...props.onFailure ? { onFailure: props.onFailure.bind(this, props.function, { type: DestinationType.FAILURE }) } : {},\n          ...props.onSuccess ? { onSuccess: props.onSuccess.bind(this, props.function, { type: DestinationType.SUCCESS }) } : {},\n        }\n        : undefined,\n      functionName: props.function.functionName,\n      maximumEventAgeInSeconds: props.maxEventAge && props.maxEventAge.toSeconds(),\n      maximumRetryAttempts: props.retryAttempts ?? undefined,\n      qualifier: props.qualifier || '$LATEST',\n    });\n  }\n}\n"],
  "mappings": "wNAAA,OAAA,QAAA,YAAA,EAEA,cAAA,QAAA,eAAA,EAEA,mBAAA,QAAA,oBAAA,EAmEA,MAAa,yBAA0B,QAAA,QAAQ,CAC7C,YAAY,MAAkB,GAAY,MAA6B,QACrE,MAAM,MAAO,EAAE,EAEf,gFAAI,MAAM,aAAgB,OAAM,YAAY,UAAS,EAAK,IAAM,MAAM,YAAY,UAAS,EAAK,OAC9F,KAAM,IAAI,OAAM,qFAAqF,EAGvG,GAAI,MAAM,eAAkB,OAAM,cAAgB,GAAK,MAAM,cAAgB,GAC3E,KAAM,IAAI,OAAM,0CAA0C,EAG5D,GAAI,oBAAA,qBAAqB,KAAM,WAAY,CACzC,kBAAmB,MAAM,WAAa,MAAM,UACxC,IACG,MAAM,UAAY,CAAE,UAAW,MAAM,UAAU,KAAK,KAAM,MAAM,SAAU,CAAE,KAAM,cAAA,gBAAgB,OAAO,CAAE,CAAC,EAAK,CAAA,KACjH,MAAM,UAAY,CAAE,UAAW,MAAM,UAAU,KAAK,KAAM,MAAM,SAAU,CAAE,KAAM,cAAA,gBAAgB,OAAO,CAAE,CAAC,EAAK,CAAA,GAEpH,OACJ,aAAc,MAAM,SAAS,aAC7B,yBAA0B,MAAM,aAAe,MAAM,YAAY,UAAS,EAC1E,qBAAoB,IAAE,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,OAC7C,UAAW,MAAM,WAAa,UAC/B,GAvBL,QAAA,kBAAA",
  "names": []
}
