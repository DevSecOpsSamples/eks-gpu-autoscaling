{
  "version": 3,
  "sources": ["lambda-augmentations.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\nimport * as cloudwatch from '../../aws-cloudwatch';\nimport { FunctionBase } from \"./function-base\";\ndeclare module \"./function-base\" {\n    interface IFunction {\n        /**\n         * Return the given named metric for this Function\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * How often this Lambda is throttled\n         *\n         * Sum over 5 minutes\n         */\n        metricThrottles(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * How often this Lambda is invoked\n         *\n         * Sum over 5 minutes\n         */\n        metricInvocations(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * How many invocations of this Lambda fail\n         *\n         * Sum over 5 minutes\n         */\n        metricErrors(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * How long execution of this Lambda takes\n         *\n         * Average over 5 minutes\n         */\n        metricDuration(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n    interface FunctionBase {\n        /**\n         * Return the given named metric for this Function\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * How often this Lambda is throttled\n         *\n         * Sum over 5 minutes\n         */\n        metricThrottles(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * How often this Lambda is invoked\n         *\n         * Sum over 5 minutes\n         */\n        metricInvocations(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * How many invocations of this Lambda fail\n         *\n         * Sum over 5 minutes\n         */\n        metricErrors(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * How long execution of this Lambda takes\n         *\n         * Average over 5 minutes\n         */\n        metricDuration(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n}\nFunctionBase.prototype.metric = function(metricName: string, props?: cloudwatch.MetricOptions) {\n  return new cloudwatch.Metric({\n    namespace: 'AWS/Lambda',\n    metricName,\n    dimensionsMap: { FunctionName: this.functionName },\n    ...props\n  }).attachTo(this);\n};\nFunctionBase.prototype.metricThrottles = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('Throttles', { statistic: 'Sum', ...props });\n};\nFunctionBase.prototype.metricInvocations = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('Invocations', { statistic: 'Sum', ...props });\n};\nFunctionBase.prototype.metricErrors = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('Errors', { statistic: 'Sum', ...props });\n};\nFunctionBase.prototype.metricDuration = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('Duration', { statistic: 'Average', ...props });\n};\n"],
  "mappings": "oEAGA,KAAA,YAAA,QAAA,sBAAA,EACA,gBAAA,QAAA,iBAAA,EA+DA,gBAAA,aAAa,UAAU,OAAS,SAAS,WAAoB,MAAgC,CAC3F,MAAO,IAAI,YAAW,OAAO,CAC3B,UAAW,aACX,WACA,cAAe,CAAE,aAAc,KAAK,YAAY,KAC7C,MACJ,EAAE,SAAS,IAAI,CAClB,EACA,gBAAA,aAAa,UAAU,gBAAkB,SAAS,MAAgC,CAChF,MAAO,MAAK,OAAO,YAAa,CAAE,UAAW,SAAU,KAAK,CAAE,CAChE,EACA,gBAAA,aAAa,UAAU,kBAAoB,SAAS,MAAgC,CAClF,MAAO,MAAK,OAAO,cAAe,CAAE,UAAW,SAAU,KAAK,CAAE,CAClE,EACA,gBAAA,aAAa,UAAU,aAAe,SAAS,MAAgC,CAC7E,MAAO,MAAK,OAAO,SAAU,CAAE,UAAW,SAAU,KAAK,CAAE,CAC7D,EACA,gBAAA,aAAa,UAAU,eAAiB,SAAS,MAAgC,CAC/E,MAAO,MAAK,OAAO,WAAY,CAAE,UAAW,aAAc,KAAK,CAAE,CACnE",
  "names": []
}
