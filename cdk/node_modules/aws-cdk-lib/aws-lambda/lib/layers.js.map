{
  "version": 3,
  "sources": ["layers.ts"],
  "sourcesContent": ["import { IResource, RemovalPolicy, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { Architecture } from './architecture';\nimport { Code } from './code';\nimport { CfnLayerVersion, CfnLayerVersionPermission } from './lambda.generated';\nimport { Runtime } from './runtime';\n\n/**\n * Non runtime options\n */\nexport interface LayerVersionOptions {\n  /**\n   * The description the this Lambda Layer.\n   *\n   * @default - No description.\n   */\n  readonly description?: string;\n\n  /**\n   * The SPDX licence identifier or URL to the license file for this layer.\n   *\n   * @default - No license information will be recorded.\n   */\n  readonly license?: string;\n\n  /**\n   * The name of the layer.\n   *\n   * @default - A name will be generated.\n   */\n  readonly layerVersionName?: string;\n\n  /**\n   * Whether to retain this version of the layer when a new version is added\n   * or when the stack is deleted.\n   *\n   * @default RemovalPolicy.DESTROY\n   */\n  readonly removalPolicy?: RemovalPolicy;\n}\n\nexport interface LayerVersionProps extends LayerVersionOptions {\n  /**\n   * The runtimes compatible with this Layer.\n   *\n   * @default - All runtimes are supported.\n   */\n  readonly compatibleRuntimes?: Runtime[];\n\n  /**\n   * The system architectures compatible with this layer.\n   * @default [Architecture.X86_64]\n   */\n  readonly compatibleArchitectures?: Architecture[];\n\n  /**\n   * The content of this Layer.\n   *\n   * Using `Code.fromInline` is not supported.\n   */\n  readonly code: Code;\n}\n\nexport interface ILayerVersion extends IResource {\n  /**\n   * The ARN of the Lambda Layer version that this Layer defines.\n   * @attribute\n   */\n  readonly layerVersionArn: string;\n\n  /**\n   * The runtimes compatible with this Layer.\n   *\n   * @default Runtime.All\n   */\n  readonly compatibleRuntimes?: Runtime[];\n\n  /**\n   * Add permission for this layer version to specific entities. Usage within\n   * the same account where the layer is defined is always allowed and does not\n   * require calling this method. Note that the principal that creates the\n   * Lambda function using the layer (for example, a CloudFormation changeset\n   * execution role) also needs to have the ``lambda:GetLayerVersion``\n   * permission on the layer version.\n   *\n   * @param id the ID of the grant in the construct tree.\n   * @param permission the identification of the grantee.\n   */\n  addPermission(id: string, permission: LayerVersionPermission): void;\n}\n\n/**\n * A reference to a Lambda Layer version.\n */\nabstract class LayerVersionBase extends Resource implements ILayerVersion {\n  public abstract readonly layerVersionArn: string;\n  public abstract readonly compatibleRuntimes?: Runtime[];\n\n  public addPermission(id: string, permission: LayerVersionPermission) {\n    if (permission.organizationId != null && permission.accountId !== '*') {\n      throw new Error(`OrganizationId can only be specified if AwsAccountId is '*', but it is ${permission.accountId}`);\n    }\n\n    new CfnLayerVersionPermission(this, id, {\n      action: 'lambda:GetLayerVersion',\n      layerVersionArn: this.layerVersionArn,\n      principal: permission.accountId,\n      organizationId: permission.organizationId,\n    });\n  }\n}\n\n/**\n * Identification of an account (or organization) that is allowed to access a Lambda Layer Version.\n */\nexport interface LayerVersionPermission {\n  /**\n   * The AWS Account id of the account that is authorized to use a Lambda Layer Version. The wild-card ``'*'`` can be\n   * used to grant access to \"any\" account (or any account in an organization when ``organizationId`` is specified).\n   */\n  readonly accountId: string;\n\n  /**\n   * The ID of the AWS Organization to which the grant is restricted.\n   *\n   * Can only be specified if ``accountId`` is ``'*'``\n   */\n  readonly organizationId?: string;\n}\n\n/**\n * Properties necessary to import a LayerVersion.\n */\nexport interface LayerVersionAttributes {\n  /**\n   * The ARN of the LayerVersion.\n   */\n  readonly layerVersionArn: string;\n\n  /**\n   * The list of compatible runtimes with this Layer.\n   */\n  readonly compatibleRuntimes?: Runtime[];\n}\n\n/**\n * Defines a new Lambda Layer version.\n */\nexport class LayerVersion extends LayerVersionBase {\n\n  /**\n   * Imports a layer version by ARN. Assumes it is compatible with all Lambda runtimes.\n   */\n  public static fromLayerVersionArn(scope: Construct, id: string, layerVersionArn: string): ILayerVersion {\n    return LayerVersion.fromLayerVersionAttributes(scope, id, {\n      layerVersionArn,\n      compatibleRuntimes: Runtime.ALL,\n    });\n  }\n\n  /**\n   * Imports a Layer that has been defined externally.\n   *\n   * @param scope the parent Construct that will use the imported layer.\n   * @param id    the id of the imported layer in the construct tree.\n   * @param attrs the properties of the imported layer.\n   */\n  public static fromLayerVersionAttributes(scope: Construct, id: string, attrs: LayerVersionAttributes): ILayerVersion {\n    if (attrs.compatibleRuntimes && attrs.compatibleRuntimes.length === 0) {\n      throw new Error('Attempted to import a Lambda layer that supports no runtime!');\n    }\n\n    class Import extends LayerVersionBase {\n      public readonly layerVersionArn = attrs.layerVersionArn;\n      public readonly compatibleRuntimes = attrs.compatibleRuntimes;\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly layerVersionArn: string;\n  public readonly compatibleRuntimes?: Runtime[];\n\n  constructor(scope: Construct, id: string, props: LayerVersionProps) {\n    super(scope, id, {\n      physicalName: props.layerVersionName,\n    });\n\n    if (props.compatibleRuntimes && props.compatibleRuntimes.length === 0) {\n      throw new Error('Attempted to define a Lambda layer that supports no runtime!');\n    }\n    if (props.code.isInline) {\n      throw new Error('Lambda layers cannot be created from inline code');\n    }\n    // Allow usage of the code in this context...\n    const code = props.code.bind(this);\n    if (code.inlineCode) {\n      throw new Error('Inline code is not supported for AWS Lambda layers');\n    }\n    if (!code.s3Location) {\n      throw new Error('Code must define an S3 location');\n    }\n\n    const resource: CfnLayerVersion = new CfnLayerVersion(this, 'Resource', {\n      compatibleRuntimes: props.compatibleRuntimes && props.compatibleRuntimes.map(r => r.name),\n      compatibleArchitectures: props.compatibleArchitectures?.map(a => a.name),\n      content: {\n        s3Bucket: code.s3Location.bucketName,\n        s3Key: code.s3Location.objectKey,\n        s3ObjectVersion: code.s3Location.objectVersion,\n      },\n      description: props.description,\n      layerName: this.physicalName,\n      licenseInfo: props.license,\n    });\n\n    if (props.removalPolicy) {\n      resource.applyRemovalPolicy(props.removalPolicy);\n    }\n\n    props.code.bindToResource(resource, {\n      resourceProperty: 'Content',\n    });\n\n    this.layerVersionArn = resource.ref;\n    this.compatibleRuntimes = props.compatibleRuntimes;\n  }\n}\n"],
  "mappings": "mNAAA,OAAA,QAAA,YAAA,EAIA,mBAAA,QAAA,oBAAA,EACA,UAAA,QAAA,WAAA,EAyFA,MAAe,wBAAyB,QAAA,QAAQ,CAIvC,cAAc,GAAY,WAAkC,CACjE,GAAI,WAAW,gBAAkB,MAAQ,WAAW,YAAc,IAChE,KAAM,IAAI,OAAM,0EAA0E,WAAW,WAAW,EAGlH,GAAI,oBAAA,0BAA0B,KAAM,GAAI,CACtC,OAAQ,yBACR,gBAAiB,KAAK,gBACtB,UAAW,WAAW,UACtB,eAAgB,WAAW,eAC5B,GAwCL,MAAa,oBAAqB,iBAAgB,CAmChD,YAAY,MAAkB,GAAY,MAAwB,QAChE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,iBACrB,EAED,2EAAI,MAAM,oBAAsB,MAAM,mBAAmB,SAAW,EAClE,KAAM,IAAI,OAAM,8DAA8D,EAEhF,GAAI,MAAM,KAAK,SACb,KAAM,IAAI,OAAM,kDAAkD,EAGpE,KAAM,MAAO,MAAM,KAAK,KAAK,IAAI,EACjC,GAAI,KAAK,WACP,KAAM,IAAI,OAAM,oDAAoD,EAEtE,GAAI,CAAC,KAAK,WACR,KAAM,IAAI,OAAM,iCAAiC,EAGnD,KAAM,UAA4B,GAAI,oBAAA,gBAAgB,KAAM,WAAY,CACtE,mBAAoB,MAAM,oBAAsB,MAAM,mBAAmB,IAAI,GAAK,EAAE,IAAI,EACxF,wBAAuB,IAAE,MAAM,2BAAuB,MAAA,KAAA,OAAA,OAAA,GAAE,IAAI,GAAK,EAAE,IAAI,EACvE,QAAS,CACP,SAAU,KAAK,WAAW,WAC1B,MAAO,KAAK,WAAW,UACvB,gBAAiB,KAAK,WAAW,eAEnC,YAAa,MAAM,YACnB,UAAW,KAAK,aAChB,YAAa,MAAM,QACpB,EAED,AAAI,MAAM,eACR,SAAS,mBAAmB,MAAM,aAAa,EAGjD,MAAM,KAAK,eAAe,SAAU,CAClC,iBAAkB,UACnB,EAED,KAAK,gBAAkB,SAAS,IAChC,KAAK,mBAAqB,MAAM,yBAxEpB,qBAAoB,MAAkB,GAAY,gBAAuB,CACrF,MAAO,cAAa,2BAA2B,MAAO,GAAI,CACxD,gBACA,mBAAoB,UAAA,QAAQ,IAC7B,QAUW,4BAA2B,MAAkB,GAAY,MAA6B,CAClG,gFAAI,MAAM,oBAAsB,MAAM,mBAAmB,SAAW,EAClE,KAAM,IAAI,OAAM,8DAA8D,EAGhF,MAAM,cAAe,iBAAgB,CAArC,aAAA,qBACkB,KAAA,gBAAkB,MAAM,gBACxB,KAAA,mBAAqB,MAAM,kBAC7C,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,GA7B/B,QAAA,aAAA",
  "names": []
}
