{
  "version": 3,
  "sources": ["code.ts"],
  "sourcesContent": ["import * as ecr from '../../aws-ecr';\nimport * as ecr_assets from '../../aws-ecr-assets';\nimport * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport * as s3_assets from '../../aws-s3-assets';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\n\n/**\n * Represents the Lambda Handler Code.\n */\nexport abstract class Code {\n  /**\n   * Lambda handler code as an S3 object.\n   * @param bucket The S3 bucket\n   * @param key The object key\n   * @param objectVersion Optional S3 object version\n   */\n  public static fromBucket(bucket: s3.IBucket, key: string, objectVersion?: string): S3Code {\n    return new S3Code(bucket, key, objectVersion);\n  }\n\n  /**\n   * DEPRECATED\n   * @deprecated use `fromBucket`\n   */\n  public static bucket(bucket: s3.IBucket, key: string, objectVersion?: string): S3Code {\n    return this.fromBucket(bucket, key, objectVersion);\n  }\n\n  /**\n   * Inline code for Lambda handler\n   * @returns `LambdaInlineCode` with inline code.\n   * @param code The actual handler code (limited to 4KiB)\n   */\n  public static fromInline(code: string): InlineCode {\n    return new InlineCode(code);\n  }\n\n  /**\n   * DEPRECATED\n   * @deprecated use `fromInline`\n   */\n  public static inline(code: string): InlineCode {\n    return this.fromInline(code);\n  }\n\n  /**\n   * Loads the function code from a local disk path.\n   *\n   * @param path Either a directory with the Lambda code bundle or a .zip file\n   */\n  public static fromAsset(path: string, options?: s3_assets.AssetOptions): AssetCode {\n    return new AssetCode(path, options);\n  }\n\n  /**\n   * Loads the function code from an asset created by a Docker build.\n   *\n   * By default, the asset is expected to be located at `/asset` in the\n   * image.\n   *\n   * @param path The path to the directory containing the Docker file\n   * @param options Docker build options\n   */\n  public static fromDockerBuild(path: string, options: DockerBuildAssetOptions = {}): AssetCode {\n    let imagePath = options.imagePath ?? '/asset/.';\n\n    // ensure imagePath ends with /. to copy the **content** at this path\n    if (imagePath.endsWith('/')) {\n      imagePath = `${imagePath}.`;\n    } else if (!imagePath.endsWith('/.')) {\n      imagePath = `${imagePath}/.`;\n    }\n\n    const assetPath = cdk.DockerImage\n      .fromBuild(path, options)\n      .cp(imagePath, options.outputPath);\n\n    return new AssetCode(assetPath);\n  }\n\n  /**\n   * DEPRECATED\n   * @deprecated use `fromAsset`\n   */\n  public static asset(path: string): AssetCode {\n    return this.fromAsset(path);\n  }\n\n  /**\n   * Creates a new Lambda source defined using CloudFormation parameters.\n   *\n   * @returns a new instance of `CfnParametersCode`\n   * @param props optional construction properties of {@link CfnParametersCode}\n   */\n  public static fromCfnParameters(props?: CfnParametersCodeProps): CfnParametersCode {\n    return new CfnParametersCode(props);\n  }\n\n  /**\n   * DEPRECATED\n   * @deprecated use `fromCfnParameters`\n   */\n  public static cfnParameters(props?: CfnParametersCodeProps): CfnParametersCode {\n    return this.fromCfnParameters(props);\n  }\n\n  /**\n   * Use an existing ECR image as the Lambda code.\n   * @param repository the ECR repository that the image is in\n   * @param props properties to further configure the selected image\n   */\n  public static fromEcrImage(repository: ecr.IRepository, props?: EcrImageCodeProps) {\n    return new EcrImageCode(repository, props);\n  }\n\n  /**\n   * Create an ECR image from the specified asset and bind it as the Lambda code.\n   * @param directory the directory from which the asset must be created\n   * @param props properties to further configure the selected image\n   */\n  public static fromAssetImage(directory: string, props: AssetImageCodeProps = {}) {\n    return new AssetImageCode(directory, props);\n  }\n\n  /**\n   * Determines whether this Code is inline code or not.\n   *\n   * @deprecated this value is ignored since inline is now determined based on the\n   * the `inlineCode` field of `CodeConfig` returned from `bind()`.\n   */\n  public abstract readonly isInline: boolean;\n\n  /**\n   * Called when the lambda or layer is initialized to allow this object to bind\n   * to the stack, add resources and have fun.\n   *\n   * @param scope The binding scope. Don't be smart about trying to down-cast or\n   * assume it's initialized. You may just use it as a construct scope.\n   */\n  public abstract bind(scope: Construct): CodeConfig;\n\n  /**\n   * Called after the CFN function resource has been created to allow the code\n   * class to bind to it. Specifically it's required to allow assets to add\n   * metadata for tooling like SAM CLI to be able to find their origins.\n   */\n  public bindToResource(_resource: cdk.CfnResource, _options?: ResourceBindOptions) {\n    return;\n  }\n}\n\n/**\n * Result of binding `Code` into a `Function`.\n */\nexport interface CodeConfig {\n  /**\n   * The location of the code in S3 (mutually exclusive with `inlineCode` and `image`).\n   * @default - code is not an s3 location\n   */\n  readonly s3Location?: s3.Location;\n\n  /**\n   * Inline code (mutually exclusive with `s3Location` and `image`).\n   * @default - code is not inline code\n   */\n  readonly inlineCode?: string;\n\n  /**\n   * Docker image configuration (mutually exclusive with `s3Location` and `inlineCode`).\n   * @default - code is not an ECR container image\n   */\n  readonly image?: CodeImageConfig;\n}\n\n/**\n * Result of the bind when an ECR image is used.\n */\nexport interface CodeImageConfig {\n  /**\n   * URI to the Docker image.\n   */\n  readonly imageUri: string;\n\n  /**\n   * Specify or override the CMD on the specified Docker image or Dockerfile.\n   * This needs to be in the 'exec form', viz., `[ 'executable', 'param1', 'param2' ]`.\n   * @see https://docs.docker.com/engine/reference/builder/#cmd\n   * @default - use the CMD specified in the docker image or Dockerfile.\n   */\n  readonly cmd?: string[];\n\n  /**\n   * Specify or override the ENTRYPOINT on the specified Docker image or Dockerfile.\n   * An ENTRYPOINT allows you to configure a container that will run as an executable.\n   * This needs to be in the 'exec form', viz., `[ 'executable', 'param1', 'param2' ]`.\n   * @see https://docs.docker.com/engine/reference/builder/#entrypoint\n   * @default - use the ENTRYPOINT in the docker image or Dockerfile.\n   */\n  readonly entrypoint?: string[];\n\n  /**\n   * Specify or override the WORKDIR on the specified Docker image or Dockerfile.\n   * A WORKDIR allows you to configure the working directory the container will use.\n   * @see https://docs.docker.com/engine/reference/builder/#workdir\n   * @default - use the WORKDIR in the docker image or Dockerfile.\n   */\n  readonly workingDirectory?: string;\n}\n\n/**\n * Lambda code from an S3 archive.\n */\nexport class S3Code extends Code {\n  public readonly isInline = false;\n  private bucketName: string;\n\n  constructor(bucket: s3.IBucket, private key: string, private objectVersion?: string) {\n    super();\n\n    if (!bucket.bucketName) {\n      throw new Error('bucketName is undefined for the provided bucket');\n    }\n\n    this.bucketName = bucket.bucketName;\n  }\n\n  public bind(_scope: Construct): CodeConfig {\n    return {\n      s3Location: {\n        bucketName: this.bucketName,\n        objectKey: this.key,\n        objectVersion: this.objectVersion,\n      },\n    };\n  }\n}\n\n/**\n * Lambda code from an inline string (limited to 4KiB).\n */\nexport class InlineCode extends Code {\n  public readonly isInline = true;\n\n  constructor(private code: string) {\n    super();\n\n    if (code.length === 0) {\n      throw new Error('Lambda inline code cannot be empty');\n    }\n\n    if (code.length > 4096) {\n      throw new Error('Lambda source is too large, must be <= 4096 but is ' + code.length);\n    }\n  }\n\n  public bind(_scope: Construct): CodeConfig {\n    return {\n      inlineCode: this.code,\n    };\n  }\n}\n\n/**\n * Lambda code from a local directory.\n */\nexport class AssetCode extends Code {\n  public readonly isInline = false;\n  private asset?: s3_assets.Asset;\n\n  /**\n   * @param path The path to the asset file or directory.\n   */\n  constructor(public readonly path: string, private readonly options: s3_assets.AssetOptions = { }) {\n    super();\n  }\n\n  public bind(scope: Construct): CodeConfig {\n    // If the same AssetCode is used multiple times, retain only the first instantiation.\n    if (!this.asset) {\n      this.asset = new s3_assets.Asset(scope, 'Code', {\n        path: this.path,\n        ...this.options,\n      });\n    } else if (cdk.Stack.of(this.asset) !== cdk.Stack.of(scope)) {\n      throw new Error(`Asset is already associated with another stack '${cdk.Stack.of(this.asset).stackName}'. ` +\n        'Create a new Code instance for every stack.');\n    }\n\n    if (!this.asset.isZipArchive) {\n      throw new Error(`Asset must be a .zip file or a directory (${this.path})`);\n    }\n\n    return {\n      s3Location: {\n        bucketName: this.asset.s3BucketName,\n        objectKey: this.asset.s3ObjectKey,\n      },\n    };\n  }\n\n  public bindToResource(resource: cdk.CfnResource, options: ResourceBindOptions = { }) {\n    if (!this.asset) {\n      throw new Error('bindToResource() must be called after bind()');\n    }\n\n    const resourceProperty = options.resourceProperty || 'Code';\n\n    // https://github.com/aws/aws-cdk/issues/1432\n    this.asset.addResourceMetadata(resource, resourceProperty);\n  }\n}\n\nexport interface ResourceBindOptions {\n  /**\n   * The name of the CloudFormation property to annotate with asset metadata.\n   * @see https://github.com/aws/aws-cdk/issues/1432\n   * @default Code\n   */\n  readonly resourceProperty?: string;\n}\n\n/**\n * Construction properties for {@link CfnParametersCode}.\n */\nexport interface CfnParametersCodeProps {\n  /**\n   * The CloudFormation parameter that represents the name of the S3 Bucket\n   * where the Lambda code will be located in.\n   * Must be of type 'String'.\n   *\n   * @default a new parameter will be created\n   */\n  readonly bucketNameParam?: cdk.CfnParameter;\n\n  /**\n   * The CloudFormation parameter that represents the path inside the S3 Bucket\n   * where the Lambda code will be located at.\n   * Must be of type 'String'.\n   *\n   * @default a new parameter will be created\n   */\n  readonly objectKeyParam?: cdk.CfnParameter;\n}\n\n/**\n * Lambda code defined using 2 CloudFormation parameters.\n * Useful when you don't have access to the code of your Lambda from your CDK code, so you can't use Assets,\n * and you want to deploy the Lambda in a CodePipeline, using CloudFormation Actions -\n * you can fill the parameters using the {@link #assign} method.\n */\nexport class CfnParametersCode extends Code {\n  public readonly isInline = false;\n  private _bucketNameParam?: cdk.CfnParameter;\n  private _objectKeyParam?: cdk.CfnParameter;\n\n  constructor(props: CfnParametersCodeProps = {}) {\n    super();\n\n    this._bucketNameParam = props.bucketNameParam;\n    this._objectKeyParam = props.objectKeyParam;\n  }\n\n  public bind(scope: Construct): CodeConfig {\n    if (!this._bucketNameParam) {\n      this._bucketNameParam = new cdk.CfnParameter(scope, 'LambdaSourceBucketNameParameter', {\n        type: 'String',\n      });\n    }\n\n    if (!this._objectKeyParam) {\n      this._objectKeyParam = new cdk.CfnParameter(scope, 'LambdaSourceObjectKeyParameter', {\n        type: 'String',\n      });\n    }\n\n    return {\n      s3Location: {\n        bucketName: this._bucketNameParam.valueAsString,\n        objectKey: this._objectKeyParam.valueAsString,\n      },\n    };\n  }\n\n  /**\n   * Create a parameters map from this instance's CloudFormation parameters.\n   *\n   * It returns a map with 2 keys that correspond to the names of the parameters defined in this Lambda code,\n   * and as values it contains the appropriate expressions pointing at the provided S3 location\n   * (most likely, obtained from a CodePipeline Artifact by calling the `artifact.s3Location` method).\n   * The result should be provided to the CloudFormation Action\n   * that is deploying the Stack that the Lambda with this code is part of,\n   * in the `parameterOverrides` property.\n   *\n   * @param location the location of the object in S3 that represents the Lambda code\n   */\n  public assign(location: s3.Location): { [name: string]: any } {\n    const ret: { [name: string]: any } = {};\n    ret[this.bucketNameParam] = location.bucketName;\n    ret[this.objectKeyParam] = location.objectKey;\n    return ret;\n  }\n\n  public get bucketNameParam(): string {\n    if (this._bucketNameParam) {\n      return this._bucketNameParam.logicalId;\n    } else {\n      throw new Error('Pass CfnParametersCode to a Lambda Function before accessing the bucketNameParam property');\n    }\n  }\n\n  public get objectKeyParam(): string {\n    if (this._objectKeyParam) {\n      return this._objectKeyParam.logicalId;\n    } else {\n      throw new Error('Pass CfnParametersCode to a Lambda Function before accessing the objectKeyParam property');\n    }\n  }\n}\n\n/**\n * Properties to initialize a new EcrImageCode\n */\nexport interface EcrImageCodeProps {\n  /**\n   * Specify or override the CMD on the specified Docker image or Dockerfile.\n   * This needs to be in the 'exec form', viz., `[ 'executable', 'param1', 'param2' ]`.\n   * @see https://docs.docker.com/engine/reference/builder/#cmd\n   * @default - use the CMD specified in the docker image or Dockerfile.\n   */\n  readonly cmd?: string[];\n\n  /**\n   * Specify or override the ENTRYPOINT on the specified Docker image or Dockerfile.\n   * An ENTRYPOINT allows you to configure a container that will run as an executable.\n   * This needs to be in the 'exec form', viz., `[ 'executable', 'param1', 'param2' ]`.\n   * @see https://docs.docker.com/engine/reference/builder/#entrypoint\n   * @default - use the ENTRYPOINT in the docker image or Dockerfile.\n   */\n  readonly entrypoint?: string[];\n\n  /**\n   * Specify or override the WORKDIR on the specified Docker image or Dockerfile.\n   * A WORKDIR allows you to configure the working directory the container will use.\n   * @see https://docs.docker.com/engine/reference/builder/#workdir\n   * @default - use the WORKDIR in the docker image or Dockerfile.\n   */\n  readonly workingDirectory?: string;\n\n  /**\n   * The image tag to use when pulling the image from ECR.\n   * @default 'latest'\n   */\n  readonly tag?: string;\n}\n\n/**\n * Represents a Docker image in ECR that can be bound as Lambda Code.\n */\nexport class EcrImageCode extends Code {\n  public readonly isInline: boolean = false;\n\n  constructor(private readonly repository: ecr.IRepository, private readonly props: EcrImageCodeProps = {}) {\n    super();\n  }\n\n  public bind(_: Construct): CodeConfig {\n    this.repository.grantPull(new iam.ServicePrincipal('lambda.amazonaws.com'));\n\n    return {\n      image: {\n        imageUri: this.repository.repositoryUriForTag(this.props?.tag ?? 'latest'),\n        cmd: this.props.cmd,\n        entrypoint: this.props.entrypoint,\n        workingDirectory: this.props.workingDirectory,\n      },\n    };\n  }\n}\n\n/**\n * Properties to initialize a new AssetImage\n */\nexport interface AssetImageCodeProps extends ecr_assets.DockerImageAssetOptions {\n  /**\n   * Specify or override the CMD on the specified Docker image or Dockerfile.\n   * This needs to be in the 'exec form', viz., `[ 'executable', 'param1', 'param2' ]`.\n   * @see https://docs.docker.com/engine/reference/builder/#cmd\n   * @default - use the CMD specified in the docker image or Dockerfile.\n   */\n  readonly cmd?: string[];\n\n  /**\n   * Specify or override the ENTRYPOINT on the specified Docker image or Dockerfile.\n   * An ENTRYPOINT allows you to configure a container that will run as an executable.\n   * This needs to be in the 'exec form', viz., `[ 'executable', 'param1', 'param2' ]`.\n   * @see https://docs.docker.com/engine/reference/builder/#entrypoint\n   * @default - use the ENTRYPOINT in the docker image or Dockerfile.\n   */\n  readonly entrypoint?: string[];\n\n  /**\n   * Specify or override the WORKDIR on the specified Docker image or Dockerfile.\n   * A WORKDIR allows you to configure the working directory the container will use.\n   * @see https://docs.docker.com/engine/reference/builder/#workdir\n   * @default - use the WORKDIR in the docker image or Dockerfile.\n   */\n  readonly workingDirectory?: string;\n}\n\n/**\n * Represents an ECR image that will be constructed from the specified asset and can be bound as Lambda code.\n */\nexport class AssetImageCode extends Code {\n  public readonly isInline: boolean = false;\n  private asset?: ecr_assets.DockerImageAsset;\n\n  constructor(private readonly directory: string, private readonly props: AssetImageCodeProps) {\n    super();\n  }\n\n  public bind(scope: Construct): CodeConfig {\n    // If the same AssetImageCode is used multiple times, retain only the first instantiation.\n    if (!this.asset) {\n      this.asset = new ecr_assets.DockerImageAsset(scope, 'AssetImage', {\n        directory: this.directory,\n        ...this.props,\n      });\n      this.asset.repository.grantPull(new iam.ServicePrincipal('lambda.amazonaws.com'));\n    } else if (cdk.Stack.of(this.asset) !== cdk.Stack.of(scope)) {\n      throw new Error(`Asset is already associated with another stack '${cdk.Stack.of(this.asset).stackName}'. ` +\n        'Create a new Code instance for every stack.');\n    }\n\n    return {\n      image: {\n        imageUri: this.asset.imageUri,\n        entrypoint: this.props.entrypoint,\n        cmd: this.props.cmd,\n        workingDirectory: this.props.workingDirectory,\n      },\n    };\n  }\n\n  public bindToResource(resource: cdk.CfnResource, options: ResourceBindOptions = { }) {\n    if (!this.asset) {\n      throw new Error('bindToResource() must be called after bind()');\n    }\n\n    const resourceProperty = options.resourceProperty || 'Code.ImageUri';\n\n    // https://github.com/aws/aws-cdk/issues/14593\n    this.asset.addResourceMetadata(resource, resourceProperty);\n  }\n}\n\n/**\n * Options when creating an asset from a Docker build.\n */\nexport interface DockerBuildAssetOptions extends cdk.DockerBuildOptions {\n  /**\n   * The path in the Docker image where the asset is located after the build\n   * operation.\n   *\n   * @default /asset\n   */\n  readonly imagePath?: string;\n\n  /**\n   * The path on the local filesystem where the asset will be copied\n   * using `docker cp`.\n   *\n   * @default - a unique temporary directory in the system temp directory\n   */\n  readonly outputPath?: string;\n}\n"],
  "mappings": "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",
  "names": []
}
