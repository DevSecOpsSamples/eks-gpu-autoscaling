{
  "version": 3,
  "sources": ["lambda-canned-metrics.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nexport class LambdaMetrics {\n  public static concurrentExecutionsMaximum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static concurrentExecutionsMaximum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static concurrentExecutionsMaximum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static concurrentExecutionsMaximum(dimensions: {  }): MetricWithDims<{  }>;\n  public static concurrentExecutionsMaximum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'ConcurrentExecutions',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static deadLetterErrorsSum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static deadLetterErrorsSum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static deadLetterErrorsSum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static deadLetterErrorsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static deadLetterErrorsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'DeadLetterErrors',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static destinationDeliveryFailuresSum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static destinationDeliveryFailuresSum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static destinationDeliveryFailuresSum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static destinationDeliveryFailuresSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static destinationDeliveryFailuresSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'DestinationDeliveryFailures',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static durationAverage(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static durationAverage(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static durationAverage(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static durationAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static durationAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'Duration',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static errorsSum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static errorsSum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static errorsSum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static errorsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static errorsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'Errors',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static invocationsSum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static invocationsSum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static invocationsSum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static invocationsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static invocationsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'Invocations',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static iteratorAgeAverage(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static iteratorAgeAverage(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static iteratorAgeAverage(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static iteratorAgeAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static iteratorAgeAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'IteratorAge',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static postRuntimeExtensionsDurationAverage(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static postRuntimeExtensionsDurationAverage(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static postRuntimeExtensionsDurationAverage(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static postRuntimeExtensionsDurationAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static postRuntimeExtensionsDurationAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'PostRuntimeExtensionsDuration',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static provisionedConcurrencyInvocationsSum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static provisionedConcurrencyInvocationsSum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static provisionedConcurrencyInvocationsSum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static provisionedConcurrencyInvocationsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static provisionedConcurrencyInvocationsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'ProvisionedConcurrencyInvocations',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static provisionedConcurrencySpilloverInvocationsSum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static provisionedConcurrencySpilloverInvocationsSum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static provisionedConcurrencySpilloverInvocationsSum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static provisionedConcurrencySpilloverInvocationsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static provisionedConcurrencySpilloverInvocationsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'ProvisionedConcurrencySpilloverInvocations',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static provisionedConcurrencyUtilizationMaximum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static provisionedConcurrencyUtilizationMaximum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static provisionedConcurrencyUtilizationMaximum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static provisionedConcurrencyUtilizationMaximum(dimensions: {  }): MetricWithDims<{  }>;\n  public static provisionedConcurrencyUtilizationMaximum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'ProvisionedConcurrencyUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static provisionedConcurrentExecutionsMaximum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static provisionedConcurrentExecutionsMaximum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static provisionedConcurrentExecutionsMaximum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static provisionedConcurrentExecutionsMaximum(dimensions: {  }): MetricWithDims<{  }>;\n  public static provisionedConcurrentExecutionsMaximum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'ProvisionedConcurrentExecutions',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static throttlesSum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static throttlesSum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static throttlesSum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static throttlesSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static throttlesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'Throttles',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static unreservedConcurrentExecutionsMaximum(dimensions: { FunctionName: string }): MetricWithDims<{ FunctionName: string }>;\n  public static unreservedConcurrentExecutionsMaximum(dimensions: { FunctionName: string, Resource: string }): MetricWithDims<{ FunctionName: string, Resource: string }>;\n  public static unreservedConcurrentExecutionsMaximum(dimensions: { ExecutedVersion: string, FunctionName: string, Resource: string }): MetricWithDims<{ ExecutedVersion: string, FunctionName: string, Resource: string }>;\n  public static unreservedConcurrentExecutionsMaximum(dimensions: {  }): MetricWithDims<{  }>;\n  public static unreservedConcurrentExecutionsMaximum(dimensions: any) {\n    return {\n      namespace: 'AWS/Lambda',\n      metricName: 'UnreservedConcurrentExecutions',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n}\ntype MetricWithDims<D> = { namespace: string, metricName: string, statistic: string, dimensionsMap: D };\n"],
  "mappings": "iGAIA,MAAa,aAAa,OAKV,6BAA4B,WAAe,CACvD,MAAO,CACL,UAAW,aACX,WAAY,uBACZ,cAAe,WACf,UAAW,iBAOD,qBAAoB,WAAe,CAC/C,MAAO,CACL,UAAW,aACX,WAAY,mBACZ,cAAe,WACf,UAAW,aAOD,gCAA+B,WAAe,CAC1D,MAAO,CACL,UAAW,aACX,WAAY,8BACZ,cAAe,WACf,UAAW,aAOD,iBAAgB,WAAe,CAC3C,MAAO,CACL,UAAW,aACX,WAAY,WACZ,cAAe,WACf,UAAW,iBAOD,WAAU,WAAe,CACrC,MAAO,CACL,UAAW,aACX,WAAY,SACZ,cAAe,WACf,UAAW,aAOD,gBAAe,WAAe,CAC1C,MAAO,CACL,UAAW,aACX,WAAY,cACZ,cAAe,WACf,UAAW,aAOD,oBAAmB,WAAe,CAC9C,MAAO,CACL,UAAW,aACX,WAAY,cACZ,cAAe,WACf,UAAW,iBAOD,sCAAqC,WAAe,CAChE,MAAO,CACL,UAAW,aACX,WAAY,gCACZ,cAAe,WACf,UAAW,iBAOD,sCAAqC,WAAe,CAChE,MAAO,CACL,UAAW,aACX,WAAY,oCACZ,cAAe,WACf,UAAW,aAOD,+CAA8C,WAAe,CACzE,MAAO,CACL,UAAW,aACX,WAAY,6CACZ,cAAe,WACf,UAAW,aAOD,0CAAyC,WAAe,CACpE,MAAO,CACL,UAAW,aACX,WAAY,oCACZ,cAAe,WACf,UAAW,iBAOD,wCAAuC,WAAe,CAClE,MAAO,CACL,UAAW,aACX,WAAY,kCACZ,cAAe,WACf,UAAW,iBAOD,cAAa,WAAe,CACxC,MAAO,CACL,UAAW,aACX,WAAY,YACZ,cAAe,WACf,UAAW,aAOD,uCAAsC,WAAe,CACjE,MAAO,CACL,UAAW,aACX,WAAY,iCACZ,cAAe,WACf,UAAW,YAtKjB,QAAA,cAAA",
  "names": []
}
