{
  "version": 3,
  "sources": ["code-signing-config.ts"],
  "sourcesContent": ["import { ISigningProfile } from '../../aws-signer';\nimport { ArnFormat, IResource, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnCodeSigningConfig } from './lambda.generated';\n\n/**\n * Code signing configuration policy for deployment validation failure.\n */\nexport enum UntrustedArtifactOnDeployment {\n  /**\n   * Lambda blocks the deployment request if signature validation checks fail.\n   */\n  ENFORCE = 'Enforce',\n\n  /**\n   * Lambda allows the deployment of the code package, but issues a warning.\n   * Lambda issues a new Amazon CloudWatch metric, called a signature validation error and also stores the warning in CloudTrail.\n   */\n  WARN = 'Warn',\n}\n\n/**\n * A Code Signing Config\n */\nexport interface ICodeSigningConfig extends IResource {\n  /**\n   * The ARN of Code Signing Config\n   * @attribute\n   */\n  readonly codeSigningConfigArn: string;\n\n  /**\n   * The id of Code Signing Config\n   * @attribute\n   */\n  readonly codeSigningConfigId: string;\n}\n\n/**\n * Construction properties for a Code Signing Config object\n */\nexport interface CodeSigningConfigProps {\n  /**\n   * List of signing profiles that defines a\n   * trusted user who can sign a code package.\n   */\n  readonly signingProfiles: ISigningProfile[],\n\n  /**\n   * Code signing configuration policy for deployment validation failure.\n   * If you set the policy to Enforce, Lambda blocks the deployment request\n   * if signature validation checks fail.\n   * If you set the policy to Warn, Lambda allows the deployment and\n   * creates a CloudWatch log.\n   *\n   * @default UntrustedArtifactOnDeployment.WARN\n   */\n  readonly untrustedArtifactOnDeployment?: UntrustedArtifactOnDeployment,\n\n  /**\n   * Code signing configuration description.\n   *\n   * @default - No description.\n   */\n  readonly description?: string,\n}\n\n/**\n * Defines a Code Signing Config.\n *\n * @resource AWS::Lambda::CodeSigningConfig\n */\nexport class CodeSigningConfig extends Resource implements ICodeSigningConfig {\n  /**\n   * Creates a Signing Profile construct that represents an external Signing Profile.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param codeSigningConfigArn The ARN of code signing config.\n   */\n  public static fromCodeSigningConfigArn( scope: Construct, id: string, codeSigningConfigArn: string): ICodeSigningConfig {\n    const codeSigningProfileId = Stack.of(scope).splitArn(codeSigningConfigArn, ArnFormat.SLASH_RESOURCE_NAME).resourceName;\n    if (!codeSigningProfileId) {\n      throw new Error(`Code signing config ARN must be in the format 'arn:aws:lambda:<region>:<account>:code-signing-config:<codeSigningConfigArn>', got: '${codeSigningConfigArn}'`);\n    }\n    const assertedCodeSigningProfileId = codeSigningProfileId;\n    class Import extends Resource implements ICodeSigningConfig {\n      public readonly codeSigningConfigArn = codeSigningConfigArn;\n      public readonly codeSigningConfigId = assertedCodeSigningProfileId;\n\n      constructor() {\n        super(scope, id);\n      }\n    }\n    return new Import();\n  }\n\n  public readonly codeSigningConfigArn: string;\n  public readonly codeSigningConfigId: string;\n\n  constructor(scope: Construct, id: string, props: CodeSigningConfigProps) {\n    super(scope, id);\n\n    const signingProfileVersionArns = props.signingProfiles.map(signingProfile => {\n      return signingProfile.signingProfileVersionArn;\n    });\n\n    const resource: CfnCodeSigningConfig = new CfnCodeSigningConfig(this, 'Resource', {\n      allowedPublishers: {\n        signingProfileVersionArns,\n      },\n      codeSigningPolicies: {\n        untrustedArtifactOnDeployment: props.untrustedArtifactOnDeployment ?? UntrustedArtifactOnDeployment.WARN,\n      },\n      description: props.description,\n    });\n    this.codeSigningConfigArn = resource.attrCodeSigningConfigArn;\n    this.codeSigningConfigId = resource.attrCodeSigningConfigId;\n  }\n}\n"],
  "mappings": "8PACA,OAAA,QAAA,YAAA,EAEA,mBAAA,QAAA,oBAAA,EAKA,GAAY,+BAAZ,AAAA,UAAY,+BAA6B,CAIvC,+BAAA,QAAA,UAMA,+BAAA,KAAA,MACF,GAXY,8BAAA,QAAA,+BAAA,SAAA,8BAA6B,CAAA,EAAA,EAgEzC,MAAa,yBAA0B,QAAA,QAAQ,CA4B7C,YAAY,MAAkB,GAAY,MAA6B,QACrE,MAAM,MAAO,EAAE,+EAEf,KAAM,2BAA4B,MAAM,gBAAgB,IAAI,gBACnD,eAAe,wBACvB,EAEK,SAAiC,GAAI,oBAAA,qBAAqB,KAAM,WAAY,CAChF,kBAAmB,CACjB,2BAEF,oBAAqB,CACnB,8BAA6B,IAAE,MAAM,iCAA6B,MAAA,KAAA,OAAA,GAAI,8BAA8B,MAEtG,YAAa,MAAM,YACpB,EACD,KAAK,qBAAuB,SAAS,yBACrC,KAAK,oBAAsB,SAAS,8BArCxB,0BAA0B,MAAkB,GAAY,qBAA4B,CAChG,KAAM,sBAAuB,OAAA,MAAM,GAAG,KAAK,EAAE,SAAS,qBAAsB,OAAA,UAAU,mBAAmB,EAAE,aAC3G,GAAI,CAAC,qBACH,KAAM,IAAI,OAAM,uIAAuI,uBAAuB,EAEhL,KAAM,8BAA+B,qBACrC,MAAM,cAAe,QAAA,QAAQ,CAI3B,aAAA,CACE,MAAM,MAAO,EAAE,EAJD,KAAA,qBAAuB,qBACvB,KAAA,oBAAsB,4BAItC,EAEF,MAAO,IAAI,SAtBf,QAAA,kBAAA",
  "names": []
}
