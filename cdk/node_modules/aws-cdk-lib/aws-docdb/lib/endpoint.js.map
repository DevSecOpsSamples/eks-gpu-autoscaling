{
  "version": 3,
  "sources": ["endpoint.ts"],
  "sourcesContent": ["import { Token } from '../../core';\n\n/**\n * Connection endpoint of a database cluster or instance\n *\n * Consists of a combination of hostname and port.\n */\nexport class Endpoint {\n  /**\n   * The minimum port value\n   */\n  private static readonly MIN_PORT = 1;\n\n  /**\n   * The maximum port value\n   */\n  private static readonly MAX_PORT = 65535;\n\n  /**\n   * Determines if a port is valid\n   *\n   * @param port: The port number\n   * @returns boolean whether the port is valid\n   */\n  private static isValidPort(port: number): boolean {\n    return Number.isInteger(port) && port >= Endpoint.MIN_PORT && port <= Endpoint.MAX_PORT;\n  }\n\n  /**\n   * The hostname of the endpoint\n   */\n  public readonly hostname: string;\n\n  /**\n   * The port number of the endpoint.\n   *\n   * This can potentially be a CDK token. If you need to embed the port in a string (e.g. instance user data script),\n   * use {@link Endpoint.portAsString}.\n   */\n  public readonly port: number;\n\n  /**\n   * The combination of ``HOSTNAME:PORT`` for this endpoint.\n   */\n  public readonly socketAddress: string;\n\n  /**\n   * Constructs an Endpoint instance.\n   *\n   * @param address - The hostname or address of the endpoint\n   * @param port - The port number of the endpoint\n   */\n  constructor(address: string, port: number) {\n    if (!Token.isUnresolved(port) && !Endpoint.isValidPort(port)) {\n      throw new Error(`Port must be an integer between [${Endpoint.MIN_PORT}, ${Endpoint.MAX_PORT}] but got: ${port}`);\n    }\n\n    this.hostname = address;\n    this.port = port;\n\n    const portDesc = Token.isUnresolved(port) ? Token.asString(port) : port;\n    this.socketAddress = `${address}:${portDesc}`;\n  }\n\n  /**\n   * Returns the port number as a string representation that can be used for embedding within other strings.\n   *\n   * This is intended to deal with CDK's token system. Numeric CDK tokens are not expanded when their string\n   * representation is embedded in a string. This function returns the port either as an unresolved string token or\n   * as a resolved string representation of the port value.\n   *\n   * @returns {string} An (un)resolved string representation of the endpoint's port number\n   */\n  public portAsString(): string {\n    if (Token.isUnresolved(this.port)) {\n      return Token.asString(this.port);\n    } else {\n      return this.port.toString();\n    }\n  }\n}\n"],
  "mappings": "oJAAA,OAAA,QAAA,YAAA,EAOA,MAAa,QAAQ,CA6CnB,YAAY,QAAiB,KAAY,CACvC,GAAI,CAAC,OAAA,MAAM,aAAa,IAAI,GAAK,CAAC,SAAS,YAAY,IAAI,EACzD,KAAM,IAAI,OAAM,oCAAoC,SAAS,aAAa,SAAS,sBAAsB,MAAM,EAGjH,KAAK,SAAW,QAChB,KAAK,KAAO,KAEZ,KAAM,UAAW,OAAA,MAAM,aAAa,IAAI,EAAI,OAAA,MAAM,SAAS,IAAI,EAAI,KACnE,KAAK,cAAgB,GAAG,WAAW,iBArCtB,aAAY,KAAY,CACrC,MAAO,QAAO,UAAU,IAAI,GAAK,MAAQ,SAAS,UAAY,MAAQ,SAAS,SAgD1E,cAAY,CACjB,MAAI,QAAA,MAAM,aAAa,KAAK,IAAI,EACvB,OAAA,MAAM,SAAS,KAAK,IAAI,EAExB,KAAK,KAAK,SAAQ,GAtE/B,QAAA,SAAA,oGAI0B,SAAA,SAAW,EAKX,SAAA,SAAW",
  "names": []
}
