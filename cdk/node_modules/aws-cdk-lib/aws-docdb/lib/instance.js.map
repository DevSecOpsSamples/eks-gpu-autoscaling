{
  "version": 3,
  "sources": ["instance.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as cdk from '../../core';\nimport { ArnFormat } from '../../core';\nimport { Construct } from 'constructs';\nimport { IDatabaseCluster } from './cluster-ref';\nimport { CfnDBInstance } from './docdb.generated';\nimport { Endpoint } from './endpoint';\n\n/**\n * A database instance\n */\nexport interface IDatabaseInstance extends cdk.IResource {\n  /**\n   * The instance identifier.\n   */\n  readonly instanceIdentifier: string;\n\n  /**\n   * The instance arn.\n   */\n  readonly instanceArn: string;\n\n  /**\n   * The instance endpoint address.\n   *\n   * @attribute Endpoint\n   */\n  readonly dbInstanceEndpointAddress: string;\n\n  /**\n   * The instance endpoint port.\n   *\n   * @attribute Port\n   */\n  readonly dbInstanceEndpointPort: string;\n\n  /**\n   * The instance endpoint.\n   */\n  readonly instanceEndpoint: Endpoint;\n}\n\n/**\n * Properties that describe an existing instance\n */\nexport interface DatabaseInstanceAttributes {\n  /**\n   * The instance identifier.\n   */\n  readonly instanceIdentifier: string;\n\n  /**\n   * The endpoint address.\n   */\n  readonly instanceEndpointAddress: string;\n\n  /**\n   * The database port.\n   */\n  readonly port: number;\n}\n\n/**\n * A new or imported database instance.\n */\nabstract class DatabaseInstanceBase extends cdk.Resource implements IDatabaseInstance {\n  /**\n   * Import an existing database instance.\n   */\n  public static fromDatabaseInstanceAttributes(scope: Construct, id: string, attrs: DatabaseInstanceAttributes): IDatabaseInstance {\n    class Import extends DatabaseInstanceBase implements IDatabaseInstance {\n      public readonly defaultPort = ec2.Port.tcp(attrs.port);\n      public readonly instanceIdentifier = attrs.instanceIdentifier;\n      public readonly dbInstanceEndpointAddress = attrs.instanceEndpointAddress;\n      public readonly dbInstanceEndpointPort = attrs.port.toString();\n      public readonly instanceEndpoint = new Endpoint(attrs.instanceEndpointAddress, attrs.port);\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public abstract readonly instanceIdentifier: string;\n  /**\n   * @inheritdoc\n   */\n  public abstract readonly dbInstanceEndpointAddress: string;\n  /**\n   * @inheritdoc\n   */\n  public abstract readonly dbInstanceEndpointPort: string;\n  /**\n   * @inheritdoc\n   */\n  public abstract readonly instanceEndpoint: Endpoint;\n\n  /**\n   * The instance arn.\n   */\n  public get instanceArn(): string {\n    return cdk.Stack.of(this).formatArn({\n      service: 'rds',\n      resource: 'db',\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n      resourceName: this.instanceIdentifier,\n    });\n  }\n}\n\n/**\n * Construction properties for a DatabaseInstanceNew\n */\nexport interface DatabaseInstanceProps {\n  /**\n   * The DocumentDB database cluster the instance should launch into.\n   */\n  readonly cluster: IDatabaseCluster;\n\n  /**\n   * The name of the compute and memory capacity classes.\n   */\n  readonly instanceType: ec2.InstanceType;\n\n  /**\n   * The name of the Availability Zone where the DB instance will be located.\n   *\n   * @default - no preference\n   */\n  readonly availabilityZone?: string;\n\n  /**\n   * A name for the DB instance. If you specify a name, AWS CloudFormation\n   * converts it to lowercase.\n   *\n   * @default - a CloudFormation generated name\n   */\n  readonly dbInstanceName?: string;\n\n  /**\n   * Indicates that minor engine upgrades are applied automatically to the\n   * DB instance during the maintenance window.\n   *\n   * @default true\n   */\n  readonly autoMinorVersionUpgrade?: boolean;\n\n  /**\n   * The weekly time range (in UTC) during which system maintenance can occur.\n   *\n   * Format: `ddd:hh24:mi-ddd:hh24:mi`\n   * Constraint: Minimum 30-minute window\n   *\n   * @default - a 30-minute window selected at random from an 8-hour block of\n   * time for each AWS Region, occurring on a random day of the week. To see\n   * the time blocks available, see https://docs.aws.amazon.com/documentdb/latest/developerguide/db-instance-maintain.html#maintenance-window\n   */\n  readonly preferredMaintenanceWindow?: string;\n\n  /**\n   * The CloudFormation policy to apply when the instance is removed from the\n   * stack or replaced during an update.\n   *\n   * @default RemovalPolicy.Retain\n   */\n  readonly removalPolicy?: cdk.RemovalPolicy\n}\n\n/**\n * A database instance\n *\n * @resource AWS::DocDB::DBInstance\n */\nexport class DatabaseInstance extends DatabaseInstanceBase implements IDatabaseInstance {\n  /**\n   * The instance's database cluster\n   */\n  public readonly cluster: IDatabaseCluster;\n\n  /**\n   * @inheritdoc\n   */\n  public readonly instanceIdentifier: string;\n\n  /**\n   * @inheritdoc\n   */\n  public readonly dbInstanceEndpointAddress: string;\n\n  /**\n   * @inheritdoc\n   */\n  public readonly dbInstanceEndpointPort: string;\n\n  /**\n   * @inheritdoc\n   */\n  public readonly instanceEndpoint: Endpoint;\n\n  constructor(scope: Construct, id: string, props: DatabaseInstanceProps) {\n    super(scope, id);\n\n    const instance = new CfnDBInstance(this, 'Resource', {\n      dbClusterIdentifier: props.cluster.clusterIdentifier,\n      dbInstanceClass: `db.${props.instanceType}`,\n      autoMinorVersionUpgrade: props.autoMinorVersionUpgrade ?? true,\n      availabilityZone: props.availabilityZone,\n      dbInstanceIdentifier: props.dbInstanceName,\n      preferredMaintenanceWindow: props.preferredMaintenanceWindow,\n    });\n\n    this.cluster = props.cluster;\n    this.instanceIdentifier = instance.ref;\n    this.dbInstanceEndpointAddress = instance.attrEndpoint;\n    this.dbInstanceEndpointPort = instance.attrPort;\n\n    // create a number token that represents the port of the instance\n    const portAttribute = cdk.Token.asNumber(instance.attrPort);\n    this.instanceEndpoint = new Endpoint(instance.attrEndpoint, portAttribute);\n\n    instance.applyRemovalPolicy(props.removalPolicy, {\n      applyToUpdateReplacePolicy: true,\n    });\n  }\n}\n"],
  "mappings": "uNAAA,IAAA,QAAA,eAAA,EACA,IAAA,QAAA,YAAA,EACA,OAAA,QAAA,YAAA,EAGA,kBAAA,QAAA,mBAAA,EACA,WAAA,QAAA,YAAA,EA2DA,MAAe,4BAA6B,KAAI,QAAQ,OAIxC,gCAA+B,MAAkB,GAAY,MAAiC,CAC1G,MAAM,cAAe,qBAAoB,CAAzC,aAAA,qBACkB,KAAA,YAAc,IAAI,KAAK,IAAI,MAAM,IAAI,EACrC,KAAA,mBAAqB,MAAM,mBAC3B,KAAA,0BAA4B,MAAM,wBAClC,KAAA,uBAAyB,MAAM,KAAK,SAAQ,EAC5C,KAAA,iBAAmB,GAAI,YAAA,SAAS,MAAM,wBAAyB,MAAM,IAAI,CAC3F,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,KAuBlB,cAAW,CACpB,MAAO,KAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAClC,QAAS,MACT,SAAU,KACV,UAAW,OAAA,UAAU,oBACrB,aAAc,KAAK,mBACpB,GAmEL,MAAa,wBAAyB,qBAAoB,CA0BxD,YAAY,MAAkB,GAAY,MAA4B,QACpE,MAAM,MAAO,EAAE,6EAEf,KAAM,UAAW,GAAI,mBAAA,cAAc,KAAM,WAAY,CACnD,oBAAqB,MAAM,QAAQ,kBACnC,gBAAiB,MAAM,MAAM,eAC7B,wBAAuB,IAAE,MAAM,2BAAuB,MAAA,KAAA,OAAA,GAAI,GAC1D,iBAAkB,MAAM,iBACxB,qBAAsB,MAAM,eAC5B,2BAA4B,MAAM,2BACnC,EAED,KAAK,QAAU,MAAM,QACrB,KAAK,mBAAqB,SAAS,IACnC,KAAK,0BAA4B,SAAS,aAC1C,KAAK,uBAAyB,SAAS,SAGvC,KAAM,eAAgB,IAAI,MAAM,SAAS,SAAS,QAAQ,EAC1D,KAAK,iBAAmB,GAAI,YAAA,SAAS,SAAS,aAAc,aAAa,EAEzE,SAAS,mBAAmB,MAAM,cAAe,CAC/C,2BAA4B,GAC7B,GAjDL,QAAA,iBAAA",
  "names": []
}
