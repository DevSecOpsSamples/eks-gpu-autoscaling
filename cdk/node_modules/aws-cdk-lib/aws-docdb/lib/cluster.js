"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.DatabaseCluster=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),ec2=require("../../aws-ec2"),logs=require("../../aws-logs"),secretsmanager=require("../../aws-secretsmanager"),core_1=require("../../core"),database_secret_1=require("./database-secret"),docdb_generated_1=require("./docdb.generated"),endpoint_1=require("./endpoint");class DatabaseClusterBase extends core_1.Resource{asSecretAttachmentTarget(){return{targetId:this.clusterIdentifier,targetType:secretsmanager.AttachmentTargetType.DOCDB_DB_CLUSTER}}}class DatabaseCluster extends DatabaseClusterBase{constructor(scope,id,props){var _b,_c,_d,_e,_f,_g,_h;super(scope,id);this.instanceIdentifiers=[],this.instanceEndpoints=[],jsiiDeprecationWarnings.aws_cdk_lib_aws_docdb_DatabaseClusterProps(props),this.vpc=props.vpc,this.vpcSubnets=props.vpcSubnets;const{subnetIds,internetConnectivityEstablished}=this.vpc.selectSubnets(this.vpcSubnets);if(subnetIds.length<2)throw new Error(`Cluster requires at least 2 subnets, got ${subnetIds.length}`);const subnetGroup=new docdb_generated_1.CfnDBSubnetGroup(this,"Subnets",{dbSubnetGroupDescription:`Subnets for ${id} database`,subnetIds});let securityGroup;props.securityGroup?securityGroup=props.securityGroup:(securityGroup=new ec2.SecurityGroup(this,"SecurityGroup",{description:"DocumentDB security group",vpc:this.vpc}),securityGroup.node.defaultChild.applyRemovalPolicy(props.removalPolicy,{applyToUpdateReplacePolicy:!0})),this.securityGroupId=securityGroup.securityGroupId;const enableCloudwatchLogsExports=[];props.exportAuditLogsToCloudWatch&&enableCloudwatchLogsExports.push("audit"),props.exportProfilerLogsToCloudWatch&&enableCloudwatchLogsExports.push("profiler");let secret;props.masterUser.password||(secret=new database_secret_1.DatabaseSecret(this,"Secret",{username:props.masterUser.username,encryptionKey:props.masterUser.kmsKey,excludeCharacters:props.masterUser.excludeCharacters,secretName:props.masterUser.secretName}));const storageEncrypted=(_b=props.storageEncrypted)!==null&&_b!==void 0?_b:!0;if(props.kmsKey&&!storageEncrypted)throw new Error("KMS key supplied but storageEncrypted is false");this.cluster=new docdb_generated_1.CfnDBCluster(this,"Resource",{engineVersion:props.engineVersion,dbClusterIdentifier:props.dbClusterName,dbSubnetGroupName:subnetGroup.ref,port:props.port,vpcSecurityGroupIds:[this.securityGroupId],dbClusterParameterGroupName:(_c=props.parameterGroup)===null||_c===void 0?void 0:_c.parameterGroupName,deletionProtection:props.deletionProtection,masterUsername:secret?secret.secretValueFromJson("username").toString():props.masterUser.username,masterUserPassword:secret?secret.secretValueFromJson("password").toString():props.masterUser.password.toString(),backupRetentionPeriod:(_e=(_d=props.backup)===null||_d===void 0?void 0:_d.retention)===null||_e===void 0?void 0:_e.toDays(),preferredBackupWindow:(_f=props.backup)===null||_f===void 0?void 0:_f.preferredWindow,preferredMaintenanceWindow:props.preferredMaintenanceWindow,enableCloudwatchLogsExports:enableCloudwatchLogsExports.length>0?enableCloudwatchLogsExports:void 0,kmsKeyId:(_g=props.kmsKey)===null||_g===void 0?void 0:_g.keyArn,storageEncrypted}),this.cluster.applyRemovalPolicy(props.removalPolicy,{applyToUpdateReplacePolicy:!0}),this.clusterIdentifier=this.cluster.ref,this.clusterResourceIdentifier=this.cluster.attrClusterResourceId;const port=core_1.Token.asNumber(this.cluster.attrPort);this.clusterEndpoint=new endpoint_1.Endpoint(this.cluster.attrEndpoint,port),this.clusterReadEndpoint=new endpoint_1.Endpoint(this.cluster.attrReadEndpoint,port),this.setLogRetention(this,props,enableCloudwatchLogsExports),secret&&(this.secret=secret.attach(this));const instanceCount=(_h=props.instances)!==null&&_h!==void 0?_h:DatabaseCluster.DEFAULT_NUM_INSTANCES;if(instanceCount<1)throw new Error("At least one instance is required");for(let i=0;i<instanceCount;i++){const instanceIndex=i+1,instanceIdentifier=props.instanceIdentifierBase!=null?`${props.instanceIdentifierBase}${instanceIndex}`:props.dbClusterName!=null?`${props.dbClusterName}instance${instanceIndex}`:void 0,instance=new docdb_generated_1.CfnDBInstance(this,`Instance${instanceIndex}`,{dbClusterIdentifier:this.cluster.ref,dbInstanceIdentifier:instanceIdentifier,dbInstanceClass:databaseInstanceType(props.instanceType)});instance.applyRemovalPolicy(props.removalPolicy,{applyToUpdateReplacePolicy:!0}),instance.node.addDependency(internetConnectivityEstablished),this.instanceIdentifiers.push(instance.ref),this.instanceEndpoints.push(new endpoint_1.Endpoint(instance.attrEndpoint,port))}this.connections=new ec2.Connections({defaultPort:ec2.Port.tcp(port),securityGroups:[securityGroup]})}static fromDatabaseClusterAttributes(scope,id,attrs){jsiiDeprecationWarnings.aws_cdk_lib_aws_docdb_DatabaseClusterAttributes(attrs);class Import extends DatabaseClusterBase{constructor(){super(...arguments);this.defaultPort=ec2.Port.tcp(attrs.port),this.connections=new ec2.Connections({securityGroups:[attrs.securityGroup],defaultPort:this.defaultPort}),this.clusterIdentifier=attrs.clusterIdentifier,this.instanceIdentifiers=attrs.instanceIdentifiers,this.clusterEndpoint=new endpoint_1.Endpoint(attrs.clusterEndpointAddress,attrs.port),this.clusterReadEndpoint=new endpoint_1.Endpoint(attrs.readerEndpointAddress,attrs.port),this.instanceEndpoints=attrs.instanceEndpointAddresses.map(a=>new endpoint_1.Endpoint(a,attrs.port)),this.securityGroupId=attrs.securityGroup.securityGroupId}}return new Import(scope,id)}setLogRetention(cluster,props,cloudwatchLogsExports){if(props.cloudWatchLogsRetention)for(const log of cloudwatchLogsExports)new logs.LogRetention(cluster,`LogRetention${log}`,{logGroupName:`/aws/docdb/${cluster.clusterIdentifier}/${log}`,retention:props.cloudWatchLogsRetention,role:props.cloudWatchLogsRetentionRole})}addRotationSingleUser(automaticallyAfter){if(jsiiDeprecationWarnings.aws_cdk_lib_Duration(automaticallyAfter),!this.secret)throw new Error("Cannot add single user rotation for a cluster without secret.");const id="RotationSingleUser";if(this.node.tryFindChild(id))throw new Error("A single user rotation was already added to this cluster.");return new secretsmanager.SecretRotation(this,id,{secret:this.secret,automaticallyAfter,application:DatabaseCluster.SINGLE_USER_ROTATION_APPLICATION,excludeCharacters:this.node.tryFindChild("Secret")._excludedCharacters,vpc:this.vpc,vpcSubnets:this.vpcSubnets,target:this})}addRotationMultiUser(id,options){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_docdb_RotationMultiUserOptions(options),!this.secret)throw new Error("Cannot add multi user rotation for a cluster without secret.");return new secretsmanager.SecretRotation(this,id,{secret:options.secret,masterSecret:this.secret,automaticallyAfter:options.automaticallyAfter,excludeCharacters:this.node.tryFindChild("Secret")._excludedCharacters,application:DatabaseCluster.MULTI_USER_ROTATION_APPLICATION,vpc:this.vpc,vpcSubnets:this.vpcSubnets,target:this})}addSecurityGroups(...securityGroups){jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_ISecurityGroup(securityGroups),this.cluster.vpcSecurityGroupIds===void 0&&(this.cluster.vpcSecurityGroupIds=[]),this.cluster.vpcSecurityGroupIds.push(...securityGroups.map(sg=>sg.securityGroupId))}}exports.DatabaseCluster=DatabaseCluster,_a=JSII_RTTI_SYMBOL_1,DatabaseCluster[_a]={fqn:"aws-cdk-lib.aws_docdb.DatabaseCluster",version:"2.20.0"},DatabaseCluster.DEFAULT_NUM_INSTANCES=1,DatabaseCluster.DEFAULT_PORT=27017,DatabaseCluster.SINGLE_USER_ROTATION_APPLICATION=secretsmanager.SecretRotationApplication.MONGODB_ROTATION_SINGLE_USER,DatabaseCluster.MULTI_USER_ROTATION_APPLICATION=secretsmanager.SecretRotationApplication.MONGODB_ROTATION_MULTI_USER;function databaseInstanceType(instanceType){return"db."+instanceType.toString()}
//# sourceMappingURL=cluster.js.map
