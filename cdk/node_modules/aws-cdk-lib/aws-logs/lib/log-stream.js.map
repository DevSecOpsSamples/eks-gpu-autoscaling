{
  "version": 3,
  "sources": ["log-stream.ts"],
  "sourcesContent": ["import { IResource, RemovalPolicy, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { ILogGroup } from './log-group';\nimport { CfnLogStream } from './logs.generated';\n\nexport interface ILogStream extends IResource {\n  /**\n   * The name of this log stream\n   * @attribute\n   */\n  readonly logStreamName: string;\n}\n\n/**\n * Properties for a LogStream\n */\nexport interface LogStreamProps {\n  /**\n   * The log group to create a log stream for.\n   */\n  readonly logGroup: ILogGroup;\n\n  /**\n   * The name of the log stream to create.\n   *\n   * The name must be unique within the log group.\n   *\n   * @default Automatically generated\n   */\n  readonly logStreamName?: string;\n\n  /**\n   * Determine what happens when the log stream resource is removed from the\n   * app.\n   *\n   * Normally you want to retain the log stream so you can diagnose issues from\n   * logs even after a deployment that no longer includes the log stream.\n   *\n   * The date-based retention policy of your log group will age out the logs\n   * after a certain time.\n   *\n   * @default RemovalPolicy.Retain\n   */\n  readonly removalPolicy?: RemovalPolicy;\n}\n\n/**\n * Define a Log Stream in a Log Group\n */\nexport class LogStream extends Resource implements ILogStream {\n  /**\n   * Import an existing LogGroup\n   */\n  public static fromLogStreamName(scope: Construct, id: string, logStreamName: string): ILogStream {\n    class Import extends Resource implements ILogStream {\n      public readonly logStreamName = logStreamName;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The name of this log stream\n   */\n  public readonly logStreamName: string;\n\n  constructor(scope: Construct, id: string, props: LogStreamProps) {\n    super(scope, id, {\n      physicalName: props.logStreamName,\n    });\n\n    const resource = new CfnLogStream(this, 'Resource', {\n      logGroupName: props.logGroup.logGroupName,\n      logStreamName: this.physicalName,\n    });\n\n    resource.applyRemovalPolicy(props.removalPolicy);\n    this.logStreamName = this.getResourceNameAttribute(resource.ref);\n  }\n}\n"],
  "mappings": "gNAAA,OAAA,QAAA,YAAA,EAGA,iBAAA,QAAA,kBAAA,EA8CA,MAAa,iBAAkB,QAAA,QAAQ,CAiBrC,YAAY,MAAkB,GAAY,MAAqB,CAC7D,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,cACrB,qEAED,KAAM,UAAW,GAAI,kBAAA,aAAa,KAAM,WAAY,CAClD,aAAc,MAAM,SAAS,aAC7B,cAAe,KAAK,aACrB,EAED,SAAS,mBAAmB,MAAM,aAAa,EAC/C,KAAK,cAAgB,KAAK,yBAAyB,SAAS,GAAG,QAxBnD,mBAAkB,MAAkB,GAAY,cAAqB,CACjF,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,cAAgB,aAClC,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,GAT/B,QAAA,UAAA",
  "names": []
}
