{
  "version": 3,
  "sources": ["metric-filter.ts"],
  "sourcesContent": ["import { Metric, MetricOptions } from '../../aws-cloudwatch';\nimport { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { ILogGroup, MetricFilterOptions } from './log-group';\nimport { CfnMetricFilter } from './logs.generated';\n\n/**\n * Properties for a MetricFilter\n */\nexport interface MetricFilterProps extends MetricFilterOptions {\n  /**\n   * The log group to create the filter on.\n   */\n  readonly logGroup: ILogGroup;\n}\n\n/**\n * A filter that extracts information from CloudWatch Logs and emits to CloudWatch Metrics\n */\nexport class MetricFilter extends Resource {\n\n  private readonly metricName: string;\n  private readonly metricNamespace: string;\n\n  constructor(scope: Construct, id: string, props: MetricFilterProps) {\n    super(scope, id);\n\n    this.metricName = props.metricName;\n    this.metricNamespace = props.metricNamespace;\n\n    // It looks odd to map this object to a singleton list, but that's how\n    // we're supposed to do it according to the docs.\n    //\n    // > Currently, you can specify only one metric transformation for\n    // > each metric filter. If you want to specify multiple metric\n    // > transformations, you must specify multiple metric filters.\n    //\n    // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html\n    new CfnMetricFilter(this, 'Resource', {\n      logGroupName: props.logGroup.logGroupName,\n      filterPattern: props.filterPattern.logPatternString,\n      metricTransformations: [{\n        metricNamespace: props.metricNamespace,\n        metricName: props.metricName,\n        metricValue: props.metricValue ?? '1',\n        defaultValue: props.defaultValue,\n      }],\n    });\n  }\n\n  /**\n   * Return the given named metric for this Metric Filter\n   *\n   * @default avg over 5 minutes\n   */\n  public metric(props?: MetricOptions): Metric {\n    return new Metric({\n      metricName: this.metricName,\n      namespace: this.metricNamespace,\n      statistic: 'avg',\n      ...props,\n    }).attachTo(this);\n  }\n}\n"],
  "mappings": "mNAAA,iBAAA,QAAA,sBAAA,EACA,OAAA,QAAA,YAAA,EAGA,iBAAA,QAAA,kBAAA,EAeA,MAAa,oBAAqB,QAAA,QAAQ,CAKxC,YAAY,MAAkB,GAAY,MAAwB,QAChE,MAAM,MAAO,EAAE,wEAEf,KAAK,WAAa,MAAM,WACxB,KAAK,gBAAkB,MAAM,gBAU7B,GAAI,kBAAA,gBAAgB,KAAM,WAAY,CACpC,aAAc,MAAM,SAAS,aAC7B,cAAe,MAAM,cAAc,iBACnC,sBAAuB,CAAC,CACtB,gBAAiB,MAAM,gBACvB,WAAY,MAAM,WAClB,YAAW,IAAE,MAAM,eAAW,MAAA,KAAA,OAAA,GAAI,IAClC,aAAc,MAAM,aACrB,EACF,EAQI,OAAO,MAAqB,gFAC1B,GAAI,kBAAA,OAAO,CAChB,WAAY,KAAK,WACjB,UAAW,KAAK,gBAChB,UAAW,SACR,MACJ,EAAE,SAAS,IAAI,GA1CpB,QAAA,aAAA",
  "names": []
}
