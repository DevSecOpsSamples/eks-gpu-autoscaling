{
  "version": 3,
  "sources": ["repository.ts"],
  "sourcesContent": ["import * as notifications from '../../aws-codestarnotifications';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport { ArnFormat, IResource, Lazy, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { Code } from './code';\nimport { CfnRepository } from './codecommit.generated';\n\n/**\n * Additional options to pass to the notification rule.\n */\nexport interface RepositoryNotifyOnOptions extends notifications.NotificationRuleOptions {\n  /**\n   * A list of event types associated with this notification rule for CodeCommit repositories.\n   * For a complete list of event types and IDs, see Notification concepts in the Developer Tools Console User Guide.\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#concepts-api\n   */\n  readonly events: RepositoryNotificationEvents[];\n}\n\nexport interface IRepository extends IResource, notifications.INotificationRuleSource {\n  /**\n   * The ARN of this Repository.\n   * @attribute\n   */\n  readonly repositoryArn: string;\n\n  /**\n   * The human-visible name of this Repository.\n   * @attribute\n   */\n  readonly repositoryName: string;\n\n  /**\n   * The HTTP clone URL.\n   * @attribute\n   */\n  readonly repositoryCloneUrlHttp: string;\n\n  /**\n   * The SSH clone URL.\n   * @attribute\n   */\n  readonly repositoryCloneUrlSsh: string;\n\n  /**\n   * The HTTPS (GRC) clone URL.\n   *\n   * HTTPS (GRC) is the protocol to use with git-remote-codecommit (GRC).\n   *\n   * It is the recommended method for supporting connections made with federated\n   * access, identity providers, and temporary credentials.\n   *\n   * @see https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-git-remote-codecommit.html\n   */\n  readonly repositoryCloneUrlGrc: string;\n\n  /**\n   * Defines a CloudWatch event rule which triggers for repository events. Use\n   * `rule.addEventPattern(pattern)` to specify a filter.\n   */\n  onEvent(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a \"CodeCommit\n   * Repository State Change\" event occurs.\n   */\n  onStateChange(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a reference is\n   * created (i.e. a new branch/tag is created) to the repository.\n   */\n  onReferenceCreated(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a reference is\n   * updated (i.e. a commit is pushed to an existing or new branch) from the repository.\n   */\n  onReferenceUpdated(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a reference is\n   * delete (i.e. a branch/tag is deleted) from the repository.\n   */\n  onReferenceDeleted(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a pull request state is changed.\n   */\n  onPullRequestStateChange(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a comment is made on a pull request.\n   */\n  onCommentOnPullRequest(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a comment is made on a commit.\n   */\n  onCommentOnCommit(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a commit is pushed to a branch.\n   */\n  onCommit(id: string, options?: OnCommitOptions): events.Rule;\n\n  /**\n   * Grant the given principal identity permissions to perform the actions on this repository.\n   */\n  grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;\n\n  /**\n   * Grant the given identity permissions to pull this repository.\n   */\n  grantPull(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant the given identity permissions to pull and push this repository.\n   */\n  grantPullPush(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant the given identity permissions to read this repository.\n   */\n  grantRead(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Defines a CodeStar Notification rule triggered when the project\n   * events specified by you are emitted. Similar to `onEvent` API.\n   *\n   * You can also use the methods to define rules for the specific event emitted.\n   * eg: `notifyOnPullRequstCreated`.\n   *\n   * @returns CodeStar Notifications rule associated with this repository.\n   */\n  notifyOn(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options: RepositoryNotifyOnOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar Notification rule which triggers when a comment is made on a pull request.\n   */\n  notifyOnPullRequestComment(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar Notification rule which triggers when an approval status is changed.\n   */\n  notifyOnApprovalStatusChanged(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar Notification rule which triggers when an approval rule is overridden.\n   */\n  notifyOnApprovalRuleOverridden(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar Notification rule which triggers when a pull request is created.\n   */\n  notifyOnPullRequestCreated(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar Notification rule which triggers when a pull request is merged.\n   * @deprecated this method has a typo in its name, use notifyOnPullRequestMerged instead\n   */\n  notifiyOnPullRequestMerged(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar Notification rule which triggers when a pull request is merged.\n   */\n  notifyOnPullRequestMerged(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar Notification rule which triggers when a new branch or tag is created.\n   */\n  notifyOnBranchOrTagCreated(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar Notification rule which triggers when a branch or tag is deleted.\n   */\n  notifyOnBranchOrTagDeleted(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n}\n\n/**\n * Options for the onCommit() method.\n */\nexport interface OnCommitOptions extends events.OnEventOptions {\n  /**\n   * The branch to monitor.\n   *\n   * @default - All branches\n   */\n  readonly branches?: string[];\n}\n\n/**\n * Represents a reference to a CodeCommit Repository.\n *\n * If you want to create a new Repository managed alongside your CDK code,\n * use the {@link Repository} class.\n *\n * If you want to reference an already existing Repository,\n * use the {@link Repository.import} method.\n */\nabstract class RepositoryBase extends Resource implements IRepository {\n  /** The ARN of this Repository. */\n  public abstract readonly repositoryArn: string;\n\n  /** The human-visible name of this Repository. */\n  public abstract readonly repositoryName: string;\n\n  /** The HTTP clone URL */\n  public abstract readonly repositoryCloneUrlHttp: string;\n\n  /** The SSH clone URL */\n  public abstract readonly repositoryCloneUrlSsh: string;\n\n  public abstract readonly repositoryCloneUrlGrc: string;\n\n  /**\n   * Defines a CloudWatch event rule which triggers for repository events. Use\n   * `rule.addEventPattern(pattern)` to specify a filter.\n   */\n  public onEvent(id: string, options: events.OnEventOptions = {}) {\n    const rule = new events.Rule(this, id, options);\n    rule.addEventPattern({\n      source: ['aws.codecommit'],\n      resources: [this.repositoryArn],\n    });\n    rule.addTarget(options.target);\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a \"CodeCommit\n   * Repository State Change\" event occurs.\n   */\n  public onStateChange(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onEvent(id, options);\n    rule.addEventPattern({\n      detailType: ['CodeCommit Repository State Change'],\n    });\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a reference is\n   * created (i.e. a new branch/tag is created) to the repository.\n   */\n  public onReferenceCreated(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onStateChange(id, options);\n    rule.addEventPattern({ detail: { event: ['referenceCreated'] } });\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a reference is\n   * updated (i.e. a commit is pushed to an existing or new branch) from the repository.\n   */\n  public onReferenceUpdated(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onStateChange(id, options);\n    rule.addEventPattern({ detail: { event: ['referenceCreated', 'referenceUpdated'] } });\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a reference is\n   * delete (i.e. a branch/tag is deleted) from the repository.\n   */\n  public onReferenceDeleted(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onStateChange(id, options);\n    rule.addEventPattern({ detail: { event: ['referenceDeleted'] } });\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a pull request state is changed.\n   */\n  public onPullRequestStateChange(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onEvent(id, options);\n    rule.addEventPattern({ detailType: ['CodeCommit Pull Request State Change'] });\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a comment is made on a pull request.\n   */\n  public onCommentOnPullRequest(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onEvent(id, options);\n    rule.addEventPattern({ detailType: ['CodeCommit Comment on Pull Request'] });\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a comment is made on a commit.\n   */\n  public onCommentOnCommit(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onEvent(id, options);\n    rule.addEventPattern({ detailType: ['CodeCommit Comment on Commit'] });\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule which triggers when a commit is pushed to a branch.\n   */\n  public onCommit(id: string, options: OnCommitOptions = {}) {\n    const rule = this.onReferenceUpdated(id, options);\n    if (options.branches) {\n      rule.addEventPattern({ detail: { referenceName: options.branches } });\n    }\n    return rule;\n  }\n\n  public grant(grantee: iam.IGrantable, ...actions: string[]) {\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions,\n      resourceArns: [this.repositoryArn],\n    });\n  }\n\n  public grantPull(grantee: iam.IGrantable) {\n    return this.grant(grantee, 'codecommit:GitPull');\n  }\n\n  public grantPullPush(grantee: iam.IGrantable) {\n    this.grantPull(grantee);\n    return this.grant(grantee, 'codecommit:GitPush');\n  }\n\n  public grantRead(grantee: iam.IGrantable) {\n    this.grantPull(grantee);\n    return this.grant(grantee,\n      'codecommit:EvaluatePullRequestApprovalRules',\n      'codecommit:Get*',\n      'codecommit:Describe*',\n    );\n  }\n\n  public notifyOn(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options: RepositoryNotifyOnOptions,\n  ): notifications.INotificationRule {\n    return new notifications.NotificationRule(this, id, {\n      ...options,\n      source: this,\n      targets: [target],\n    });\n  }\n\n  public notifyOnPullRequestComment(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOn(id, target, {\n      ...options,\n      events: [RepositoryNotificationEvents.PULL_REQUEST_COMMENT],\n    });\n  }\n\n  public notifyOnApprovalStatusChanged(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOn(id, target, {\n      ...options,\n      events: [RepositoryNotificationEvents.APPROVAL_STATUS_CHANGED],\n    });\n  }\n\n  public notifyOnApprovalRuleOverridden(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOn(id, target, {\n      ...options,\n      events: [RepositoryNotificationEvents.APPROVAL_RULE_OVERRIDDEN],\n    });\n  }\n\n  public notifyOnPullRequestCreated(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOn(id, target, {\n      ...options,\n      events: [RepositoryNotificationEvents.PULL_REQUEST_CREATED],\n    });\n  }\n\n  public notifiyOnPullRequestMerged(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOnPullRequestMerged(id, target, options);\n  }\n\n  public notifyOnPullRequestMerged(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOn(id, target, {\n      ...options,\n      events: [RepositoryNotificationEvents.PULL_REQUEST_MERGED],\n    });\n  }\n\n  public notifyOnBranchOrTagCreated(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOn(id, target, {\n      ...options,\n      events: [RepositoryNotificationEvents.BRANCH_OR_TAG_CREATED],\n    });\n  }\n\n  public notifyOnBranchOrTagDeleted(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOn(id, target, {\n      ...options,\n      events: [RepositoryNotificationEvents.BRANCH_OR_TAG_DELETED],\n    });\n  }\n\n  public bindAsNotificationRuleSource(_scope: Construct): notifications.NotificationRuleSourceConfig {\n    return {\n      sourceArn: this.repositoryArn,\n    };\n  }\n}\n\nexport interface RepositoryProps {\n  /**\n   * Name of the repository.\n   *\n   * This property is required for all CodeCommit repositories.\n   */\n  readonly repositoryName: string;\n\n  /**\n   * A description of the repository. Use the description to identify the\n   * purpose of the repository.\n   *\n   * @default - No description.\n   */\n  readonly description?: string;\n\n  /**\n   * The contents with which to initialize the repository after it has been created.\n   *\n   * @default - No initialization (create empty repo)\n   */\n  readonly code?: Code;\n}\n\n/**\n * Provides a CodeCommit Repository.\n */\nexport class Repository extends RepositoryBase {\n\n  /**\n   * Imports a codecommit repository.\n   * @param repositoryArn (e.g. `arn:aws:codecommit:us-east-1:123456789012:MyDemoRepo`)\n   */\n  public static fromRepositoryArn(scope: Construct, id: string, repositoryArn: string): IRepository {\n    const stack = Stack.of(scope);\n    const arn = stack.splitArn(repositoryArn, ArnFormat.NO_RESOURCE_NAME);\n    const repositoryName = arn.resource;\n    const region = arn.region;\n\n    class Import extends RepositoryBase {\n      public readonly repositoryArn = repositoryArn;\n      public readonly repositoryName = repositoryName;\n      public readonly repositoryCloneUrlHttp = makeCloneUrl(stack, repositoryName, 'https', region);\n      public readonly repositoryCloneUrlSsh = makeCloneUrl(stack, repositoryName, 'ssh', region);\n      public readonly repositoryCloneUrlGrc = makeCloneUrl(stack, repositoryName, 'grc', region);\n    }\n\n    return new Import(scope, id, {\n      account: arn.account,\n      region,\n    });\n  }\n\n  public static fromRepositoryName(scope: Construct, id: string, repositoryName: string): IRepository {\n    const stack = Stack.of(scope);\n\n    class Import extends RepositoryBase {\n      public repositoryName = repositoryName;\n      public repositoryArn = Stack.of(scope).formatArn({\n        service: 'codecommit',\n        resource: repositoryName,\n      });\n      public readonly repositoryCloneUrlHttp = makeCloneUrl(stack, repositoryName, 'https');\n      public readonly repositoryCloneUrlSsh = makeCloneUrl(stack, repositoryName, 'ssh');\n      public readonly repositoryCloneUrlGrc = makeCloneUrl(stack, repositoryName, 'grc');\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly repositoryArn: string;\n  public readonly repositoryName: string;\n  public readonly repositoryCloneUrlHttp: string;\n  public readonly repositoryCloneUrlSsh: string;\n  public readonly repositoryCloneUrlGrc: string;\n  private readonly triggers = new Array<CfnRepository.RepositoryTriggerProperty>();\n\n  constructor(scope: Construct, id: string, props: RepositoryProps) {\n    super(scope, id, {\n      physicalName: props.repositoryName,\n    });\n\n    const repository = new CfnRepository(this, 'Resource', {\n      repositoryName: props.repositoryName,\n      repositoryDescription: props.description,\n      triggers: Lazy.any({ produce: () => this.triggers }, { omitEmptyArray: true }),\n      code: (props.code?.bind(this))?.code,\n    });\n\n    this.repositoryName = this.getResourceNameAttribute(repository.attrName);\n    this.repositoryArn = this.getResourceArnAttribute(repository.attrArn, {\n      service: 'codecommit',\n      resource: this.physicalName,\n    });\n    this.repositoryCloneUrlHttp = repository.attrCloneUrlHttp;\n    this.repositoryCloneUrlSsh = repository.attrCloneUrlSsh;\n    this.repositoryCloneUrlGrc = makeCloneUrl(Stack.of(this), this.repositoryName, 'grc');\n  }\n\n  /**\n   * Create a trigger to notify another service to run actions on repository events.\n   * @param arn   Arn of the resource that repository events will notify\n   * @param options Trigger options to run actions\n   */\n  public notify(arn: string, options?: RepositoryTriggerOptions): Repository {\n\n    let evt = options && options.events;\n    if (evt && evt.length > 1 && evt.indexOf(RepositoryEventTrigger.ALL) > -1) {\n      evt = [RepositoryEventTrigger.ALL];\n    }\n\n    const customData = options && options.customData;\n    const branches = options && options.branches;\n\n    let name = options && options.name;\n    if (!name) {\n      name = this.node.path + '/' + arn;\n    }\n\n    if (this.triggers.find(prop => prop.name === name)) {\n      throw new Error(`Unable to set repository trigger named ${name} because trigger names must be unique`);\n    }\n\n    this.triggers.push({\n      destinationArn: arn,\n      name,\n      customData,\n      branches,\n      events: evt || [RepositoryEventTrigger.ALL],\n    });\n    return this;\n  }\n}\n\n/**\n * Creates for a repository trigger to an SNS topic or Lambda function.\n */\nexport interface RepositoryTriggerOptions {\n  /**\n   * A name for the trigger.Triggers on a repository must have unique names.\n   */\n  readonly name?: string;\n\n  /**\n   * The repository events for which AWS CodeCommit sends information to the\n   * target, which you specified in the DestinationArn property.If you don't\n   * specify events, the trigger runs for all repository events.\n   */\n  readonly events?: RepositoryEventTrigger[];\n\n  /**\n   * The names of the branches in the AWS CodeCommit repository that contain\n   * events that you want to include in the trigger. If you don't specify at\n   * least one branch, the trigger applies to all branches.\n   */\n  readonly branches?: string[];\n\n  /**\n   * When an event is triggered, additional information that AWS CodeCommit\n   * includes when it sends information to the target.\n   */\n  readonly customData?: string;\n}\n\n/**\n * Repository events that will cause the trigger to run actions in another service.\n */\nexport enum RepositoryEventTrigger {\n  ALL = 'all',\n  UPDATE_REF = 'updateReference',\n  CREATE_REF = 'createReference',\n  DELETE_REF = 'deleteReference'\n}\n\n/**\n * Returns the clone URL for a protocol.\n */\nfunction makeCloneUrl(stack: Stack, repositoryName: string, protocol: 'https' | 'ssh' | 'grc', region?: string) {\n  switch (protocol) {\n    case 'https':\n    case 'ssh':\n      return `${protocol}://git-codecommit.${region ?? stack.region}.${stack.urlSuffix}/v1/repos/${repositoryName}`;\n    case 'grc':\n      return `codecommit::${region ?? stack.region}://${repositoryName}`;\n  }\n}\n\n/**\n * List of event types for AWS CodeCommit\n * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-repositories\n */\nexport enum RepositoryNotificationEvents {\n  /**\n   * Trigger notication when comment made on commit.\n   */\n  COMMIT_COMMENT = 'codecommit-repository-comments-on-commits',\n\n  /**\n   * Trigger notification when comment made on pull request.\n   */\n  PULL_REQUEST_COMMENT = 'codecommit-repository-comments-on-pull-requests',\n\n  /**\n   * Trigger notification when approval status changed.\n   */\n  APPROVAL_STATUS_CHANGED = 'codecommit-repository-approvals-status-changed',\n\n  /**\n   * Trigger notifications when approval rule is overridden.\n   */\n  APPROVAL_RULE_OVERRIDDEN = 'codecommit-repository-approvals-rule-override',\n\n  /**\n   * Trigger notification when pull request created.\n   */\n  PULL_REQUEST_CREATED = 'codecommit-repository-pull-request-created',\n\n  /**\n   * Trigger notification when pull request source updated.\n   */\n  PULL_REQUEST_SOURCE_UPDATED = 'codecommit-repository-pull-request-source-updated',\n\n  /**\n   * Trigger notification when pull request status is changed.\n   */\n  PULL_REQUEST_STATUS_CHANGED = 'codecommit-repository-pull-request-status-changed',\n\n  /**\n   * Trigger notification when pull requset is merged.\n   */\n  PULL_REQUEST_MERGED = 'codecommit-repository-pull-request-merged',\n\n  /**\n   * Trigger notification when a branch or tag is created.\n   */\n  BRANCH_OR_TAG_CREATED = 'codecommit-repository-branches-and-tags-created',\n\n  /**\n   * Trigger notification when a branch or tag is deleted.\n   */\n  BRANCH_OR_TAG_DELETED = 'codecommit-repository-branches-and-tags-deleted',\n\n  /**\n   * Trigger notification when a branch or tag is updated.\n   */\n  BRANCH_OR_TAG_UPDATED = 'codecommit-repository-branches-and-tags-updated',\n}"],
  "mappings": "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",
  "names": []
}
