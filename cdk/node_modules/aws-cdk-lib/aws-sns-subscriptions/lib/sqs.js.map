{
  "version": 3,
  "sources": ["sqs.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as sns from '../../aws-sns';\nimport * as sqs from '../../aws-sqs';\nimport { ArnFormat, Names, Stack, Token } from '../../core';\nimport { SubscriptionProps } from './subscription';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Properties for an SQS subscription\n */\nexport interface SqsSubscriptionProps extends SubscriptionProps {\n  /**\n   * The message to the queue is the same as it was sent to the topic\n   *\n   * If false, the message will be wrapped in an SNS envelope.\n   *\n   * @default false\n   */\n  readonly rawMessageDelivery?: boolean;\n}\n\n/**\n * Use an SQS queue as a subscription target\n */\nexport class SqsSubscription implements sns.ITopicSubscription {\n  constructor(private readonly queue: sqs.IQueue, private readonly props: SqsSubscriptionProps = {}) {\n  }\n\n  /**\n   * Returns a configuration for an SQS queue to subscribe to an SNS topic\n   */\n  public bind(topic: sns.ITopic): sns.TopicSubscriptionConfig {\n    // Create subscription under *consuming* construct to make sure it ends up\n    // in the correct stack in cases of cross-stack subscriptions.\n    if (!(this.queue instanceof Construct)) {\n      throw new Error('The supplied Queue object must be an instance of Construct');\n    }\n    const snsServicePrincipal = new iam.ServicePrincipal('sns.amazonaws.com');\n\n    // add a statement to the queue resource policy which allows this topic\n    // to send messages to the queue.\n    this.queue.addToResourcePolicy(new iam.PolicyStatement({\n      resources: [this.queue.queueArn],\n      actions: ['sqs:SendMessage'],\n      principals: [snsServicePrincipal],\n      conditions: {\n        ArnEquals: { 'aws:SourceArn': topic.topicArn },\n      },\n    }));\n\n    // if the queue is encrypted, add a statement to the key resource policy\n    // which allows this topic to decrypt KMS keys\n    if (this.queue.encryptionMasterKey) {\n      this.queue.encryptionMasterKey.addToResourcePolicy(new iam.PolicyStatement({\n        resources: ['*'],\n        actions: ['kms:Decrypt', 'kms:GenerateDataKey'],\n        principals: [snsServicePrincipal],\n      }));\n    }\n\n    // if the topic and queue are created in different stacks\n    // then we need to make sure the topic is created first\n    if (topic instanceof sns.Topic && topic.stack !== this.queue.stack) {\n      this.queue.stack.addDependency(topic.stack);\n    }\n\n    return {\n      subscriberScope: this.queue,\n      subscriberId: Names.nodeUniqueId(topic.node),\n      endpoint: this.queue.queueArn,\n      protocol: sns.SubscriptionProtocol.SQS,\n      rawMessageDelivery: this.props.rawMessageDelivery,\n      filterPolicy: this.props.filterPolicy,\n      region: this.regionFromArn(topic),\n      deadLetterQueue: this.props.deadLetterQueue,\n    };\n  }\n\n  private regionFromArn(topic: sns.ITopic): string | undefined {\n    // no need to specify `region` for topics defined within the same stack\n    if (topic instanceof sns.Topic) {\n      if (topic.stack !== this.queue.stack) {\n        // only if we know the region, will not work for\n        // env agnostic stacks\n        if (!Token.isUnresolved(topic.stack.region) &&\n          (topic.stack.region !== this.queue.stack.region)) {\n          return topic.stack.region;\n        }\n      }\n      return undefined;\n    }\n    return Stack.of(topic).splitArn(topic.topicArn, ArnFormat.SLASH_RESOURCE_NAME).region;\n  }\n}\n"],
  "mappings": "sNAAA,IAAA,QAAA,eAAA,EACA,IAAA,QAAA,eAAA,EAEA,OAAA,QAAA,YAAA,EAKA,aAAA,QAAA,YAAA,EAmBA,MAAa,eAAe,CAC1B,YAA6B,MAAoC,MAA8B,CAAA,EAAE,CAApE,KAAA,MAAA,MAAoC,KAAA,MAAA,sJAM1D,KAAK,MAAiB,CAG3B,6DAAI,CAAE,MAAK,gBAAiB,cAAA,WAC1B,KAAM,IAAI,OAAM,4DAA4D,EAE9E,KAAM,qBAAsB,GAAI,KAAI,iBAAiB,mBAAmB,EAIxE,YAAK,MAAM,oBAAoB,GAAI,KAAI,gBAAgB,CACrD,UAAW,CAAC,KAAK,MAAM,QAAQ,EAC/B,QAAS,CAAC,iBAAiB,EAC3B,WAAY,CAAC,mBAAmB,EAChC,WAAY,CACV,UAAW,CAAE,gBAAiB,MAAM,QAAQ,GAE/C,CAAC,EAIE,KAAK,MAAM,qBACb,KAAK,MAAM,oBAAoB,oBAAoB,GAAI,KAAI,gBAAgB,CACzE,UAAW,CAAC,GAAG,EACf,QAAS,CAAC,cAAe,qBAAqB,EAC9C,WAAY,CAAC,mBAAmB,EACjC,CAAC,EAKA,gBAAiB,KAAI,OAAS,MAAM,QAAU,KAAK,MAAM,OAC3D,KAAK,MAAM,MAAM,cAAc,MAAM,KAAK,EAGrC,CACL,gBAAiB,KAAK,MACtB,aAAc,OAAA,MAAM,aAAa,MAAM,IAAI,EAC3C,SAAU,KAAK,MAAM,SACrB,SAAU,IAAI,qBAAqB,IACnC,mBAAoB,KAAK,MAAM,mBAC/B,aAAc,KAAK,MAAM,aACzB,OAAQ,KAAK,cAAc,KAAK,EAChC,gBAAiB,KAAK,MAAM,iBAIxB,cAAc,MAAiB,CAErC,MAAI,iBAAiB,KAAI,MACnB,MAAM,QAAU,KAAK,MAAM,OAGzB,CAAC,OAAA,MAAM,aAAa,MAAM,MAAM,MAAM,GACvC,MAAM,MAAM,SAAW,KAAK,MAAM,MAAM,OAClC,MAAM,MAAM,OAGvB,OAEK,OAAA,MAAM,GAAG,KAAK,EAAE,SAAS,MAAM,SAAU,OAAA,UAAU,mBAAmB,EAAE,QAnEnF,QAAA,gBAAA",
  "names": []
}
