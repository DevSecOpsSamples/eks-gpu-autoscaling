{
  "version": 3,
  "sources": ["elasticache-canned-metrics.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nexport class ElastiCacheMetrics {\n  public static activeDefragHitsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static activeDefragHitsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static activeDefragHitsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static activeDefragHitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'ActiveDefragHits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static authenticationFailuresSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static authenticationFailuresSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static authenticationFailuresSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static authenticationFailuresSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'AuthenticationFailures',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static bytesReadIntoMemcachedAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static bytesReadIntoMemcachedAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static bytesReadIntoMemcachedAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static bytesReadIntoMemcachedAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'BytesReadIntoMemcached',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static bytesUsedForCacheAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static bytesUsedForCacheAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static bytesUsedForCacheAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static bytesUsedForCacheAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'BytesUsedForCache',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static bytesUsedForCacheItemsAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static bytesUsedForCacheItemsAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static bytesUsedForCacheItemsAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static bytesUsedForCacheItemsAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'BytesUsedForCacheItems',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static bytesUsedForHashAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static bytesUsedForHashAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static bytesUsedForHashAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static bytesUsedForHashAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'BytesUsedForHash',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static bytesWrittenOutFromMemcachedAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static bytesWrittenOutFromMemcachedAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static bytesWrittenOutFromMemcachedAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static bytesWrittenOutFromMemcachedAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'BytesWrittenOutFromMemcached',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cacheHitRateAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cacheHitRateAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cacheHitRateAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static cacheHitRateAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CacheHitRate',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cacheHitsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cacheHitsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cacheHitsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static cacheHitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CacheHits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static cacheMissesSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cacheMissesSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cacheMissesSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static cacheMissesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CacheMisses',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static casBadvalSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static casBadvalSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static casBadvalSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static casBadvalSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CasBadval',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static casHitsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static casHitsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static casHitsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static casHitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CasHits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static casMissesSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static casMissesSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static casMissesSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static casMissesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CasMisses',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static cmdConfigGetSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cmdConfigGetSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cmdConfigGetSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static cmdConfigGetSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CmdConfigGet',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static cmdConfigSetSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cmdConfigSetSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cmdConfigSetSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static cmdConfigSetSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CmdConfigSet',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static cmdFlushSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cmdFlushSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cmdFlushSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static cmdFlushSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CmdFlush',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static cmdGetsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cmdGetsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cmdGetsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static cmdGetsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CmdGets',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static cmdSetSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cmdSetSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cmdSetSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static cmdSetSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CmdSet',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static cmdTouchSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cmdTouchSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cmdTouchSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static cmdTouchSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CmdTouch',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static commandAuthorizationFailuresSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static commandAuthorizationFailuresSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static commandAuthorizationFailuresSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static commandAuthorizationFailuresSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CommandAuthorizationFailures',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static cpuCreditBalanceAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cpuCreditBalanceAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cpuCreditBalanceAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static cpuCreditBalanceAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CPUCreditBalance',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuCreditUsageAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cpuCreditUsageAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cpuCreditUsageAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static cpuCreditUsageAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CPUCreditUsage',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuUtilizationAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static cpuUtilizationAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static cpuUtilizationAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static cpuUtilizationAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CPUUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static currConfigSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static currConfigSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static currConfigSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static currConfigSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CurrConfig',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static currConnectionsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static currConnectionsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static currConnectionsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static currConnectionsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CurrConnections',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static currItemsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static currItemsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static currItemsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static currItemsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'CurrItems',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static databaseMemoryUsagePercentageAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static databaseMemoryUsagePercentageAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static databaseMemoryUsagePercentageAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static databaseMemoryUsagePercentageAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'DatabaseMemoryUsagePercentage',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static db0AverageTtlAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static db0AverageTtlAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static db0AverageTtlAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static db0AverageTtlAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'DB0AverageTTL',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static decrHitsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static decrHitsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static decrHitsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static decrHitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'DecrHits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static decrMissesSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static decrMissesSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static decrMissesSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static decrMissesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'DecrMisses',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static deleteHitsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static deleteHitsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static deleteHitsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static deleteHitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'DeleteHits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static deleteMissesSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static deleteMissesSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static deleteMissesSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static deleteMissesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'DeleteMisses',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static engineCpuUtilizationAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static engineCpuUtilizationAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static engineCpuUtilizationAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static engineCpuUtilizationAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'EngineCPUUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static evalBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static evalBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static evalBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static evalBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'EvalBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static evalBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static evalBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static evalBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static evalBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'EvalBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static evictedUnfetchedSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static evictedUnfetchedSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static evictedUnfetchedSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static evictedUnfetchedSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'EvictedUnfetched',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static evictionsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static evictionsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static evictionsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static evictionsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'Evictions',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static expiredUnfetchedSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static expiredUnfetchedSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static expiredUnfetchedSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static expiredUnfetchedSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'ExpiredUnfetched',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static freeableMemoryAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static freeableMemoryAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static freeableMemoryAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static freeableMemoryAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'FreeableMemory',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static geoSpatialBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static geoSpatialBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static geoSpatialBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static geoSpatialBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'GeoSpatialBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static geoSpatialBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static geoSpatialBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static geoSpatialBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static geoSpatialBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'GeoSpatialBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static getHitsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static getHitsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static getHitsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static getHitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'GetHits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static getMissesSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static getMissesSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static getMissesSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static getMissesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'GetMisses',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static getTypeCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static getTypeCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static getTypeCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static getTypeCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'GetTypeCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static getTypeCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static getTypeCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static getTypeCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static getTypeCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'GetTypeCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static globalDatastoreReplicationLagAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static globalDatastoreReplicationLagAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static globalDatastoreReplicationLagAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static globalDatastoreReplicationLagAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'GlobalDatastoreReplicationLag',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static hashBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static hashBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static hashBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static hashBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'HashBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static hashBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static hashBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static hashBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static hashBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'HashBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static hyperLogLogBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static hyperLogLogBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static hyperLogLogBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static hyperLogLogBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'HyperLogLogBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static hyperLogLogBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static hyperLogLogBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static hyperLogLogBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static hyperLogLogBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'HyperLogLogBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static incrHitsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static incrHitsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static incrHitsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static incrHitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'IncrHits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static incrMissesSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static incrMissesSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static incrMissesSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static incrMissesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'IncrMisses',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static isMasterAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static isMasterAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static isMasterAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static isMasterAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'IsMaster',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static keyAuthorizationFailuresSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static keyAuthorizationFailuresSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static keyAuthorizationFailuresSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static keyAuthorizationFailuresSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'KeyAuthorizationFailures',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static keyBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static keyBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static keyBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static keyBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'KeyBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static keyBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static keyBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static keyBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static keyBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'KeyBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static keysTrackedSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static keysTrackedSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static keysTrackedSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static keysTrackedSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'KeysTracked',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static listBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static listBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static listBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static listBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'ListBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static listBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static listBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static listBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static listBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'ListBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static masterLinkHealthStatusAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static masterLinkHealthStatusAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static masterLinkHealthStatusAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static masterLinkHealthStatusAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'MasterLinkHealthStatus',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static memoryFragmentationRatioAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static memoryFragmentationRatioAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static memoryFragmentationRatioAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static memoryFragmentationRatioAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'MemoryFragmentationRatio',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static networkBytesInAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static networkBytesInAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static networkBytesInAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static networkBytesInAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'NetworkBytesIn',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static networkBytesOutAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static networkBytesOutAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static networkBytesOutAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static networkBytesOutAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'NetworkBytesOut',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static networkPacketsInAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static networkPacketsInAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static networkPacketsInAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static networkPacketsInAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'NetworkPacketsIn',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static networkPacketsOutAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static networkPacketsOutAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static networkPacketsOutAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static networkPacketsOutAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'NetworkPacketsOut',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static newConnectionsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static newConnectionsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static newConnectionsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static newConnectionsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'NewConnections',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static newItemsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static newItemsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static newItemsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static newItemsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'NewItems',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static pubSubBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static pubSubBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static pubSubBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static pubSubBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'PubSubBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static pubSubBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static pubSubBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static pubSubBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static pubSubBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'PubSubBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static reclaimedSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static reclaimedSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static reclaimedSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static reclaimedSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'Reclaimed',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static replicationBytesSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static replicationBytesSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static replicationBytesSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static replicationBytesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'ReplicationBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static replicationLagAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static replicationLagAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static replicationLagAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static replicationLagAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'ReplicationLag',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static saveInProgressSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static saveInProgressSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static saveInProgressSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static saveInProgressSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'SaveInProgress',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static setBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static setBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static setBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static setBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'SetBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static setBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static setBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static setBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static setBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'SetBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static setTypeCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static setTypeCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static setTypeCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static setTypeCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'SetTypeCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static setTypeCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static setTypeCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static setTypeCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static setTypeCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'SetTypeCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static slabsMovedSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static slabsMovedSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static slabsMovedSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static slabsMovedSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'SlabsMoved',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static sortedSetBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static sortedSetBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static sortedSetBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static sortedSetBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'SortedSetBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static sortedSetBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static sortedSetBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static sortedSetBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static sortedSetBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'SortedSetBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static streamBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static streamBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static streamBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static streamBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'StreamBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static streamBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static streamBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static streamBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static streamBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'StreamBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static stringBasedCmdsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static stringBasedCmdsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static stringBasedCmdsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static stringBasedCmdsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'StringBasedCmds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static stringBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static stringBasedCmdsLatencyAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static stringBasedCmdsLatencyAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static stringBasedCmdsLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'StringBasedCmdsLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static swapUsageAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static swapUsageAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static swapUsageAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static swapUsageAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'SwapUsage',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static touchHitsSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static touchHitsSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static touchHitsSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static touchHitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'TouchHits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static touchMissesSum(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static touchMissesSum(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static touchMissesSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static touchMissesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'TouchMisses',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static unusedMemoryAverage(dimensions: { CacheClusterId: string }): MetricWithDims<{ CacheClusterId: string }>;\n  public static unusedMemoryAverage(dimensions: { CacheClusterId: string, CacheNodeId: string }): MetricWithDims<{ CacheClusterId: string, CacheNodeId: string }>;\n  public static unusedMemoryAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static unusedMemoryAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ElastiCache',\n      metricName: 'UnusedMemory',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n}\ntype MetricWithDims<D> = { namespace: string, metricName: string, statistic: string, dimensionsMap: D };\n"],
  "mappings": "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",
  "names": []
}
