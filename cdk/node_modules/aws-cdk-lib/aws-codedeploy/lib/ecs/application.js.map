{
  "version": 3,
  "sources": ["application.ts"],
  "sourcesContent": ["import { ArnFormat, IResource, Resource } from '../../../core';\nimport { Construct } from 'constructs';\nimport { CfnApplication } from '../codedeploy.generated';\nimport { arnForApplication, validateName } from '../utils';\n\n/**\n * Represents a reference to a CodeDeploy Application deploying to Amazon ECS.\n *\n * If you're managing the Application alongside the rest of your CDK resources,\n * use the {@link EcsApplication} class.\n *\n * If you want to reference an already existing Application,\n * or one defined in a different CDK Stack,\n * use the {@link EcsApplication#fromEcsApplicationName} method.\n */\nexport interface IEcsApplication extends IResource {\n  /** @attribute */\n  readonly applicationArn: string;\n\n  /** @attribute */\n  readonly applicationName: string;\n}\n\n/**\n * Construction properties for {@link EcsApplication}.\n */\nexport interface EcsApplicationProps {\n  /**\n   * The physical, human-readable name of the CodeDeploy Application.\n   *\n   * @default an auto-generated name will be used\n   */\n  readonly applicationName?: string;\n}\n\n/**\n * A CodeDeploy Application that deploys to an Amazon ECS service.\n *\n * @resource AWS::CodeDeploy::Application\n */\nexport class EcsApplication extends Resource implements IEcsApplication {\n  /**\n   * Import an Application defined either outside the CDK, or in a different CDK Stack.\n   *\n   * @param scope the parent Construct for this new Construct\n   * @param id the logical ID of this new Construct\n   * @param ecsApplicationName the name of the application to import\n   * @returns a Construct representing a reference to an existing Application\n   */\n  public static fromEcsApplicationName(scope: Construct, id: string, ecsApplicationName: string): IEcsApplication {\n    class Import extends Resource implements IEcsApplication {\n      public applicationArn = arnForApplication(ecsApplicationName);\n      public applicationName = ecsApplicationName;\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly applicationArn: string;\n  public readonly applicationName: string;\n\n  constructor(scope: Construct, id: string, props: EcsApplicationProps = {}) {\n    super(scope, id, {\n      physicalName: props.applicationName,\n    });\n\n    const resource = new CfnApplication(this, 'Resource', {\n      applicationName: this.physicalName,\n      computePlatform: 'ECS',\n    });\n\n    this.applicationName = this.getResourceNameAttribute(resource.ref);\n    this.applicationArn = this.getResourceArnAttribute(arnForApplication(resource.ref), {\n      service: 'codedeploy',\n      resource: 'application',\n      resourceName: this.physicalName,\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n    });\n\n    this.node.addValidation({ validate: () => validateName('Application', this.physicalName) });\n  }\n}\n"],
  "mappings": "wNAAA,OAAA,QAAA,eAAA,EAEA,uBAAA,QAAA,yBAAA,EACA,QAAA,QAAA,UAAA,EAqCA,MAAa,sBAAuB,QAAA,QAAQ,CAqB1C,YAAY,MAAkB,GAAY,MAA6B,CAAA,EAAE,CACvE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,gBACrB,gFAED,KAAM,UAAW,GAAI,wBAAA,eAAe,KAAM,WAAY,CACpD,gBAAiB,KAAK,aACtB,gBAAiB,MAClB,EAED,KAAK,gBAAkB,KAAK,yBAAyB,SAAS,GAAG,EACjE,KAAK,eAAiB,KAAK,wBAAwB,QAAA,kBAAkB,SAAS,GAAG,EAAG,CAClF,QAAS,aACT,SAAU,cACV,aAAc,KAAK,aACnB,UAAW,OAAA,UAAU,oBACtB,EAED,KAAK,KAAK,cAAc,CAAE,SAAU,IAAM,QAAA,aAAa,cAAe,KAAK,YAAY,CAAC,CAAE,QA9B9E,wBAAuB,MAAkB,GAAY,mBAA0B,CAC3F,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACS,KAAA,eAAiB,QAAA,kBAAkB,kBAAkB,EACrD,KAAA,gBAAkB,kBAC3B,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,GAf/B,QAAA,eAAA",
  "names": []
}
