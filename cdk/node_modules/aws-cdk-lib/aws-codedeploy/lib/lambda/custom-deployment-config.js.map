{
  "version": 3,
  "sources": ["custom-deployment-config.ts"],
  "sourcesContent": ["import { Duration, Names, Resource } from '../../../core';\nimport { AwsCustomResource, AwsCustomResourcePolicy, PhysicalResourceId } from '../../../custom-resources';\nimport { Construct } from 'constructs';\nimport { arnForDeploymentConfig, validateName } from '../utils';\nimport { ILambdaDeploymentConfig } from './deployment-config';\n\n/**\n * Lambda Deployment config type\n */\nexport enum CustomLambdaDeploymentConfigType {\n  /**\n   * Canary deployment type\n   */\n  CANARY = 'Canary',\n\n  /**\n   * Linear deployment type\n   */\n  LINEAR = 'Linear'\n}\n\n/**\n * Properties of a reference to a CodeDeploy Lambda Deployment Configuration.\n */\nexport interface CustomLambdaDeploymentConfigProps {\n\n  /**\n   * The type of deployment config, either CANARY or LINEAR\n   */\n  readonly type: CustomLambdaDeploymentConfigType;\n\n  /**\n   * The integer percentage of traffic to shift:\n   * - For LINEAR, the percentage to shift every interval\n   * - For CANARY, the percentage to shift until the interval passes, before the full deployment\n   */\n  readonly percentage: number;\n\n  /**\n   * The interval, in number of minutes:\n   * - For LINEAR, how frequently additional traffic is shifted\n   * - For CANARY, how long to shift traffic before the full deployment\n   */\n  readonly interval: Duration;\n\n  /**\n   * The verbatim name of the deployment config. Must be unique per account/region.\n   * Other parameters cannot be updated if this name is provided.\n   * @default - automatically generated name\n   */\n  readonly deploymentConfigName?: string;\n}\n\n/**\n * A custom Deployment Configuration for a Lambda Deployment Group.\n * @resource AWS::CodeDeploy::DeploymentGroup\n */\nexport class CustomLambdaDeploymentConfig extends Resource implements ILambdaDeploymentConfig {\n\n  /**\n   * The name of the deployment config\n   * @attribute\n   */\n  public readonly deploymentConfigName: string;\n\n  /**\n   * The arn of the deployment config\n   * @attribute\n   */\n  public readonly deploymentConfigArn: string;\n\n  public constructor(scope: Construct, id: string, props: CustomLambdaDeploymentConfigProps) {\n    super(scope, id);\n    this.validateParameters(props);\n\n    // In this section we make the argument for the AWS API call\n    const deploymentType = 'TimeBased' + props.type.toString();\n    const intervalMinutes = props.interval.toMinutes().toString();\n    const percentage = props.percentage.toString();\n    let routingConfig; // The argument to the AWS API call\n    if (props.type == CustomLambdaDeploymentConfigType.CANARY) {\n      routingConfig = {\n        type: deploymentType,\n        timeBasedCanary: {\n          canaryInterval: intervalMinutes,\n          canaryPercentage: percentage,\n        },\n      };\n    } else if (props.type == CustomLambdaDeploymentConfigType.LINEAR) {\n      routingConfig = {\n        type: deploymentType,\n        timeBasedLinear: {\n          linearInterval: intervalMinutes,\n          linearPercentage: percentage,\n        },\n      };\n    }\n\n    // Generates the name of the deployment config. It's also what you'll see in the AWS console\n    // The name of the config is <construct unique id>.Lambda<deployment type><percentage>Percent<interval>Minutes\n    // Unless the user provides an explicit name\n    this.deploymentConfigName = props.deploymentConfigName\n      ?? `${Names.uniqueId(this)}.Lambda${props.type}${props.percentage}Percent${props.type === CustomLambdaDeploymentConfigType.LINEAR\n        ? 'Every'\n        : ''}${props.interval.toMinutes()}Minutes`;\n    this.deploymentConfigArn = arnForDeploymentConfig(this.deploymentConfigName);\n\n    // The AWS Custom Resource that calls CodeDeploy to create and delete the resource\n    new AwsCustomResource(this, 'DeploymentConfig', {\n      onCreate: { // Run on creation only, to make the resource\n        service: 'CodeDeploy',\n        action: 'createDeploymentConfig',\n        parameters: {\n          deploymentConfigName: this.deploymentConfigName,\n          computePlatform: 'Lambda',\n          trafficRoutingConfig: routingConfig,\n        },\n        // This `resourceName` is the initial physical ID of the config\n        physicalResourceId: PhysicalResourceId.of(this.deploymentConfigName),\n      },\n      onUpdate: { // Run on stack update\n        service: 'CodeDeploy',\n        action: 'createDeploymentConfig',\n        parameters: {\n          deploymentConfigName: this.deploymentConfigName,\n          computePlatform: 'Lambda',\n          trafficRoutingConfig: routingConfig,\n        },\n        // If `resourceName` is different from the last stack update (or creation),\n        // the old config gets deleted and the new one is created\n        physicalResourceId: PhysicalResourceId.of(this.deploymentConfigName),\n      },\n      onDelete: { // Run on deletion, or on resource replacement\n        service: 'CodeDeploy',\n        action: 'deleteDeploymentConfig',\n        parameters: {\n          deploymentConfigName: this.deploymentConfigName,\n        },\n      },\n      policy: AwsCustomResourcePolicy.fromSdkCalls({\n        resources: AwsCustomResourcePolicy.ANY_RESOURCE,\n      }),\n    });\n\n    this.node.addValidation({ validate: () => validateName('Deployment config', this.deploymentConfigName) });\n  }\n\n  // Validate the inputs. The percentage/interval limits come from CodeDeploy\n  private validateParameters(props: CustomLambdaDeploymentConfigProps): void {\n    if ( !(1 <= props.percentage && props.percentage <= 99) ) {\n      throw new Error(\n        `Invalid deployment config percentage \"${props.percentage.toString()}\". \\\n        Step percentage must be an integer between 1 and 99.`);\n    }\n    if (props.interval.toMinutes() > 2880) {\n      throw new Error(\n        `Invalid deployment config interval \"${props.interval.toString()}\". \\\n        Traffic shifting intervals must be positive integers up to 2880 (2 days).`);\n    }\n  }\n}\n"],
  "mappings": "+QAAA,OAAA,QAAA,eAAA,EACA,mBAAA,QAAA,2BAAA,EAEA,QAAA,QAAA,UAAA,EAMA,GAAY,kCAAZ,AAAA,UAAY,kCAAgC,CAI1C,kCAAA,OAAA,SAKA,kCAAA,OAAA,QACF,GAVY,iCAAA,QAAA,kCAAA,SAAA,iCAAgC,CAAA,EAAA,EAgD5C,MAAa,oCAAqC,QAAA,QAAQ,CAcxD,YAAmB,MAAkB,GAAY,MAAwC,QACvF,MAAM,MAAO,EAAE,8FACf,KAAK,mBAAmB,KAAK,EAG7B,KAAM,gBAAiB,YAAc,MAAM,KAAK,SAAQ,EAClD,gBAAkB,MAAM,SAAS,UAAS,EAAG,SAAQ,EACrD,WAAa,MAAM,WAAW,SAAQ,EAC5C,GAAI,eACJ,AAAI,MAAM,MAAQ,iCAAiC,OACjD,cAAgB,CACd,KAAM,eACN,gBAAiB,CACf,eAAgB,gBAChB,iBAAkB,aAGb,MAAM,MAAQ,iCAAiC,QACxD,eAAgB,CACd,KAAM,eACN,gBAAiB,CACf,eAAgB,gBAChB,iBAAkB,cAQxB,KAAK,qBAAoB,IAAG,MAAM,wBAAoB,MAAA,KAAA,OAAA,GACjD,GAAG,OAAA,MAAM,SAAS,IAAI,WAAW,MAAM,OAAO,MAAM,oBAAoB,MAAM,OAAS,iCAAiC,OACvH,QACA,KAAK,MAAM,SAAS,UAAS,WACnC,KAAK,oBAAsB,QAAA,uBAAuB,KAAK,oBAAoB,EAG3E,GAAI,oBAAA,kBAAkB,KAAM,mBAAoB,CAC9C,SAAU,CACR,QAAS,aACT,OAAQ,yBACR,WAAY,CACV,qBAAsB,KAAK,qBAC3B,gBAAiB,SACjB,qBAAsB,eAGxB,mBAAoB,mBAAA,mBAAmB,GAAG,KAAK,oBAAoB,GAErE,SAAU,CACR,QAAS,aACT,OAAQ,yBACR,WAAY,CACV,qBAAsB,KAAK,qBAC3B,gBAAiB,SACjB,qBAAsB,eAIxB,mBAAoB,mBAAA,mBAAmB,GAAG,KAAK,oBAAoB,GAErE,SAAU,CACR,QAAS,aACT,OAAQ,yBACR,WAAY,CACV,qBAAsB,KAAK,uBAG/B,OAAQ,mBAAA,wBAAwB,aAAa,CAC3C,UAAW,mBAAA,wBAAwB,aACpC,EACF,EAED,KAAK,KAAK,cAAc,CAAE,SAAU,IAAM,QAAA,aAAa,oBAAqB,KAAK,oBAAoB,CAAC,CAAE,EAIlG,mBAAmB,MAAwC,CACjE,GAAK,CAAE,IAAK,MAAM,YAAc,MAAM,YAAc,IAClD,KAAM,IAAI,OACR,yCAAyC,MAAM,WAAW,SAAQ,kEACb,EAEzD,GAAI,MAAM,SAAS,UAAS,EAAK,KAC/B,KAAM,IAAI,OACR,uCAAuC,MAAM,SAAS,SAAQ,uFACY,GApGlF,QAAA,6BAAA",
  "names": []
}
