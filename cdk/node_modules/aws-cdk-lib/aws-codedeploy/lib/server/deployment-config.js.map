{
  "version": 3,
  "sources": ["deployment-config.ts"],
  "sourcesContent": ["import * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { CfnDeploymentConfig } from '../codedeploy.generated';\nimport { arnForDeploymentConfig, validateName } from '../utils';\n\n/**\n * The Deployment Configuration of an EC2/on-premise Deployment Group.\n * The default, pre-defined Configurations are available as constants on the {@link ServerDeploymentConfig} class\n * (`ServerDeploymentConfig.HALF_AT_A_TIME`, `ServerDeploymentConfig.ALL_AT_ONCE`, etc.).\n * To create a custom Deployment Configuration,\n * instantiate the {@link ServerDeploymentConfig} Construct.\n */\nexport interface IServerDeploymentConfig {\n  /**\n   * @attribute\n   */\n  readonly deploymentConfigName: string;\n\n  /**\n   * @attribute\n   */\n  readonly deploymentConfigArn: string;\n}\n\n/**\n * Minimum number of healthy hosts for a server deployment.\n */\nexport class MinimumHealthyHosts {\n\n  /**\n   * The minimum healhty hosts threshold expressed as an absolute number.\n   */\n  public static count(value: number): MinimumHealthyHosts {\n    return new MinimumHealthyHosts({\n      type: 'HOST_COUNT',\n      value,\n    });\n  }\n\n  /**\n   * The minmum healhty hosts threshold expressed as a percentage of the fleet.\n   */\n  public static percentage(value: number): MinimumHealthyHosts {\n    return new MinimumHealthyHosts({\n      type: 'FLEET_PERCENT',\n      value,\n    });\n  }\n\n  private constructor(private readonly json: CfnDeploymentConfig.MinimumHealthyHostsProperty) { }\n\n  /**\n   * @internal\n   */\n  public get _json() {\n    return this.json;\n  }\n}\n\n/**\n * Construction properties of {@link ServerDeploymentConfig}.\n */\nexport interface ServerDeploymentConfigProps {\n  /**\n   * The physical, human-readable name of the Deployment Configuration.\n   *\n   * @default a name will be auto-generated\n   */\n  readonly deploymentConfigName?: string;\n\n  /**\n   * Minimum number of healthy hosts.\n   */\n  readonly minimumHealthyHosts: MinimumHealthyHosts;\n}\n\n/**\n * A custom Deployment Configuration for an EC2/on-premise Deployment Group.\n *\n * @resource AWS::CodeDeploy::DeploymentConfig\n */\nexport class ServerDeploymentConfig extends cdk.Resource implements IServerDeploymentConfig {\n  public static readonly ONE_AT_A_TIME = deploymentConfig('CodeDeployDefault.OneAtATime');\n  public static readonly HALF_AT_A_TIME = deploymentConfig('CodeDeployDefault.HalfAtATime');\n  public static readonly ALL_AT_ONCE = deploymentConfig('CodeDeployDefault.AllAtOnce');\n\n  /**\n   * Import a custom Deployment Configuration for an EC2/on-premise Deployment Group defined either outside the CDK app,\n   * or in a different region.\n   *\n   * @param scope the parent Construct for this new Construct\n   * @param id the logical ID of this new Construct\n   * @param serverDeploymentConfigName the properties of the referenced custom Deployment Configuration\n   * @returns a Construct representing a reference to an existing custom Deployment Configuration\n   */\n  public static fromServerDeploymentConfigName(\n    scope: Construct,\n    id: string,\n    serverDeploymentConfigName: string): IServerDeploymentConfig {\n\n    ignore(scope);\n    ignore(id);\n    return deploymentConfig(serverDeploymentConfigName);\n  }\n\n  public readonly deploymentConfigName: string;\n  public readonly deploymentConfigArn: string;\n\n  constructor(scope: Construct, id: string, props: ServerDeploymentConfigProps) {\n    super(scope, id, {\n      physicalName: props.deploymentConfigName,\n    });\n\n    const resource = new CfnDeploymentConfig(this, 'Resource', {\n      deploymentConfigName: this.physicalName,\n      minimumHealthyHosts: props.minimumHealthyHosts._json,\n    });\n\n    this.deploymentConfigName = resource.ref;\n    this.deploymentConfigArn = arnForDeploymentConfig(this.deploymentConfigName);\n\n    this.node.addValidation({ validate: () => validateName('Deployment config', this.physicalName) });\n  }\n}\n\nfunction deploymentConfig(name: string): IServerDeploymentConfig {\n  return {\n    deploymentConfigName: name,\n    deploymentConfigArn: arnForDeploymentConfig(name),\n  };\n}\n\nfunction ignore(_x: any) { return; }\n"],
  "mappings": "+PAAA,IAAA,QAAA,eAAA,EAEA,uBAAA,QAAA,yBAAA,EACA,QAAA,QAAA,UAAA,EAwBA,MAAa,mBAAmB,CAsB9B,YAAqC,KAAqD,CAArD,KAAA,KAAA,WAjBvB,OAAM,MAAa,CAC/B,MAAO,IAAI,qBAAoB,CAC7B,KAAM,aACN,MACD,QAMW,YAAW,MAAa,CACpC,MAAO,IAAI,qBAAoB,CAC7B,KAAM,gBACN,MACD,KAQQ,QAAK,CACd,MAAO,MAAK,MA5BhB,QAAA,oBAAA,0IAsDA,MAAa,8BAA+B,KAAI,QAAQ,CA2BtD,YAAY,MAAkB,GAAY,MAAkC,CAC1E,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,qBACrB,wFAED,KAAM,UAAW,GAAI,wBAAA,oBAAoB,KAAM,WAAY,CACzD,qBAAsB,KAAK,aAC3B,oBAAqB,MAAM,oBAAoB,MAChD,EAED,KAAK,qBAAuB,SAAS,IACrC,KAAK,oBAAsB,QAAA,uBAAuB,KAAK,oBAAoB,EAE3E,KAAK,KAAK,cAAc,CAAE,SAAU,IAAM,QAAA,aAAa,oBAAqB,KAAK,YAAY,CAAC,CAAE,QA1BpF,gCACZ,MACA,GACA,2BAAkC,CAElC,MAEO,kBAAiB,0BAA0B,GArBtD,QAAA,uBAAA,mJACyB,uBAAA,cAAgB,iBAAiB,8BAA8B,EAC/D,uBAAA,eAAiB,iBAAiB,+BAA+B,EACjE,uBAAA,YAAc,iBAAiB,6BAA6B,EAyCrF,0BAA0B,KAAY,CACpC,MAAO,CACL,qBAAsB,KACtB,oBAAqB,QAAA,uBAAuB,IAAI,EAEpD,CAEA,gBAAgB,GAAO,CAAY",
  "names": []
}
