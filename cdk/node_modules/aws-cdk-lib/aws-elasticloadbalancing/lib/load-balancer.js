"use strict";var _a,_b;Object.defineProperty(exports,"__esModule",{value:!0}),exports.ListenerPort=exports.LoadBalancer=exports.LoadBalancingProtocol=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),aws_ec2_1=require("../../aws-ec2"),core_1=require("../../core"),elasticloadbalancing_generated_1=require("./elasticloadbalancing.generated");var LoadBalancingProtocol;(function(LoadBalancingProtocol2){LoadBalancingProtocol2.TCP="tcp",LoadBalancingProtocol2.SSL="ssl",LoadBalancingProtocol2.HTTP="http",LoadBalancingProtocol2.HTTPS="https"})(LoadBalancingProtocol=exports.LoadBalancingProtocol||(exports.LoadBalancingProtocol={}));class LoadBalancer extends core_1.Resource{constructor(scope,id,props){var _c;super(scope,id);this.listenerPorts=[],this.listeners=[],this.instancePorts=[],this.targets=[],jsiiDeprecationWarnings.aws_cdk_lib_aws_elasticloadbalancing_LoadBalancerProps(props),this.securityGroup=new aws_ec2_1.SecurityGroup(this,"SecurityGroup",{vpc:props.vpc,allowAllOutbound:!1}),this.connections=new aws_ec2_1.Connections({securityGroups:[this.securityGroup]});const selectedSubnets=loadBalancerSubnets(props);this.elb=new elasticloadbalancing_generated_1.CfnLoadBalancer(this,"Resource",{securityGroups:[this.securityGroup.securityGroupId],subnets:selectedSubnets.subnetIds,listeners:core_1.Lazy.any({produce:()=>this.listeners}),scheme:props.internetFacing?"internet-facing":"internal",healthCheck:props.healthCheck&&healthCheckToJSON(props.healthCheck),crossZone:(_c=props.crossZone)!==null&&_c!==void 0?_c:!0}),props.internetFacing&&this.elb.node.addDependency(selectedSubnets.internetConnectivityEstablished),props.accessLoggingPolicy!==void 0&&(this.elb.accessLoggingPolicy=props.accessLoggingPolicy),ifUndefined(props.listeners,[]).forEach(b=>this.addListener(b)),ifUndefined(props.targets,[]).forEach(t=>this.addTarget(t))}addListener(listener){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_elasticloadbalancing_LoadBalancerListener(listener),listener.sslCertificateArn&&listener.sslCertificateId)throw new Error('"sslCertificateId" is deprecated, please use "sslCertificateArn" only.');const protocol=ifUndefinedLazy(listener.externalProtocol,()=>wellKnownProtocol(listener.externalPort)),instancePort=listener.internalPort||listener.externalPort,sslCertificateArn=listener.sslCertificateArn||listener.sslCertificateId,instanceProtocol=ifUndefined(listener.internalProtocol,ifUndefined(tryWellKnownProtocol(instancePort),isHttpProtocol(protocol)?LoadBalancingProtocol.HTTP:LoadBalancingProtocol.TCP));this.listeners.push({loadBalancerPort:listener.externalPort.toString(),protocol,instancePort:instancePort.toString(),instanceProtocol,sslCertificateId:sslCertificateArn,policyNames:listener.policyNames});const port=new ListenerPort(this.securityGroup,aws_ec2_1.Port.tcp(listener.externalPort));return ifUndefined(listener.allowConnectionsFrom,[aws_ec2_1.Peer.anyIpv4()]).forEach(peer=>{port.connections.allowDefaultPortFrom(peer,`Default rule allow on ${listener.externalPort}`)}),this.newInstancePort(instancePort),this.listenerPorts.push(port),port}addTarget(target){jsiiDeprecationWarnings.aws_cdk_lib_aws_elasticloadbalancing_ILoadBalancerTarget(target),target.attachToClassicLB(this),this.newTarget(target)}get loadBalancerName(){return this.elb.ref}get loadBalancerCanonicalHostedZoneNameId(){return this.elb.attrCanonicalHostedZoneNameId}get loadBalancerCanonicalHostedZoneName(){return this.elb.attrCanonicalHostedZoneName}get loadBalancerDnsName(){return this.elb.attrDnsName}get loadBalancerSourceSecurityGroupGroupName(){return this.elb.attrSourceSecurityGroupGroupName}get loadBalancerSourceSecurityGroupOwnerAlias(){return this.elb.attrSourceSecurityGroupOwnerAlias}newInstancePort(instancePort){this.targets.forEach(t=>this.allowTargetConnection(instancePort,t)),this.instancePorts.push(instancePort)}newTarget(target){this.instancePorts.forEach(p=>this.allowTargetConnection(p,target)),this.targets.push(target)}allowTargetConnection(instancePort,target){this.connections.allowTo(target,aws_ec2_1.Port.tcp(instancePort),`Port ${instancePort} LB to fleet`)}}exports.LoadBalancer=LoadBalancer,_a=JSII_RTTI_SYMBOL_1,LoadBalancer[_a]={fqn:"aws-cdk-lib.aws_elasticloadbalancing.LoadBalancer",version:"2.20.0"};class ListenerPort{constructor(securityGroup,defaultPort){jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_ISecurityGroup(securityGroup),jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_Port(defaultPort),this.connections=new aws_ec2_1.Connections({securityGroups:[securityGroup],defaultPort})}}exports.ListenerPort=ListenerPort,_b=JSII_RTTI_SYMBOL_1,ListenerPort[_b]={fqn:"aws-cdk-lib.aws_elasticloadbalancing.ListenerPort",version:"2.20.0"};function wellKnownProtocol(port){const proto=tryWellKnownProtocol(port);if(!proto)throw new Error(`Please supply protocol to go with port ${port}`);return proto}function tryWellKnownProtocol(port){if(port===80)return LoadBalancingProtocol.HTTP;if(port===443)return LoadBalancingProtocol.HTTPS}function isHttpProtocol(proto){return proto===LoadBalancingProtocol.HTTPS||proto===LoadBalancingProtocol.HTTP}function ifUndefined(x,def){return x!=null?x:def}function ifUndefinedLazy(x,def){return x!=null?x:def()}function healthCheckToJSON(healthCheck){const protocol=ifUndefined(healthCheck.protocol,ifUndefined(tryWellKnownProtocol(healthCheck.port),LoadBalancingProtocol.TCP)),path=protocol===LoadBalancingProtocol.HTTP||protocol===LoadBalancingProtocol.HTTPS?ifUndefined(healthCheck.path,"/"):"",target=`${protocol.toUpperCase()}:${healthCheck.port}${path}`;return{healthyThreshold:ifUndefined(healthCheck.healthyThreshold,2).toString(),interval:(healthCheck.interval||core_1.Duration.seconds(30)).toSeconds().toString(),target,timeout:(healthCheck.timeout||core_1.Duration.seconds(5)).toSeconds().toString(),unhealthyThreshold:ifUndefined(healthCheck.unhealthyThreshold,5).toString()}}function loadBalancerSubnets(props){return props.subnetSelection!==void 0?props.vpc.selectSubnets(props.subnetSelection):props.internetFacing?props.vpc.selectSubnets({subnetType:aws_ec2_1.SubnetType.PUBLIC}):props.vpc.selectSubnets({subnetType:aws_ec2_1.SubnetType.PRIVATE})}
//# sourceMappingURL=load-balancer.js.map
