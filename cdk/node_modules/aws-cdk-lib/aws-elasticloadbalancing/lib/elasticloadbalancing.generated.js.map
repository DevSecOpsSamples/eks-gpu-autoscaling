{
  "version": 3,
  "sources": ["elasticloadbalancing.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-04-07T10:44:29.943Z\",\"fingerprint\":\"jJ2DNwbTjlcfKHe8AK/6i58FhwwutdadbD/bJo3dElo=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n/**\n * Properties for defining a `CfnLoadBalancer`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html\n */\nexport interface CfnLoadBalancerProps {\n\n    /**\n     * The listeners for the load balancer. You can specify at most one listener per port.\n     *\n     * If you update the properties for a listener, AWS CloudFormation deletes the existing listener and creates a new one with the specified properties. While the new listener is being created, clients cannot connect to the load balancer.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-listeners\n     */\n    readonly listeners: Array<CfnLoadBalancer.ListenersProperty | cdk.IResolvable> | cdk.IResolvable;\n\n    /**\n     * Information about where and how access logs are stored for the load balancer.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-accessloggingpolicy\n     */\n    readonly accessLoggingPolicy?: CfnLoadBalancer.AccessLoggingPolicyProperty | cdk.IResolvable;\n\n    /**\n     * Information about a policy for application-controlled session stickiness.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-appcookiestickinesspolicy\n     */\n    readonly appCookieStickinessPolicy?: Array<CfnLoadBalancer.AppCookieStickinessPolicyProperty | cdk.IResolvable> | cdk.IResolvable;\n\n    /**\n     * The Availability Zones for the load balancer. For load balancers in a VPC, specify `Subnets` instead.\n     *\n     * Update requires replacement if you did not previously specify an Availability Zone or if you are removing all Availability Zones. Otherwise, update requires no interruption.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-availabilityzones\n     */\n    readonly availabilityZones?: string[];\n\n    /**\n     * If enabled, the load balancer allows existing requests to complete before the load balancer shifts traffic away from a deregistered or unhealthy instance.\n     *\n     * For more information, see [Configure Connection Draining](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html) in the *Classic Load Balancers Guide* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectiondrainingpolicy\n     */\n    readonly connectionDrainingPolicy?: CfnLoadBalancer.ConnectionDrainingPolicyProperty | cdk.IResolvable;\n\n    /**\n     * If enabled, the load balancer allows the connections to remain idle (no data is sent over the connection) for the specified duration.\n     *\n     * By default, Elastic Load Balancing maintains a 60-second idle connection timeout for both front-end and back-end connections of your load balancer. For more information, see [Configure Idle Connection Timeout](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html) in the *Classic Load Balancers Guide* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectionsettings\n     */\n    readonly connectionSettings?: CfnLoadBalancer.ConnectionSettingsProperty | cdk.IResolvable;\n\n    /**\n     * If enabled, the load balancer routes the request traffic evenly across all instances regardless of the Availability Zones.\n     *\n     * For more information, see [Configure Cross-Zone Load Balancing](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html) in the *Classic Load Balancers Guide* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-crosszone\n     */\n    readonly crossZone?: boolean | cdk.IResolvable;\n\n    /**\n     * The health check settings to use when evaluating the health of your EC2 instances.\n     *\n     * Update requires replacement if you did not previously specify health check settings or if you are removing the health check settings. Otherwise, update requires no interruption.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-healthcheck\n     */\n    readonly healthCheck?: CfnLoadBalancer.HealthCheckProperty | cdk.IResolvable;\n\n    /**\n     * The IDs of the instances for the load balancer.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-instances\n     */\n    readonly instances?: string[];\n\n    /**\n     * Information about a policy for duration-based session stickiness.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-lbcookiestickinesspolicy\n     */\n    readonly lbCookieStickinessPolicy?: Array<CfnLoadBalancer.LBCookieStickinessPolicyProperty | cdk.IResolvable> | cdk.IResolvable;\n\n    /**\n     * The name of the load balancer. This name must be unique within your set of load balancers for the region.\n     *\n     * If you don't specify a name, AWS CloudFormation generates a unique physical ID for the load balancer. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) . If you specify a name, you cannot perform updates that require replacement of this resource, but you can perform other updates. To replace the resource, specify a new name.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-elbname\n     */\n    readonly loadBalancerName?: string;\n\n    /**\n     * The policies defined for your Classic Load Balancer. Specify only back-end server policies.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-policies\n     */\n    readonly policies?: Array<CfnLoadBalancer.PoliciesProperty | cdk.IResolvable> | cdk.IResolvable;\n\n    /**\n     * The type of load balancer. Valid only for load balancers in a VPC.\n     *\n     * If `Scheme` is `internet-facing` , the load balancer has a public DNS name that resolves to a public IP address.\n     *\n     * If `Scheme` is `internal` , the load balancer has a public DNS name that resolves to a private IP address.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-scheme\n     */\n    readonly scheme?: string;\n\n    /**\n     * The security groups for the load balancer. Valid only for load balancers in a VPC.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-securitygroups\n     */\n    readonly securityGroups?: string[];\n\n    /**\n     * The IDs of the subnets for the load balancer. You can specify at most one subnet per Availability Zone.\n     *\n     * Update requires replacement if you did not previously specify a subnet or if you are removing all subnets. Otherwise, update requires no interruption. To update to a different subnet in the current Availability Zone, you must first update to a subnet in a different Availability Zone, then update to the new subnet in the original Availability Zone.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-subnets\n     */\n    readonly subnets?: string[];\n\n    /**\n     * The tags associated with a load balancer.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-elasticloadbalancing-loadbalancer-tags\n     */\n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLoadBalancerProps`\n *\n * @param properties - the TypeScript properties of a `CfnLoadBalancerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessLoggingPolicy', CfnLoadBalancer_AccessLoggingPolicyPropertyValidator)(properties.accessLoggingPolicy));\n    errors.collect(cdk.propertyValidator('appCookieStickinessPolicy', cdk.listValidator(CfnLoadBalancer_AppCookieStickinessPolicyPropertyValidator))(properties.appCookieStickinessPolicy));\n    errors.collect(cdk.propertyValidator('availabilityZones', cdk.listValidator(cdk.validateString))(properties.availabilityZones));\n    errors.collect(cdk.propertyValidator('connectionDrainingPolicy', CfnLoadBalancer_ConnectionDrainingPolicyPropertyValidator)(properties.connectionDrainingPolicy));\n    errors.collect(cdk.propertyValidator('connectionSettings', CfnLoadBalancer_ConnectionSettingsPropertyValidator)(properties.connectionSettings));\n    errors.collect(cdk.propertyValidator('crossZone', cdk.validateBoolean)(properties.crossZone));\n    errors.collect(cdk.propertyValidator('healthCheck', CfnLoadBalancer_HealthCheckPropertyValidator)(properties.healthCheck));\n    errors.collect(cdk.propertyValidator('instances', cdk.listValidator(cdk.validateString))(properties.instances));\n    errors.collect(cdk.propertyValidator('lbCookieStickinessPolicy', cdk.listValidator(CfnLoadBalancer_LBCookieStickinessPolicyPropertyValidator))(properties.lbCookieStickinessPolicy));\n    errors.collect(cdk.propertyValidator('listeners', cdk.requiredValidator)(properties.listeners));\n    errors.collect(cdk.propertyValidator('listeners', cdk.listValidator(CfnLoadBalancer_ListenersPropertyValidator))(properties.listeners));\n    errors.collect(cdk.propertyValidator('loadBalancerName', cdk.validateString)(properties.loadBalancerName));\n    errors.collect(cdk.propertyValidator('policies', cdk.listValidator(CfnLoadBalancer_PoliciesPropertyValidator))(properties.policies));\n    errors.collect(cdk.propertyValidator('scheme', cdk.validateString)(properties.scheme));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnLoadBalancerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer` resource\n *\n * @param properties - the TypeScript properties of a `CfnLoadBalancerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancerPropsValidator(properties).assertSuccess();\n    return {\n        Listeners: cdk.listMapper(cfnLoadBalancerListenersPropertyToCloudFormation)(properties.listeners),\n        AccessLoggingPolicy: cfnLoadBalancerAccessLoggingPolicyPropertyToCloudFormation(properties.accessLoggingPolicy),\n        AppCookieStickinessPolicy: cdk.listMapper(cfnLoadBalancerAppCookieStickinessPolicyPropertyToCloudFormation)(properties.appCookieStickinessPolicy),\n        AvailabilityZones: cdk.listMapper(cdk.stringToCloudFormation)(properties.availabilityZones),\n        ConnectionDrainingPolicy: cfnLoadBalancerConnectionDrainingPolicyPropertyToCloudFormation(properties.connectionDrainingPolicy),\n        ConnectionSettings: cfnLoadBalancerConnectionSettingsPropertyToCloudFormation(properties.connectionSettings),\n        CrossZone: cdk.booleanToCloudFormation(properties.crossZone),\n        HealthCheck: cfnLoadBalancerHealthCheckPropertyToCloudFormation(properties.healthCheck),\n        Instances: cdk.listMapper(cdk.stringToCloudFormation)(properties.instances),\n        LBCookieStickinessPolicy: cdk.listMapper(cfnLoadBalancerLBCookieStickinessPolicyPropertyToCloudFormation)(properties.lbCookieStickinessPolicy),\n        LoadBalancerName: cdk.stringToCloudFormation(properties.loadBalancerName),\n        Policies: cdk.listMapper(cfnLoadBalancerPoliciesPropertyToCloudFormation)(properties.policies),\n        Scheme: cdk.stringToCloudFormation(properties.scheme),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancerProps>();\n    ret.addPropertyResult('listeners', 'Listeners', cfn_parse.FromCloudFormation.getArray(CfnLoadBalancerListenersPropertyFromCloudFormation)(properties.Listeners));\n    ret.addPropertyResult('accessLoggingPolicy', 'AccessLoggingPolicy', properties.AccessLoggingPolicy != null ? CfnLoadBalancerAccessLoggingPolicyPropertyFromCloudFormation(properties.AccessLoggingPolicy) : undefined);\n    ret.addPropertyResult('appCookieStickinessPolicy', 'AppCookieStickinessPolicy', properties.AppCookieStickinessPolicy != null ? cfn_parse.FromCloudFormation.getArray(CfnLoadBalancerAppCookieStickinessPolicyPropertyFromCloudFormation)(properties.AppCookieStickinessPolicy) : undefined);\n    ret.addPropertyResult('availabilityZones', 'AvailabilityZones', properties.AvailabilityZones != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AvailabilityZones) : undefined);\n    ret.addPropertyResult('connectionDrainingPolicy', 'ConnectionDrainingPolicy', properties.ConnectionDrainingPolicy != null ? CfnLoadBalancerConnectionDrainingPolicyPropertyFromCloudFormation(properties.ConnectionDrainingPolicy) : undefined);\n    ret.addPropertyResult('connectionSettings', 'ConnectionSettings', properties.ConnectionSettings != null ? CfnLoadBalancerConnectionSettingsPropertyFromCloudFormation(properties.ConnectionSettings) : undefined);\n    ret.addPropertyResult('crossZone', 'CrossZone', properties.CrossZone != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CrossZone) : undefined);\n    ret.addPropertyResult('healthCheck', 'HealthCheck', properties.HealthCheck != null ? CfnLoadBalancerHealthCheckPropertyFromCloudFormation(properties.HealthCheck) : undefined);\n    ret.addPropertyResult('instances', 'Instances', properties.Instances != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Instances) : undefined);\n    ret.addPropertyResult('lbCookieStickinessPolicy', 'LBCookieStickinessPolicy', properties.LBCookieStickinessPolicy != null ? cfn_parse.FromCloudFormation.getArray(CfnLoadBalancerLBCookieStickinessPolicyPropertyFromCloudFormation)(properties.LBCookieStickinessPolicy) : undefined);\n    ret.addPropertyResult('loadBalancerName', 'LoadBalancerName', properties.LoadBalancerName != null ? cfn_parse.FromCloudFormation.getString(properties.LoadBalancerName) : undefined);\n    ret.addPropertyResult('policies', 'Policies', properties.Policies != null ? cfn_parse.FromCloudFormation.getArray(CfnLoadBalancerPoliciesPropertyFromCloudFormation)(properties.Policies) : undefined);\n    ret.addPropertyResult('scheme', 'Scheme', properties.Scheme != null ? cfn_parse.FromCloudFormation.getString(properties.Scheme) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('subnets', 'Subnets', properties.Subnets != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Subnets) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::ElasticLoadBalancing::LoadBalancer`\n *\n * Specifies a Classic Load Balancer.\n *\n * You can specify the `AvailabilityZones` or `Subnets` property, but not both.\n *\n * If this resource has a public IP address and is also in a VPC that is defined in the same template, you must use the [DependsOn attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) to declare a dependency on the VPC-gateway attachment.\n *\n * @cloudformationResource AWS::ElasticLoadBalancing::LoadBalancer\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html\n */\nexport class CfnLoadBalancer extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ElasticLoadBalancing::LoadBalancer\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLoadBalancer {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLoadBalancerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLoadBalancer(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * The name of the Route 53 hosted zone that is associated with the load balancer. Internal-facing load balancers don't use this value, use `DNSName` instead.\n     * @cloudformationAttribute CanonicalHostedZoneName\n     */\n    public readonly attrCanonicalHostedZoneName: string;\n\n    /**\n     * The ID of the Route 53 hosted zone name that is associated with the load balancer.\n     * @cloudformationAttribute CanonicalHostedZoneNameID\n     */\n    public readonly attrCanonicalHostedZoneNameId: string;\n\n    /**\n     * The DNS name for the load balancer.\n     * @cloudformationAttribute DNSName\n     */\n    public readonly attrDnsName: string;\n\n    /**\n     * The name of the security group that you can use as part of your inbound rules for your load balancer's back-end instances.\n     * @cloudformationAttribute SourceSecurityGroup.GroupName\n     */\n    public readonly attrSourceSecurityGroupGroupName: string;\n\n    /**\n     * The owner of the source security group.\n     * @cloudformationAttribute SourceSecurityGroup.OwnerAlias\n     */\n    public readonly attrSourceSecurityGroupOwnerAlias: string;\n\n    /**\n     * The listeners for the load balancer. You can specify at most one listener per port.\n     *\n     * If you update the properties for a listener, AWS CloudFormation deletes the existing listener and creates a new one with the specified properties. While the new listener is being created, clients cannot connect to the load balancer.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-listeners\n     */\n    public listeners: Array<CfnLoadBalancer.ListenersProperty | cdk.IResolvable> | cdk.IResolvable;\n\n    /**\n     * Information about where and how access logs are stored for the load balancer.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-accessloggingpolicy\n     */\n    public accessLoggingPolicy: CfnLoadBalancer.AccessLoggingPolicyProperty | cdk.IResolvable | undefined;\n\n    /**\n     * Information about a policy for application-controlled session stickiness.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-appcookiestickinesspolicy\n     */\n    public appCookieStickinessPolicy: Array<CfnLoadBalancer.AppCookieStickinessPolicyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n    /**\n     * The Availability Zones for the load balancer. For load balancers in a VPC, specify `Subnets` instead.\n     *\n     * Update requires replacement if you did not previously specify an Availability Zone or if you are removing all Availability Zones. Otherwise, update requires no interruption.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-availabilityzones\n     */\n    public availabilityZones: string[] | undefined;\n\n    /**\n     * If enabled, the load balancer allows existing requests to complete before the load balancer shifts traffic away from a deregistered or unhealthy instance.\n     *\n     * For more information, see [Configure Connection Draining](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html) in the *Classic Load Balancers Guide* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectiondrainingpolicy\n     */\n    public connectionDrainingPolicy: CfnLoadBalancer.ConnectionDrainingPolicyProperty | cdk.IResolvable | undefined;\n\n    /**\n     * If enabled, the load balancer allows the connections to remain idle (no data is sent over the connection) for the specified duration.\n     *\n     * By default, Elastic Load Balancing maintains a 60-second idle connection timeout for both front-end and back-end connections of your load balancer. For more information, see [Configure Idle Connection Timeout](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html) in the *Classic Load Balancers Guide* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectionsettings\n     */\n    public connectionSettings: CfnLoadBalancer.ConnectionSettingsProperty | cdk.IResolvable | undefined;\n\n    /**\n     * If enabled, the load balancer routes the request traffic evenly across all instances regardless of the Availability Zones.\n     *\n     * For more information, see [Configure Cross-Zone Load Balancing](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html) in the *Classic Load Balancers Guide* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-crosszone\n     */\n    public crossZone: boolean | cdk.IResolvable | undefined;\n\n    /**\n     * The health check settings to use when evaluating the health of your EC2 instances.\n     *\n     * Update requires replacement if you did not previously specify health check settings or if you are removing the health check settings. Otherwise, update requires no interruption.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-healthcheck\n     */\n    public healthCheck: CfnLoadBalancer.HealthCheckProperty | cdk.IResolvable | undefined;\n\n    /**\n     * The IDs of the instances for the load balancer.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-instances\n     */\n    public instances: string[] | undefined;\n\n    /**\n     * Information about a policy for duration-based session stickiness.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-lbcookiestickinesspolicy\n     */\n    public lbCookieStickinessPolicy: Array<CfnLoadBalancer.LBCookieStickinessPolicyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n    /**\n     * The name of the load balancer. This name must be unique within your set of load balancers for the region.\n     *\n     * If you don't specify a name, AWS CloudFormation generates a unique physical ID for the load balancer. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) . If you specify a name, you cannot perform updates that require replacement of this resource, but you can perform other updates. To replace the resource, specify a new name.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-elbname\n     */\n    public loadBalancerName: string | undefined;\n\n    /**\n     * The policies defined for your Classic Load Balancer. Specify only back-end server policies.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-policies\n     */\n    public policies: Array<CfnLoadBalancer.PoliciesProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n    /**\n     * The type of load balancer. Valid only for load balancers in a VPC.\n     *\n     * If `Scheme` is `internet-facing` , the load balancer has a public DNS name that resolves to a public IP address.\n     *\n     * If `Scheme` is `internal` , the load balancer has a public DNS name that resolves to a private IP address.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-scheme\n     */\n    public scheme: string | undefined;\n\n    /**\n     * The security groups for the load balancer. Valid only for load balancers in a VPC.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-securitygroups\n     */\n    public securityGroups: string[] | undefined;\n\n    /**\n     * The IDs of the subnets for the load balancer. You can specify at most one subnet per Availability Zone.\n     *\n     * Update requires replacement if you did not previously specify a subnet or if you are removing all subnets. Otherwise, update requires no interruption. To update to a different subnet in the current Availability Zone, you must first update to a subnet in a different Availability Zone, then update to the new subnet in the original Availability Zone.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-subnets\n     */\n    public subnets: string[] | undefined;\n\n    /**\n     * The tags associated with a load balancer.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-elasticloadbalancing-loadbalancer-tags\n     */\n    public readonly tags: cdk.TagManager;\n\n    /**\n     * Create a new `AWS::ElasticLoadBalancing::LoadBalancer`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnLoadBalancerProps) {\n        super(scope, id, { type: CfnLoadBalancer.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'listeners', this);\n        this.attrCanonicalHostedZoneName = cdk.Token.asString(this.getAtt('CanonicalHostedZoneName'));\n        this.attrCanonicalHostedZoneNameId = cdk.Token.asString(this.getAtt('CanonicalHostedZoneNameID'));\n        this.attrDnsName = cdk.Token.asString(this.getAtt('DNSName'));\n        this.attrSourceSecurityGroupGroupName = cdk.Token.asString(this.getAtt('SourceSecurityGroup.GroupName'));\n        this.attrSourceSecurityGroupOwnerAlias = cdk.Token.asString(this.getAtt('SourceSecurityGroup.OwnerAlias'));\n\n        this.listeners = props.listeners;\n        this.accessLoggingPolicy = props.accessLoggingPolicy;\n        this.appCookieStickinessPolicy = props.appCookieStickinessPolicy;\n        this.availabilityZones = props.availabilityZones;\n        this.connectionDrainingPolicy = props.connectionDrainingPolicy;\n        this.connectionSettings = props.connectionSettings;\n        this.crossZone = props.crossZone;\n        this.healthCheck = props.healthCheck;\n        this.instances = props.instances;\n        this.lbCookieStickinessPolicy = props.lbCookieStickinessPolicy;\n        this.loadBalancerName = props.loadBalancerName;\n        this.policies = props.policies;\n        this.scheme = props.scheme;\n        this.securityGroups = props.securityGroups;\n        this.subnets = props.subnets;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::ElasticLoadBalancing::LoadBalancer\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLoadBalancer.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            listeners: this.listeners,\n            accessLoggingPolicy: this.accessLoggingPolicy,\n            appCookieStickinessPolicy: this.appCookieStickinessPolicy,\n            availabilityZones: this.availabilityZones,\n            connectionDrainingPolicy: this.connectionDrainingPolicy,\n            connectionSettings: this.connectionSettings,\n            crossZone: this.crossZone,\n            healthCheck: this.healthCheck,\n            instances: this.instances,\n            lbCookieStickinessPolicy: this.lbCookieStickinessPolicy,\n            loadBalancerName: this.loadBalancerName,\n            policies: this.policies,\n            scheme: this.scheme,\n            securityGroups: this.securityGroups,\n            subnets: this.subnets,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLoadBalancerPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLoadBalancer {\n    /**\n     * Specifies where and how access logs are stored for your Classic Load Balancer.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html\n     */\n    export interface AccessLoggingPolicyProperty {\n        /**\n         * The interval for publishing the access logs. You can specify an interval of either 5 minutes or 60 minutes.\n         *\n         * Default: 60 minutes\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-emitinterval\n         */\n        readonly emitInterval?: number;\n        /**\n         * Specifies whether access logs are enabled for the load balancer.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-enabled\n         */\n        readonly enabled: boolean | cdk.IResolvable;\n        /**\n         * The name of the Amazon S3 bucket where the access logs are stored.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketname\n         */\n        readonly s3BucketName: string;\n        /**\n         * The logical hierarchy you created for your Amazon S3 bucket, for example `my-bucket-prefix/prod` . If the prefix is not provided, the log is placed at the root level of the bucket.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketprefix\n         */\n        readonly s3BucketPrefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessLoggingPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `AccessLoggingPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancer_AccessLoggingPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('emitInterval', cdk.validateNumber)(properties.emitInterval));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.requiredValidator)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.validateString)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('s3BucketPrefix', cdk.validateString)(properties.s3BucketPrefix));\n    return errors.wrap('supplied properties not correct for \"AccessLoggingPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.AccessLoggingPolicy` resource\n *\n * @param properties - the TypeScript properties of a `AccessLoggingPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.AccessLoggingPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerAccessLoggingPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancer_AccessLoggingPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        EmitInterval: cdk.numberToCloudFormation(properties.emitInterval),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        S3BucketName: cdk.stringToCloudFormation(properties.s3BucketName),\n        S3BucketPrefix: cdk.stringToCloudFormation(properties.s3BucketPrefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerAccessLoggingPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancer.AccessLoggingPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancer.AccessLoggingPolicyProperty>();\n    ret.addPropertyResult('emitInterval', 'EmitInterval', properties.EmitInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.EmitInterval) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addPropertyResult('s3BucketName', 'S3BucketName', cfn_parse.FromCloudFormation.getString(properties.S3BucketName));\n    ret.addPropertyResult('s3BucketPrefix', 'S3BucketPrefix', properties.S3BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.S3BucketPrefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLoadBalancer {\n    /**\n     * Specifies a policy for application-controlled session stickiness for your Classic Load Balancer.\n     *\n     * To associate a policy with a listener, use the [PolicyNames](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames) property for the listener.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html\n     */\n    export interface AppCookieStickinessPolicyProperty {\n        /**\n         * The name of the application cookie used for stickiness.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-cookiename\n         */\n        readonly cookieName: string;\n        /**\n         * The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-policyname\n         */\n        readonly policyName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AppCookieStickinessPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `AppCookieStickinessPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancer_AppCookieStickinessPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cookieName', cdk.requiredValidator)(properties.cookieName));\n    errors.collect(cdk.propertyValidator('cookieName', cdk.validateString)(properties.cookieName));\n    errors.collect(cdk.propertyValidator('policyName', cdk.requiredValidator)(properties.policyName));\n    errors.collect(cdk.propertyValidator('policyName', cdk.validateString)(properties.policyName));\n    return errors.wrap('supplied properties not correct for \"AppCookieStickinessPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.AppCookieStickinessPolicy` resource\n *\n * @param properties - the TypeScript properties of a `AppCookieStickinessPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.AppCookieStickinessPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerAppCookieStickinessPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancer_AppCookieStickinessPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        CookieName: cdk.stringToCloudFormation(properties.cookieName),\n        PolicyName: cdk.stringToCloudFormation(properties.policyName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerAppCookieStickinessPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancer.AppCookieStickinessPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancer.AppCookieStickinessPolicyProperty>();\n    ret.addPropertyResult('cookieName', 'CookieName', cfn_parse.FromCloudFormation.getString(properties.CookieName));\n    ret.addPropertyResult('policyName', 'PolicyName', cfn_parse.FromCloudFormation.getString(properties.PolicyName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLoadBalancer {\n    /**\n     * Specifies the connection draining settings for your Classic Load Balancer.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html\n     */\n    export interface ConnectionDrainingPolicyProperty {\n        /**\n         * Specifies whether connection draining is enabled for the load balancer.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-enabled\n         */\n        readonly enabled: boolean | cdk.IResolvable;\n        /**\n         * The maximum time, in seconds, to keep the existing connections open before deregistering the instances.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-timeout\n         */\n        readonly timeout?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectionDrainingPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectionDrainingPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancer_ConnectionDrainingPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('timeout', cdk.validateNumber)(properties.timeout));\n    return errors.wrap('supplied properties not correct for \"ConnectionDrainingPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.ConnectionDrainingPolicy` resource\n *\n * @param properties - the TypeScript properties of a `ConnectionDrainingPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.ConnectionDrainingPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerConnectionDrainingPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancer_ConnectionDrainingPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        Timeout: cdk.numberToCloudFormation(properties.timeout),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerConnectionDrainingPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancer.ConnectionDrainingPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancer.ConnectionDrainingPolicyProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLoadBalancer {\n    /**\n     * Specifies the idle timeout value for your Classic Load Balancer.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html\n     */\n    export interface ConnectionSettingsProperty {\n        /**\n         * The time, in seconds, that the connection is allowed to be idle (no data has been sent over the connection) before it is closed by the load balancer.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html#cfn-elb-connectionsettings-idletimeout\n         */\n        readonly idleTimeout: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectionSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectionSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancer_ConnectionSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('idleTimeout', cdk.requiredValidator)(properties.idleTimeout));\n    errors.collect(cdk.propertyValidator('idleTimeout', cdk.validateNumber)(properties.idleTimeout));\n    return errors.wrap('supplied properties not correct for \"ConnectionSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.ConnectionSettings` resource\n *\n * @param properties - the TypeScript properties of a `ConnectionSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.ConnectionSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerConnectionSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancer_ConnectionSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        IdleTimeout: cdk.numberToCloudFormation(properties.idleTimeout),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerConnectionSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancer.ConnectionSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancer.ConnectionSettingsProperty>();\n    ret.addPropertyResult('idleTimeout', 'IdleTimeout', cfn_parse.FromCloudFormation.getNumber(properties.IdleTimeout));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLoadBalancer {\n    /**\n     * Specifies health check settings for your Classic Load Balancer.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html\n     */\n    export interface HealthCheckProperty {\n        /**\n         * The number of consecutive health checks successes required before moving the instance to the `Healthy` state.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-healthythreshold\n         */\n        readonly healthyThreshold: string;\n        /**\n         * The approximate interval, in seconds, between health checks of an individual instance.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-interval\n         */\n        readonly interval: string;\n        /**\n         * The instance being checked. The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535.\n         *\n         * TCP is the default, specified as a TCP: port pair, for example \"TCP:5000\". In this case, a health check simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy.\n         *\n         * SSL is also specified as SSL: port pair, for example, SSL:5000.\n         *\n         * For HTTP/HTTPS, you must include a ping path in the string. HTTP is specified as a HTTP:port;/;PathToPing; grouping, for example \"HTTP:80/weather/us/wa/seattle\". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than \"200 OK\" within the timeout period is considered unhealthy.\n         *\n         * The total length of the HTTP ping target must be 1024 16-bit Unicode characters or less.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-target\n         */\n        readonly target: string;\n        /**\n         * The amount of time, in seconds, during which no response means a failed health check.\n         *\n         * This value must be less than the `Interval` value.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-timeout\n         */\n        readonly timeout: string;\n        /**\n         * The number of consecutive health check failures required before moving the instance to the `Unhealthy` state.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-unhealthythreshold\n         */\n        readonly unhealthyThreshold: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HealthCheckProperty`\n *\n * @param properties - the TypeScript properties of a `HealthCheckProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancer_HealthCheckPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('healthyThreshold', cdk.requiredValidator)(properties.healthyThreshold));\n    errors.collect(cdk.propertyValidator('healthyThreshold', cdk.validateString)(properties.healthyThreshold));\n    errors.collect(cdk.propertyValidator('interval', cdk.requiredValidator)(properties.interval));\n    errors.collect(cdk.propertyValidator('interval', cdk.validateString)(properties.interval));\n    errors.collect(cdk.propertyValidator('target', cdk.requiredValidator)(properties.target));\n    errors.collect(cdk.propertyValidator('target', cdk.validateString)(properties.target));\n    errors.collect(cdk.propertyValidator('timeout', cdk.requiredValidator)(properties.timeout));\n    errors.collect(cdk.propertyValidator('timeout', cdk.validateString)(properties.timeout));\n    errors.collect(cdk.propertyValidator('unhealthyThreshold', cdk.requiredValidator)(properties.unhealthyThreshold));\n    errors.collect(cdk.propertyValidator('unhealthyThreshold', cdk.validateString)(properties.unhealthyThreshold));\n    return errors.wrap('supplied properties not correct for \"HealthCheckProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.HealthCheck` resource\n *\n * @param properties - the TypeScript properties of a `HealthCheckProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.HealthCheck` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerHealthCheckPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancer_HealthCheckPropertyValidator(properties).assertSuccess();\n    return {\n        HealthyThreshold: cdk.stringToCloudFormation(properties.healthyThreshold),\n        Interval: cdk.stringToCloudFormation(properties.interval),\n        Target: cdk.stringToCloudFormation(properties.target),\n        Timeout: cdk.stringToCloudFormation(properties.timeout),\n        UnhealthyThreshold: cdk.stringToCloudFormation(properties.unhealthyThreshold),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerHealthCheckPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancer.HealthCheckProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancer.HealthCheckProperty>();\n    ret.addPropertyResult('healthyThreshold', 'HealthyThreshold', cfn_parse.FromCloudFormation.getString(properties.HealthyThreshold));\n    ret.addPropertyResult('interval', 'Interval', cfn_parse.FromCloudFormation.getString(properties.Interval));\n    ret.addPropertyResult('target', 'Target', cfn_parse.FromCloudFormation.getString(properties.Target));\n    ret.addPropertyResult('timeout', 'Timeout', cfn_parse.FromCloudFormation.getString(properties.Timeout));\n    ret.addPropertyResult('unhealthyThreshold', 'UnhealthyThreshold', cfn_parse.FromCloudFormation.getString(properties.UnhealthyThreshold));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLoadBalancer {\n    /**\n     * Specifies a policy for duration-based session stickiness for your Classic Load Balancer.\n     *\n     * To associate a policy with a listener, use the [PolicyNames](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames) property for the listener.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html\n     */\n    export interface LBCookieStickinessPolicyProperty {\n        /**\n         * The time period, in seconds, after which the cookie should be considered stale. If this parameter is not specified, the stickiness session lasts for the duration of the browser session.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-cookieexpirationperiod\n         */\n        readonly cookieExpirationPeriod?: string;\n        /**\n         * The name of the policy. This name must be unique within the set of policies for this load balancer.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-policyname\n         */\n        readonly policyName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LBCookieStickinessPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `LBCookieStickinessPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancer_LBCookieStickinessPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cookieExpirationPeriod', cdk.validateString)(properties.cookieExpirationPeriod));\n    errors.collect(cdk.propertyValidator('policyName', cdk.validateString)(properties.policyName));\n    return errors.wrap('supplied properties not correct for \"LBCookieStickinessPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.LBCookieStickinessPolicy` resource\n *\n * @param properties - the TypeScript properties of a `LBCookieStickinessPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.LBCookieStickinessPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerLBCookieStickinessPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancer_LBCookieStickinessPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        CookieExpirationPeriod: cdk.stringToCloudFormation(properties.cookieExpirationPeriod),\n        PolicyName: cdk.stringToCloudFormation(properties.policyName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerLBCookieStickinessPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancer.LBCookieStickinessPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancer.LBCookieStickinessPolicyProperty>();\n    ret.addPropertyResult('cookieExpirationPeriod', 'CookieExpirationPeriod', properties.CookieExpirationPeriod != null ? cfn_parse.FromCloudFormation.getString(properties.CookieExpirationPeriod) : undefined);\n    ret.addPropertyResult('policyName', 'PolicyName', properties.PolicyName != null ? cfn_parse.FromCloudFormation.getString(properties.PolicyName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLoadBalancer {\n    /**\n     * Specifies a listener for your Classic Load Balancer.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html\n     */\n    export interface ListenersProperty {\n        /**\n         * The port on which the instance is listening.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceport\n         */\n        readonly instancePort: string;\n        /**\n         * The protocol to use for routing traffic to instances: HTTP, HTTPS, TCP, or SSL.\n         *\n         * If the front-end protocol is TCP or SSL, the back-end protocol must be TCP or SSL. If the front-end protocol is HTTP or HTTPS, the back-end protocol must be HTTP or HTTPS.\n         *\n         * If there is another listener with the same `InstancePort` whose `InstanceProtocol` is secure, (HTTPS or SSL), the listener's `InstanceProtocol` must also be secure.\n         *\n         * If there is another listener with the same `InstancePort` whose `InstanceProtocol` is HTTP or TCP, the listener's `InstanceProtocol` must be HTTP or TCP.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceprotocol\n         */\n        readonly instanceProtocol?: string;\n        /**\n         * The port on which the load balancer is listening. On EC2-VPC, you can specify any port from the range 1-65535. On EC2-Classic, you can specify any port from the following list: 25, 80, 443, 465, 587, 1024-65535.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-loadbalancerport\n         */\n        readonly loadBalancerPort: string;\n        /**\n         * The names of the policies to associate with the listener.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames\n         */\n        readonly policyNames?: string[];\n        /**\n         * The load balancer transport protocol to use for routing: HTTP, HTTPS, TCP, or SSL.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-protocol\n         */\n        readonly protocol: string;\n        /**\n         * The Amazon Resource Name (ARN) of the server certificate.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-sslcertificateid\n         */\n        readonly sslCertificateId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ListenersProperty`\n *\n * @param properties - the TypeScript properties of a `ListenersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancer_ListenersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instancePort', cdk.requiredValidator)(properties.instancePort));\n    errors.collect(cdk.propertyValidator('instancePort', cdk.validateString)(properties.instancePort));\n    errors.collect(cdk.propertyValidator('instanceProtocol', cdk.validateString)(properties.instanceProtocol));\n    errors.collect(cdk.propertyValidator('loadBalancerPort', cdk.requiredValidator)(properties.loadBalancerPort));\n    errors.collect(cdk.propertyValidator('loadBalancerPort', cdk.validateString)(properties.loadBalancerPort));\n    errors.collect(cdk.propertyValidator('policyNames', cdk.listValidator(cdk.validateString))(properties.policyNames));\n    errors.collect(cdk.propertyValidator('protocol', cdk.requiredValidator)(properties.protocol));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('sslCertificateId', cdk.validateString)(properties.sslCertificateId));\n    return errors.wrap('supplied properties not correct for \"ListenersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.Listeners` resource\n *\n * @param properties - the TypeScript properties of a `ListenersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.Listeners` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerListenersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancer_ListenersPropertyValidator(properties).assertSuccess();\n    return {\n        InstancePort: cdk.stringToCloudFormation(properties.instancePort),\n        InstanceProtocol: cdk.stringToCloudFormation(properties.instanceProtocol),\n        LoadBalancerPort: cdk.stringToCloudFormation(properties.loadBalancerPort),\n        PolicyNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.policyNames),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        SSLCertificateId: cdk.stringToCloudFormation(properties.sslCertificateId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerListenersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancer.ListenersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancer.ListenersProperty>();\n    ret.addPropertyResult('instancePort', 'InstancePort', cfn_parse.FromCloudFormation.getString(properties.InstancePort));\n    ret.addPropertyResult('instanceProtocol', 'InstanceProtocol', properties.InstanceProtocol != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceProtocol) : undefined);\n    ret.addPropertyResult('loadBalancerPort', 'LoadBalancerPort', cfn_parse.FromCloudFormation.getString(properties.LoadBalancerPort));\n    ret.addPropertyResult('policyNames', 'PolicyNames', properties.PolicyNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PolicyNames) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', cfn_parse.FromCloudFormation.getString(properties.Protocol));\n    ret.addPropertyResult('sslCertificateId', 'SSLCertificateId', properties.SSLCertificateId != null ? cfn_parse.FromCloudFormation.getString(properties.SSLCertificateId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLoadBalancer {\n    /**\n     * Specifies policies for your Classic Load Balancer.\n     *\n     * To associate policies with a listener, use the [PolicyNames](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames) property for the listener.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html\n     */\n    export interface PoliciesProperty {\n        /**\n         * The policy attributes.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-attributes\n         */\n        readonly attributes: Array<any | cdk.IResolvable> | cdk.IResolvable;\n        /**\n         * The instance ports for the policy. Required only for some policy types.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-instanceports\n         */\n        readonly instancePorts?: string[];\n        /**\n         * The load balancer ports for the policy. Required only for some policy types.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-loadbalancerports\n         */\n        readonly loadBalancerPorts?: string[];\n        /**\n         * The name of the policy.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policyname\n         */\n        readonly policyName: string;\n        /**\n         * The name of the policy type.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policytype\n         */\n        readonly policyType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PoliciesProperty`\n *\n * @param properties - the TypeScript properties of a `PoliciesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancer_PoliciesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attributes', cdk.requiredValidator)(properties.attributes));\n    errors.collect(cdk.propertyValidator('attributes', cdk.listValidator(cdk.validateObject))(properties.attributes));\n    errors.collect(cdk.propertyValidator('instancePorts', cdk.listValidator(cdk.validateString))(properties.instancePorts));\n    errors.collect(cdk.propertyValidator('loadBalancerPorts', cdk.listValidator(cdk.validateString))(properties.loadBalancerPorts));\n    errors.collect(cdk.propertyValidator('policyName', cdk.requiredValidator)(properties.policyName));\n    errors.collect(cdk.propertyValidator('policyName', cdk.validateString)(properties.policyName));\n    errors.collect(cdk.propertyValidator('policyType', cdk.requiredValidator)(properties.policyType));\n    errors.collect(cdk.propertyValidator('policyType', cdk.validateString)(properties.policyType));\n    return errors.wrap('supplied properties not correct for \"PoliciesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.Policies` resource\n *\n * @param properties - the TypeScript properties of a `PoliciesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ElasticLoadBalancing::LoadBalancer.Policies` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerPoliciesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancer_PoliciesPropertyValidator(properties).assertSuccess();\n    return {\n        Attributes: cdk.listMapper(cdk.objectToCloudFormation)(properties.attributes),\n        InstancePorts: cdk.listMapper(cdk.stringToCloudFormation)(properties.instancePorts),\n        LoadBalancerPorts: cdk.listMapper(cdk.stringToCloudFormation)(properties.loadBalancerPorts),\n        PolicyName: cdk.stringToCloudFormation(properties.policyName),\n        PolicyType: cdk.stringToCloudFormation(properties.policyType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerPoliciesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancer.PoliciesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancer.PoliciesProperty>();\n    ret.addPropertyResult('attributes', 'Attributes', cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getAny)(properties.Attributes));\n    ret.addPropertyResult('instancePorts', 'InstancePorts', properties.InstancePorts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InstancePorts) : undefined);\n    ret.addPropertyResult('loadBalancerPorts', 'LoadBalancerPorts', properties.LoadBalancerPorts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LoadBalancerPorts) : undefined);\n    ret.addPropertyResult('policyName', 'PolicyName', cfn_parse.FromCloudFormation.getString(properties.PolicyName));\n    ret.addPropertyResult('policyType', 'PolicyType', cfn_parse.FromCloudFormation.getString(properties.PolicyType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
