{
  "version": 3,
  "sources": ["elasticloadbalancing-canned-metrics.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nexport class ELBMetrics {\n  public static backendConnectionErrorsSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static backendConnectionErrorsSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static backendConnectionErrorsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'BackendConnectionErrors',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static desyncMitigationModeNonCompliantRequestCountSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static desyncMitigationModeNonCompliantRequestCountSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static desyncMitigationModeNonCompliantRequestCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'DesyncMitigationMode_NonCompliant_Request_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeBackend2XxSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static httpCodeBackend2XxSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static httpCodeBackend2XxSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'HTTPCode_Backend_2XX',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeBackend3XxSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static httpCodeBackend3XxSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static httpCodeBackend3XxSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'HTTPCode_Backend_3XX',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeBackend4XxSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static httpCodeBackend4XxSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static httpCodeBackend4XxSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'HTTPCode_Backend_4XX',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeBackend5XxSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static httpCodeBackend5XxSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static httpCodeBackend5XxSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'HTTPCode_Backend_5XX',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeElb4XxSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static httpCodeElb4XxSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static httpCodeElb4XxSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'HTTPCode_ELB_4XX',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeElb5XxSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static httpCodeElb5XxSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static httpCodeElb5XxSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'HTTPCode_ELB_5XX',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static healthyHostCountAverage(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static healthyHostCountAverage(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static healthyHostCountAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'HealthyHostCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static latencyAverage(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static latencyAverage(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static latencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'Latency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static requestCountSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static requestCountSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static requestCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'RequestCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static spilloverCountSum(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static spilloverCountSum(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static spilloverCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'SpilloverCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static surgeQueueLengthAverage(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static surgeQueueLengthAverage(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static surgeQueueLengthAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'SurgeQueueLength',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static unHealthyHostCountAverage(dimensions: { LoadBalancerName: string }): MetricWithDims<{ LoadBalancerName: string }>;\n  public static unHealthyHostCountAverage(dimensions: { AvailabilityZone: string, LoadBalancerName: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancerName: string }>;\n  public static unHealthyHostCountAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ELB',\n      metricName: 'UnHealthyHostCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n}\ntype MetricWithDims<D> = { namespace: string, metricName: string, statistic: string, dimensionsMap: D };\n"],
  "mappings": "8FAIA,MAAa,UAAU,OAGP,4BAA2B,WAAe,CACtD,MAAO,CACL,UAAW,UACX,WAAY,0BACZ,cAAe,WACf,UAAW,aAKD,iDAAgD,WAAe,CAC3E,MAAO,CACL,UAAW,UACX,WAAY,kDACZ,cAAe,WACf,UAAW,aAKD,uBAAsB,WAAe,CACjD,MAAO,CACL,UAAW,UACX,WAAY,uBACZ,cAAe,WACf,UAAW,aAKD,uBAAsB,WAAe,CACjD,MAAO,CACL,UAAW,UACX,WAAY,uBACZ,cAAe,WACf,UAAW,aAKD,uBAAsB,WAAe,CACjD,MAAO,CACL,UAAW,UACX,WAAY,uBACZ,cAAe,WACf,UAAW,aAKD,uBAAsB,WAAe,CACjD,MAAO,CACL,UAAW,UACX,WAAY,uBACZ,cAAe,WACf,UAAW,aAKD,mBAAkB,WAAe,CAC7C,MAAO,CACL,UAAW,UACX,WAAY,mBACZ,cAAe,WACf,UAAW,aAKD,mBAAkB,WAAe,CAC7C,MAAO,CACL,UAAW,UACX,WAAY,mBACZ,cAAe,WACf,UAAW,aAKD,yBAAwB,WAAe,CACnD,MAAO,CACL,UAAW,UACX,WAAY,mBACZ,cAAe,WACf,UAAW,iBAKD,gBAAe,WAAe,CAC1C,MAAO,CACL,UAAW,UACX,WAAY,UACZ,cAAe,WACf,UAAW,iBAKD,iBAAgB,WAAe,CAC3C,MAAO,CACL,UAAW,UACX,WAAY,eACZ,cAAe,WACf,UAAW,aAKD,mBAAkB,WAAe,CAC7C,MAAO,CACL,UAAW,UACX,WAAY,iBACZ,cAAe,WACf,UAAW,aAKD,yBAAwB,WAAe,CACnD,MAAO,CACL,UAAW,UACX,WAAY,mBACZ,cAAe,WACf,UAAW,iBAKD,2BAA0B,WAAe,CACrD,MAAO,CACL,UAAW,UACX,WAAY,qBACZ,cAAe,WACf,UAAW,YA1IjB,QAAA,WAAA",
  "names": []
}
