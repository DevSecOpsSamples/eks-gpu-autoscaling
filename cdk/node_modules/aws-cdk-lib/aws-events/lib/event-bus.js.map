{
  "version": 3,
  "sources": ["event-bus.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { ArnFormat, IResource, Lazy, Names, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { Archive, BaseArchiveProps } from './archive';\nimport { CfnEventBus } from './events.generated';\n\n/**\n * Interface which all EventBus based classes MUST implement\n */\nexport interface IEventBus extends IResource {\n  /**\n   * The physical ID of this event bus resource\n   *\n   * @attribute\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#cfn-events-eventbus-name\n   */\n  readonly eventBusName: string;\n\n  /**\n   * The ARN of this event bus resource\n   *\n   * @attribute\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#Arn-fn::getatt\n   */\n  readonly eventBusArn: string;\n\n  /**\n   * The JSON policy of this event bus resource\n   *\n   * @attribute\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#Policy-fn::getatt\n   */\n  readonly eventBusPolicy: string;\n\n  /**\n   * The partner event source to associate with this event bus resource\n   *\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#cfn-events-eventbus-eventsourcename\n   */\n  readonly eventSourceName?: string;\n\n  /**\n   * Create an EventBridge archive to send events to.\n   * When you create an archive, incoming events might not immediately start being sent to the archive.\n   * Allow a short period of time for changes to take effect.\n   *\n   * @param props Properties of the archive\n   */\n  archive(id: string, props: BaseArchiveProps): Archive;\n\n  /**\n   * Grants an IAM Principal to send custom events to the eventBus\n   * so that they can be matched to rules.\n   *\n   * @param grantee The principal (no-op if undefined)\n   */\n  grantPutEventsTo(grantee: iam.IGrantable): iam.Grant;\n}\n\n/**\n * Properties to define an event bus\n */\nexport interface EventBusProps {\n  /**\n   * The name of the event bus you are creating\n   * Note: If 'eventSourceName' is passed in, you cannot set this\n   *\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#cfn-events-eventbus-name\n   * @default - automatically generated name\n   */\n  readonly eventBusName?: string;\n\n  /**\n   * The partner event source to associate with this event bus resource\n   * Note: If 'eventBusName' is passed in, you cannot set this\n   *\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#cfn-events-eventbus-eventsourcename\n   * @default - no partner event source\n   */\n  readonly eventSourceName?: string;\n}\n\n/**\n * Interface with properties necessary to import a reusable EventBus\n */\nexport interface EventBusAttributes {\n  /**\n   * The physical ID of this event bus resource\n   *\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#cfn-events-eventbus-name\n   */\n  readonly eventBusName: string;\n\n  /**\n   * The ARN of this event bus resource\n   *\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#Arn-fn::getatt\n   */\n  readonly eventBusArn: string;\n\n  /**\n   * The JSON policy of this event bus resource\n   *\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#Policy-fn::getatt\n   */\n  readonly eventBusPolicy: string;\n\n  /**\n   * The partner event source to associate with this event bus resource\n   *\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#cfn-events-eventbus-eventsourcename\n   * @default - no partner event source\n   */\n  readonly eventSourceName?: string;\n}\n\nabstract class EventBusBase extends Resource implements IEventBus {\n  /**\n   * The physical ID of this event bus resource\n   */\n  public abstract readonly eventBusName: string;\n\n  /**\n   * The ARN of the event bus, such as:\n   * arn:aws:events:us-east-2:123456789012:event-bus/aws.partner/PartnerName/acct1/repo1.\n   */\n  public abstract readonly eventBusArn: string;\n\n  /**\n   * The policy for the event bus in JSON form.\n   */\n  public abstract readonly eventBusPolicy: string;\n\n  /**\n   * The name of the partner event source\n   */\n  public abstract readonly eventSourceName?: string;\n\n  public archive(id: string, props: BaseArchiveProps): Archive {\n    return new Archive(this, id, {\n      sourceEventBus: this,\n      description: props.description || `Event Archive for ${this.eventBusName} Event Bus`,\n      eventPattern: props.eventPattern,\n      retention: props.retention,\n      archiveName: props.archiveName,\n    });\n  }\n\n  public grantPutEventsTo(grantee: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['events:PutEvents'],\n      resourceArns: [this.eventBusArn],\n    });\n  }\n}\n\n/**\n * Define an EventBridge EventBus\n *\n * @resource AWS::Events::EventBus\n */\nexport class EventBus extends EventBusBase {\n\n  /**\n   * Import an existing event bus resource\n   * @param scope Parent construct\n   * @param id Construct ID\n   * @param eventBusArn ARN of imported event bus\n   */\n  public static fromEventBusArn(scope: Construct, id: string, eventBusArn: string): IEventBus {\n    const parts = Stack.of(scope).splitArn(eventBusArn, ArnFormat.SLASH_RESOURCE_NAME);\n\n    return new ImportedEventBus(scope, id, {\n      eventBusArn: eventBusArn,\n      eventBusName: parts.resourceName || '',\n      eventBusPolicy: '',\n    });\n  }\n\n  /**\n   * Import an existing event bus resource\n   * @param scope Parent construct\n   * @param id Construct ID\n   * @param eventBusName Name of imported event bus\n   */\n  public static fromEventBusName(scope: Construct, id: string, eventBusName: string): IEventBus {\n    const eventBusArn = Stack.of(scope).formatArn({\n      resource: 'event-bus',\n      service: 'events',\n      resourceName: eventBusName,\n    });\n\n    return EventBus.fromEventBusAttributes(scope, id, {\n      eventBusName: eventBusName,\n      eventBusArn: eventBusArn,\n      eventBusPolicy: '',\n    });\n  }\n\n  /**\n   * Import an existing event bus resource\n   * @param scope Parent construct\n   * @param id Construct ID\n   * @param attrs Imported event bus properties\n   */\n  public static fromEventBusAttributes(scope: Construct, id: string, attrs: EventBusAttributes): IEventBus {\n    return new ImportedEventBus(scope, id, attrs);\n  }\n\n  /**\n   * Permits an IAM Principal to send custom events to EventBridge\n   * so that they can be matched to rules.\n   *\n   * @param grantee The principal (no-op if undefined)\n   * @deprecated use grantAllPutEvents instead\n   */\n  public static grantPutEvents(grantee: iam.IGrantable): iam.Grant {\n    // It's currently not possible to restrict PutEvents to specific resources.\n    // See https://docs.aws.amazon.com/eventbridge/latest/userguide/permissions-reference-eventbridge.html\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['events:PutEvents'],\n      resourceArns: ['*'],\n    });\n  }\n\n  /**\n   * Permits an IAM Principal to send custom events to EventBridge\n   * so that they can be matched to rules.\n   *\n   * @param grantee The principal (no-op if undefined)\n   */\n  public static grantAllPutEvents(grantee: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['events:PutEvents'],\n      resourceArns: ['*'],\n    });\n  }\n\n  private static eventBusProps(defaultEventBusName: string, props: EventBusProps = {}) {\n    const { eventBusName, eventSourceName } = props;\n    const eventBusNameRegex = /^[\\/\\.\\-_A-Za-z0-9]{1,256}$/;\n\n    if (eventBusName !== undefined && eventSourceName !== undefined) {\n      throw new Error(\n        '\\'eventBusName\\' and \\'eventSourceName\\' cannot both be provided',\n      );\n    }\n\n    if (eventBusName !== undefined) {\n      if (!Token.isUnresolved(eventBusName)) {\n        if (eventBusName === 'default') {\n          throw new Error(\n            '\\'eventBusName\\' must not be \\'default\\'',\n          );\n        } else if (eventBusName.indexOf('/') > -1) {\n          throw new Error(\n            '\\'eventBusName\\' must not contain \\'/\\'',\n          );\n        } else if (!eventBusNameRegex.test(eventBusName)) {\n          throw new Error(\n            `'eventBusName' must satisfy: ${eventBusNameRegex}`,\n          );\n        }\n      }\n      return { eventBusName };\n    }\n\n    if (eventSourceName !== undefined) {\n      // Ex: aws.partner/PartnerName/acct1/repo1\n      const eventSourceNameRegex = /^aws\\.partner(\\/[\\.\\-_A-Za-z0-9]+){2,}$/;\n      if (!eventSourceNameRegex.test(eventSourceName)) {\n        throw new Error(\n          `'eventSourceName' must satisfy: ${eventSourceNameRegex}`,\n        );\n      } else if (!eventBusNameRegex.test(eventSourceName)) {\n        throw new Error(\n          `'eventSourceName' must satisfy: ${eventBusNameRegex}`,\n        );\n      }\n      return { eventBusName: eventSourceName, eventSourceName };\n    }\n\n    return { eventBusName: defaultEventBusName };\n  }\n\n  /**\n   * The physical ID of this event bus resource\n   */\n  public readonly eventBusName: string;\n\n  /**\n   * The ARN of the event bus, such as:\n   * arn:aws:events:us-east-2:123456789012:event-bus/aws.partner/PartnerName/acct1/repo1.\n   */\n  public readonly eventBusArn: string;\n\n  /**\n   * The policy for the event bus in JSON form.\n   */\n  public readonly eventBusPolicy: string;\n\n  /**\n   * The name of the partner event source\n   */\n  public readonly eventSourceName?: string;\n\n  constructor(scope: Construct, id: string, props?: EventBusProps) {\n    const { eventBusName, eventSourceName } = EventBus.eventBusProps(\n      Lazy.string({ produce: () => Names.uniqueId(this) }),\n      props,\n    );\n\n    super(scope, id, { physicalName: eventBusName });\n\n    const eventBus = new CfnEventBus(this, 'Resource', {\n      name: this.physicalName,\n      eventSourceName,\n    });\n\n    this.eventBusArn = this.getResourceArnAttribute(eventBus.attrArn, {\n      service: 'events',\n      resource: 'event-bus',\n      resourceName: eventBus.name,\n    });\n\n    this.eventBusName = this.getResourceNameAttribute(eventBus.ref);\n    this.eventBusPolicy = eventBus.attrPolicy;\n    this.eventSourceName = eventBus.eventSourceName;\n  }\n}\n\nclass ImportedEventBus extends EventBusBase {\n  public readonly eventBusArn: string;\n  public readonly eventBusName: string;\n  public readonly eventBusPolicy: string;\n  public readonly eventSourceName?: string;\n  constructor(scope: Construct, id: string, attrs: EventBusAttributes) {\n    const arnParts = Stack.of(scope).splitArn(attrs.eventBusArn, ArnFormat.SLASH_RESOURCE_NAME);\n    super(scope, id, {\n      account: arnParts.account,\n      region: arnParts.region,\n    });\n\n    this.eventBusArn = attrs.eventBusArn;\n    this.eventBusName = attrs.eventBusName;\n    this.eventBusPolicy = attrs.eventBusPolicy;\n    this.eventSourceName = attrs.eventSourceName;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
