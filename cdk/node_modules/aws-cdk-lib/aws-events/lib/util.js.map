{
  "version": 3,
  "sources": ["util.ts"],
  "sourcesContent": ["import { Token, TokenComparison } from '../../core';\nimport { EventPattern } from './event-pattern';\n\n/**\n * Merge the `src` event pattern into the `dest` event pattern by adding all\n * values from `src` into the fields in `dest`.\n *\n * See `rule.addEventPattern` for details.\n */\nexport function mergeEventPattern(dest: any, src: any) {\n  dest = dest || { };\n\n  mergeObject(dest, src);\n\n  return dest;\n\n  function mergeObject(destObj: any, srcObj: any) {\n    if (typeof(srcObj) !== 'object') {\n      throw new Error(`Invalid event pattern '${JSON.stringify(srcObj)}', expecting an object or an array`);\n    }\n\n    for (const field of Object.keys(srcObj)) {\n\n      const srcValue = srcObj[field];\n      const destValue = destObj[field];\n\n      if (srcValue === undefined) { continue; }\n\n      if (typeof(srcValue) !== 'object') {\n        throw new Error(`Invalid event pattern field { ${field}: ${JSON.stringify(srcValue)} }. All fields must be arrays`);\n      }\n\n      // dest doesn't have this field\n      if (destObj[field] === undefined) {\n        destObj[field] = srcValue;\n        continue;\n      }\n\n      if (Array.isArray(srcValue) !== Array.isArray(destValue)) {\n        throw new Error(`Invalid event pattern field ${field}. ` +\n          `Type mismatch between existing pattern ${JSON.stringify(destValue)} and added pattern ${JSON.stringify(srcValue)}`);\n      }\n\n      // if this is an array, concat and deduplicate the values\n      if (Array.isArray(srcValue)) {\n        const result = [...destValue, ...srcValue];\n        const resultJson = result.map(i => JSON.stringify(i));\n        destObj[field] = result.filter((value, index) => resultJson.indexOf(JSON.stringify(value)) === index);\n        continue;\n      }\n\n      // otherwise, it's an object, so recurse\n      mergeObject(destObj[field], srcValue);\n    }\n  }\n}\n\n/**\n * Whether two string probably contain the same environment dimension (region or account)\n *\n * Used to compare either accounts or regions, and also returns true if both\n * are unresolved (in which case both are expted to be \"current region\" or \"current account\").\n * @internal\n */\nexport function sameEnvDimension(dim1: string, dim2: string) {\n  return [TokenComparison.SAME, TokenComparison.BOTH_UNRESOLVED].includes(Token.compareStrings(dim1, dim2));\n}\n\n/**\n * Transform an eventPattern object into a valid Event Rule Pattern\n * by changing detailType into detail-type when present.\n */\nexport function renderEventPattern(eventPattern: EventPattern): any {\n  if (Object.keys(eventPattern).length === 0) {\n    return undefined;\n  }\n\n  // rename 'detailType' to 'detail-type'\n  const out: any = {};\n  for (let key of Object.keys(eventPattern)) {\n    const value = (eventPattern as any)[key];\n    if (key === 'detailType') {\n      key = 'detail-type';\n    }\n    out[key] = value;\n  }\n\n  return out;\n}"],
  "mappings": "yJAAA,KAAA,QAAA,QAAA,YAAA,EASA,2BAAkC,KAAW,IAAQ,CACnD,YAAO,MAAQ,CAAA,EAEf,YAAY,KAAM,GAAG,EAEd,KAEP,qBAAqB,QAAc,OAAW,CAC5C,GAAI,MAAO,SAAY,SACrB,KAAM,IAAI,OAAM,0BAA0B,KAAK,UAAU,MAAM,qCAAqC,EAGtG,SAAW,SAAS,QAAO,KAAK,MAAM,EAAG,CAEvC,KAAM,UAAW,OAAO,OAClB,UAAY,QAAQ,OAE1B,GAAI,WAAa,OAEjB,IAAI,MAAO,WAAc,SACvB,KAAM,IAAI,OAAM,iCAAiC,UAAU,KAAK,UAAU,QAAQ,gCAAgC,EAIpH,GAAI,QAAQ,SAAW,OAAW,CAChC,QAAQ,OAAS,SACjB,SAGF,GAAI,MAAM,QAAQ,QAAQ,IAAM,MAAM,QAAQ,SAAS,EACrD,KAAM,IAAI,OAAM,+BAA+B,iDACH,KAAK,UAAU,SAAS,uBAAuB,KAAK,UAAU,QAAQ,GAAG,EAIvH,GAAI,MAAM,QAAQ,QAAQ,EAAG,CAC3B,KAAM,QAAS,CAAC,GAAG,UAAW,GAAG,QAAQ,EACnC,WAAa,OAAO,IAAI,GAAK,KAAK,UAAU,CAAC,CAAC,EACpD,QAAQ,OAAS,OAAO,OAAO,CAAC,MAAO,QAAU,WAAW,QAAQ,KAAK,UAAU,KAAK,CAAC,IAAM,KAAK,EACpG,SAIF,YAAY,QAAQ,OAAQ,QAAQ,GAExC,CACF,CA9CA,QAAA,kBAAA,kBAuDA,0BAAiC,KAAc,KAAY,CACzD,MAAO,CAAC,OAAA,gBAAgB,KAAM,OAAA,gBAAgB,eAAe,EAAE,SAAS,OAAA,MAAM,eAAe,KAAM,IAAI,CAAC,CAC1G,CAFA,QAAA,iBAAA,iBAQA,4BAAmC,aAA0B,CAC3D,GAAI,OAAO,KAAK,YAAY,EAAE,SAAW,EACvC,OAIF,KAAM,KAAW,CAAA,EACjB,OAAS,OAAO,QAAO,KAAK,YAAY,EAAG,CACzC,KAAM,OAAS,aAAqB,KACpC,AAAI,MAAQ,cACV,KAAM,eAER,IAAI,KAAO,MAGb,MAAO,IACT,CAhBA,QAAA,mBAAA",
  "names": []
}
