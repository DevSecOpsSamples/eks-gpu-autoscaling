{
  "version": 3,
  "sources": ["asset.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as s3 from '../../aws-s3';\nimport * as cdk from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { toSymlinkFollow } from './compat';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { CopyOptions } from '../../assets';\n\nexport interface AssetOptions extends CopyOptions, cdk.FileCopyOptions, cdk.AssetOptions {\n  /**\n   * A list of principals that should be able to read this asset from S3.\n   * You can use `asset.grantRead(principal)` to grant read permissions later.\n   *\n   * @default - No principals that can read file asset.\n   */\n  readonly readers?: iam.IGrantable[];\n\n  /**\n   * Custom hash to use when identifying the specific version of the asset. For consistency,\n   * this custom hash will be SHA256 hashed and encoded as hex. The resulting hash will be\n   * the asset hash.\n   *\n   * NOTE: the source hash is used in order to identify a specific revision of the asset,\n   * and used for optimizing and caching deployment activities related to this asset such as\n   * packaging, uploading to Amazon S3, etc. If you chose to customize the source hash,\n   * you will need to make sure it is updated every time the source changes, or otherwise\n   * it is possible that some deployments will not be invalidated.\n   *\n   * @default - automatically calculate source hash based on the contents\n   * of the source file or directory.\n   *\n   * @deprecated see `assetHash` and `assetHashType`\n   */\n  readonly sourceHash?: string;\n}\n\nexport interface AssetProps extends AssetOptions {\n  /**\n   * The disk location of the asset.\n   *\n   * The path should refer to one of the following:\n   * - A regular file or a .zip file, in which case the file will be uploaded as-is to S3.\n   * - A directory, in which case it will be archived into a .zip file and uploaded to S3.\n   */\n  readonly path: string;\n}\n\n/**\n * An asset represents a local file or directory, which is automatically uploaded to S3\n * and then can be referenced within a CDK application.\n */\nexport class Asset extends Construct implements cdk.IAsset {\n  /**\n   * Attribute that represents the name of the bucket this asset exists in.\n   */\n  public readonly s3BucketName: string;\n\n  /**\n   * Attribute which represents the S3 object key of this asset.\n   */\n  public readonly s3ObjectKey: string;\n\n  /**\n   * Attribute which represents the S3 URL of this asset.\n   * @deprecated use `httpUrl`\n   */\n  public readonly s3Url: string;\n\n  /**\n   * Attribute which represents the S3 HTTP URL of this asset.\n   * For example, `https://s3.us-west-1.amazonaws.com/bucket/key`\n   */\n  public readonly httpUrl: string;\n\n  /**\n   * Attribute which represents the S3 URL of this asset.\n   * For example, `s3://bucket/key`\n   */\n  public readonly s3ObjectUrl: string;\n\n  /**\n   * The path to the asset, relative to the current Cloud Assembly\n   *\n   * If asset staging is disabled, this will just be the original path.\n   * If asset staging is enabled it will be the staged path.\n   */\n  public readonly assetPath: string;\n\n  /**\n   * The S3 bucket in which this asset resides.\n   */\n  public readonly bucket: s3.IBucket;\n\n  /**\n   * Indicates if this asset is a single file. Allows constructs to ensure that the\n   * correct file type was used.\n   */\n  public readonly isFile: boolean;\n\n  /**\n   * Indicates if this asset is a zip archive. Allows constructs to ensure that the\n   * correct file type was used.\n   */\n  public readonly isZipArchive: boolean;\n\n  /**\n   * A cryptographic hash of the asset.\n   *\n   * @deprecated see `assetHash`\n   */\n  public readonly sourceHash: string;\n\n  public readonly assetHash: string;\n\n  /**\n   * Indicates if this asset got bundled before staged, or not.\n   */\n  private readonly isBundled: boolean;\n\n  constructor(scope: Construct, id: string, props: AssetProps) {\n    super(scope, id);\n\n    this.isBundled = props.bundling != null;\n\n    // stage the asset source (conditionally).\n    const staging = new cdk.AssetStaging(this, 'Stage', {\n      ...props,\n      sourcePath: path.resolve(props.path),\n      follow: props.followSymlinks ?? toSymlinkFollow(props.follow),\n      assetHash: props.assetHash ?? props.sourceHash,\n    });\n\n    this.assetHash = staging.assetHash;\n    this.sourceHash = this.assetHash;\n\n    const stack = cdk.Stack.of(this);\n\n    this.assetPath = staging.relativeStagedPath(stack);\n\n    this.isFile = staging.packaging === cdk.FileAssetPackaging.FILE;\n\n    this.isZipArchive = staging.isArchive;\n\n    const location = stack.synthesizer.addFileAsset({\n      packaging: staging.packaging,\n      sourceHash: this.sourceHash,\n      fileName: this.assetPath,\n    });\n\n    this.s3BucketName = location.bucketName;\n    this.s3ObjectKey = location.objectKey;\n    this.s3ObjectUrl = location.s3ObjectUrl;\n    this.httpUrl = location.httpUrl;\n    this.s3Url = location.httpUrl; // for backwards compatibility\n\n    const kmsKey = location.kmsKeyArn ? kms.Key.fromKeyArn(this, 'Key', location.kmsKeyArn) : undefined;\n\n    this.bucket = s3.Bucket.fromBucketAttributes(this, 'AssetBucket', {\n      bucketName: this.s3BucketName,\n      encryptionKey: kmsKey,\n    });\n\n    for (const reader of (props.readers ?? [])) {\n      this.grantRead(reader);\n    }\n  }\n\n  /**\n   * Adds CloudFormation template metadata to the specified resource with\n   * information that indicates which resource property is mapped to this local\n   * asset. This can be used by tools such as SAM CLI to provide local\n   * experience such as local invocation and debugging of Lambda functions.\n   *\n   * Asset metadata will only be included if the stack is synthesized with the\n   * \"aws:cdk:enable-asset-metadata\" context key defined, which is the default\n   * behavior when synthesizing via the CDK Toolkit.\n   *\n   * @see https://github.com/aws/aws-cdk/issues/1432\n   *\n   * @param resource The CloudFormation resource which is using this asset [disable-awslint:ref-via-interface]\n   * @param resourceProperty The property name where this asset is referenced\n   * (e.g. \"Code\" for AWS::Lambda::Function)\n   */\n  public addResourceMetadata(resource: cdk.CfnResource, resourceProperty: string) {\n    if (!this.node.tryGetContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT)) {\n      return; // not enabled\n    }\n\n    // tell tools such as SAM CLI that the \"Code\" property of this resource\n    // points to a local path in order to enable local invocation of this function.\n    resource.cfnOptions.metadata = resource.cfnOptions.metadata || { };\n    resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PATH_KEY] = this.assetPath;\n    resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_IS_BUNDLED_KEY] = this.isBundled;\n    resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PROPERTY_KEY] = resourceProperty;\n  }\n\n  /**\n   * Grants read permissions to the principal on the assets bucket.\n   */\n  public grantRead(grantee: iam.IGrantable) {\n    // we give permissions on all files in the bucket since we don't want to\n    // accidentally revoke permission on old versions when deploying a new\n    // version (for example, when using Lambda traffic shifting).\n    this.bucket.grantRead(grantee);\n  }\n}\n"],
  "mappings": "4MAAA,KAAA,QAAA,MAAA,EAEA,IAAA,QAAA,eAAA,EACA,GAAA,QAAA,cAAA,EACA,IAAA,QAAA,YAAA,EACA,MAAA,QAAA,cAAA,EACA,aAAA,QAAA,YAAA,EACA,SAAA,QAAA,UAAA,EAiDA,MAAa,aAAc,cAAA,SAAS,CAoElC,YAAY,MAAkB,GAAY,MAAiB,cACzD,MAAM,MAAO,EAAE,sEAEf,KAAK,UAAY,MAAM,UAAY,KAGnC,KAAM,SAAU,GAAI,KAAI,aAAa,KAAM,QAAS,IAC/C,MACH,WAAY,KAAK,QAAQ,MAAM,IAAI,EACnC,OAAM,IAAE,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,SAAA,gBAAgB,MAAM,MAAM,EAC5D,UAAS,IAAE,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,MAAM,WACrC,EAED,KAAK,UAAY,QAAQ,UACzB,KAAK,WAAa,KAAK,UAEvB,KAAM,OAAQ,IAAI,MAAM,GAAG,IAAI,EAE/B,KAAK,UAAY,QAAQ,mBAAmB,KAAK,EAEjD,KAAK,OAAS,QAAQ,YAAc,IAAI,mBAAmB,KAE3D,KAAK,aAAe,QAAQ,UAE5B,KAAM,UAAW,MAAM,YAAY,aAAa,CAC9C,UAAW,QAAQ,UACnB,WAAY,KAAK,WACjB,SAAU,KAAK,UAChB,EAED,KAAK,aAAe,SAAS,WAC7B,KAAK,YAAc,SAAS,UAC5B,KAAK,YAAc,SAAS,YAC5B,KAAK,QAAU,SAAS,QACxB,KAAK,MAAQ,SAAS,QAEtB,KAAM,QAAS,SAAS,UAAY,IAAI,IAAI,WAAW,KAAM,MAAO,SAAS,SAAS,EAAI,OAE1F,KAAK,OAAS,GAAG,OAAO,qBAAqB,KAAM,cAAe,CAChE,WAAY,KAAK,aACjB,cAAe,OAChB,EAED,SAAW,UAAU,IAAC,MAAM,WAAO,MAAA,KAAA,OAAA,GAAI,CAAA,EACrC,KAAK,UAAU,MAAM,EAoBlB,oBAAoB,SAA2B,iBAAwB,CAC5E,0DAAI,AAAC,KAAK,KAAK,cAAc,MAAM,uCAAuC,GAM1E,UAAS,WAAW,SAAW,SAAS,WAAW,UAAY,CAAA,EAC/D,SAAS,WAAW,SAAS,MAAM,kCAAoC,KAAK,UAC5E,SAAS,WAAW,SAAS,MAAM,wCAA0C,KAAK,UAClF,SAAS,WAAW,SAAS,MAAM,sCAAwC,kBAMtE,UAAU,QAAuB,iEAItC,KAAK,OAAO,UAAU,OAAO,GAxJjC,QAAA,MAAA",
  "names": []
}
