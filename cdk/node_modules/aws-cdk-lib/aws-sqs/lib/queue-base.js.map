{
  "version": 3,
  "sources": ["queue-base.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport { IResource, Resource, ResourceProps } from '../../core';\nimport { Construct } from 'constructs';\nimport { QueuePolicy } from './policy';\n\n/**\n * Represents an SQS queue\n */\nexport interface IQueue extends IResource {\n  /**\n   * The ARN of this queue\n   * @attribute\n   */\n  readonly queueArn: string;\n\n  /**\n   * The URL of this queue\n   * @attribute\n   */\n  readonly queueUrl: string;\n\n  /**\n   * The name of this queue\n   * @attribute\n   */\n  readonly queueName: string;\n\n  /**\n   * If this queue is server-side encrypted, this is the KMS encryption key.\n   */\n  readonly encryptionMasterKey?: kms.IKey;\n\n  /**\n   * Whether this queue is an Amazon SQS FIFO queue. If false, this is a standard queue.\n   */\n  readonly fifo: boolean;\n\n  /**\n   * Adds a statement to the IAM resource policy associated with this queue.\n   *\n   * If this queue was created in this stack (`new Queue`), a queue policy\n   * will be automatically created upon the first call to `addToPolicy`. If\n   * the queue is imported (`Queue.import`), then this is a no-op.\n   */\n  addToResourcePolicy(statement: iam.PolicyStatement): iam.AddToResourcePolicyResult;\n\n  /**\n   * Grant permissions to consume messages from a queue\n   *\n   * This will grant the following permissions:\n   *\n   *   - sqs:ChangeMessageVisibility\n   *   - sqs:DeleteMessage\n   *   - sqs:ReceiveMessage\n   *   - sqs:GetQueueAttributes\n   *   - sqs:GetQueueUrl\n   *\n   * @param grantee Principal to grant consume rights to\n   */\n  grantConsumeMessages(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant access to send messages to a queue to the given identity.\n   *\n   * This will grant the following permissions:\n   *\n   *  - sqs:SendMessage\n   *  - sqs:GetQueueAttributes\n   *  - sqs:GetQueueUrl\n   *\n   * @param grantee Principal to grant send rights to\n   */\n  grantSendMessages(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant an IAM principal permissions to purge all messages from the queue.\n   *\n   * This will grant the following permissions:\n   *\n   *  - sqs:PurgeQueue\n   *  - sqs:GetQueueAttributes\n   *  - sqs:GetQueueUrl\n   *\n   * @param grantee Principal to grant send rights to\n   */\n  grantPurge(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant the actions defined in queueActions to the identity Principal given\n   * on this SQS queue resource.\n   *\n   * @param grantee Principal to grant right to\n   * @param queueActions The actions to grant\n   */\n  grant(grantee: iam.IGrantable, ...queueActions: string[]): iam.Grant;\n}\n\n/**\n * Reference to a new or existing Amazon SQS queue\n */\nexport abstract class QueueBase extends Resource implements IQueue {\n\n  /**\n   * The ARN of this queue\n   */\n  public abstract readonly queueArn: string;\n\n  /**\n   * The URL of this queue\n   */\n  public abstract readonly queueUrl: string;\n\n  /**\n   * The name of this queue\n   */\n  public abstract readonly queueName: string;\n\n  /**\n   * If this queue is server-side encrypted, this is the KMS encryption key.\n   */\n  public abstract readonly encryptionMasterKey?: kms.IKey;\n\n  /**\n   * Whether this queue is an Amazon SQS FIFO queue. If false, this is a standard queue.\n   */\n  public abstract readonly fifo: boolean;\n\n  /**\n   * Controls automatic creation of policy objects.\n   *\n   * Set by subclasses.\n   */\n  protected abstract readonly autoCreatePolicy: boolean;\n\n  private policy?: QueuePolicy;\n\n  constructor(scope: Construct, id: string, props: ResourceProps = {}) {\n    super(scope, id, props);\n\n    this.node.addValidation({ validate: () => this.policy?.document.validateForResourcePolicy() ?? [] });\n  }\n\n  /**\n   * Adds a statement to the IAM resource policy associated with this queue.\n   *\n   * If this queue was created in this stack (`new Queue`), a queue policy\n   * will be automatically created upon the first call to `addToPolicy`. If\n   * the queue is imported (`Queue.import`), then this is a no-op.\n   */\n  public addToResourcePolicy(statement: iam.PolicyStatement): iam.AddToResourcePolicyResult {\n    if (!this.policy && this.autoCreatePolicy) {\n      this.policy = new QueuePolicy(this, 'Policy', { queues: [this] });\n    }\n\n    if (this.policy) {\n      this.policy.document.addStatements(statement);\n      return { statementAdded: true, policyDependable: this.policy };\n    }\n\n    return { statementAdded: false };\n  }\n\n  /**\n   * Grant permissions to consume messages from a queue\n   *\n   * This will grant the following permissions:\n   *\n   *   - sqs:ChangeMessageVisibility\n   *   - sqs:DeleteMessage\n   *   - sqs:ReceiveMessage\n   *   - sqs:GetQueueAttributes\n   *   - sqs:GetQueueUrl\n   *\n   * @param grantee Principal to grant consume rights to\n   */\n  public grantConsumeMessages(grantee: iam.IGrantable) {\n    const ret = this.grant(grantee,\n      'sqs:ReceiveMessage',\n      'sqs:ChangeMessageVisibility',\n      'sqs:GetQueueUrl',\n      'sqs:DeleteMessage',\n      'sqs:GetQueueAttributes');\n\n    if (this.encryptionMasterKey) {\n      this.encryptionMasterKey.grantDecrypt(grantee);\n    }\n\n    return ret;\n  }\n\n  /**\n   * Grant access to send messages to a queue to the given identity.\n   *\n   * This will grant the following permissions:\n   *\n   *  - sqs:SendMessage\n   *  - sqs:GetQueueAttributes\n   *  - sqs:GetQueueUrl\n   *\n   * @param grantee Principal to grant send rights to\n   */\n  public grantSendMessages(grantee: iam.IGrantable) {\n    const ret = this.grant(grantee,\n      'sqs:SendMessage',\n      'sqs:GetQueueAttributes',\n      'sqs:GetQueueUrl');\n\n    if (this.encryptionMasterKey) {\n      // kms:Decrypt necessary to execute grantsendMessages to an SSE enabled SQS queue\n      this.encryptionMasterKey.grantEncryptDecrypt(grantee);\n    }\n    return ret;\n  }\n\n  /**\n   * Grant an IAM principal permissions to purge all messages from the queue.\n   *\n   * This will grant the following permissions:\n   *\n   *  - sqs:PurgeQueue\n   *  - sqs:GetQueueAttributes\n   *  - sqs:GetQueueUrl\n   *\n   * @param grantee Principal to grant send rights to\n   */\n  public grantPurge(grantee: iam.IGrantable) {\n    return this.grant(grantee,\n      'sqs:PurgeQueue',\n      'sqs:GetQueueAttributes',\n      'sqs:GetQueueUrl');\n  }\n\n  /**\n   * Grant the actions defined in queueActions to the identity Principal given\n   * on this SQS queue resource.\n   *\n   * @param grantee Principal to grant right to\n   * @param actions The actions to grant\n   */\n  public grant(grantee: iam.IGrantable, ...actions: string[]) {\n    return iam.Grant.addToPrincipalOrResource({\n      grantee,\n      actions,\n      resourceArns: [this.queueArn],\n      resource: this,\n    });\n  }\n}\n/**\n * Reference to a queue\n */\nexport interface QueueAttributes {\n  /**\n   * The ARN of the queue.\n   */\n  readonly queueArn: string;\n\n  /**\n   * The URL of the queue.\n   * @see https://docs.aws.amazon.com/sdk-for-net/v2/developer-guide/QueueURL.html\n   *\n   * @default - 'https://sqs.<region-endpoint>/<account-ID>/<queue-name>'\n   */\n  readonly queueUrl?: string;\n\n  /**\n   * The name of the queue.\n   * @default if queue name is not specified, the name will be derived from the queue ARN\n   */\n  readonly queueName?: string;\n\n  /**\n   * KMS encryption key, if this queue is server-side encrypted by a KMS key.\n   *\n   * @default - None\n   */\n  readonly keyArn?: string;\n\n  /**\n   * Whether this queue is an Amazon SQS FIFO queue. If false, this is a standard queue.\n   *\n   * In case of a FIFO queue which is imported from a token, this value has to be explicitly set to true.\n   *\n   * @default - if fifo is not specified, the property will be determined based on the queue name (not possible for FIFO queues imported from a token)\n   */\n  readonly fifo?: boolean;\n}\n"],
  "mappings": "gNAAA,IAAA,QAAA,eAAA,EAEA,OAAA,QAAA,YAAA,EAEA,SAAA,QAAA,UAAA,EAiGA,MAAsB,iBAAkB,QAAA,QAAQ,CAoC9C,YAAY,MAAkB,GAAY,MAAuB,CAAA,EAAE,CACjE,MAAM,MAAO,GAAI,KAAK,2DAEtB,KAAK,KAAK,cAAc,CAAE,SAAU,IAAK,CAAA,GAAA,IAAA,GAAA,MAAA,IAAA,IAAC,KAAK,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,SAAS,0BAAyB,KAAA,MAAA,KAAA,OAAA,GAAM,CAAA,CAAE,CAAA,CAAE,EAU9F,oBAAoB,UAA8B,CAKvD,8EAJI,CAAC,KAAK,QAAU,KAAK,kBACvB,MAAK,OAAS,GAAI,UAAA,YAAY,KAAM,SAAU,CAAE,OAAQ,CAAC,IAAI,CAAC,CAAE,GAG9D,KAAK,OACP,MAAK,OAAO,SAAS,cAAc,SAAS,EACrC,CAAE,eAAgB,GAAM,iBAAkB,KAAK,MAAM,GAGvD,CAAE,eAAgB,EAAK,EAgBzB,qBAAqB,QAAuB,iEACjD,KAAM,KAAM,KAAK,MAAM,QACrB,qBACA,8BACA,kBACA,oBACA,wBAAwB,EAE1B,MAAI,MAAK,qBACP,KAAK,oBAAoB,aAAa,OAAO,EAGxC,IAcF,kBAAkB,QAAuB,iEAC9C,KAAM,KAAM,KAAK,MAAM,QACrB,kBACA,yBACA,iBAAiB,EAEnB,MAAI,MAAK,qBAEP,KAAK,oBAAoB,oBAAoB,OAAO,EAE/C,IAcF,WAAW,QAAuB,wEAChC,KAAK,MAAM,QAChB,iBACA,yBACA,iBAAiB,EAUd,MAAM,WAA4B,QAAiB,wEACjD,IAAI,MAAM,yBAAyB,CACxC,QACA,QACA,aAAc,CAAC,KAAK,QAAQ,EAC5B,SAAU,KACX,GAjJL,QAAA,UAAA",
  "names": []
}
