{
  "version": 3,
  "sources": ["sqs-augmentations.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\nimport * as cloudwatch from '../../aws-cloudwatch';\nimport { QueueBase } from \"./queue-base\";\ndeclare module \"./queue-base\" {\n    interface IQueue {\n        /**\n         * Return the given named metric for this Queue\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The approximate age of the oldest non-deleted message in the queue.\n         *\n         * Maximum over 5 minutes\n         */\n        metricApproximateAgeOfOldestMessage(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages in the queue that are delayed and not available for reading immediately.\n         *\n         * Maximum over 5 minutes\n         */\n        metricApproximateNumberOfMessagesDelayed(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that are in flight.\n         *\n         * Maximum over 5 minutes\n         */\n        metricApproximateNumberOfMessagesNotVisible(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages available for retrieval from the queue.\n         *\n         * Maximum over 5 minutes\n         */\n        metricApproximateNumberOfMessagesVisible(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of ReceiveMessage API calls that did not return a message.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfEmptyReceives(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages deleted from the queue.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfMessagesDeleted(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages returned by calls to the ReceiveMessage action.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfMessagesReceived(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages added to a queue.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfMessagesSent(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The size of messages added to a queue.\n         *\n         * Average over 5 minutes\n         */\n        metricSentMessageSize(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n    interface QueueBase {\n        /**\n         * Return the given named metric for this Queue\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The approximate age of the oldest non-deleted message in the queue.\n         *\n         * Maximum over 5 minutes\n         */\n        metricApproximateAgeOfOldestMessage(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages in the queue that are delayed and not available for reading immediately.\n         *\n         * Maximum over 5 minutes\n         */\n        metricApproximateNumberOfMessagesDelayed(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that are in flight.\n         *\n         * Maximum over 5 minutes\n         */\n        metricApproximateNumberOfMessagesNotVisible(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages available for retrieval from the queue.\n         *\n         * Maximum over 5 minutes\n         */\n        metricApproximateNumberOfMessagesVisible(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of ReceiveMessage API calls that did not return a message.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfEmptyReceives(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages deleted from the queue.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfMessagesDeleted(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages returned by calls to the ReceiveMessage action.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfMessagesReceived(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages added to a queue.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfMessagesSent(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The size of messages added to a queue.\n         *\n         * Average over 5 minutes\n         */\n        metricSentMessageSize(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n}\nQueueBase.prototype.metric = function(metricName: string, props?: cloudwatch.MetricOptions) {\n  return new cloudwatch.Metric({\n    namespace: 'AWS/SQS',\n    metricName,\n    dimensionsMap: { QueueName: this.queueName },\n    ...props\n  }).attachTo(this);\n};\nQueueBase.prototype.metricApproximateAgeOfOldestMessage = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('ApproximateAgeOfOldestMessage', { statistic: 'Maximum', ...props });\n};\nQueueBase.prototype.metricApproximateNumberOfMessagesDelayed = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('ApproximateNumberOfMessagesDelayed', { statistic: 'Maximum', ...props });\n};\nQueueBase.prototype.metricApproximateNumberOfMessagesNotVisible = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('ApproximateNumberOfMessagesNotVisible', { statistic: 'Maximum', ...props });\n};\nQueueBase.prototype.metricApproximateNumberOfMessagesVisible = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('ApproximateNumberOfMessagesVisible', { statistic: 'Maximum', ...props });\n};\nQueueBase.prototype.metricNumberOfEmptyReceives = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfEmptyReceives', { statistic: 'Sum', ...props });\n};\nQueueBase.prototype.metricNumberOfMessagesDeleted = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfMessagesDeleted', { statistic: 'Sum', ...props });\n};\nQueueBase.prototype.metricNumberOfMessagesReceived = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfMessagesReceived', { statistic: 'Sum', ...props });\n};\nQueueBase.prototype.metricNumberOfMessagesSent = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfMessagesSent', { statistic: 'Sum', ...props });\n};\nQueueBase.prototype.metricSentMessageSize = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('SentMessageSize', { statistic: 'Average', ...props });\n};\n"],
  "mappings": "oEAGA,KAAA,YAAA,QAAA,sBAAA,EACA,aAAA,QAAA,cAAA,EA2HA,aAAA,UAAU,UAAU,OAAS,SAAS,WAAoB,MAAgC,CACxF,MAAO,IAAI,YAAW,OAAO,CAC3B,UAAW,UACX,WACA,cAAe,CAAE,UAAW,KAAK,SAAS,KACvC,MACJ,EAAE,SAAS,IAAI,CAClB,EACA,aAAA,UAAU,UAAU,oCAAsC,SAAS,MAAgC,CACjG,MAAO,MAAK,OAAO,gCAAiC,CAAE,UAAW,aAAc,KAAK,CAAE,CACxF,EACA,aAAA,UAAU,UAAU,yCAA2C,SAAS,MAAgC,CACtG,MAAO,MAAK,OAAO,qCAAsC,CAAE,UAAW,aAAc,KAAK,CAAE,CAC7F,EACA,aAAA,UAAU,UAAU,4CAA8C,SAAS,MAAgC,CACzG,MAAO,MAAK,OAAO,wCAAyC,CAAE,UAAW,aAAc,KAAK,CAAE,CAChG,EACA,aAAA,UAAU,UAAU,yCAA2C,SAAS,MAAgC,CACtG,MAAO,MAAK,OAAO,qCAAsC,CAAE,UAAW,aAAc,KAAK,CAAE,CAC7F,EACA,aAAA,UAAU,UAAU,4BAA8B,SAAS,MAAgC,CACzF,MAAO,MAAK,OAAO,wBAAyB,CAAE,UAAW,SAAU,KAAK,CAAE,CAC5E,EACA,aAAA,UAAU,UAAU,8BAAgC,SAAS,MAAgC,CAC3F,MAAO,MAAK,OAAO,0BAA2B,CAAE,UAAW,SAAU,KAAK,CAAE,CAC9E,EACA,aAAA,UAAU,UAAU,+BAAiC,SAAS,MAAgC,CAC5F,MAAO,MAAK,OAAO,2BAA4B,CAAE,UAAW,SAAU,KAAK,CAAE,CAC/E,EACA,aAAA,UAAU,UAAU,2BAA6B,SAAS,MAAgC,CACxF,MAAO,MAAK,OAAO,uBAAwB,CAAE,UAAW,SAAU,KAAK,CAAE,CAC3E,EACA,aAAA,UAAU,UAAU,sBAAwB,SAAS,MAAgC,CACnF,MAAO,MAAK,OAAO,kBAAmB,CAAE,UAAW,aAAc,KAAK,CAAE,CAC1E",
  "names": []
}
