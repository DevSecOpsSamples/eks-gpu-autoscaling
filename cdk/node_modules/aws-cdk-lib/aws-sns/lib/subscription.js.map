{
  "version": 3,
  "sources": ["subscription.ts"],
  "sourcesContent": ["import { PolicyStatement, ServicePrincipal } from '../../aws-iam';\nimport { IQueue } from '../../aws-sqs';\nimport { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnSubscription } from './sns.generated';\nimport { SubscriptionFilter } from './subscription-filter';\nimport { ITopic } from './topic-base';\n\n/**\n * Options for creating a new subscription\n */\nexport interface SubscriptionOptions {\n  /**\n   * What type of subscription to add.\n   */\n  readonly protocol: SubscriptionProtocol;\n\n  /**\n   * The subscription endpoint.\n   *\n   * The meaning of this value depends on the value for 'protocol'.\n   */\n  readonly endpoint: string;\n\n  /**\n   * true if raw message delivery is enabled for the subscription. Raw messages are free of JSON formatting and can be\n   * sent to HTTP/S and Amazon SQS endpoints. For more information, see GetSubscriptionAttributes in the Amazon Simple\n   * Notification Service API Reference.\n   *\n   * @default false\n   */\n  readonly rawMessageDelivery?: boolean;\n\n  /**\n   * The filter policy.\n   *\n   * @default - all messages are delivered\n   */\n  readonly filterPolicy?: { [attribute: string]: SubscriptionFilter };\n\n  /**\n   * The region where the topic resides, in the case of cross-region subscriptions\n   * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-region\n   * @default - the region where the CloudFormation stack is being deployed.\n   */\n  readonly region?: string;\n\n  /**\n   * Queue to be used as dead letter queue.\n   * If not passed no dead letter queue is enabled.\n   *\n   * @default - No dead letter queue enabled.\n   */\n  readonly deadLetterQueue?: IQueue;\n\n  /**\n   * Arn of role allowing access to firehose delivery stream.\n   * Required for a firehose subscription protocol.\n   * @default - No subscription role is provided\n   */\n  readonly subscriptionRoleArn?: string;\n}\n/**\n * Properties for creating a new subscription\n */\nexport interface SubscriptionProps extends SubscriptionOptions {\n  /**\n   * The topic to subscribe to.\n   */\n  readonly topic: ITopic;\n}\n\n/**\n * A new subscription.\n *\n * Prefer to use the `ITopic.addSubscription()` methods to create instances of\n * this class.\n */\nexport class Subscription extends Resource {\n\n  /**\n   * The DLQ associated with this subscription if present.\n   */\n  public readonly deadLetterQueue?: IQueue;\n\n  private readonly filterPolicy?: { [attribute: string]: any[] };\n\n  constructor(scope: Construct, id: string, props: SubscriptionProps) {\n    super(scope, id);\n\n    if (props.rawMessageDelivery &&\n      [\n        SubscriptionProtocol.HTTP,\n        SubscriptionProtocol.HTTPS,\n        SubscriptionProtocol.SQS,\n        SubscriptionProtocol.FIREHOSE,\n      ]\n        .indexOf(props.protocol) < 0) {\n      throw new Error('Raw message delivery can only be enabled for HTTP, HTTPS, SQS, and Firehose subscriptions.');\n    }\n\n    if (props.filterPolicy) {\n      if (Object.keys(props.filterPolicy).length > 5) {\n        throw new Error('A filter policy can have a maximum of 5 attribute names.');\n      }\n\n      this.filterPolicy = Object.entries(props.filterPolicy)\n        .reduce(\n          (acc, [k, v]) => ({ ...acc, [k]: v.conditions }),\n          {},\n        );\n\n      let total = 1;\n      Object.values(this.filterPolicy).forEach(filter => { total *= filter.length; });\n      if (total > 100) {\n        throw new Error(`The total combination of values (${total}) must not exceed 100.`);\n      }\n    }\n\n    if (props.protocol === SubscriptionProtocol.FIREHOSE && !props.subscriptionRoleArn) {\n      throw new Error('Subscription role arn is required field for subscriptions with a firehose protocol.');\n    }\n\n    this.deadLetterQueue = this.buildDeadLetterQueue(props);\n\n    new CfnSubscription(this, 'Resource', {\n      endpoint: props.endpoint,\n      protocol: props.protocol,\n      topicArn: props.topic.topicArn,\n      rawMessageDelivery: props.rawMessageDelivery,\n      filterPolicy: this.filterPolicy,\n      region: props.region,\n      redrivePolicy: this.buildDeadLetterConfig(this.deadLetterQueue),\n      subscriptionRoleArn: props.subscriptionRoleArn,\n    });\n\n  }\n\n  private buildDeadLetterQueue(props: SubscriptionProps) {\n    if (!props.deadLetterQueue) {\n      return undefined;\n    }\n\n    const deadLetterQueue = props.deadLetterQueue;\n\n    deadLetterQueue.addToResourcePolicy(new PolicyStatement({\n      resources: [deadLetterQueue.queueArn],\n      actions: ['sqs:SendMessage'],\n      principals: [new ServicePrincipal('sns.amazonaws.com')],\n      conditions: {\n        ArnEquals: { 'aws:SourceArn': props.topic.topicArn },\n      },\n    }));\n\n    return deadLetterQueue;\n  }\n\n  private buildDeadLetterConfig(deadLetterQueue?: IQueue) {\n    if (deadLetterQueue) {\n      return {\n        deadLetterTargetArn: deadLetterQueue.queueArn,\n      };\n    } else {\n      return undefined;\n    }\n  }\n}\n\n/**\n * The type of subscription, controlling the type of the endpoint parameter.\n */\nexport enum SubscriptionProtocol {\n  /**\n   * JSON-encoded message is POSTED to an HTTP url.\n   */\n  HTTP = 'http',\n\n  /**\n   * JSON-encoded message is POSTed to an HTTPS url.\n   */\n  HTTPS = 'https',\n\n  /**\n   * Notifications are sent via email.\n   */\n  EMAIL = 'email',\n\n  /**\n   * Notifications are JSON-encoded and sent via mail.\n   */\n  EMAIL_JSON = 'email-json',\n\n  /**\n   * Notification is delivered by SMS\n   */\n  SMS = 'sms',\n\n  /**\n   * Notifications are enqueued into an SQS queue.\n   */\n  SQS = 'sqs',\n\n  /**\n   * JSON-encoded notifications are sent to a mobile app endpoint.\n   */\n  APPLICATION = 'application',\n\n  /**\n   * Notifications trigger a Lambda function.\n   */\n  LAMBDA = 'lambda',\n\n  /**\n   * Notifications put records into a firehose delivery stream.\n   */\n  FIREHOSE = 'firehose'\n}\n"],
  "mappings": "gPAAA,UAAA,QAAA,eAAA,EAEA,OAAA,QAAA,YAAA,EAEA,gBAAA,QAAA,iBAAA,EA0EA,MAAa,oBAAqB,QAAA,QAAQ,CASxC,YAAY,MAAkB,GAAY,MAAwB,CAChE,MAAM,MAAO,EAAE,EAEf,wEAAI,MAAM,oBACR,CACE,qBAAqB,KACrB,qBAAqB,MACrB,qBAAqB,IACrB,qBAAqB,UAEpB,QAAQ,MAAM,QAAQ,EAAI,EAC7B,KAAM,IAAI,OAAM,4FAA4F,EAG9G,GAAI,MAAM,aAAc,CACtB,GAAI,OAAO,KAAK,MAAM,YAAY,EAAE,OAAS,EAC3C,KAAM,IAAI,OAAM,0DAA0D,EAG5E,KAAK,aAAe,OAAO,QAAQ,MAAM,YAAY,EAClD,OACC,CAAC,IAAK,CAAC,EAAG,KAAQ,KAAK,KAAM,GAAI,EAAE,UAAU,GAC7C,CAAA,CAAE,EAGN,GAAI,OAAQ,EAEZ,GADA,OAAO,OAAO,KAAK,YAAY,EAAE,QAAQ,QAAS,CAAG,OAAS,OAAO,MAAQ,CAAC,EAC1E,MAAQ,IACV,KAAM,IAAI,OAAM,oCAAoC,6BAA6B,EAIrF,GAAI,MAAM,WAAa,qBAAqB,UAAY,CAAC,MAAM,oBAC7D,KAAM,IAAI,OAAM,qFAAqF,EAGvG,KAAK,gBAAkB,KAAK,qBAAqB,KAAK,EAEtD,GAAI,iBAAA,gBAAgB,KAAM,WAAY,CACpC,SAAU,MAAM,SAChB,SAAU,MAAM,SAChB,SAAU,MAAM,MAAM,SACtB,mBAAoB,MAAM,mBAC1B,aAAc,KAAK,aACnB,OAAQ,MAAM,OACd,cAAe,KAAK,sBAAsB,KAAK,eAAe,EAC9D,oBAAqB,MAAM,oBAC5B,EAIK,qBAAqB,MAAwB,CACnD,GAAI,CAAC,MAAM,gBACT,OAGF,KAAM,iBAAkB,MAAM,gBAE9B,uBAAgB,oBAAoB,GAAI,WAAA,gBAAgB,CACtD,UAAW,CAAC,gBAAgB,QAAQ,EACpC,QAAS,CAAC,iBAAiB,EAC3B,WAAY,CAAC,GAAI,WAAA,iBAAiB,mBAAmB,CAAC,EACtD,WAAY,CACV,UAAW,CAAE,gBAAiB,MAAM,MAAM,QAAQ,GAErD,CAAC,EAEK,gBAGD,sBAAsB,gBAAwB,CACpD,GAAI,gBACF,MAAO,CACL,oBAAqB,gBAAgB,WAlF7C,QAAA,aAAA,8GA6FA,GAAY,sBAAZ,AAAA,UAAY,sBAAoB,CAI9B,sBAAA,KAAA,OAKA,sBAAA,MAAA,QAKA,sBAAA,MAAA,QAKA,sBAAA,WAAA,aAKA,sBAAA,IAAA,MAKA,sBAAA,IAAA,MAKA,sBAAA,YAAA,cAKA,sBAAA,OAAA,SAKA,sBAAA,SAAA,UACF,GA7CY,qBAAA,QAAA,sBAAA,SAAA,qBAAoB,CAAA,EAAA",
  "names": []
}
