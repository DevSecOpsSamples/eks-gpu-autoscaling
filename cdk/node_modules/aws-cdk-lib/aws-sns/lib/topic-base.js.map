{
  "version": 3,
  "sources": ["topic-base.ts"],
  "sourcesContent": ["import * as notifications from '../../aws-codestarnotifications';\nimport * as iam from '../../aws-iam';\nimport { IResource, Resource, ResourceProps, Token } from '../../core';\nimport * as constructs from 'constructs';\nimport { TopicPolicy } from './policy';\nimport { ITopicSubscription } from './subscriber';\nimport { Subscription } from './subscription';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Represents an SNS topic\n */\nexport interface ITopic extends IResource, notifications.INotificationRuleTarget {\n  /**\n   * The ARN of the topic\n   *\n   * @attribute\n   */\n  readonly topicArn: string;\n\n  /**\n   * The name of the topic\n   *\n   * @attribute\n   */\n  readonly topicName: string;\n\n  /**\n   * Whether this topic is an Amazon SNS FIFO queue. If false, this is a standard topic.\n   *\n   * @attribute\n   */\n  readonly fifo: boolean;\n\n  /**\n   * Subscribe some endpoint to this topic\n   */\n  addSubscription(subscription: ITopicSubscription): void;\n\n  /**\n   * Adds a statement to the IAM resource policy associated with this topic.\n   *\n   * If this topic was created in this stack (`new Topic`), a topic policy\n   * will be automatically created upon the first call to `addToPolicy`. If\n   * the topic is imported (`Topic.import`), then this is a no-op.\n   */\n  addToResourcePolicy(statement: iam.PolicyStatement): iam.AddToResourcePolicyResult;\n\n  /**\n   * Grant topic publishing permissions to the given identity\n   */\n  grantPublish(identity: iam.IGrantable): iam.Grant;\n}\n\n/**\n * Either a new or imported Topic\n */\nexport abstract class TopicBase extends Resource implements ITopic {\n  public abstract readonly topicArn: string;\n\n  public abstract readonly topicName: string;\n\n  public abstract readonly fifo: boolean;\n\n  /**\n   * Controls automatic creation of policy objects.\n   *\n   * Set by subclasses.\n   */\n  protected abstract readonly autoCreatePolicy: boolean;\n\n  private policy?: TopicPolicy;\n\n  constructor(scope: Construct, id: string, props: ResourceProps = {}) {\n    super(scope, id, props);\n\n    this.node.addValidation({ validate: () => this.policy?.document.validateForResourcePolicy() ?? [] });\n  }\n\n  /**\n   * Subscribe some endpoint to this topic\n   */\n  public addSubscription(subscription: ITopicSubscription) {\n    const subscriptionConfig = subscription.bind(this);\n\n    const scope = subscriptionConfig.subscriberScope || this;\n    let id = subscriptionConfig.subscriberId;\n    if (Token.isUnresolved(subscriptionConfig.subscriberId)) {\n      id = this.nextTokenId(scope);\n    }\n\n    // We use the subscriber's id as the construct id. There's no meaning\n    // to subscribing the same subscriber twice on the same topic.\n    if (scope.node.tryFindChild(id)) {\n      throw new Error(`A subscription with id \"${id}\" already exists under the scope ${scope.node.path}`);\n    }\n\n    new Subscription(scope, id, {\n      topic: this,\n      ...subscriptionConfig,\n    });\n  }\n\n  /**\n   * Adds a statement to the IAM resource policy associated with this topic.\n   *\n   * If this topic was created in this stack (`new Topic`), a topic policy\n   * will be automatically created upon the first call to `addToPolicy`. If\n   * the topic is imported (`Topic.import`), then this is a no-op.\n   */\n  public addToResourcePolicy(statement: iam.PolicyStatement): iam.AddToResourcePolicyResult {\n    if (!this.policy && this.autoCreatePolicy) {\n      this.policy = new TopicPolicy(this, 'Policy', { topics: [this] });\n    }\n\n    if (this.policy) {\n      this.policy.document.addStatements(statement);\n      return { statementAdded: true, policyDependable: this.policy };\n    }\n    return { statementAdded: false };\n  }\n\n  /**\n   * Grant topic publishing permissions to the given identity\n   */\n  public grantPublish(grantee: iam.IGrantable) {\n    return iam.Grant.addToPrincipalOrResource({\n      grantee,\n      actions: ['sns:Publish'],\n      resourceArns: [this.topicArn],\n      resource: this,\n    });\n  }\n\n  /**\n   * Represents a notification target\n   * That allows SNS topic to associate with this rule target.\n   */\n  public bindAsNotificationRuleTarget(_scope: constructs.Construct): notifications.NotificationRuleTargetConfig {\n    // SNS topic need to grant codestar-notifications service to publish\n    // @see https://docs.aws.amazon.com/dtconsole/latest/userguide/set-up-sns.html\n    this.grantPublish(new iam.ServicePrincipal('codestar-notifications.amazonaws.com'));\n    return {\n      targetType: 'SNS',\n      targetAddress: this.topicArn,\n    };\n  }\n\n  private nextTokenId(scope: Construct) {\n    let nextSuffix = 1;\n    const re = /TokenSubscription:([\\d]*)/gm;\n    // Search through the construct and all of its children\n    // for previous subscriptions that match our regex pattern\n    for (const source of scope.node.findAll()) {\n      const m = re.exec(source.node.id); // Use regex to find a match\n      if (m !== null) { // if we found a match\n        const matchSuffix = parseInt(m[1], 10); // get the suffix for that match (as integer)\n        if (matchSuffix >= nextSuffix) { // check if the match suffix is larger or equal to currently proposed suffix\n          nextSuffix = matchSuffix + 1; // increment the suffix\n        }\n      }\n    }\n    return `TokenSubscription:${nextSuffix}`;\n  }\n\n}\n"],
  "mappings": "gNACA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EAEA,SAAA,QAAA,UAAA,EAEA,eAAA,QAAA,gBAAA,EAsDA,MAAsB,iBAAkB,QAAA,QAAQ,CAgB9C,YAAY,MAAkB,GAAY,MAAuB,CAAA,EAAE,CACjE,MAAM,MAAO,GAAI,KAAK,2DAEtB,KAAK,KAAK,cAAc,CAAE,SAAU,IAAK,CAAA,GAAA,IAAA,GAAA,MAAA,IAAA,IAAC,KAAK,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,SAAS,0BAAyB,KAAA,MAAA,KAAA,OAAA,GAAM,CAAA,CAAE,CAAA,CAAE,EAM9F,gBAAgB,aAAgC,8EACrD,KAAM,oBAAqB,aAAa,KAAK,IAAI,EAE3C,MAAQ,mBAAmB,iBAAmB,KACpD,GAAI,IAAK,mBAAmB,aAO5B,GANI,OAAA,MAAM,aAAa,mBAAmB,YAAY,GACpD,IAAK,KAAK,YAAY,KAAK,GAKzB,MAAM,KAAK,aAAa,EAAE,EAC5B,KAAM,IAAI,OAAM,2BAA2B,sCAAsC,MAAM,KAAK,MAAM,EAGpG,GAAI,gBAAA,aAAa,MAAO,GAAI,CAC1B,MAAO,QACJ,mBACJ,EAUI,oBAAoB,UAA8B,CAKvD,8EAJI,CAAC,KAAK,QAAU,KAAK,kBACvB,MAAK,OAAS,GAAI,UAAA,YAAY,KAAM,SAAU,CAAE,OAAQ,CAAC,IAAI,CAAC,CAAE,GAG9D,KAAK,OACP,MAAK,OAAO,SAAS,cAAc,SAAS,EACrC,CAAE,eAAgB,GAAM,iBAAkB,KAAK,MAAM,GAEvD,CAAE,eAAgB,EAAK,EAMzB,aAAa,QAAuB,wEAClC,IAAI,MAAM,yBAAyB,CACxC,QACA,QAAS,CAAC,aAAa,EACvB,aAAc,CAAC,KAAK,QAAQ,EAC5B,SAAU,KACX,EAOI,6BAA6B,OAA4B,CAG9D,YAAK,aAAa,GAAI,KAAI,iBAAiB,sCAAsC,CAAC,EAC3E,CACL,WAAY,MACZ,cAAe,KAAK,UAIhB,YAAY,MAAgB,CAClC,GAAI,YAAa,EACjB,KAAM,IAAK,8BAGX,SAAW,UAAU,OAAM,KAAK,QAAO,EAAI,CACzC,KAAM,GAAI,GAAG,KAAK,OAAO,KAAK,EAAE,EAChC,GAAI,IAAM,KAAM,CACd,KAAM,aAAc,SAAS,EAAE,GAAI,EAAE,EACrC,AAAI,aAAe,YACjB,YAAa,YAAc,IAIjC,MAAO,qBAAqB,cAzGhC,QAAA,UAAA",
  "names": []
}
