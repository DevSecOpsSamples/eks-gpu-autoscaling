{
  "version": 3,
  "sources": ["codestarnotifications.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-04-07T10:40:56.854Z\",\"fingerprint\":\"h8ZYAEvaJIEWuQA1CQ0KhdYhvtsj6qNE9BjWV1vEhvY=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n/**\n * Properties for defining a `CfnNotificationRule`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html\n */\nexport interface CfnNotificationRuleProps {\n\n    /**\n     * The level of detail to include in the notifications for this resource. `BASIC` will include only the contents of the event as it would appear in Amazon CloudWatch. `FULL` will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-detailtype\n     */\n    readonly detailType: string;\n\n    /**\n     * A list of event types associated with this notification rule. For a complete list of event types and IDs, see [Notification concepts](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api) in the *Developer Tools Console User Guide* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-eventtypeids\n     */\n    readonly eventTypeIds: string[];\n\n    /**\n     * The name for the notification rule. Notification rule names must be unique in your AWS account .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-name\n     */\n    readonly name: string;\n\n    /**\n     * The Amazon Resource Name (ARN) of the resource to associate with the notification rule. Supported resources include pipelines in AWS CodePipeline , repositories in AWS CodeCommit , and build projects in AWS CodeBuild .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-resource\n     */\n    readonly resource: string;\n\n    /**\n     * A list of Amazon Resource Names (ARNs) of AWS Chatbot topics and AWS Chatbot clients to associate with the notification rule.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-targets\n     */\n    readonly targets: Array<CfnNotificationRule.TargetProperty | cdk.IResolvable> | cdk.IResolvable;\n\n    /**\n     * `AWS::CodeStarNotifications::NotificationRule.CreatedBy`\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-createdby\n     */\n    readonly createdBy?: string;\n\n    /**\n     * `AWS::CodeStarNotifications::NotificationRule.EventTypeId`\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-eventtypeid\n     */\n    readonly eventTypeId?: string;\n\n    /**\n     * The status of the notification rule. The default value is `ENABLED` . If the status is set to `DISABLED` , notifications aren't sent for the notification rule.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-status\n     */\n    readonly status?: string;\n\n    /**\n     * A list of tags to apply to this notification rule. Key names cannot start with \" `aws` \".\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-tags\n     */\n    readonly tags?: any;\n\n    /**\n     * `AWS::CodeStarNotifications::NotificationRule.TargetAddress`\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-targetaddress\n     */\n    readonly targetAddress?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNotificationRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnNotificationRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNotificationRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('createdBy', cdk.validateString)(properties.createdBy));\n    errors.collect(cdk.propertyValidator('detailType', cdk.requiredValidator)(properties.detailType));\n    errors.collect(cdk.propertyValidator('detailType', cdk.validateString)(properties.detailType));\n    errors.collect(cdk.propertyValidator('eventTypeId', cdk.validateString)(properties.eventTypeId));\n    errors.collect(cdk.propertyValidator('eventTypeIds', cdk.requiredValidator)(properties.eventTypeIds));\n    errors.collect(cdk.propertyValidator('eventTypeIds', cdk.listValidator(cdk.validateString))(properties.eventTypeIds));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('resource', cdk.requiredValidator)(properties.resource));\n    errors.collect(cdk.propertyValidator('resource', cdk.validateString)(properties.resource));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('targetAddress', cdk.validateString)(properties.targetAddress));\n    errors.collect(cdk.propertyValidator('targets', cdk.requiredValidator)(properties.targets));\n    errors.collect(cdk.propertyValidator('targets', cdk.listValidator(CfnNotificationRule_TargetPropertyValidator))(properties.targets));\n    return errors.wrap('supplied properties not correct for \"CfnNotificationRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeStarNotifications::NotificationRule` resource\n *\n * @param properties - the TypeScript properties of a `CfnNotificationRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeStarNotifications::NotificationRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNotificationRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNotificationRulePropsValidator(properties).assertSuccess();\n    return {\n        DetailType: cdk.stringToCloudFormation(properties.detailType),\n        EventTypeIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.eventTypeIds),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Resource: cdk.stringToCloudFormation(properties.resource),\n        Targets: cdk.listMapper(cfnNotificationRuleTargetPropertyToCloudFormation)(properties.targets),\n        CreatedBy: cdk.stringToCloudFormation(properties.createdBy),\n        EventTypeId: cdk.stringToCloudFormation(properties.eventTypeId),\n        Status: cdk.stringToCloudFormation(properties.status),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        TargetAddress: cdk.stringToCloudFormation(properties.targetAddress),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNotificationRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNotificationRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotificationRuleProps>();\n    ret.addPropertyResult('detailType', 'DetailType', cfn_parse.FromCloudFormation.getString(properties.DetailType));\n    ret.addPropertyResult('eventTypeIds', 'EventTypeIds', cfn_parse.FromCloudFormation.getStringArray(properties.EventTypeIds));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('resource', 'Resource', cfn_parse.FromCloudFormation.getString(properties.Resource));\n    ret.addPropertyResult('targets', 'Targets', cfn_parse.FromCloudFormation.getArray(CfnNotificationRuleTargetPropertyFromCloudFormation)(properties.Targets));\n    ret.addPropertyResult('createdBy', 'CreatedBy', properties.CreatedBy != null ? cfn_parse.FromCloudFormation.getString(properties.CreatedBy) : undefined);\n    ret.addPropertyResult('eventTypeId', 'EventTypeId', properties.EventTypeId != null ? cfn_parse.FromCloudFormation.getString(properties.EventTypeId) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('targetAddress', 'TargetAddress', properties.TargetAddress != null ? cfn_parse.FromCloudFormation.getString(properties.TargetAddress) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::CodeStarNotifications::NotificationRule`\n *\n * Creates a notification rule for a resource. The rule specifies the events you want notifications about and the targets (such as AWS Chatbot topics or AWS Chatbot clients configured for Slack) where you want to receive them.\n *\n * @cloudformationResource AWS::CodeStarNotifications::NotificationRule\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html\n */\nexport class CfnNotificationRule extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::CodeStarNotifications::NotificationRule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNotificationRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNotificationRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNotificationRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     *\n     * @cloudformationAttribute Arn\n     */\n    public readonly attrArn: string;\n\n    /**\n     * The level of detail to include in the notifications for this resource. `BASIC` will include only the contents of the event as it would appear in Amazon CloudWatch. `FULL` will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-detailtype\n     */\n    public detailType: string;\n\n    /**\n     * A list of event types associated with this notification rule. For a complete list of event types and IDs, see [Notification concepts](https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api) in the *Developer Tools Console User Guide* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-eventtypeids\n     */\n    public eventTypeIds: string[];\n\n    /**\n     * The name for the notification rule. Notification rule names must be unique in your AWS account .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-name\n     */\n    public name: string;\n\n    /**\n     * The Amazon Resource Name (ARN) of the resource to associate with the notification rule. Supported resources include pipelines in AWS CodePipeline , repositories in AWS CodeCommit , and build projects in AWS CodeBuild .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-resource\n     */\n    public resource: string;\n\n    /**\n     * A list of Amazon Resource Names (ARNs) of AWS Chatbot topics and AWS Chatbot clients to associate with the notification rule.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-targets\n     */\n    public targets: Array<CfnNotificationRule.TargetProperty | cdk.IResolvable> | cdk.IResolvable;\n\n    /**\n     * `AWS::CodeStarNotifications::NotificationRule.CreatedBy`\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-createdby\n     */\n    public createdBy: string | undefined;\n\n    /**\n     * `AWS::CodeStarNotifications::NotificationRule.EventTypeId`\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-eventtypeid\n     */\n    public eventTypeId: string | undefined;\n\n    /**\n     * The status of the notification rule. The default value is `ENABLED` . If the status is set to `DISABLED` , notifications aren't sent for the notification rule.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-status\n     */\n    public status: string | undefined;\n\n    /**\n     * A list of tags to apply to this notification rule. Key names cannot start with \" `aws` \".\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-tags\n     */\n    public readonly tags: cdk.TagManager;\n\n    /**\n     * `AWS::CodeStarNotifications::NotificationRule.TargetAddress`\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-targetaddress\n     */\n    public targetAddress: string | undefined;\n\n    /**\n     * Create a new `AWS::CodeStarNotifications::NotificationRule`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnNotificationRuleProps) {\n        super(scope, id, { type: CfnNotificationRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'detailType', this);\n        cdk.requireProperty(props, 'eventTypeIds', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'resource', this);\n        cdk.requireProperty(props, 'targets', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.detailType = props.detailType;\n        this.eventTypeIds = props.eventTypeIds;\n        this.name = props.name;\n        this.resource = props.resource;\n        this.targets = props.targets;\n        this.createdBy = props.createdBy;\n        this.eventTypeId = props.eventTypeId;\n        this.status = props.status;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::CodeStarNotifications::NotificationRule\", props.tags, { tagPropertyName: 'tags' });\n        this.targetAddress = props.targetAddress;\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNotificationRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            detailType: this.detailType,\n            eventTypeIds: this.eventTypeIds,\n            name: this.name,\n            resource: this.resource,\n            targets: this.targets,\n            createdBy: this.createdBy,\n            eventTypeId: this.eventTypeId,\n            status: this.status,\n            tags: this.tags.renderTags(),\n            targetAddress: this.targetAddress,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNotificationRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnNotificationRule {\n    /**\n     * Information about the AWS Chatbot topics or AWS Chatbot clients associated with a notification rule.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codestarnotifications-notificationrule-target.html\n     */\n    export interface TargetProperty {\n        /**\n         * The Amazon Resource Name (ARN) of the AWS Chatbot topic or AWS Chatbot client.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codestarnotifications-notificationrule-target.html#cfn-codestarnotifications-notificationrule-target-targetaddress\n         */\n        readonly targetAddress: string;\n        /**\n         * The target type. Can be an Amazon Simple Notification Service topic or AWS Chatbot client.\n         *\n         * - Amazon Simple Notification Service topics are specified as `SNS` .\n         * - AWS Chatbot clients are specified as `AWSChatbotSlack` .\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codestarnotifications-notificationrule-target.html#cfn-codestarnotifications-notificationrule-target-targettype\n         */\n        readonly targetType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetProperty`\n *\n * @param properties - the TypeScript properties of a `TargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNotificationRule_TargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('targetAddress', cdk.requiredValidator)(properties.targetAddress));\n    errors.collect(cdk.propertyValidator('targetAddress', cdk.validateString)(properties.targetAddress));\n    errors.collect(cdk.propertyValidator('targetType', cdk.requiredValidator)(properties.targetType));\n    errors.collect(cdk.propertyValidator('targetType', cdk.validateString)(properties.targetType));\n    return errors.wrap('supplied properties not correct for \"TargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::CodeStarNotifications::NotificationRule.Target` resource\n *\n * @param properties - the TypeScript properties of a `TargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::CodeStarNotifications::NotificationRule.Target` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNotificationRuleTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNotificationRule_TargetPropertyValidator(properties).assertSuccess();\n    return {\n        TargetAddress: cdk.stringToCloudFormation(properties.targetAddress),\n        TargetType: cdk.stringToCloudFormation(properties.targetType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNotificationRuleTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNotificationRule.TargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotificationRule.TargetProperty>();\n    ret.addPropertyResult('targetAddress', 'TargetAddress', cfn_parse.FromCloudFormation.getString(properties.TargetAddress));\n    ret.addPropertyResult('targetType', 'TargetType', cfn_parse.FromCloudFormation.getString(properties.TargetType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
