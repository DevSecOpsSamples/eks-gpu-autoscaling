{
  "version": 3,
  "sources": ["notification-rule.ts"],
  "sourcesContent": ["import { IResource, Resource, Names } from '../../core';\nimport * as constructs from 'constructs';\nimport { CfnNotificationRule } from './codestarnotifications.generated';\nimport { INotificationRuleSource } from './notification-rule-source';\nimport { INotificationRuleTarget, NotificationRuleTargetConfig } from './notification-rule-target';\n\n/**\n * The level of detail to include in the notifications for this resource.\n */\nexport enum DetailType {\n  /**\n   * BASIC will include only the contents of the event as it would appear in AWS CloudWatch\n   */\n  BASIC = 'BASIC',\n\n  /**\n   * FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.\n   */\n  FULL = 'FULL',\n}\n\n/**\n * Standard set of options for `notifyOnXxx` codestar notification handler on construct\n */\nexport interface NotificationRuleOptions {\n  /**\n   * The name for the notification rule.\n   * Notification rule names must be unique in your AWS account.\n   *\n   * @default - generated from the `id`\n   */\n  readonly notificationRuleName?: string;\n\n  /**\n   * The status of the notification rule.\n   * If the enabled is set to DISABLED, notifications aren't sent for the notification rule.\n   *\n   * @default true\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * The level of detail to include in the notifications for this resource.\n   * BASIC will include only the contents of the event as it would appear in AWS CloudWatch.\n   * FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.\n   *\n   * @default DetailType.FULL\n   */\n  readonly detailType?: DetailType;\n}\n\n/**\n * Properties for a new notification rule\n */\nexport interface NotificationRuleProps extends NotificationRuleOptions {\n  /**\n   * A list of event types associated with this notification rule.\n   * For a complete list of event types and IDs, see Notification concepts in the Developer Tools Console User Guide.\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#concepts-api\n   */\n  readonly events: string[];\n\n  /**\n   * The Amazon Resource Name (ARN) of the resource to associate with the notification rule.\n   * Currently, Supported sources include pipelines in AWS CodePipeline, build projects in AWS CodeBuild, and repositories in AWS CodeCommit in this L2 constructor.\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html#cfn-codestarnotifications-notificationrule-resource\n   */\n  readonly source: INotificationRuleSource;\n\n  /**\n   * The targets to register for the notification destination.\n   *\n   * @default - No targets are added to the rule. Use `addTarget()` to add a target.\n   */\n  readonly targets?: INotificationRuleTarget[];\n}\n\n/**\n * Represents a notification rule\n */\nexport interface INotificationRule extends IResource {\n\n  /**\n   * The ARN of the notification rule (i.e. arn:aws:codestar-notifications:::notificationrule/01234abcde)\n   *\n   * @attribute\n   */\n  readonly notificationRuleArn: string;\n\n  /**\n   * Adds target to notification rule\n   *\n   * @param target The SNS topic or AWS Chatbot Slack target\n   * @returns boolean - return true if it had any effect\n   */\n  addTarget(target: INotificationRuleTarget): boolean;\n}\n\n/**\n * A new notification rule\n *\n * @resource AWS::CodeStarNotifications::NotificationRule\n */\nexport class NotificationRule extends Resource implements INotificationRule {\n  /**\n   * Import an existing notification rule provided an ARN\n   * @param scope The parent creating construct\n   * @param id The construct's name\n   * @param notificationRuleArn Notification rule ARN (i.e. arn:aws:codestar-notifications:::notificationrule/01234abcde)\n   */\n  public static fromNotificationRuleArn(scope: constructs.Construct, id: string, notificationRuleArn: string): INotificationRule {\n    class Import extends Resource implements INotificationRule {\n      readonly notificationRuleArn = notificationRuleArn;\n\n      public addTarget(_target: INotificationRuleTarget): boolean {\n        return false;\n      }\n    }\n\n    return new Import(scope, id, {\n      environmentFromArn: notificationRuleArn,\n    });\n  }\n\n  /**\n   * @attribute\n   */\n  public readonly notificationRuleArn: string;\n\n  private readonly targets: NotificationRuleTargetConfig[] = [];\n\n  private readonly events: string[] = [];\n\n  constructor(scope: constructs.Construct, id: string, props: NotificationRuleProps) {\n    super(scope, id);\n\n    const source = props.source.bindAsNotificationRuleSource(this);\n\n    this.addEvents(props.events);\n\n    const resource = new CfnNotificationRule(this, 'Resource', {\n      // It has a 64 characters limit for the name\n      name: props.notificationRuleName || Names.uniqueId(this).slice(-64),\n      detailType: props.detailType || DetailType.FULL,\n      targets: this.targets,\n      eventTypeIds: this.events,\n      resource: source.sourceArn,\n      status: props.enabled !== undefined\n        ? (props.enabled ? 'ENABLED' : 'DISABLED')\n        : undefined,\n    });\n\n    this.notificationRuleArn = resource.ref;\n\n    props.targets?.forEach((target) => {\n      this.addTarget(target);\n    });\n  }\n\n  /**\n   * Adds target to notification rule\n   * @param target The SNS topic or AWS Chatbot Slack target\n   */\n  public addTarget(target: INotificationRuleTarget): boolean {\n    this.targets.push(target.bindAsNotificationRuleTarget(this));\n    return true;\n  }\n\n  /**\n   * Adds events to notification rule\n   *\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-pipeline\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-buildproject\n   * @param events The list of event types for AWS Codebuild and AWS CodePipeline\n   */\n  private addEvents(events: string[]): void {\n    events.forEach((event) => {\n      if (this.events.includes(event)) {\n        return;\n      }\n\n      this.events.push(event);\n    });\n  }\n}\n"],
  "mappings": "0OAAA,OAAA,QAAA,YAAA,EAEA,kCAAA,QAAA,mCAAA,EAOA,GAAY,YAAZ,AAAA,UAAY,YAAU,CAIpB,YAAA,MAAA,QAKA,YAAA,KAAA,MACF,GAVY,WAAA,QAAA,YAAA,SAAA,WAAU,CAAA,EAAA,EA8FtB,MAAa,wBAAyB,QAAA,QAAQ,CA8B5C,YAAY,MAA6B,GAAY,MAA4B,QAC/E,MAAM,MAAO,EAAE,EALA,KAAA,QAA0C,CAAA,EAE1C,KAAA,OAAmB,CAAA,6FAKlC,KAAM,QAAS,MAAM,OAAO,6BAA6B,IAAI,EAE7D,KAAK,UAAU,MAAM,MAAM,EAE3B,KAAM,UAAW,GAAI,mCAAA,oBAAoB,KAAM,WAAY,CAEzD,KAAM,MAAM,sBAAwB,OAAA,MAAM,SAAS,IAAI,EAAE,MAAM,GAAG,EAClE,WAAY,MAAM,YAAc,WAAW,KAC3C,QAAS,KAAK,QACd,aAAc,KAAK,OACnB,SAAU,OAAO,UACjB,OAAQ,MAAM,UAAY,OACrB,MAAM,QAAU,UAAY,WAC7B,OACL,EAED,KAAK,oBAAsB,SAAS,IAEpC,IAAA,MAAM,WAAO,MAAA,KAAA,QAAA,GAAE,QAAQ,AAAC,QAAU,CAChC,KAAK,UAAU,MAAM,CACvB,CAAC,QA9CW,yBAAwB,MAA6B,GAAY,oBAA2B,CACxG,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACW,KAAA,oBAAsB,mBAKjC,CAHS,UAAU,QAAgC,CAC/C,MAAO,EACT,EAGF,MAAO,IAAI,QAAO,MAAO,GAAI,CAC3B,mBAAoB,oBACrB,EA0CI,UAAU,OAA+B,sGAC9C,KAAK,QAAQ,KAAK,OAAO,6BAA6B,IAAI,CAAC,EACpD,GAUD,UAAU,OAAgB,CAChC,OAAO,QAAQ,AAAC,OAAS,CACvB,AAAI,KAAK,OAAO,SAAS,KAAK,GAI9B,KAAK,OAAO,KAAK,KAAK,CACxB,CAAC,GA/EL,QAAA,iBAAA",
  "names": []
}
