{
  "version": 3,
  "sources": ["via-service-principal.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\n\n/**\n * A principal to allow access to a key if it's being used through another AWS service\n */\nexport class ViaServicePrincipal extends iam.PrincipalBase {\n  private readonly basePrincipal: iam.IPrincipal;\n\n  constructor(private readonly serviceName: string, basePrincipal?: iam.IPrincipal) {\n    super();\n    this.basePrincipal = basePrincipal ? basePrincipal : new iam.AnyPrincipal();\n  }\n\n  public get policyFragment(): iam.PrincipalPolicyFragment {\n    // Make a copy of the base policyFragment to add a condition to it\n    const base = this.basePrincipal.policyFragment;\n    const conditions = Object.assign({}, base.conditions);\n\n    if (conditions.StringEquals) {\n      conditions.StringEquals = Object.assign({ 'kms:ViaService': this.serviceName }, conditions.StringEquals);\n    } else {\n      conditions.StringEquals = { 'kms:ViaService': this.serviceName };\n    }\n\n    return { principalJson: base.principalJson, conditions };\n  }\n}\n"],
  "mappings": "0NAAA,IAAA,QAAA,eAAA,EAKA,MAAa,2BAA4B,KAAI,aAAa,CAGxD,YAA6B,YAAqB,cAA8B,CAC9E,MAAK,EADsB,KAAA,YAAA,kFAE3B,KAAK,cAAgB,eAAgC,GAAI,KAAI,gBAGpD,iBAAc,CAEvB,KAAM,MAAO,KAAK,cAAc,eAC1B,WAAa,OAAO,OAAO,CAAA,EAAI,KAAK,UAAU,EAEpD,MAAI,YAAW,aACb,WAAW,aAAe,OAAO,OAAO,CAAE,iBAAkB,KAAK,WAAW,EAAI,WAAW,YAAY,EAEvG,WAAW,aAAe,CAAE,iBAAkB,KAAK,WAAW,EAGzD,CAAE,cAAe,KAAK,cAAe,UAAU,GAnB1D,QAAA,oBAAA",
  "names": []
}
