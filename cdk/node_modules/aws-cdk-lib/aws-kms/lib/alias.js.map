{
  "version": 3,
  "sources": ["alias.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { RemovalPolicy, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { IKey } from './key';\nimport { CfnAlias } from './kms.generated';\n\nconst REQUIRED_ALIAS_PREFIX = 'alias/';\nconst DISALLOWED_PREFIX = REQUIRED_ALIAS_PREFIX + 'aws/';\n\n/**\n * A KMS Key alias.\n * An alias can be used in all places that expect a key.\n */\nexport interface IAlias extends IKey {\n  /**\n   * The name of the alias.\n   *\n   * @attribute\n   */\n  readonly aliasName: string;\n\n  /**\n   * The Key to which the Alias refers.\n   *\n   * @attribute\n   */\n  readonly aliasTargetKey: IKey;\n}\n\n/**\n * Construction properties for a KMS Key Alias object.\n */\nexport interface AliasProps {\n  /**\n   * The name of the alias. The name must start with alias followed by a\n   * forward slash, such as alias/. You can't specify aliases that begin with\n   * alias/AWS. These aliases are reserved.\n   */\n  readonly aliasName: string;\n\n  /**\n   * The ID of the key for which you are creating the alias. Specify the key's\n   * globally unique identifier or Amazon Resource Name (ARN). You can't\n   * specify another alias.\n   */\n  readonly targetKey: IKey;\n\n  /**\n   * Policy to apply when the alias is removed from this stack.\n   *\n   * @default - The alias will be deleted\n   */\n  readonly removalPolicy?: RemovalPolicy;\n}\n\nabstract class AliasBase extends Resource implements IAlias {\n  public abstract readonly aliasName: string;\n\n  public abstract readonly aliasTargetKey: IKey;\n\n  public get keyArn(): string {\n    return Stack.of(this).formatArn({\n      service: 'kms',\n      // aliasName already contains the '/'\n      resource: this.aliasName,\n    });\n  }\n\n  public get keyId(): string {\n    return this.aliasName;\n  }\n\n  public addAlias(alias: string): Alias {\n    return this.aliasTargetKey.addAlias(alias);\n  }\n\n  public addToResourcePolicy(statement: iam.PolicyStatement, allowNoOp?: boolean): iam.AddToResourcePolicyResult {\n    return this.aliasTargetKey.addToResourcePolicy(statement, allowNoOp);\n  }\n\n  public grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant {\n    return this.aliasTargetKey.grant(grantee, ...actions);\n  }\n\n  public grantDecrypt(grantee: iam.IGrantable): iam.Grant {\n    return this.aliasTargetKey.grantDecrypt(grantee);\n  }\n\n  public grantEncrypt(grantee: iam.IGrantable): iam.Grant {\n    return this.aliasTargetKey.grantEncrypt(grantee);\n  }\n\n  public grantEncryptDecrypt(grantee: iam.IGrantable): iam.Grant {\n    return this.aliasTargetKey.grantEncryptDecrypt(grantee);\n  }\n}\n\n/**\n * Properties of a reference to an existing KMS Alias\n */\nexport interface AliasAttributes {\n  /**\n   * Specifies the alias name. This value must begin with alias/ followed by a name (i.e. alias/ExampleAlias)\n   */\n  readonly aliasName: string;\n\n  /**\n   * The customer master key (CMK) to which the Alias refers.\n   */\n  readonly aliasTargetKey: IKey;\n}\n\n/**\n * Defines a display name for a customer master key (CMK) in AWS Key Management\n * Service (AWS KMS). Using an alias to refer to a key can help you simplify key\n * management. For example, when rotating keys, you can just update the alias\n * mapping instead of tracking and changing key IDs. For more information, see\n * Working with Aliases in the AWS Key Management Service Developer Guide.\n *\n * You can also add an alias for a key by calling `key.addAlias(alias)`.\n *\n * @resource AWS::KMS::Alias\n */\nexport class Alias extends AliasBase {\n  /**\n   * Import an existing KMS Alias defined outside the CDK app.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param attrs the properties of the referenced KMS Alias\n   */\n  public static fromAliasAttributes(scope: Construct, id: string, attrs: AliasAttributes): IAlias {\n    class _Alias extends AliasBase {\n      public get aliasName() { return attrs.aliasName; }\n      public get aliasTargetKey() { return attrs.aliasTargetKey; }\n    }\n    return new _Alias(scope, id);\n  }\n\n  /**\n   * Import an existing KMS Alias defined outside the CDK app, by the alias name. This method should be used\n   * instead of 'fromAliasAttributes' when the underlying KMS Key ARN is not available.\n   * This Alias will not have a direct reference to the KMS Key, so addAlias and grant* methods are not supported.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param aliasName The full name of the KMS Alias (e.g., 'alias/aws/s3', 'alias/myKeyAlias').\n   */\n  public static fromAliasName(scope: Construct, id: string, aliasName: string): IAlias {\n    class Import extends Resource implements IAlias {\n      public readonly keyArn = Stack.of(this).formatArn({ service: 'kms', resource: aliasName });\n      public readonly keyId = aliasName;\n      public readonly aliasName = aliasName;\n      public get aliasTargetKey(): IKey { throw new Error('Cannot access aliasTargetKey on an Alias imported by Alias.fromAliasName().'); }\n      public addAlias(_alias: string): Alias { throw new Error('Cannot call addAlias on an Alias imported by Alias.fromAliasName().'); }\n      public addToResourcePolicy(_statement: iam.PolicyStatement, _allowNoOp?: boolean): iam.AddToResourcePolicyResult {\n        return { statementAdded: false };\n      }\n      public grant(grantee: iam.IGrantable, ..._actions: string[]): iam.Grant { return iam.Grant.drop(grantee, ''); }\n      public grantDecrypt(grantee: iam.IGrantable): iam.Grant { return iam.Grant.drop(grantee, ''); }\n      public grantEncrypt(grantee: iam.IGrantable): iam.Grant { return iam.Grant.drop(grantee, ''); }\n      public grantEncryptDecrypt(grantee: iam.IGrantable): iam.Grant { return iam.Grant.drop(grantee, ''); }\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly aliasName: string;\n  public readonly aliasTargetKey: IKey;\n\n  constructor(scope: Construct, id: string, props: AliasProps) {\n    let aliasName = props.aliasName;\n\n    if (!Token.isUnresolved(aliasName)) {\n      if (!aliasName.startsWith(REQUIRED_ALIAS_PREFIX)) {\n        aliasName = REQUIRED_ALIAS_PREFIX + aliasName;\n      }\n\n      if (aliasName === REQUIRED_ALIAS_PREFIX) {\n        throw new Error(`Alias must include a value after \"${REQUIRED_ALIAS_PREFIX}\": ${aliasName}`);\n      }\n\n      if (aliasName.toLocaleLowerCase().startsWith(DISALLOWED_PREFIX)) {\n        throw new Error(`Alias cannot start with ${DISALLOWED_PREFIX}: ${aliasName}`);\n      }\n\n      if (!aliasName.match(/^[a-zA-Z0-9:/_-]{1,256}$/)) {\n        throw new Error('Alias name must be between 1 and 256 characters in a-zA-Z0-9:/_-');\n      }\n    }\n\n    super(scope, id, {\n      physicalName: aliasName,\n    });\n\n    this.aliasTargetKey = props.targetKey;\n\n    const resource = new CfnAlias(this, 'Resource', {\n      aliasName: this.physicalName,\n      targetKeyId: this.aliasTargetKey.keyArn,\n    });\n\n    this.aliasName = this.getResourceNameAttribute(resource.aliasName);\n\n    if (props.removalPolicy) {\n      resource.applyRemovalPolicy(props.removalPolicy);\n    }\n  }\n\n  protected generatePhysicalName(): string {\n    return REQUIRED_ALIAS_PREFIX + super.generatePhysicalName();\n  }\n}\n"],
  "mappings": "4MAAA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EAGA,gBAAA,QAAA,iBAAA,EAEM,sBAAwB,SACxB,kBAAoB,sBAAwB,OAgDlD,MAAe,iBAAkB,QAAA,QAAQ,IAK5B,SAAM,CACf,MAAO,QAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CAC9B,QAAS,MAET,SAAU,KAAK,UAChB,KAGQ,QAAK,CACd,MAAO,MAAK,UAGP,SAAS,MAAa,CAC3B,MAAO,MAAK,eAAe,SAAS,KAAK,EAGpC,oBAAoB,UAAgC,UAAmB,CAC5E,MAAO,MAAK,eAAe,oBAAoB,UAAW,SAAS,EAG9D,MAAM,WAA4B,QAAiB,CACxD,MAAO,MAAK,eAAe,MAAM,QAAS,GAAG,OAAO,EAG/C,aAAa,QAAuB,CACzC,MAAO,MAAK,eAAe,aAAa,OAAO,EAG1C,aAAa,QAAuB,CACzC,MAAO,MAAK,eAAe,aAAa,OAAO,EAG1C,oBAAoB,QAAuB,CAChD,MAAO,MAAK,eAAe,oBAAoB,OAAO,GA8B1D,MAAa,aAAc,UAAS,CA+ClC,YAAY,MAAkB,GAAY,MAAiB,+DACzD,GAAI,WAAY,MAAM,UAEtB,GAAI,CAAC,OAAA,MAAM,aAAa,SAAS,EAAG,CAKlC,GAJK,UAAU,WAAW,qBAAqB,GAC7C,WAAY,sBAAwB,WAGlC,YAAc,sBAChB,KAAM,IAAI,OAAM,qCAAqC,2BAA2B,WAAW,EAG7F,GAAI,UAAU,kBAAiB,EAAG,WAAW,iBAAiB,EAC5D,KAAM,IAAI,OAAM,2BAA2B,sBAAsB,WAAW,EAG9E,GAAI,CAAC,UAAU,MAAM,0BAA0B,EAC7C,KAAM,IAAI,OAAM,kEAAkE,EAItF,MAAM,MAAO,GAAI,CACf,aAAc,UACf,EAED,KAAK,eAAiB,MAAM,UAE5B,KAAM,UAAW,GAAI,iBAAA,SAAS,KAAM,WAAY,CAC9C,UAAW,KAAK,aAChB,YAAa,KAAK,eAAe,OAClC,EAED,KAAK,UAAY,KAAK,yBAAyB,SAAS,SAAS,EAE7D,MAAM,eACR,SAAS,mBAAmB,MAAM,aAAa,QA1ErC,qBAAoB,MAAkB,GAAY,MAAsB,oEACpF,MAAM,eAAe,UAAS,IACjB,YAAS,CAAK,MAAO,OAAM,SAAW,IACtC,iBAAc,CAAK,MAAO,OAAM,cAAgB,EAE7D,MAAO,IAAI,SAAO,MAAO,EAAE,QAYf,eAAc,MAAkB,GAAY,UAAiB,CACzE,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,OAAS,OAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CAAE,QAAS,MAAO,SAAU,SAAS,CAAE,EACzE,KAAA,MAAQ,UACR,KAAA,UAAY,SAU9B,IATa,iBAAc,CAAW,KAAM,IAAI,OAAM,6EAA6E,CAAG,CAC7H,SAAS,OAAc,CAAW,KAAM,IAAI,OAAM,qEAAqE,CAAG,CAC1H,oBAAoB,WAAiC,WAAoB,CAC9E,MAAO,CAAE,eAAgB,EAAK,CAChC,CACO,MAAM,WAA4B,SAAkB,CAAe,MAAO,KAAI,MAAM,KAAK,QAAS,EAAE,CAAG,CACvG,aAAa,QAAuB,CAAe,MAAO,KAAI,MAAM,KAAK,QAAS,EAAE,CAAG,CACvF,aAAa,QAAuB,CAAe,MAAO,KAAI,MAAM,KAAK,QAAS,EAAE,CAAG,CACvF,oBAAoB,QAAuB,CAAe,MAAO,KAAI,MAAM,KAAK,QAAS,EAAE,CAAG,EAGvG,MAAO,IAAI,QAAO,MAAO,EAAE,EA6CnB,sBAAoB,CAC5B,MAAO,uBAAwB,MAAM,qBAAoB,GAvF7D,QAAA,MAAA",
  "names": []
}
