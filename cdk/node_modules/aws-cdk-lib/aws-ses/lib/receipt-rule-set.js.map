{
  "version": 3,
  "sources": ["receipt-rule-set.ts"],
  "sourcesContent": ["import { IResource, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { DropSpamReceiptRule, ReceiptRule, ReceiptRuleOptions } from './receipt-rule';\nimport { CfnReceiptRuleSet } from './ses.generated';\n\n/**\n * A receipt rule set.\n */\nexport interface IReceiptRuleSet extends IResource {\n  /**\n   * The receipt rule set name.\n   * @attribute\n   */\n  readonly receiptRuleSetName: string;\n\n  /**\n   * Adds a new receipt rule in this rule set. The new rule is added after\n   * the last added rule unless `after` is specified.\n   */\n  addRule(id: string, options?: ReceiptRuleOptions): ReceiptRule;\n}\n\n/**\n * Construction properties for a ReceiptRuleSet.\n */\nexport interface ReceiptRuleSetProps {\n  /**\n   * The name for the receipt rule set.\n   *\n   * @default - A CloudFormation generated name.\n   */\n  readonly receiptRuleSetName?: string;\n\n  /**\n   * The list of rules to add to this rule set. Rules are added in the same\n   * order as they appear in the list.\n   *\n   * @default - No rules are added to the rule set.\n   */\n  readonly rules?: ReceiptRuleOptions[]\n\n  /**\n   * Whether to add a first rule to stop processing messages\n   * that have at least one spam indicator.\n   *\n   * @default false\n   */\n  readonly dropSpam?: boolean;\n}\n\n/**\n * A new or imported receipt rule set.\n */\nabstract class ReceiptRuleSetBase extends Resource implements IReceiptRuleSet {\n  public abstract readonly receiptRuleSetName: string;\n\n  private lastAddedRule?: ReceiptRule;\n\n  /**\n   * Adds a new receipt rule in this rule set. The new rule is added after\n   * the last added rule unless `after` is specified.\n   */\n  public addRule(id: string, options?: ReceiptRuleOptions): ReceiptRule {\n    this.lastAddedRule = new ReceiptRule(this, id, {\n      after: this.lastAddedRule ?? undefined,\n      ruleSet: this,\n      ...options,\n    });\n\n    return this.lastAddedRule;\n  }\n\n  /**\n   * Adds a drop spam rule\n   */\n  protected addDropSpamRule(): void {\n    const dropSpam = new DropSpamReceiptRule(this, 'DropSpam', {\n      ruleSet: this,\n    });\n    this.lastAddedRule = dropSpam.rule;\n  }\n}\n\n/**\n * A new receipt rule set.\n */\nexport class ReceiptRuleSet extends ReceiptRuleSetBase {\n  /**\n   * Import an exported receipt rule set.\n   */\n  public static fromReceiptRuleSetName(scope: Construct, id: string, receiptRuleSetName: string): IReceiptRuleSet {\n    class Import extends ReceiptRuleSetBase implements IReceiptRuleSet {\n      public readonly receiptRuleSetName = receiptRuleSetName;\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly receiptRuleSetName: string;\n\n  constructor(scope: Construct, id: string, props: ReceiptRuleSetProps = {}) {\n    super(scope, id, {\n      physicalName: props.receiptRuleSetName,\n    });\n\n    const resource = new CfnReceiptRuleSet(this, 'Resource', {\n      ruleSetName: this.physicalName,\n    });\n\n    this.receiptRuleSetName = resource.ref;\n\n    if (props) {\n      if (props.dropSpam) {\n        this.addDropSpamRule();\n      }\n\n      const rules = props.rules || [];\n      rules.forEach((ruleOption, idx) => this.addRule(`Rule${idx}`, ruleOption));\n    }\n  }\n}\n"],
  "mappings": "qNAAA,OAAA,QAAA,YAAA,EAEA,eAAA,QAAA,gBAAA,EACA,gBAAA,QAAA,iBAAA,EAkDA,MAAe,0BAA2B,QAAA,QAAQ,CASzC,QAAQ,GAAY,QAA4B,QACrD,YAAK,cAAgB,GAAI,gBAAA,YAAY,KAAM,GAAI,CAC7C,MAAK,IAAE,KAAK,iBAAa,MAAA,KAAA,OAAA,GAAI,OAC7B,QAAS,QACN,QACJ,EAEM,KAAK,cAMJ,iBAAe,CACvB,KAAM,UAAW,GAAI,gBAAA,oBAAoB,KAAM,WAAY,CACzD,QAAS,KACV,EACD,KAAK,cAAgB,SAAS,MAOlC,MAAa,sBAAuB,mBAAkB,CAapD,YAAY,MAAkB,GAAY,MAA6B,CAAA,EAAE,CACvE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,mBACrB,yEAED,KAAM,UAAW,GAAI,iBAAA,kBAAkB,KAAM,WAAY,CACvD,YAAa,KAAK,aACnB,EAED,KAAK,mBAAqB,SAAS,IAE/B,OACE,OAAM,UACR,KAAK,gBAAe,EAItB,AADc,OAAM,OAAS,CAAA,GACvB,QAAQ,CAAC,WAAY,MAAQ,KAAK,QAAQ,OAAO,MAAO,UAAU,CAAC,SA1B/D,wBAAuB,MAAkB,GAAY,mBAA0B,CAC3F,MAAM,cAAe,mBAAkB,CAAvC,aAAA,qBACkB,KAAA,mBAAqB,kBACvC,EACA,MAAO,IAAI,QAAO,MAAO,EAAE,GAR/B,QAAA,eAAA",
  "names": []
}
