{
  "version": 3,
  "sources": ["receipt-rule.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport * as lambda from '../../aws-lambda';\nimport { Aws, IResource, Lazy, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { IReceiptRuleAction } from './receipt-rule-action';\nimport { IReceiptRuleSet } from './receipt-rule-set';\nimport { CfnReceiptRule } from './ses.generated';\n\n/**\n * A receipt rule.\n */\nexport interface IReceiptRule extends IResource {\n  /**\n   * The name of the receipt rule.\n   * @attribute\n   */\n  readonly receiptRuleName: string;\n}\n\n/**\n * The type of TLS policy for a receipt rule.\n */\nexport enum TlsPolicy {\n  /**\n   * Do not check for TLS.\n   */\n  OPTIONAL = 'Optional',\n\n  /**\n   * Bounce emails that are not received over TLS.\n   */\n  REQUIRE = 'Require'\n}\n\n/**\n * Options to add a receipt rule to a receipt rule set.\n */\nexport interface ReceiptRuleOptions {\n  /**\n   * An ordered list of actions to perform on messages that match at least\n   * one of the recipient email addresses or domains specified in the\n   * receipt rule.\n   *\n   * @default - No actions.\n   */\n  readonly actions?: IReceiptRuleAction[];\n\n  /**\n   * An existing rule after which the new rule will be placed.\n   *\n   * @default - The new rule is inserted at the beginning of the rule list.\n   */\n  readonly after?: IReceiptRule;\n\n  /**\n   * Whether the rule is active.\n   *\n   * @default true\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * The name for the rule\n   *\n   * @default - A CloudFormation generated name.\n   */\n  readonly receiptRuleName?: string;\n\n  /**\n   * The recipient domains and email addresses that the receipt rule applies to.\n   *\n   * @default - Match all recipients under all verified domains.\n   */\n  readonly recipients?: string[];\n\n  /**\n   * Whether to scan for spam and viruses.\n   *\n   * @default false\n   */\n  readonly scanEnabled?: boolean;\n\n  /**\n   * Whether Amazon SES should require that incoming email is delivered over a\n   * connection encrypted with Transport Layer Security (TLS).\n   *\n   * @default - Optional which will not check for TLS.\n   */\n  readonly tlsPolicy?: TlsPolicy;\n}\n\n/**\n * Construction properties for a ReceiptRule.\n */\nexport interface ReceiptRuleProps extends ReceiptRuleOptions {\n  /**\n   * The name of the rule set that the receipt rule will be added to.\n   */\n  readonly ruleSet: IReceiptRuleSet;\n}\n\n/**\n * A new receipt rule.\n */\nexport class ReceiptRule extends Resource implements IReceiptRule {\n\n  public static fromReceiptRuleName(scope: Construct, id: string, receiptRuleName: string): IReceiptRule {\n    class Import extends Resource implements IReceiptRule {\n      public readonly receiptRuleName = receiptRuleName;\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly receiptRuleName: string;\n  private readonly actions = new Array<CfnReceiptRule.ActionProperty>();\n\n  constructor(scope: Construct, id: string, props: ReceiptRuleProps) {\n    super(scope, id, {\n      physicalName: props.receiptRuleName,\n    });\n\n    const resource = new CfnReceiptRule(this, 'Resource', {\n      after: props.after?.receiptRuleName,\n      rule: {\n        actions: Lazy.any({ produce: () => this.renderActions() }),\n        enabled: props.enabled ?? true,\n        name: this.physicalName,\n        recipients: props.recipients,\n        scanEnabled: props.scanEnabled,\n        tlsPolicy: props.tlsPolicy,\n      },\n      ruleSetName: props.ruleSet.receiptRuleSetName,\n    });\n\n    this.receiptRuleName = resource.ref;\n\n    for (const action of props.actions || []) {\n      this.addAction(action);\n    }\n  }\n\n  /**\n   * Adds an action to this receipt rule.\n   */\n  public addAction(action: IReceiptRuleAction) {\n    this.actions.push(action.bind(this));\n  }\n\n  private renderActions() {\n    if (this.actions.length === 0) {\n      return undefined;\n    }\n\n    return this.actions;\n  }\n}\n\nexport interface DropSpamReceiptRuleProps extends ReceiptRuleProps {\n\n}\n\n/**\n * A rule added at the top of the rule set to drop spam/virus.\n *\n * @see https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-lambda-example-functions.html\n */\nexport class DropSpamReceiptRule extends Construct {\n  public readonly rule: ReceiptRule;\n\n  constructor(scope: Construct, id: string, props: DropSpamReceiptRuleProps) {\n    super(scope, id);\n\n    const fn = new lambda.SingletonFunction(this, 'Function', {\n      runtime: lambda.Runtime.NODEJS_12_X,\n      handler: 'index.handler',\n      code: lambda.Code.fromAsset(path.join(__dirname, 'drop-spam-handler')),\n      uuid: '224e77f9-a32e-4b4d-ac32-983477abba16',\n    });\n\n    fn.addPermission('AllowSes', {\n      action: 'lambda:InvokeFunction',\n      principal: new iam.ServicePrincipal('ses.amazonaws.com'),\n      sourceAccount: Aws.ACCOUNT_ID,\n    });\n\n    this.rule = new ReceiptRule(this, 'Rule', {\n      actions: [\n        {\n          bind: () => ({\n            lambdaAction: {\n              functionArn: fn.functionArn,\n              invocationType: 'RequestResponse',\n            },\n          }),\n        },\n      ],\n      scanEnabled: true,\n      ruleSet: props.ruleSet,\n    });\n  }\n}\n"],
  "mappings": "mQAAA,KAAA,QAAA,MAAA,EACA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,kBAAA,EACA,OAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EAGA,gBAAA,QAAA,iBAAA,EAgBA,GAAY,WAAZ,AAAA,UAAY,WAAS,CAInB,WAAA,SAAA,WAKA,WAAA,QAAA,SACF,GAVY,UAAA,QAAA,WAAA,SAAA,UAAS,CAAA,EAAA,EAkFrB,MAAa,mBAAoB,QAAA,QAAQ,CAYvC,YAAY,MAAkB,GAAY,MAAuB,WAC/D,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,gBACrB,EALc,KAAA,QAAU,GAAI,2EAO7B,KAAM,UAAW,GAAI,iBAAA,eAAe,KAAM,WAAY,CACpD,MAAK,IAAE,MAAM,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,gBACpB,KAAM,CACJ,QAAS,OAAA,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,cAAa,CAAE,CAAE,EACzD,QAAO,IAAE,MAAM,WAAO,MAAA,KAAA,OAAA,GAAI,GAC1B,KAAM,KAAK,aACX,WAAY,MAAM,WAClB,YAAa,MAAM,YACnB,UAAW,MAAM,WAEnB,YAAa,MAAM,QAAQ,mBAC5B,EAED,KAAK,gBAAkB,SAAS,IAEhC,SAAW,UAAU,OAAM,SAAW,CAAA,EACpC,KAAK,UAAU,MAAM,QA/BX,qBAAoB,MAAkB,GAAY,gBAAuB,CACrF,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,gBAAkB,eACpC,EACA,MAAO,IAAI,QAAO,MAAO,EAAE,EAkCtB,UAAU,OAA0B,wEACzC,KAAK,QAAQ,KAAK,OAAO,KAAK,IAAI,CAAC,EAG7B,eAAa,CACnB,GAAI,KAAK,QAAQ,SAAW,EAI5B,MAAO,MAAK,SAjDhB,QAAA,YAAA,2GA8DA,MAAa,2BAA4B,cAAA,SAAS,CAGhD,YAAY,MAAkB,GAAY,MAA+B,CACvE,MAAM,MAAO,EAAE,8EAEf,KAAM,IAAK,GAAI,QAAO,kBAAkB,KAAM,WAAY,CACxD,QAAS,OAAO,QAAQ,YACxB,QAAS,gBACT,KAAM,OAAO,KAAK,UAAU,KAAK,KAAK,UAAW,mBAAmB,CAAC,EACrE,KAAM,uCACP,EAED,GAAG,cAAc,WAAY,CAC3B,OAAQ,wBACR,UAAW,GAAI,KAAI,iBAAiB,mBAAmB,EACvD,cAAe,OAAA,IAAI,WACpB,EAED,KAAK,KAAO,GAAI,aAAY,KAAM,OAAQ,CACxC,QAAS,CACP,CACE,KAAM,IAAO,EACX,aAAc,CACZ,YAAa,GAAG,YAChB,eAAgB,uBAKxB,YAAa,GACb,QAAS,MAAM,QAChB,GAhCL,QAAA,oBAAA",
  "names": []
}
