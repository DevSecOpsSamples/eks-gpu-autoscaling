"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.DataResourceType=exports.ManagementEventSources=exports.Trail=exports.ReadWriteType=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),events=require("../../aws-events"),iam=require("../../aws-iam"),logs=require("../../aws-logs"),s3=require("../../aws-s3"),core_1=require("../../core"),cloudtrail_generated_1=require("./cloudtrail.generated");var ReadWriteType;(function(ReadWriteType2){ReadWriteType2.READ_ONLY="ReadOnly",ReadWriteType2.WRITE_ONLY="WriteOnly",ReadWriteType2.ALL="All",ReadWriteType2.NONE="None"})(ReadWriteType=exports.ReadWriteType||(exports.ReadWriteType={}));class Trail extends core_1.Resource{constructor(scope,id,props={}){var _b,_c,_d,_e,_f,_g;super(scope,id,{physicalName:props.trailName});this.eventSelectors=[],jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudtrail_TrailProps(props);const cloudTrailPrincipal=new iam.ServicePrincipal("cloudtrail.amazonaws.com");this.s3bucket=props.bucket||new s3.Bucket(this,"S3",{encryption:s3.BucketEncryption.UNENCRYPTED,enforceSSL:!0}),this.s3bucket.addToResourcePolicy(new iam.PolicyStatement({resources:[this.s3bucket.bucketArn],actions:["s3:GetBucketAcl"],principals:[cloudTrailPrincipal]})),this.s3bucket.addToResourcePolicy(new iam.PolicyStatement({resources:[this.s3bucket.arnForObjects(`${props.s3KeyPrefix?`${props.s3KeyPrefix}/`:""}AWSLogs/${core_1.Stack.of(this).account}/*`)],actions:["s3:PutObject"],principals:[cloudTrailPrincipal],conditions:{StringEquals:{"s3:x-amz-acl":"bucket-owner-full-control"}}})),this.topic=props.snsTopic,this.topic&&this.topic.grantPublish(cloudTrailPrincipal);let logsRole;if(props.sendToCloudWatchLogs&&(props.cloudWatchLogGroup?this.logGroup=props.cloudWatchLogGroup:this.logGroup=new logs.LogGroup(this,"LogGroup",{retention:(_b=props.cloudWatchLogsRetention)!==null&&_b!==void 0?_b:logs.RetentionDays.ONE_YEAR}),logsRole=new iam.Role(this,"LogsRole",{assumedBy:cloudTrailPrincipal}),logsRole.addToPrincipalPolicy(new iam.PolicyStatement({actions:["logs:PutLogEvents","logs:CreateLogStream"],resources:[this.logGroup.logGroupArn]}))),props.managementEvents){let managementEvent;props.managementEvents===ReadWriteType.NONE?managementEvent={includeManagementEvents:!1}:managementEvent={includeManagementEvents:!0,readWriteType:props.managementEvents},this.eventSelectors.push(managementEvent)}if(props.kmsKey&&props.encryptionKey)throw new Error("Both kmsKey and encryptionKey must not be specified. Use only encryptionKey");const trail=new cloudtrail_generated_1.CfnTrail(this,"Resource",{isLogging:!0,enableLogFileValidation:props.enableFileValidation==null?!0:props.enableFileValidation,isMultiRegionTrail:props.isMultiRegionTrail==null?!0:props.isMultiRegionTrail,includeGlobalServiceEvents:props.includeGlobalServiceEvents==null?!0:props.includeGlobalServiceEvents,trailName:this.physicalName,kmsKeyId:(_d=(_c=props.encryptionKey)===null||_c===void 0?void 0:_c.keyArn)!==null&&_d!==void 0?_d:(_e=props.kmsKey)===null||_e===void 0?void 0:_e.keyArn,s3BucketName:this.s3bucket.bucketName,s3KeyPrefix:props.s3KeyPrefix,cloudWatchLogsLogGroupArn:(_f=this.logGroup)===null||_f===void 0?void 0:_f.logGroupArn,cloudWatchLogsRoleArn:logsRole==null?void 0:logsRole.roleArn,snsTopicName:(_g=this.topic)===null||_g===void 0?void 0:_g.topicName,eventSelectors:this.eventSelectors});this.trailArn=this.getResourceArnAttribute(trail.attrArn,{service:"cloudtrail",resource:"trail",resourceName:this.physicalName}),this.trailSnsTopicArn=trail.attrSnsTopicArn,this.s3bucket.policy&&trail.node.addDependency(this.s3bucket.policy),logsRole!==void 0&&trail.node.addDependency(logsRole)}static onEvent(scope,id,options={}){jsiiDeprecationWarnings.aws_cdk_lib_aws_events_OnEventOptions(options);const rule=new events.Rule(scope,id,options);return rule.addTarget(options.target),rule.addEventPattern({detailType:["AWS API Call via CloudTrail"]}),rule}addEventSelector(dataResourceType,dataResourceValues,options={}){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudtrail_DataResourceType(dataResourceType),jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudtrail_AddEventSelectorOptions(options),dataResourceValues.length>250)throw new Error("A maximum of 250 data elements can be in one event selector");if(this.eventSelectors.length>5)throw new Error("A maximum of 5 event selectors are supported per trail.");this.eventSelectors.push({dataResources:[{type:dataResourceType,values:dataResourceValues}],includeManagementEvents:options.includeManagementEvents,excludeManagementEventSources:options.excludeManagementEventSources,readWriteType:options.readWriteType})}addLambdaEventSelector(handlers,options={}){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudtrail_AddEventSelectorOptions(options),handlers.length===0)return;const dataResourceValues=handlers.map(h=>h.functionArn);return this.addEventSelector(DataResourceType.LAMBDA_FUNCTION,dataResourceValues,options)}logAllLambdaDataEvents(options={}){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudtrail_AddEventSelectorOptions(options),this.addEventSelector(DataResourceType.LAMBDA_FUNCTION,[`arn:${this.stack.partition}:lambda`],options)}addS3EventSelector(s3Selector,options={}){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudtrail_AddEventSelectorOptions(options),s3Selector.length===0)return;const dataResourceValues=s3Selector.map(sel=>{var _b;return`${sel.bucket.bucketArn}/${(_b=sel.objectPrefix)!==null&&_b!==void 0?_b:""}`});return this.addEventSelector(DataResourceType.S3_OBJECT,dataResourceValues,options)}logAllS3DataEvents(options={}){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudtrail_AddEventSelectorOptions(options),this.addEventSelector(DataResourceType.S3_OBJECT,[`arn:${this.stack.partition}:s3:::`],options)}onCloudTrailEvent(id,options={}){return Trail.onEvent(this,id,options)}}exports.Trail=Trail,_a=JSII_RTTI_SYMBOL_1,Trail[_a]={fqn:"aws-cdk-lib.aws_cloudtrail.Trail",version:"2.20.0"};var ManagementEventSources;(function(ManagementEventSources2){ManagementEventSources2.KMS="kms.amazonaws.com",ManagementEventSources2.RDS_DATA_API="rdsdata.amazonaws.com"})(ManagementEventSources=exports.ManagementEventSources||(exports.ManagementEventSources={}));var DataResourceType;(function(DataResourceType2){DataResourceType2.LAMBDA_FUNCTION="AWS::Lambda::Function",DataResourceType2.S3_OBJECT="AWS::S3::Object"})(DataResourceType=exports.DataResourceType||(exports.DataResourceType={}));
//# sourceMappingURL=cloudtrail.js.map
