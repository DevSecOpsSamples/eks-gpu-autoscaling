{
  "version": 3,
  "sources": ["cloudtrail.ts"],
  "sourcesContent": ["import * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as lambda from '../../aws-lambda';\nimport * as logs from '../../aws-logs';\nimport * as s3 from '../../aws-s3';\nimport * as sns from '../../aws-sns';\nimport { Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnTrail } from './cloudtrail.generated';\n\n/**\n * Properties for an AWS CloudTrail trail\n */\nexport interface TrailProps {\n  /**\n   * For most services, events are recorded in the region where the action occurred.\n   * For global services such as AWS Identity and Access Management (IAM), AWS STS, Amazon CloudFront, and Route 53,\n   * events are delivered to any trail that includes global services, and are logged as occurring in US East (N. Virginia) Region.\n   *\n   * @default true\n   */\n  readonly includeGlobalServiceEvents?: boolean;\n\n  /**\n   * Whether or not this trail delivers log files from multiple regions to a single S3 bucket for a single account.\n   *\n   * @default true\n   */\n  readonly isMultiRegionTrail?: boolean;\n\n  /**\n   * When an event occurs in your account, CloudTrail evaluates whether the event matches the settings for your trails.\n   * Only events that match your trail settings are delivered to your Amazon S3 bucket and Amazon CloudWatch Logs log group.\n   *\n   * This method sets the management configuration for this trail.\n   *\n   * Management events provide insight into management operations that are performed on resources in your AWS account.\n   * These are also known as control plane operations.\n   * Management events can also include non-API events that occur in your account.\n   * For example, when a user logs in to your account, CloudTrail logs the ConsoleLogin event.\n   *\n   * @param managementEvents the management configuration type to log\n   *\n   * @default ReadWriteType.ALL\n   */\n  readonly managementEvents?: ReadWriteType;\n\n  /**\n   * To determine whether a log file was modified, deleted, or unchanged after CloudTrail delivered it,\n   * you can use CloudTrail log file integrity validation.\n   * This feature is built using industry standard algorithms: SHA-256 for hashing and SHA-256 with RSA for digital signing.\n   * This makes it computationally infeasible to modify, delete or forge CloudTrail log files without detection.\n   * You can use the AWS CLI to validate the files in the location where CloudTrail delivered them.\n   *\n   * @default true\n   */\n  readonly enableFileValidation?: boolean;\n\n  /**\n   * If CloudTrail pushes logs to CloudWatch Logs in addition to S3.\n   * Disabled for cost out of the box.\n   *\n   * @default false\n   */\n  readonly sendToCloudWatchLogs?: boolean;\n\n  /**\n   * How long to retain logs in CloudWatchLogs.\n   * Ignored if sendToCloudWatchLogs is false or if cloudWatchLogGroup is set.\n   *\n   *  @default logs.RetentionDays.ONE_YEAR\n   */\n  readonly cloudWatchLogsRetention?: logs.RetentionDays;\n\n  /**\n   * Log Group to which CloudTrail to push logs to. Ignored if sendToCloudWatchLogs is set to false.\n   * @default - a new log group is created and used.\n   */\n  readonly cloudWatchLogGroup?: logs.ILogGroup;\n\n  /** The AWS Key Management Service (AWS KMS) key ID that you want to use to encrypt CloudTrail logs.\n   * @default - No encryption.\n   * @deprecated - use encryptionKey instead.\n   */\n  readonly kmsKey?: kms.IKey;\n\n  /** The AWS Key Management Service (AWS KMS) key ID that you want to use to encrypt CloudTrail logs.\n   *\n   * @default - No encryption.\n   */\n  readonly encryptionKey?: kms.IKey;\n\n  /** SNS topic that is notified when new log files are published.\n   *\n   * @default - No notifications.\n   */\n  readonly snsTopic?: sns.ITopic;\n\n  /**\n   * The name of the trail. We recommend customers do not set an explicit name.\n   *\n   * @default - AWS CloudFormation generated name.\n   */\n  readonly trailName?: string;\n\n  /** An Amazon S3 object key prefix that precedes the name of all log files.\n   *\n   * @default - No prefix.\n   */\n  readonly s3KeyPrefix?: string;\n\n  /** The Amazon S3 bucket\n   *\n   * @default - if not supplied a bucket will be created with all the correct permisions\n   */\n  readonly bucket?: s3.IBucket;\n}\n\n/**\n * Types of events that CloudTrail can log\n */\nexport enum ReadWriteType {\n  /**\n   * Read-only events include API operations that read your resources,\n   * but don't make changes.\n   * For example, read-only events include the Amazon EC2 DescribeSecurityGroups\n   * and DescribeSubnets API operations.\n   */\n  READ_ONLY = 'ReadOnly',\n  /**\n   * Write-only events include API operations that modify (or might modify)\n   * your resources.\n   * For example, the Amazon EC2 RunInstances and TerminateInstances API\n   * operations modify your instances.\n   */\n  WRITE_ONLY = 'WriteOnly',\n  /**\n   * All events\n   */\n  ALL = 'All',\n\n  /**\n   * No events\n   */\n  NONE = 'None',\n}\n\n/**\n * Cloud trail allows you to log events that happen in your AWS account\n * For example:\n *\n * import { CloudTrail } from '@aws-cdk/aws-cloudtrail'\n *\n * const cloudTrail = new CloudTrail(this, 'MyTrail');\n *\n * NOTE the above example creates an UNENCRYPTED bucket by default,\n * If you are required to use an Encrypted bucket you can supply a preconfigured bucket\n * via TrailProps\n *\n */\nexport class Trail extends Resource {\n\n  /**\n   * Create an event rule for when an event is recorded by any Trail in the account.\n   *\n   * Note that the event doesn't necessarily have to come from this Trail, it can\n   * be captured from any one.\n   *\n   * Be sure to filter the event further down using an event pattern.\n   */\n  public static onEvent(scope: Construct, id: string, options: events.OnEventOptions = {}): events.Rule {\n    const rule = new events.Rule(scope, id, options);\n    rule.addTarget(options.target);\n    rule.addEventPattern({\n      detailType: ['AWS API Call via CloudTrail'],\n    });\n    return rule;\n  }\n\n  /**\n   * ARN of the CloudTrail trail\n   * i.e. arn:aws:cloudtrail:us-east-2:123456789012:trail/myCloudTrail\n   * @attribute\n   */\n  public readonly trailArn: string;\n\n  /**\n   * ARN of the Amazon SNS topic that's associated with the CloudTrail trail,\n   * i.e. arn:aws:sns:us-east-2:123456789012:mySNSTopic\n   * @attribute\n   */\n  public readonly trailSnsTopicArn: string;\n\n  /**\n   * The CloudWatch log group to which CloudTrail events are sent.\n   * `undefined` if `sendToCloudWatchLogs` property is false.\n   */\n  public readonly logGroup?: logs.ILogGroup;\n\n  private s3bucket: s3.IBucket;\n  private eventSelectors: EventSelector[] = [];\n  private topic: sns.ITopic | undefined;\n\n  constructor(scope: Construct, id: string, props: TrailProps = {}) {\n    super(scope, id, {\n      physicalName: props.trailName,\n    });\n\n    const cloudTrailPrincipal = new iam.ServicePrincipal('cloudtrail.amazonaws.com');\n\n    this.s3bucket = props.bucket || new s3.Bucket(this, 'S3', { encryption: s3.BucketEncryption.UNENCRYPTED, enforceSSL: true });\n\n    this.s3bucket.addToResourcePolicy(new iam.PolicyStatement({\n      resources: [this.s3bucket.bucketArn],\n      actions: ['s3:GetBucketAcl'],\n      principals: [cloudTrailPrincipal],\n    }));\n\n    this.s3bucket.addToResourcePolicy(new iam.PolicyStatement({\n      resources: [this.s3bucket.arnForObjects(\n        `${props.s3KeyPrefix ? `${props.s3KeyPrefix}/` : ''}AWSLogs/${Stack.of(this).account}/*`,\n      )],\n      actions: ['s3:PutObject'],\n      principals: [cloudTrailPrincipal],\n      conditions: {\n        StringEquals: { 's3:x-amz-acl': 'bucket-owner-full-control' },\n      },\n    }));\n\n    this.topic = props.snsTopic;\n    if (this.topic) {\n      this.topic.grantPublish(cloudTrailPrincipal);\n    }\n\n    let logsRole: iam.IRole | undefined;\n\n    if (props.sendToCloudWatchLogs) {\n      if (props.cloudWatchLogGroup) {\n        this.logGroup = props.cloudWatchLogGroup;\n      } else {\n        this.logGroup = new logs.LogGroup(this, 'LogGroup', {\n          retention: props.cloudWatchLogsRetention ?? logs.RetentionDays.ONE_YEAR,\n        });\n      }\n\n      logsRole = new iam.Role(this, 'LogsRole', { assumedBy: cloudTrailPrincipal });\n\n      logsRole.addToPrincipalPolicy(new iam.PolicyStatement({\n        actions: ['logs:PutLogEvents', 'logs:CreateLogStream'],\n        resources: [this.logGroup.logGroupArn],\n      }));\n    }\n\n    if (props.managementEvents) {\n      let managementEvent;\n      if (props.managementEvents === ReadWriteType.NONE) {\n        managementEvent = {\n          includeManagementEvents: false,\n        };\n      } else {\n        managementEvent = {\n          includeManagementEvents: true,\n          readWriteType: props.managementEvents,\n        };\n      }\n      this.eventSelectors.push(managementEvent);\n    }\n\n    if (props.kmsKey && props.encryptionKey) {\n      throw new Error('Both kmsKey and encryptionKey must not be specified. Use only encryptionKey');\n    }\n\n    // TODO: not all regions support validation. Use service configuration data to fail gracefully\n    const trail = new CfnTrail(this, 'Resource', {\n      isLogging: true,\n      enableLogFileValidation: props.enableFileValidation == null ? true : props.enableFileValidation,\n      isMultiRegionTrail: props.isMultiRegionTrail == null ? true : props.isMultiRegionTrail,\n      includeGlobalServiceEvents: props.includeGlobalServiceEvents == null ? true : props.includeGlobalServiceEvents,\n      trailName: this.physicalName,\n      kmsKeyId: props.encryptionKey?.keyArn ?? props.kmsKey?.keyArn,\n      s3BucketName: this.s3bucket.bucketName,\n      s3KeyPrefix: props.s3KeyPrefix,\n      cloudWatchLogsLogGroupArn: this.logGroup?.logGroupArn,\n      cloudWatchLogsRoleArn: logsRole?.roleArn,\n      snsTopicName: this.topic?.topicName,\n      eventSelectors: this.eventSelectors,\n    });\n\n    this.trailArn = this.getResourceArnAttribute(trail.attrArn, {\n      service: 'cloudtrail',\n      resource: 'trail',\n      resourceName: this.physicalName,\n    });\n    this.trailSnsTopicArn = trail.attrSnsTopicArn;\n\n    // Add a dependency on the bucket policy being updated, CloudTrail will test this upon creation.\n    if (this.s3bucket.policy) {\n      trail.node.addDependency(this.s3bucket.policy);\n    }\n\n    // If props.sendToCloudWatchLogs is set to true then the trail needs to depend on the created logsRole\n    // so that it can create the log stream for the log group. This ensures the logsRole is created and propagated\n    // before the trail tries to create the log stream.\n    if (logsRole !== undefined) {\n      trail.node.addDependency(logsRole);\n    }\n  }\n\n  /**\n   * When an event occurs in your account, CloudTrail evaluates whether the event matches the settings for your trails.\n   * Only events that match your trail settings are delivered to your Amazon S3 bucket and Amazon CloudWatch Logs log group.\n   *\n   * This method adds an Event Selector for filtering events that match either S3 or Lambda function operations.\n   *\n   * Data events: These events provide insight into the resource operations performed on or within a resource.\n   * These are also known as data plane operations.\n   *\n   * @param dataResourceValues the list of data resource ARNs to include in logging (maximum 250 entries).\n   * @param options the options to configure logging of management and data events.\n   */\n  public addEventSelector(dataResourceType: DataResourceType, dataResourceValues: string[], options: AddEventSelectorOptions = {}) {\n    if (dataResourceValues.length > 250) {\n      throw new Error('A maximum of 250 data elements can be in one event selector');\n    }\n\n    if (this.eventSelectors.length > 5) {\n      throw new Error('A maximum of 5 event selectors are supported per trail.');\n    }\n\n    this.eventSelectors.push({\n      dataResources: [{\n        type: dataResourceType,\n        values: dataResourceValues,\n      }],\n      includeManagementEvents: options.includeManagementEvents,\n      excludeManagementEventSources: options.excludeManagementEventSources,\n      readWriteType: options.readWriteType,\n    });\n  }\n\n  /**\n   * When an event occurs in your account, CloudTrail evaluates whether the event matches the settings for your trails.\n   * Only events that match your trail settings are delivered to your Amazon S3 bucket and Amazon CloudWatch Logs log group.\n   *\n   * This method adds a Lambda Data Event Selector for filtering events that match Lambda function operations.\n   *\n   * Data events: These events provide insight into the resource operations performed on or within a resource.\n   * These are also known as data plane operations.\n   *\n   * @param handlers the list of lambda function handlers whose data events should be logged (maximum 250 entries).\n   * @param options the options to configure logging of management and data events.\n   */\n  public addLambdaEventSelector(handlers: lambda.IFunction[], options: AddEventSelectorOptions = {}) {\n    if (handlers.length === 0) { return; }\n    const dataResourceValues = handlers.map((h) => h.functionArn);\n    return this.addEventSelector(DataResourceType.LAMBDA_FUNCTION, dataResourceValues, options);\n  }\n\n  /**\n   * Log all Lamda data events for all lambda functions the account.\n   * @see https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\n   * @default false\n   */\n  public logAllLambdaDataEvents(options: AddEventSelectorOptions = {}) {\n    return this.addEventSelector(DataResourceType.LAMBDA_FUNCTION, [`arn:${this.stack.partition}:lambda`], options);\n  }\n\n  /**\n   * When an event occurs in your account, CloudTrail evaluates whether the event matches the settings for your trails.\n   * Only events that match your trail settings are delivered to your Amazon S3 bucket and Amazon CloudWatch Logs log group.\n   *\n   * This method adds an S3 Data Event Selector for filtering events that match S3 operations.\n   *\n   * Data events: These events provide insight into the resource operations performed on or within a resource.\n   * These are also known as data plane operations.\n   *\n   * @param s3Selector the list of S3 bucket with optional prefix to include in logging (maximum 250 entries).\n   * @param options the options to configure logging of management and data events.\n   */\n  public addS3EventSelector(s3Selector: S3EventSelector[], options: AddEventSelectorOptions = {}) {\n    if (s3Selector.length === 0) { return; }\n    const dataResourceValues = s3Selector.map((sel) => `${sel.bucket.bucketArn}/${sel.objectPrefix ?? ''}`);\n    return this.addEventSelector(DataResourceType.S3_OBJECT, dataResourceValues, options);\n  }\n\n  /**\n   * Log all S3 data events for all objects for all buckets in the account.\n   * @see https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\n   * @default false\n   */\n  public logAllS3DataEvents(options: AddEventSelectorOptions = {}) {\n    return this.addEventSelector(DataResourceType.S3_OBJECT, [`arn:${this.stack.partition}:s3:::`], options);\n  }\n\n  /**\n   * Create an event rule for when an event is recorded by any Trail in the account.\n   *\n   * Note that the event doesn't necessarily have to come from this Trail, it can\n   * be captured from any one.\n   *\n   * Be sure to filter the event further down using an event pattern.\n   *\n   * @deprecated - use Trail.onEvent()\n   */\n  public onCloudTrailEvent(id: string, options: events.OnEventOptions = {}): events.Rule {\n    return Trail.onEvent(this, id, options);\n  }\n}\n\n/**\n * Options for adding an event selector.\n */\nexport interface AddEventSelectorOptions {\n  /**\n   * Specifies whether to log read-only events, write-only events, or all events.\n   *\n   * @default ReadWriteType.All\n   */\n  readonly readWriteType?: ReadWriteType;\n\n  /**\n   * Specifies whether the event selector includes management events for the trail.\n   *\n   * @default true\n   */\n  readonly includeManagementEvents?: boolean;\n\n  /**\n   * An optional list of service event sources from which you do not want management events to be logged on your trail.\n   *\n   * @default []\n   */\n  readonly excludeManagementEventSources?: ManagementEventSources[];\n}\n\n/**\n * Types of management event sources that can be excluded\n */\nexport enum ManagementEventSources {\n  /**\n   * AWS Key Management Service (AWS KMS) events\n   */\n  KMS = 'kms.amazonaws.com',\n\n  /**\n   * Data API events\n   */\n  RDS_DATA_API = 'rdsdata.amazonaws.com',\n}\n\n/**\n * Selecting an S3 bucket and an optional prefix to be logged for data events.\n */\nexport interface S3EventSelector {\n  /** S3 bucket */\n  readonly bucket: s3.IBucket;\n\n  /**\n   * Data events for objects whose key matches this prefix will be logged.\n   * @default - all objects\n   */\n  readonly objectPrefix?: string;\n}\n\n/**\n * Resource type for a data event\n */\nexport enum DataResourceType {\n  /**\n   * Data resource type for Lambda function\n   */\n  LAMBDA_FUNCTION = 'AWS::Lambda::Function',\n\n  /**\n   * Data resource type for S3 objects\n   */\n  S3_OBJECT = 'AWS::S3::Object',\n}\n\ninterface EventSelector {\n  readonly includeManagementEvents?: boolean;\n  readonly excludeManagementEventSources?: string[];\n  readonly readWriteType?: ReadWriteType;\n  readonly dataResources?: EventSelectorData[];\n}\n\ninterface EventSelectorData {\n  readonly type: string;\n  readonly values: string[];\n}\n"],
  "mappings": "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",
  "names": []
}
