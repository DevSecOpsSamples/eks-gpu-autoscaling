{
  "version": 3,
  "sources": ["conditions.ts"],
  "sourcesContent": ["/**\n * ListenerCondition providers definition.\n */\nexport abstract class ListenerCondition {\n  /**\n   * Create a host-header listener rule condition\n   *\n   * @param values Hosts for host headers\n   */\n  public static hostHeaders(values: string[]): ListenerCondition {\n    return new HostHeaderListenerCondition(values);\n  }\n\n  /**\n   * Create a http-header listener rule condition\n   *\n   * @param name HTTP header name\n   * @param values HTTP header values\n   */\n  public static httpHeader(name: string, values: string[]): ListenerCondition {\n    return new HttpHeaderListenerCondition(name, values);\n  }\n\n  /**\n   * Create a http-request-method listener rule condition\n   *\n   * @param values HTTP request methods\n   */\n  public static httpRequestMethods(values: string[]): ListenerCondition {\n    return new HttpRequestMethodListenerCondition(values);\n  }\n\n  /**\n   * Create a path-pattern listener rule condition\n   *\n   * @param values Path patterns\n   */\n  public static pathPatterns(values: string[]): ListenerCondition {\n    return new PathPatternListenerCondition(values);\n  }\n\n  /**\n   * Create a query-string listener rule condition\n   *\n   * @param values Query string key/value pairs\n   */\n  public static queryStrings(values: QueryStringCondition[]): ListenerCondition {\n    return new QueryStringListenerCondition(values);\n  }\n\n  /**\n   * Create a source-ip listener rule condition\n   *\n   * @param values Source ips\n   */\n  public static sourceIps(values: string[]): ListenerCondition {\n    return new SourceIpListenerCondition(values);\n  }\n\n  /**\n   * Render the raw Cfn listener rule condition object.\n   */\n  public abstract renderRawCondition(): any;\n}\n\n/**\n * Properties for the key/value pair of the query string\n */\nexport interface QueryStringCondition {\n  /**\n   * The query string key for the condition\n   *\n   * @default - Any key can be matched.\n   */\n  readonly key?: string;\n\n  /**\n   * The query string value for the condition\n   */\n  readonly value: string;\n}\n\n/**\n * Host header config of the listener rule condition\n */\nclass HostHeaderListenerCondition extends ListenerCondition {\n  constructor(public readonly values: string[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'host-header',\n      hostHeaderConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * HTTP header config of the listener rule condition\n */\nclass HttpHeaderListenerCondition extends ListenerCondition {\n  constructor(public readonly name: string, public readonly values: string[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'http-header',\n      httpHeaderConfig: {\n        httpHeaderName: this.name,\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * HTTP reqeust method config of the listener rule condition\n */\nclass HttpRequestMethodListenerCondition extends ListenerCondition {\n  constructor(public readonly values: string[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'http-request-method',\n      httpRequestMethodConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * Path pattern config of the listener rule condition\n */\nclass PathPatternListenerCondition extends ListenerCondition {\n  constructor(public readonly values: string[]) {\n    super();\n    if (values && values.length > 5) {\n      throw new Error(\"A rule can only have '5' condition values\");\n    }\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'path-pattern',\n      pathPatternConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * Query string config of the listener rule condition\n */\nclass QueryStringListenerCondition extends ListenerCondition {\n  constructor(public readonly values: QueryStringCondition[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'query-string',\n      queryStringConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n\n/**\n * Source ip config of the listener rule condition\n */\nclass SourceIpListenerCondition extends ListenerCondition {\n  constructor(public readonly values: string[]) {\n    super();\n  }\n\n  public renderRawCondition(): any {\n    return {\n      field: 'source-ip',\n      sourceIpConfig: {\n        values: this.values,\n      },\n    };\n  }\n}\n"],
  "mappings": "6JAGA,MAAsB,iBAAiB,OAMvB,aAAY,OAAgB,CACxC,MAAO,IAAI,6BAA4B,MAAM,QASjC,YAAW,KAAc,OAAgB,CACrD,MAAO,IAAI,6BAA4B,KAAM,MAAM,QAQvC,oBAAmB,OAAgB,CAC/C,MAAO,IAAI,oCAAmC,MAAM,QAQxC,cAAa,OAAgB,CACzC,MAAO,IAAI,8BAA6B,MAAM,QAQlC,cAAa,OAA8B,CACvD,MAAO,IAAI,8BAA6B,MAAM,QAQlC,WAAU,OAAgB,CACtC,MAAO,IAAI,2BAA0B,MAAM,GArD/C,QAAA,kBAAA,gJAkFA,MAAM,mCAAoC,kBAAiB,CACzD,YAA4B,OAAgB,CAC1C,MAAK,EADqB,KAAA,OAAA,OAIrB,oBAAkB,CACvB,MAAO,CACL,MAAO,cACP,iBAAkB,CAChB,OAAQ,KAAK,UASrB,MAAM,mCAAoC,kBAAiB,CACzD,YAA4B,KAA8B,OAAgB,CACxE,MAAK,EADqB,KAAA,KAAA,KAA8B,KAAA,OAAA,OAInD,oBAAkB,CACvB,MAAO,CACL,MAAO,cACP,iBAAkB,CAChB,eAAgB,KAAK,KACrB,OAAQ,KAAK,UASrB,MAAM,0CAA2C,kBAAiB,CAChE,YAA4B,OAAgB,CAC1C,MAAK,EADqB,KAAA,OAAA,OAIrB,oBAAkB,CACvB,MAAO,CACL,MAAO,sBACP,wBAAyB,CACvB,OAAQ,KAAK,UASrB,MAAM,oCAAqC,kBAAiB,CAC1D,YAA4B,OAAgB,CAC1C,MAAK,EACL,GAF0B,KAAA,OAAA,OAEtB,QAAU,OAAO,OAAS,EAC5B,KAAM,IAAI,OAAM,2CAA2C,EAIxD,oBAAkB,CACvB,MAAO,CACL,MAAO,eACP,kBAAmB,CACjB,OAAQ,KAAK,UASrB,MAAM,oCAAqC,kBAAiB,CAC1D,YAA4B,OAA8B,CACxD,MAAK,EADqB,KAAA,OAAA,OAIrB,oBAAkB,CACvB,MAAO,CACL,MAAO,eACP,kBAAmB,CACjB,OAAQ,KAAK,UASrB,MAAM,iCAAkC,kBAAiB,CACvD,YAA4B,OAAgB,CAC1C,MAAK,EADqB,KAAA,OAAA,OAIrB,oBAAkB,CACvB,MAAO,CACL,MAAO,YACP,eAAgB,CACd,OAAQ,KAAK",
  "names": []
}
