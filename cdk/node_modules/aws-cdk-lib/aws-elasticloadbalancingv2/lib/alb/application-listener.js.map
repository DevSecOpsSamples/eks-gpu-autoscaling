{
  "version": 3,
  "sources": ["application-listener.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as cxschema from '../../../cloud-assembly-schema';\nimport { Duration, IResource, Lazy, Resource, Token } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { BaseListener, BaseListenerLookupOptions } from '../shared/base-listener';\nimport { HealthCheck } from '../shared/base-target-group';\nimport { ApplicationProtocol, ApplicationProtocolVersion, TargetGroupLoadBalancingAlgorithmType, IpAddressType, SslPolicy } from '../shared/enums';\nimport { IListenerCertificate, ListenerCertificate } from '../shared/listener-certificate';\nimport { determineProtocolAndPort } from '../shared/util';\nimport { ListenerAction } from './application-listener-action';\nimport { ApplicationListenerCertificate } from './application-listener-certificate';\nimport { ApplicationListenerRule, FixedResponse, RedirectResponse } from './application-listener-rule';\nimport { IApplicationLoadBalancer } from './application-load-balancer';\nimport { ApplicationTargetGroup, IApplicationLoadBalancerTarget, IApplicationTargetGroup } from './application-target-group';\nimport { ListenerCondition } from './conditions';\n\n/**\n * Basic properties for an ApplicationListener\n */\nexport interface BaseApplicationListenerProps {\n  /**\n   * The protocol to use\n   *\n   * @default - Determined from port if known.\n   */\n  readonly protocol?: ApplicationProtocol;\n\n  /**\n   * The port on which the listener listens for requests.\n   *\n   * @default - Determined from protocol if known.\n   */\n  readonly port?: number;\n\n  /**\n   * The certificates to use on this listener\n   *\n   * @default - No certificates.\n   * @deprecated Use the `certificates` property instead\n   */\n  readonly certificateArns?: string[];\n\n  /**\n   * Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS.\n   *\n   * @default - No certificates.\n   */\n  readonly certificates?: IListenerCertificate[];\n\n  /**\n   * The security policy that defines which ciphers and protocols are supported.\n   *\n   * @default - The current predefined security policy.\n   */\n  readonly sslPolicy?: SslPolicy;\n\n  /**\n   * Default target groups to load balance to\n   *\n   * All target groups will be load balanced to with equal weight and without\n   * stickiness. For a more complex configuration than that, use\n   * either `defaultAction` or `addAction()`.\n   *\n   * Cannot be specified together with `defaultAction`.\n   *\n   * @default - None.\n   */\n  readonly defaultTargetGroups?: IApplicationTargetGroup[];\n\n  /**\n   * Default action to take for requests to this listener\n   *\n   * This allows full control of the default action of the load balancer,\n   * including Action chaining, fixed responses and redirect responses.\n   *\n   * See the `ListenerAction` class for all options.\n   *\n   * Cannot be specified together with `defaultTargetGroups`.\n   *\n   * @default - None.\n   */\n  readonly defaultAction?: ListenerAction;\n\n  /**\n   * Allow anyone to connect to the load balancer on the listener port\n   *\n   * If this is specified, the load balancer will be opened up to anyone who can reach it.\n   * For internal load balancers this is anyone in the same VPC. For public load\n   * balancers, this is anyone on the internet.\n   *\n   * If you want to be more selective about who can access this load\n   * balancer, set this to `false` and use the listener's `connections`\n   * object to selectively grant access to the load balancer on the listener port.\n   *\n   * @default true\n   */\n  readonly open?: boolean;\n}\n\n/**\n * Properties for defining a standalone ApplicationListener\n */\nexport interface ApplicationListenerProps extends BaseApplicationListenerProps {\n  /**\n   * The load balancer to attach this listener to\n   */\n  readonly loadBalancer: IApplicationLoadBalancer;\n}\n\n/**\n * Options for ApplicationListener lookup\n */\nexport interface ApplicationListenerLookupOptions extends BaseListenerLookupOptions {\n  /**\n   * ARN of the listener to look up\n   * @default - does not filter by listener arn\n   */\n  readonly listenerArn?: string;\n\n  /**\n   * Filter listeners by listener protocol\n   * @default - does not filter by listener protocol\n   */\n  readonly listenerProtocol?: ApplicationProtocol;\n}\n\n/**\n * Define an ApplicationListener\n *\n * @resource AWS::ElasticLoadBalancingV2::Listener\n */\nexport class ApplicationListener extends BaseListener implements IApplicationListener {\n  /**\n   * Look up an ApplicationListener.\n   */\n  public static fromLookup(scope: Construct, id: string, options: ApplicationListenerLookupOptions): IApplicationListener {\n    if (Token.isUnresolved(options.listenerArn)) {\n      throw new Error('All arguments to look up a load balancer listener must be concrete (no Tokens)');\n    }\n\n    let listenerProtocol: cxschema.LoadBalancerListenerProtocol | undefined;\n    switch (options.listenerProtocol) {\n      case ApplicationProtocol.HTTP: listenerProtocol = cxschema.LoadBalancerListenerProtocol.HTTP; break;\n      case ApplicationProtocol.HTTPS: listenerProtocol = cxschema.LoadBalancerListenerProtocol.HTTPS; break;\n    }\n\n    const props = BaseListener._queryContextProvider(scope, {\n      userOptions: options,\n      loadBalancerType: cxschema.LoadBalancerType.APPLICATION,\n      listenerArn: options.listenerArn,\n      listenerProtocol,\n    });\n\n    return new LookedUpApplicationListener(scope, id, props);\n  }\n\n  /**\n   * Import an existing listener\n   */\n  public static fromApplicationListenerAttributes(scope: Construct, id: string, attrs: ApplicationListenerAttributes): IApplicationListener {\n    return new ImportedApplicationListener(scope, id, attrs);\n  }\n\n  /**\n   * Manage connections to this ApplicationListener\n   */\n  public readonly connections: ec2.Connections;\n\n  /**\n   * Load balancer this listener is associated with\n   */\n  public readonly loadBalancer: IApplicationLoadBalancer;\n\n  /**\n   * ARNs of certificates added to this listener\n   */\n  private readonly certificateArns: string[];\n\n  /**\n   * Listener protocol for this listener.\n   */\n  private readonly protocol: ApplicationProtocol;\n\n  constructor(scope: Construct, id: string, props: ApplicationListenerProps) {\n    const [protocol, port] = determineProtocolAndPort(props.protocol, props.port);\n    if (protocol === undefined || port === undefined) {\n      throw new Error('At least one of \\'port\\' or \\'protocol\\' is required');\n    }\n\n    super(scope, id, {\n      loadBalancerArn: props.loadBalancer.loadBalancerArn,\n      certificates: Lazy.any({ produce: () => this.certificateArns.map(certificateArn => ({ certificateArn })) }, { omitEmptyArray: true }),\n      protocol,\n      port,\n      sslPolicy: props.sslPolicy,\n    });\n\n    this.loadBalancer = props.loadBalancer;\n    this.protocol = protocol;\n    this.certificateArns = [];\n\n    // Attach certificates\n    if (props.certificateArns && props.certificateArns.length > 0) {\n      this.addCertificateArns('ListenerCertificate', props.certificateArns);\n    }\n    if (props.certificates && props.certificates.length > 0) {\n      this.addCertificates('DefaultCertificates', props.certificates);\n    }\n\n    // This listener edits the securitygroup of the load balancer,\n    // but adds its own default port.\n    this.connections = new ec2.Connections({\n      securityGroups: props.loadBalancer.connections.securityGroups,\n      defaultPort: ec2.Port.tcp(port),\n    });\n\n    if (props.defaultAction && props.defaultTargetGroups) {\n      throw new Error('Specify at most one of \\'defaultAction\\' and \\'defaultTargetGroups\\'');\n    }\n\n    if (props.defaultAction) {\n      this.setDefaultAction(props.defaultAction);\n    }\n\n    if (props.defaultTargetGroups) {\n      this.setDefaultAction(ListenerAction.forward(props.defaultTargetGroups));\n    }\n\n    if (props.open !== false) {\n      this.connections.allowDefaultPortFrom(ec2.Peer.anyIpv4(), `Allow from anyone on port ${port}`);\n      if (this.loadBalancer.ipAddressType === IpAddressType.DUAL_STACK) {\n        this.connections.allowDefaultPortFrom(ec2.Peer.anyIpv6(), `Allow from anyone on port ${port}`);\n      }\n    }\n  }\n\n  /**\n   * Add one or more certificates to this listener.\n   *\n   * After the first certificate, this creates ApplicationListenerCertificates\n   * resources since cloudformation requires the certificates array on the\n   * listener resource to have a length of 1.\n   *\n   * @deprecated Use `addCertificates` instead.\n   */\n  public addCertificateArns(id: string, arns: string[]): void {\n    this.addCertificates(id, arns.map(ListenerCertificate.fromArn));\n  }\n\n  /**\n   * Add one or more certificates to this listener.\n   *\n   * After the first certificate, this creates ApplicationListenerCertificates\n   * resources since cloudformation requires the certificates array on the\n   * listener resource to have a length of 1.\n   */\n  public addCertificates(id: string, certificates: IListenerCertificate[]): void {\n    const additionalCerts = [...certificates];\n\n    if (this.certificateArns.length === 0 && additionalCerts.length > 0) {\n      const first = additionalCerts.splice(0, 1)[0];\n      this.certificateArns.push(first.certificateArn);\n    }\n\n    // Only one certificate can be specified per resource, even though\n    // `certificates` is of type Array\n    for (let i = 0; i < additionalCerts.length; i++) {\n      new ApplicationListenerCertificate(this, `${id}${i + 1}`, {\n        listener: this,\n        certificates: [additionalCerts[i]],\n      });\n    }\n  }\n\n  /**\n   * Perform the given default action on incoming requests\n   *\n   * This allows full control of the default action of the load balancer,\n   * including Action chaining, fixed responses and redirect responses. See\n   * the `ListenerAction` class for all options.\n   *\n   * It's possible to add routing conditions to the Action added in this way.\n   * At least one Action must be added without conditions (which becomes the\n   * default Action).\n   */\n  public addAction(id: string, props: AddApplicationActionProps): void {\n    checkAddRuleProps(props);\n\n    if (props.priority !== undefined) {\n      // New rule\n      //\n      // TargetGroup.registerListener is called inside ApplicationListenerRule.\n      new ApplicationListenerRule(this, id + 'Rule', {\n        listener: this,\n        priority: props.priority,\n        ...props,\n      });\n    } else {\n      // New default target with these targetgroups\n      this.setDefaultAction(props.action);\n    }\n  }\n\n  /**\n   * Load balance incoming requests to the given target groups.\n   *\n   * All target groups will be load balanced to with equal weight and without\n   * stickiness. For a more complex configuration than that, use `addAction()`.\n   *\n   * It's possible to add routing conditions to the TargetGroups added in this\n   * way. At least one TargetGroup must be added without conditions (which will\n   * become the default Action for this listener).\n   */\n  public addTargetGroups(id: string, props: AddApplicationTargetGroupsProps): void {\n    checkAddRuleProps(props);\n\n    if (props.priority !== undefined) {\n      // New rule\n      //\n      // TargetGroup.registerListener is called inside ApplicationListenerRule.\n      new ApplicationListenerRule(this, id + 'Rule', {\n        listener: this,\n        priority: props.priority,\n        ...props,\n      });\n    } else {\n      // New default target with these targetgroups\n      this.setDefaultAction(ListenerAction.forward(props.targetGroups));\n    }\n  }\n\n  /**\n   * Load balance incoming requests to the given load balancing targets.\n   *\n   * This method implicitly creates an ApplicationTargetGroup for the targets\n   * involved, and a 'forward' action to route traffic to the given TargetGroup.\n   *\n   * If you want more control over the precise setup, create the TargetGroup\n   * and use `addAction` yourself.\n   *\n   * It's possible to add conditions to the targets added in this way. At least\n   * one set of targets must be added without conditions.\n   *\n   * @returns The newly created target group\n   */\n  public addTargets(id: string, props: AddApplicationTargetsProps): ApplicationTargetGroup {\n    if (!this.loadBalancer.vpc) {\n      // eslint-disable-next-line max-len\n      throw new Error('Can only call addTargets() when using a constructed Load Balancer or an imported Load Balancer with specified vpc; construct a new TargetGroup and use addTargetGroup');\n    }\n\n    const group = new ApplicationTargetGroup(this, id + 'Group', {\n      vpc: this.loadBalancer.vpc,\n      ...props,\n    });\n\n    this.addTargetGroups(id, {\n      targetGroups: [group],\n      ...props,\n    });\n\n    return group;\n  }\n\n  /**\n   * Add a fixed response\n   *\n   * @deprecated Use `addAction()` instead\n   */\n  public addFixedResponse(id: string, props: AddFixedResponseProps) {\n    checkAddRuleProps(props);\n\n    const fixedResponse: FixedResponse = {\n      statusCode: props.statusCode,\n      contentType: props.contentType,\n      messageBody: props.messageBody,\n    };\n\n    /**\n     * NOTE - Copy/pasted from `application-listener-rule.ts#validateFixedResponse`.\n     * This was previously a deprecated, exported function, which caused issues with jsii's strip-deprecated functionality.\n     * Inlining the duplication functionality in v2 only (for now).\n     */\n    if (fixedResponse.statusCode && !/^(2|4|5)\\d\\d$/.test(fixedResponse.statusCode)) {\n      throw new Error('`statusCode` must be 2XX, 4XX or 5XX.');\n    }\n\n    if (fixedResponse.messageBody && fixedResponse.messageBody.length > 1024) {\n      throw new Error('`messageBody` cannot have more than 1024 characters.');\n    }\n\n    if (props.priority) {\n      new ApplicationListenerRule(this, id + 'Rule', {\n        listener: this,\n        priority: props.priority,\n        fixedResponse,\n        ...props,\n      });\n    } else {\n      this.setDefaultAction(ListenerAction.fixedResponse(Token.asNumber(props.statusCode), {\n        contentType: props.contentType,\n        messageBody: props.messageBody,\n      }));\n    }\n  }\n\n  /**\n   * Add a redirect response\n   *\n   * @deprecated Use `addAction()` instead\n   */\n  public addRedirectResponse(id: string, props: AddRedirectResponseProps) {\n    checkAddRuleProps(props);\n    const redirectResponse = {\n      host: props.host,\n      path: props.path,\n      port: props.port,\n      protocol: props.protocol,\n      query: props.query,\n      statusCode: props.statusCode,\n    };\n\n    /**\n     * NOTE - Copy/pasted from `application-listener-rule.ts#validateRedirectResponse`.\n     * This was previously a deprecated, exported function, which caused issues with jsii's strip-deprecated functionality.\n     * Inlining the duplication functionality in v2 only (for now).\n     */\n    if (redirectResponse.protocol && !/^(HTTPS?|#\\{protocol\\})$/i.test(redirectResponse.protocol)) {\n      throw new Error('`protocol` must be HTTP, HTTPS, or #{protocol}.');\n    }\n\n    if (!redirectResponse.statusCode || !/^HTTP_30[12]$/.test(redirectResponse.statusCode)) {\n      throw new Error('`statusCode` must be HTTP_301 or HTTP_302.');\n    }\n\n    if (props.priority) {\n      new ApplicationListenerRule(this, id + 'Rule', {\n        listener: this,\n        priority: props.priority,\n        redirectResponse,\n        ...props,\n      });\n    } else {\n      this.setDefaultAction(ListenerAction.redirect({\n        host: props.host,\n        path: props.path,\n        port: props.port,\n        protocol: props.protocol,\n        query: props.query,\n        permanent: props.statusCode === 'HTTP_301',\n      }));\n    }\n  }\n\n  /**\n   * Register that a connectable that has been added to this load balancer.\n   *\n   * Don't call this directly. It is called by ApplicationTargetGroup.\n   */\n  public registerConnectable(connectable: ec2.IConnectable, portRange: ec2.Port): void {\n    connectable.connections.allowFrom(this.loadBalancer, portRange, 'Load balancer to target');\n  }\n\n  /**\n   * Validate this listener.\n   */\n  protected validateListener(): string[] {\n    const errors = super.validateListener();\n    if (this.protocol === ApplicationProtocol.HTTPS && this.certificateArns.length === 0) {\n      errors.push('HTTPS Listener needs at least one certificate (call addCertificates)');\n    }\n    return errors;\n  }\n\n  /**\n   * Wrapper for _setDefaultAction which does a type-safe bind\n   */\n  private setDefaultAction(action: ListenerAction) {\n    action.bind(this, this);\n    this._setDefaultAction(action);\n  }\n}\n\n/**\n * Properties to reference an existing listener\n */\nexport interface IApplicationListener extends IResource, ec2.IConnectable {\n  /**\n   * ARN of the listener\n   * @attribute\n   */\n  readonly listenerArn: string;\n\n  /**\n   * Add one or more certificates to this listener.\n   * @deprecated use `addCertificates()`\n   */\n  addCertificateArns(id: string, arns: string[]): void;\n\n  /**\n   * Add one or more certificates to this listener.\n   */\n  addCertificates(id: string, certificates: IListenerCertificate[]): void;\n\n  /**\n   * Load balance incoming requests to the given target groups.\n   *\n   * It's possible to add conditions to the TargetGroups added in this way.\n   * At least one TargetGroup must be added without conditions.\n   */\n  addTargetGroups(id: string, props: AddApplicationTargetGroupsProps): void;\n\n  /**\n   * Load balance incoming requests to the given load balancing targets.\n   *\n   * This method implicitly creates an ApplicationTargetGroup for the targets\n   * involved.\n   *\n   * It's possible to add conditions to the targets added in this way. At least\n   * one set of targets must be added without conditions.\n   *\n   * @returns The newly created target group\n   */\n  addTargets(id: string, props: AddApplicationTargetsProps): ApplicationTargetGroup;\n\n  /**\n   * Register that a connectable that has been added to this load balancer.\n   *\n   * Don't call this directly. It is called by ApplicationTargetGroup.\n   */\n  registerConnectable(connectable: ec2.IConnectable, portRange: ec2.Port): void;\n\n  /**\n   * Perform the given action on incoming requests\n   *\n   * This allows full control of the default action of the load balancer,\n   * including Action chaining, fixed responses and redirect responses. See\n   * the `ListenerAction` class for all options.\n   *\n   * It's possible to add routing conditions to the Action added in this way.\n   *\n   * It is not possible to add a default action to an imported IApplicationListener.\n   * In order to add actions to an imported IApplicationListener a `priority`\n   * must be provided.\n   */\n  addAction(id: string, props: AddApplicationActionProps): void;\n}\n\n/**\n * Properties to reference an existing listener\n */\nexport interface ApplicationListenerAttributes {\n  /**\n   * ARN of the listener\n   */\n  readonly listenerArn: string;\n\n  /**\n   * Security group ID of the load balancer this listener is associated with\n   *\n   * @deprecated use `securityGroup` instead\n   */\n  readonly securityGroupId?: string;\n\n  /**\n   * Security group of the load balancer this listener is associated with\n   */\n  readonly securityGroup?: ec2.ISecurityGroup;\n\n  /**\n   * The default port on which this listener is listening\n   */\n  readonly defaultPort?: number;\n\n  /**\n   * Whether the imported security group allows all outbound traffic or not when\n   * imported using `securityGroupId`\n   *\n   * Unless set to `false`, no egress rules will be added to the security group.\n   *\n   * @default true\n   *\n   * @deprecated use `securityGroup` instead\n   */\n  readonly securityGroupAllowsAllOutbound?: boolean;\n}\n\nabstract class ExternalApplicationListener extends Resource implements IApplicationListener {\n  /**\n   * Connections object.\n   */\n  public abstract readonly connections: ec2.Connections;\n\n  /**\n   * ARN of the listener\n   */\n  public abstract readonly listenerArn: string;\n\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n  }\n\n  /**\n   * Register that a connectable that has been added to this load balancer.\n   *\n   * Don't call this directly. It is called by ApplicationTargetGroup.\n   */\n  public registerConnectable(connectable: ec2.IConnectable, portRange: ec2.Port): void {\n    this.connections.allowTo(connectable, portRange, 'Load balancer to target');\n  }\n\n  /**\n   * Add one or more certificates to this listener.\n   * @deprecated use `addCertificates()`\n   */\n  public addCertificateArns(id: string, arns: string[]): void {\n    this.addCertificates(id, arns.map(ListenerCertificate.fromArn));\n  }\n\n  /**\n   * Add one or more certificates to this listener.\n   */\n  public addCertificates(id: string, certificates: IListenerCertificate[]): void {\n    new ApplicationListenerCertificate(this, id, {\n      listener: this,\n      certificates,\n    });\n  }\n\n  /**\n   * Load balance incoming requests to the given target groups.\n   *\n   * It's possible to add conditions to the TargetGroups added in this way.\n   * At least one TargetGroup must be added without conditions.\n   */\n  public addTargetGroups(id: string, props: AddApplicationTargetGroupsProps): void {\n    checkAddRuleProps(props);\n\n    if (props.priority !== undefined) {\n      // New rule\n      new ApplicationListenerRule(this, id, {\n        listener: this,\n        priority: props.priority,\n        ...props,\n      });\n    } else {\n      throw new Error('Cannot add default Target Groups to imported ApplicationListener');\n    }\n  }\n\n  /**\n   * Load balance incoming requests to the given load balancing targets.\n   *\n   * This method implicitly creates an ApplicationTargetGroup for the targets\n   * involved.\n   *\n   * It's possible to add conditions to the targets added in this way. At least\n   * one set of targets must be added without conditions.\n   *\n   * @returns The newly created target group\n   */\n  public addTargets(_id: string, _props: AddApplicationTargetsProps): ApplicationTargetGroup {\n    // eslint-disable-next-line max-len\n    throw new Error('Can only call addTargets() when using a constructed ApplicationListener; construct a new TargetGroup and use addTargetGroup.');\n  }\n\n  /**\n   * Perform the given action on incoming requests\n   *\n   * This allows full control of the default action of the load balancer,\n   * including Action chaining, fixed responses and redirect responses. See\n   * the `ListenerAction` class for all options.\n   *\n   * It's possible to add routing conditions to the Action added in this way.\n   *\n   * It is not possible to add a default action to an imported IApplicationListener.\n   * In order to add actions to an imported IApplicationListener a `priority`\n   * must be provided.\n   */\n  public addAction(id: string, props: AddApplicationActionProps): void {\n    checkAddRuleProps(props);\n\n    if (props.priority !== undefined) {\n      // New rule\n      //\n      // TargetGroup.registerListener is called inside ApplicationListenerRule.\n      new ApplicationListenerRule(this, id + 'Rule', {\n        listener: this,\n        priority: props.priority,\n        ...props,\n      });\n    } else {\n      throw new Error('priority must be set for actions added to an imported listener');\n    }\n  }\n}\n\n/**\n * An imported application listener.\n */\nclass ImportedApplicationListener extends ExternalApplicationListener {\n  public readonly listenerArn: string;\n  public readonly connections: ec2.Connections;\n\n  constructor(scope: Construct, id: string, props: ApplicationListenerAttributes) {\n    super(scope, id);\n\n    this.listenerArn = props.listenerArn;\n    const defaultPort = props.defaultPort !== undefined ? ec2.Port.tcp(props.defaultPort) : undefined;\n\n    let securityGroup: ec2.ISecurityGroup;\n    if (props.securityGroup) {\n      securityGroup = props.securityGroup;\n    } else if (props.securityGroupId) {\n      securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SecurityGroup', props.securityGroupId, {\n        allowAllOutbound: props.securityGroupAllowsAllOutbound,\n      });\n    } else {\n      throw new Error('Either `securityGroup` or `securityGroupId` must be specified to import an application listener.');\n    }\n\n    this.connections = new ec2.Connections({\n      securityGroups: [securityGroup],\n      defaultPort,\n    });\n  }\n}\n\nclass LookedUpApplicationListener extends ExternalApplicationListener {\n  public readonly listenerArn: string;\n  public readonly connections: ec2.Connections;\n\n  constructor(scope: Construct, id: string, props: cxapi.LoadBalancerListenerContextResponse) {\n    super(scope, id);\n\n    this.listenerArn = props.listenerArn;\n    this.connections = new ec2.Connections({\n      defaultPort: ec2.Port.tcp(props.listenerPort),\n    });\n\n    for (const securityGroupId of props.securityGroupIds) {\n      const securityGroup = ec2.SecurityGroup.fromLookupById(this, `SecurityGroup-${securityGroupId}`, securityGroupId);\n      this.connections.addSecurityGroup(securityGroup);\n    }\n  }\n}\n\n/**\n * Properties for adding a conditional load balancing rule\n */\nexport interface AddRuleProps {\n  /**\n   * Priority of this target group\n   *\n   * The rule with the lowest priority will be used for every request.\n   * If priority is not given, these target groups will be added as\n   * defaults, and must not have conditions.\n   *\n   * Priorities must be unique.\n   *\n   * @default Target groups are used as defaults\n   */\n  readonly priority?: number;\n\n  /**\n   * Rule applies if matches the conditions.\n   *\n   * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\n   *\n   * @default - No conditions.\n   */\n  readonly conditions?: ListenerCondition[];\n\n  /**\n   * Rule applies if the requested host matches the indicated host\n   *\n   * May contain up to three '*' wildcards.\n   *\n   * Requires that priority is set.\n   *\n   * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#host-conditions\n   *\n   * @default No host condition\n   * @deprecated Use `conditions` instead.\n   */\n  readonly hostHeader?: string;\n\n  /**\n   * Rule applies if the requested path matches the given path pattern\n   *\n   * May contain up to three '*' wildcards.\n   *\n   * Requires that priority is set.\n   *\n   * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#path-conditions\n   * @default No path condition\n   * @deprecated Use `conditions` instead.\n   */\n  readonly pathPattern?: string;\n\n  /**\n   * Rule applies if the requested path matches any of the given patterns.\n   *\n   * May contain up to three '*' wildcards.\n   *\n   * Requires that priority is set.\n   *\n   * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#path-conditions\n   * @default - No path condition.\n   * @deprecated Use `conditions` instead.\n   */\n  readonly pathPatterns?: string[];\n}\n\n/**\n * Properties for adding a new target group to a listener\n */\nexport interface AddApplicationTargetGroupsProps extends AddRuleProps {\n  /**\n   * Target groups to forward requests to\n   */\n  readonly targetGroups: IApplicationTargetGroup[];\n}\n\n/**\n * Properties for adding a new action to a listener\n */\nexport interface AddApplicationActionProps extends AddRuleProps {\n  /**\n   * Action to perform\n   */\n  readonly action: ListenerAction;\n}\n\n/**\n * Properties for adding new targets to a listener\n */\nexport interface AddApplicationTargetsProps extends AddRuleProps {\n  /**\n   * The protocol to use\n   *\n   * @default Determined from port if known\n   */\n  readonly protocol?: ApplicationProtocol;\n\n  /**\n   * The protocol version to use\n   *\n   * @default ApplicationProtocolVersion.HTTP1\n   */\n  readonly protocolVersion?: ApplicationProtocolVersion;\n\n  /**\n   * The port on which the listener listens for requests.\n   *\n   * @default Determined from protocol if known\n   */\n  readonly port?: number;\n\n  /**\n   * The time period during which the load balancer sends a newly registered\n   * target a linearly increasing share of the traffic to the target group.\n   *\n   * The range is 30-900 seconds (15 minutes).\n   *\n   * @default 0\n   */\n  readonly slowStart?: Duration;\n\n  /**\n   * The stickiness cookie expiration period.\n   *\n   * Setting this value enables load balancer stickiness.\n   *\n   * After this period, the cookie is considered stale. The minimum value is\n   * 1 second and the maximum value is 7 days (604800 seconds).\n   *\n   * @default Stickiness disabled\n   */\n  readonly stickinessCookieDuration?: Duration;\n\n  /**\n   * The name of an application-based stickiness cookie.\n   *\n   * Names that start with the following prefixes are not allowed: AWSALB, AWSALBAPP,\n   * and AWSALBTG; they're reserved for use by the load balancer.\n   *\n   * Note: `stickinessCookieName` parameter depends on the presence of `stickinessCookieDuration` parameter.\n   * If `stickinessCookieDuration` is not set, `stickinessCookieName` will be omitted.\n   *\n   * @default - If `stickinessCookieDuration` is set, a load-balancer generated cookie is used. Otherwise, no stickiness is defined.\n   * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/sticky-sessions.html\n   */\n  readonly stickinessCookieName?: string;\n\n  /**\n   * The targets to add to this target group.\n   *\n   * Can be `Instance`, `IPAddress`, or any self-registering load balancing\n   * target. All target must be of the same type.\n   */\n  readonly targets?: IApplicationLoadBalancerTarget[];\n\n  /**\n   * The name of the target group.\n   *\n   * This name must be unique per region per account, can have a maximum of\n   * 32 characters, must contain only alphanumeric characters or hyphens, and\n   * must not begin or end with a hyphen.\n   *\n   * @default Automatically generated\n   */\n  readonly targetGroupName?: string;\n\n  /**\n   * The amount of time for Elastic Load Balancing to wait before deregistering a target.\n   *\n   * The range is 0-3600 seconds.\n   *\n   * @default Duration.minutes(5)\n   */\n  readonly deregistrationDelay?: Duration;\n\n  /**\n   * Health check configuration\n   *\n   * @default - The default value for each property in this configuration varies depending on the target.\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html#aws-resource-elasticloadbalancingv2-targetgroup-properties\n   */\n  readonly healthCheck?: HealthCheck;\n\n  /**\n   * The load balancing algorithm to select targets for routing requests.\n   *\n   * @default round_robin.\n   */\n  readonly loadBalancingAlgorithmType?: TargetGroupLoadBalancingAlgorithmType;\n\n}\n\n/**\n * Properties for adding a fixed response to a listener\n *\n * @deprecated Use `ApplicationListener.addAction` instead.\n */\nexport interface AddFixedResponseProps extends AddRuleProps, FixedResponse {\n}\n\n/**\n * Properties for adding a redirect response to a listener\n *\n * @deprecated Use `ApplicationListener.addAction` instead.\n */\nexport interface AddRedirectResponseProps extends AddRuleProps, RedirectResponse {\n}\n\nfunction checkAddRuleProps(props: AddRuleProps) {\n  const conditionsCount = props.conditions?.length || 0;\n  const hasAnyConditions = conditionsCount !== 0 ||\n    props.hostHeader !== undefined || props.pathPattern !== undefined || props.pathPatterns !== undefined;\n  const hasPriority = props.priority !== undefined;\n  if (hasAnyConditions !== hasPriority) {\n    throw new Error('Setting \\'conditions\\', \\'pathPattern\\' or \\'hostHeader\\' also requires \\'priority\\', and vice versa');\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
