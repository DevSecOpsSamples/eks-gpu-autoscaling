{
  "version": 3,
  "sources": ["base-listener.ts"],
  "sourcesContent": ["import * as cxschema from '../../../cloud-assembly-schema';\nimport { Annotations, ContextProvider, Lazy, Resource, Token } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { CfnListener } from '../elasticloadbalancingv2.generated';\nimport { IListenerAction } from './listener-action';\nimport { mapTagMapToCxschema } from './util';\n\n/**\n * Options for listener lookup\n */\nexport interface BaseListenerLookupOptions {\n  /**\n   * Filter listeners by associated load balancer arn\n   * @default - does not filter by load balancer arn\n   */\n  readonly loadBalancerArn?: string;\n\n  /**\n   * Filter listeners by associated load balancer tags\n   * @default - does not filter by load balancer tags\n   */\n  readonly loadBalancerTags?: Record<string, string>;\n\n  /**\n   * Filter listeners by listener port\n   * @default - does not filter by listener port\n   */\n  readonly listenerPort?: number;\n}\n\n/**\n * Options for querying the load balancer listener context provider\n * @internal\n */\nexport interface ListenerQueryContextProviderOptions {\n  /**\n   * User's provided options\n   */\n  readonly userOptions: BaseListenerLookupOptions;\n\n  /**\n   * Type of load balancer expected\n   */\n  readonly loadBalancerType: cxschema.LoadBalancerType;\n\n  /**\n   * ARN of the listener to look up\n   * @default - does not filter by listener arn\n   */\n  readonly listenerArn?: string;\n\n  /**\n   * Optional protocol of the listener to look up\n   */\n  readonly listenerProtocol?: cxschema.LoadBalancerListenerProtocol;\n}\n\n/**\n * Base class for listeners\n */\nexport abstract class BaseListener extends Resource {\n  /**\n   * Queries the load balancer listener context provider for load balancer\n   * listener info.\n   * @internal\n   */\n  protected static _queryContextProvider(scope: Construct, options: ListenerQueryContextProviderOptions) {\n    if (Token.isUnresolved(options.userOptions.loadBalancerArn)\n      || Object.values(options.userOptions.loadBalancerTags ?? {}).some(Token.isUnresolved)\n      || Token.isUnresolved(options.userOptions.listenerPort)) {\n      throw new Error('All arguments to look up a load balancer listener must be concrete (no Tokens)');\n    }\n\n    let cxschemaTags: cxschema.Tag[] | undefined;\n    if (options.userOptions.loadBalancerTags) {\n      cxschemaTags = mapTagMapToCxschema(options.userOptions.loadBalancerTags);\n    }\n\n    const props: cxapi.LoadBalancerListenerContextResponse = ContextProvider.getValue(scope, {\n      provider: cxschema.ContextProvider.LOAD_BALANCER_LISTENER_PROVIDER,\n      props: {\n        listenerArn: options.listenerArn,\n        listenerPort: options.userOptions.listenerPort,\n        listenerProtocol: options.listenerProtocol,\n        loadBalancerArn: options.userOptions.loadBalancerArn,\n        loadBalancerTags: cxschemaTags,\n        loadBalancerType: options.loadBalancerType,\n      } as cxschema.LoadBalancerListenerContextQuery,\n      dummyValue: {\n        listenerArn: `arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/${options.loadBalancerType}/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2`,\n        listenerPort: 80,\n        securityGroupIds: ['sg-123456789012'],\n      } as cxapi.LoadBalancerListenerContextResponse,\n    }).value;\n\n    return props;\n  }\n  /**\n   * @attribute\n   */\n  public readonly listenerArn: string;\n\n  private defaultAction?: IListenerAction;\n\n  constructor(scope: Construct, id: string, additionalProps: any) {\n    super(scope, id);\n\n    const resource = new CfnListener(this, 'Resource', {\n      ...additionalProps,\n      defaultActions: Lazy.any({ produce: () => this.defaultAction?.renderActions() ?? [] }),\n    });\n\n    this.listenerArn = resource.ref;\n    this.node.addValidation({ validate: () => this.validateListener() });\n  }\n\n  /**\n   * Validate this listener\n   */\n  protected validateListener(): string[] {\n    if (!this.defaultAction) {\n      return ['Listener needs at least one default action or target group (call addTargetGroups or addAction)'];\n    }\n    return [];\n  }\n\n  /**\n   * Configure the default action\n   *\n   * @internal\n   */\n  protected _setDefaultAction(action: IListenerAction) {\n    // It might make sense to 'throw' here.\n    //\n    // However, programs may already exist out there which configured an action twice,\n    // in which case the second action accidentally overwrite the initial action, and in some\n    // way ended up with a program that did what the author intended. If we were to add throw now,\n    // the previously working program would be broken.\n    //\n    // Instead, signal this through a warning.\n    // @deprecate: upon the next major version bump, replace this with a `throw`\n    if (this.defaultAction) {\n      Annotations.of(this).addWarning('A default Action already existed on this Listener and was replaced. Configure exactly one default Action.');\n    }\n\n    this.defaultAction = action;\n  }\n}\n"],
  "mappings": "wJAAA,SAAA,QAAA,gCAAA,EACA,OAAA,QAAA,eAAA,EAGA,mCAAA,QAAA,qCAAA,EAEA,OAAA,QAAA,QAAA,EAuDA,MAAsB,oBAAqB,QAAA,QAAQ,CA4CjD,YAAY,MAAkB,GAAY,gBAAoB,CAC5D,MAAM,MAAO,EAAE,EAEf,KAAM,UAAW,GAAI,oCAAA,YAAY,KAAM,WAAY,IAC9C,gBACH,eAAgB,OAAA,KAAK,IAAI,CAAE,QAAS,IAAK,CAAA,GAAA,IAAA,GAAA,MAAA,IAAA,IAAC,KAAK,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,cAAa,KAAA,MAAA,KAAA,OAAA,GAAM,CAAA,CAAE,CAAA,CAAE,EACtF,EAED,KAAK,YAAc,SAAS,IAC5B,KAAK,KAAK,cAAc,CAAE,SAAU,IAAM,KAAK,iBAAgB,CAAE,CAAE,QA/CpD,uBAAsB,MAAkB,QAA4C,QACnG,GAAI,OAAA,MAAM,aAAa,QAAQ,YAAY,eAAe,GACrD,OAAO,OAAM,IAAC,QAAQ,YAAY,oBAAgB,MAAA,KAAA,OAAA,GAAI,CAAA,CAAE,EAAE,KAAK,OAAA,MAAM,YAAY,GACjF,OAAA,MAAM,aAAa,QAAQ,YAAY,YAAY,EACtD,KAAM,IAAI,OAAM,gFAAgF,EAGlG,GAAI,cACJ,MAAI,SAAQ,YAAY,kBACtB,cAAe,OAAA,oBAAoB,QAAQ,YAAY,gBAAgB,GAGhB,OAAA,gBAAgB,SAAS,MAAO,CACvF,SAAU,SAAS,gBAAgB,gCACnC,MAAO,CACL,YAAa,QAAQ,YACrB,aAAc,QAAQ,YAAY,aAClC,iBAAkB,QAAQ,iBAC1B,gBAAiB,QAAQ,YAAY,gBACrC,iBAAkB,aAClB,iBAAkB,QAAQ,kBAE5B,WAAY,CACV,YAAa,gEAAgE,QAAQ,sEACrF,aAAc,GACd,iBAAkB,CAAC,iBAAiB,GAEvC,EAAE,MA0BK,kBAAgB,CACxB,MAAK,MAAK,cAGH,CAAA,EAFE,CAAC,gGAAgG,EAUlG,kBAAkB,OAAuB,CAUjD,AAAI,KAAK,eACP,OAAA,YAAY,GAAG,IAAI,EAAE,WAAW,2GAA2G,EAG7I,KAAK,cAAgB,QArFzB,QAAA,aAAA",
  "names": []
}
