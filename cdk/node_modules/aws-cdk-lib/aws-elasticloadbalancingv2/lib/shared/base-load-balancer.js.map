{
  "version": 3,
  "sources": ["base-load-balancer.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport { PolicyStatement, ServicePrincipal } from '../../../aws-iam';\nimport * as s3 from '../../../aws-s3';\nimport * as cxschema from '../../../cloud-assembly-schema';\nimport { ContextProvider, IResource, Lazy, Resource, Stack, Token } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { RegionInfo } from '../../../region-info';\nimport { Construct } from 'constructs';\nimport { CfnLoadBalancer } from '../elasticloadbalancingv2.generated';\nimport { Attributes, ifUndefined, mapTagMapToCxschema, renderAttributes } from './util';\n\n/**\n * Shared properties of both Application and Network Load Balancers\n */\nexport interface BaseLoadBalancerProps {\n  /**\n   * Name of the load balancer\n   *\n   * @default - Automatically generated name.\n   */\n  readonly loadBalancerName?: string;\n\n  /**\n   * The VPC network to place the load balancer in\n   */\n  readonly vpc: ec2.IVpc;\n\n  /**\n   * Whether the load balancer has an internet-routable address\n   *\n   * @default false\n   */\n  readonly internetFacing?: boolean;\n\n  /**\n   * Which subnets place the load balancer in\n   *\n   * @default - the Vpc default strategy.\n   *\n   */\n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n  /**\n   * Indicates whether deletion protection is enabled.\n   *\n   * @default false\n   */\n  readonly deletionProtection?: boolean;\n}\n\nexport interface ILoadBalancerV2 extends IResource {\n  /**\n   * The canonical hosted zone ID of this load balancer\n   *\n   * Example value: `Z2P70J7EXAMPLE`\n   *\n   * @attribute\n   */\n  readonly loadBalancerCanonicalHostedZoneId: string;\n\n  /**\n   * The DNS name of this load balancer\n   *\n   * Example value: `my-load-balancer-424835706.us-west-2.elb.amazonaws.com`\n   *\n   * @attribute\n   */\n  readonly loadBalancerDnsName: string;\n}\n\n/**\n * Options for looking up load balancers\n */\nexport interface BaseLoadBalancerLookupOptions {\n  /**\n   * Find by load balancer's ARN\n   * @default - does not search by load balancer arn\n   */\n  readonly loadBalancerArn?: string;\n\n  /**\n   * Match load balancer tags.\n   * @default - does not match load balancers by tags\n   */\n  readonly loadBalancerTags?: Record<string, string>;\n}\n\n/**\n * Options for query context provider\n * @internal\n */\nexport interface LoadBalancerQueryContextProviderOptions {\n  /**\n   * User's lookup options\n   */\n  readonly userOptions: BaseLoadBalancerLookupOptions;\n\n  /**\n   * Type of load balancer\n   */\n  readonly loadBalancerType: cxschema.LoadBalancerType;\n}\n\n/**\n * Base class for both Application and Network Load Balancers\n */\nexport abstract class BaseLoadBalancer extends Resource {\n  /**\n   * Queries the load balancer context provider for load balancer info.\n   * @internal\n   */\n  protected static _queryContextProvider(scope: Construct, options: LoadBalancerQueryContextProviderOptions) {\n    if (Token.isUnresolved(options.userOptions.loadBalancerArn)\n      || Object.values(options.userOptions.loadBalancerTags ?? {}).some(Token.isUnresolved)) {\n      throw new Error('All arguments to look up a load balancer must be concrete (no Tokens)');\n    }\n\n    let cxschemaTags: cxschema.Tag[] | undefined;\n    if (options.userOptions.loadBalancerTags) {\n      cxschemaTags = mapTagMapToCxschema(options.userOptions.loadBalancerTags);\n    }\n\n    const props: cxapi.LoadBalancerContextResponse = ContextProvider.getValue(scope, {\n      provider: cxschema.ContextProvider.LOAD_BALANCER_PROVIDER,\n      props: {\n        loadBalancerArn: options.userOptions.loadBalancerArn,\n        loadBalancerTags: cxschemaTags,\n        loadBalancerType: options.loadBalancerType,\n      } as cxschema.LoadBalancerContextQuery,\n      dummyValue: {\n        ipAddressType: cxapi.LoadBalancerIpAddressType.DUAL_STACK,\n        loadBalancerArn: `arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/${options.loadBalancerType}/my-load-balancer/50dc6c495c0c9188`,\n        loadBalancerCanonicalHostedZoneId: 'Z3DZXE0EXAMPLE',\n        loadBalancerDnsName: 'my-load-balancer-1234567890.us-west-2.elb.amazonaws.com',\n        securityGroupIds: ['sg-1234'],\n        vpcId: 'vpc-12345',\n      } as cxapi.LoadBalancerContextResponse,\n    }).value;\n\n    return props;\n  }\n\n  /**\n   * The canonical hosted zone ID of this load balancer\n   *\n   * Example value: `Z2P70J7EXAMPLE`\n   *\n   * @attribute\n   */\n  public readonly loadBalancerCanonicalHostedZoneId: string;\n\n  /**\n   * The DNS name of this load balancer\n   *\n   * Example value: `my-load-balancer-424835706.us-west-2.elb.amazonaws.com`\n   *\n   * @attribute\n   */\n  public readonly loadBalancerDnsName: string;\n\n  /**\n   * The full name of this load balancer\n   *\n   * Example value: `app/my-load-balancer/50dc6c495c0c9188`\n   *\n   * @attribute\n   */\n  public readonly loadBalancerFullName: string;\n\n  /**\n   * The name of this load balancer\n   *\n   * Example value: `my-load-balancer`\n   *\n   * @attribute\n   */\n  public readonly loadBalancerName: string;\n\n  /**\n   * The ARN of this load balancer\n   *\n   * Example value: `arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-internal-load-balancer/50dc6c495c0c9188`\n   *\n   * @attribute\n   */\n  public readonly loadBalancerArn: string;\n\n  /**\n   * @attribute\n   */\n  public readonly loadBalancerSecurityGroups: string[];\n\n  /**\n   * The VPC this load balancer has been created in.\n   *\n   * This property is always defined (not `null` or `undefined`) for sub-classes of `BaseLoadBalancer`.\n   */\n  public readonly vpc?: ec2.IVpc;\n\n  /**\n   * Attributes set on this load balancer\n   */\n  private readonly attributes: Attributes = {};\n\n  constructor(scope: Construct, id: string, baseProps: BaseLoadBalancerProps, additionalProps: any) {\n    super(scope, id, {\n      physicalName: baseProps.loadBalancerName,\n    });\n\n    const internetFacing = ifUndefined(baseProps.internetFacing, false);\n\n    const vpcSubnets = ifUndefined(baseProps.vpcSubnets,\n      (internetFacing ? { subnetType: ec2.SubnetType.PUBLIC } : {}) );\n    const { subnetIds, internetConnectivityEstablished } = baseProps.vpc.selectSubnets(vpcSubnets);\n\n    this.vpc = baseProps.vpc;\n\n    const resource = new CfnLoadBalancer(this, 'Resource', {\n      name: this.physicalName,\n      subnets: subnetIds,\n      scheme: internetFacing ? 'internet-facing' : 'internal',\n      loadBalancerAttributes: Lazy.any({ produce: () => renderAttributes(this.attributes) }, { omitEmptyArray: true } ),\n      ...additionalProps,\n    });\n    if (internetFacing) {\n      resource.node.addDependency(internetConnectivityEstablished);\n    }\n\n    this.setAttribute('deletion_protection.enabled', baseProps.deletionProtection ? 'true' : 'false');\n\n    this.loadBalancerCanonicalHostedZoneId = resource.attrCanonicalHostedZoneId;\n    this.loadBalancerDnsName = resource.attrDnsName;\n    this.loadBalancerFullName = resource.attrLoadBalancerFullName;\n    this.loadBalancerName = resource.attrLoadBalancerName;\n    this.loadBalancerArn = resource.ref;\n    this.loadBalancerSecurityGroups = resource.attrSecurityGroups;\n\n    this.node.addValidation({ validate: this.validateLoadBalancer.bind(this) });\n  }\n\n  /**\n   * Enable access logging for this load balancer.\n   *\n   * A region must be specified on the stack containing the load balancer; you cannot enable logging on\n   * environment-agnostic stacks. See https://docs.aws.amazon.com/cdk/latest/guide/environments.html\n   */\n  public logAccessLogs(bucket: s3.IBucket, prefix?: string) {\n    prefix = prefix || '';\n    this.setAttribute('access_logs.s3.enabled', 'true');\n    this.setAttribute('access_logs.s3.bucket', bucket.bucketName.toString());\n    this.setAttribute('access_logs.s3.prefix', prefix);\n\n    const region = Stack.of(this).region;\n    if (Token.isUnresolved(region)) {\n      throw new Error('Region is required to enable ELBv2 access logging');\n    }\n\n    const account = RegionInfo.get(region).elbv2Account;\n    if (!account) {\n      throw new Error(`Cannot enable access logging; don't know ELBv2 account for region ${region}`);\n    }\n\n    const logsDeliveryServicePrincipal = new ServicePrincipal('delivery.logs.amazonaws.com');\n    bucket.grantPut(new iam.AccountPrincipal(account), `${(prefix ? prefix + '/' : '')}AWSLogs/${Stack.of(this).account}/*`);\n    bucket.addToResourcePolicy(\n      new PolicyStatement({\n        actions: ['s3:PutObject'],\n        principals: [logsDeliveryServicePrincipal],\n        resources: [\n          bucket.arnForObjects(`${prefix ? prefix + '/' : ''}AWSLogs/${this.stack.account}/*`),\n        ],\n        conditions: {\n          StringEquals: { 's3:x-amz-acl': 'bucket-owner-full-control' },\n        },\n      }),\n    );\n    bucket.addToResourcePolicy(\n      new PolicyStatement({\n        actions: ['s3:GetBucketAcl'],\n        principals: [logsDeliveryServicePrincipal],\n        resources: [bucket.bucketArn],\n      }),\n    );\n\n    // make sure the bucket's policy is created before the ALB (see https://github.com/aws/aws-cdk/issues/1633)\n    this.node.addDependency(bucket);\n  }\n\n  /**\n   * Set a non-standard attribute on the load balancer\n   *\n   * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes\n   */\n  public setAttribute(key: string, value: string | undefined) {\n    this.attributes[key] = value;\n  }\n\n  /**\n   * Remove an attribute from the load balancer\n   */\n  public removeAttribute(key: string) {\n    this.setAttribute(key, undefined);\n  }\n\n  protected validateLoadBalancer(): string[] {\n    const ret = new Array<string>();\n\n    // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html#cfn-elasticloadbalancingv2-loadbalancer-name\n    const loadBalancerName = this.physicalName;\n    if (!Token.isUnresolved(loadBalancerName) && loadBalancerName !== undefined) {\n      if (loadBalancerName.length > 32) {\n        ret.push(`Load balancer name: \"${loadBalancerName}\" can have a maximum of 32 characters.`);\n      }\n      if (loadBalancerName.startsWith('internal-')) {\n        ret.push(`Load balancer name: \"${loadBalancerName}\" must not begin with \"internal-\".`);\n      }\n      if (loadBalancerName.startsWith('-') || loadBalancerName.endsWith('-')) {\n        ret.push(`Load balancer name: \"${loadBalancerName}\" must not begin or end with a hyphen.`);\n      }\n      if (!/^[0-9a-z-]+$/i.test(loadBalancerName)) {\n        ret.push(`Load balancer name: \"${loadBalancerName}\" must contain only alphanumeric characters or hyphens.`);\n      }\n    }\n\n    return ret;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
