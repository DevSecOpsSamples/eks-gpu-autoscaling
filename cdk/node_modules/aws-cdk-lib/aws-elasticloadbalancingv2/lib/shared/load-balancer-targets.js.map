{
  "version": 3,
  "sources": ["load-balancer-targets.ts"],
  "sourcesContent": ["import { IApplicationLoadBalancerTarget, IApplicationTargetGroup } from '../alb/application-target-group';\nimport { INetworkLoadBalancerTarget, INetworkTargetGroup } from '../nlb/network-target-group';\nimport { ITargetGroup, LoadBalancerTargetProps } from './base-target-group';\nimport { TargetType } from './enums';\n\n/**\n * An EC2 instance that is the target for load balancing\n *\n * If you register a target of this type, you are responsible for making\n * sure the load balancer's security group can connect to the instance.\n *\n * @deprecated Use IpTarget from the @aws-cdk/aws-elasticloadbalancingv2-targets package instead.\n */\nexport class InstanceTarget implements IApplicationLoadBalancerTarget, INetworkLoadBalancerTarget {\n  /**\n   * Create a new Instance target\n   *\n   * @param instanceId Instance ID of the instance to register to\n   * @param port Override the default port for the target group\n   */\n  constructor(private readonly instanceId: string, private readonly port?: number) {\n  }\n\n  /**\n   * Register this instance target with a load balancer\n   *\n   * Don't call this, it is called automatically when you add the target to a\n   * load balancer.\n   */\n  public attachToApplicationTargetGroup(targetGroup: IApplicationTargetGroup): LoadBalancerTargetProps {\n    return this.attach(targetGroup);\n  }\n\n  /**\n   * Register this instance target with a load balancer\n   *\n   * Don't call this, it is called automatically when you add the target to a\n   * load balancer.\n   */\n  public attachToNetworkTargetGroup(targetGroup: INetworkTargetGroup): LoadBalancerTargetProps {\n    return this.attach(targetGroup);\n  }\n\n  private attach(_targetGroup: ITargetGroup): LoadBalancerTargetProps {\n    return {\n      targetType: TargetType.INSTANCE,\n      targetJson: { id: this.instanceId, port: this.port },\n    };\n  }\n}\n\n/**\n * An IP address that is a target for load balancing.\n *\n * Specify IP addresses from the subnets of the virtual private cloud (VPC) for\n * the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and\n * 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify\n * publicly routable IP addresses.\n *\n * If you register a target of this type, you are responsible for making\n * sure the load balancer's security group can send packets to the IP address.\n *\n * @deprecated Use IpTarget from the @aws-cdk/aws-elasticloadbalancingv2-targets package instead.\n */\nexport class IpTarget implements IApplicationLoadBalancerTarget, INetworkLoadBalancerTarget {\n  /**\n   * Create a new IPAddress target\n   *\n   * The availabilityZone parameter determines whether the target receives\n   * traffic from the load balancer nodes in the specified Availability Zone\n   * or from all enabled Availability Zones for the load balancer.\n   *\n   * This parameter is not supported if the target type of the target group\n   * is instance. If the IP address is in a subnet of the VPC for the target\n   * group, the Availability Zone is automatically detected and this\n   * parameter is optional. If the IP address is outside the VPC, this\n   * parameter is required.\n   *\n   * With an Application Load Balancer, if the IP address is outside the VPC\n   * for the target group, the only supported value is all.\n   *\n   * Default is automatic.\n   *\n   * @param ipAddress The IP Address to load balance to\n   * @param port Override the group's default port\n   * @param availabilityZone Availability zone to send traffic from\n   */\n  constructor(private readonly ipAddress: string, private readonly port?: number, private readonly availabilityZone?: string) {\n  }\n\n  /**\n   * Register this instance target with a load balancer\n   *\n   * Don't call this, it is called automatically when you add the target to a\n   * load balancer.\n   */\n  public attachToApplicationTargetGroup(targetGroup: IApplicationTargetGroup): LoadBalancerTargetProps {\n    return this.attach(targetGroup);\n  }\n\n  /**\n   * Register this instance target with a load balancer\n   *\n   * Don't call this, it is called automatically when you add the target to a\n   * load balancer.\n   */\n  public attachToNetworkTargetGroup(targetGroup: INetworkTargetGroup): LoadBalancerTargetProps {\n    return this.attach(targetGroup);\n  }\n\n  private attach(_targetGroup: ITargetGroup): LoadBalancerTargetProps {\n    return {\n      targetType: TargetType.IP,\n      targetJson: { id: this.ipAddress, port: this.port, availabilityZone: this.availabilityZone },\n    };\n  }\n}\n"],
  "mappings": "8KAGA,QAAA,QAAA,SAAA,EAUA,MAAa,cAAc,CAOzB,YAA6B,WAAqC,KAAa,CAAlD,KAAA,WAAA,WAAqC,KAAA,KAAA,KAS3D,+BAA+B,YAAoC,CACxE,MAAO,MAAK,OAAO,WAAW,EASzB,2BAA2B,YAAgC,CAChE,MAAO,MAAK,OAAO,WAAW,EAGxB,OAAO,aAA0B,CACvC,MAAO,CACL,WAAY,QAAA,WAAW,SACvB,WAAY,CAAE,GAAI,KAAK,WAAY,KAAM,KAAK,IAAI,IAjCxD,QAAA,eAAA,uIAmDA,MAAa,QAAQ,CAuBnB,YAA6B,UAAoC,KAAgC,iBAAyB,CAA7F,KAAA,UAAA,UAAoC,KAAA,KAAA,KAAgC,KAAA,iBAAA,iBAS1F,+BAA+B,YAAoC,CACxE,MAAO,MAAK,OAAO,WAAW,EASzB,2BAA2B,YAAgC,CAChE,MAAO,MAAK,OAAO,WAAW,EAGxB,OAAO,aAA0B,CACvC,MAAO,CACL,WAAY,QAAA,WAAW,GACvB,WAAY,CAAE,GAAI,KAAK,UAAW,KAAM,KAAK,KAAM,iBAAkB,KAAK,gBAAgB,IAjDhG,QAAA,SAAA",
  "names": []
}
