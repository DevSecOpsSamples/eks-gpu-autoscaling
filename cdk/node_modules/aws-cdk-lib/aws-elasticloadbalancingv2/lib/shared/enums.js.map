{
  "version": 3,
  "sources": ["enums.ts"],
  "sourcesContent": ["/**\n * What kind of addresses to allocate to the load balancer\n */\nexport enum IpAddressType {\n  /**\n   * Allocate IPv4 addresses\n   */\n  IPV4 = 'ipv4',\n\n  /**\n   * Allocate both IPv4 and IPv6 addresses\n   */\n  DUAL_STACK = 'dualstack',\n}\n\n/**\n * Backend protocol for network load balancers and health checks\n */\nexport enum Protocol {\n  /**\n   * HTTP (ALB health checks and NLB health checks)\n   */\n  HTTP = 'HTTP',\n\n  /**\n   * HTTPS (ALB health checks and NLB health checks)\n   */\n  HTTPS = 'HTTPS',\n\n  /**\n   * TCP (NLB, NLB health checks)\n   */\n  TCP = 'TCP',\n\n  /**\n   * TLS (NLB)\n   */\n  TLS = 'TLS',\n\n  /**\n   * UDP (NLB)\n   */\n  UDP = 'UDP',\n\n  /**\n   * Listen to both TCP and UDP on the same port (NLB)\n   */\n  TCP_UDP = 'TCP_UDP',\n}\n\n/**\n * Load balancing protocol for application load balancers\n */\nexport enum ApplicationProtocol {\n  /**\n   * HTTP\n   */\n  HTTP = 'HTTP',\n\n  /**\n   * HTTPS\n   */\n  HTTPS = 'HTTPS',\n}\n\n/**\n * Load balancing protocol version for application load balancers\n */\nexport enum ApplicationProtocolVersion {\n  /**\n   * GRPC\n   */\n  GRPC = 'GRPC',\n\n  /**\n   * HTTP1\n   */\n  HTTP1 = 'HTTP1',\n\n  /**\n   * HTTP2\n   */\n  HTTP2 = 'HTTP2',\n}\n\n/**\n * Elastic Load Balancing provides the following security policies for Application Load Balancers\n *\n * We recommend the Recommended policy for general use. You can\n * use the ForwardSecrecy policy if you require Forward Secrecy\n * (FS).\n *\n * You can use one of the TLS policies to meet compliance and security\n * standards that require disabling certain TLS protocol versions, or to\n * support legacy clients that require deprecated ciphers.\n *\n * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\n */\nexport enum SslPolicy {\n  /**\n   * The recommended security policy\n   */\n  RECOMMENDED = 'ELBSecurityPolicy-2016-08',\n\n  /**\n   * Strong foward secrecy ciphers and TLV1.2 only (2020 edition).\n   * Same as FORWARD_SECRECY_TLS12_RES, but only supports GCM versions of the TLS ciphers\n   */\n  FORWARD_SECRECY_TLS12_RES_GCM = 'ELBSecurityPolicy-FS-1-2-Res-2020-10',\n\n  /**\n   * Strong forward secrecy ciphers and TLS1.2 only\n   */\n  FORWARD_SECRECY_TLS12_RES = 'ELBSecurityPolicy-FS-1-2-Res-2019-08',\n\n  /**\n   * Forward secrecy ciphers and TLS1.2 only\n   */\n  FORWARD_SECRECY_TLS12 = 'ELBSecurityPolicy-FS-1-2-2019-08',\n\n  /**\n   * Forward secrecy ciphers only with TLS1.1 and higher\n   */\n  FORWARD_SECRECY_TLS11 = 'ELBSecurityPolicy-FS-1-1-2019-08',\n\n  /**\n   * Forward secrecy ciphers only\n   */\n  FORWARD_SECRECY = 'ELBSecurityPolicy-FS-2018-06',\n\n  /**\n   * TLS1.2 only and no SHA ciphers\n   */\n  TLS12 = 'ELBSecurityPolicy-TLS-1-2-2017-01',\n\n  /**\n   * TLS1.2 only with all ciphers\n   */\n  TLS12_EXT = 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06',\n\n  /**\n   * TLS1.1 and higher with all ciphers\n   */\n  TLS11 = 'ELBSecurityPolicy-TLS-1-1-2017-01',\n\n  /**\n   * Support for DES-CBC3-SHA\n   *\n   * Do not use this security policy unless you must support a legacy client\n   * that requires the DES-CBC3-SHA cipher, which is a weak cipher.\n   */\n  LEGACY = 'ELBSecurityPolicy-TLS-1-0-2015-04',\n}\n\n/**\n * How to interpret the load balancing target identifiers\n */\nexport enum TargetType {\n  /**\n   * Targets identified by instance ID\n   */\n  INSTANCE = 'instance',\n\n  /**\n   * Targets identified by IP address\n   */\n  IP = 'ip',\n\n  /**\n   * Target is a single Lambda Function\n   */\n  LAMBDA = 'lambda',\n\n  /**\n   * Target is a single Application Load Balancer\n   */\n  ALB = 'alb',\n}\n\n/**\n * Application-Layer Protocol Negotiation Policies for network load balancers.\n * Which protocols should be used over a secure connection.\n */\nexport enum AlpnPolicy {\n  /**\n   * Negotiate only HTTP/1.*. The ALPN preference list is http/1.1, http/1.0\n   */\n  HTTP1_ONLY = 'HTTP1Only',\n\n  /**\n   * Negotiate only HTTP/2. The ALPN preference list is h2\n   */\n  HTTP2_ONLY = 'HTTP2Only',\n\n  /**\n   * Prefer HTTP/1.* over HTTP/2 (which can be useful for HTTP/2 testing). The ALPN preference list is http/1.1, http/1.0, h2\n   */\n  HTTP2_OPTIONAL = 'HTTP2Optional',\n\n  /**\n   * Prefer HTTP/2 over HTTP/1.*. The ALPN preference list is h2, http/1.1, http/1.0\n   */\n  HTTP2_PREFERRED = 'HTTP2Preferred',\n\n  /**\n   * Do not negotiate ALPN\n   */\n  NONE = 'None',\n}\n\n/**\n * Load balancing algorithmm type for target groups\n */\nexport enum TargetGroupLoadBalancingAlgorithmType {\n  /**\n   * round_robin\n   */\n  ROUND_ROBIN = 'round_robin',\n\n  /**\n   * least_outstanding_requests\n   */\n  LEAST_OUTSTANDING_REQUESTS = 'least_outstanding_requests',\n}\n"],
  "mappings": "uRAGA,GAAY,eAAZ,AAAA,UAAY,eAAa,CAIvB,eAAA,KAAA,OAKA,eAAA,WAAA,WACF,GAVY,cAAA,QAAA,eAAA,SAAA,cAAa,CAAA,EAAA,EAezB,GAAY,UAAZ,AAAA,UAAY,UAAQ,CAIlB,UAAA,KAAA,OAKA,UAAA,MAAA,QAKA,UAAA,IAAA,MAKA,UAAA,IAAA,MAKA,UAAA,IAAA,MAKA,UAAA,QAAA,SACF,GA9BY,SAAA,QAAA,UAAA,SAAA,SAAQ,CAAA,EAAA,EAmCpB,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAI7B,qBAAA,KAAA,OAKA,qBAAA,MAAA,OACF,GAVY,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,CAAA,EAAA,EAe/B,GAAY,4BAAZ,AAAA,UAAY,4BAA0B,CAIpC,4BAAA,KAAA,OAKA,4BAAA,MAAA,QAKA,4BAAA,MAAA,OACF,GAfY,2BAAA,QAAA,4BAAA,SAAA,2BAA0B,CAAA,EAAA,EA8BtC,GAAY,WAAZ,AAAA,UAAY,WAAS,CAInB,WAAA,YAAA,4BAMA,WAAA,8BAAA,uCAKA,WAAA,0BAAA,uCAKA,WAAA,sBAAA,mCAKA,WAAA,sBAAA,mCAKA,WAAA,gBAAA,+BAKA,WAAA,MAAA,oCAKA,WAAA,UAAA,wCAKA,WAAA,MAAA,oCAQA,WAAA,OAAA,mCACF,GAtDY,UAAA,QAAA,WAAA,SAAA,UAAS,CAAA,EAAA,EA2DrB,GAAY,YAAZ,AAAA,UAAY,YAAU,CAIpB,YAAA,SAAA,WAKA,YAAA,GAAA,KAKA,YAAA,OAAA,SAKA,YAAA,IAAA,KACF,GApBY,WAAA,QAAA,YAAA,SAAA,WAAU,CAAA,EAAA,EA0BtB,GAAY,YAAZ,AAAA,UAAY,YAAU,CAIpB,YAAA,WAAA,YAKA,YAAA,WAAA,YAKA,YAAA,eAAA,gBAKA,YAAA,gBAAA,iBAKA,YAAA,KAAA,MACF,GAzBY,WAAA,QAAA,YAAA,SAAA,WAAU,CAAA,EAAA,EA8BtB,GAAY,uCAAZ,AAAA,UAAY,uCAAqC,CAI/C,uCAAA,YAAA,cAKA,uCAAA,2BAAA,4BACF,GAVY,sCAAA,QAAA,uCAAA,SAAA,sCAAqC,CAAA,EAAA",
  "names": []
}
