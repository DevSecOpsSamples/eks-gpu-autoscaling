{
  "version": 3,
  "sources": ["base-target-group.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as cdk from '../../../core';\nimport { Construct, DependencyGroup, IConstruct, IDependable } from 'constructs';\nimport { CfnTargetGroup } from '../elasticloadbalancingv2.generated';\nimport { Protocol, TargetType } from './enums';\nimport { Attributes, renderAttributes } from './util';\n\n/**\n * Basic properties of both Application and Network Target Groups\n */\nexport interface BaseTargetGroupProps {\n  /**\n   * The name of the target group.\n   *\n   * This name must be unique per region per account, can have a maximum of\n   * 32 characters, must contain only alphanumeric characters or hyphens, and\n   * must not begin or end with a hyphen.\n   *\n   * @default - Automatically generated.\n   */\n  readonly targetGroupName?: string;\n\n  /**\n   * The virtual private cloud (VPC).\n   *\n   * only if `TargetType` is `Ip` or `InstanceId`\n   *\n   * @default - undefined\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * The amount of time for Elastic Load Balancing to wait before deregistering a target.\n   *\n   * The range is 0-3600 seconds.\n   *\n   * @default 300\n   */\n  readonly deregistrationDelay?: cdk.Duration;\n\n  /**\n   * Health check configuration\n   *\n   * @default - The default value for each property in this configuration varies depending on the target.\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html#aws-resource-elasticloadbalancingv2-targetgroup-properties\n   */\n  readonly healthCheck?: HealthCheck;\n\n  /**\n   * The type of targets registered to this TargetGroup, either IP or Instance.\n   *\n   * All targets registered into the group must be of this type. If you\n   * register targets to the TargetGroup in the CDK app, the TargetType is\n   * determined automatically.\n   *\n   * @default - Determined automatically.\n   */\n  readonly targetType?: TargetType;\n}\n\n/**\n * Properties for configuring a health check\n */\nexport interface HealthCheck {\n\n  /**\n   * Indicates whether health checks are enabled. If the target type is lambda,\n   * health checks are disabled by default but can be enabled. If the target type\n   * is instance or ip, health checks are always enabled and cannot be disabled.\n   *\n   * @default - Determined automatically.\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * The approximate number of seconds between health checks for an individual target.\n   *\n   * @default Duration.seconds(30)\n   */\n  readonly interval?: cdk.Duration;\n\n  /**\n   * The ping path destination where Elastic Load Balancing sends health check requests.\n   *\n   * @default /\n   */\n  readonly path?: string;\n\n  /**\n   * The port that the load balancer uses when performing health checks on the targets.\n   *\n   * @default 'traffic-port'\n   */\n  readonly port?: string;\n\n  /**\n   * The protocol the load balancer uses when performing health checks on targets.\n   *\n   * The TCP protocol is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP.\n   * The TLS, UDP, and TCP_UDP protocols are not supported for health checks.\n   *\n   * @default HTTP for ALBs, TCP for NLBs\n   */\n  readonly protocol?: Protocol;\n\n  /**\n   * The amount of time, in seconds, during which no response from a target means a failed health check.\n   *\n   * For Application Load Balancers, the range is 2-60 seconds and the\n   * default is 5 seconds. For Network Load Balancers, this is 10 seconds for\n   * TCP and HTTPS health checks and 6 seconds for HTTP health checks.\n   *\n   * @default Duration.seconds(5) for ALBs, Duration.seconds(10) or Duration.seconds(6) for NLBs\n   */\n  readonly timeout?: cdk.Duration;\n\n  /**\n   * The number of consecutive health checks successes required before considering an unhealthy target healthy.\n   *\n   * For Application Load Balancers, the default is 5. For Network Load Balancers, the default is 3.\n   *\n   * @default 5 for ALBs, 3 for NLBs\n   */\n  readonly healthyThresholdCount?: number;\n\n  /**\n   * The number of consecutive health check failures required before considering a target unhealthy.\n   *\n   * For Application Load Balancers, the default is 2. For Network Load\n   * Balancers, this value must be the same as the healthy threshold count.\n   *\n   * @default 2\n   */\n  readonly unhealthyThresholdCount?: number;\n\n  /**\n   * GRPC code to use when checking for a successful response from a target.\n   *\n   * You can specify values between 0 and 99. You can specify multiple values\n   * (for example, \"0,1\") or a range of values (for example, \"0-5\").\n   *\n   * @default - 12\n   */\n  readonly healthyGrpcCodes?: string;\n\n  /**\n   * HTTP code to use when checking for a successful response from a target.\n   *\n   * For Application Load Balancers, you can specify values between 200 and\n   * 499, and the default value is 200. You can specify multiple values (for\n   * example, \"200,202\") or a range of values (for example, \"200-299\").\n   */\n  readonly healthyHttpCodes?: string;\n}\n\n/**\n * Define the target of a load balancer\n */\nexport abstract class TargetGroupBase extends Construct implements ITargetGroup {\n  /**\n   * The ARN of the target group\n   */\n  public readonly targetGroupArn: string;\n\n  /**\n   * The full name of the target group\n   */\n  public readonly targetGroupFullName: string;\n\n  /**\n   * The name of the target group\n   */\n  public readonly targetGroupName: string;\n\n  /**\n   * ARNs of load balancers load balancing to this TargetGroup\n   */\n  public readonly targetGroupLoadBalancerArns: string[];\n\n  /**\n   * Full name of first load balancer\n   *\n   * This identifier is emitted as a dimensions of the metrics of this target\n   * group.\n   *\n   * Example value: `app/my-load-balancer/123456789`\n   */\n  public abstract readonly firstLoadBalancerFullName: string;\n\n  /**\n   * Health check for the members of this target group\n   */\n  /**\n   * A token representing a list of ARNs of the load balancers that route traffic to this target group\n   */\n  public readonly loadBalancerArns: string;\n\n  public healthCheck: HealthCheck;\n\n  /**\n   * Default port configured for members of this target group\n   */\n  protected readonly defaultPort: number;\n\n  /**\n   * Configurable dependable with all resources that lead to load balancer attachment\n   */\n  protected readonly loadBalancerAttachedDependencies = new DependencyGroup();\n\n  /**\n   * The types of the directly registered members of this target group\n   */\n  protected targetType?: TargetType;\n\n  /**\n   * Attributes of this target group\n   */\n  private readonly attributes: Attributes = {};\n\n  /**\n   * The JSON objects returned by the directly registered members of this target group\n   */\n  private readonly targetsJson = new Array<CfnTargetGroup.TargetDescriptionProperty>();\n\n  /**\n   * The target group VPC\n   *\n   * @default - Required if adding instances instead of Lambdas to TargetGroup\n   */\n  private vpc?: ec2.IVpc;\n\n  /**\n   * The target group resource\n   */\n  private readonly resource: CfnTargetGroup;\n\n  constructor(scope: Construct, id: string, baseProps: BaseTargetGroupProps, additionalProps: any) {\n    super(scope, id);\n\n    if (baseProps.deregistrationDelay !== undefined) {\n      this.setAttribute('deregistration_delay.timeout_seconds', baseProps.deregistrationDelay.toSeconds().toString());\n    }\n\n    this.healthCheck = baseProps.healthCheck || {};\n    this.vpc = baseProps.vpc;\n    this.targetType = baseProps.targetType;\n\n    this.resource = new CfnTargetGroup(this, 'Resource', {\n      name: baseProps.targetGroupName,\n      targetGroupAttributes: cdk.Lazy.any({ produce: () => renderAttributes(this.attributes) }, { omitEmptyArray: true }),\n      targetType: cdk.Lazy.string({ produce: () => this.targetType }),\n      targets: cdk.Lazy.any({ produce: () => this.targetsJson }, { omitEmptyArray: true }),\n      vpcId: cdk.Lazy.string({ produce: () => this.vpc && this.targetType !== TargetType.LAMBDA ? this.vpc.vpcId : undefined }),\n\n      // HEALTH CHECK\n      healthCheckEnabled: cdk.Lazy.any({ produce: () => this.healthCheck?.enabled }),\n      healthCheckIntervalSeconds: cdk.Lazy.number({\n        produce: () => this.healthCheck?.interval?.toSeconds(),\n      }),\n      healthCheckPath: cdk.Lazy.string({ produce: () => this.healthCheck?.path }),\n      healthCheckPort: cdk.Lazy.string({ produce: () => this.healthCheck?.port }),\n      healthCheckProtocol: cdk.Lazy.string({ produce: () => this.healthCheck?.protocol }),\n      healthCheckTimeoutSeconds: cdk.Lazy.number({\n        produce: () => this.healthCheck?.timeout?.toSeconds(),\n      }),\n      healthyThresholdCount: cdk.Lazy.number({ produce: () => this.healthCheck?.healthyThresholdCount }),\n      unhealthyThresholdCount: cdk.Lazy.number({ produce: () => this.healthCheck?.unhealthyThresholdCount }),\n      matcher: cdk.Lazy.any({\n        produce: () => this.healthCheck?.healthyHttpCodes !== undefined || this.healthCheck?.healthyGrpcCodes !== undefined ? {\n          grpcCode: this.healthCheck.healthyGrpcCodes,\n          httpCode: this.healthCheck.healthyHttpCodes,\n        } : undefined,\n      }),\n\n      ...additionalProps,\n    });\n\n    this.targetGroupLoadBalancerArns = this.resource.attrLoadBalancerArns;\n    this.targetGroupArn = this.resource.ref;\n    this.targetGroupFullName = this.resource.attrTargetGroupFullName;\n    this.loadBalancerArns = this.resource.attrLoadBalancerArns.toString();\n    this.targetGroupName = this.resource.attrTargetGroupName;\n    this.defaultPort = additionalProps.port;\n\n    this.node.addValidation({ validate: () => this.validateTargetGroup() });\n  }\n\n  /**\n   * List of constructs that need to be depended on to ensure the TargetGroup is associated to a load balancer\n   */\n  public get loadBalancerAttached(): IDependable {\n    return this.loadBalancerAttachedDependencies;\n  }\n\n  /**\n   * Set/replace the target group's health check\n   */\n  public configureHealthCheck(healthCheck: HealthCheck) {\n    this.healthCheck = healthCheck;\n  }\n\n  /**\n   * Set a non-standard attribute on the target group\n   *\n   * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes\n   */\n  public setAttribute(key: string, value: string | undefined) {\n    this.attributes[key] = value;\n  }\n\n  /**\n   * Register the given load balancing target as part of this group\n   */\n  protected addLoadBalancerTarget(props: LoadBalancerTargetProps) {\n    if (this.targetType !== undefined && this.targetType !== props.targetType) {\n      throw new Error(`Already have a of type '${this.targetType}', adding '${props.targetType}'; make all targets the same type.`);\n    }\n    this.targetType = props.targetType;\n\n    if (this.targetType === TargetType.LAMBDA && this.targetsJson.length >= 1) {\n      throw new Error('TargetGroup can only contain one LAMBDA target. Create a new TargetGroup.');\n    }\n\n    if (props.targetJson) {\n      this.targetsJson.push(props.targetJson);\n    }\n  }\n\n  protected validateTargetGroup(): string[] {\n    const ret = new Array<string>();\n\n    if (this.targetType === undefined && this.targetsJson.length === 0) {\n      cdk.Annotations.of(this).addWarning(\"When creating an empty TargetGroup, you should specify a 'targetType' (this warning may become an error in the future).\");\n    }\n\n    if (this.targetType !== TargetType.LAMBDA && this.vpc === undefined) {\n      ret.push(\"'vpc' is required for a non-Lambda TargetGroup\");\n    }\n\n    // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html#cfn-elasticloadbalancingv2-targetgroup-name\n    const targetGroupName = this.resource.name;\n    if (!cdk.Token.isUnresolved(targetGroupName) && targetGroupName !== undefined) {\n      if (targetGroupName.length > 32) {\n        ret.push(`Target group name: \"${targetGroupName}\" can have a maximum of 32 characters.`);\n      }\n      if (targetGroupName.startsWith('-') || targetGroupName.endsWith('-')) {\n        ret.push(`Target group name: \"${targetGroupName}\" must not begin or end with a hyphen.`);\n      }\n      if (!/^[0-9a-z-]+$/i.test(targetGroupName)) {\n        ret.push(`Target group name: \"${targetGroupName}\" must contain only alphanumeric characters or hyphens.`);\n      }\n    }\n\n    return ret;\n  }\n}\n\n/**\n * Properties to reference an existing target group\n */\nexport interface TargetGroupAttributes {\n  /**\n   * ARN of the target group\n   */\n  readonly targetGroupArn: string;\n\n  /**\n   * Port target group is listening on\n   *\n   * @deprecated - This property is unused and the wrong type. No need to use it.\n   */\n  readonly defaultPort?: string;\n\n  /**\n   * A Token representing the list of ARNs for the load balancer routing to this target group\n   */\n  readonly loadBalancerArns?: string;\n}\n\n/**\n * Properties to reference an existing target group\n *\n * @deprecated Use TargetGroupAttributes instead\n */\nexport interface TargetGroupImportProps extends TargetGroupAttributes {\n}\n\n/**\n * A target group\n */\nexport interface ITargetGroup extends IConstruct {\n  /**\n   * The name of the target group\n   */\n  readonly targetGroupName: string;\n\n  /**\n   * ARN of the target group\n   */\n  readonly targetGroupArn: string;\n\n  /**\n   * A token representing a list of ARNs of the load balancers that route traffic to this target group\n   */\n  readonly loadBalancerArns: string;\n\n  /**\n   * Return an object to depend on the listeners added to this target group\n   */\n  readonly loadBalancerAttached: IDependable;\n}\n\n/**\n * Result of attaching a target to load balancer\n */\nexport interface LoadBalancerTargetProps {\n  /**\n   * What kind of target this is\n   */\n  readonly targetType: TargetType;\n\n  /**\n   * JSON representing the target's direct addition to the TargetGroup list\n   *\n   * May be omitted if the target is going to register itself later.\n   */\n  readonly targetJson?: any;\n}\n\n/**\n * Extract the full load balancer name (used for metrics) from the listener ARN:\n *\n * Turns\n *\n *     arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2\n *\n * Into\n *\n *     app/my-load-balancer/50dc6c495c0c9188\n */\nexport function loadBalancerNameFromListenerArn(listenerArn: string) {\n  const arnParts = cdk.Fn.split('/', listenerArn);\n  return `${cdk.Fn.select(1, arnParts)}/${cdk.Fn.select(2, arnParts)}/${cdk.Fn.select(3, arnParts)}`;\n}\n"],
  "mappings": "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",
  "names": []
}
