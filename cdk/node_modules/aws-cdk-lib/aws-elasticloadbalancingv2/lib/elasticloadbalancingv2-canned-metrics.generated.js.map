{
  "version": 3,
  "sources": ["elasticloadbalancingv2-canned-metrics.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nexport class ApplicationELBMetrics {\n  public static activeConnectionCountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ActiveConnectionCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static clientTlsNegotiationErrorCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static clientTlsNegotiationErrorCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static clientTlsNegotiationErrorCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ClientTLSNegotiationErrorCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static consumedLcUsAverage(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ConsumedLCUs',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static desyncMitigationModeNonCompliantRequestCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static desyncMitigationModeNonCompliantRequestCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static desyncMitigationModeNonCompliantRequestCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'DesyncMitigationMode_NonCompliant_Request_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static elbAuthErrorSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static elbAuthErrorSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static elbAuthErrorSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ELBAuthError',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static elbAuthFailureSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static elbAuthFailureSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static elbAuthFailureSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ELBAuthFailure',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static elbAuthLatencySum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static elbAuthLatencySum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static elbAuthLatencySum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ELBAuthLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static elbAuthRefreshTokenSuccessSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static elbAuthRefreshTokenSuccessSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static elbAuthRefreshTokenSuccessSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ELBAuthRefreshTokenSuccess',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static elbAuthSuccessSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static elbAuthSuccessSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static elbAuthSuccessSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ELBAuthSuccess',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static elbAuthUserClaimsSizeExceededSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static elbAuthUserClaimsSizeExceededSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static elbAuthUserClaimsSizeExceededSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ELBAuthUserClaimsSizeExceeded',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static grpcRequestCountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'GrpcRequestCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpFixedResponseCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpFixedResponseCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpFixedResponseCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTP_Fixed_Response_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpRedirectCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpRedirectCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpRedirectCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTP_Redirect_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpRedirectUrlLimitExceededCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpRedirectUrlLimitExceededCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpRedirectUrlLimitExceededCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTP_Redirect_Url_Limit_Exceeded_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeElb3XxCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpCodeElb3XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpCodeElb3XxCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_ELB_3XX_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeElb4XxCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpCodeElb4XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpCodeElb4XxCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_ELB_4XX_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeElb5XxCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpCodeElb5XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpCodeElb5XxCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_ELB_5XX_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeElb500CountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_ELB_500_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeElb502CountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_ELB_502_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeElb503CountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_ELB_503_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeElb504CountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_ELB_504_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeTarget2XxCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpCodeTarget2XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpCodeTarget2XxCountSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static httpCodeTarget2XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static httpCodeTarget2XxCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_Target_2XX_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeTarget3XxCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpCodeTarget3XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpCodeTarget3XxCountSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static httpCodeTarget3XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static httpCodeTarget3XxCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_Target_3XX_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeTarget4XxCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpCodeTarget4XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpCodeTarget4XxCountSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static httpCodeTarget4XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static httpCodeTarget4XxCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_Target_4XX_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static httpCodeTarget5XxCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static httpCodeTarget5XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static httpCodeTarget5XxCountSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static httpCodeTarget5XxCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static httpCodeTarget5XxCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HTTPCode_Target_5XX_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static iPv6ProcessedBytesSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'IPv6ProcessedBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static iPv6RequestCountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'IPv6RequestCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static newConnectionCountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'NewConnectionCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static nonStickyRequestCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static nonStickyRequestCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static nonStickyRequestCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'NonStickyRequestCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static processedBytesSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ProcessedBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static rejectedConnectionCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static rejectedConnectionCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static rejectedConnectionCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'RejectedConnectionCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static requestCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static requestCountSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static requestCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'RequestCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static ruleEvaluationsSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'RuleEvaluations',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static targetConnectionErrorCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static targetConnectionErrorCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static targetConnectionErrorCountSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static targetConnectionErrorCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static targetConnectionErrorCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'TargetConnectionErrorCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static targetResponseTimeAverage(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static targetResponseTimeAverage(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static targetResponseTimeAverage(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static targetResponseTimeAverage(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static targetResponseTimeAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'TargetResponseTime',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static targetTlsNegotiationErrorCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static targetTlsNegotiationErrorCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static targetTlsNegotiationErrorCountSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static targetTlsNegotiationErrorCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static targetTlsNegotiationErrorCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'TargetTLSNegotiationErrorCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static lambdaTargetProcessedBytesSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'LambdaTargetProcessedBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static requestCountPerTargetSum(dimensions: { TargetGroup: string }): MetricWithDims<{ TargetGroup: string }>;\n  public static requestCountPerTargetSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static requestCountPerTargetSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'RequestCountPerTarget',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static lambdaInternalErrorSum(dimensions: { TargetGroup: string }): MetricWithDims<{ TargetGroup: string }>;\n  public static lambdaInternalErrorSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static lambdaInternalErrorSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'LambdaInternalError',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static lambdaUserErrorSum(dimensions: { TargetGroup: string }): MetricWithDims<{ TargetGroup: string }>;\n  public static lambdaUserErrorSum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static lambdaUserErrorSum(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'LambdaUserError',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static droppedInvalidHeaderRequestCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'DroppedInvalidHeaderRequestCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static forwardedInvalidHeaderRequestCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'ForwardedInvalidHeaderRequestCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static healthyHostCountAverage(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static healthyHostCountAverage(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static healthyHostCountAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'HealthyHostCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static unHealthyHostCountAverage(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static unHealthyHostCountAverage(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static unHealthyHostCountAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/ApplicationELB',\n      metricName: 'UnHealthyHostCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n}\nexport class GatewayELBMetrics {\n  public static healthyHostCountAverage(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/GatewayELB',\n      metricName: 'HealthyHostCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static unHealthyHostCountAverage(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/GatewayELB',\n      metricName: 'UnHealthyHostCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static activeFlowCountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/GatewayELB',\n      metricName: 'ActiveFlowCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static consumedLcUsAverage(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/GatewayELB',\n      metricName: 'ConsumedLCUs',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static newFlowCountSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/GatewayELB',\n      metricName: 'NewFlowCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static processedBytesSum(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/GatewayELB',\n      metricName: 'ProcessedBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n}\nexport class NetworkELBMetrics {\n  public static activeFlowCountAverage(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static activeFlowCountAverage(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static activeFlowCountAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ActiveFlowCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static activeFlowCountTcpAverage(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static activeFlowCountTcpAverage(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static activeFlowCountTcpAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ActiveFlowCount_TCP',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static activeFlowCountTlsAverage(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static activeFlowCountTlsAverage(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static activeFlowCountTlsAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ActiveFlowCount_TLS',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static activeFlowCountUdpAverage(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static activeFlowCountUdpAverage(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static activeFlowCountUdpAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ActiveFlowCount_UDP',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static clientTlsNegotiationErrorCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static clientTlsNegotiationErrorCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static clientTlsNegotiationErrorCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ClientTLSNegotiationErrorCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static consumedLcUsAverage(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ConsumedLCUs',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static consumedLcUsTcpAverage(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ConsumedLCUs_TCP',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static consumedLcUsTlsAverage(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ConsumedLCUs_TLS',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static consumedLcUsUdpAverage(dimensions: { LoadBalancer: string }) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ConsumedLCUs_UDP',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static newFlowCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static newFlowCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static newFlowCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'NewFlowCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static newFlowCountTcpSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static newFlowCountTcpSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static newFlowCountTcpSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'NewFlowCount_TCP',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static newFlowCountTlsSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static newFlowCountTlsSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static newFlowCountTlsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'NewFlowCount_TLS',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static newFlowCountUdpSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static newFlowCountUdpSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static newFlowCountUdpSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'NewFlowCount_UDP',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static processedBytesSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static processedBytesSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static processedBytesSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ProcessedBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static processedBytesTcpSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static processedBytesTcpSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static processedBytesTcpSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ProcessedBytes_TCP',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static processedBytesTlsSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static processedBytesTlsSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static processedBytesTlsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ProcessedBytes_TLS',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static processedBytesUdpSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static processedBytesUdpSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static processedBytesUdpSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'ProcessedBytes_UDP',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static targetTlsNegotiationErrorCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static targetTlsNegotiationErrorCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static targetTlsNegotiationErrorCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'TargetTLSNegotiationErrorCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static tcpClientResetCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static tcpClientResetCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static tcpClientResetCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'TCP_Client_Reset_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static tcpElbResetCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static tcpElbResetCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static tcpElbResetCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'TCP_ELB_Reset_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static tcpTargetResetCountSum(dimensions: { LoadBalancer: string }): MetricWithDims<{ LoadBalancer: string }>;\n  public static tcpTargetResetCountSum(dimensions: { AvailabilityZone: string, LoadBalancer: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string }>;\n  public static tcpTargetResetCountSum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'TCP_Target_Reset_Count',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static healthyHostCountMinimum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static healthyHostCountMinimum(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static healthyHostCountMinimum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'HealthyHostCount',\n      dimensionsMap: dimensions,\n      statistic: 'Minimum',\n    };\n  }\n  public static unHealthyHostCountMaximum(dimensions: { LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ LoadBalancer: string, TargetGroup: string }>;\n  public static unHealthyHostCountMaximum(dimensions: { AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }): MetricWithDims<{ AvailabilityZone: string, LoadBalancer: string, TargetGroup: string }>;\n  public static unHealthyHostCountMaximum(dimensions: any) {\n    return {\n      namespace: 'AWS/NetworkELB',\n      metricName: 'UnHealthyHostCount',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n}\ntype MetricWithDims<D> = { namespace: string, metricName: string, statistic: string, dimensionsMap: D };\n"],
  "mappings": "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",
  "names": []
}
