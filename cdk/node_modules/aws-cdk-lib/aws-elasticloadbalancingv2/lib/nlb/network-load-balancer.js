"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.NetworkLoadBalancer=void 0;const jsiiDeprecationWarnings=require("../../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),cloudwatch=require("../../../aws-cloudwatch"),ec2=require("../../../aws-ec2"),cxschema=require("../../../cloud-assembly-schema"),core_1=require("../../../core"),elasticloadbalancingv2_canned_metrics_generated_1=require("../elasticloadbalancingv2-canned-metrics.generated"),base_load_balancer_1=require("../shared/base-load-balancer"),network_listener_1=require("./network-listener");class NetworkLoadBalancer extends base_load_balancer_1.BaseLoadBalancer{constructor(scope,id,props){super(scope,id,props,{type:"network"});jsiiDeprecationWarnings.aws_cdk_lib_aws_elasticloadbalancingv2_NetworkLoadBalancerProps(props),props.crossZoneEnabled&&this.setAttribute("load_balancing.cross_zone.enabled","true")}static fromLookup(scope,id,options){jsiiDeprecationWarnings.aws_cdk_lib_aws_elasticloadbalancingv2_NetworkLoadBalancerLookupOptions(options);const props=base_load_balancer_1.BaseLoadBalancer._queryContextProvider(scope,{userOptions:options,loadBalancerType:cxschema.LoadBalancerType.NETWORK});return new LookedUpNetworkLoadBalancer(scope,id,props)}static fromNetworkLoadBalancerAttributes(scope,id,attrs){jsiiDeprecationWarnings.aws_cdk_lib_aws_elasticloadbalancingv2_NetworkLoadBalancerAttributes(attrs);class Import extends core_1.Resource{constructor(){super(...arguments);this.loadBalancerArn=attrs.loadBalancerArn,this.vpc=attrs.vpc}addListener(lid,props){return new network_listener_1.NetworkListener(this,lid,{loadBalancer:this,...props})}get loadBalancerCanonicalHostedZoneId(){if(attrs.loadBalancerCanonicalHostedZoneId)return attrs.loadBalancerCanonicalHostedZoneId;throw new Error(`'loadBalancerCanonicalHostedZoneId' was not provided when constructing Network Load Balancer ${this.node.path} from attributes`)}get loadBalancerDnsName(){if(attrs.loadBalancerDnsName)return attrs.loadBalancerDnsName;throw new Error(`'loadBalancerDnsName' was not provided when constructing Network Load Balancer ${this.node.path} from attributes`)}}return new Import(scope,id,{environmentFromArn:attrs.loadBalancerArn})}addListener(id,props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_elasticloadbalancingv2_BaseNetworkListenerProps(props),new network_listener_1.NetworkListener(this,id,{loadBalancer:this,...props})}metric(metricName,props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_MetricOptions(props),new cloudwatch.Metric({namespace:"AWS/NetworkELB",metricName,dimensions:{LoadBalancer:this.loadBalancerFullName},...props}).attachTo(this)}metricActiveFlowCount(props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_MetricOptions(props),this.cannedMetric(elasticloadbalancingv2_canned_metrics_generated_1.NetworkELBMetrics.activeFlowCountAverage,props)}metricConsumedLCUs(props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_MetricOptions(props),this.cannedMetric(elasticloadbalancingv2_canned_metrics_generated_1.NetworkELBMetrics.consumedLcUsAverage,{statistic:"Sum",...props})}metricHealthyHostCount(props){return this.metric("HealthyHostCount",{statistic:"Average",...props})}metricUnHealthyHostCount(props){return this.metric("UnHealthyHostCount",{statistic:"Average",...props})}metricNewFlowCount(props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_MetricOptions(props),this.cannedMetric(elasticloadbalancingv2_canned_metrics_generated_1.NetworkELBMetrics.newFlowCountSum,props)}metricProcessedBytes(props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_MetricOptions(props),this.cannedMetric(elasticloadbalancingv2_canned_metrics_generated_1.NetworkELBMetrics.processedBytesSum,props)}metricTcpClientResetCount(props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_MetricOptions(props),this.cannedMetric(elasticloadbalancingv2_canned_metrics_generated_1.NetworkELBMetrics.tcpClientResetCountSum,props)}metricTcpElbResetCount(props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_MetricOptions(props),this.cannedMetric(elasticloadbalancingv2_canned_metrics_generated_1.NetworkELBMetrics.tcpElbResetCountSum,props)}metricTcpTargetResetCount(props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_cloudwatch_MetricOptions(props),this.cannedMetric(elasticloadbalancingv2_canned_metrics_generated_1.NetworkELBMetrics.tcpTargetResetCountSum,props)}cannedMetric(fn,props){return new cloudwatch.Metric({...fn({LoadBalancer:this.loadBalancerFullName}),...props}).attachTo(this)}}exports.NetworkLoadBalancer=NetworkLoadBalancer,_a=JSII_RTTI_SYMBOL_1,NetworkLoadBalancer[_a]={fqn:"aws-cdk-lib.aws_elasticloadbalancingv2.NetworkLoadBalancer",version:"2.20.0"};class LookedUpNetworkLoadBalancer extends core_1.Resource{constructor(scope,id,props){super(scope,id,{environmentFromArn:props.loadBalancerArn});this.loadBalancerArn=props.loadBalancerArn,this.loadBalancerCanonicalHostedZoneId=props.loadBalancerCanonicalHostedZoneId,this.loadBalancerDnsName=props.loadBalancerDnsName,this.vpc=ec2.Vpc.fromLookup(this,"Vpc",{vpcId:props.vpcId})}addListener(lid,props){return new network_listener_1.NetworkListener(this,lid,{loadBalancer:this,...props})}}
//# sourceMappingURL=network-load-balancer.js.map
