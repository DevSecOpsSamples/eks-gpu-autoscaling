{
  "version": 3,
  "sources": ["network-load-balancer.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../../aws-cloudwatch';\nimport * as ec2 from '../../../aws-ec2';\nimport * as cxschema from '../../../cloud-assembly-schema';\nimport { Resource } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { NetworkELBMetrics } from '../elasticloadbalancingv2-canned-metrics.generated';\nimport { BaseLoadBalancer, BaseLoadBalancerLookupOptions, BaseLoadBalancerProps, ILoadBalancerV2 } from '../shared/base-load-balancer';\nimport { BaseNetworkListenerProps, NetworkListener } from './network-listener';\n\n/**\n * Properties for a network load balancer\n */\nexport interface NetworkLoadBalancerProps extends BaseLoadBalancerProps {\n  /**\n   * Indicates whether cross-zone load balancing is enabled.\n   *\n   * @default false\n   */\n  readonly crossZoneEnabled?: boolean;\n}\n\n/**\n * Properties to reference an existing load balancer\n */\nexport interface NetworkLoadBalancerAttributes {\n  /**\n   * ARN of the load balancer\n   */\n  readonly loadBalancerArn: string;\n\n  /**\n   * The canonical hosted zone ID of this load balancer\n   *\n   * @default - When not provided, LB cannot be used as Route53 Alias target.\n   */\n  readonly loadBalancerCanonicalHostedZoneId?: string;\n\n  /**\n   * The DNS name of this load balancer\n   *\n   * @default - When not provided, LB cannot be used as Route53 Alias target.\n   */\n  readonly loadBalancerDnsName?: string;\n\n  /**\n   * The VPC to associate with the load balancer.\n   *\n   * @default - When not provided, listeners cannot be created on imported load\n   * balancers.\n   */\n  readonly vpc?: ec2.IVpc;\n}\n\n/**\n * Options for looking up an NetworkLoadBalancer\n */\nexport interface NetworkLoadBalancerLookupOptions extends BaseLoadBalancerLookupOptions {\n}\n\n/**\n * Define a new network load balancer\n *\n * @resource AWS::ElasticLoadBalancingV2::LoadBalancer\n */\nexport class NetworkLoadBalancer extends BaseLoadBalancer implements INetworkLoadBalancer {\n  /**\n   * Looks up the network load balancer.\n   */\n  public static fromLookup(scope: Construct, id: string, options: NetworkLoadBalancerLookupOptions): INetworkLoadBalancer {\n    const props = BaseLoadBalancer._queryContextProvider(scope, {\n      userOptions: options,\n      loadBalancerType: cxschema.LoadBalancerType.NETWORK,\n    });\n\n    return new LookedUpNetworkLoadBalancer(scope, id, props);\n  }\n\n  public static fromNetworkLoadBalancerAttributes(scope: Construct, id: string, attrs: NetworkLoadBalancerAttributes): INetworkLoadBalancer {\n    class Import extends Resource implements INetworkLoadBalancer {\n      public readonly loadBalancerArn = attrs.loadBalancerArn;\n      public readonly vpc?: ec2.IVpc = attrs.vpc;\n      public addListener(lid: string, props: BaseNetworkListenerProps): NetworkListener {\n        return new NetworkListener(this, lid, {\n          loadBalancer: this,\n          ...props,\n        });\n      }\n\n      public get loadBalancerCanonicalHostedZoneId(): string {\n        if (attrs.loadBalancerCanonicalHostedZoneId) { return attrs.loadBalancerCanonicalHostedZoneId; }\n        // eslint-disable-next-line max-len\n        throw new Error(`'loadBalancerCanonicalHostedZoneId' was not provided when constructing Network Load Balancer ${this.node.path} from attributes`);\n      }\n\n      public get loadBalancerDnsName(): string {\n        if (attrs.loadBalancerDnsName) { return attrs.loadBalancerDnsName; }\n        // eslint-disable-next-line max-len\n        throw new Error(`'loadBalancerDnsName' was not provided when constructing Network Load Balancer ${this.node.path} from attributes`);\n      }\n    }\n\n    return new Import(scope, id, { environmentFromArn: attrs.loadBalancerArn });\n  }\n\n  constructor(scope: Construct, id: string, props: NetworkLoadBalancerProps) {\n    super(scope, id, props, {\n      type: 'network',\n    });\n\n    if (props.crossZoneEnabled) { this.setAttribute('load_balancing.cross_zone.enabled', 'true'); }\n  }\n\n  /**\n   * Add a listener to this load balancer\n   *\n   * @returns The newly created listener\n   */\n  public addListener(id: string, props: BaseNetworkListenerProps): NetworkListener {\n    return new NetworkListener(this, id, {\n      loadBalancer: this,\n      ...props,\n    });\n  }\n\n  /**\n   * Return the given named metric for this Network Load Balancer\n   *\n   * @default Average over 5 minutes\n   */\n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/NetworkELB',\n      metricName,\n      dimensions: { LoadBalancer: this.loadBalancerFullName },\n      ...props,\n    }).attachTo(this);\n  }\n\n  /**\n   * The total number of concurrent TCP flows (or connections) from clients to targets.\n   *\n   * This metric includes connections in the SYN_SENT and ESTABLISHED states.\n   * TCP connections are not terminated at the load balancer, so a client\n   * opening a TCP connection to a target counts as a single flow.\n   *\n   * @default Average over 5 minutes\n   */\n  public metricActiveFlowCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.activeFlowCountAverage, props);\n  }\n\n  /**\n   * The number of load balancer capacity units (LCU) used by your load balancer.\n   *\n   * @default Sum over 5 minutes\n   */\n  public metricConsumedLCUs(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.consumedLcUsAverage, {\n      statistic: 'Sum',\n      ...props,\n    });\n  }\n\n  /**\n   * The number of targets that are considered healthy.\n   *\n   * @default Average over 5 minutes\n   * @deprecated use ``NetworkTargetGroup.metricHealthyHostCount`` instead\n   */\n  public metricHealthyHostCount(props?: cloudwatch.MetricOptions) {\n    return this.metric('HealthyHostCount', {\n      statistic: 'Average',\n      ...props,\n    });\n  }\n\n  /**\n   * The number of targets that are considered unhealthy.\n   *\n   * @default Average over 5 minutes\n   * @deprecated use ``NetworkTargetGroup.metricUnHealthyHostCount`` instead\n   */\n  public metricUnHealthyHostCount(props?: cloudwatch.MetricOptions) {\n    return this.metric('UnHealthyHostCount', {\n      statistic: 'Average',\n      ...props,\n    });\n  }\n\n  /**\n   * The total number of new TCP flows (or connections) established from clients to targets in the time period.\n   *\n   * @default Sum over 5 minutes\n   */\n  public metricNewFlowCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.newFlowCountSum, props);\n  }\n\n  /**\n   * The total number of bytes processed by the load balancer, including TCP/IP headers.\n   *\n   * @default Sum over 5 minutes\n   */\n  public metricProcessedBytes(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.processedBytesSum, props);\n  }\n\n  /**\n   * The total number of reset (RST) packets sent from a client to a target.\n   *\n   * These resets are generated by the client and forwarded by the load balancer.\n   *\n   * @default Sum over 5 minutes\n   */\n  public metricTcpClientResetCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.tcpClientResetCountSum, props);\n  }\n\n  /**\n   * The total number of reset (RST) packets generated by the load balancer.\n   *\n   * @default Sum over 5 minutes\n   */\n  public metricTcpElbResetCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.tcpElbResetCountSum, props);\n  }\n\n  /**\n   * The total number of reset (RST) packets sent from a target to a client.\n   *\n   * These resets are generated by the target and forwarded by the load balancer.\n   *\n   * @default Sum over 5 minutes\n   */\n  public metricTcpTargetResetCount(props?: cloudwatch.MetricOptions) {\n    return this.cannedMetric(NetworkELBMetrics.tcpTargetResetCountSum, props);\n  }\n\n  private cannedMetric(\n    fn: (dims: { LoadBalancer: string }) => cloudwatch.MetricProps,\n    props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      ...fn({ LoadBalancer: this.loadBalancerFullName }),\n      ...props,\n    }).attachTo(this);\n  }\n}\n\n/**\n * A network load balancer\n */\nexport interface INetworkLoadBalancer extends ILoadBalancerV2, ec2.IVpcEndpointServiceLoadBalancer {\n\n  /**\n   * The VPC this load balancer has been created in (if available)\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * Add a listener to this load balancer\n   *\n   * @returns The newly created listener\n   */\n  addListener(id: string, props: BaseNetworkListenerProps): NetworkListener;\n}\n\nclass LookedUpNetworkLoadBalancer extends Resource implements INetworkLoadBalancer {\n  public readonly loadBalancerCanonicalHostedZoneId: string;\n  public readonly loadBalancerDnsName: string;\n  public readonly loadBalancerArn: string;\n  public readonly vpc?: ec2.IVpc;\n\n  constructor(scope: Construct, id: string, props: cxapi.LoadBalancerContextResponse) {\n    super(scope, id, { environmentFromArn: props.loadBalancerArn });\n\n    this.loadBalancerArn = props.loadBalancerArn;\n    this.loadBalancerCanonicalHostedZoneId = props.loadBalancerCanonicalHostedZoneId;\n    this.loadBalancerDnsName = props.loadBalancerDnsName;\n\n    this.vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n      vpcId: props.vpcId,\n    });\n  }\n\n  public addListener(lid: string, props: BaseNetworkListenerProps): NetworkListener {\n    return new NetworkListener(this, lid, {\n      loadBalancer: this,\n      ...props,\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
