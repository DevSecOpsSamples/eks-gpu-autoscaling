{
  "version": 3,
  "sources": ["network-listener.ts"],
  "sourcesContent": ["import * as cxschema from '../../../cloud-assembly-schema';\nimport { Duration, IResource, Resource, Lazy } from '../../../core';\nimport { Construct } from 'constructs';\nimport { BaseListener, BaseListenerLookupOptions } from '../shared/base-listener';\nimport { HealthCheck } from '../shared/base-target-group';\nimport { AlpnPolicy, Protocol, SslPolicy } from '../shared/enums';\nimport { IListenerCertificate } from '../shared/listener-certificate';\nimport { validateNetworkProtocol } from '../shared/util';\nimport { NetworkListenerAction } from './network-listener-action';\nimport { NetworkListenerCertificate } from './network-listener-certificate';\nimport { INetworkLoadBalancer } from './network-load-balancer';\nimport { INetworkLoadBalancerTarget, INetworkTargetGroup, NetworkTargetGroup } from './network-target-group';\n\n/**\n * Basic properties for a Network Listener\n */\nexport interface BaseNetworkListenerProps {\n  /**\n   * The port on which the listener listens for requests.\n   */\n  readonly port: number;\n\n  /**\n   * Default target groups to load balance to\n   *\n   * All target groups will be load balanced to with equal weight and without\n   * stickiness. For a more complex configuration than that, use\n   * either `defaultAction` or `addAction()`.\n   *\n   * Cannot be specified together with `defaultAction`.\n   *\n   * @default - None.\n   */\n  readonly defaultTargetGroups?: INetworkTargetGroup[];\n\n  /**\n   * Default action to take for requests to this listener\n   *\n   * This allows full control of the default Action of the load balancer,\n   * including weighted forwarding. See the `NetworkListenerAction` class for\n   * all options.\n   *\n   * Cannot be specified together with `defaultTargetGroups`.\n   *\n   * @default - None.\n   */\n  readonly defaultAction?: NetworkListenerAction;\n\n  /**\n   * Protocol for listener, expects TCP, TLS, UDP, or TCP_UDP.\n   *\n   * @default - TLS if certificates are provided. TCP otherwise.\n   */\n  readonly protocol?: Protocol;\n\n  /**\n   * Certificate list of ACM cert ARNs. You must provide exactly one certificate if the listener protocol is HTTPS or TLS.\n   *\n   * @default - No certificates.\n   */\n  readonly certificates?: IListenerCertificate[];\n\n  /**\n   * SSL Policy\n   *\n   * @default - Current predefined security policy.\n   */\n  readonly sslPolicy?: SslPolicy;\n\n\n  /**\n   * Application-Layer Protocol Negotiation (ALPN) is a TLS extension that is sent on the initial TLS handshake hello messages.\n   * ALPN enables the application layer to negotiate which protocols should be used over a secure connection, such as HTTP/1 and HTTP/2.\n   *\n   * Can only be specified together with Protocol TLS.\n   *\n   * @default - None\n   */\n  readonly alpnPolicy?: AlpnPolicy;\n}\n\n/**\n * Properties for adding a certificate to a listener\n *\n * This interface exists for backwards compatibility.\n *\n * @deprecated Use IListenerCertificate instead\n */\nexport interface INetworkListenerCertificateProps extends IListenerCertificate {\n}\n\n/**\n * Properties for a Network Listener attached to a Load Balancer\n */\nexport interface NetworkListenerProps extends BaseNetworkListenerProps {\n  /**\n   * The load balancer to attach this listener to\n   */\n  readonly loadBalancer: INetworkLoadBalancer;\n}\n\n/**\n * Options for looking up a network listener.\n */\nexport interface NetworkListenerLookupOptions extends BaseListenerLookupOptions {\n  /**\n   * Protocol of the listener port\n   * @default - listener is not filtered by protocol\n   */\n  readonly listenerProtocol?: Protocol;\n}\n\n/**\n * Define a Network Listener\n *\n * @resource AWS::ElasticLoadBalancingV2::Listener\n */\nexport class NetworkListener extends BaseListener implements INetworkListener {\n  /**\n   * Looks up a network listener\n   */\n  public static fromLookup(scope: Construct, id: string, options: NetworkListenerLookupOptions): INetworkListener {\n    let listenerProtocol: cxschema.LoadBalancerListenerProtocol | undefined;\n    if (options.listenerProtocol) {\n      validateNetworkProtocol(options.listenerProtocol);\n\n      switch (options.listenerProtocol) {\n        case Protocol.TCP: listenerProtocol = cxschema.LoadBalancerListenerProtocol.TCP; break;\n        case Protocol.UDP: listenerProtocol = cxschema.LoadBalancerListenerProtocol.UDP; break;\n        case Protocol.TCP_UDP: listenerProtocol = cxschema.LoadBalancerListenerProtocol.TCP_UDP; break;\n        case Protocol.TLS: listenerProtocol = cxschema.LoadBalancerListenerProtocol.TLS; break;\n      }\n    }\n\n    const props = BaseListener._queryContextProvider(scope, {\n      userOptions: options,\n      listenerProtocol: listenerProtocol,\n      loadBalancerType: cxschema.LoadBalancerType.NETWORK,\n    });\n\n    class LookedUp extends Resource implements INetworkListener {\n      public listenerArn = props.listenerArn;\n    }\n\n    return new LookedUp(scope, id);\n  }\n\n  /**\n   * Import an existing listener\n   */\n  public static fromNetworkListenerArn(scope: Construct, id: string, networkListenerArn: string): INetworkListener {\n    class Import extends Resource implements INetworkListener {\n      public listenerArn = networkListenerArn;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The load balancer this listener is attached to\n   */\n  public readonly loadBalancer: INetworkLoadBalancer;\n\n  /**\n   * ARNs of certificates added to this listener\n   */\n  private readonly certificateArns: string[];\n\n  /**\n   * the protocol of the listener\n   */\n  private readonly protocol: Protocol;\n\n  constructor(scope: Construct, id: string, props: NetworkListenerProps) {\n    const certs = props.certificates || [];\n    const proto = props.protocol || (certs.length > 0 ? Protocol.TLS : Protocol.TCP);\n\n    validateNetworkProtocol(proto);\n\n    if (proto === Protocol.TLS && certs.filter(v => v != null).length === 0) {\n      throw new Error('When the protocol is set to TLS, you must specify certificates');\n    }\n\n    if (proto !== Protocol.TLS && certs.length > 0) {\n      throw new Error('Protocol must be TLS when certificates have been specified');\n    }\n\n    if (proto !== Protocol.TLS && props.alpnPolicy) {\n      throw new Error('Protocol must be TLS when alpnPolicy have been specified');\n    }\n\n    super(scope, id, {\n      loadBalancerArn: props.loadBalancer.loadBalancerArn,\n      protocol: proto,\n      port: props.port,\n      sslPolicy: props.sslPolicy,\n      certificates: Lazy.any({ produce: () => this.certificateArns.map(certificateArn => ({ certificateArn })) }, { omitEmptyArray: true }),\n      alpnPolicy: props.alpnPolicy ? [props.alpnPolicy] : undefined,\n    });\n\n    this.certificateArns = [];\n    this.loadBalancer = props.loadBalancer;\n    this.protocol = proto;\n\n    if (certs.length > 0) {\n      this.addCertificates('DefaultCertificates', certs);\n    }\n    if (props.defaultAction && props.defaultTargetGroups) {\n      throw new Error('Specify at most one of \\'defaultAction\\' and \\'defaultTargetGroups\\'');\n    }\n\n    if (props.defaultAction) {\n      this.setDefaultAction(props.defaultAction);\n    }\n\n    if (props.defaultTargetGroups) {\n      this.setDefaultAction(NetworkListenerAction.forward(props.defaultTargetGroups));\n    }\n  }\n\n  /**\n   * Add one or more certificates to this listener.\n   *\n   * After the first certificate, this creates NetworkListenerCertificates\n   * resources since cloudformation requires the certificates array on the\n   * listener resource to have a length of 1.\n   */\n  public addCertificates(id: string, certificates: IListenerCertificate[]): void {\n    const additionalCerts = [...certificates];\n    if (this.certificateArns.length === 0 && additionalCerts.length > 0) {\n      const first = additionalCerts.splice(0, 1)[0];\n      this.certificateArns.push(first.certificateArn);\n    }\n    // Only one certificate can be specified per resource, even though\n    // `certificates` is of type Array\n    for (let i = 0; i < additionalCerts.length; i++) {\n      new NetworkListenerCertificate(this, `${id}${i + 1}`, {\n        listener: this,\n        certificates: [additionalCerts[i]],\n      });\n    }\n  }\n\n  /**\n   * Load balance incoming requests to the given target groups.\n   *\n   * All target groups will be load balanced to with equal weight and without\n   * stickiness. For a more complex configuration than that, use `addAction()`.\n   */\n  public addTargetGroups(_id: string, ...targetGroups: INetworkTargetGroup[]): void {\n    this.setDefaultAction(NetworkListenerAction.forward(targetGroups));\n  }\n\n  /**\n   * Perform the given Action on incoming requests\n   *\n   * This allows full control of the default Action of the load balancer,\n   * including weighted forwarding. See the `NetworkListenerAction` class for\n   * all options.\n   */\n  public addAction(_id: string, props: AddNetworkActionProps): void {\n    this.setDefaultAction(props.action);\n  }\n\n  /**\n   * Load balance incoming requests to the given load balancing targets.\n   *\n   * This method implicitly creates a NetworkTargetGroup for the targets\n   * involved, and a 'forward' action to route traffic to the given TargetGroup.\n   *\n   * If you want more control over the precise setup, create the TargetGroup\n   * and use `addAction` yourself.\n   *\n   * It's possible to add conditions to the targets added in this way. At least\n   * one set of targets must be added without conditions.\n   *\n   * @returns The newly created target group\n   */\n  public addTargets(id: string, props: AddNetworkTargetsProps): NetworkTargetGroup {\n    if (!this.loadBalancer.vpc) {\n      // eslint-disable-next-line max-len\n      throw new Error('Can only call addTargets() when using a constructed Load Balancer or imported Load Balancer with specified VPC; construct a new TargetGroup and use addTargetGroup');\n    }\n\n    const group = new NetworkTargetGroup(this, id + 'Group', {\n      deregistrationDelay: props.deregistrationDelay,\n      healthCheck: props.healthCheck,\n      port: props.port,\n      protocol: props.protocol ?? this.protocol,\n      proxyProtocolV2: props.proxyProtocolV2,\n      preserveClientIp: props.preserveClientIp,\n      targetGroupName: props.targetGroupName,\n      targets: props.targets,\n      vpc: this.loadBalancer.vpc,\n    });\n\n    this.addTargetGroups(id, group);\n\n    return group;\n  }\n\n  /**\n   * Wrapper for _setDefaultAction which does a type-safe bind\n   */\n  private setDefaultAction(action: NetworkListenerAction) {\n    action.bind(this, this);\n    this._setDefaultAction(action);\n  }\n}\n\n/**\n * Properties to reference an existing listener\n */\nexport interface INetworkListener extends IResource {\n  /**\n   * ARN of the listener\n   * @attribute\n   */\n  readonly listenerArn: string;\n}\n\n/**\n * Properties for adding a new action to a listener\n */\nexport interface AddNetworkActionProps {\n  /**\n   * Action to perform\n   */\n  readonly action: NetworkListenerAction;\n}\n\n/**\n * Properties for adding new network targets to a listener\n */\nexport interface AddNetworkTargetsProps {\n  /**\n   * The port on which the listener listens for requests.\n   *\n   * @default Determined from protocol if known\n   */\n  readonly port: number;\n\n  /**\n   * Protocol for target group, expects TCP, TLS, UDP, or TCP_UDP.\n   *\n   * @default - inherits the protocol of the listener\n   */\n  readonly protocol?: Protocol;\n\n  /**\n   * The targets to add to this target group.\n   *\n   * Can be `Instance`, `IPAddress`, or any self-registering load balancing\n   * target. If you use either `Instance` or `IPAddress` as targets, all\n   * target must be of the same type.\n   */\n  readonly targets?: INetworkLoadBalancerTarget[];\n\n  /**\n   * The name of the target group.\n   *\n   * This name must be unique per region per account, can have a maximum of\n   * 32 characters, must contain only alphanumeric characters or hyphens, and\n   * must not begin or end with a hyphen.\n   *\n   * @default Automatically generated\n   */\n  readonly targetGroupName?: string;\n\n  /**\n   * The amount of time for Elastic Load Balancing to wait before deregistering a target.\n   *\n   * The range is 0-3600 seconds.\n   *\n   * @default Duration.minutes(5)\n   */\n  readonly deregistrationDelay?: Duration;\n\n  /**\n   * Indicates whether Proxy Protocol version 2 is enabled.\n   *\n   * @default false\n   */\n  readonly proxyProtocolV2?: boolean;\n\n  /**\n   * Indicates whether client IP preservation is enabled.\n   *\n   * @default false if the target group type is IP address and the\n   * target group protocol is TCP or TLS. Otherwise, true.\n   */\n  readonly preserveClientIp?: boolean;\n\n  /**\n   * Health check configuration\n   *\n   * @default - The default value for each property in this configuration varies depending on the target.\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html#aws-resource-elasticloadbalancingv2-targetgroup-properties\n   */\n  readonly healthCheck?: HealthCheck;\n}\n"],
  "mappings": "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",
  "names": []
}
