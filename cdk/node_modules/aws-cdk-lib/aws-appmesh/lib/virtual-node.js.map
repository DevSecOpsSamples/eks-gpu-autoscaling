{
  "version": 3,
  "sources": ["virtual-node.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnVirtualNode } from './appmesh.generated';\nimport { IMesh, Mesh } from './mesh';\nimport { renderMeshOwner, renderTlsClientPolicy } from './private/utils';\nimport { ServiceDiscovery, ServiceDiscoveryConfig } from './service-discovery';\nimport { AccessLog, BackendDefaults, Backend } from './shared-interfaces';\nimport { VirtualNodeListener, VirtualNodeListenerConfig } from './virtual-node-listener';\n\n/**\n * Interface which all VirtualNode based classes must implement\n */\nexport interface IVirtualNode extends cdk.IResource {\n  /**\n   * The name of the VirtualNode\n   *\n   * @attribute\n   */\n  readonly virtualNodeName: string;\n\n  /**\n   * The Amazon Resource Name belonging to the VirtualNode\n   *\n   * Set this value as the APPMESH_VIRTUAL_NODE_NAME environment variable for\n   * your task group's Envoy proxy container in your task definition or pod\n   * spec.\n   *\n   * @attribute\n   */\n  readonly virtualNodeArn: string;\n\n  /**\n   * The Mesh which the VirtualNode belongs to\n   */\n  readonly mesh: IMesh;\n\n  /**\n   * Grants the given entity `appmesh:StreamAggregatedResources`.\n   */\n  grantStreamAggregatedResources(identity: iam.IGrantable): iam.Grant;\n}\n\n/**\n * Basic configuration properties for a VirtualNode\n */\nexport interface VirtualNodeBaseProps {\n  /**\n   * The name of the VirtualNode\n   *\n   * @default - A name is automatically determined\n   */\n  readonly virtualNodeName?: string;\n\n\n  /**\n   * Defines how upstream clients will discover this VirtualNode\n   *\n   * @default - No Service Discovery\n   */\n  readonly serviceDiscovery?: ServiceDiscovery;\n\n  /**\n   * Virtual Services that this is node expected to send outbound traffic to\n   *\n   * @default - No backends\n   */\n  readonly backends?: Backend[];\n\n  /**\n   * Initial listener for the virtual node\n   *\n   * @default - No listeners\n   */\n  readonly listeners?: VirtualNodeListener[];\n\n  /**\n   * Access Logging Configuration for the virtual node\n   *\n   * @default - No access logging\n   */\n  readonly accessLog?: AccessLog;\n\n  /**\n   * Default Configuration Virtual Node uses to communicate with Virtual Service\n   *\n   * @default - No Config\n   */\n  readonly backendDefaults?: BackendDefaults;\n}\n\n/**\n * The properties used when creating a new VirtualNode\n */\nexport interface VirtualNodeProps extends VirtualNodeBaseProps {\n  /**\n   * The Mesh which the VirtualNode belongs to\n   */\n  readonly mesh: IMesh;\n}\n\nabstract class VirtualNodeBase extends cdk.Resource implements IVirtualNode {\n  /**\n   * The name of the VirtualNode\n   */\n  public abstract readonly virtualNodeName: string;\n\n  /**\n   * The Amazon Resource Name belonging to the VirtualNode\n   */\n  public abstract readonly virtualNodeArn: string;\n\n  /**\n   * The Mesh which the VirtualNode belongs to\n   */\n  public abstract readonly mesh: IMesh;\n\n  public grantStreamAggregatedResources(identity: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions: ['appmesh:StreamAggregatedResources'],\n      resourceArns: [this.virtualNodeArn],\n    });\n  }\n}\n\n/**\n * VirtualNode represents a newly defined AppMesh VirtualNode\n *\n * Any inbound traffic that your virtual node expects should be specified as a\n * listener. Any outbound traffic that your virtual node expects to reach\n * should be specified as a backend.\n *\n * @see https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\n */\nexport class VirtualNode extends VirtualNodeBase {\n  /**\n   * Import an existing VirtualNode given an ARN\n   */\n  public static fromVirtualNodeArn(scope: Construct, id: string, virtualNodeArn: string): IVirtualNode {\n    return new class extends VirtualNodeBase {\n      readonly virtualNodeArn = virtualNodeArn;\n      private readonly parsedArn = cdk.Fn.split('/', cdk.Stack.of(scope).splitArn(virtualNodeArn, cdk.ArnFormat.SLASH_RESOURCE_NAME).resourceName!);\n      readonly mesh = Mesh.fromMeshName(this, 'Mesh', cdk.Fn.select(0, this.parsedArn));\n      readonly virtualNodeName = cdk.Fn.select(2, this.parsedArn);\n    }(scope, id);\n  }\n\n  /**\n   * Import an existing VirtualNode given its name\n   */\n  public static fromVirtualNodeAttributes(scope: Construct, id: string, attrs: VirtualNodeAttributes): IVirtualNode {\n    return new class extends VirtualNodeBase {\n      readonly mesh = attrs.mesh;\n      readonly virtualNodeName = attrs.virtualNodeName;\n      readonly virtualNodeArn = cdk.Stack.of(this).formatArn({\n        service: 'appmesh',\n        resource: `mesh/${attrs.mesh.meshName}/virtualNode`,\n        resourceName: this.virtualNodeName,\n      });\n    }(scope, id);\n  }\n\n  /**\n   * The name of the VirtualNode\n   */\n  public readonly virtualNodeName: string;\n\n  /**\n   * The Amazon Resource Name belonging to the VirtualNode\n   */\n  public readonly virtualNodeArn: string;\n\n  /**\n   * The Mesh which the VirtualNode belongs to\n   */\n  public readonly mesh: IMesh;\n\n  private readonly serviceDiscoveryConfig?: ServiceDiscoveryConfig;\n\n  private readonly backends = new Array<CfnVirtualNode.BackendProperty>();\n  private readonly listeners = new Array<VirtualNodeListenerConfig>();\n\n  constructor(scope: Construct, id: string, props: VirtualNodeProps) {\n    super(scope, id, {\n      physicalName: props.virtualNodeName || cdk.Lazy.string({ produce: () => cdk.Names.uniqueId(this) }),\n    });\n\n    this.mesh = props.mesh;\n    this.serviceDiscoveryConfig = props.serviceDiscovery?.bind(this);\n\n    props.backends?.forEach(backend => this.addBackend(backend));\n    props.listeners?.forEach(listener => this.addListener(listener));\n    const accessLogging = props.accessLog?.bind(this);\n\n    const node = new CfnVirtualNode(this, 'Resource', {\n      virtualNodeName: this.physicalName,\n      meshName: this.mesh.meshName,\n      meshOwner: renderMeshOwner(this.env.account, this.mesh.env.account),\n      spec: {\n        backends: cdk.Lazy.any({ produce: () => this.backends }, { omitEmptyArray: true }),\n        listeners: cdk.Lazy.any({ produce: () => this.listeners.map(listener => listener.listener) }, { omitEmptyArray: true }),\n        backendDefaults: props.backendDefaults !== undefined\n          ? {\n            clientPolicy: {\n              tls: renderTlsClientPolicy(this, props.backendDefaults?.tlsClientPolicy),\n            },\n          }\n          : undefined,\n        serviceDiscovery: renderServiceDiscovery(this.serviceDiscoveryConfig),\n        logging: accessLogging !== undefined ? {\n          accessLog: accessLogging.virtualNodeAccessLog,\n        } : undefined,\n      },\n    });\n\n    this.virtualNodeName = this.getResourceNameAttribute(node.attrVirtualNodeName);\n    this.virtualNodeArn = this.getResourceArnAttribute(node.ref, {\n      service: 'appmesh',\n      resource: `mesh/${props.mesh.meshName}/virtualNode`,\n      resourceName: this.physicalName,\n    });\n  }\n\n  /**\n   * Utility method to add an inbound listener for this VirtualNode\n   *\n   * Note: At this time, Virtual Nodes support at most one listener. Adding\n   * more than one will result in a failure to deploy the CloudFormation stack.\n   * However, the App Mesh team has plans to add support for multiple listeners\n   * on Virtual Nodes and Virtual Routers.\n   *\n   * @see https://github.com/aws/aws-app-mesh-roadmap/issues/120\n   */\n  public addListener(listener: VirtualNodeListener) {\n    if (!this.serviceDiscoveryConfig) {\n      throw new Error('Service discovery information is required for a VirtualNode with a listener.');\n    }\n    this.listeners.push(listener.bind(this));\n  }\n\n  /**\n   * Add a Virtual Services that this node is expected to send outbound traffic to\n   */\n  public addBackend(backend: Backend) {\n    this.backends.push(backend.bind(this).virtualServiceBackend);\n  }\n}\n\n/**\n * Interface with properties necessary to import a reusable VirtualNode\n */\nexport interface VirtualNodeAttributes {\n  /**\n   * The name of the VirtualNode\n   */\n  readonly virtualNodeName: string;\n\n  /**\n   * The Mesh that the VirtualNode belongs to\n   */\n  readonly mesh: IMesh;\n}\n\nfunction renderServiceDiscovery(config?: ServiceDiscoveryConfig): CfnVirtualNode.ServiceDiscoveryProperty | undefined {\n  return config\n    ? {\n      dns: config?.dns,\n      awsCloudMap: config?.cloudmap,\n    }\n    : undefined;\n}\n"],
  "mappings": "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",
  "names": []
}
