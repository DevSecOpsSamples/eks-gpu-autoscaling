{
  "version": 3,
  "sources": ["gateway-route-spec.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnGatewayRoute } from './appmesh.generated';\nimport { HeaderMatch } from './header-match';\nimport { HttpRouteMethod } from './http-route-method';\nimport { HttpGatewayRoutePathMatch } from './http-route-path-match';\nimport { validateGrpcMatchArrayLength, validateGrpcGatewayRouteMatch } from './private/utils';\nimport { QueryParameterMatch } from './query-parameter-match';\nimport { Protocol } from './shared-interfaces';\nimport { IVirtualService } from './virtual-service';\n\n/**\n * Configuration for gateway route host name match.\n */\nexport interface GatewayRouteHostnameMatchConfig {\n  /**\n   * GatewayRoute CFN configuration for host name match.\n   */\n  readonly hostnameMatch: CfnGatewayRoute.GatewayRouteHostnameMatchProperty;\n}\n\n/**\n * Used to generate host name matching methods.\n */\nexport abstract class GatewayRouteHostnameMatch {\n  /**\n   * The value of the host name must match the specified value exactly.\n   *\n   * @param name The exact host name to match on\n   */\n  public static exactly(name: string): GatewayRouteHostnameMatch {\n    return new GatewayRouteHostnameMatchImpl({ exact: name });\n  }\n\n  /**\n   * The value of the host name with the given name must end with the specified characters.\n   *\n   * @param suffix The specified ending characters of the host name to match on\n   */\n  public static endsWith(suffix: string): GatewayRouteHostnameMatch {\n    return new GatewayRouteHostnameMatchImpl({ suffix });\n  }\n\n  /**\n   * Returns the gateway route host name match configuration.\n   */\n  public abstract bind(scope: Construct): GatewayRouteHostnameMatchConfig;\n}\n\nclass GatewayRouteHostnameMatchImpl extends GatewayRouteHostnameMatch {\n  constructor(\n    private readonly matchProperty: CfnGatewayRoute.GatewayRouteHostnameMatchProperty,\n  ) {\n    super();\n  }\n\n  bind(_scope: Construct): GatewayRouteHostnameMatchConfig {\n    return {\n      hostnameMatch: this.matchProperty,\n    };\n  }\n}\n\n/**\n * The criterion for determining a request match for this GatewayRoute.\n */\nexport interface HttpGatewayRouteMatch {\n  /**\n   * Specify how to match requests based on the 'path' part of their URL.\n   *\n   * @default - matches requests with any path\n   */\n  readonly path?: HttpGatewayRoutePathMatch;\n\n  /**\n   * Specifies the client request headers to match on. All specified headers\n   * must match for the gateway route to match.\n   *\n   * @default - do not match on headers\n   */\n  readonly headers?: HeaderMatch[];\n\n  /**\n   * The gateway route host name to be matched on.\n   *\n   * @default - do not match on host name\n   */\n  readonly hostname?: GatewayRouteHostnameMatch;\n\n  /**\n   * The method to match on.\n   *\n   * @default - do not match on method\n   */\n  readonly method?: HttpRouteMethod;\n\n  /**\n   * The query parameters to match on.\n   * All specified query parameters must match for the route to match.\n   *\n   * @default - do not match on query parameters\n   */\n  readonly queryParameters?: QueryParameterMatch[];\n\n  /**\n   * When `true`, rewrites the original request received at the Virtual Gateway to the destination Virtual Service name.\n   * When `false`, retains the original hostname from the request.\n   *\n   * @default true\n   */\n  readonly rewriteRequestHostname?: boolean;\n}\n\n/**\n * The criterion for determining a request match for this GatewayRoute\n */\nexport interface GrpcGatewayRouteMatch {\n  /**\n   * Create service name based gRPC gateway route match.\n   *\n   * @default - no matching on service name\n   */\n  readonly serviceName?: string;\n\n  /**\n   * Create host name based gRPC gateway route match.\n   *\n   * @default - no matching on host name\n   */\n  readonly hostname?: GatewayRouteHostnameMatch;\n\n  /**\n   * Create metadata based gRPC gateway route match.\n   * All specified metadata must match for the route to match.\n   *\n   * @default - no matching on metadata\n   */\n  readonly metadata?: HeaderMatch[];\n\n  /**\n   * When `true`, rewrites the original request received at the Virtual Gateway to the destination Virtual Service name.\n   * When `false`, retains the original hostname from the request.\n   *\n   * @default true\n   */\n  readonly rewriteRequestHostname?: boolean;\n}\n\n/**\n * Base options for all gateway route specs.\n */\nexport interface CommonGatewayRouteSpecOptions {\n  /**\n   * The priority for the gateway route. When a Virtual Gateway has multiple gateway routes, gateway route match\n   * is performed in the order of specified value, where 0 is the highest priority,\n   * and first matched gateway route is selected.\n   *\n   * @default - no particular priority\n   */\n  readonly priority?: number;\n}\n\n/**\n * Properties specific for HTTP Based GatewayRoutes\n */\nexport interface HttpGatewayRouteSpecOptions extends CommonGatewayRouteSpecOptions {\n  /**\n   * The criterion for determining a request match for this GatewayRoute.\n   * When path match is defined, this may optionally determine the path rewrite configuration.\n   *\n   * @default - matches any path and automatically rewrites the path to '/'\n   */\n  readonly match?: HttpGatewayRouteMatch;\n\n  /**\n   * The VirtualService this GatewayRoute directs traffic to\n   */\n  readonly routeTarget: IVirtualService;\n}\n\n/**\n * Properties specific for a gRPC GatewayRoute\n */\nexport interface GrpcGatewayRouteSpecOptions extends CommonGatewayRouteSpecOptions {\n  /**\n   * The criterion for determining a request match for this GatewayRoute\n   */\n  readonly match: GrpcGatewayRouteMatch;\n\n  /**\n   * The VirtualService this GatewayRoute directs traffic to\n   */\n  readonly routeTarget: IVirtualService;\n}\n\n/**\n * All Properties for GatewayRoute Specs\n */\nexport interface GatewayRouteSpecConfig {\n  /**\n   * The spec for an http gateway route\n   *\n   * @default - no http spec\n   */\n  readonly httpSpecConfig?: CfnGatewayRoute.HttpGatewayRouteProperty;\n\n  /**\n   * The spec for an http2 gateway route\n   *\n   * @default - no http2 spec\n   */\n  readonly http2SpecConfig?: CfnGatewayRoute.HttpGatewayRouteProperty;\n\n  /**\n   * The spec for a grpc gateway route\n   *\n   * @default - no grpc spec\n   */\n  readonly grpcSpecConfig?: CfnGatewayRoute.GrpcGatewayRouteProperty;\n\n  /**\n   * The priority for the gateway route. When a Virtual Gateway has multiple gateway routes, gateway route match\n   * is performed in the order of specified value, where 0 is the highest priority,\n   * and first matched gateway route is selected.\n   *\n   * @default - no particular priority\n   */\n  readonly priority?: number;\n}\n\n/**\n * Used to generate specs with different protocols for a GatewayRoute\n */\nexport abstract class GatewayRouteSpec {\n  /**\n   * Creates an HTTP Based GatewayRoute\n   *\n   * @param options - no http gateway route\n   */\n  public static http(options: HttpGatewayRouteSpecOptions): GatewayRouteSpec {\n    return new HttpGatewayRouteSpec(options, Protocol.HTTP);\n  }\n\n  /**\n   * Creates an HTTP2 Based GatewayRoute\n   *\n   * @param options - no http2 gateway route\n   */\n  public static http2(options: HttpGatewayRouteSpecOptions): GatewayRouteSpec {\n    return new HttpGatewayRouteSpec(options, Protocol.HTTP2);\n  }\n\n  /**\n   * Creates an gRPC Based GatewayRoute\n   *\n   * @param options - no grpc gateway route\n   */\n  public static grpc(options: GrpcGatewayRouteSpecOptions): GatewayRouteSpec {\n    return new GrpcGatewayRouteSpec(options);\n  }\n\n  /**\n   * Called when the GatewayRouteSpec type is initialized. Can be used to enforce\n   * mutual exclusivity with future properties\n   */\n  public abstract bind(scope: Construct): GatewayRouteSpecConfig;\n}\n\nclass HttpGatewayRouteSpec extends GatewayRouteSpec {\n  readonly match?: HttpGatewayRouteMatch;\n\n  /**\n   * The VirtualService this GatewayRoute directs traffic to\n   */\n  readonly routeTarget: IVirtualService;\n\n  /**\n   * Type of route you are creating\n   */\n  readonly routeType: Protocol;\n  readonly priority?: number;\n\n  constructor(options: HttpGatewayRouteSpecOptions, protocol: Protocol.HTTP | Protocol.HTTP2) {\n    super();\n    this.routeTarget = options.routeTarget;\n    this.routeType = protocol;\n    this.match = options.match;\n    this.priority = options.priority;\n  }\n\n  public bind(scope: Construct): GatewayRouteSpecConfig {\n    const pathMatchConfig = (this.match?.path ?? HttpGatewayRoutePathMatch.startsWith('/')).bind(scope);\n    const rewriteRequestHostname = this.match?.rewriteRequestHostname;\n\n    const prefixPathRewrite = pathMatchConfig.prefixPathRewrite;\n    const wholePathRewrite = pathMatchConfig.wholePathRewrite;\n\n    const httpConfig: CfnGatewayRoute.HttpGatewayRouteProperty = {\n      match: {\n        prefix: pathMatchConfig.prefixPathMatch,\n        path: pathMatchConfig.wholePathMatch,\n        hostname: this.match?.hostname?.bind(scope).hostnameMatch,\n        method: this.match?.method,\n        headers: this.match?.headers?.map(header => header.bind(scope).headerMatch),\n        queryParameters: this.match?.queryParameters?.map(queryParameter => queryParameter.bind(scope).queryParameterMatch),\n      },\n      action: {\n        target: {\n          virtualService: {\n            virtualServiceName: this.routeTarget.virtualServiceName,\n          },\n        },\n        rewrite: rewriteRequestHostname !== undefined || prefixPathRewrite || wholePathRewrite\n          ? {\n            hostname: rewriteRequestHostname === undefined\n              ? undefined\n              : {\n                defaultTargetHostname: rewriteRequestHostname? 'ENABLED' : 'DISABLED',\n              },\n            prefix: prefixPathRewrite,\n            path: wholePathRewrite,\n          }\n          : undefined,\n      },\n    };\n    return {\n      priority: this.priority,\n      httpSpecConfig: this.routeType === Protocol.HTTP ? httpConfig : undefined,\n      http2SpecConfig: this.routeType === Protocol.HTTP2 ? httpConfig : undefined,\n    };\n  }\n}\n\nclass GrpcGatewayRouteSpec extends GatewayRouteSpec {\n  readonly match: GrpcGatewayRouteMatch;\n\n  /**\n   * The VirtualService this GatewayRoute directs traffic to\n   */\n  readonly routeTarget: IVirtualService;\n  readonly priority?: number;\n\n  constructor(options: GrpcGatewayRouteSpecOptions) {\n    super();\n    this.match = options.match;\n    this.routeTarget = options.routeTarget;\n    this.priority = options.priority;\n  }\n\n  public bind(scope: Construct): GatewayRouteSpecConfig {\n    const metadataMatch = this.match.metadata;\n\n    validateGrpcGatewayRouteMatch(this.match);\n    validateGrpcMatchArrayLength(metadataMatch);\n\n    return {\n      grpcSpecConfig: {\n        match: {\n          serviceName: this.match.serviceName,\n          hostname: this.match.hostname?.bind(scope).hostnameMatch,\n          metadata: metadataMatch?.map(metadata => metadata.bind(scope).headerMatch),\n        },\n        action: {\n          target: {\n            virtualService: {\n              virtualServiceName: this.routeTarget.virtualServiceName,\n            },\n          },\n          rewrite: this.match.rewriteRequestHostname === undefined\n            ? undefined\n            : {\n              hostname: {\n                defaultTargetHostname: this.match.rewriteRequestHostname ? 'ENABLED' : 'DISABLED',\n              },\n            },\n        },\n      },\n      priority: this.priority,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
