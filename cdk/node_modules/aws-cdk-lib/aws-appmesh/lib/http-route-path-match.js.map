{
  "version": 3,
  "sources": ["http-route-path-match.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnGatewayRoute, CfnRoute } from './appmesh.generated';\n\n/**\n * The type returned from the `bind()` method in {@link HttpRoutePathMatch}.\n */\nexport interface HttpRoutePathMatchConfig {\n  /**\n   * Route configuration for matching on the complete URL path of the request.\n   *\n   * @default - no matching will be performed on the complete URL path\n   */\n  readonly wholePathMatch?: CfnRoute.HttpPathMatchProperty;\n\n  /**\n   * Route configuration for matching on the prefix of the URL path of the request.\n   *\n   * @default - no matching will be performed on the prefix of the URL path\n   */\n  readonly prefixPathMatch?: string;\n}\n\n/**\n * Defines HTTP route matching based on the URL path of the request.\n */\nexport abstract class HttpRoutePathMatch {\n  /**\n   * The value of the path must match the specified value exactly.\n   * The provided `path` must start with the '/' character.\n   *\n   * @param path the exact path to match on\n   */\n  public static exactly(path: string): HttpRoutePathMatch {\n    return new HttpRouteWholePathMatch({ exact: path });\n  }\n\n  /**\n   * The value of the path must match the specified regex.\n   *\n   * @param regex the regex used to match the path\n   */\n  public static regex(regex: string): HttpRoutePathMatch {\n    return new HttpRouteWholePathMatch({ regex: regex });\n  }\n\n  /**\n   * The value of the path must match the specified prefix.\n   *\n   * @param prefix the value to use to match the beginning of the path part of the URL of the request.\n   *   It must start with the '/' character. If provided as \"/\", matches all requests.\n   *   For example, if your virtual service name is \"my-service.local\"\n   *   and you want the route to match requests to \"my-service.local/metrics\", your prefix should be \"/metrics\".\n   */\n  public static startsWith(prefix: string): HttpRoutePathMatch {\n    return new HttpRoutePrefixPathMatch(prefix);\n  }\n\n  /**\n   * Returns the route path match configuration.\n   */\n  public abstract bind(scope: Construct): HttpRoutePathMatchConfig;\n}\n\nclass HttpRoutePrefixPathMatch extends HttpRoutePathMatch {\n  constructor(private readonly prefix: string) {\n    super();\n\n    if (prefix && prefix[0] !== '/') {\n      throw new Error(`Prefix Path for the match must start with \\'/\\', got: ${prefix}`);\n    }\n  }\n\n  bind(_scope: Construct): HttpRoutePathMatchConfig {\n    return {\n      prefixPathMatch: this.prefix,\n    };\n  }\n}\n\nclass HttpRouteWholePathMatch extends HttpRoutePathMatch {\n  constructor(private readonly match: CfnRoute.HttpPathMatchProperty) {\n    super();\n\n    if (match.exact && match.exact[0] !== '/') {\n      throw new Error(`Exact Path for the match must start with \\'/\\', got: ${match.exact}`);\n    }\n  }\n\n  bind(_scope: Construct): HttpRoutePathMatchConfig {\n    return {\n      wholePathMatch: this.match,\n    };\n  }\n}\n\n/**\n * The type returned from the `bind()` method in {@link HttpGatewayRoutePathMatch}.\n */\nexport interface HttpGatewayRoutePathMatchConfig {\n  /**\n   * Gateway route configuration for matching on the complete URL path of the request.\n   *\n   * @default - no matching will be performed on the complete URL path\n   */\n  readonly wholePathMatch?: CfnGatewayRoute.HttpPathMatchProperty;\n\n  /**\n   * Gateway route configuration for matching on the prefix of the URL path of the request.\n   *\n   * @default - no matching will be performed on the prefix of the URL path\n   */\n  readonly prefixPathMatch?: string;\n\n  /**\n   * Gateway route configuration for rewriting the complete URL path of the request..\n   *\n   * @default - no rewrite will be performed on the request's complete URL path\n   */\n  readonly wholePathRewrite?: CfnGatewayRoute.HttpGatewayRoutePathRewriteProperty;\n\n  /**\n   * Gateway route configuration for rewriting the prefix of the URL path of the request.\n   *\n   * @default - rewrites the request's URL path to '/'\n   */\n  readonly prefixPathRewrite?: CfnGatewayRoute.HttpGatewayRoutePrefixRewriteProperty;\n}\n\n/**\n * Defines HTTP gateway route matching based on the URL path of the request.\n */\nexport abstract class HttpGatewayRoutePathMatch {\n  /**\n   * The value of the path must match the specified prefix.\n   *\n   * @param prefix the value to use to match the beginning of the path part of the URL of the request.\n   *   It must start with the '/' character.\n   *   When `rewriteTo` is provided, it must also end with the '/' character.\n   *   If provided as \"/\", matches all requests.\n   *   For example, if your virtual service name is \"my-service.local\"\n   *   and you want the route to match requests to \"my-service.local/metrics\", your prefix should be \"/metrics\".\n   * @param rewriteTo Specify either disabling automatic rewrite or rewriting to specified prefix path.\n   *   To disable automatic rewrite, provide `''`.\n   *   As a default, request's URL path is automatically rewritten to '/'.\n   */\n  public static startsWith(prefix: string, rewriteTo?: string): HttpGatewayRoutePathMatch {\n    return new HttpGatewayRoutePrefixPathMatch(prefix, rewriteTo);\n  }\n\n  /**\n   * The value of the path must match the specified value exactly.\n   * The provided `path` must start with the '/' character.\n   *\n   * @param path the exact path to match on\n   * @param rewriteTo the value to substitute for the matched part of the path of the gateway request URL\n   *   As a default, retains original request's URL path.\n   */\n  public static exactly(path: string, rewriteTo?: string): HttpGatewayRoutePathMatch {\n    return new HttpGatewayRouteWholePathMatch({ exact: path }, rewriteTo);\n  }\n\n  /**\n   * The value of the path must match the specified regex.\n   *\n   * @param regex the regex used to match the path\n   * @param rewriteTo the value to substitute for the matched part of the path of the gateway request URL\n   *   As a default, retains original request's URL path.\n   */\n  public static regex(regex: string, rewriteTo?: string): HttpGatewayRoutePathMatch {\n    return new HttpGatewayRouteWholePathMatch({ regex }, rewriteTo);\n  }\n\n  /**\n   * Returns the gateway route path match configuration.\n   */\n  public abstract bind(scope: Construct): HttpGatewayRoutePathMatchConfig;\n}\n\nclass HttpGatewayRoutePrefixPathMatch extends HttpGatewayRoutePathMatch {\n  constructor(\n    private readonly prefixPathMatch: string,\n    private readonly rewriteTo?: string,\n  ) {\n    super();\n\n    if (prefixPathMatch[0] !== '/') {\n      throw new Error('Prefix path for the match must start with \\'/\\', '\n        + `got: ${prefixPathMatch}`);\n    }\n\n    if (rewriteTo) {\n      if (prefixPathMatch[prefixPathMatch.length - 1] !== '/') {\n        throw new Error('When prefix path for the rewrite is specified, prefix path for the match must end with \\'/\\', '\n          + `got: ${prefixPathMatch}`);\n      }\n      if (rewriteTo[0] !== '/' || rewriteTo[rewriteTo.length - 1] !== '/') {\n        throw new Error('Prefix path for the rewrite must start and end with \\'/\\', '\n          + `got: ${rewriteTo}`);\n      }\n    }\n  }\n\n  bind(_scope: Construct): HttpGatewayRoutePathMatchConfig {\n    return {\n      prefixPathMatch: this.prefixPathMatch,\n      prefixPathRewrite: this.rewriteTo === undefined\n        ? undefined\n        : {\n          defaultPrefix: this.rewriteTo === '' ? 'DISABLED' : undefined,\n          value: this.rewriteTo === '' ? undefined : this.rewriteTo,\n        },\n    };\n  }\n}\n\nclass HttpGatewayRouteWholePathMatch extends HttpGatewayRoutePathMatch {\n  constructor(\n    private readonly wholePathMatch: CfnGatewayRoute.HttpPathMatchProperty,\n    private readonly exactPathRewrite?: string | undefined,\n  ) {\n    super();\n\n    if (wholePathMatch.exact && wholePathMatch.exact[0] !== '/') {\n      throw new Error(`Exact Path for the match must start with \\'/\\', got: ${ wholePathMatch.exact }`);\n    }\n    if (exactPathRewrite === '') {\n      throw new Error('Exact Path for the rewrite cannot be empty. Unlike startsWith() method, no automatic rewrite on whole path match');\n    }\n    if (exactPathRewrite && exactPathRewrite[0] !== '/') {\n      throw new Error(`Exact Path for the rewrite must start with \\'/\\', got: ${ exactPathRewrite }`);\n    }\n  }\n\n  bind(_scope: Construct): HttpGatewayRoutePathMatchConfig {\n    return {\n      wholePathMatch: this.wholePathMatch,\n      wholePathRewrite: this.exactPathRewrite === undefined ? undefined : { exact: this.exactPathRewrite },\n    };\n  }\n}\n"],
  "mappings": "mMAyBA,MAAsB,kBAAkB,OAOxB,SAAQ,KAAY,CAChC,MAAO,IAAI,yBAAwB,CAAE,MAAO,IAAI,CAAE,QAQtC,OAAM,MAAa,CAC/B,MAAO,IAAI,yBAAwB,CAAE,KAAY,CAAE,QAWvC,YAAW,OAAc,CACrC,MAAO,IAAI,0BAAyB,MAAM,GA7B9C,QAAA,mBAAA,oIAsCA,MAAM,gCAAiC,mBAAkB,CACvD,YAA6B,OAAc,CACzC,MAAK,EAEL,GAH2B,KAAA,OAAA,OAGvB,QAAU,OAAO,KAAO,IAC1B,KAAM,IAAI,OAAM,uDAAyD,QAAQ,EAIrF,KAAK,OAAiB,CACpB,MAAO,CACL,gBAAiB,KAAK,SAK5B,MAAM,+BAAgC,mBAAkB,CACtD,YAA6B,MAAqC,CAChE,MAAK,EAEL,GAH2B,KAAA,MAAA,MAGvB,MAAM,OAAS,MAAM,MAAM,KAAO,IACpC,KAAM,IAAI,OAAM,sDAAwD,MAAM,OAAO,EAIzF,KAAK,OAAiB,CACpB,MAAO,CACL,eAAgB,KAAK,QAyC3B,MAAsB,yBAAyB,OAc/B,YAAW,OAAgB,UAAkB,CACzD,MAAO,IAAI,iCAAgC,OAAQ,SAAS,QAWhD,SAAQ,KAAc,UAAkB,CACpD,MAAO,IAAI,gCAA+B,CAAE,MAAO,IAAI,EAAI,SAAS,QAUxD,OAAM,MAAe,UAAkB,CACnD,MAAO,IAAI,gCAA+B,CAAE,KAAK,EAAI,SAAS,GAtClE,QAAA,0BAAA,yJA+CA,MAAM,uCAAwC,0BAAyB,CACrE,YACmB,gBACA,UAAkB,CAEnC,MAAK,EAEL,GALiB,KAAA,gBAAA,gBACA,KAAA,UAAA,UAIb,gBAAgB,KAAO,IACzB,KAAM,IAAI,OAAM,uDACJ,iBAAiB,EAG/B,GAAI,UAAW,CACb,GAAI,gBAAgB,gBAAgB,OAAS,KAAO,IAClD,KAAM,IAAI,OAAM,oGACJ,iBAAiB,EAE/B,GAAI,UAAU,KAAO,KAAO,UAAU,UAAU,OAAS,KAAO,IAC9D,KAAM,IAAI,OAAM,iEACJ,WAAW,GAK7B,KAAK,OAAiB,CACpB,MAAO,CACL,gBAAiB,KAAK,gBACtB,kBAAmB,KAAK,YAAc,OAClC,OACA,CACA,cAAe,KAAK,YAAc,GAAK,WAAa,OACpD,MAAO,KAAK,YAAc,GAAK,OAAY,KAAK,aAM1D,MAAM,sCAAuC,0BAAyB,CACpE,YACmB,eACA,iBAAqC,CAEtD,MAAK,EAEL,GALiB,KAAA,eAAA,eACA,KAAA,iBAAA,iBAIb,eAAe,OAAS,eAAe,MAAM,KAAO,IACtD,KAAM,IAAI,OAAM,sDAAyD,eAAe,OAAQ,EAElG,GAAI,mBAAqB,GACvB,KAAM,IAAI,OAAM,kHAAkH,EAEpI,GAAI,kBAAoB,iBAAiB,KAAO,IAC9C,KAAM,IAAI,OAAM,wDAA2D,kBAAmB,EAIlG,KAAK,OAAiB,CACpB,MAAO,CACL,eAAgB,KAAK,eACrB,iBAAkB,KAAK,mBAAqB,OAAY,OAAY,CAAE,MAAO,KAAK,gBAAgB",
  "names": []
}
