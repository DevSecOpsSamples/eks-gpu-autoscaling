{
  "version": 3,
  "sources": ["tls-validation.ts"],
  "sourcesContent": ["import * as acmpca from '../../aws-acmpca';\nimport { Construct } from 'constructs';\nimport { CfnVirtualNode } from './appmesh.generated';\n\n/**\n * Represents the properties needed to define TLS Validation context\n */\ninterface TlsValidationCommon {\n  /**\n   * Represents the subject alternative names (SANs) secured by the certificate.\n   * SANs must be in the FQDN or URI format.\n   *\n   * @default - If you don't specify SANs on the terminating mesh endpoint,\n   * the Envoy proxy for that node doesn't verify the SAN on a peer client certificate.\n   * If you don't specify SANs on the originating mesh endpoint,\n   * the SAN on the certificate provided by the terminating endpoint must match the mesh endpoint service discovery configuration.\n   */\n  readonly subjectAlternativeNames?: SubjectAlternativeNames;\n}\n\n/**\n * Represents the properties needed to define TLS Validation context\n */\nexport interface TlsValidation extends TlsValidationCommon {\n  /**\n   * Reference to where to retrieve the trust chain.\n   */\n  readonly trust: TlsValidationTrust;\n}\n\n/**\n * Represents the properties needed to define TLS Validation context that is supported for mutual TLS authentication.\n */\nexport interface MutualTlsValidation extends TlsValidationCommon {\n  /**\n   * Reference to where to retrieve the trust chain.\n   */\n  readonly trust: MutualTlsValidationTrust;\n}\n\n/**\n * All Properties for TLS Validation Trusts for both Client Policy and Listener.\n */\nexport interface TlsValidationTrustConfig {\n  /**\n   * VirtualNode CFN configuration for client policy's TLS Validation Trust\n   */\n  readonly tlsValidationTrust: CfnVirtualNode.TlsValidationContextTrustProperty;\n}\n\n/**\n * Defines the TLS Validation Context Trust.\n */\nexport abstract class TlsValidationTrust {\n  /**\n   * Tells envoy where to fetch the validation context from\n   */\n  public static file(certificateChain: string): MutualTlsValidationTrust {\n    return new TlsValidationFileTrust(certificateChain);\n  }\n\n  /**\n   * TLS Validation Context Trust for ACM Private Certificate Authority (CA).\n   */\n  public static acm(certificateAuthorities: acmpca.ICertificateAuthority[]): TlsValidationTrust {\n    return new TlsValidationAcmTrust(certificateAuthorities);\n  }\n\n  /**\n   * TLS Validation Context Trust for Envoy' service discovery service.\n   */\n  public static sds(secretName: string): MutualTlsValidationTrust {\n    return new TlsValidationSdsTrust(secretName);\n  }\n\n  /**\n   * Returns Trust context based on trust type.\n   */\n  public abstract bind(scope: Construct): TlsValidationTrustConfig;\n}\n\n/**\n * Represents a TLS Validation Context Trust that is supported for mutual TLS authentication.\n */\nexport abstract class MutualTlsValidationTrust extends TlsValidationTrust {\n  // TypeScript uses structural typing, so we need a property different from TlsValidationTrust\n  protected readonly differentiator = false;\n}\n\nclass TlsValidationAcmTrust extends TlsValidationTrust {\n  /**\n   * Contains information for your private certificate authority\n   */\n  readonly certificateAuthorities: acmpca.ICertificateAuthority[];\n\n  constructor (certificateAuthorities: acmpca.ICertificateAuthority[]) {\n    super();\n    this.certificateAuthorities = certificateAuthorities;\n  }\n\n  public bind(_scope: Construct): TlsValidationTrustConfig {\n    if (this.certificateAuthorities.length === 0) {\n      throw new Error('you must provide at least one Certificate Authority when creating an ACM Trust ClientPolicy');\n    } else {\n      return {\n        tlsValidationTrust: {\n          acm: {\n            certificateAuthorityArns: this.certificateAuthorities.map(certificateArn =>\n              certificateArn.certificateAuthorityArn),\n          },\n        },\n      };\n    }\n  }\n}\n\nclass TlsValidationFileTrust extends MutualTlsValidationTrust {\n  /**\n   * Path to the Certificate Chain file on the file system where the Envoy is deployed.\n   */\n  readonly certificateChain: string;\n\n  constructor (certificateChain: string) {\n    super();\n    this.certificateChain = certificateChain;\n  }\n\n  public bind(_scope: Construct): TlsValidationTrustConfig {\n    return {\n      tlsValidationTrust: {\n        file: {\n          certificateChain: this.certificateChain,\n        },\n      },\n    };\n  }\n}\n\nclass TlsValidationSdsTrust extends MutualTlsValidationTrust {\n  /**\n   * The name of the secret for Envoy to fetch from a specific endpoint through the Secrets Discovery Protocol.\n   */\n  readonly secretName: string;\n\n  constructor (secretName: string) {\n    super();\n    this.secretName = secretName;\n  }\n\n  public bind(_scope: Construct): TlsValidationTrustConfig {\n    return {\n      tlsValidationTrust: {\n        sds: {\n          secretName: this.secretName,\n        },\n      },\n    };\n  }\n}\n\n/**\n * All Properties for Subject Alternative Names Matcher for both Client Policy and Listener.\n */\nexport interface SubjectAlternativeNamesMatcherConfig {\n  /**\n   * VirtualNode CFN configuration for subject alternative names secured by the certificate.\n   */\n  readonly subjectAlternativeNamesMatch: CfnVirtualNode.SubjectAlternativeNameMatchersProperty;\n}\n\n/**\n * Used to generate Subject Alternative Names Matchers\n */\nexport abstract class SubjectAlternativeNames {\n  /**\n   * The values of the SAN must match the specified values exactly.\n   *\n   * @param names The exact values to test against.\n   */\n  public static matchingExactly(...names: string[]): SubjectAlternativeNames {\n    return new SubjectAlternativeNamesImpl({ exact: names });\n  }\n\n  /**\n   * Returns Subject Alternative Names Matcher based on method type.\n   */\n  public abstract bind(scope: Construct): SubjectAlternativeNamesMatcherConfig;\n}\n\nclass SubjectAlternativeNamesImpl extends SubjectAlternativeNames {\n  constructor(\n    private readonly matchProperty: CfnVirtualNode.SubjectAlternativeNameMatchersProperty,\n  ) { super(); }\n\n  public bind(_scope: Construct): SubjectAlternativeNamesMatcherConfig {\n    return {\n      subjectAlternativeNamesMatch: this.matchProperty,\n    };\n  }\n}\n"],
  "mappings": "qOAqDA,MAAsB,kBAAkB,OAIxB,MAAK,iBAAwB,CACzC,MAAO,IAAI,wBAAuB,gBAAgB,QAMtC,KAAI,uBAAsD,CACtE,MAAO,IAAI,uBAAsB,sBAAsB,QAM3C,KAAI,WAAkB,CAClC,MAAO,IAAI,uBAAsB,UAAU,GAnB/C,QAAA,mBAAA,oIA+BA,MAAsB,gCAAiC,mBAAkB,CAAzE,aAAA,qBAEqB,KAAA,eAAiB,IAFtC,QAAA,yBAAA,sJAKA,MAAM,6BAA8B,mBAAkB,CAMpD,YAAa,uBAAsD,CACjE,MAAK,EACL,KAAK,uBAAyB,uBAGzB,KAAK,OAAiB,CAC3B,GAAI,KAAK,uBAAuB,SAAW,EACzC,KAAM,IAAI,OAAM,6FAA6F,EAE7G,MAAO,CACL,mBAAoB,CAClB,IAAK,CACH,yBAA0B,KAAK,uBAAuB,IAAI,gBACxD,eAAe,uBAAuB,MAQpD,MAAM,8BAA+B,yBAAwB,CAM3D,YAAa,iBAAwB,CACnC,MAAK,EACL,KAAK,iBAAmB,iBAGnB,KAAK,OAAiB,CAC3B,MAAO,CACL,mBAAoB,CAClB,KAAM,CACJ,iBAAkB,KAAK,qBAOjC,MAAM,6BAA8B,yBAAwB,CAM1D,YAAa,WAAkB,CAC7B,MAAK,EACL,KAAK,WAAa,WAGb,KAAK,OAAiB,CAC3B,MAAO,CACL,mBAAoB,CAClB,IAAK,CACH,WAAY,KAAK,eAoB3B,MAAsB,uBAAuB,OAM7B,oBAAmB,MAAe,CAC9C,MAAO,IAAI,6BAA4B,CAAE,MAAO,KAAK,CAAE,GAP3D,QAAA,wBAAA,mJAgBA,MAAM,mCAAoC,wBAAuB,CAC/D,YACmB,cAAoE,CACnF,MAAK,EADU,KAAA,cAAA,cAGZ,KAAK,OAAiB,CAC3B,MAAO,CACL,6BAA8B,KAAK",
  "names": []
}
