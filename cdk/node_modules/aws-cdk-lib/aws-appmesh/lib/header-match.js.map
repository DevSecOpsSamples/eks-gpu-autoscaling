{
  "version": 3,
  "sources": ["header-match.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnRoute } from './index';\n\n/**\n * Configuration for `HeaderMatch`\n */\nexport interface HeaderMatchConfig {\n  /**\n   * Route CFN configuration for the route header match.\n   */\n  readonly headerMatch: CfnRoute.HttpRouteHeaderProperty;\n}\n\n/**\n * Used to generate header matching methods.\n */\nexport abstract class HeaderMatch {\n  /**\n   * The value of the header with the given name in the request must match the\n   * specified value exactly.\n   *\n   * @param headerName the name of the header to match against\n   * @param headerValue The exact value to test against\n   */\n  public static valueIs(headerName: string, headerValue: string): HeaderMatch {\n    return new HeaderMatchImpl(headerName, false, { exact: headerValue });\n  }\n\n  /**\n   * The value of the header with the given name in the request must not match\n   * the specified value exactly.\n   *\n   * @param headerName the name of the header to match against\n   * @param headerValue The exact value to test against\n   */\n  public static valueIsNot(headerName: string, headerValue: string): HeaderMatch {\n    return new HeaderMatchImpl(headerName, true, { exact: headerValue });\n  }\n\n  /**\n   * The value of the header with the given name in the request must start with\n   * the specified characters.\n   *\n   * @param headerName the name of the header to match against\n   * @param prefix The prefix to test against\n   */\n  public static valueStartsWith(headerName: string, prefix: string): HeaderMatch {\n    return new HeaderMatchImpl(headerName, false, { prefix });\n  }\n\n  /**\n   * The value of the header with the given name in the request must not start\n   * with the specified characters.\n   *\n   * @param headerName the name of the header to match against\n   * @param prefix The prefix to test against\n   */\n  public static valueDoesNotStartWith(headerName: string, prefix: string): HeaderMatch {\n    return new HeaderMatchImpl(headerName, true, { prefix });\n  }\n\n  /**\n   * The value of the header with the given name in the request must end with\n   * the specified characters.\n   *\n   * @param headerName the name of the header to match against\n   * @param suffix The suffix to test against\n   */\n  public static valueEndsWith(headerName: string, suffix: string): HeaderMatch {\n    return new HeaderMatchImpl(headerName, false, { suffix });\n  }\n\n  /**\n   * The value of the header with the given name in the request must not end\n   * with the specified characters.\n   *\n   * @param headerName the name of the header to match against\n   * @param suffix The suffix to test against\n   */\n  public static valueDoesNotEndWith(headerName: string, suffix: string): HeaderMatch {\n    return new HeaderMatchImpl(headerName, true, { suffix });\n  }\n\n  /**\n   * The value of the header with the given name in the request must include\n   * the specified characters.\n   *\n   * @param headerName the name of the header to match against\n   * @param regex The regex to test against\n   */\n  public static valueMatchesRegex(headerName: string, regex: string): HeaderMatch {\n    return new HeaderMatchImpl(headerName, false, { regex });\n  }\n\n  /**\n   * The value of the header with the given name in the request must not\n   * include the specified characters.\n   *\n   * @param headerName the name of the header to match against\n   * @param regex The regex to test against\n   */\n  public static valueDoesNotMatchRegex(headerName: string, regex: string): HeaderMatch {\n    return new HeaderMatchImpl(headerName, true, { regex });\n  }\n\n  /**\n   * The value of the header with the given name in the request must be in a\n   * range of values.\n   *\n   * @param headerName the name of the header to match against\n   * @param start Match on values starting at and including this value\n   * @param end Match on values up to but not including this value\n   */\n  public static valuesIsInRange(headerName: string, start: number, end: number): HeaderMatch {\n    return new HeaderMatchImpl(headerName, false, {\n      range: {\n        start,\n        end,\n      },\n    });\n  }\n\n  /**\n   * The value of the header with the given name in the request must not be in\n   * a range of values.\n   *\n   * @param headerName the name of the header to match against\n   * @param start Match on values starting at and including this value\n   * @param end Match on values up to but not including this value\n   */\n  public static valuesIsNotInRange(headerName: string, start: number, end: number): HeaderMatch {\n    return new HeaderMatchImpl(headerName, true, {\n      range: {\n        start,\n        end,\n      },\n    });\n  }\n\n  /**\n   * Returns the header match configuration.\n   */\n  public abstract bind(scope: Construct): HeaderMatchConfig;\n}\n\nclass HeaderMatchImpl extends HeaderMatch {\n  constructor(\n    private readonly headerName: string,\n    private readonly invert: boolean,\n    private readonly matchProperty: CfnRoute.HeaderMatchMethodProperty,\n  ) {\n    super();\n  }\n\n  bind(_scope: Construct): HeaderMatchConfig {\n    return {\n      headerMatch: {\n        name: this.headerName,\n        invert: this.invert,\n        match: this.matchProperty,\n      },\n    };\n  }\n}\n"],
  "mappings": "uJAgBA,MAAsB,WAAW,OAQjB,SAAQ,WAAoB,YAAmB,CAC3D,MAAO,IAAI,iBAAgB,WAAY,GAAO,CAAE,MAAO,WAAW,CAAE,QAUxD,YAAW,WAAoB,YAAmB,CAC9D,MAAO,IAAI,iBAAgB,WAAY,GAAM,CAAE,MAAO,WAAW,CAAE,QAUvD,iBAAgB,WAAoB,OAAc,CAC9D,MAAO,IAAI,iBAAgB,WAAY,GAAO,CAAE,MAAM,CAAE,QAU5C,uBAAsB,WAAoB,OAAc,CACpE,MAAO,IAAI,iBAAgB,WAAY,GAAM,CAAE,MAAM,CAAE,QAU3C,eAAc,WAAoB,OAAc,CAC5D,MAAO,IAAI,iBAAgB,WAAY,GAAO,CAAE,MAAM,CAAE,QAU5C,qBAAoB,WAAoB,OAAc,CAClE,MAAO,IAAI,iBAAgB,WAAY,GAAM,CAAE,MAAM,CAAE,QAU3C,mBAAkB,WAAoB,MAAa,CAC/D,MAAO,IAAI,iBAAgB,WAAY,GAAO,CAAE,KAAK,CAAE,QAU3C,wBAAuB,WAAoB,MAAa,CACpE,MAAO,IAAI,iBAAgB,WAAY,GAAM,CAAE,KAAK,CAAE,QAW1C,iBAAgB,WAAoB,MAAe,IAAW,CAC1E,MAAO,IAAI,iBAAgB,WAAY,GAAO,CAC5C,MAAO,CACL,MACA,KAEH,QAWW,oBAAmB,WAAoB,MAAe,IAAW,CAC7E,MAAO,IAAI,iBAAgB,WAAY,GAAM,CAC3C,MAAO,CACL,MACA,KAEH,GAxHL,QAAA,YAAA,+GAiIA,MAAM,uBAAwB,YAAW,CACvC,YACmB,WACA,OACA,cAAiD,CAElE,MAAK,EAJY,KAAA,WAAA,WACA,KAAA,OAAA,OACA,KAAA,cAAA,cAKnB,KAAK,OAAiB,CACpB,MAAO,CACL,YAAa,CACX,KAAM,KAAK,WACX,OAAQ,KAAK,OACb,MAAO,KAAK",
  "names": []
}
