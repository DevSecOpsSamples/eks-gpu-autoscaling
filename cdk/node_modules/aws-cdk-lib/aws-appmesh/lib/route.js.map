{
  "version": 3,
  "sources": ["route.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnRoute } from './appmesh.generated';\nimport { IMesh } from './mesh';\nimport { renderMeshOwner } from './private/utils';\nimport { RouteSpec } from './route-spec';\nimport { IVirtualRouter, VirtualRouter } from './virtual-router';\n\n/**\n * Interface for which all Route based classes MUST implement\n */\nexport interface IRoute extends cdk.IResource {\n  /**\n   * The name of the route\n   *\n   * @attribute\n   */\n  readonly routeName: string;\n\n  /**\n   * The Amazon Resource Name (ARN) for the route\n   *\n   * @attribute\n   */\n  readonly routeArn: string;\n\n  /**\n   * The VirtualRouter the Route belongs to\n   */\n  readonly virtualRouter: IVirtualRouter;\n}\n\n/**\n * Base interface properties for all Routes\n */\nexport interface RouteBaseProps {\n  /**\n   * The name of the route\n   *\n   * @default - An automatically generated name\n   */\n  readonly routeName?: string;\n\n  /**\n   * Protocol specific spec\n   */\n  readonly routeSpec: RouteSpec;\n}\n\n/**\n * Properties to define new Routes\n */\nexport interface RouteProps extends RouteBaseProps {\n  /**\n   * The service mesh to define the route in\n   */\n  readonly mesh: IMesh;\n\n  /**\n   * The VirtualRouter the Route belongs to\n   */\n  readonly virtualRouter: IVirtualRouter;\n}\n\n/**\n * Route represents a new or existing route attached to a VirtualRouter and Mesh\n *\n * @see https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\n */\nexport class Route extends cdk.Resource implements IRoute {\n  /**\n   * Import an existing Route given an ARN\n   */\n  public static fromRouteArn(scope: Construct, id: string, routeArn: string): IRoute {\n    return new class extends cdk.Resource implements IRoute {\n      readonly routeArn = routeArn;\n      readonly virtualRouter = VirtualRouter.fromVirtualRouterArn(this, 'VirtualRouter', routeArn);\n      readonly routeName = cdk.Fn.select(4, cdk.Fn.split('/', cdk.Stack.of(scope).splitArn(routeArn, cdk.ArnFormat.SLASH_RESOURCE_NAME).resourceName!));\n    }(scope, id);\n  }\n\n  /**\n   * Import an existing Route given attributes\n   */\n  public static fromRouteAttributes(scope: Construct, id: string, attrs: RouteAttributes): IRoute {\n    return new class extends cdk.Resource implements IRoute {\n      readonly routeName = attrs.routeName;\n      readonly virtualRouter = attrs.virtualRouter;\n      readonly routeArn = cdk.Stack.of(this).formatArn({\n        service: 'appmesh',\n        resource: `mesh/${attrs.virtualRouter.mesh.meshName}/virtualRouter/${attrs.virtualRouter.virtualRouterName}/route`,\n        resourceName: this.routeName,\n      });\n    }(scope, id);\n  }\n\n  /**\n   * The name of the Route\n   */\n  public readonly routeName: string;\n\n  /**\n   * The Amazon Resource Name (ARN) for the route\n   */\n  public readonly routeArn: string;\n\n  /**\n   * The VirtualRouter the Route belongs to\n   */\n  public readonly virtualRouter: IVirtualRouter;\n\n  constructor(scope: Construct, id: string, props: RouteProps) {\n    super(scope, id, {\n      physicalName: props.routeName || cdk.Lazy.string({ produce: () => cdk.Names.uniqueId(this) }),\n    });\n\n    this.virtualRouter = props.virtualRouter;\n\n    const spec = props.routeSpec.bind(this);\n\n    const route = new CfnRoute(this, 'Resource', {\n      routeName: this.physicalName,\n      meshName: this.virtualRouter.mesh.meshName,\n      meshOwner: renderMeshOwner(this.env.account, this.virtualRouter.mesh.env.account),\n      virtualRouterName: this.virtualRouter.virtualRouterName,\n      spec: {\n        tcpRoute: spec.tcpRouteSpec,\n        httpRoute: spec.httpRouteSpec,\n        http2Route: spec.http2RouteSpec,\n        grpcRoute: spec.grpcRouteSpec,\n        priority: spec.priority,\n      },\n    });\n\n    this.routeName = this.getResourceNameAttribute(route.attrRouteName);\n    this.routeArn = this.getResourceArnAttribute(route.ref, {\n      service: 'appmesh',\n      resource: `mesh/${props.mesh.meshName}/virtualRouter/${props.virtualRouter.virtualRouterName}/route`,\n      resourceName: this.physicalName,\n    });\n  }\n}\n\n/**\n * Interface with properties ncecessary to import a reusable Route\n */\nexport interface RouteAttributes {\n  /**\n   * The name of the Route\n   */\n  readonly routeName: string;\n\n  /**\n   * The VirtualRouter the Route belongs to\n   */\n  readonly virtualRouter: IVirtualRouter;\n}\n"],
  "mappings": "4MAAA,IAAA,QAAA,YAAA,EAEA,oBAAA,QAAA,qBAAA,EAEA,QAAA,QAAA,iBAAA,EAEA,iBAAA,QAAA,kBAAA,EA+DA,MAAa,aAAc,KAAI,QAAQ,CA0CrC,YAAY,MAAkB,GAAY,MAAiB,CACzD,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,WAAa,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,IAAI,MAAM,SAAS,IAAI,CAAC,CAAE,EAC7F,oEAED,KAAK,cAAgB,MAAM,cAE3B,KAAM,MAAO,MAAM,UAAU,KAAK,IAAI,EAEhC,MAAQ,GAAI,qBAAA,SAAS,KAAM,WAAY,CAC3C,UAAW,KAAK,aAChB,SAAU,KAAK,cAAc,KAAK,SAClC,UAAW,QAAA,gBAAgB,KAAK,IAAI,QAAS,KAAK,cAAc,KAAK,IAAI,OAAO,EAChF,kBAAmB,KAAK,cAAc,kBACtC,KAAM,CACJ,SAAU,KAAK,aACf,UAAW,KAAK,cAChB,WAAY,KAAK,eACjB,UAAW,KAAK,cAChB,SAAU,KAAK,UAElB,EAED,KAAK,UAAY,KAAK,yBAAyB,MAAM,aAAa,EAClE,KAAK,SAAW,KAAK,wBAAwB,MAAM,IAAK,CACtD,QAAS,UACT,SAAU,QAAQ,MAAM,KAAK,0BAA0B,MAAM,cAAc,0BAC3E,aAAc,KAAK,aACpB,QAlEW,cAAa,MAAkB,GAAY,SAAgB,CACvE,MAAO,IAAI,cAAc,KAAI,QAAQ,CAA1B,aAAA,qBACA,KAAA,SAAW,SACX,KAAA,cAAgB,iBAAA,cAAc,qBAAqB,KAAM,gBAAiB,QAAQ,EAClF,KAAA,UAAY,IAAI,GAAG,OAAO,EAAG,IAAI,GAAG,MAAM,IAAK,IAAI,MAAM,GAAG,KAAK,EAAE,SAAS,SAAU,IAAI,UAAU,mBAAmB,EAAE,YAAa,CAAC,CAClJ,GAAE,MAAO,EAAE,QAMC,qBAAoB,MAAkB,GAAY,MAAsB,+EAC7E,GAAI,cAAc,KAAI,QAAQ,CAA1B,aAAA,qBACA,KAAA,UAAY,MAAM,UAClB,KAAA,cAAgB,MAAM,cACtB,KAAA,SAAW,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAC/C,QAAS,UACT,SAAU,QAAQ,MAAM,cAAc,KAAK,0BAA0B,MAAM,cAAc,0BACzF,aAAc,KAAK,UACpB,CACH,GAAE,MAAO,EAAE,GAxBf,QAAA,MAAA",
  "names": []
}
