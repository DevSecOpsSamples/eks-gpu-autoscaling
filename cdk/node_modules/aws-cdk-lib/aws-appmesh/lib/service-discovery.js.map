{
  "version": 3,
  "sources": ["service-discovery.ts"],
  "sourcesContent": ["import * as cloudmap from '../../aws-servicediscovery';\nimport { Construct } from 'constructs';\nimport { CfnVirtualNode } from './appmesh.generated';\n\n/**\n * Properties for VirtualNode Service Discovery\n */\nexport interface ServiceDiscoveryConfig {\n  /**\n   * DNS based Service Discovery\n   *\n   * @default - no DNS based service discovery\n   */\n  readonly dns?: CfnVirtualNode.DnsServiceDiscoveryProperty;\n\n  /**\n   * Cloud Map based Service Discovery\n   *\n   * @default - no Cloud Map based service discovery\n   */\n  readonly cloudmap?: CfnVirtualNode.AwsCloudMapServiceDiscoveryProperty;\n}\n\n/**\n * Enum of DNS service discovery response type\n */\nexport enum DnsResponseType {\n  /**\n   * DNS resolver returns a loadbalanced set of endpoints and the traffic would be sent to the given endpoints.\n   * It would not drain existing connections to other endpoints that are not part of this list.\n   */\n  LOAD_BALANCER = 'LOADBALANCER',\n\n  /**\n   * DNS resolver is returning all the endpoints.\n   * This also means that if an endpoint is missing, it would drain the current connections to the missing endpoint.\n   */\n  ENDPOINTS = 'ENDPOINTS',\n}\n\n/**\n * Provides the Service Discovery method a VirtualNode uses\n */\nexport abstract class ServiceDiscovery {\n  /**\n   * Returns DNS based service discovery\n   *\n   * @param hostname\n   * @param responseType Specifies the DNS response type for the virtual node.\n   *  The default is `DnsResponseType.LOAD_BALANCER`.\n   */\n  public static dns(hostname: string, responseType?: DnsResponseType): ServiceDiscovery {\n    return new DnsServiceDiscovery(hostname, responseType);\n  }\n\n  /**\n   * Returns Cloud Map based service discovery\n   *\n   * @param service The AWS Cloud Map Service to use for service discovery\n   * @param instanceAttributes A string map that contains attributes with values that you can use to\n   *  filter instances by any custom attribute that you specified when you\n   *  registered the instance. Only instances that match all of the specified\n   *  key/value pairs will be returned.\n   */\n  public static cloudMap(service: cloudmap.IService, instanceAttributes?: {[key: string]: string}): ServiceDiscovery {\n    return new CloudMapServiceDiscovery(service, instanceAttributes);\n  }\n\n  /**\n   * Binds the current object when adding Service Discovery to a VirtualNode\n   */\n  public abstract bind(scope: Construct): ServiceDiscoveryConfig;\n}\n\nclass DnsServiceDiscovery extends ServiceDiscovery {\n  private readonly hostname: string;\n  private readonly responseType?: DnsResponseType;\n\n  constructor(hostname: string, responseType?: DnsResponseType) {\n    super();\n    this.hostname = hostname;\n    this.responseType = responseType;\n  }\n\n  public bind(_scope: Construct): ServiceDiscoveryConfig {\n    return {\n      dns: {\n        hostname: this.hostname,\n        responseType: this.responseType,\n      },\n    };\n  }\n}\n\nclass CloudMapServiceDiscovery extends ServiceDiscovery {\n  private readonly service: cloudmap.IService;\n  private readonly instanceAttributes?: {[key: string]: string};\n\n  constructor(service: cloudmap.IService, instanceAttributes?: {[key: string]: string}) {\n    super();\n    this.service = service;\n    this.instanceAttributes = instanceAttributes;\n  }\n\n  public bind(_scope: Construct): ServiceDiscoveryConfig {\n    return {\n      cloudmap: {\n        namespaceName: this.service.namespace.namespaceName,\n        serviceName: this.service.serviceName,\n        attributes: renderAttributes(this.instanceAttributes),\n      },\n    };\n  }\n}\n\nfunction renderAttributes(attrs?: {[key: string]: string}) {\n  if (attrs === undefined) { return undefined; }\n  return Object.entries(attrs).map(([key, value]) => ({ key, value }));\n}\n"],
  "mappings": "+OA0BA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAKzB,iBAAA,cAAA,eAMA,iBAAA,UAAA,WACF,GAZY,gBAAA,QAAA,iBAAA,SAAA,gBAAe,CAAA,EAAA,EAiB3B,MAAsB,gBAAgB,OAQtB,KAAI,SAAkB,aAA8B,sFACzD,GAAI,qBAAoB,SAAU,YAAY,QAYzC,UAAS,QAA4B,mBAA4C,mFACtF,GAAI,0BAAyB,QAAS,kBAAkB,GAtBnE,QAAA,iBAAA,8HA+BA,MAAM,2BAA4B,iBAAgB,CAIhD,YAAY,SAAkB,aAA8B,CAC1D,MAAK,EACL,KAAK,SAAW,SAChB,KAAK,aAAe,aAGf,KAAK,OAAiB,CAC3B,MAAO,CACL,IAAK,CACH,SAAU,KAAK,SACf,aAAc,KAAK,gBAM3B,MAAM,gCAAiC,iBAAgB,CAIrD,YAAY,QAA4B,mBAA4C,CAClF,MAAK,EACL,KAAK,QAAU,QACf,KAAK,mBAAqB,mBAGrB,KAAK,OAAiB,CAC3B,MAAO,CACL,SAAU,CACR,cAAe,KAAK,QAAQ,UAAU,cACtC,YAAa,KAAK,QAAQ,YAC1B,WAAY,iBAAiB,KAAK,kBAAkB,KAM5D,0BAA0B,MAA+B,CACvD,GAAI,QAAU,OACd,MAAO,QAAO,QAAQ,KAAK,EAAE,IAAI,CAAC,CAAC,IAAK,SAAY,EAAE,IAAK,KAAK,EAAG,CACrE",
  "names": []
}
