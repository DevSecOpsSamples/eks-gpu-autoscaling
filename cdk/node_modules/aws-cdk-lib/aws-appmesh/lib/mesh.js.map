{
  "version": 3,
  "sources": ["mesh.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnMesh } from './appmesh.generated';\nimport { VirtualGateway, VirtualGatewayBaseProps } from './virtual-gateway';\nimport { VirtualNode, VirtualNodeBaseProps } from './virtual-node';\nimport { VirtualRouter, VirtualRouterBaseProps } from './virtual-router';\n\n/**\n * A utility enum defined for the egressFilter type property, the default of DROP_ALL,\n * allows traffic only to other resources inside the mesh, or API calls to amazon resources.\n *\n * @default DROP_ALL\n */\nexport enum MeshFilterType {\n  /**\n   * Allows all outbound traffic\n   */\n  ALLOW_ALL = 'ALLOW_ALL',\n  /**\n   * Allows traffic only to other resources inside the mesh, or API calls to amazon resources\n   */\n  DROP_ALL = 'DROP_ALL',\n}\n\n/**\n * Interface which all Mesh based classes MUST implement\n */\nexport interface IMesh extends cdk.IResource {\n  /**\n   * The name of the AppMesh mesh\n   *\n   * @attribute\n   */\n  readonly meshName: string;\n\n  /**\n   * The Amazon Resource Name (ARN) of the AppMesh mesh\n   *\n   * @attribute\n   */\n  readonly meshArn: string;\n\n  /**\n   * Creates a new VirtualRouter in this Mesh.\n   * Note that the Router is created in the same Stack that this Mesh belongs to,\n   * which might be different than the current stack.\n   */\n  addVirtualRouter(id: string, props?: VirtualRouterBaseProps): VirtualRouter;\n\n  /**\n   * Creates a new VirtualNode in this Mesh.\n   * Note that the Node is created in the same Stack that this Mesh belongs to,\n   * which might be different than the current stack.\n   */\n  addVirtualNode(id: string, props?: VirtualNodeBaseProps): VirtualNode;\n\n  /**\n   * Creates a new VirtualGateway in this Mesh.\n   * Note that the Gateway is created in the same Stack that this Mesh belongs to,\n   * which might be different than the current stack.\n   */\n  addVirtualGateway(id: string, props?: VirtualGatewayBaseProps): VirtualGateway;\n}\n\n/**\n * Represents a new or imported AppMesh mesh\n */\nabstract class MeshBase extends cdk.Resource implements IMesh {\n  /**\n   * The name of the AppMesh mesh\n   */\n  public abstract readonly meshName: string;\n\n  /**\n   * The Amazon Resource Name (ARN) of the AppMesh mesh\n   */\n  public abstract readonly meshArn: string;\n\n  /**\n   * Adds a VirtualRouter to the Mesh with the given id and props\n   */\n  public addVirtualRouter(id: string, props: VirtualRouterBaseProps = {}): VirtualRouter {\n    return new VirtualRouter(this, id, {\n      ...props,\n      mesh: this,\n    });\n  }\n\n  /**\n   * Adds a VirtualNode to the Mesh\n   */\n  public addVirtualNode(id: string, props: VirtualNodeBaseProps = {}): VirtualNode {\n    return new VirtualNode(this, id, {\n      ...props,\n      mesh: this,\n    });\n  }\n\n  /**\n   * Adds a VirtualGateway to the Mesh\n   */\n  addVirtualGateway(id: string, props?: VirtualGatewayBaseProps): VirtualGateway {\n    return new VirtualGateway(this, id, {\n      ...props,\n      mesh: this,\n    });\n  }\n}\n\n/**\n * The set of properties used when creating a Mesh\n */\nexport interface MeshProps {\n  /**\n   * The name of the Mesh being defined\n   *\n   * @default - A name is automatically generated\n   */\n  readonly meshName?: string;\n\n  /**\n   * Egress filter to be applied to the Mesh\n   *\n   * @default DROP_ALL\n   */\n  readonly egressFilter?: MeshFilterType;\n}\n\n/**\n * Define a new AppMesh mesh\n *\n * @see https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\n */\nexport class Mesh extends MeshBase {\n  /**\n   * Import an existing mesh by arn\n   */\n  public static fromMeshArn(scope: Construct, id: string, meshArn: string): IMesh {\n    const parts = cdk.Stack.of(scope).splitArn(meshArn, cdk.ArnFormat.SLASH_RESOURCE_NAME);\n\n    class Import extends MeshBase {\n      public meshName = parts.resourceName || '';\n      public meshArn = meshArn;\n    }\n\n    return new Import(scope, id, {\n      environmentFromArn: meshArn,\n    });\n  }\n\n  /**\n   * Import an existing mesh by name\n   */\n  public static fromMeshName(scope: Construct, id: string, meshName: string): IMesh {\n    const arn = cdk.Stack.of(scope).formatArn({\n      service: 'appmesh',\n      resource: 'mesh',\n      resourceName: meshName,\n    });\n\n    class Import extends MeshBase {\n      public meshName = meshName;\n      public meshArn = arn;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The name of the AppMesh mesh\n   */\n  public readonly meshName: string;\n\n  /**\n   * The Amazon Resource Name (ARN) of the AppMesh mesh\n   */\n  public readonly meshArn: string;\n\n  constructor(scope: Construct, id: string, props: MeshProps = {}) {\n    super(scope, id, {\n      physicalName: props.meshName || cdk.Lazy.string({ produce: () => cdk.Names.uniqueId(this) }),\n    });\n\n    const mesh = new CfnMesh(this, 'Resource', {\n      meshName: this.physicalName,\n      spec: {\n        egressFilter: props.egressFilter ? {\n          type: props.egressFilter,\n        } : undefined,\n      },\n    });\n\n    this.meshName = this.getResourceNameAttribute(mesh.attrMeshName);\n    this.meshArn = this.getResourceArnAttribute(mesh.ref, {\n      service: 'appmesh',\n      resource: 'mesh',\n      resourceName: this.physicalName,\n    });\n  }\n}\n"],
  "mappings": "kOAAA,IAAA,QAAA,YAAA,EAEA,oBAAA,QAAA,qBAAA,EACA,kBAAA,QAAA,mBAAA,EACA,eAAA,QAAA,gBAAA,EACA,iBAAA,QAAA,kBAAA,EAQA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAIxB,gBAAA,UAAA,YAIA,gBAAA,SAAA,UACF,GATY,eAAA,QAAA,gBAAA,SAAA,eAAc,CAAA,EAAA,EAsD1B,MAAe,gBAAiB,KAAI,QAAQ,CAcnC,iBAAiB,GAAY,MAAgC,CAAA,EAAE,CACpE,MAAO,IAAI,kBAAA,cAAc,KAAM,GAAI,IAC9B,MACH,KAAM,KACP,EAMI,eAAe,GAAY,MAA8B,CAAA,EAAE,CAChE,MAAO,IAAI,gBAAA,YAAY,KAAM,GAAI,IAC5B,MACH,KAAM,KACP,EAMH,kBAAkB,GAAY,MAA+B,CAC3D,MAAO,IAAI,mBAAA,eAAe,KAAM,GAAI,IAC/B,MACH,KAAM,KACP,GA4BL,MAAa,YAAa,SAAQ,CA6ChC,YAAY,MAAkB,GAAY,MAAmB,CAAA,EAAE,CAC7D,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,UAAY,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,IAAI,MAAM,SAAS,IAAI,CAAC,CAAE,EAC5F,mEAED,KAAM,MAAO,GAAI,qBAAA,QAAQ,KAAM,WAAY,CACzC,SAAU,KAAK,aACf,KAAM,CACJ,aAAc,MAAM,aAAe,CACjC,KAAM,MAAM,cACV,QAEP,EAED,KAAK,SAAW,KAAK,yBAAyB,KAAK,YAAY,EAC/D,KAAK,QAAU,KAAK,wBAAwB,KAAK,IAAK,CACpD,QAAS,UACT,SAAU,OACV,aAAc,KAAK,aACpB,QA5DW,aAAY,MAAkB,GAAY,QAAe,CACrE,KAAM,OAAQ,IAAI,MAAM,GAAG,KAAK,EAAE,SAAS,QAAS,IAAI,UAAU,mBAAmB,EAErF,MAAM,cAAe,SAAQ,CAA7B,aAAA,qBACS,KAAA,SAAW,MAAM,cAAgB,GACjC,KAAA,QAAU,OACnB,EAEA,MAAO,IAAI,QAAO,MAAO,GAAI,CAC3B,mBAAoB,QACrB,QAMW,cAAa,MAAkB,GAAY,SAAgB,CACvE,KAAM,KAAM,IAAI,MAAM,GAAG,KAAK,EAAE,UAAU,CACxC,QAAS,UACT,SAAU,OACV,aAAc,SACf,EAED,MAAM,cAAe,SAAQ,CAA7B,aAAA,qBACS,KAAA,SAAW,SACX,KAAA,QAAU,GACnB,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,GAhC/B,QAAA,KAAA",
  "names": []
}
