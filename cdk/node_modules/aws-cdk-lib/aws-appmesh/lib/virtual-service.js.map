{
  "version": 3,
  "sources": ["virtual-service.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnVirtualService } from './appmesh.generated';\nimport { IMesh, Mesh } from './mesh';\nimport { renderMeshOwner } from './private/utils';\nimport { IVirtualNode } from './virtual-node';\nimport { IVirtualRouter } from './virtual-router';\n\n/**\n * Represents the interface which all VirtualService based classes MUST implement\n */\nexport interface IVirtualService extends cdk.IResource {\n  /**\n   * The name of the VirtualService\n   *\n   * @attribute\n   */\n  readonly virtualServiceName: string;\n\n  /**\n   * The Amazon Resource Name (ARN) for the virtual service\n   *\n   * @attribute\n   */\n  readonly virtualServiceArn: string;\n\n  /**\n   * The Mesh which the VirtualService belongs to\n   */\n  readonly mesh: IMesh;\n}\n\n/**\n * The properties applied to the VirtualService being defined\n */\nexport interface VirtualServiceProps {\n  /**\n   * The name of the VirtualService.\n   *\n   * It is recommended this follows the fully-qualified domain name format,\n   * such as \"my-service.default.svc.cluster.local\".\n   *\n   * Example value: `service.domain.local`\n   * @default - A name is automatically generated\n   */\n  readonly virtualServiceName?: string;\n\n  /**\n   * The VirtualNode or VirtualRouter which the VirtualService uses as its provider\n   */\n  readonly virtualServiceProvider: VirtualServiceProvider;\n}\n\n/**\n * VirtualService represents a service inside an AppMesh\n *\n * It routes traffic either to a Virtual Node or to a Virtual Router.\n *\n * @see https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\n */\nexport class VirtualService extends cdk.Resource implements IVirtualService {\n  /**\n   * Import an existing VirtualService given an ARN\n   */\n  public static fromVirtualServiceArn(scope: Construct, id: string, virtualServiceArn: string): IVirtualService {\n    return new class extends cdk.Resource implements IVirtualService {\n      readonly virtualServiceArn = virtualServiceArn;\n      private readonly parsedArn = cdk.Fn.split('/', cdk.Stack.of(scope).splitArn(virtualServiceArn, cdk.ArnFormat.SLASH_RESOURCE_NAME).resourceName!);\n      readonly virtualServiceName = cdk.Fn.select(2, this.parsedArn);\n      readonly mesh = Mesh.fromMeshName(this, 'Mesh', cdk.Fn.select(0, this.parsedArn));\n    }(scope, id);\n  }\n\n  /**\n   * Import an existing VirtualService given its attributes\n   */\n  public static fromVirtualServiceAttributes(scope: Construct, id: string, attrs: VirtualServiceAttributes): IVirtualService {\n    return new class extends cdk.Resource implements IVirtualService {\n      readonly virtualServiceName = attrs.virtualServiceName;\n      readonly mesh = attrs.mesh;\n      readonly virtualServiceArn = cdk.Stack.of(this).formatArn({\n        service: 'appmesh',\n        resource: `mesh/${attrs.mesh.meshName}/virtualService`,\n        resourceName: this.virtualServiceName,\n      });\n    }(scope, id);\n  }\n\n  /**\n   * The name of the VirtualService, it is recommended this follows the fully-qualified domain name format.\n   */\n  public readonly virtualServiceName: string;\n\n  /**\n   * The Amazon Resource Name (ARN) for the virtual service\n   */\n  public readonly virtualServiceArn: string;\n\n  /**\n   * The Mesh which the VirtualService belongs to\n   */\n  public readonly mesh: IMesh;\n\n  constructor(scope: Construct, id: string, props: VirtualServiceProps) {\n    super(scope, id, {\n      physicalName: props.virtualServiceName || cdk.Lazy.string({ produce: () => cdk.Names.uniqueId(this) }),\n    });\n\n    const providerConfig = props.virtualServiceProvider.bind(this);\n    this.mesh = providerConfig.mesh;\n\n    const svc = new CfnVirtualService(this, 'Resource', {\n      meshName: this.mesh.meshName,\n      meshOwner: renderMeshOwner(this.env.account, this.mesh.env.account),\n      virtualServiceName: this.physicalName,\n      spec: {\n        provider: providerConfig.virtualNodeProvider || providerConfig.virtualRouterProvider\n          ? {\n            virtualNode: providerConfig.virtualNodeProvider,\n            virtualRouter: providerConfig.virtualRouterProvider,\n          }\n          : undefined,\n      },\n    });\n\n    this.virtualServiceName = this.getResourceNameAttribute(svc.attrVirtualServiceName);\n    this.virtualServiceArn = this.getResourceArnAttribute(svc.ref, {\n      service: 'appmesh',\n      resource: `mesh/${this.mesh.meshName}/virtualService`,\n      resourceName: this.physicalName,\n    });\n  }\n}\n\n/**\n * Interface with properties ncecessary to import a reusable VirtualService\n */\nexport interface VirtualServiceAttributes {\n  /**\n   * The name of the VirtualService, it is recommended this follows the fully-qualified domain name format.\n   */\n  readonly virtualServiceName: string;\n\n  /**\n   * The Mesh which the VirtualService belongs to\n   */\n  readonly mesh: IMesh;\n}\n\n/**\n * Properties for a VirtualService provider\n */\nexport interface VirtualServiceProviderConfig {\n  /**\n   * Virtual Node based provider\n   *\n   * @default - none\n   */\n  readonly virtualNodeProvider?: CfnVirtualService.VirtualNodeServiceProviderProperty;\n\n  /**\n   * Virtual Router based provider\n   *\n   * @default - none\n   */\n  readonly virtualRouterProvider?: CfnVirtualService.VirtualRouterServiceProviderProperty;\n\n  /**\n   * Mesh the Provider is using\n   *\n   * @default - none\n   */\n  readonly mesh: IMesh;\n}\n\n/**\n * Represents the properties needed to define the provider for a VirtualService\n */\nexport abstract class VirtualServiceProvider {\n  /**\n   * Returns a VirtualNode based Provider for a VirtualService\n   */\n  public static virtualNode(virtualNode: IVirtualNode): VirtualServiceProvider {\n    return new VirtualServiceProviderImpl(virtualNode, undefined);\n  }\n\n  /**\n   * Returns a VirtualRouter based Provider for a VirtualService\n   */\n  public static virtualRouter(virtualRouter: IVirtualRouter): VirtualServiceProvider {\n    return new VirtualServiceProviderImpl(undefined, virtualRouter);\n  }\n\n  /**\n   * Returns an Empty Provider for a VirtualService. This provides no routing capabilities\n   * and should only be used as a placeholder\n   */\n  public static none(mesh: IMesh): VirtualServiceProvider {\n    return new VirtualServiceProviderImpl(undefined, undefined, mesh);\n  }\n\n  /**\n   * Enforces mutual exclusivity for VirtualService provider types.\n   */\n  public abstract bind(_construct: Construct): VirtualServiceProviderConfig;\n}\n\nclass VirtualServiceProviderImpl extends VirtualServiceProvider {\n  private readonly virtualNode?: IVirtualNode;\n  private readonly virtualRouter?: IVirtualRouter;\n  private readonly mesh: IMesh;\n\n  constructor(virtualNode?: IVirtualNode, virtualRouter?: IVirtualRouter, mesh?: IMesh) {\n    super();\n    this.virtualNode = virtualNode;\n    this.virtualRouter = virtualRouter;\n    const providedMesh = this.virtualNode?.mesh ?? this.virtualRouter?.mesh ?? mesh!;\n    this.mesh = providedMesh;\n  }\n\n  public bind(_construct: Construct): VirtualServiceProviderConfig {\n    return {\n      mesh: this.mesh,\n      virtualNodeProvider: this.virtualNode\n        ? {\n          virtualNodeName: this.virtualNode.virtualNodeName,\n        }\n        : undefined,\n      virtualRouterProvider: this.virtualRouter\n        ? {\n          virtualRouterName: this.virtualRouter.virtualRouterName,\n        }\n        : undefined,\n    };\n  }\n}\n"],
  "mappings": "uPAAA,IAAA,QAAA,YAAA,EAEA,oBAAA,QAAA,qBAAA,EACA,OAAA,QAAA,QAAA,EACA,QAAA,QAAA,iBAAA,EAwDA,MAAa,sBAAuB,KAAI,QAAQ,CA2C9C,YAAY,MAAkB,GAAY,MAA0B,CAClE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,oBAAsB,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,IAAI,MAAM,SAAS,IAAI,CAAC,CAAE,EACtG,6EAED,KAAM,gBAAiB,MAAM,uBAAuB,KAAK,IAAI,EAC7D,KAAK,KAAO,eAAe,KAE3B,KAAM,KAAM,GAAI,qBAAA,kBAAkB,KAAM,WAAY,CAClD,SAAU,KAAK,KAAK,SACpB,UAAW,QAAA,gBAAgB,KAAK,IAAI,QAAS,KAAK,KAAK,IAAI,OAAO,EAClE,mBAAoB,KAAK,aACzB,KAAM,CACJ,SAAU,eAAe,qBAAuB,eAAe,sBAC3D,CACA,YAAa,eAAe,oBAC5B,cAAe,eAAe,uBAE9B,QAEP,EAED,KAAK,mBAAqB,KAAK,yBAAyB,IAAI,sBAAsB,EAClF,KAAK,kBAAoB,KAAK,wBAAwB,IAAI,IAAK,CAC7D,QAAS,UACT,SAAU,QAAQ,KAAK,KAAK,0BAC5B,aAAc,KAAK,aACpB,QAlEW,uBAAsB,MAAkB,GAAY,kBAAyB,CACzF,MAAO,IAAI,cAAc,KAAI,QAAQ,CAA1B,aAAA,qBACA,KAAA,kBAAoB,kBACZ,KAAA,UAAY,IAAI,GAAG,MAAM,IAAK,IAAI,MAAM,GAAG,KAAK,EAAE,SAAS,kBAAmB,IAAI,UAAU,mBAAmB,EAAE,YAAa,EACtI,KAAA,mBAAqB,IAAI,GAAG,OAAO,EAAG,KAAK,SAAS,EACpD,KAAA,KAAO,OAAA,KAAK,aAAa,KAAM,OAAQ,IAAI,GAAG,OAAO,EAAG,KAAK,SAAS,CAAC,CAClF,GAAE,MAAO,EAAE,QAMC,8BAA6B,MAAkB,GAAY,MAA+B,wFAC/F,GAAI,cAAc,KAAI,QAAQ,CAA1B,aAAA,qBACA,KAAA,mBAAqB,MAAM,mBAC3B,KAAA,KAAO,MAAM,KACb,KAAA,kBAAoB,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CACxD,QAAS,UACT,SAAU,QAAQ,MAAM,KAAK,0BAC7B,aAAc,KAAK,mBACpB,CACH,GAAE,MAAO,EAAE,GAzBf,QAAA,eAAA,wHAsHA,MAAsB,sBAAsB,OAI5B,aAAY,YAAyB,kFAC1C,GAAI,4BAA2B,YAAa,MAAS,QAMhD,eAAc,cAA6B,sFAChD,GAAI,4BAA2B,OAAW,aAAa,QAOlD,MAAK,KAAW,oEACrB,GAAI,4BAA2B,OAAW,OAAW,IAAI,GApBpE,QAAA,uBAAA,gJA6BA,MAAM,kCAAmC,uBAAsB,CAK7D,YAAY,YAA4B,cAAgC,KAAY,iBAClF,MAAK,EACL,KAAK,YAAc,YACnB,KAAK,cAAgB,cACrB,KAAM,cAAY,IAAA,IAAA,IAAG,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,QAAI,MAAA,KAAA,OAAA,GAAA,IAAI,KAAK,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,QAAI,MAAA,KAAA,OAAA,GAAI,KAC3E,KAAK,KAAO,aAGP,KAAK,WAAqB,CAC/B,MAAO,CACL,KAAM,KAAK,KACX,oBAAqB,KAAK,YACtB,CACA,gBAAiB,KAAK,YAAY,iBAElC,OACJ,sBAAuB,KAAK,cACxB,CACA,kBAAmB,KAAK,cAAc,mBAEtC",
  "names": []
}
