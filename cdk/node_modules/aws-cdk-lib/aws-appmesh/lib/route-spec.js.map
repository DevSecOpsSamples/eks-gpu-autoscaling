{
  "version": 3,
  "sources": ["route-spec.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnRoute } from './appmesh.generated';\nimport { HeaderMatch } from './header-match';\nimport { HttpRouteMethod } from './http-route-method';\nimport { HttpRoutePathMatch } from './http-route-path-match';\nimport { validateGrpcRouteMatch, validateGrpcMatchArrayLength, validateHttpMatchArrayLength } from './private/utils';\nimport { QueryParameterMatch } from './query-parameter-match';\nimport { GrpcTimeout, HttpTimeout, Protocol, TcpTimeout } from './shared-interfaces';\nimport { IVirtualNode } from './virtual-node';\n\n/**\n * Properties for the Weighted Targets in the route\n */\nexport interface WeightedTarget {\n  /**\n   * The VirtualNode the route points to\n   */\n  readonly virtualNode: IVirtualNode;\n\n  /**\n   * The weight for the target\n   *\n   * @default 1\n   */\n  readonly weight?: number;\n}\n\n/**\n * The criterion for determining a request match for this Route\n */\nexport interface HttpRouteMatch {\n  /**\n   * Specifies how is the request matched based on the path part of its URL.\n   *\n   * @default - matches requests with all paths\n   */\n  readonly path?: HttpRoutePathMatch;\n\n  /**\n   * Specifies the client request headers to match on. All specified headers\n   * must match for the route to match.\n   *\n   * @default - do not match on headers\n   */\n  readonly headers?: HeaderMatch[];\n\n  /**\n   * The HTTP client request method to match on.\n   *\n   * @default - do not match on request method\n   */\n  readonly method?: HttpRouteMethod;\n\n  /**\n   * The client request protocol to match on. Applicable only for HTTP2 routes.\n   *\n   * @default - do not match on HTTP2 request protocol\n   */\n  readonly protocol?: HttpRouteProtocol;\n\n  /**\n   * The query parameters to match on.\n   * All specified query parameters must match for the route to match.\n   *\n   * @default - do not match on query parameters\n   */\n  readonly queryParameters?: QueryParameterMatch[];\n}\n\n/**\n * Supported :scheme options for HTTP2\n */\nexport enum HttpRouteProtocol {\n  /**\n   * Match HTTP requests\n   */\n  HTTP = 'http',\n\n  /**\n   * Match HTTPS requests\n   */\n  HTTPS = 'https',\n}\n\n/**\n * The criterion for determining a request match for this Route.\n * At least one match type must be selected.\n */\nexport interface GrpcRouteMatch {\n  /**\n   * Create service name based gRPC route match.\n   *\n   * @default - do not match on service name\n   */\n  readonly serviceName?: string;\n\n  /**\n   * Create metadata based gRPC route match.\n   * All specified metadata must match for the route to match.\n   *\n   * @default - do not match on metadata\n   */\n  readonly metadata?: HeaderMatch[];\n\n  /**\n   * The method name to match from the request.\n   * If the method name is specified, service name must be also provided.\n   *\n   * @default - do not match on method name\n   */\n  readonly methodName?: string;\n}\n\n/**\n * Base options for all route specs.\n */\nexport interface RouteSpecOptionsBase {\n  /**\n   * The priority for the route. When a Virtual Router has multiple routes, route match is performed in the\n   * order of specified value, where 0 is the highest priority, and first matched route is selected.\n   *\n   * @default - no particular priority\n   */\n  readonly priority?: number;\n}\n\n/**\n * Properties specific for HTTP Based Routes\n */\nexport interface HttpRouteSpecOptions extends RouteSpecOptionsBase {\n  /**\n   * The criterion for determining a request match for this Route\n   *\n   * @default - matches on '/'\n   */\n  readonly match?: HttpRouteMatch;\n\n  /**\n   * List of targets that traffic is routed to when a request matches the route\n   */\n  readonly weightedTargets: WeightedTarget[];\n\n  /**\n   * An object that represents a http timeout\n   *\n   * @default - None\n   */\n  readonly timeout?: HttpTimeout;\n\n  /**\n   * The retry policy\n   *\n   * @default - no retry policy\n   */\n  readonly retryPolicy?: HttpRetryPolicy;\n}\n\n/**\n * HTTP retry policy\n */\nexport interface HttpRetryPolicy {\n  /**\n   * Specify HTTP events on which to retry. You must specify at least one value\n   * for at least one types of retry events.\n   *\n   * @default - no retries for http events\n   */\n  readonly httpRetryEvents?: HttpRetryEvent[];\n\n  /**\n   * The maximum number of retry attempts\n   */\n  readonly retryAttempts: number;\n\n  /**\n   * The timeout for each retry attempt\n   */\n  readonly retryTimeout: cdk.Duration;\n\n  /**\n   * TCP events on which to retry. The event occurs before any processing of a\n   * request has started and is encountered when the upstream is temporarily or\n   * permanently unavailable. You must specify at least one value for at least\n   * one types of retry events.\n   *\n   * @default - no retries for tcp events\n   */\n  readonly tcpRetryEvents?: TcpRetryEvent[];\n}\n\n/**\n * HTTP events on which to retry.\n */\nexport enum HttpRetryEvent {\n  /**\n   * HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511\n   */\n  SERVER_ERROR = 'server-error',\n\n  /**\n   * HTTP status codes 502, 503, and 504\n   */\n  GATEWAY_ERROR = 'gateway-error',\n\n  /**\n   * HTTP status code 409\n   */\n  CLIENT_ERROR = 'client-error',\n\n  /**\n   * Retry on refused stream\n   */\n  STREAM_ERROR = 'stream-error',\n}\n\n/**\n * TCP events on which you may retry\n */\nexport enum TcpRetryEvent {\n  /**\n   * A connection error\n   */\n  CONNECTION_ERROR = 'connection-error',\n}\n\n/**\n * Properties specific for a TCP Based Routes\n */\nexport interface TcpRouteSpecOptions extends RouteSpecOptionsBase {\n  /**\n   * List of targets that traffic is routed to when a request matches the route\n   */\n  readonly weightedTargets: WeightedTarget[];\n\n  /**\n   * An object that represents a tcp timeout\n   *\n   * @default - None\n   */\n  readonly timeout?: TcpTimeout;\n}\n\n/**\n * Properties specific for a GRPC Based Routes\n */\nexport interface GrpcRouteSpecOptions extends RouteSpecOptionsBase {\n  /**\n   * The criterion for determining a request match for this Route\n   */\n  readonly match: GrpcRouteMatch;\n\n  /**\n   * An object that represents a grpc timeout\n   *\n   * @default - None\n   */\n  readonly timeout?: GrpcTimeout;\n\n  /**\n   * List of targets that traffic is routed to when a request matches the route\n   */\n  readonly weightedTargets: WeightedTarget[];\n\n  /**\n   * The retry policy\n   *\n   * @default - no retry policy\n   */\n  readonly retryPolicy?: GrpcRetryPolicy;\n}\n\n/** gRPC retry policy */\nexport interface GrpcRetryPolicy extends HttpRetryPolicy {\n  /**\n   * gRPC events on which to retry. You must specify at least one value\n   * for at least one types of retry events.\n   *\n   * @default - no retries for gRPC events\n   */\n  readonly grpcRetryEvents?: GrpcRetryEvent[];\n}\n\n/**\n * gRPC events\n */\nexport enum GrpcRetryEvent {\n  /**\n   * Request was cancelled\n   *\n   * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html\n   */\n  CANCELLED = 'cancelled',\n\n  /**\n   * The deadline was exceeded\n   *\n   * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html\n   */\n  DEADLINE_EXCEEDED = 'deadline-exceeded',\n\n  /**\n   * Internal error\n   *\n   * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html\n   */\n  INTERNAL_ERROR = 'internal',\n\n  /**\n   * A resource was exhausted\n   *\n   * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html\n   */\n  RESOURCE_EXHAUSTED = 'resource-exhausted',\n\n  /**\n   * The service is unavailable\n   *\n   * @see https://grpc.github.io/grpc/core/md_doc_statuscodes.html\n   */\n  UNAVAILABLE = 'unavailable',\n}\n\n/**\n * All Properties for Route Specs\n */\nexport interface RouteSpecConfig {\n  /**\n   * The spec for an http route\n   *\n   * @default - no http spec\n   */\n  readonly httpRouteSpec?: CfnRoute.HttpRouteProperty;\n\n  /**\n   * The spec for an http2 route\n   *\n   * @default - no http2 spec\n   */\n  readonly http2RouteSpec?: CfnRoute.HttpRouteProperty;\n\n  /**\n   * The spec for a grpc route\n   *\n   * @default - no grpc spec\n   */\n  readonly grpcRouteSpec?: CfnRoute.GrpcRouteProperty;\n\n  /**\n   * The spec for a tcp route\n   *\n   * @default - no tcp spec\n   */\n  readonly tcpRouteSpec?: CfnRoute.TcpRouteProperty;\n\n  /**\n   * The priority for the route. When a Virtual Router has multiple routes, route match is performed in the\n   * order of specified value, where 0 is the highest priority, and first matched route is selected.\n   *\n   * @default - no particular priority\n   */\n  readonly priority?: number;\n}\n\n/**\n * Used to generate specs with different protocols for a RouteSpec\n */\nexport abstract class RouteSpec {\n  /**\n   * Creates an HTTP Based RouteSpec\n   */\n  public static http(options: HttpRouteSpecOptions): RouteSpec {\n    return new HttpRouteSpec(options, Protocol.HTTP);\n  }\n\n  /**\n   * Creates an HTTP2 Based RouteSpec\n   *\n   */\n  public static http2(options: HttpRouteSpecOptions): RouteSpec {\n    return new HttpRouteSpec(options, Protocol.HTTP2);\n  }\n\n  /**\n   * Creates a TCP Based RouteSpec\n   */\n  public static tcp(options: TcpRouteSpecOptions): RouteSpec {\n    return new TcpRouteSpec(options);\n  }\n\n  /**\n   * Creates a GRPC Based RouteSpec\n   */\n  public static grpc(options: GrpcRouteSpecOptions): RouteSpec {\n    return new GrpcRouteSpec(options);\n  }\n\n  /**\n   * Called when the RouteSpec type is initialized. Can be used to enforce\n   * mutual exclusivity with future properties\n   */\n  public abstract bind(scope: Construct): RouteSpecConfig;\n}\n\nclass HttpRouteSpec extends RouteSpec {\n  public readonly priority?: number;\n  public readonly protocol: Protocol;\n  public readonly match?: HttpRouteMatch;\n  public readonly timeout?: HttpTimeout;\n\n  public readonly weightedTargets: WeightedTarget[];\n\n  /**\n   * The retry policy\n   */\n  public readonly retryPolicy?: HttpRetryPolicy;\n\n  constructor(props: HttpRouteSpecOptions, protocol: Protocol) {\n    super();\n    this.protocol = protocol;\n    this.match = props.match;\n    this.weightedTargets = props.weightedTargets;\n    this.timeout = props.timeout;\n    this.priority = props.priority;\n\n    if (props.retryPolicy) {\n      const httpRetryEvents = props.retryPolicy.httpRetryEvents ?? [];\n      const tcpRetryEvents = props.retryPolicy.tcpRetryEvents ?? [];\n\n      if (httpRetryEvents.length + tcpRetryEvents.length === 0) {\n        throw new Error('You must specify one value for at least one of `httpRetryEvents` or `tcpRetryEvents`');\n      }\n\n      this.retryPolicy = {\n        ...props.retryPolicy,\n        httpRetryEvents: httpRetryEvents.length > 0 ? httpRetryEvents : undefined,\n        tcpRetryEvents: tcpRetryEvents.length > 0 ? tcpRetryEvents : undefined,\n      };\n    }\n  }\n\n  public bind(scope: Construct): RouteSpecConfig {\n    const pathMatchConfig = (this.match?.path ?? HttpRoutePathMatch.startsWith('/')).bind(scope);\n\n    // Set prefix path match to '/' if none of path matches are defined.\n    const headers = this.match?.headers;\n    const queryParameters = this.match?.queryParameters;\n\n    validateHttpMatchArrayLength(headers, queryParameters);\n\n    const httpConfig: CfnRoute.HttpRouteProperty = {\n      action: {\n        weightedTargets: renderWeightedTargets(this.weightedTargets),\n      },\n      match: {\n        prefix: pathMatchConfig.prefixPathMatch,\n        path: pathMatchConfig.wholePathMatch,\n        headers: headers?.map(header => header.bind(scope).headerMatch),\n        method: this.match?.method,\n        scheme: this.match?.protocol,\n        queryParameters: queryParameters?.map(queryParameter => queryParameter.bind(scope).queryParameterMatch),\n      },\n      timeout: renderTimeout(this.timeout),\n      retryPolicy: this.retryPolicy ? renderHttpRetryPolicy(this.retryPolicy) : undefined,\n    };\n    return {\n      priority: this.priority,\n      httpRouteSpec: this.protocol === Protocol.HTTP ? httpConfig : undefined,\n      http2RouteSpec: this.protocol === Protocol.HTTP2 ? httpConfig : undefined,\n    };\n  }\n}\n\nclass TcpRouteSpec extends RouteSpec {\n  /**\n   * The priority for the route.\n   */\n  public readonly priority?: number;\n\n  /*\n   * List of targets that traffic is routed to when a request matches the route\n   */\n  public readonly weightedTargets: WeightedTarget[];\n\n  /**\n   * The criteria for determining a timeout configuration\n   */\n  public readonly timeout?: TcpTimeout;\n\n  constructor(props: TcpRouteSpecOptions) {\n    super();\n    this.weightedTargets = props.weightedTargets;\n    this.timeout = props.timeout;\n    this.priority = props.priority;\n  }\n\n  public bind(_scope: Construct): RouteSpecConfig {\n    return {\n      priority: this.priority,\n      tcpRouteSpec: {\n        action: {\n          weightedTargets: renderWeightedTargets(this.weightedTargets),\n        },\n        timeout: renderTimeout(this.timeout),\n      },\n    };\n  }\n}\n\nclass GrpcRouteSpec extends RouteSpec {\n  /**\n   * The priority for the route.\n   */\n  public readonly priority?: number;\n\n  public readonly weightedTargets: WeightedTarget[];\n  public readonly match: GrpcRouteMatch;\n  public readonly timeout?: GrpcTimeout;\n\n  /**\n   * The retry policy.\n   */\n  public readonly retryPolicy?: GrpcRetryPolicy;\n\n  constructor(props: GrpcRouteSpecOptions) {\n    super();\n    this.weightedTargets = props.weightedTargets;\n    this.match = props.match;\n    this.timeout = props.timeout;\n    this.priority = props.priority;\n\n    if (props.retryPolicy) {\n      const grpcRetryEvents = props.retryPolicy.grpcRetryEvents ?? [];\n      const httpRetryEvents = props.retryPolicy.httpRetryEvents ?? [];\n      const tcpRetryEvents = props.retryPolicy.tcpRetryEvents ?? [];\n\n      if (grpcRetryEvents.length + httpRetryEvents.length + tcpRetryEvents.length === 0) {\n        throw new Error('You must specify one value for at least one of `grpcRetryEvents`, `httpRetryEvents` or `tcpRetryEvents`');\n      }\n\n      this.retryPolicy = {\n        ...props.retryPolicy,\n        grpcRetryEvents: grpcRetryEvents.length > 0 ? grpcRetryEvents : undefined,\n        httpRetryEvents: httpRetryEvents.length > 0 ? httpRetryEvents : undefined,\n        tcpRetryEvents: tcpRetryEvents.length > 0 ? tcpRetryEvents : undefined,\n      };\n    }\n  }\n\n  public bind(scope: Construct): RouteSpecConfig {\n    const serviceName = this.match.serviceName;\n    const methodName = this.match.methodName;\n    const metadata = this.match.metadata;\n\n    validateGrpcRouteMatch(this.match);\n    validateGrpcMatchArrayLength(metadata);\n\n    if (methodName && !serviceName) {\n      throw new Error('If you specify a method name, you must also specify a service name');\n    }\n\n    return {\n      priority: this.priority,\n      grpcRouteSpec: {\n        action: {\n          weightedTargets: renderWeightedTargets(this.weightedTargets),\n        },\n        match: {\n          serviceName: serviceName,\n          methodName: methodName,\n          metadata: metadata?.map(singleMetadata => singleMetadata.bind(scope).headerMatch),\n        },\n        timeout: renderTimeout(this.timeout),\n        retryPolicy: this.retryPolicy ? renderGrpcRetryPolicy(this.retryPolicy) : undefined,\n      },\n    };\n  }\n}\n\n/**\n * Utility method to add weighted route targets to an existing route\n */\nfunction renderWeightedTargets(weightedTargets: WeightedTarget[]): CfnRoute.WeightedTargetProperty[] {\n  const renderedTargets: CfnRoute.WeightedTargetProperty[] = [];\n  for (const t of weightedTargets) {\n    renderedTargets.push({\n      virtualNode: t.virtualNode.virtualNodeName,\n      weight: t.weight || 1,\n    });\n  }\n  return renderedTargets;\n}\n\n/**\n * Utility method to construct a route timeout object\n */\nfunction renderTimeout(timeout?: HttpTimeout): CfnRoute.HttpTimeoutProperty | undefined {\n  return timeout\n    ? {\n      idle: timeout?.idle !== undefined\n        ? {\n          unit: 'ms',\n          value: timeout?.idle.toMilliseconds(),\n        }\n        : undefined,\n      perRequest: timeout?.perRequest !== undefined\n        ? {\n          unit: 'ms',\n          value: timeout?.perRequest.toMilliseconds(),\n        }\n        : undefined,\n    }\n    : undefined;\n}\n\nfunction renderHttpRetryPolicy(retryPolicy: HttpRetryPolicy): CfnRoute.HttpRetryPolicyProperty {\n  return {\n    maxRetries: retryPolicy.retryAttempts,\n    perRetryTimeout: {\n      unit: 'ms',\n      value: retryPolicy.retryTimeout.toMilliseconds(),\n    },\n    httpRetryEvents: retryPolicy.httpRetryEvents,\n    tcpRetryEvents: retryPolicy.tcpRetryEvents,\n  };\n}\n\nfunction renderGrpcRetryPolicy(retryPolicy: GrpcRetryPolicy): CfnRoute.GrpcRetryPolicyProperty {\n  return {\n    ...renderHttpRetryPolicy(retryPolicy),\n    grpcRetryEvents: retryPolicy.grpcRetryEvents,\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
