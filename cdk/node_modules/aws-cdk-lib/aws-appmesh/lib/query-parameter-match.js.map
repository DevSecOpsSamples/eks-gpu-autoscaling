{
  "version": 3,
  "sources": ["query-parameter-match.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnRoute } from './appmesh.generated';\n\n/**\n * Configuration for `QueryParameterMatch`\n */\nexport interface QueryParameterMatchConfig {\n  /**\n   * Route CFN configuration for route query parameter match.\n   */\n  readonly queryParameterMatch: CfnRoute.QueryParameterProperty;\n}\n\n/**\n * Used to generate query parameter matching methods.\n */\nexport abstract class QueryParameterMatch {\n  /**\n   * The value of the query parameter with the given name in the request must match the\n   * specified value exactly.\n   *\n   * @param queryParameterName the name of the query parameter to match against\n   * @param queryParameterValue The exact value to test against\n   */\n  static valueIs(queryParameterName: string, queryParameterValue: string): QueryParameterMatch {\n    return new QueryParameterMatchImpl(queryParameterName, { exact: queryParameterValue });\n  }\n\n  /**\n   * Returns the query parameter match configuration.\n   */\n  public abstract bind(scope: Construct): QueryParameterMatchConfig;\n}\n\nclass QueryParameterMatchImpl extends QueryParameterMatch {\n  constructor(\n    private readonly queryParameterName: string,\n    private readonly matchProperty: CfnRoute.HttpQueryParameterMatchProperty,\n  ) {\n    super();\n  }\n\n  bind(_scope: Construct): QueryParameterMatchConfig {\n    return {\n      queryParameterMatch: {\n        match: this.matchProperty,\n        name: this.queryParameterName,\n      },\n    };\n  }\n}\n"],
  "mappings": "+JAgBA,MAAsB,mBAAmB,OAQhC,SAAQ,mBAA4B,oBAA2B,CACpE,MAAO,IAAI,yBAAwB,mBAAoB,CAAE,MAAO,mBAAmB,CAAE,GATzF,QAAA,oBAAA,uIAkBA,MAAM,+BAAgC,oBAAmB,CACvD,YACmB,mBACA,cAAuD,CAExE,MAAK,EAHY,KAAA,mBAAA,mBACA,KAAA,cAAA,cAKnB,KAAK,OAAiB,CACpB,MAAO,CACL,oBAAqB,CACnB,MAAO,KAAK,cACZ,KAAM,KAAK",
  "names": []
}
