{
  "version": 3,
  "sources": ["virtual-gateway-listener.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnVirtualGateway } from './appmesh.generated';\nimport { HealthCheck } from './health-checks';\nimport { ListenerTlsOptions } from './listener-tls-options';\nimport { ConnectionPoolConfig, renderListenerTlsOptions } from './private/utils';\nimport {\n  GrpcConnectionPool,\n  Http2ConnectionPool,\n  HttpConnectionPool,\n  Protocol,\n} from './shared-interfaces';\n\n/**\n * Represents the properties needed to define a Listeners for a VirtualGateway\n */\ninterface VirtualGatewayListenerCommonOptions {\n  /**\n   * Port to listen for connections on\n   *\n   * @default - 8080\n   */\n  readonly port?: number\n\n  /**\n   * The health check information for the listener\n   *\n   * @default - no healthcheck\n   */\n  readonly healthCheck?: HealthCheck;\n\n  /**\n   * Represents the configuration for enabling TLS on a listener\n   *\n   * @default - none\n   */\n  readonly tls?: ListenerTlsOptions;\n}\n\n/**\n * Represents the properties needed to define HTTP Listeners for a VirtualGateway\n */\nexport interface HttpGatewayListenerOptions extends VirtualGatewayListenerCommonOptions {\n  /**\n   * Connection pool for http listeners\n   *\n   * @default - None\n   */\n  readonly connectionPool?: HttpConnectionPool;\n}\n\n/**\n * Represents the properties needed to define HTTP2 Listeners for a VirtualGateway\n */\nexport interface Http2GatewayListenerOptions extends VirtualGatewayListenerCommonOptions {\n  /**\n   * Connection pool for http listeners\n   *\n   * @default - None\n   */\n  readonly connectionPool?: Http2ConnectionPool;\n}\n\n/**\n * Represents the properties needed to define GRPC Listeners for a VirtualGateway\n */\nexport interface GrpcGatewayListenerOptions extends VirtualGatewayListenerCommonOptions {\n  /**\n   * Connection pool for http listeners\n   *\n   * @default - None\n   */\n  readonly connectionPool?: GrpcConnectionPool;\n}\n\n/**\n * Properties for a VirtualGateway listener\n */\nexport interface VirtualGatewayListenerConfig {\n  /**\n   * Single listener config for a VirtualGateway\n   */\n  readonly listener: CfnVirtualGateway.VirtualGatewayListenerProperty;\n}\n\n/**\n * Represents the properties needed to define listeners for a VirtualGateway\n */\nexport abstract class VirtualGatewayListener {\n  /**\n   * Returns an HTTP Listener for a VirtualGateway\n   */\n  public static http(options: HttpGatewayListenerOptions = {}): VirtualGatewayListener {\n    return new VirtualGatewayListenerImpl(Protocol.HTTP, options.healthCheck, options.port, options.tls, options.connectionPool);\n  }\n\n  /**\n   * Returns an HTTP2 Listener for a VirtualGateway\n   */\n  public static http2(options: Http2GatewayListenerOptions = {}): VirtualGatewayListener {\n    return new VirtualGatewayListenerImpl(Protocol.HTTP2, options.healthCheck, options.port, options.tls, options.connectionPool);\n  }\n\n  /**\n   * Returns a GRPC Listener for a VirtualGateway\n   */\n  public static grpc(options: GrpcGatewayListenerOptions = {}): VirtualGatewayListener {\n    return new VirtualGatewayListenerImpl(Protocol.GRPC, options.healthCheck, options.port, options.tls, options.connectionPool);\n  }\n\n  /**\n   * Called when the GatewayListener type is initialized. Can be used to enforce\n   * mutual exclusivity\n   */\n  public abstract bind(scope: Construct): VirtualGatewayListenerConfig;\n}\n\n/**\n * Represents the properties needed to define an HTTP Listener for a VirtualGateway\n */\nclass VirtualGatewayListenerImpl extends VirtualGatewayListener {\n\n  constructor(private readonly protocol: Protocol,\n    private readonly healthCheck: HealthCheck | undefined,\n    private readonly port: number = 8080,\n    private readonly listenerTls: ListenerTlsOptions | undefined,\n    private readonly connectionPool: ConnectionPoolConfig | undefined) {\n    super();\n  }\n\n  /**\n   * Called when the GatewayListener type is initialized. Can be used to enforce\n   * mutual exclusivity\n   */\n  public bind(scope: Construct): VirtualGatewayListenerConfig {\n    return {\n      listener: {\n        portMapping: {\n          port: this.port,\n          protocol: this.protocol,\n        },\n        healthCheck: this.healthCheck?.bind(scope, { defaultPort: this.port }).virtualGatewayHealthCheck,\n        tls: renderListenerTlsOptions(scope, this.listenerTls),\n        connectionPool: this.connectionPool ? renderConnectionPool(this.connectionPool, this.protocol) : undefined,\n      },\n    };\n  }\n}\n\nfunction renderConnectionPool(connectionPool: ConnectionPoolConfig, listenerProtocol: Protocol):\nCfnVirtualGateway.VirtualGatewayConnectionPoolProperty {\n  return ({\n    [listenerProtocol]: {\n      maxRequests: connectionPool?.maxRequests !== undefined ? connectionPool.maxRequests : undefined,\n      maxConnections: connectionPool?.maxConnections !== undefined ? connectionPool.maxConnections : undefined,\n      maxPendingRequests: connectionPool?.maxPendingRequests !== undefined ? connectionPool.maxPendingRequests : undefined,\n    },\n  });\n}\n"],
  "mappings": "6NAIA,QAAA,QAAA,iBAAA,EACA,oBAAA,QAAA,qBAAA,EAkFA,MAAsB,sBAAsB,OAI5B,MAAK,QAAsC,CAAA,EAAE,4FAClD,GAAI,4BAA2B,oBAAA,SAAS,KAAM,QAAQ,YAAa,QAAQ,KAAM,QAAQ,IAAK,QAAQ,cAAc,QAM/G,OAAM,QAAuC,CAAA,EAAE,6FACpD,GAAI,4BAA2B,oBAAA,SAAS,MAAO,QAAQ,YAAa,QAAQ,KAAM,QAAQ,IAAK,QAAQ,cAAc,QAMhH,MAAK,QAAsC,CAAA,EAAE,4FAClD,GAAI,4BAA2B,oBAAA,SAAS,KAAM,QAAQ,YAAa,QAAQ,KAAM,QAAQ,IAAK,QAAQ,cAAc,GAnB/H,QAAA,uBAAA,gJAgCA,MAAM,kCAAmC,uBAAsB,CAE7D,YAA6B,SACV,YACA,KAAe,KACf,YACA,eAAgD,CACjE,MAAK,EALsB,KAAA,SAAA,SACV,KAAA,YAAA,YACA,KAAA,KAAA,KACA,KAAA,YAAA,YACA,KAAA,eAAA,eAQZ,KAAK,MAAgB,QAC1B,MAAO,CACL,SAAU,CACR,YAAa,CACX,KAAM,KAAK,KACX,SAAU,KAAK,UAEjB,YAAW,IAAE,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,KAAK,MAAO,CAAE,YAAa,KAAK,IAAI,CAAE,EAAE,0BACvE,IAAK,QAAA,yBAAyB,MAAO,KAAK,WAAW,EACrD,eAAgB,KAAK,eAAiB,qBAAqB,KAAK,eAAgB,KAAK,QAAQ,EAAI,UAMzG,8BAA8B,eAAsC,iBAA0B,CAE5F,MAAQ,EACL,kBAAmB,CAClB,YAAa,iBAAc,KAAA,OAAd,eAAgB,eAAgB,OAAY,eAAe,YAAc,OACtF,eAAgB,iBAAc,KAAA,OAAd,eAAgB,kBAAmB,OAAY,eAAe,eAAiB,OAC/F,mBAAoB,iBAAc,KAAA,OAAd,eAAgB,sBAAuB,OAAY,eAAe,mBAAqB,QAGjH",
  "names": []
}
