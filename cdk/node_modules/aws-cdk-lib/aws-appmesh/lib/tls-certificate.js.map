{
  "version": 3,
  "sources": ["tls-certificate.ts"],
  "sourcesContent": ["import * as acm from '../../aws-certificatemanager';\nimport { Construct } from 'constructs';\nimport { CfnVirtualNode } from './appmesh.generated';\n\n/**\n * A wrapper for the tls config returned by {@link TlsCertificate.bind}\n */\nexport interface TlsCertificateConfig {\n  /**\n   * The CFN shape for a TLS certificate\n   */\n  readonly tlsCertificate: CfnVirtualNode.ListenerTlsCertificateProperty,\n}\n\n/**\n * Represents a TLS certificate\n */\nexport abstract class TlsCertificate {\n  /**\n   * Returns an File TLS Certificate\n   */\n  public static file(certificateChainPath: string, privateKeyPath: string): MutualTlsCertificate {\n    return new FileTlsCertificate(certificateChainPath, privateKeyPath);\n  }\n\n  /**\n   * Returns an ACM TLS Certificate\n   */\n  public static acm(certificate: acm.ICertificate): TlsCertificate {\n    return new AcmTlsCertificate(certificate);\n  }\n\n  /**\n   * Returns an SDS TLS Certificate\n   */\n  public static sds(secretName: string): MutualTlsCertificate {\n    return new SdsTlsCertificate(secretName);\n  }\n\n  /**\n   * Returns TLS certificate based provider.\n   */\n  public abstract bind(_scope: Construct): TlsCertificateConfig;\n\n}\n\n/**\n * Represents a TLS certificate that is supported for mutual TLS authentication.\n */\nexport abstract class MutualTlsCertificate extends TlsCertificate {\n  // TypeScript uses structural typing, so we need a property different from TlsCertificate\n  protected readonly differentiator = false;\n}\n\n/**\n * Represents a ACM provided TLS certificate\n */\nclass AcmTlsCertificate extends TlsCertificate {\n  /**\n   * The ARN of the ACM certificate\n   */\n  readonly acmCertificate: acm.ICertificate;\n\n  constructor(certificate: acm.ICertificate) {\n    super();\n    this.acmCertificate = certificate;\n  }\n\n  bind(_scope: Construct): TlsCertificateConfig {\n    return {\n      tlsCertificate: {\n        acm: {\n          certificateArn: this.acmCertificate.certificateArn,\n        },\n      },\n    };\n  }\n}\n\n/**\n * Represents a file provided TLS certificate\n */\nclass FileTlsCertificate extends MutualTlsCertificate {\n  /**\n   * The file path of the certificate chain file.\n   */\n  readonly certificateChain: string;\n\n  /**\n   * The file path of the private key file.\n   */\n  readonly privateKey: string;\n\n  constructor(certificateChainPath: string, privateKeyPath: string) {\n    super();\n    this.certificateChain = certificateChainPath;\n    this.privateKey = privateKeyPath;\n  }\n\n  bind(_scope: Construct): TlsCertificateConfig {\n    return {\n      tlsCertificate: {\n        file: {\n          certificateChain: this.certificateChain,\n          privateKey: this.privateKey,\n        },\n      },\n    };\n  }\n}\n\n/**\n * Represents a SDS provided TLS certificate\n */\nclass SdsTlsCertificate extends MutualTlsCertificate {\n  /**\n   * The name of the secret requested from the Secret Discovery Service provider.\n   */\n  readonly secretName: string;\n\n  constructor(secretName: string) {\n    super();\n    this.secretName = secretName;\n  }\n\n  bind(_scope: Construct): TlsCertificateConfig {\n    return {\n      tlsCertificate: {\n        sds: {\n          secretName: this.secretName,\n        },\n      },\n    };\n  }\n}\n"],
  "mappings": "qPAiBA,MAAsB,cAAc,OAIpB,MAAK,qBAA8B,eAAsB,CACrE,MAAO,IAAI,oBAAmB,qBAAsB,cAAc,QAMtD,KAAI,YAA6B,6FACtC,GAAI,mBAAkB,WAAW,QAM5B,KAAI,WAAkB,CAClC,MAAO,IAAI,mBAAkB,UAAU,GAnB3C,QAAA,eAAA,wHAgCA,MAAsB,4BAA6B,eAAc,CAAjE,aAAA,qBAEqB,KAAA,eAAiB,IAFtC,QAAA,qBAAA,0IAQA,MAAM,yBAA0B,eAAc,CAM5C,YAAY,YAA6B,CACvC,MAAK,EACL,KAAK,eAAiB,YAGxB,KAAK,OAAiB,CACpB,MAAO,CACL,eAAgB,CACd,IAAK,CACH,eAAgB,KAAK,eAAe,mBAU9C,MAAM,0BAA2B,qBAAoB,CAWnD,YAAY,qBAA8B,eAAsB,CAC9D,MAAK,EACL,KAAK,iBAAmB,qBACxB,KAAK,WAAa,eAGpB,KAAK,OAAiB,CACpB,MAAO,CACL,eAAgB,CACd,KAAM,CACJ,iBAAkB,KAAK,iBACvB,WAAY,KAAK,eAU3B,MAAM,yBAA0B,qBAAoB,CAMlD,YAAY,WAAkB,CAC5B,MAAK,EACL,KAAK,WAAa,WAGpB,KAAK,OAAiB,CACpB,MAAO,CACL,eAAgB,CACd,IAAK,CACH,WAAY,KAAK",
  "names": []
}
