{
  "version": 3,
  "sources": ["ip-target.ts"],
  "sourcesContent": ["import * as elbv2 from '../../aws-elasticloadbalancingv2';\n\n/**\n * An IP address that is a target for load balancing.\n *\n * Specify IP addresses from the subnets of the virtual private cloud (VPC) for\n * the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and\n * 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify\n * publicly routable IP addresses.\n *\n * If you register a target of this type, you are responsible for making\n * sure the load balancer's security group can send packets to the IP address.\n */\nexport class IpTarget implements elbv2.IApplicationLoadBalancerTarget, elbv2.INetworkLoadBalancerTarget {\n  /**\n   * Create a new IPAddress target\n   *\n   * The availabilityZone parameter determines whether the target receives\n   * traffic from the load balancer nodes in the specified Availability Zone\n   * or from all enabled Availability Zones for the load balancer.\n   *\n   * This parameter is not supported if the target type of the target group\n   * is instance. If the IP address is in a subnet of the VPC for the target\n   * group, the Availability Zone is automatically detected and this\n   * parameter is optional. If the IP address is outside the VPC, this\n   * parameter is required.\n   *\n   * With an Application Load Balancer, if the IP address is outside the VPC\n   * for the target group, the only supported value is all.\n   *\n   * Default is automatic.\n   *\n   * @param ipAddress The IP Address to load balance to\n   * @param port Override the group's default port\n   * @param availabilityZone Availability zone to send traffic from\n   */\n  constructor(private readonly ipAddress: string, private readonly port?: number, private readonly availabilityZone?: string) {\n  }\n\n  /**\n   * Register this instance target with a load balancer\n   *\n   * Don't call this, it is called automatically when you add the target to a\n   * load balancer.\n   */\n  public attachToApplicationTargetGroup(targetGroup: elbv2.IApplicationTargetGroup): elbv2.LoadBalancerTargetProps {\n    return this.attach(targetGroup);\n  }\n\n  /**\n   * Register this instance target with a load balancer\n   *\n   * Don't call this, it is called automatically when you add the target to a\n   * load balancer.\n   */\n  public attachToNetworkTargetGroup(targetGroup: elbv2.INetworkTargetGroup): elbv2.LoadBalancerTargetProps {\n    return this.attach(targetGroup);\n  }\n\n  private attach(_targetGroup: elbv2.ITargetGroup): elbv2.LoadBalancerTargetProps {\n    return {\n      targetType: elbv2.TargetType.IP,\n      targetJson: { id: this.ipAddress, port: this.port, availabilityZone: this.availabilityZone },\n    };\n  }\n}\n"],
  "mappings": "+MAAA,MAAA,QAAA,kCAAA,EAaA,MAAa,QAAQ,CAuBnB,YAA6B,UAAoC,KAAgC,iBAAyB,CAA7F,KAAA,UAAA,UAAoC,KAAA,KAAA,KAAgC,KAAA,iBAAA,iBAS1F,+BAA+B,YAA0C,4GACvE,KAAK,OAAO,WAAW,EASzB,2BAA2B,YAAsC,wGAC/D,KAAK,OAAO,WAAW,EAGxB,OAAO,aAAgC,CAC7C,MAAO,CACL,WAAY,MAAM,WAAW,GAC7B,WAAY,CAAE,GAAI,KAAK,UAAW,KAAM,KAAK,KAAM,iBAAkB,KAAK,gBAAgB,IAjDhG,QAAA,SAAA",
  "names": []
}
