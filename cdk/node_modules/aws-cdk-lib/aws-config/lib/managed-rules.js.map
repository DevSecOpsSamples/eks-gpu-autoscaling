{
  "version": 3,
  "sources": ["managed-rules.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as sns from '../../aws-sns';\nimport { Duration, Lazy, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { ManagedRule, ManagedRuleIdentifiers, ResourceType, RuleProps, RuleScope } from './rule';\n\n/**\n * Construction properties for a AccessKeysRotated\n */\nexport interface AccessKeysRotatedProps extends RuleProps {\n  /**\n   * The maximum number of days within which the access keys must be rotated.\n   *\n   * @default Duration.days(90)\n   */\n  readonly maxAge?: Duration;\n}\n\n/**\n * Checks whether the active access keys are rotated within the number of days\n * specified in `maxAge`.\n *\n * @see https://docs.aws.amazon.com/config/latest/developerguide/access-keys-rotated.html\n *\n * @resource AWS::Config::ConfigRule\n */\nexport class AccessKeysRotated extends ManagedRule {\n  constructor(scope: Construct, id: string, props: AccessKeysRotatedProps = {}) {\n    super(scope, id, {\n      ...props,\n      identifier: ManagedRuleIdentifiers.ACCESS_KEYS_ROTATED,\n      inputParameters: {\n        ...props.maxAge\n          ? {\n            maxAccessKeyAge: props.maxAge.toDays(),\n          }\n          : {},\n      },\n    });\n  }\n}\n\n/**\n * Construction properties for a CloudFormationStackDriftDetectionCheck\n */\nexport interface CloudFormationStackDriftDetectionCheckProps extends RuleProps {\n  /**\n   * Whether to check only the stack where this rule is deployed.\n   *\n   * @default false\n   */\n  readonly ownStackOnly?: boolean;\n\n  /**\n   * The IAM role to use for this rule. It must have permissions to detect drift\n   * for AWS CloudFormation stacks. Ensure to attach `config.amazonaws.com` trusted\n   * permissions and `ReadOnlyAccess` policy permissions. For specific policy permissions,\n   * refer to https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html.\n   *\n   * @default - A role will be created\n   */\n  readonly role?: iam.IRole;\n}\n\n/**\n * Checks whether your CloudFormation stacks' actual configuration differs, or\n * has drifted, from its expected configuration.\n *\n * @see https://docs.aws.amazon.com/config/latest/developerguide/cloudformation-stack-drift-detection-check.html\n *\n * @resource AWS::Config::ConfigRule\n */\nexport class CloudFormationStackDriftDetectionCheck extends ManagedRule {\n  private readonly role: iam.IRole;\n\n  constructor(scope: Construct, id: string, props: CloudFormationStackDriftDetectionCheckProps = {}) {\n    super(scope, id, {\n      ...props,\n      identifier: ManagedRuleIdentifiers.CLOUDFORMATION_STACK_DRIFT_DETECTION_CHECK,\n      inputParameters: {\n        cloudformationRoleArn: Lazy.string({ produce: () => this.role.roleArn }),\n      },\n    });\n\n    this.ruleScope = RuleScope.fromResource( ResourceType.CLOUDFORMATION_STACK, props.ownStackOnly ? Stack.of(this).stackId : undefined );\n\n    this.role = props.role || new iam.Role(this, 'Role', {\n      assumedBy: new iam.ServicePrincipal('config.amazonaws.com'),\n      managedPolicies: [\n        iam.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess'),\n      ],\n    });\n  }\n}\n\n/**\n * Construction properties for a CloudFormationStackNotificationCheck.\n */\nexport interface CloudFormationStackNotificationCheckProps extends RuleProps {\n  /**\n   * A list of allowed topics. At most 5 topics.\n   *\n   * @default - No topics.\n   */\n  readonly topics?: sns.ITopic[];\n}\n\n/**\n * Checks whether your CloudFormation stacks are sending event notifications to\n * a SNS topic. Optionally checks whether specified SNS topics are used.\n *\n * @see https://docs.aws.amazon.com/config/latest/developerguide/cloudformation-stack-notification-check.html\n *\n * @resource AWS::Config::ConfigRule\n */\nexport class CloudFormationStackNotificationCheck extends ManagedRule {\n  constructor(scope: Construct, id: string, props: CloudFormationStackNotificationCheckProps = {}) {\n    if (props.topics && props.topics.length > 5) {\n      throw new Error('At most 5 topics can be specified.');\n    }\n\n    super(scope, id, {\n      ...props,\n      identifier: ManagedRuleIdentifiers.CLOUDFORMATION_STACK_NOTIFICATION_CHECK,\n      inputParameters: props.topics && props.topics.reduce(\n        (params, topic, idx) => ({ ...params, [`snsTopic${idx + 1}`]: topic.topicArn }),\n        {},\n      ),\n      ruleScope: RuleScope.fromResources([ResourceType.CLOUDFORMATION_STACK]),\n    });\n  }\n}\n"],
  "mappings": "0TAAA,IAAA,QAAA,eAAA,EAEA,OAAA,QAAA,YAAA,EAEA,OAAA,QAAA,QAAA,EAsBA,MAAa,yBAA0B,QAAA,WAAW,CAChD,YAAY,MAAkB,GAAY,MAAgC,CAAA,EAAE,CAC1E,MAAM,MAAO,GAAI,IACZ,MACH,WAAY,OAAA,uBAAuB,oBACnC,gBAAiB,IACZ,MAAM,OACL,CACA,gBAAiB,MAAM,OAAO,OAAM,GAEpC,CAAA,GAEP,gFAZL,QAAA,kBAAA,gIA8CA,MAAa,8CAA+C,QAAA,WAAW,CAGrE,YAAY,MAAkB,GAAY,MAAqD,CAAA,EAAE,CAC/F,MAAM,MAAO,GAAI,IACZ,MACH,WAAY,OAAA,uBAAuB,2CACnC,gBAAiB,CACf,sBAAuB,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,KAAK,OAAO,CAAE,GAE1E,oGAED,KAAK,UAAY,OAAA,UAAU,aAAc,OAAA,aAAa,qBAAsB,MAAM,aAAe,OAAA,MAAM,GAAG,IAAI,EAAE,QAAU,MAAS,EAEnI,KAAK,KAAO,MAAM,MAAQ,GAAI,KAAI,KAAK,KAAM,OAAQ,CACnD,UAAW,GAAI,KAAI,iBAAiB,sBAAsB,EAC1D,gBAAiB,CACf,IAAI,cAAc,yBAAyB,gBAAgB,GAE9D,GAnBL,QAAA,uCAAA,+LA2CA,MAAa,4CAA6C,QAAA,WAAW,CACnE,YAAY,MAAkB,GAAY,MAAmD,CAAA,EAAE,CAC7F,mGAAI,MAAM,QAAU,MAAM,OAAO,OAAS,EACxC,KAAM,IAAI,OAAM,oCAAoC,EAGtD,MAAM,MAAO,GAAI,IACZ,MACH,WAAY,OAAA,uBAAuB,wCACnC,gBAAiB,MAAM,QAAU,MAAM,OAAO,OAC5C,CAAC,OAAQ,MAAO,MAAS,KAAK,QAAS,WAAW,IAAM,KAAM,MAAM,QAAQ,GAC5E,CAAA,CAAE,EAEJ,UAAW,OAAA,UAAU,cAAc,CAAC,OAAA,aAAa,oBAAoB,CAAC,EACvE,GAdL,QAAA,qCAAA",
  "names": []
}
