{
  "version": 3,
  "sources": ["_files.ts"],
  "sourcesContent": ["import * as codepipeline from '../../../../aws-codepipeline';\nimport { IGrantable } from '../../../../aws-iam';\nimport * as s3assets from '../../../../aws-s3-assets';\nimport { Construct } from 'constructs';\n\n/**\n * Additional files to use in a shell script\n */\nexport abstract class Files {\n  /**\n   * Use the files from a CodePipeline artifact\n   */\n  public static fromArtifact(artifact: codepipeline.Artifact): Files {\n    if (!artifact) {\n      // Typechecking may mess up\n      throw new Error('Files.fromArtifact(): input artifact is required, got undefined');\n    }\n\n    return {\n      bind: () => ({ artifact }),\n      grantRead: () => { /* Not necessary */ },\n    };\n  }\n\n  /**\n   * Create a new asset to bundle up the files in a directory on disk\n   */\n  public static fromDirectory(directoryPath: string): Files {\n    let realFiles: Files;\n    return {\n      bind(scope: Construct) {\n        realFiles = Files.fromAsset(new s3assets.Asset(scope, directoryPath, {\n          path: directoryPath,\n        }));\n\n        return realFiles.bind(scope);\n      },\n      grantRead(grantee: IGrantable) {\n        if (!realFiles) {\n          throw new Error('bind() must be called first');\n        }\n        realFiles.grantRead(grantee);\n      },\n    };\n  }\n\n  /**\n   * Use an existing asset as a file source\n   */\n  public static fromAsset(asset: s3assets.Asset): Files {\n    return {\n      bind: () => ({\n        commands: [\n          `echo \"Downloading additional files from ${asset.s3ObjectUrl}\"`,\n          `aws s3 cp ${asset.s3ObjectUrl} /tmp/dl.zip`,\n          'unzip /tmp/dl.zip -d .',\n        ],\n      }),\n      grantRead: (grantee) => asset.grantRead(grantee),\n    };\n  }\n\n  protected constructor() {\n  }\n\n  /**\n   * Bind the Files to a usage location\n   */\n  public abstract bind(scope: Construct): FilesConfig;\n\n  /**\n   * Grant read permissions to the file set to the given grantable\n   *\n   * Must be called after bind().\n   */\n\n  public abstract grantRead(grantee: IGrantable): void;\n}\n\n/**\n * Config for a Files source\n */\nexport interface FilesConfig {\n  /**\n   * CodePipeline artifact to add to the set of input artifacts for the project\n   *\n   * @default - No artifact\n   */\n  readonly artifact?: codepipeline.Artifact;\n\n  /**\n   * Commands to add to the set of commands for the project\n   *\n   * @default - No commands\n   */\n  readonly commands?: string[];\n}\n"],
  "mappings": "yFAEA,KAAA,UAAA,QAAA,2BAAA,EAMA,MAAsB,KAAK,OAIX,cAAa,SAA+B,CACxD,GAAI,CAAC,SAEH,KAAM,IAAI,OAAM,iEAAiE,EAGnF,MAAO,CACL,KAAM,IAAO,EAAE,QAAQ,GACvB,UAAW,IAAK,CAAuB,SAO7B,eAAc,cAAqB,CAC/C,GAAI,WACJ,MAAO,CACL,KAAK,MAAgB,CACnB,iBAAY,MAAM,UAAU,GAAI,UAAS,MAAM,MAAO,cAAe,CACnE,KAAM,cACP,CAAC,EAEK,UAAU,KAAK,KAAK,CAC7B,EACA,UAAU,QAAmB,CAC3B,GAAI,CAAC,UACH,KAAM,IAAI,OAAM,6BAA6B,EAE/C,UAAU,UAAU,OAAO,CAC7B,SAOU,WAAU,MAAqB,CAC3C,MAAO,CACL,KAAM,IAAO,EACX,SAAU,CACR,2CAA2C,MAAM,eACjD,aAAa,MAAM,0BACnB,4BAGJ,UAAW,AAAC,SAAY,MAAM,UAAU,OAAO,GAInD,aAAA,GAtDF,QAAA,MAAA",
  "names": []
}
