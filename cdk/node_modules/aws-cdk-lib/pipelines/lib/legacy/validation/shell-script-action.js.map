{
  "version": 3,
  "sources": ["shell-script-action.ts"],
  "sourcesContent": ["import * as codebuild from '../../../../aws-codebuild';\nimport * as codepipeline from '../../../../aws-codepipeline';\nimport * as codepipeline_actions from '../../../../aws-codepipeline-actions';\nimport * as ec2 from '../../../../aws-ec2';\nimport * as events from '../../../../aws-events';\nimport * as iam from '../../../../aws-iam';\nimport { StackOutput } from '../stage';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Properties for ShellScriptAction\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface ShellScriptActionProps {\n  /**\n   * Name of the validation action in the pipeline\n   */\n  readonly actionName: string;\n\n  /**\n   * Stack outputs to make available as environment variables\n   *\n   * @default - No outputs used\n   */\n  readonly useOutputs?: Record<string, StackOutput>;\n\n  /**\n   * Commands to run\n   */\n  readonly commands: string[];\n\n  /**\n   * Bash options to set at the start of the script\n   *\n   * @default '-eu' (errexit and nounset)\n   */\n  readonly bashOptions?: string;\n\n  /**\n   * Additional artifacts to use as input for the CodeBuild project\n   *\n   * You can use these files to load more complex test sets into the\n   * shellscript build environment.\n   *\n   * The files artifact given here will be unpacked into the current\n   * working directory, the other ones will be unpacked into directories\n   * which are available through the environment variables\n   * $CODEBUILD_SRC_DIR_<artifactName>.\n   *\n   * The CodeBuild job must have at least one input artifact, so you\n   * must provide either at least one additional artifact here or one\n   * stack output using `useOutput`.\n   *\n   * @default - No additional artifacts\n   */\n  readonly additionalArtifacts?: codepipeline.Artifact[];\n\n  /**\n   * The CodeBuild environment where scripts are executed.\n   *\n   * @default LinuxBuildImage.STANDARD_5_0\n   */\n  readonly environment?: codebuild.BuildEnvironment\n\n  /**\n   * Environment variables to send into build\n   *\n   * @default - No additional environment variables\n   */\n  readonly environmentVariables?: Record<string, codebuild.BuildEnvironmentVariable>;\n\n  /**\n   * RunOrder for this action\n   *\n   * Use this to sequence the shell script after the deployments.\n   *\n   * The default value is 100 so you don't have to supply the value if you just\n   * want to run this after the application stacks have been deployed, and you\n   * don't have more than 100 stacks.\n   *\n   * @default 100\n   */\n  readonly runOrder?: number;\n\n  /**\n   * Additional policy statements to add to the execution role\n   *\n   * @default - No policy statements\n   */\n  readonly rolePolicyStatements?: iam.PolicyStatement[];\n\n  /**\n   * The VPC where to execute the specified script.\n   *\n   * @default - No VPC\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * Which subnets to use.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default - All private subnets.\n   */\n  readonly subnetSelection?: ec2.SubnetSelection\n\n  /**\n   * Which security group to associate with the script's project network interfaces.\n   * If no security group is identified, one will be created automatically.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default - Security group will be automatically created.\n   *\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n}\n\n/**\n * Validate a revision using shell commands\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport class ShellScriptAction implements codepipeline.IAction, iam.IGrantable {\n  private _project?: codebuild.IProject;\n\n  private _action?: codepipeline_actions.CodeBuildAction;\n  private _actionProperties: codepipeline.ActionProperties;\n\n  constructor(private readonly props: ShellScriptActionProps) {\n    // A number of actionProperties get read before bind() is even called (so before we\n    // have made the Project and can construct the actual CodeBuildAction)\n    //\n    // - actionName\n    // - resource\n    // - region\n    // - category\n    // - role\n    // - owner\n    this._actionProperties = {\n      actionName: props.actionName,\n      category: codepipeline.ActionCategory.BUILD,\n      provider: 'CodeBuild',\n      artifactBounds: { minInputs: 0, maxInputs: 5, minOutputs: 0, maxOutputs: 5 },\n      inputs: [],\n      outputs: [],\n    };\n\n    if (Object.keys(props.useOutputs ?? {}).length + (props.additionalArtifacts ?? []).length === 0) {\n      throw new Error('You must supply either \\'useOutputs\\' or \\'additionalArtifacts\\', since a CodeBuild Action must always have at least one input artifact.');\n    }\n  }\n\n  /**\n   * The CodeBuild Project's principal\n   */\n  public get grantPrincipal(): iam.IPrincipal {\n    return this.project.grantPrincipal;\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public get actionProperties(): codepipeline.ActionProperties {\n    return this._actionProperties;\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public bind(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions): codepipeline.ActionConfig {\n    const inputs = new Array<codepipeline.Artifact>();\n    inputs.push(...this.props.additionalArtifacts ?? []);\n\n    const envVarCommands = new Array<string>();\n\n    const bashOptions = this.props.bashOptions ?? '-eu';\n    if (bashOptions) {\n      envVarCommands.push(`set ${bashOptions}`);\n    }\n    for (const [varName, output] of Object.entries(this.props.useOutputs ?? {})) {\n      const outputArtifact = output.artifactFile;\n\n      // Add the artifact to the list of inputs, if it's not in there already. Determine\n      // the location where CodeBuild is going to stick it based on whether it's the first (primary)\n      // input or an 'extra input', then parse.\n      let artifactIndex = inputs.findIndex(a => a.artifactName === outputArtifact.artifact.artifactName);\n      if (artifactIndex === -1) {\n        artifactIndex = inputs.push(outputArtifact.artifact) - 1;\n      }\n      const dirEnv = artifactIndex === 0 ? 'CODEBUILD_SRC_DIR' : `CODEBUILD_SRC_DIR_${outputArtifact.artifact.artifactName}`;\n      envVarCommands.push(`export ${varName}=\"$(node -pe 'require(process.env.${dirEnv} + \"/${outputArtifact.fileName}\")[\"${output.outputName}\"]')\"`);\n    }\n\n    this._project = new codebuild.PipelineProject(scope, 'Project', {\n      environment: this.props.environment || { buildImage: codebuild.LinuxBuildImage.STANDARD_5_0 },\n      vpc: this.props.vpc,\n      securityGroups: this.props.securityGroups,\n      subnetSelection: this.props.subnetSelection,\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              ...envVarCommands,\n              ...this.props.commands,\n            ],\n          },\n        },\n      }),\n    });\n    for (const statement of this.props.rolePolicyStatements ?? []) {\n      this._project.addToRolePolicy(statement);\n    }\n\n    this._action = new codepipeline_actions.CodeBuildAction({\n      actionName: this.props.actionName,\n      input: inputs[0],\n      extraInputs: inputs.slice(1),\n      runOrder: this.props.runOrder ?? 100,\n      project: this._project,\n      environmentVariables: this.props.environmentVariables,\n    });\n    // Replace the placeholder actionProperties at the last minute\n    this._actionProperties = this._action.actionProperties;\n\n    return this._action.bind(scope, stage, options);\n  }\n\n  /**\n   * Project generated to run the shell script in\n   */\n  public get project(): codebuild.IProject {\n    if (!this._project) {\n      throw new Error('Project becomes available after ShellScriptAction has been bound to a stage');\n    }\n    return this._project;\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule {\n    if (!this._action) {\n      throw new Error('Need bind() first');\n    }\n\n    return this._action.onStateChange(name, target, options);\n  }\n}\n"],
  "mappings": "6JAAA,UAAA,QAAA,2BAAA,EACA,aAAA,QAAA,8BAAA,EACA,qBAAA,QAAA,sCAAA,EA8HA,MAAa,iBAAiB,CAM5B,YAA6B,MAA6B,WAmBxD,GAnB2B,KAAA,MAAA,MAU3B,KAAK,kBAAoB,CACvB,WAAY,MAAM,WAClB,SAAU,aAAa,eAAe,MACtC,SAAU,YACV,eAAgB,CAAE,UAAW,EAAG,UAAW,EAAG,WAAY,EAAG,WAAY,CAAC,EAC1E,OAAQ,CAAA,EACR,QAAS,CAAA,GAGP,OAAO,KAAI,IAAC,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,CAAA,CAAE,EAAE,OAAS,KAAC,MAAM,uBAAmB,MAAA,KAAA,OAAA,GAAI,CAAA,GAAI,SAAW,EAC5F,KAAM,IAAI,OAAM,sIAA0I,KAOnJ,iBAAc,CACvB,MAAO,MAAK,QAAQ,kBAMX,mBAAgB,CACzB,MAAO,MAAK,kBAMP,KAAK,MAAkB,MAA4B,QAAuC,oBAC/F,KAAM,QAAS,GAAI,OACnB,OAAO,KAAK,GAAA,IAAG,KAAK,MAAM,uBAAmB,MAAA,KAAA,OAAA,GAAI,CAAA,CAAE,EAEnD,KAAM,gBAAiB,GAAI,OAErB,YAAW,IAAG,KAAK,MAAM,eAAW,MAAA,KAAA,OAAA,GAAI,MAC9C,AAAI,aACF,eAAe,KAAK,OAAO,aAAa,EAE1C,SAAW,CAAC,QAAS,SAAW,QAAO,QAAO,IAAC,KAAK,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,CAAA,CAAE,EAAG,CAC3E,KAAM,gBAAiB,OAAO,aAK9B,GAAI,eAAgB,OAAO,UAAU,GAAK,EAAE,eAAiB,eAAe,SAAS,YAAY,EACjG,AAAI,gBAAkB,IACpB,eAAgB,OAAO,KAAK,eAAe,QAAQ,EAAI,GAEzD,KAAM,QAAS,gBAAkB,EAAI,oBAAsB,qBAAqB,eAAe,SAAS,eACxG,eAAe,KAAK,UAAU,4CAA4C,cAAc,eAAe,eAAe,OAAO,iBAAiB,EAGhJ,KAAK,SAAW,GAAI,WAAU,gBAAgB,MAAO,UAAW,CAC9D,YAAa,KAAK,MAAM,aAAe,CAAE,WAAY,UAAU,gBAAgB,YAAY,EAC3F,IAAK,KAAK,MAAM,IAChB,eAAgB,KAAK,MAAM,eAC3B,gBAAiB,KAAK,MAAM,gBAC5B,UAAW,UAAU,UAAU,WAAW,CACxC,QAAS,MACT,OAAQ,CACN,MAAO,CACL,SAAU,CACR,GAAG,eACH,GAAG,KAAK,MAAM,YAIrB,EACF,EACD,SAAW,aAAS,IAAI,KAAK,MAAM,wBAAoB,MAAA,KAAA,OAAA,GAAI,CAAA,EACzD,KAAK,SAAS,gBAAgB,SAAS,EAGzC,YAAK,QAAU,GAAI,sBAAqB,gBAAgB,CACtD,WAAY,KAAK,MAAM,WACvB,MAAO,OAAO,GACd,YAAa,OAAO,MAAM,CAAC,EAC3B,SAAQ,IAAE,KAAK,MAAM,YAAQ,MAAA,KAAA,OAAA,GAAI,IACjC,QAAS,KAAK,SACd,qBAAsB,KAAK,MAAM,qBAClC,EAED,KAAK,kBAAoB,KAAK,QAAQ,iBAE/B,KAAK,QAAQ,KAAK,MAAO,MAAO,OAAO,KAMrC,UAAO,CAChB,GAAI,CAAC,KAAK,SACR,KAAM,IAAI,OAAM,6EAA6E,EAE/F,MAAO,MAAK,SAMP,cAAc,KAAc,OAA6B,QAA0B,CACxF,GAAI,CAAC,KAAK,QACR,KAAM,IAAI,OAAM,mBAAmB,EAGrC,MAAO,MAAK,QAAQ,cAAc,KAAM,OAAQ,OAAO,GA5H3D,QAAA,kBAAA",
  "names": []
}
