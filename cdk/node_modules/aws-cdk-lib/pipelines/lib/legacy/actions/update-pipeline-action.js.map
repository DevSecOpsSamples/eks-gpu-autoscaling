{
  "version": 3,
  "sources": ["update-pipeline-action.ts"],
  "sourcesContent": ["import * as codebuild from '../../../../aws-codebuild';\nimport * as codepipeline from '../../../../aws-codepipeline';\nimport * as cpactions from '../../../../aws-codepipeline-actions';\nimport * as events from '../../../../aws-events';\nimport * as iam from '../../../../aws-iam';\nimport { Stack } from '../../../../core';\nimport { Construct } from 'constructs';\nimport { dockerCredentialsInstallCommands, DockerCredential, DockerCredentialUsage } from '../../docker-credentials';\nimport { embeddedAsmPath } from '../../private/construct-internals';\n\n/**\n * Props for the UpdatePipelineAction\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface UpdatePipelineActionProps {\n  /**\n   * The CodePipeline artifact that holds the Cloud Assembly.\n   */\n  readonly cloudAssemblyInput: codepipeline.Artifact;\n\n  /**\n   * Name of the pipeline stack\n   *\n   * @deprecated - Use `pipelineStackHierarchicalId` instead.\n   * @default - none\n   */\n  readonly pipelineStackName?: string;\n\n  /**\n   * Hierarchical id of the pipeline stack\n   */\n  readonly pipelineStackHierarchicalId: string;\n\n  /**\n   * Version of CDK CLI to 'npm install'.\n   *\n   * @default - Latest version\n   */\n  readonly cdkCliVersion?: string;\n\n  /**\n   * Name of the CodeBuild project\n   *\n   * @default - Automatically generated\n   */\n  readonly projectName?: string;\n\n  /**\n   * Whether the build step should run in privileged mode.\n   *\n   * @default - false\n   */\n  readonly privileged?: boolean\n\n  /**\n   * Docker registries and associated credentials necessary during the pipeline\n   * self-update stage.\n   *\n   * @default []\n   */\n  readonly dockerCredentials?: DockerCredential[];\n\n  /**\n   * Custom BuildSpec that is merged with generated one\n   *\n   * @default - none\n   */\n  readonly buildSpec?: codebuild.BuildSpec;\n}\n\n/**\n * Action to self-mutate the pipeline\n *\n * Creates a CodeBuild project which will use the CDK CLI\n * to deploy the pipeline stack.\n *\n * You do not need to instantiate this action -- it will automatically\n * be added by the pipeline.\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport class UpdatePipelineAction extends Construct implements codepipeline.IAction {\n  private readonly action: codepipeline.IAction;\n\n  constructor(scope: Construct, id: string, props: UpdatePipelineActionProps) {\n    super(scope, id);\n\n    const installSuffix = props.cdkCliVersion ? `@${props.cdkCliVersion}` : '';\n\n    const stackIdentifier = props.pipelineStackHierarchicalId ?? props.pipelineStackName;\n    const buildSpec = codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      phases: {\n        install: {\n          commands: [\n            `npm install -g aws-cdk${installSuffix}`,\n            ...dockerCredentialsInstallCommands(DockerCredentialUsage.SELF_UPDATE, props.dockerCredentials),\n          ],\n        },\n        build: {\n          commands: [\n            // Cloud Assembly is in *current* directory.\n            `cdk -a ${embeddedAsmPath(scope)} deploy ${stackIdentifier} --require-approval=never --verbose`,\n          ],\n        },\n      },\n    });\n    const selfMutationProject = new codebuild.PipelineProject(this, 'SelfMutation', {\n      projectName: props.projectName,\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.STANDARD_5_0,\n        privileged: props.privileged ?? false,\n      },\n      buildSpec: props.buildSpec ? codebuild.mergeBuildSpecs(props.buildSpec, buildSpec) : buildSpec,\n    });\n\n    // allow the self-mutating project permissions to assume the bootstrap Action role\n    selfMutationProject.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['sts:AssumeRole'],\n      resources: [`arn:*:iam::${Stack.of(this).account}:role/*`],\n      conditions: {\n        'ForAnyValue:StringEquals': {\n          'iam:ResourceTag/aws-cdk:bootstrap-role': ['image-publishing', 'file-publishing', 'deploy'],\n        },\n      },\n    }));\n    selfMutationProject.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['cloudformation:DescribeStacks'],\n      resources: ['*'], // this is needed to check the status of the bootstrap stack when doing `cdk deploy`\n    }));\n    // S3 checks for the presence of the ListBucket permission\n    selfMutationProject.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['s3:ListBucket'],\n      resources: ['*'],\n    }));\n    (props.dockerCredentials ?? []).forEach(reg => reg.grantRead(selfMutationProject, DockerCredentialUsage.SELF_UPDATE));\n\n    this.action = new cpactions.CodeBuildAction({\n      actionName: 'SelfMutate',\n      input: props.cloudAssemblyInput,\n      project: selfMutationProject,\n      // Add this purely so that the pipeline will selfupdate if the CLI version changes\n      environmentVariables: props.cdkCliVersion ? {\n        CDK_CLI_VERSION: { value: props.cdkCliVersion },\n      } : undefined,\n    });\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public bind(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions): codepipeline.ActionConfig {\n    return this.action.bind(scope, stage, options);\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule {\n    return this.action.onStateChange(name, target, options);\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public get actionProperties(): codepipeline.ActionProperties {\n    // FIXME: I have had to make this class a Construct, because:\n    //\n    // - It needs access to the Construct tree, because it is going to add a `PipelineProject`.\n    // - I would have liked to have done that in bind(), however,\n    // - `actionProperties` (this method) is called BEFORE bind() is called, and by that point I\n    //   don't have the \"inner\" Action yet to forward the call to.\n    //\n    // I've therefore had to construct the inner CodeBuildAction in the constructor, which requires making this\n    // Action a Construct.\n    //\n    // Combined with how non-intuitive it is to make the \"StackDeployAction\", I feel there is something\n    // wrong with the Action abstraction here.\n    return this.action.actionProperties;\n  }\n}\n"],
  "mappings": "gKAAA,UAAA,QAAA,2BAAA,EAEA,UAAA,QAAA,sCAAA,EAEA,IAAA,QAAA,qBAAA,EACA,OAAA,QAAA,kBAAA,EACA,aAAA,QAAA,YAAA,EACA,qBAAA,QAAA,0BAAA,EACA,sBAAA,QAAA,mCAAA,EA0EA,MAAa,4BAA6B,cAAA,SAAS,CAGjD,YAAY,MAAkB,GAAY,MAAgC,cACxE,MAAM,MAAO,EAAE,EAEf,KAAM,eAAgB,MAAM,cAAgB,IAAI,MAAM,gBAAkB,GAElE,gBAAe,IAAG,MAAM,+BAA2B,MAAA,KAAA,OAAA,GAAI,MAAM,kBAC7D,UAAY,UAAU,UAAU,WAAW,CAC/C,QAAS,MACT,OAAQ,CACN,QAAS,CACP,SAAU,CACR,yBAAyB,gBACzB,GAAG,qBAAA,iCAAiC,qBAAA,sBAAsB,YAAa,MAAM,iBAAiB,IAGlG,MAAO,CACL,SAAU,CAER,UAAU,sBAAA,gBAAgB,KAAK,YAAY,wDAIlD,EACK,oBAAsB,GAAI,WAAU,gBAAgB,KAAM,eAAgB,CAC9E,YAAa,MAAM,YACnB,YAAa,CACX,WAAY,UAAU,gBAAgB,aACtC,WAAU,IAAE,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,IAElC,UAAW,MAAM,UAAY,UAAU,gBAAgB,MAAM,UAAW,SAAS,EAAI,UACtF,EAGD,oBAAoB,gBAAgB,GAAI,KAAI,gBAAgB,CAC1D,QAAS,CAAC,gBAAgB,EAC1B,UAAW,CAAC,cAAc,OAAA,MAAM,GAAG,IAAI,EAAE,gBAAgB,EACzD,WAAY,CACV,2BAA4B,CAC1B,yCAA0C,CAAC,mBAAoB,kBAAmB,QAAQ,IAG/F,CAAC,EACF,oBAAoB,gBAAgB,GAAI,KAAI,gBAAgB,CAC1D,QAAS,CAAC,+BAA+B,EACzC,UAAW,CAAC,GAAG,EAChB,CAAC,EAEF,oBAAoB,gBAAgB,GAAI,KAAI,gBAAgB,CAC1D,QAAS,CAAC,eAAe,EACzB,UAAW,CAAC,GAAG,EAChB,CAAC,EACF,KAAC,MAAM,qBAAiB,MAAA,KAAA,OAAA,GAAI,CAAA,GAAI,QAAQ,KAAO,IAAI,UAAU,oBAAqB,qBAAA,sBAAsB,WAAW,CAAC,EAEpH,KAAK,OAAS,GAAI,WAAU,gBAAgB,CAC1C,WAAY,aACZ,MAAO,MAAM,mBACb,QAAS,oBAET,qBAAsB,MAAM,cAAgB,CAC1C,gBAAiB,CAAE,MAAO,MAAM,aAAa,GAC3C,OACL,EAMI,KAAK,MAAkB,MAA4B,QAAuC,CAC/F,MAAO,MAAK,OAAO,KAAK,MAAO,MAAO,OAAO,EAMxC,cAAc,KAAc,OAA6B,QAA0B,CACxF,MAAO,MAAK,OAAO,cAAc,KAAM,OAAQ,OAAO,KAM7C,mBAAgB,CAazB,MAAO,MAAK,OAAO,kBAjGvB,QAAA,qBAAA",
  "names": []
}
