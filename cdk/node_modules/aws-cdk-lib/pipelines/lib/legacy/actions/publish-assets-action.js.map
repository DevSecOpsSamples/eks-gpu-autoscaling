{
  "version": 3,
  "sources": ["publish-assets-action.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as codebuild from '../../../../aws-codebuild';\nimport * as codepipeline from '../../../../aws-codepipeline';\nimport * as codepipeline_actions from '../../../../aws-codepipeline-actions';\nimport * as ec2 from '../../../../aws-ec2';\nimport * as events from '../../../../aws-events';\nimport * as iam from '../../../../aws-iam';\nimport { ISynthesisSession, Lazy, Stack, attachCustomSynthesis } from '../../../../core';\nimport { IDependable, Construct } from 'constructs';\nimport { AssetType } from '../../blueprint/asset-type';\nimport { toPosixPath } from '../../private/fs';\n\n/**\n * Props for a PublishAssetsAction\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface PublishAssetsActionProps {\n  /**\n   * Name of publishing action\n   */\n  readonly actionName: string;\n\n  /**\n   * The CodePipeline artifact that holds the Cloud Assembly.\n   */\n  readonly cloudAssemblyInput: codepipeline.Artifact;\n\n  /**\n   * AssetType we're publishing\n   */\n  readonly assetType: AssetType;\n\n  /**\n   * Version of CDK CLI to 'npm install'.\n   *\n   * @default - Latest version\n   */\n  readonly cdkCliVersion?: string;\n\n  /**\n   * Name of the CodeBuild project\n   *\n   * @default - Automatically generated\n   */\n  readonly projectName?: string;\n\n  /**\n   * Role to use for CodePipeline and CodeBuild to build and publish the assets.\n   *\n   * @default - Automatically generated\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * Any Dependable construct that the CodeBuild project needs to take a dependency on.\n   *\n   * @default - none\n   */\n  readonly dependable?: IDependable;\n\n  /**\n   * The VPC where to execute the PublishAssetsAction.\n   *\n   * @default - No VPC\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * Which subnets to use.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default - All private subnets.\n   */\n  readonly subnetSelection?: ec2.SubnetSelection;\n\n\n  /**\n   * Custom BuildSpec that is merged with generated one\n   *\n   * @default - none\n   */\n  readonly buildSpec?: codebuild.BuildSpec;\n\n  /**\n   * Use a file buildspec written to the cloud assembly instead of an inline buildspec.\n   * This prevents size limitation errors as inline specs have a max length of 25600 characters\n   *\n   * @default false\n   */\n  readonly createBuildspecFile?: boolean;\n\n  /**\n   * Additional commands to run before installing cdk-assert\n   * Use this to setup proxies or npm mirrors\n   *\n   * @default -\n   */\n  readonly preInstallCommands?: string[];\n}\n\n/**\n * Action to publish an asset in the pipeline\n *\n * Creates a CodeBuild project which will use the CDK CLI\n * to prepare and publish the asset.\n *\n * You do not need to instantiate this action -- it will automatically\n * be added by the pipeline when you add stacks that use assets.\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport class PublishAssetsAction extends Construct implements codepipeline.IAction {\n  private readonly action: codepipeline.IAction;\n  private readonly commands = new Array<string>();\n\n  private readonly buildSpec: codebuild.BuildSpec;\n\n  constructor(scope: Construct, id: string, private readonly props: PublishAssetsActionProps) {\n    super(scope, id);\n\n    const installSuffix = props.cdkCliVersion ? `@${props.cdkCliVersion}` : '';\n    const installCommand = `npm install -g cdk-assets${installSuffix}`;\n\n    const buildSpec = codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      phases: {\n        install: {\n          commands: props.preInstallCommands ? [...props.preInstallCommands, installCommand] : installCommand,\n        },\n        build: {\n          commands: Lazy.list({ produce: () => this.commands }),\n        },\n      },\n    });\n    this.buildSpec = props.buildSpec ? codebuild.mergeBuildSpecs(props.buildSpec, buildSpec) : buildSpec;\n\n    const project = new codebuild.PipelineProject(this, 'Default', {\n      projectName: this.props.projectName,\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.STANDARD_5_0,\n        privileged: (props.assetType === AssetType.DOCKER_IMAGE) ? true : undefined,\n      },\n      vpc: props.vpc,\n      subnetSelection: props.subnetSelection,\n      buildSpec: props.createBuildspecFile ? codebuild.BuildSpec.fromSourceFilename(this.getBuildSpecFileName()) : this.buildSpec,\n      role: props.role,\n    });\n\n    if (props.dependable) {\n      project.node.addDependency(props.dependable);\n    }\n\n    this.action = new codepipeline_actions.CodeBuildAction({\n      actionName: props.actionName,\n      project,\n      input: this.props.cloudAssemblyInput,\n      role: props.role,\n      // Add this purely so that the pipeline will selfupdate if the CLI version changes\n      environmentVariables: props.cdkCliVersion ? {\n        CDK_CLI_VERSION: { value: props.cdkCliVersion },\n      } : undefined,\n    });\n\n    attachCustomSynthesis(this, {\n      onSynthesize: this._onSynth.bind(this),\n    });\n  }\n\n  private getBuildSpecFileName(): string {\n    return `buildspec-assets-${this.node.path.replace(new RegExp('/', 'g'), '-')}.yaml`;\n  }\n\n  private _onSynth(session: ISynthesisSession): void {\n    if (this.props.createBuildspecFile) {\n      const specFile = path.join(session.outdir, this.getBuildSpecFileName());\n      fs.writeFileSync(specFile, Stack.of(this).resolve(this.buildSpec.toBuildSpec()), { encoding: 'utf-8' });\n    }\n  }\n\n\n  /**\n   * Add a single publishing command\n   *\n   * Manifest path should be relative to the root Cloud Assembly.\n   */\n  public addPublishCommand(relativeManifestPath: string, assetSelector: string) {\n    const command = `cdk-assets --path \"${toPosixPath(relativeManifestPath)}\" --verbose publish \"${assetSelector}\"`;\n    if (!this.commands.includes(command)) {\n      this.commands.push(command);\n    }\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public bind(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return this.action.bind(scope, stage, options);\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule {\n    return this.action.onStateChange(name, target, options);\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public get actionProperties(): codepipeline.ActionProperties {\n    // FIXME: I have had to make this class a Construct, because:\n    //\n    // - It needs access to the Construct tree, because it is going to add a `PipelineProject`.\n    // - I would have liked to have done that in bind(), however,\n    // - `actionProperties` (this method) is called BEFORE bind() is called, and by that point I\n    //   don't have the \"inner\" Action yet to forward the call to.\n    //\n    // I've therefore had to construct the inner CodeBuildAction in the constructor, which requires making this\n    // Action a Construct.\n    //\n    // Combined with how non-intuitive it is to make the \"StackDeployAction\", I feel there is something\n    // wrong with the Action abstraction here.\n    return this.action.actionProperties;\n  }\n}\n"],
  "mappings": "+JAAA,GAAA,QAAA,IAAA,EACA,KAAA,QAAA,MAAA,EACA,UAAA,QAAA,2BAAA,EAEA,qBAAA,QAAA,sCAAA,EAIA,OAAA,QAAA,kBAAA,EACA,aAAA,QAAA,YAAA,EACA,aAAA,QAAA,4BAAA,EACA,KAAA,QAAA,kBAAA,EAuGA,MAAa,2BAA4B,cAAA,SAAS,CAMhD,YAAY,MAAkB,GAA6B,MAA+B,CACxF,MAAM,MAAO,EAAE,EAD0C,KAAA,MAAA,MAJ1C,KAAA,SAAW,GAAI,OAQ9B,KAAM,gBAAiB,4BADD,MAAM,cAAgB,IAAI,MAAM,gBAAkB,KAGlE,UAAY,UAAU,UAAU,WAAW,CAC/C,QAAS,MACT,OAAQ,CACN,QAAS,CACP,SAAU,MAAM,mBAAqB,CAAC,GAAG,MAAM,mBAAoB,cAAc,EAAI,gBAEvF,MAAO,CACL,SAAU,OAAA,KAAK,KAAK,CAAE,QAAS,IAAM,KAAK,QAAQ,CAAE,IAGzD,EACD,KAAK,UAAY,MAAM,UAAY,UAAU,gBAAgB,MAAM,UAAW,SAAS,EAAI,UAE3F,KAAM,SAAU,GAAI,WAAU,gBAAgB,KAAM,UAAW,CAC7D,YAAa,KAAK,MAAM,YACxB,YAAa,CACX,WAAY,UAAU,gBAAgB,aACtC,WAAa,MAAM,YAAc,aAAA,UAAU,aAAgB,GAAO,QAEpE,IAAK,MAAM,IACX,gBAAiB,MAAM,gBACvB,UAAW,MAAM,oBAAsB,UAAU,UAAU,mBAAmB,KAAK,qBAAoB,CAAE,EAAI,KAAK,UAClH,KAAM,MAAM,KACb,EAED,AAAI,MAAM,YACR,QAAQ,KAAK,cAAc,MAAM,UAAU,EAG7C,KAAK,OAAS,GAAI,sBAAqB,gBAAgB,CACrD,WAAY,MAAM,WAClB,QACA,MAAO,KAAK,MAAM,mBAClB,KAAM,MAAM,KAEZ,qBAAsB,MAAM,cAAgB,CAC1C,gBAAiB,CAAE,MAAO,MAAM,aAAa,GAC3C,OACL,EAED,OAAA,sBAAsB,KAAM,CAC1B,aAAc,KAAK,SAAS,KAAK,IAAI,EACtC,EAGK,sBAAoB,CAC1B,MAAO,oBAAoB,KAAK,KAAK,KAAK,QAAQ,GAAI,QAAO,IAAK,GAAG,EAAG,GAAG,SAGrE,SAAS,QAA0B,CACzC,GAAI,KAAK,MAAM,oBAAqB,CAClC,KAAM,UAAW,KAAK,KAAK,QAAQ,OAAQ,KAAK,qBAAoB,CAAE,EACtE,GAAG,cAAc,SAAU,OAAA,MAAM,GAAG,IAAI,EAAE,QAAQ,KAAK,UAAU,YAAW,CAAE,EAAG,CAAE,SAAU,OAAO,CAAE,GAUnG,kBAAkB,qBAA8B,cAAqB,CAC1E,KAAM,SAAU,sBAAsB,KAAA,YAAY,oBAAoB,yBAAyB,iBAC/F,AAAK,KAAK,SAAS,SAAS,OAAO,GACjC,KAAK,SAAS,KAAK,OAAO,EAOvB,KAAK,MAAkB,MAA4B,QAAuC,CAE/F,MAAO,MAAK,OAAO,KAAK,MAAO,MAAO,OAAO,EAMxC,cAAc,KAAc,OAA6B,QAA0B,CACxF,MAAO,MAAK,OAAO,cAAc,KAAM,OAAQ,OAAO,KAM7C,mBAAgB,CAazB,MAAO,MAAK,OAAO,kBAhHvB,QAAA,oBAAA",
  "names": []
}
