{
  "version": 3,
  "sources": ["deploy-cdk-stack-action.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as codepipeline from '../../../../aws-codepipeline';\nimport * as cpactions from '../../../../aws-codepipeline-actions';\nimport * as events from '../../../../aws-events';\nimport * as iam from '../../../../aws-iam';\nimport { Aws, CfnCapabilities, Stack } from '../../../../core';\nimport * as cxapi from '../../../../cx-api';\nimport { Construct, Node } from 'constructs';\nimport { appOf, assemblyBuilderOf } from '../../private/construct-internals';\nimport { toPosixPath } from '../../private/fs';\n\n/**\n * Customization options for a DeployCdkStackAction\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface DeployCdkStackActionOptions {\n  /**\n   * Base name of the action\n   *\n   * @default stackName\n   */\n  readonly baseActionName?: string;\n\n  /**\n   * The CodePipeline artifact that holds the Cloud Assembly.\n   */\n  readonly cloudAssemblyInput: codepipeline.Artifact;\n\n  /**\n   * Run order for the Prepare action\n   *\n   * @default 1\n   */\n  readonly prepareRunOrder?: number;\n\n  /**\n   * Run order for the Execute action\n   *\n   * @default - prepareRunOrder + 1\n   */\n  readonly executeRunOrder?: number;\n\n  /**\n   * Artifact to write Stack Outputs to\n   *\n   * @default - No outputs\n   */\n  readonly output?: codepipeline.Artifact;\n\n  /**\n   * Filename in output to write Stack outputs to\n   *\n   * @default - Required when 'output' is set\n   */\n  readonly outputFileName?: string;\n\n  /**\n   * Name of the change set to create and deploy\n   *\n   * @default 'PipelineChange'\n   */\n  readonly changeSetName?: string;\n}\n\n/**\n * Properties for a DeployCdkStackAction\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface DeployCdkStackActionProps extends DeployCdkStackActionOptions {\n  /**\n   * Relative path of template in the input artifact\n   */\n  readonly templatePath: string;\n\n  /**\n   * Role for the action to assume\n   *\n   * This controls the account to deploy into\n   */\n  readonly actionRole: iam.IRole;\n\n  /**\n   * The name of the stack that should be created/updated\n   */\n  readonly stackName: string;\n\n  /**\n   * Role to execute CloudFormation under\n   *\n   * @default - Execute CloudFormation using the action role\n   */\n  readonly cloudFormationExecutionRole?: iam.IRole;\n\n  /**\n   * Region to deploy into\n   *\n   * @default - Same region as pipeline\n   */\n  readonly region?: string;\n\n  /**\n   * Artifact ID for the stack deployed here\n   *\n   * Used for pipeline order checking.\n   *\n   * @default - Order will not be checked\n   */\n  readonly stackArtifactId?: string;\n\n  /**\n   * Artifact ID for the stacks this stack depends on\n   *\n   * Used for pipeline order checking.\n   *\n   * @default - No dependencies\n   */\n  readonly dependencyStackArtifactIds?: string[];\n\n  /**\n   * Template configuration path relative to the input artifact\n   *\n   * @default - No template configuration\n   */\n  readonly templateConfigurationPath?: string;\n}\n\n/**\n * Options for the 'fromStackArtifact' operation\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface CdkStackActionFromArtifactOptions extends DeployCdkStackActionOptions {\n  /**\n   * The name of the stack that should be created/updated\n   *\n   * @default - Same as stack artifact\n   */\n  readonly stackName?: string;\n}\n\n/**\n * Action to deploy a CDK Stack\n *\n * Adds two CodePipeline Actions to the pipeline: one to create a ChangeSet\n * and one to execute it.\n *\n * You do not need to instantiate this action yourself -- it will automatically\n * be added by the pipeline when you add stack artifacts or entire stages.\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport class DeployCdkStackAction implements codepipeline.IAction {\n  /**\n   * Construct a DeployCdkStackAction from a Stack artifact\n   */\n  public static fromStackArtifact(scope: Construct, artifact: cxapi.CloudFormationStackArtifact, options: CdkStackActionFromArtifactOptions) {\n    if (!artifact.assumeRoleArn) {\n      throw new Error(`Stack '${artifact.stackName}' does not have deployment role information; use the 'DefaultStackSynthesizer' synthesizer, or set the '@aws-cdk/core:newStyleStackSynthesis' context key.`);\n    }\n\n    const artRegion = artifact.environment.region;\n    const region = artRegion === Stack.of(scope).region || artRegion === cxapi.UNKNOWN_REGION ? undefined : artRegion;\n    const artAccount = artifact.environment.account;\n    const account = artAccount === Stack.of(scope).account || artAccount === cxapi.UNKNOWN_ACCOUNT ? undefined : artAccount;\n\n    const actionRole = roleFromPlaceholderArn(scope, region, account, artifact.assumeRoleArn);\n    const cloudFormationExecutionRole = roleFromPlaceholderArn(scope, region, account, artifact.cloudFormationExecutionRoleArn);\n\n    // We need the path of the template relative to the root Cloud Assembly\n    // It should be easier to get this, but for now it is what it is.\n    const appAsmRoot = assemblyBuilderOf(appOf(scope)).outdir;\n    const fullTemplatePath = path.join(artifact.assembly.directory, artifact.templateFile);\n\n    let fullConfigPath;\n    if (Object.keys(artifact.tags).length > 0) {\n      fullConfigPath = `${fullTemplatePath}.config.json`;\n\n      // Write the template configuration file (for parameters into CreateChangeSet call that\n      // cannot be configured any other way). They must come from a file, and there's unfortunately\n      // no better hook to write this file (`construct.onSynthesize()` would have been the prime candidate\n      // but that is being deprecated--and DeployCdkStackAction isn't even a construct).\n      writeTemplateConfiguration(fullConfigPath, {\n        Tags: artifact.tags,\n      });\n    }\n\n    return new DeployCdkStackAction({\n      actionRole,\n      cloudFormationExecutionRole,\n      templatePath: toPosixPath(path.relative(appAsmRoot, fullTemplatePath)),\n      templateConfigurationPath: fullConfigPath ? toPosixPath(path.relative(appAsmRoot, fullConfigPath)) : undefined,\n      region,\n      stackArtifactId: artifact.id,\n      dependencyStackArtifactIds: artifact.dependencies.filter(isStackArtifact).map(s => s.id),\n      stackName: options.stackName ?? artifact.stackName,\n      ...options,\n    });\n  }\n\n  /**\n   * The runorder for the prepare action\n   */\n  public readonly prepareRunOrder: number;\n\n  /**\n   * The runorder for the execute action\n   */\n  public readonly executeRunOrder: number;\n\n  /**\n   * Name of the deployed stack\n   */\n  public readonly stackName: string;\n\n  /**\n   * Artifact id of the artifact this action was based on\n   */\n  public readonly stackArtifactId?: string;\n\n  /**\n   * Artifact ids of the artifact this stack artifact depends on\n   */\n  public readonly dependencyStackArtifactIds: string[];\n\n  private readonly prepareChangeSetAction: cpactions.CloudFormationCreateReplaceChangeSetAction;\n  private readonly executeChangeSetAction: cpactions.CloudFormationExecuteChangeSetAction;\n\n  constructor(props: DeployCdkStackActionProps) {\n    if (props.output && !props.outputFileName) {\n      throw new Error('If \\'output\\' is set, \\'outputFileName\\' is also required');\n    }\n\n    this.stackArtifactId = props.stackArtifactId;\n    this.dependencyStackArtifactIds = props.dependencyStackArtifactIds ?? [];\n\n    this.prepareRunOrder = props.prepareRunOrder ?? 1;\n    this.executeRunOrder = props.executeRunOrder ?? this.prepareRunOrder + 1;\n    this.stackName = props.stackName;\n    const baseActionName = props.baseActionName ?? this.stackName;\n    const changeSetName = props.changeSetName ?? 'PipelineChange';\n\n    this.prepareChangeSetAction = new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: `${baseActionName}.Prepare`,\n      changeSetName,\n      runOrder: this.prepareRunOrder,\n      stackName: this.stackName,\n      templatePath: props.cloudAssemblyInput.atPath(props.templatePath),\n      adminPermissions: false,\n      role: props.actionRole,\n      deploymentRole: props.cloudFormationExecutionRole,\n      region: props.region,\n      cfnCapabilities: [CfnCapabilities.NAMED_IAM, CfnCapabilities.AUTO_EXPAND],\n      templateConfiguration: props.templateConfigurationPath ? props.cloudAssemblyInput.atPath(props.templateConfigurationPath) : undefined,\n    });\n    this.executeChangeSetAction = new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: `${baseActionName}.Deploy`,\n      changeSetName,\n      runOrder: this.executeRunOrder,\n      stackName: this.stackName,\n      role: props.actionRole,\n      region: props.region,\n      outputFileName: props.outputFileName,\n      output: props.output,\n    });\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public bind(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    stage.addAction(this.prepareChangeSetAction);\n\n    return this.executeChangeSetAction.bind(scope, stage, options);\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule {\n    return this.executeChangeSetAction.onStateChange(name, target, options);\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public get actionProperties(): codepipeline.ActionProperties {\n    return this.executeChangeSetAction.actionProperties;\n  }\n}\n\nfunction roleFromPlaceholderArn(scope: Construct, region: string | undefined,\n  account: string | undefined, arn: string): iam.IRole;\nfunction roleFromPlaceholderArn(scope: Construct, region: string | undefined,\n  account: string | undefined, arn: string | undefined): iam.IRole | undefined;\nfunction roleFromPlaceholderArn(scope: Construct, region: string | undefined,\n  account: string | undefined, arn: string | undefined): iam.IRole | undefined {\n\n  if (!arn) { return undefined; }\n\n  // Use placeholdered arn as construct ID.\n  const id = arn;\n\n  // https://github.com/aws/aws-cdk/issues/7255\n  let existingRole = Node.of(scope).tryFindChild(`ImmutableRole${id}`) as iam.IRole;\n  if (existingRole) { return existingRole; }\n  // For when #7255 is fixed.\n  existingRole = Node.of(scope).tryFindChild(id) as iam.IRole;\n  if (existingRole) { return existingRole; }\n\n  const arnToImport = cxapi.EnvironmentPlaceholders.replace(arn, {\n    region: region ?? Aws.REGION,\n    accountId: account ?? Aws.ACCOUNT_ID,\n    partition: Aws.PARTITION,\n  });\n  return iam.Role.fromRoleArn(scope, id, arnToImport, { mutable: false, addGrantsToResources: true });\n}\n\n/**\n * Options for CdkDeployAction.fromStackArtifact\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface FromStackArtifactOptions {\n  /**\n   * The CodePipeline artifact that holds the Cloud Assembly.\n   */\n  readonly cloudAssemblyInput: codepipeline.Artifact;\n\n  /**\n   * Run order for the 2 actions that will be created\n   *\n   * @default 1\n   */\n  readonly prepareRunOrder?: number;\n\n  /**\n   * Run order for the Execute action\n   *\n   * @default - prepareRunOrder + 1\n   */\n  readonly executeRunOrder?: number;\n\n  /**\n   * Artifact to write Stack Outputs to\n   *\n   * @default - No outputs\n   */\n  readonly output?: codepipeline.Artifact;\n\n  /**\n   * Filename in output to write Stack outputs to\n   *\n   * @default - Required when 'output' is set\n   */\n  readonly outputFileName?: string;\n}\n\nfunction isStackArtifact(a: cxapi.CloudArtifact): a is cxapi.CloudFormationStackArtifact {\n  // instanceof is too risky, and we're at a too late stage to properly fix.\n  // return a instanceof cxapi.CloudFormationStackArtifact;\n  return a.constructor.name === 'CloudFormationStackArtifact';\n}\n\n/**\n * Template configuration in a CodePipeline\n *\n * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html#w2ab1c13c17c15\n */\ninterface TemplateConfiguration {\n  readonly Parameters?: Record<string, string>;\n  readonly Tags?: Record<string, string>;\n  readonly StackPolicy?: {\n    readonly Statements: Array<Record<string, string>>;\n  };\n}\n\n/**\n * Write template configuration to the given file\n */\nfunction writeTemplateConfiguration(filename: string, config: TemplateConfiguration) {\n  fs.writeFileSync(filename, JSON.stringify(config, undefined, 2), { encoding: 'utf-8' });\n}\n"],
  "mappings": "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",
  "names": []
}
