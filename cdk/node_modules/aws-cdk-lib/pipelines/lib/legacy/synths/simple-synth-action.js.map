{
  "version": 3,
  "sources": ["simple-synth-action.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\nimport * as path from 'path';\nimport * as codebuild from '../../../../aws-codebuild';\nimport * as codepipeline from '../../../../aws-codepipeline';\nimport * as codepipeline_actions from '../../../../aws-codepipeline-actions';\nimport * as ec2 from '../../../../aws-ec2';\nimport * as events from '../../../../aws-events';\nimport * as iam from '../../../../aws-iam';\nimport { Stack } from '../../../../core';\nimport { dockerCredentialsInstallCommands, DockerCredential, DockerCredentialUsage } from '../../docker-credentials';\nimport { toPosixPath } from '../../private/fs';\nimport { copyEnvironmentVariables, filterEmpty } from './_util';\n\nconst DEFAULT_OUTPUT_DIR = 'cdk.out';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Configuration options for a SimpleSynth\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface SimpleSynthOptions {\n  /**\n   * The source artifact of the CodePipeline\n   */\n  readonly sourceArtifact: codepipeline.Artifact;\n\n  /**\n   * The artifact where the CloudAssembly should be emitted\n   */\n  readonly cloudAssemblyArtifact: codepipeline.Artifact;\n\n  /**\n   * Environment variables to send into build\n   *\n   * NOTE: You may run into the 1000-character limit for the Action configuration if you have a large\n   * number of variables or if their names or values are very long.\n   * If you do, pass them to the underlying CodeBuild project directly in `environment` instead.\n   * However, you will not be able to use CodePipeline Variables in this case.\n   *\n   * @default - No additional environment variables\n   */\n  readonly environmentVariables?: Record<string, codebuild.BuildEnvironmentVariable>;\n\n  /**\n   * Environment variables to copy over from parent env\n   *\n   * These are environment variables that are being used by the build.\n   *\n   * @default - No environment variables copied\n   */\n  readonly copyEnvironmentVariables?: string[];\n\n  /**\n   * Name of the build action\n   *\n   * @default 'Synth'\n   */\n  readonly actionName?: string;\n\n  /**\n   * Name of the CodeBuild project\n   *\n   * @default - Automatically generated\n   */\n  readonly projectName?: string;\n\n  /**\n   * Build environment to use for CodeBuild job\n   *\n   * @default BuildEnvironment.LinuxBuildImage.STANDARD_5_0\n   */\n  readonly environment?: codebuild.BuildEnvironment;\n\n  /**\n   * Directory inside the source where package.json and cdk.json are located\n   *\n   * @default - Repository root\n   */\n  readonly subdirectory?: string;\n\n  /**\n   * Produce additional output artifacts after the build based on the given directories\n   *\n   * Can be used to produce additional artifacts during the build step,\n   * separate from the cloud assembly, which can be used further on in the\n   * pipeline.\n   *\n   * Directories are evaluated with respect to `subdirectory`.\n   *\n   * @default - No additional artifacts generated\n   */\n  readonly additionalArtifacts?: AdditionalArtifact[];\n\n  /**\n   * Policy statements to add to role used during the synth\n   *\n   * Can be used to add acces to a CodeArtifact repository etc.\n   *\n   * @default - No policy statements added to CodeBuild Project Role\n   */\n  readonly rolePolicyStatements?: iam.PolicyStatement[];\n\n  /**\n   * The VPC where to execute the SimpleSynth.\n   *\n   * @default - No VPC\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * Which subnets to use.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default - All private subnets.\n   */\n  readonly subnetSelection?: ec2.SubnetSelection;\n\n  /**\n   * custom BuildSpec that is merged with the generated one\n   *\n   * @default - none\n   */\n  readonly buildSpec?: codebuild.BuildSpec;\n}\n\n/**\n * Construction props for SimpleSynthAction\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface SimpleSynthActionProps extends SimpleSynthOptions {\n  /**\n   * The synth command\n   */\n  readonly synthCommand: string;\n\n  /**\n   * The install command\n   *\n   * If not provided by the build image or another dependency\n   * management tool, at least install the CDK CLI here using\n   * `npm install -g aws-cdk`.\n   *\n   * @default - No install required\n   * @deprecated Use `installCommands` instead\n   */\n  readonly installCommand?: string;\n\n  /**\n   * The build command\n   *\n   * If your programming language requires a compilation step, put the\n   * compilation command here.\n   *\n   * @default - No build required\n   * @deprecated Use `buildCommands` instead\n   */\n  readonly buildCommand?: string;\n\n  /**\n   * Install commands\n   *\n   * If not provided by the build image or another dependency\n   * management tool, at least install the CDK CLI here using\n   * `npm install -g aws-cdk`.\n   *\n   * @default - No install required\n   */\n  readonly installCommands?: string[];\n\n  /**\n   * The build commands\n   *\n   * If your programming language requires a compilation step, put the\n   * compilation command here.\n   *\n   * @default - No build required\n   */\n  readonly buildCommands?: string[];\n\n  /**\n   * Test commands\n   *\n   * These commands are run after the build commands but before the\n   * synth command.\n   *\n   * @default - No test commands\n   */\n  readonly testCommands?: string[];\n}\n\n/**\n * Specification of an additional artifact to generate\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface AdditionalArtifact {\n  /**\n   * Directory to be packaged\n   */\n  readonly directory: string;\n\n  /**\n   * Artifact to represent the build directory in the pipeline\n   */\n  readonly artifact: codepipeline.Artifact;\n}\n\n/**\n * A standard synth with a generated buildspec\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport class SimpleSynthAction implements codepipeline.IAction, iam.IGrantable {\n\n  /**\n   * Create a standard NPM synth action\n   *\n   * Uses `npm ci` to install dependencies and `npx cdk synth` to synthesize.\n   *\n   * If you need a build step, add `buildCommand: 'npm run build'`.\n   */\n  public static standardNpmSynth(options: StandardNpmSynthOptions) {\n    return new SimpleSynthAction({\n      ...options,\n      installCommand: options.installCommand ?? 'npm ci',\n      synthCommand: options.synthCommand ?? 'npx cdk synth',\n      vpc: options.vpc,\n      subnetSelection: options.subnetSelection,\n      environment: {\n        ...options.environment,\n        environmentVariables: {\n          // Need this in case the CDK CLI is not in the 'package.json' of the project,\n          // and 'npx' is going to download it; without this setting, 'npx' will not properly\n          // install the package into the root user's home directory\n          NPM_CONFIG_UNSAFE_PERM: { value: 'true' },\n          ...options.environment?.environmentVariables,\n        },\n      },\n    });\n  }\n\n  /**\n   * Create a standard Yarn synth action\n   *\n   * Uses `yarn install --frozen-lockfile` to install dependencies and `npx cdk synth` to synthesize.\n   *\n   * If you need a build step, add `buildCommand: 'yarn build'`.\n   */\n  public static standardYarnSynth(options: StandardYarnSynthOptions) {\n    return new SimpleSynthAction({\n      ...options,\n      installCommand: options.installCommand ?? 'yarn install --frozen-lockfile',\n      synthCommand: options.synthCommand ?? 'npx cdk synth',\n      vpc: options.vpc,\n      subnetSelection: options.subnetSelection,\n      environment: {\n        ...options.environment,\n        environmentVariables: {\n          // Need this in case the CDK CLI is not in the 'package.json' of the project,\n          // and 'npx' is going to download it; without this setting, 'npx' will not properly\n          // install the package into the root user's home directory\n          NPM_CONFIG_UNSAFE_PERM: { value: 'true' },\n          ...options.environment?.environmentVariables,\n        },\n      },\n    });\n  }\n\n  private _action?: codepipeline_actions.CodeBuildAction;\n  private _actionProperties: codepipeline.ActionProperties;\n  private _project?: codebuild.IProject;\n  private _dockerCredentials?: DockerCredential[];\n\n  constructor(private readonly props: SimpleSynthActionProps) {\n    // A number of actionProperties get read before bind() is even called (so before we\n    // have made the Project and can construct the actual CodeBuildAction)\n    //\n    // - actionName\n    // - resource\n    // - region\n    // - category\n    // - role\n    // - owner\n    this._actionProperties = {\n      actionName: props.actionName ?? 'Synth',\n      category: codepipeline.ActionCategory.BUILD,\n      provider: 'CodeBuild',\n      artifactBounds: { minInputs: 0, maxInputs: 5, minOutputs: 0, maxOutputs: 5 },\n      inputs: [props.sourceArtifact],\n      outputs: [props.cloudAssemblyArtifact, ...(props.additionalArtifacts ?? []).map(a => a.artifact)],\n    };\n\n    if (this.props.installCommand && this.props.installCommands) {\n      throw new Error('Pass either \\'installCommand\\' or \\'installCommands\\', but not both');\n    }\n\n    if (this.props.buildCommand && this.props.buildCommands) {\n      throw new Error('Pass either \\'buildCommand\\' or \\'buildCommands\\', but not both');\n    }\n\n    const addls = props.additionalArtifacts ?? [];\n    if (Object.keys(addls).length > 0) {\n      if (!props.cloudAssemblyArtifact.artifactName) {\n        throw new Error('You must give all output artifacts, including the \\'cloudAssemblyArtifact\\', names when using \\'additionalArtifacts\\'');\n      }\n      for (const addl of addls) {\n        if (!addl.artifact.artifactName) {\n          throw new Error('You must give all output artifacts passed to SimpleSynthAction names when using \\'additionalArtifacts\\'');\n        }\n      }\n    }\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public get actionProperties(): codepipeline.ActionProperties {\n    return this._actionProperties;\n  }\n\n  /**\n   * Project generated to run the synth command\n   */\n  public get project(): codebuild.IProject {\n    if (!this._project) {\n      throw new Error('Project becomes available after SimpleSynthAction has been bound to a stage');\n    }\n    return this._project;\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public bind(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions): codepipeline.ActionConfig {\n    const buildCommands = this.props.buildCommands ?? [this.props.buildCommand];\n    const installCommands = this.props.installCommands ?? [this.props.installCommand];\n    const testCommands = this.props.testCommands ?? [];\n    const synthCommand = this.props.synthCommand;\n\n    const environment = { buildImage: codebuild.LinuxBuildImage.STANDARD_5_0, ...this.props.environment };\n    const osType = (environment.buildImage instanceof codebuild.WindowsBuildImage)\n      ? ec2.OperatingSystemType.WINDOWS\n      : ec2.OperatingSystemType.LINUX;\n\n    const buildSpec = codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      phases: {\n        pre_build: {\n          commands: filterEmpty([\n            this.props.subdirectory ? `cd ${this.props.subdirectory}` : '',\n            ...installCommands,\n            ...dockerCredentialsInstallCommands(DockerCredentialUsage.SYNTH, this._dockerCredentials, osType),\n          ]),\n        },\n        build: {\n          commands: filterEmpty([\n            ...buildCommands,\n            ...testCommands,\n            synthCommand,\n          ]),\n        },\n      },\n      artifacts: renderArtifacts(this),\n    });\n\n    const environmentVariables = {\n      ...copyEnvironmentVariables(...this.props.copyEnvironmentVariables || []),\n    };\n\n    const mergedBuildSpec = this.props.buildSpec ? codebuild.mergeBuildSpecs(this.props.buildSpec, buildSpec) : buildSpec;\n\n    // A hash over the values that make the CodeBuild Project unique (and necessary\n    // to restart the pipeline if one of them changes). projectName is not necessary to include\n    // here because the pipeline will definitely restart if projectName changes.\n    // (Resolve tokens)\n    const projectConfigHash = hash(Stack.of(scope).resolve({\n      environment: serializeBuildEnvironment(environment),\n      buildSpecString: mergedBuildSpec.toBuildSpec(),\n      environmentVariables,\n    }));\n\n    const project = new codebuild.PipelineProject(scope, 'CdkBuildProject', {\n      projectName: this.props.projectName,\n      environment,\n      vpc: this.props.vpc,\n      subnetSelection: this.props.subnetSelection,\n      buildSpec: mergedBuildSpec,\n      environmentVariables,\n    });\n\n    if (this.props.rolePolicyStatements !== undefined) {\n      this.props.rolePolicyStatements.forEach(policyStatement => {\n        project.addToRolePolicy(policyStatement);\n      });\n    }\n\n    this._project = project;\n\n    this._dockerCredentials?.forEach(reg => reg.grantRead(project.grantPrincipal, DockerCredentialUsage.SYNTH));\n\n    this._action = new codepipeline_actions.CodeBuildAction({\n      actionName: this.actionProperties.actionName,\n      input: this.props.sourceArtifact,\n      outputs: [this.props.cloudAssemblyArtifact, ...(this.props.additionalArtifacts ?? []).map(a => a.artifact)],\n\n      // Inclusion of the hash here will lead to the pipeline structure for any changes\n      // made the config of the underlying CodeBuild Project.\n      // Hence, the pipeline will be restarted. This is necessary if the users\n      // adds (for example) build or test commands to the buildspec.\n      environmentVariables: {\n        ...this.props.environmentVariables,\n        _PROJECT_CONFIG_HASH: { value: projectConfigHash },\n      },\n      project,\n    });\n    this._actionProperties = this._action.actionProperties;\n\n    return this._action.bind(scope, stage, options);\n\n    function renderArtifacts(self: SimpleSynthAction) {\n      // save the generated files in the output artifact\n      // This part of the buildspec has to look completely different depending on whether we're\n      // using secondary artifacts or not.\n\n      const cloudAsmArtifactSpec = {\n        'base-directory': toPosixPath(path.join(self.props.subdirectory ?? '.', DEFAULT_OUTPUT_DIR)),\n        'files': '**/*',\n      };\n\n      if (self.props.additionalArtifacts) {\n        const secondary: Record<string, any> = {};\n        if (!self.props.cloudAssemblyArtifact.artifactName) {\n          throw new Error('When using additional output artifacts, you must also name the CloudAssembly artifact');\n        }\n        secondary[self.props.cloudAssemblyArtifact.artifactName] = cloudAsmArtifactSpec;\n        self.props.additionalArtifacts.forEach((art) => {\n          if (!art.artifact.artifactName) {\n            throw new Error('You must give the output artifact a name');\n          }\n          secondary[art.artifact.artifactName] = {\n            'base-directory': toPosixPath(path.join(self.props.subdirectory ?? '.', art.directory)),\n            'files': '**/*',\n          };\n        });\n\n        return { 'secondary-artifacts': secondary };\n      }\n\n      return cloudAsmArtifactSpec;\n    }\n  }\n\n  /**\n   * The CodeBuild Project's principal\n   */\n  public get grantPrincipal(): iam.IPrincipal {\n    return this.project.grantPrincipal;\n  }\n\n  /**\n   * Exists to implement IAction\n   */\n  public onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule {\n    if (!this._action) {\n      throw new Error('Need bind() first');\n    }\n\n    return this._action.onStateChange(name, target, options);\n  }\n\n  /**\n   * Associate one or more Docker registries and associated credentials with the synth action.\n   * This will be used to inject installation commands to set up `cdk-assets`,\n   * and grant read access to the credentials.\n   * @internal\n   */\n  public _addDockerCredentials(dockerCredentials: DockerCredential[]) {\n    this._dockerCredentials = dockerCredentials;\n  }\n}\n\n/**\n * Options for a convention-based synth using NPM\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface StandardNpmSynthOptions extends SimpleSynthOptions {\n  /**\n   * The install command\n   *\n   * @default 'npm ci'\n   */\n  readonly installCommand?: string;\n\n  /**\n   * The build command\n   *\n   * By default, we assume NPM projects are either written in JavaScript or are\n   * using `ts-node`, so don't need a build command.\n   *\n   * Otherwise, put the build command here, for example `npm run build`.\n   *\n   * @default - No build required\n   */\n  readonly buildCommand?: string;\n\n  /**\n   * The synth command\n   *\n   * @default 'npx cdk synth'\n   */\n  readonly synthCommand?: string;\n\n  /**\n   * Test commands\n   *\n   * These commands are run after the build commands but before the\n   * synth command.\n   *\n   * @default - No test commands\n   */\n  readonly testCommands?: string[];\n}\n\n/**\n * Options for a convention-based synth using Yarn\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface StandardYarnSynthOptions extends SimpleSynthOptions {\n  /**\n   * The install command\n   *\n   * @default 'yarn install --frozen-lockfile'\n   */\n  readonly installCommand?: string;\n\n  /**\n   * The build command\n   *\n   * By default, we assume NPM projects are either written in JavaScript or are\n   * using `ts-node`, so don't need a build command.\n   *\n   * Otherwise, put the build command here, for example `npm run build`.\n   *\n   * @default - No build required\n   */\n  readonly buildCommand?: string;\n\n  /**\n   * The synth command\n   *\n   * @default 'npx cdk synth'\n   */\n  readonly synthCommand?: string;\n\n  /**\n   * Test commands\n   *\n   * These commands are run after the build commands but before the\n   * synth command.\n   *\n   * @default - No test commands\n   */\n  readonly testCommands?: string[];\n}\n\nfunction hash<A>(obj: A) {\n  const d = crypto.createHash('sha256');\n  d.update(JSON.stringify(obj));\n  return d.digest('hex');\n}\n\n/**\n * Serialize a build environment to data (get rid of constructs & objects), so we can JSON.stringify it\n */\nfunction serializeBuildEnvironment(env: codebuild.BuildEnvironment) {\n  return {\n    privileged: env.privileged,\n    environmentVariables: env.environmentVariables,\n    type: env.buildImage?.type,\n    imageId: env.buildImage?.imageId,\n    computeType: env.computeType,\n    imagePullPrincipalType: env.buildImage?.imagePullPrincipalType,\n    secretsManagerArn: env.buildImage?.secretsManagerCredentials?.secretArn,\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
