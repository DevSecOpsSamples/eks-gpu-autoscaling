"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.SimpleSynthAction=void 0;const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),crypto=require("crypto"),path=require("path"),codebuild=require("../../../../aws-codebuild"),codepipeline=require("../../../../aws-codepipeline"),codepipeline_actions=require("../../../../aws-codepipeline-actions"),ec2=require("../../../../aws-ec2"),core_1=require("../../../../core"),docker_credentials_1=require("../../docker-credentials"),fs_1=require("../../private/fs"),_util_1=require("./_util"),DEFAULT_OUTPUT_DIR="cdk.out";class SimpleSynthAction{constructor(props){var _b,_c,_d;if(this.props=props,this._actionProperties={actionName:(_b=props.actionName)!==null&&_b!==void 0?_b:"Synth",category:codepipeline.ActionCategory.BUILD,provider:"CodeBuild",artifactBounds:{minInputs:0,maxInputs:5,minOutputs:0,maxOutputs:5},inputs:[props.sourceArtifact],outputs:[props.cloudAssemblyArtifact,...((_c=props.additionalArtifacts)!==null&&_c!==void 0?_c:[]).map(a=>a.artifact)]},this.props.installCommand&&this.props.installCommands)throw new Error("Pass either 'installCommand' or 'installCommands', but not both");if(this.props.buildCommand&&this.props.buildCommands)throw new Error("Pass either 'buildCommand' or 'buildCommands', but not both");const addls=(_d=props.additionalArtifacts)!==null&&_d!==void 0?_d:[];if(Object.keys(addls).length>0){if(!props.cloudAssemblyArtifact.artifactName)throw new Error("You must give all output artifacts, including the 'cloudAssemblyArtifact', names when using 'additionalArtifacts'");for(const addl of addls)if(!addl.artifact.artifactName)throw new Error("You must give all output artifacts passed to SimpleSynthAction names when using 'additionalArtifacts'")}}static standardNpmSynth(options){var _b,_c,_d;return new SimpleSynthAction({...options,installCommand:(_b=options.installCommand)!==null&&_b!==void 0?_b:"npm ci",synthCommand:(_c=options.synthCommand)!==null&&_c!==void 0?_c:"npx cdk synth",vpc:options.vpc,subnetSelection:options.subnetSelection,environment:{...options.environment,environmentVariables:{NPM_CONFIG_UNSAFE_PERM:{value:"true"},...(_d=options.environment)===null||_d===void 0?void 0:_d.environmentVariables}}})}static standardYarnSynth(options){var _b,_c,_d;return new SimpleSynthAction({...options,installCommand:(_b=options.installCommand)!==null&&_b!==void 0?_b:"yarn install --frozen-lockfile",synthCommand:(_c=options.synthCommand)!==null&&_c!==void 0?_c:"npx cdk synth",vpc:options.vpc,subnetSelection:options.subnetSelection,environment:{...options.environment,environmentVariables:{NPM_CONFIG_UNSAFE_PERM:{value:"true"},...(_d=options.environment)===null||_d===void 0?void 0:_d.environmentVariables}}})}get actionProperties(){return this._actionProperties}get project(){if(!this._project)throw new Error("Project becomes available after SimpleSynthAction has been bound to a stage");return this._project}bind(scope,stage,options){var _b,_c,_d,_e,_f;const buildCommands=(_b=this.props.buildCommands)!==null&&_b!==void 0?_b:[this.props.buildCommand],installCommands=(_c=this.props.installCommands)!==null&&_c!==void 0?_c:[this.props.installCommand],testCommands=(_d=this.props.testCommands)!==null&&_d!==void 0?_d:[],synthCommand=this.props.synthCommand,environment={buildImage:codebuild.LinuxBuildImage.STANDARD_5_0,...this.props.environment},osType=environment.buildImage instanceof codebuild.WindowsBuildImage?ec2.OperatingSystemType.WINDOWS:ec2.OperatingSystemType.LINUX,buildSpec=codebuild.BuildSpec.fromObject({version:"0.2",phases:{pre_build:{commands:_util_1.filterEmpty([this.props.subdirectory?`cd ${this.props.subdirectory}`:"",...installCommands,...docker_credentials_1.dockerCredentialsInstallCommands(docker_credentials_1.DockerCredentialUsage.SYNTH,this._dockerCredentials,osType)])},build:{commands:_util_1.filterEmpty([...buildCommands,...testCommands,synthCommand])}},artifacts:renderArtifacts(this)}),environmentVariables={..._util_1.copyEnvironmentVariables(...this.props.copyEnvironmentVariables||[])},mergedBuildSpec=this.props.buildSpec?codebuild.mergeBuildSpecs(this.props.buildSpec,buildSpec):buildSpec,projectConfigHash=hash(core_1.Stack.of(scope).resolve({environment:serializeBuildEnvironment(environment),buildSpecString:mergedBuildSpec.toBuildSpec(),environmentVariables})),project=new codebuild.PipelineProject(scope,"CdkBuildProject",{projectName:this.props.projectName,environment,vpc:this.props.vpc,subnetSelection:this.props.subnetSelection,buildSpec:mergedBuildSpec,environmentVariables});return this.props.rolePolicyStatements!==void 0&&this.props.rolePolicyStatements.forEach(policyStatement=>{project.addToRolePolicy(policyStatement)}),this._project=project,(_e=this._dockerCredentials)===null||_e===void 0||_e.forEach(reg=>reg.grantRead(project.grantPrincipal,docker_credentials_1.DockerCredentialUsage.SYNTH)),this._action=new codepipeline_actions.CodeBuildAction({actionName:this.actionProperties.actionName,input:this.props.sourceArtifact,outputs:[this.props.cloudAssemblyArtifact,...((_f=this.props.additionalArtifacts)!==null&&_f!==void 0?_f:[]).map(a=>a.artifact)],environmentVariables:{...this.props.environmentVariables,_PROJECT_CONFIG_HASH:{value:projectConfigHash}},project}),this._actionProperties=this._action.actionProperties,this._action.bind(scope,stage,options);function renderArtifacts(self){var _b2;const cloudAsmArtifactSpec={"base-directory":fs_1.toPosixPath(path.join((_b2=self.props.subdirectory)!==null&&_b2!==void 0?_b2:".",DEFAULT_OUTPUT_DIR)),files:"**/*"};if(self.props.additionalArtifacts){const secondary={};if(!self.props.cloudAssemblyArtifact.artifactName)throw new Error("When using additional output artifacts, you must also name the CloudAssembly artifact");return secondary[self.props.cloudAssemblyArtifact.artifactName]=cloudAsmArtifactSpec,self.props.additionalArtifacts.forEach(art=>{var _b3;if(!art.artifact.artifactName)throw new Error("You must give the output artifact a name");secondary[art.artifact.artifactName]={"base-directory":fs_1.toPosixPath(path.join((_b3=self.props.subdirectory)!==null&&_b3!==void 0?_b3:".",art.directory)),files:"**/*"}}),{"secondary-artifacts":secondary}}return cloudAsmArtifactSpec}}get grantPrincipal(){return this.project.grantPrincipal}onStateChange(name,target,options){if(!this._action)throw new Error("Need bind() first");return this._action.onStateChange(name,target,options)}_addDockerCredentials(dockerCredentials){this._dockerCredentials=dockerCredentials}}exports.SimpleSynthAction=SimpleSynthAction,_a=JSII_RTTI_SYMBOL_1,SimpleSynthAction[_a]={fqn:"aws-cdk-lib.pipelines.SimpleSynthAction",version:"2.20.0"};function hash(obj){const d=crypto.createHash("sha256");return d.update(JSON.stringify(obj)),d.digest("hex")}function serializeBuildEnvironment(env){var _b,_c,_d,_e,_f;return{privileged:env.privileged,environmentVariables:env.environmentVariables,type:(_b=env.buildImage)===null||_b===void 0?void 0:_b.type,imageId:(_c=env.buildImage)===null||_c===void 0?void 0:_c.imageId,computeType:env.computeType,imagePullPrincipalType:(_d=env.buildImage)===null||_d===void 0?void 0:_d.imagePullPrincipalType,secretsManagerArn:(_f=(_e=env.buildImage)===null||_e===void 0?void 0:_e.secretsManagerCredentials)===null||_f===void 0?void 0:_f.secretArn}}
//# sourceMappingURL=simple-synth-action.js.map
