{
  "version": 3,
  "sources": ["pipeline.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as codebuild from '../../../aws-codebuild';\nimport * as codepipeline from '../../../aws-codepipeline';\nimport * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport { Annotations, App, CfnOutput, Fn, Lazy, PhysicalName, Stack, Stage } from '../../../core';\nimport { Construct } from 'constructs';\nimport { AssetType } from '../blueprint/asset-type';\nimport { dockerCredentialsInstallCommands, DockerCredential, DockerCredentialUsage } from '../docker-credentials';\nimport { ApplicationSecurityCheck } from '../private/application-security-check';\nimport { AssetSingletonRole } from '../private/asset-singleton-role';\nimport { preferredCliVersion } from '../private/cli-version';\nimport { appOf, assemblyBuilderOf } from '../private/construct-internals';\nimport { DeployCdkStackAction, PublishAssetsAction, UpdatePipelineAction } from './actions';\nimport { AddStageOptions, AssetPublishingCommand, BaseStageOptions, CdkStage, StackOutput } from './stage';\nimport { SimpleSynthAction } from './synths';\n\nconst CODE_BUILD_LENGTH_LIMIT = 100;\n/**\n * Properties for a CdkPipeline\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport interface CdkPipelineProps {\n  /**\n   * The CodePipeline action used to retrieve the CDK app's source\n   *\n   * @default - Required unless `codePipeline` is given\n   */\n  readonly sourceAction?: codepipeline.IAction;\n\n  /**\n   * The CodePipeline action build and synthesis step of the CDK app\n   *\n   * @default - Required unless `codePipeline` or `sourceAction` is given\n   */\n  readonly synthAction?: codepipeline.IAction;\n\n  /**\n   * The artifact you have defined to be the artifact to hold the cloudAssemblyArtifact for the synth action\n   */\n  readonly cloudAssemblyArtifact: codepipeline.Artifact;\n\n  /**\n   * Existing CodePipeline to add deployment stages to\n   *\n   * Use this if you want more control over the CodePipeline that gets created.\n   * You can choose to not pass this value, in which case a new CodePipeline is\n   * created with default settings.\n   *\n   * If you pass an existing CodePipeline, it should have been created\n   * with `restartExecutionOnUpdate: true`.\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - A new CodePipeline is automatically generated\n   */\n  readonly codePipeline?: codepipeline.Pipeline;\n\n  /**\n   * Name of the pipeline\n   *\n   * Can only be set if `codePipeline` is not set.\n   *\n   * @default - A name is automatically generated\n   */\n  readonly pipelineName?: string;\n\n  /**\n   * Create KMS keys for cross-account deployments\n   *\n   * This controls whether the pipeline is enabled for cross-account deployments.\n   *\n   * Can only be set if `codePipeline` is not set.\n   *\n   * By default cross-account deployments are enabled, but this feature requires\n   * that KMS Customer Master Keys are created which have a cost of $1/month.\n   *\n   * If you do not need cross-account deployments, you can set this to `false` to\n   * not create those keys and save on that cost (the artifact bucket will be\n   * encrypted with an AWS-managed key). However, cross-account deployments will\n   * no longer be possible.\n   *\n   * @default true\n   */\n  readonly crossAccountKeys?: boolean;\n  // @deprecated(v2): switch to default false\n\n\n  /**\n   * Enables KMS key rotation for cross-account keys.\n   *\n   * Cannot be set if `crossAccountKeys` was set to `false`.\n   *\n   * Key rotation costs $1/month when enabled.\n   *\n   * @default - false (key rotation is disabled)\n   */\n  readonly enableKeyRotation?: boolean;\n\n\n  /**\n   * CDK CLI version to use in pipeline\n   *\n   * Some Actions in the pipeline will download and run a version of the CDK\n   * CLI. Specify the version here.\n   *\n   * @default - Latest version\n   */\n  readonly cdkCliVersion?: string;\n\n  /**\n   * The VPC where to execute the CdkPipeline actions.\n   *\n   * @default - No VPC\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * Which subnets to use.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default - All private subnets.\n   */\n  readonly subnetSelection?: ec2.SubnetSelection;\n\n  /**\n   * Whether the pipeline will update itself\n   *\n   * This needs to be set to `true` to allow the pipeline to reconfigure\n   * itself when assets or stages are being added to it, and `true` is the\n   * recommended setting.\n   *\n   * You can temporarily set this to `false` while you are iterating\n   * on the pipeline itself and prefer to deploy changes using `cdk deploy`.\n   *\n   * @default true\n   */\n  readonly selfMutating?: boolean;\n\n  /**\n   * Custom BuildSpec that is merged with generated one (for self-mutation stage)\n   *\n   * @default - none\n   */\n  readonly selfMutationBuildSpec?: codebuild.BuildSpec;\n\n  /**\n   * Whether this pipeline creates one asset upload action per asset type or one asset upload per asset\n   *\n   * @default false\n   */\n  readonly singlePublisherPerType?: boolean;\n\n  /**\n   * Additional commands to run before installing cdk-assets during the asset publishing step\n   * Use this to setup proxies or npm mirrors\n   *\n   * @default -\n   */\n  readonly assetPreInstallCommands?: string[];\n\n  /**\n   * Custom BuildSpec that is merged with generated one (for asset publishing actions)\n   *\n   * @default - none\n   */\n  readonly assetBuildSpec?: codebuild.BuildSpec;\n\n  /**\n   * Whether the pipeline needs to build Docker images in the UpdatePipeline stage.\n   *\n   * If the UpdatePipeline stage tries to build a Docker image and this flag is not\n   * set to `true`, the build step will run in non-privileged mode and consequently\n   * will fail with a message like:\n   *\n   * > Cannot connect to the Docker daemon at unix:///var/run/docker.sock.\n   * > Is the docker daemon running?\n   *\n   * This flag has an effect only if `selfMutating` is also `true`.\n   *\n   * @default - false\n   */\n  readonly supportDockerAssets?: boolean;\n\n  /**\n   * A list of credentials used to authenticate to Docker registries.\n   *\n   * Specify any credentials necessary within the pipeline to build, synth, update, or publish assets.\n   *\n   * @default []\n   */\n  readonly dockerCredentials?: DockerCredential[];\n}\n\n/**\n * A Pipeline to deploy CDK apps\n *\n * Defines an AWS CodePipeline-based Pipeline to deploy CDK applications.\n *\n * Automatically manages the following:\n *\n * - Stack dependency order.\n * - Asset publishing.\n * - Keeping the pipeline up-to-date as the CDK apps change.\n * - Using stack outputs later on in the pipeline.\n *\n * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead\n */\nexport class CdkPipeline extends Construct {\n  private readonly _pipeline: codepipeline.Pipeline;\n  private readonly _assets: AssetPublishing;\n  private readonly _stages: CdkStage[] = [];\n  private readonly _outputArtifacts: Record<string, codepipeline.Artifact> = {};\n  private readonly _cloudAssemblyArtifact: codepipeline.Artifact;\n  private readonly _dockerCredentials: DockerCredential[];\n  private _applicationSecurityCheck?: ApplicationSecurityCheck;\n  private readonly cliVersion?: string;\n\n  constructor(scope: Construct, id: string, props: CdkPipelineProps) {\n    super(scope, id);\n    this.cliVersion = props.cdkCliVersion ?? preferredCliVersion();\n\n    if (!App.isApp(this.node.root)) {\n      throw new Error('CdkPipeline must be created under an App');\n    }\n\n    this._cloudAssemblyArtifact = props.cloudAssemblyArtifact;\n    this._dockerCredentials = props.dockerCredentials ?? [];\n    const pipelineStack = Stack.of(this);\n\n    if (props.codePipeline) {\n      if (props.pipelineName) {\n        throw new Error('Cannot set \\'pipelineName\\' if an existing CodePipeline is given using \\'codePipeline\\'');\n      }\n      if (props.crossAccountKeys !== undefined) {\n        throw new Error('Cannot set \\'crossAccountKeys\\' if an existing CodePipeline is given using \\'codePipeline\\'');\n      }\n      if (props.enableKeyRotation !== undefined) {\n        throw new Error('Cannot set \\'enableKeyRotation\\' if an existing CodePipeline is given using \\'codePipeline\\'');\n      }\n\n      this._pipeline = props.codePipeline;\n    } else {\n      this._pipeline = new codepipeline.Pipeline(this, 'Pipeline', {\n        pipelineName: props.pipelineName,\n        crossAccountKeys: props.crossAccountKeys,\n        enableKeyRotation: props.enableKeyRotation,\n        restartExecutionOnUpdate: true,\n      });\n    }\n\n    if (props.sourceAction && !props.synthAction) {\n      // Because of ordering limitations, you can: bring your own Source, bring your own\n      // Both, or bring your own Nothing. You cannot bring your own Build (which because of the\n      // current CodePipeline API must go BEFORE what we're adding) and then having us add a\n      // Source after it. That doesn't make any sense.\n      throw new Error('When passing a \\'sourceAction\\' you must also pass a \\'synthAction\\' (or a \\'codePipeline\\' that already has both)');\n    }\n    if (!props.sourceAction && (!props.codePipeline || props.codePipeline.stages.length < 1)) {\n      throw new Error('You must pass a \\'sourceAction\\' (or a \\'codePipeline\\' that already has a Source stage)');\n    }\n\n    if (props.sourceAction) {\n      this._pipeline.addStage({\n        stageName: 'Source',\n        actions: [props.sourceAction],\n      });\n    }\n\n    if (props.synthAction) {\n      if (props.synthAction instanceof SimpleSynthAction && this._dockerCredentials.length > 0) {\n        props.synthAction._addDockerCredentials(this._dockerCredentials);\n      }\n\n      this._pipeline.addStage({\n        stageName: 'Build',\n        actions: [props.synthAction],\n      });\n    }\n\n    if (props.selfMutating ?? true) {\n      this._pipeline.addStage({\n        stageName: 'UpdatePipeline',\n        actions: [new UpdatePipelineAction(this, 'UpdatePipeline', {\n          cloudAssemblyInput: this._cloudAssemblyArtifact,\n          pipelineStackHierarchicalId: pipelineStack.node.path,\n          cdkCliVersion: this.cliVersion,\n          projectName: maybeSuffix(props.pipelineName, '-selfupdate'),\n          privileged: props.supportDockerAssets,\n          dockerCredentials: this._dockerCredentials,\n          buildSpec: props.selfMutationBuildSpec,\n        })],\n      });\n    }\n\n    this._assets = new AssetPublishing(this, 'Assets', {\n      cloudAssemblyInput: this._cloudAssemblyArtifact,\n      cdkCliVersion: this.cliVersion,\n      pipeline: this._pipeline,\n      projectName: maybeSuffix(props.pipelineName, '-publish'),\n      vpc: props.vpc,\n      subnetSelection: props.subnetSelection,\n      singlePublisherPerType: props.singlePublisherPerType,\n      preInstallCommands: props.assetPreInstallCommands,\n      buildSpec: props.assetBuildSpec,\n      dockerCredentials: this._dockerCredentials,\n    });\n\n    this.node.addValidation({ validate: () => this.validatePipeline() });\n  }\n\n  /**\n   * The underlying CodePipeline object\n   *\n   * You can use this to add more Stages to the pipeline, or Actions\n   * to Stages.\n   */\n  public get codePipeline(): codepipeline.Pipeline {\n    return this._pipeline;\n  }\n\n  /**\n   * Access one of the pipeline's stages by stage name\n   *\n   * You can use this to add more Actions to a stage.\n   */\n  public stage(stageName: string): codepipeline.IStage {\n    return this._pipeline.stage(stageName);\n  }\n\n  /**\n   * Get a cached version of an Application Security Check, which consists of:\n   *  - CodeBuild Project to check for security changes in a stage\n   *  - Lambda Function that approves the manual approval if no security changes are detected\n   *\n   * @internal\n   */\n  public _getApplicationSecurityCheck(): ApplicationSecurityCheck {\n    if (!this._applicationSecurityCheck) {\n      this._applicationSecurityCheck = new ApplicationSecurityCheck(this, 'PipelineApplicationSecurityCheck', {\n        codePipeline: this._pipeline,\n      });\n    }\n    return this._applicationSecurityCheck;\n  }\n\n  /**\n   * Add pipeline stage that will deploy the given application stage\n   *\n   * The application construct should subclass `Stage` and can contain any\n   * number of `Stacks` inside it that may have dependency relationships\n   * on one another.\n   *\n   * All stacks in the application will be deployed in the appropriate order,\n   * and all assets found in the application will be added to the asset\n   * publishing stage.\n   */\n  public addApplicationStage(appStage: Stage, options: AddStageOptions = {}): CdkStage {\n    const stage = this.addStage(appStage.stageName, options);\n    stage.addApplication(appStage, options);\n    return stage;\n  }\n\n  /**\n   * Add a new, empty stage to the pipeline\n   *\n   * Prefer to use `addApplicationStage` if you are intended to deploy a CDK\n   * application, but you can use this method if you want to add other kinds of\n   * Actions to a pipeline.\n   */\n  public addStage(stageName: string, options?: BaseStageOptions) {\n    const pipelineStage = this._pipeline.addStage({\n      stageName,\n    });\n\n    const stage = new CdkStage(this, stageName, {\n      cloudAssemblyArtifact: this._cloudAssemblyArtifact,\n      pipelineStage,\n      stageName,\n      host: {\n        publishAsset: this._assets.addPublishAssetAction.bind(this._assets),\n        stackOutputArtifact: (artifactId) => this._outputArtifacts[artifactId],\n      },\n      ...options,\n    });\n    this._stages.push(stage);\n    return stage;\n  }\n\n  /**\n   * Get the StackOutput object that holds this CfnOutput's value in this pipeline\n   *\n   * `StackOutput` can be used in validation actions later in the pipeline.\n   */\n  public stackOutput(cfnOutput: CfnOutput): StackOutput {\n    const stack = Stack.of(cfnOutput);\n\n    if (!this._outputArtifacts[stack.artifactId]) {\n      // We should have stored the ArtifactPath in the map, but its Artifact\n      // property isn't publicly readable...\n      const artifactName = `${stack.artifactId}_Outputs`;\n      const compactName = artifactName.slice(artifactName.length - Math.min(artifactName.length, CODE_BUILD_LENGTH_LIMIT));\n      this._outputArtifacts[stack.artifactId] = new codepipeline.Artifact(compactName);\n    }\n\n    return new StackOutput(this._outputArtifacts[stack.artifactId].atPath('outputs.json'), cfnOutput.logicalId);\n  }\n\n  /**\n   * Validate that we don't have any stacks violating dependency order in the pipeline\n   *\n   * Our own convenience methods will never generate a pipeline that does that (although\n   * this is a nice verification), but a user can also add the stacks by hand.\n   */\n  private validatePipeline(): string[] {\n    const ret = new Array<string>();\n\n    ret.push(...this.validateDeployOrder());\n    ret.push(...this.validateRequestedOutputs());\n\n    return ret;\n  }\n\n  /**\n   * Return all StackDeployActions in an ordered list\n   */\n  private get stackActions(): DeployCdkStackAction[] {\n    return flatMap(this._pipeline.stages, s => s.actions.filter(isDeployAction));\n  }\n\n  private * validateDeployOrder(): IterableIterator<string> {\n    const stackActions = this.stackActions;\n    for (const stackAction of stackActions) {\n      // For every dependency, it must be executed in an action before this one is prepared.\n      for (const depId of stackAction.dependencyStackArtifactIds) {\n        const depAction = stackActions.find(s => s.stackArtifactId === depId);\n\n        if (depAction === undefined) {\n          Annotations.of(this).addWarning(`Stack '${stackAction.stackName}' depends on stack ` +\n            `'${depId}', but that dependency is not deployed through the pipeline!`);\n        } else if (!(depAction.executeRunOrder < stackAction.prepareRunOrder)) {\n          yield `Stack '${stackAction.stackName}' depends on stack ` +\n            `'${depAction.stackName}', but is deployed before it in the pipeline!`;\n        }\n      }\n    }\n  }\n\n  private * validateRequestedOutputs(): IterableIterator<string> {\n    const artifactIds = this.stackActions.map(s => s.stackArtifactId);\n\n    for (const artifactId of Object.keys(this._outputArtifacts)) {\n      if (!artifactIds.includes(artifactId)) {\n        yield `Trying to use outputs for Stack '${artifactId}', but Stack is not deployed in this pipeline. Add it to the pipeline.`;\n      }\n    }\n  }\n}\n\nfunction isDeployAction(a: codepipeline.IAction): a is DeployCdkStackAction {\n  return a instanceof DeployCdkStackAction;\n}\n\nfunction flatMap<A, B>(xs: A[], f: (x: A) => B[]): B[] {\n  return Array.prototype.concat([], ...xs.map(f));\n}\n\ninterface AssetPublishingProps {\n  readonly cloudAssemblyInput: codepipeline.Artifact;\n  readonly pipeline: codepipeline.Pipeline;\n  readonly cdkCliVersion?: string;\n  readonly projectName?: string;\n  readonly vpc?: ec2.IVpc;\n  readonly subnetSelection?: ec2.SubnetSelection;\n  readonly singlePublisherPerType?: boolean;\n  readonly preInstallCommands?: string[];\n  readonly buildSpec?: codebuild.BuildSpec;\n  readonly dockerCredentials: DockerCredential[];\n}\n\n/**\n * Add appropriate publishing actions to the asset publishing stage\n */\nclass AssetPublishing extends Construct {\n  // CodePipelines has a hard limit of 50 actions per stage. See https://github.com/aws/aws-cdk/issues/9353\n  private readonly MAX_PUBLISHERS_PER_STAGE = 50;\n\n  private readonly publishers: Record<string, PublishAssetsAction> = {};\n  private readonly assetRoles: Record<string, iam.IRole> = {};\n  private readonly assetAttachedPolicies: Record<string, iam.Policy> = {};\n  private readonly assetPublishingRoles: Record<string, Set<string>> = {};\n  private readonly myCxAsmRoot: string;\n\n  private readonly lastStageBeforePublishing?: codepipeline.IStage;\n  private readonly stages: codepipeline.IStage[] = [];\n  private readonly pipeline: codepipeline.Pipeline;\n  private readonly dockerCredentials: DockerCredential[];\n\n  private _fileAssetCtr = 0;\n  private _dockerAssetCtr = 0;\n\n  constructor(scope: Construct, id: string, private readonly props: AssetPublishingProps) {\n    super(scope, id);\n    this.myCxAsmRoot = path.resolve(assemblyBuilderOf(appOf(this)).outdir);\n\n    this.pipeline = this.props.pipeline;\n    // Hacks to get access to the innards of Pipeline\n    const stages: codepipeline.IStage[] = (this.props.pipeline as any)._stages;\n    // Any asset publishing stages will be added directly after the last stage that currently exists.\n    this.lastStageBeforePublishing = stages.slice(-1)[0];\n\n    this.dockerCredentials = props.dockerCredentials;\n  }\n\n  /**\n   * Make sure there is an action in the stage to publish the given asset\n   *\n   * Assets are grouped by asset ID (which represent individual assets) so all assets\n   * are published in parallel. For each assets, all destinations are published sequentially\n   * so that we can reuse expensive operations between them (mostly: building a Docker image).\n   */\n  public addPublishAssetAction(command: AssetPublishingCommand) {\n    // FIXME: this is silly, we need the relative path here but no easy way to get it\n    const relativePath = path.relative(this.myCxAsmRoot, command.assetManifestPath);\n\n    // The path cannot be outside the asm root. I don't really understand how this could ever\n    // come to pass, but apparently it has (see https://github.com/aws/aws-cdk/issues/9766).\n    // Add a sanity check here so we can catch it more quickly next time.\n    if (relativePath.startsWith(`..${path.sep}`)) {\n      throw new Error(`The asset manifest (${command.assetManifestPath}) cannot be outside the Cloud Assembly directory (${this.myCxAsmRoot}). Please report this error at https://github.com/aws/aws-cdk/issues to help us debug why this is happening.`);\n    }\n\n    // Late-binding here (rather than in the constructor) to prevent creating the role in cases where no asset actions are created.\n    if (!this.assetRoles[command.assetType]) {\n      this.generateAssetRole(command.assetType);\n    }\n    this.assetPublishingRoles[command.assetType] = (this.assetPublishingRoles[command.assetType] ?? new Set()).add(command.assetPublishingRoleArn);\n\n    const publisherKey = this.props.singlePublisherPerType ? command.assetType.toString() : command.assetId;\n\n    let action = this.publishers[publisherKey];\n    if (!action) {\n      // Dynamically create new stages as needed, with `MAX_PUBLISHERS_PER_STAGE` assets per stage.\n      const stageIndex = this.props.singlePublisherPerType ? 0 :\n        Math.floor((this._fileAssetCtr + this._dockerAssetCtr) / this.MAX_PUBLISHERS_PER_STAGE);\n\n      if (!this.props.singlePublisherPerType && stageIndex >= this.stages.length) {\n        const previousStage = this.stages.slice(-1)[0] ?? this.lastStageBeforePublishing;\n        this.stages.push(this.pipeline.addStage({\n          stageName: `Assets${stageIndex > 0 ? stageIndex + 1 : ''}`,\n          placement: { justAfter: previousStage },\n        }));\n      } else if (this.props.singlePublisherPerType && this.stages.length == 0) {\n        this.stages.push(this.pipeline.addStage({\n          stageName: 'Assets',\n          placement: { justAfter: this.lastStageBeforePublishing },\n        }));\n      }\n\n      // The asset ID would be a logical candidate for the construct path and project names, but if the asset\n      // changes it leads to recreation of a number of Role/Policy/Project resources which is slower than\n      // necessary. Number sequentially instead.\n      //\n      // FIXME: The ultimate best solution is probably to generate a single Project per asset type\n      // and reuse that for all assets.\n      const id = this.props.singlePublisherPerType ?\n        command.assetType === AssetType.FILE ? 'FileAsset' : 'DockerAsset' :\n        command.assetType === AssetType.FILE ? `FileAsset${++this._fileAssetCtr}` : `DockerAsset${++this._dockerAssetCtr}`;\n\n      const credsInstallCommands = dockerCredentialsInstallCommands(DockerCredentialUsage.ASSET_PUBLISHING, this.dockerCredentials);\n\n      // NOTE: It's important that asset changes don't force a pipeline self-mutation.\n      // This can cause an infinite loop of updates (see https://github.com/aws/aws-cdk/issues/9080).\n      // For that reason, we use the id as the actionName below, rather than the asset hash.\n      action = this.publishers[publisherKey] = new PublishAssetsAction(this, id, {\n        actionName: id,\n        cloudAssemblyInput: this.props.cloudAssemblyInput,\n        cdkCliVersion: this.props.cdkCliVersion,\n        assetType: command.assetType,\n        role: this.assetRoles[command.assetType],\n        dependable: this.assetAttachedPolicies[command.assetType],\n        vpc: this.props.vpc,\n        subnetSelection: this.props.subnetSelection,\n        buildSpec: this.props.buildSpec,\n        createBuildspecFile: this.props.singlePublisherPerType,\n        preInstallCommands: [...(this.props.preInstallCommands ?? []), ...credsInstallCommands],\n      });\n      this.stages[stageIndex].addAction(action);\n    }\n\n    action.addPublishCommand(relativePath, command.assetSelector);\n  }\n\n  /**\n   * This role is used by both the CodePipeline build action and related CodeBuild project. Consolidating these two\n   * roles into one, and re-using across all assets, saves significant size of the final synthesized output.\n   * Modeled after the CodePipeline role and 'CodePipelineActionRole' roles.\n   * Generates one role per asset type to separate file and Docker/image-based permissions.\n   */\n  private generateAssetRole(assetType: AssetType) {\n    if (this.assetRoles[assetType]) { return this.assetRoles[assetType]; }\n\n    const rolePrefix = assetType === AssetType.DOCKER_IMAGE ? 'Docker' : 'File';\n    const assetRole = new AssetSingletonRole(this, `${rolePrefix}Role`, {\n      roleName: PhysicalName.GENERATE_IF_NEEDED,\n      assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal('codebuild.amazonaws.com'), new iam.AccountPrincipal(Stack.of(this).account)),\n    });\n\n    // Publishing role access\n    // The ARNs include raw AWS pseudo parameters (e.g., ${AWS::Partition}), which need to be substituted.\n    // Lazy-evaluated so all asset publishing roles are included.\n    assetRole.addToPolicy(new iam.PolicyStatement({\n      actions: ['sts:AssumeRole'],\n      resources: Lazy.list({ produce: () => [...this.assetPublishingRoles[assetType]].map(arn => Fn.sub(arn)) }),\n    }));\n\n    // Grant pull access for any ECR registries and secrets that exist\n    if (assetType === AssetType.DOCKER_IMAGE) {\n      this.dockerCredentials.forEach(reg => reg.grantRead(assetRole, DockerCredentialUsage.ASSET_PUBLISHING));\n    }\n\n    this.assetRoles[assetType] = assetRole;\n    return this.assetRoles[assetType];\n  }\n}\n\nfunction maybeSuffix(x: string | undefined, suffix: string): string | undefined {\n  if (x === undefined) { return undefined; }\n  return `${x}${suffix}`;\n}\n"],
  "mappings": "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",
  "names": []
}
