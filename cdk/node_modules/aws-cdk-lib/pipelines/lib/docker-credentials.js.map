{
  "version": 3,
  "sources": ["docker-credentials.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as ecr from '../../aws-ecr';\nimport * as iam from '../../aws-iam';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport { Fn } from '../../core';\n\n/**\n * Represents credentials used to access a Docker registry.\n */\nexport abstract class DockerCredential {\n  /**\n   * Creates a DockerCredential for DockerHub.\n   * Convenience method for `customRegistry('https://index.docker.io/v1/', opts)`.\n   */\n  public static dockerHub(secret: secretsmanager.ISecret, opts: ExternalDockerCredentialOptions = {}): DockerCredential {\n    return new ExternalDockerCredential('https://index.docker.io/v1/', secret, opts);\n  }\n\n  /**\n   * Creates a DockerCredential for a registry, based on its domain name (e.g., 'www.example.com').\n   */\n  public static customRegistry(\n    registryDomain: string,\n    secret: secretsmanager.ISecret,\n    opts: ExternalDockerCredentialOptions = {}): DockerCredential {\n    return new ExternalDockerCredential(registryDomain, secret, opts);\n  }\n\n  /**\n   * Creates a DockerCredential for one or more ECR repositories.\n   *\n   * NOTE - All ECR repositories in the same account and region share a domain name\n   * (e.g., 0123456789012.dkr.ecr.eu-west-1.amazonaws.com), and can only have one associated\n   * set of credentials (and DockerCredential). Attempting to associate one set of credentials\n   * with one ECR repo and another with another ECR repo in the same account and region will\n   * result in failures when using these credentials in the pipeline.\n   */\n  public static ecr(repositories: ecr.IRepository[], opts?: EcrDockerCredentialOptions): DockerCredential {\n    return new EcrDockerCredential(repositories, opts ?? {});\n  }\n\n  constructor(protected readonly usages?: DockerCredentialUsage[]) { }\n\n  /**\n   * Determines if this credential is relevant to the input usage.\n   * @internal\n   */\n  public _applicableForUsage(usage: DockerCredentialUsage) {\n    return !this.usages || this.usages.includes(usage);\n  }\n\n  /**\n   * Grant read-only access to the registry credentials.\n   * This grants read access to any secrets, and pull access to any repositories.\n   */\n  public abstract grantRead(grantee: iam.IGrantable, usage: DockerCredentialUsage): void;\n\n  /**\n   * Creates and returns the credential configuration, to be used by `cdk-assets`\n   * to support the `docker-credential-cdk-assets` tool for `docker login`.\n   * @internal\n   */\n  public abstract _renderCdkAssetsConfig(): DockerCredentialCredentialSource\n}\n\n/** Options for defining credentials for a Docker Credential */\nexport interface ExternalDockerCredentialOptions {\n  /**\n   * The name of the JSON field of the secret which contains the user/login name.\n   * @default 'username'\n   */\n  readonly secretUsernameField?: string;\n  /**\n   * The name of the JSON field of the secret which contains the secret/password.\n   * @default 'secret'\n   */\n  readonly secretPasswordField?: string;\n  /**\n   * An IAM role to assume prior to accessing the secret.\n   * @default - none. The current execution role will be used.\n   */\n  readonly assumeRole?: iam.IRole\n  /**\n   * Defines which stages of the pipeline should be granted access to these credentials.\n   * @default - all relevant stages (synth, self-update, asset publishing) are granted access.\n   */\n  readonly usages?: DockerCredentialUsage[];\n}\n\n/** Options for defining access for a Docker Credential composed of ECR repos */\nexport interface EcrDockerCredentialOptions {\n  /**\n   * An IAM role to assume prior to accessing the secret.\n   * @default - none. The current execution role will be used.\n   */\n  readonly assumeRole?: iam.IRole\n  /**\n   * Defines which stages of the pipeline should be granted access to these credentials.\n   * @default - all relevant stages (synth, self-update, asset publishing) are granted access.\n   */\n  readonly usages?: DockerCredentialUsage[];\n}\n\n/** Defines which stages of a pipeline require the specified credentials */\nexport enum DockerCredentialUsage {\n  /** Synth/Build */\n  SYNTH = 'SYNTH',\n  /** Self-update */\n  SELF_UPDATE = 'SELF_UPDATE',\n  /** Asset publishing */\n  ASSET_PUBLISHING = 'ASSET_PUBLISHING',\n};\n\n/** DockerCredential defined by registry domain and a secret */\nclass ExternalDockerCredential extends DockerCredential {\n  constructor(\n    private readonly registryDomain: string,\n    private readonly secret: secretsmanager.ISecret,\n    private readonly opts: ExternalDockerCredentialOptions) {\n    super(opts.usages);\n  }\n\n  public grantRead(grantee: iam.IGrantable, usage: DockerCredentialUsage) {\n    if (!this._applicableForUsage(usage)) { return; }\n\n    if (this.opts.assumeRole) {\n      grantee.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        resources: [this.opts.assumeRole.roleArn],\n      }));\n    }\n    const role = this.opts.assumeRole ?? grantee;\n    this.secret.grantRead(role);\n  }\n\n  public _renderCdkAssetsConfig(): DockerCredentialCredentialSource {\n    return {\n      [this.registryDomain]: {\n        secretsManagerSecretId: this.secret.secretArn,\n        secretsUsernameField: this.opts.secretUsernameField,\n        secretsPasswordField: this.opts.secretPasswordField,\n        assumeRoleArn: this.opts.assumeRole?.roleArn,\n      },\n    };\n  }\n}\n\n/** DockerCredential defined by a set of ECR repositories in the same account & region */\nclass EcrDockerCredential extends DockerCredential {\n  public readonly registryDomain: string;\n\n  constructor(private readonly repositories: ecr.IRepository[], private readonly opts: EcrDockerCredentialOptions) {\n    super(opts.usages);\n\n    if (repositories.length === 0) {\n      throw new Error('must supply at least one `ecr.IRepository` to create an `EcrDockerCredential`');\n    }\n    this.registryDomain = Fn.select(0, Fn.split('/', repositories[0].repositoryUri));\n  }\n\n  public grantRead(grantee: iam.IGrantable, usage: DockerCredentialUsage) {\n    if (!this._applicableForUsage(usage)) { return; }\n\n    if (this.opts.assumeRole) {\n      grantee.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        resources: [this.opts.assumeRole.roleArn],\n      }));\n    }\n    const role = this.opts.assumeRole ?? grantee;\n    this.repositories.forEach(repo => repo.grantPull(role));\n  }\n\n  public _renderCdkAssetsConfig(): DockerCredentialCredentialSource {\n    return {\n      [this.registryDomain]: {\n        ecrRepository: true,\n        assumeRoleArn: this.opts.assumeRole?.roleArn,\n      },\n    };\n  }\n}\n\n/** Format for the CDK assets config. See the cdk-assets `DockerDomainCredentialSource` */\ninterface DockerCredentialCredentialSource {\n  readonly secretsManagerSecretId?: string;\n  readonly secretsUsernameField?: string;\n  readonly secretsPasswordField?: string;\n  readonly ecrRepository?: boolean;\n  readonly assumeRoleArn?: string;\n}\n\n/**\n * Creates a set of OS-specific buildspec installation commands for setting up the given\n * registries and associated credentials.\n *\n * @param registries - Registries to configure credentials for. It is an error to provide\n * multiple registries for the same domain.\n * @param osType - (optional) Defaults to Linux.\n * @returns An array of commands to configure cdk-assets to use these credentials.\n */\nexport function dockerCredentialsInstallCommands(\n  usage: DockerCredentialUsage,\n  registries?: DockerCredential[],\n  osType?: ec2.OperatingSystemType | 'both'): string[] {\n\n  const relevantRegistries = (registries ?? []).filter(reg => reg._applicableForUsage(usage));\n  if (!relevantRegistries || relevantRegistries.length === 0) { return []; }\n\n  const domainCredentials = relevantRegistries.reduce(function (map: Record<string, any>, registry) {\n    Object.assign(map, registry._renderCdkAssetsConfig());\n    return map;\n  }, {});\n  const cdkAssetsConfigFile = {\n    version: '1.0',\n    domainCredentials,\n  };\n\n  const windowsCommands = [\n    'mkdir %USERPROFILE%\\\\.cdk',\n    `echo '${JSON.stringify(cdkAssetsConfigFile)}' > %USERPROFILE%\\\\.cdk\\\\cdk-docker-creds.json`,\n  ];\n\n  const linuxCommands = [\n    'mkdir $HOME/.cdk',\n    `echo '${JSON.stringify(cdkAssetsConfigFile)}' > $HOME/.cdk/cdk-docker-creds.json`,\n  ];\n\n  if (osType === 'both') {\n    return [\n      // These tags are magic and will be stripped when rendering the project\n      ...windowsCommands.map(c => `!WINDOWS!${c}`),\n      ...linuxCommands.map(c => `!LINUX!${c}`),\n    ];\n  } else if (osType === ec2.OperatingSystemType.WINDOWS) {\n    return windowsCommands;\n  } else {\n    return linuxCommands;\n  }\n}\n"],
  "mappings": "8RAAA,IAAA,QAAA,eAAA,EAEA,IAAA,QAAA,eAAA,EAEA,OAAA,QAAA,YAAA,EAKA,MAAsB,gBAAgB,CAgCpC,YAA+B,OAAgC,CAAhC,KAAA,OAAA,aA3BjB,WAAU,OAAgC,KAAwC,CAAA,EAAE,mKACzF,GAAI,0BAAyB,8BAA+B,OAAQ,IAAI,QAMnE,gBACZ,eACA,OACA,KAAwC,CAAA,EAAE,mKACnC,GAAI,0BAAyB,eAAgB,OAAQ,IAAI,QAYpD,KAAI,aAAiC,KAAiC,uFAC3E,GAAI,qBAAoB,aAAc,MAAI,KAAJ,KAAQ,CAAA,CAAE,EASlD,oBAAoB,MAA4B,CACrD,MAAO,CAAC,KAAK,QAAU,KAAK,OAAO,SAAS,KAAK,GAvCrD,QAAA,iBAAA,4HA+FA,GAAY,uBAAZ,AAAA,UAAY,uBAAqB,CAE/B,uBAAA,MAAA,QAEA,uBAAA,YAAA,cAEA,uBAAA,iBAAA,kBACF,GAPY,sBAAA,QAAA,uBAAA,SAAA,sBAAqB,CAAA,EAAA,EAUjC,MAAM,gCAAiC,iBAAgB,CACrD,YACmB,eACA,OACA,KAAqC,CACtD,MAAM,KAAK,MAAM,EAHA,KAAA,eAAA,eACA,KAAA,OAAA,OACA,KAAA,KAAA,KAIZ,UAAU,QAAyB,MAA4B,QACpE,GAAI,CAAC,KAAK,oBAAoB,KAAK,EAAK,OAExC,AAAI,KAAK,KAAK,YACZ,QAAQ,eAAe,qBAAqB,GAAI,KAAI,gBAAgB,CAClE,QAAS,CAAC,gBAAgB,EAC1B,UAAW,CAAC,KAAK,KAAK,WAAW,OAAO,EACzC,CAAC,EAEJ,KAAM,MAAI,IAAG,KAAK,KAAK,cAAU,MAAA,KAAA,OAAA,GAAI,QACrC,KAAK,OAAO,UAAU,IAAI,EAGrB,wBAAsB,QAC3B,MAAO,EACJ,KAAK,gBAAiB,CACrB,uBAAwB,KAAK,OAAO,UACpC,qBAAsB,KAAK,KAAK,oBAChC,qBAAsB,KAAK,KAAK,oBAChC,cAAa,IAAE,KAAK,KAAK,cAAU,MAAA,KAAA,OAAA,OAAA,GAAE,WAO7C,MAAM,2BAA4B,iBAAgB,CAGhD,YAA6B,aAAkD,KAAgC,CAC7G,MAAM,KAAK,MAAM,EAEjB,GAH2B,KAAA,aAAA,aAAkD,KAAA,KAAA,KAGzE,aAAa,SAAW,EAC1B,KAAM,IAAI,OAAM,+EAA+E,EAEjG,KAAK,eAAiB,OAAA,GAAG,OAAO,EAAG,OAAA,GAAG,MAAM,IAAK,aAAa,GAAG,aAAa,CAAC,EAG1E,UAAU,QAAyB,MAA4B,QACpE,GAAI,CAAC,KAAK,oBAAoB,KAAK,EAAK,OAExC,AAAI,KAAK,KAAK,YACZ,QAAQ,eAAe,qBAAqB,GAAI,KAAI,gBAAgB,CAClE,QAAS,CAAC,gBAAgB,EAC1B,UAAW,CAAC,KAAK,KAAK,WAAW,OAAO,EACzC,CAAC,EAEJ,KAAM,MAAI,IAAG,KAAK,KAAK,cAAU,MAAA,KAAA,OAAA,GAAI,QACrC,KAAK,aAAa,QAAQ,MAAQ,KAAK,UAAU,IAAI,CAAC,EAGjD,wBAAsB,QAC3B,MAAO,EACJ,KAAK,gBAAiB,CACrB,cAAe,GACf,cAAa,IAAE,KAAK,KAAK,cAAU,MAAA,KAAA,OAAA,OAAA,GAAE,WAwB7C,0CACE,MACA,WACA,OAAyC,CAEzC,KAAM,oBAAsB,aAAU,KAAV,WAAc,CAAA,GAAI,OAAO,KAAO,IAAI,oBAAoB,KAAK,CAAC,EAC1F,GAAI,CAAC,oBAAsB,mBAAmB,SAAW,EAAK,MAAO,CAAA,EAErE,KAAM,mBAAoB,mBAAmB,OAAO,SAAU,IAA0B,SAAQ,CAC9F,cAAO,OAAO,IAAK,SAAS,uBAAsB,CAAE,EAC7C,GACT,EAAG,CAAA,CAAE,EACC,oBAAsB,CAC1B,QAAS,MACT,mBAGI,gBAAkB,CACtB,4BACA,SAAS,KAAK,UAAU,mBAAmB,mDAGvC,cAAgB,CACpB,mBACA,SAAS,KAAK,UAAU,mBAAmB,yCAG7C,MAAI,UAAW,OACN,CAEL,GAAG,gBAAgB,IAAI,GAAK,YAAY,GAAG,EAC3C,GAAG,cAAc,IAAI,GAAK,UAAU,GAAG,GAEhC,SAAW,IAAI,oBAAoB,QACrC,gBAEA,aAEX,CAtCA,QAAA,iCAAA",
  "names": []
}
