{
  "version": 3,
  "sources": ["codepipeline.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as cb from '../../../aws-codebuild';\nimport * as cp from '../../../aws-codepipeline';\nimport * as cpa from '../../../aws-codepipeline-actions';\nimport * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport { Aws, CfnCapabilities, Duration, Fn, Lazy, PhysicalName, Stack } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { AssetType, FileSet, IFileSetProducer, ManualApprovalStep, ShellStep, StackAsset, StackDeployment, Step } from '../blueprint';\nimport { DockerCredential, dockerCredentialsInstallCommands, DockerCredentialUsage } from '../docker-credentials';\nimport { GraphNodeCollection, isGraph, AGraphNode, PipelineGraph } from '../helpers-internal';\nimport { PipelineBase } from '../main';\nimport { AssetSingletonRole } from '../private/asset-singleton-role';\nimport { preferredCliVersion } from '../private/cli-version';\nimport { appOf, assemblyBuilderOf, embeddedAsmPath, obtainScope } from '../private/construct-internals';\nimport { toPosixPath } from '../private/fs';\nimport { actionName, stackVariableNamespace } from '../private/identifiers';\nimport { enumerate, flatten, maybeSuffix, noUndefined } from '../private/javascript';\nimport { writeTemplateConfiguration } from '../private/template-configuration';\nimport { ArtifactMap } from './artifact-map';\nimport { CodeBuildStep } from './codebuild-step';\nimport { CodePipelineActionFactoryResult, ICodePipelineActionFactory } from './codepipeline-action-factory';\nimport { CodeBuildFactory, mergeCodeBuildOptions } from './private/codebuild-factory';\nimport { namespaceStepOutputs } from './private/outputs';\n\n\n/**\n * Properties for a `CodePipeline`\n */\nexport interface CodePipelineProps {\n  /**\n   * The build step that produces the CDK Cloud Assembly\n   *\n   * The primary output of this step needs to be the `cdk.out` directory\n   * generated by the `cdk synth` command.\n   *\n   * If you use a `ShellStep` here and you don't configure an output directory,\n   * the output directory will automatically be assumed to be `cdk.out`.\n   */\n  readonly synth: IFileSetProducer;\n\n  /**\n   * The name of the CodePipeline pipeline\n   *\n   * @default - Automatically generated\n   */\n  readonly pipelineName?: string;\n\n  /**\n   * Create KMS keys for the artifact buckets, allowing cross-account deployments\n   *\n   * The artifact buckets have to be encrypted to support deploying CDK apps to\n   * another account, so if you want to do that or want to have your artifact\n   * buckets encrypted, be sure to set this value to `true`.\n   *\n   * Be aware there is a cost associated with maintaining the KMS keys.\n   *\n   * @default false\n   */\n  readonly crossAccountKeys?: boolean;\n\n  /**\n   * CDK CLI version to use in self-mutation and asset publishing steps\n   *\n   * If you want to lock the CDK CLI version used in the pipeline, by steps\n   * that are automatically generated for you, specify the version here.\n   *\n   * We recommend you do not specify this value, as not specifying it always\n   * uses the latest CLI version which is backwards compatible with old versions.\n   *\n   * If you do specify it, be aware that this version should always be equal to or higher than the\n   * version of the CDK framework used by the CDK app, when the CDK commands are\n   * run during your pipeline execution. When you change this version, the *next\n   * time* the `SelfMutate` step runs it will still be using the CLI of the the\n   * *previous* version that was in this property: it will only start using the\n   * new version after `SelfMutate` completes successfully. That means that if\n   * you want to update both framework and CLI version, you should update the\n   * CLI version first, commit, push and deploy, and only then update the\n   * framework version.\n   *\n   * @default - Latest version\n   */\n  readonly cliVersion?: string;\n\n  /**\n   * Whether the pipeline will update itself\n   *\n   * This needs to be set to `true` to allow the pipeline to reconfigure\n   * itself when assets or stages are being added to it, and `true` is the\n   * recommended setting.\n   *\n   * You can temporarily set this to `false` while you are iterating\n   * on the pipeline itself and prefer to deploy changes using `cdk deploy`.\n   *\n   * @default true\n   */\n  readonly selfMutation?: boolean;\n\n  /**\n   * Enable Docker for the self-mutate step\n   *\n   * Set this to true if the pipeline itself uses Docker container assets\n   * (for example, if you use `LinuxBuildImage.fromAsset()` as the build\n   * image of a CodeBuild step in the pipeline).\n   *\n   * You do not need to set it if you build Docker image assets in the\n   * application Stages and Stacks that are *deployed* by this pipeline.\n   *\n   * Configures privileged mode for the self-mutation CodeBuild action.\n   *\n   * If you are about to turn this on in an already-deployed Pipeline,\n   * set the value to `true` first, commit and allow the pipeline to\n   * self-update, and only then use the Docker asset in the pipeline.\n   *\n   * @default false\n   */\n  readonly dockerEnabledForSelfMutation?: boolean;\n\n  /**\n   * Enable Docker for the 'synth' step\n   *\n   * Set this to true if you are using file assets that require\n   * \"bundling\" anywhere in your application (meaning an asset\n   * compilation step will be run with the tools provided by\n   * a Docker image), both for the Pipeline stack as well as the\n   * application stacks.\n   *\n   * A common way to use bundling assets in your application is by\n   * using the `@aws-cdk/aws-lambda-nodejs` library.\n   *\n   * Configures privileged mode for the synth CodeBuild action.\n   *\n   * If you are about to turn this on in an already-deployed Pipeline,\n   * set the value to `true` first, commit and allow the pipeline to\n   * self-update, and only then use the bundled asset.\n   *\n   * @default false\n   */\n  readonly dockerEnabledForSynth?: boolean;\n\n  /**\n   * Customize the CodeBuild projects created for this pipeline\n   *\n   * @default - All projects run non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0\n   */\n  readonly codeBuildDefaults?: CodeBuildOptions;\n\n  /**\n   * Additional customizations to apply to the synthesize CodeBuild projects\n   *\n   * @default - Only `codeBuildDefaults` are applied\n   */\n  readonly synthCodeBuildDefaults?: CodeBuildOptions;\n\n  /**\n   * Additional customizations to apply to the asset publishing CodeBuild projects\n   *\n   * @default - Only `codeBuildDefaults` are applied\n   */\n  readonly assetPublishingCodeBuildDefaults?: CodeBuildOptions;\n\n  /**\n   * Additional customizations to apply to the self mutation CodeBuild projects\n   *\n   * @default - Only `codeBuildDefaults` are applied\n   */\n  readonly selfMutationCodeBuildDefaults?: CodeBuildOptions;\n\n  /**\n   * Publish assets in multiple CodeBuild projects\n   *\n   * If set to false, use one Project per type to publish all assets.\n   *\n   * Publishing in parallel improves concurrency and may reduce publishing\n   * latency, but may also increase overall provisioning time of the CodeBuild\n   * projects.\n   *\n   * Experiment and see what value works best for you.\n   *\n   * @default true\n   */\n  readonly publishAssetsInParallel?: boolean;\n\n  /**\n   * A list of credentials used to authenticate to Docker registries.\n   *\n   * Specify any credentials necessary within the pipeline to build, synth, update, or publish assets.\n   *\n   * @default []\n   */\n  readonly dockerCredentials?: DockerCredential[];\n\n  /**\n   * An existing Pipeline to be reused and built upon.\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - a new underlying pipeline is created.\n   */\n  readonly codePipeline?: cp.Pipeline;\n\n  /**\n   * Reuse the same cross region support stack for all pipelines in the App.\n   *\n   * @default - true (Use the same support stack for all pipelines in App)\n   */\n  readonly reuseCrossRegionSupportStacks?: boolean;\n}\n\n/**\n * Options for customizing a single CodeBuild project\n */\nexport interface CodeBuildOptions {\n  /**\n   * Partial build environment, will be combined with other build environments that apply\n   *\n   * @default - Non-privileged build, SMALL instance, LinuxBuildImage.STANDARD_5_0\n   */\n  readonly buildEnvironment?: cb.BuildEnvironment;\n\n  /**\n   * Policy statements to add to role\n   *\n   * @default - No policy statements added to CodeBuild Project Role\n   */\n  readonly rolePolicy?: iam.PolicyStatement[];\n\n  /**\n   * Partial buildspec, will be combined with other buildspecs that apply\n   *\n   * The BuildSpec must be available inline--it cannot reference a file\n   * on disk.\n   *\n   * @default - No initial BuildSpec\n   */\n  readonly partialBuildSpec?: cb.BuildSpec;\n\n  /**\n   * Which security group(s) to associate with the project network interfaces.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default - Security group will be automatically created.\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n  /**\n   * The VPC where to create the CodeBuild network interfaces in.\n   *\n   * @default - No VPC\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * Which subnets to use.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default - All private subnets.\n   */\n  readonly subnetSelection?: ec2.SubnetSelection;\n\n  /**\n   * The number of minutes after which AWS CodeBuild stops the build if it's\n   * not complete. For valid values, see the timeoutInMinutes field in the AWS\n   * CodeBuild User Guide.\n   *\n   * @default Duration.hours(1)\n   */\n  readonly timeout?: Duration;\n}\n\n\n/**\n * A CDK Pipeline that uses CodePipeline to deploy CDK apps\n *\n * This is a `Pipeline` with its `engine` property set to\n * `CodePipelineEngine`, and exists for nicer ergonomics for\n * users that don't need to switch out engines.\n */\nexport class CodePipeline extends PipelineBase {\n  private _pipeline?: cp.Pipeline;\n  private artifacts = new ArtifactMap();\n  private _synthProject?: cb.IProject;\n  private readonly selfMutation: boolean;\n  private _myCxAsmRoot?: string;\n  private readonly dockerCredentials: DockerCredential[];\n\n  /**\n   * Asset roles shared for publishing\n   */\n  private readonly assetCodeBuildRoles: Record<string, iam.IRole> = {};\n\n  /**\n   * Per asset type, the target role ARNs that need to be assumed\n   */\n  private readonly assetPublishingRoles: Record<string, Set<string>> = {};\n\n  /**\n   * This is set to the very first artifact produced in the pipeline\n   */\n  private _fallbackArtifact?: cp.Artifact;\n\n  private _cloudAssemblyFileSet?: FileSet;\n\n  private readonly singlePublisherPerAssetType: boolean;\n  private readonly cliVersion?: string;\n\n  constructor(scope: Construct, id: string, private readonly props: CodePipelineProps) {\n    super(scope, id, props);\n\n    this.selfMutation = props.selfMutation ?? true;\n    this.dockerCredentials = props.dockerCredentials ?? [];\n    this.singlePublisherPerAssetType = !(props.publishAssetsInParallel ?? true);\n    this.cliVersion = props.cliVersion ?? preferredCliVersion();\n  }\n\n  /**\n   * The CodeBuild project that performs the Synth\n   *\n   * Only available after the pipeline has been built.\n   */\n  public get synthProject(): cb.IProject {\n    if (!this._synthProject) {\n      throw new Error('Call pipeline.buildPipeline() before reading this property');\n    }\n    return this._synthProject;\n  }\n\n  /**\n   * The CodePipeline pipeline that deploys the CDK app\n   *\n   * Only available after the pipeline has been built.\n   */\n  public get pipeline(): cp.Pipeline {\n    if (!this._pipeline) {\n      throw new Error('Pipeline not created yet');\n    }\n    return this._pipeline;\n  }\n\n\n  protected doBuildPipeline(): void {\n    if (this._pipeline) {\n      throw new Error('Pipeline already created');\n    }\n\n    this._myCxAsmRoot = path.resolve(assemblyBuilderOf(appOf(this)).outdir);\n\n    if (this.props.codePipeline) {\n      if (this.props.pipelineName) {\n        throw new Error('Cannot set \\'pipelineName\\' if an existing CodePipeline is given using \\'codePipeline\\'');\n      }\n      if (this.props.crossAccountKeys !== undefined) {\n        throw new Error('Cannot set \\'crossAccountKeys\\' if an existing CodePipeline is given using \\'codePipeline\\'');\n      }\n\n      this._pipeline = this.props.codePipeline;\n    } else {\n      this._pipeline = new cp.Pipeline(this, 'Pipeline', {\n        pipelineName: this.props.pipelineName,\n        crossAccountKeys: this.props.crossAccountKeys ?? false,\n        reuseCrossRegionSupportStacks: this.props.reuseCrossRegionSupportStacks,\n        // This is necessary to make self-mutation work (deployments are guaranteed\n        // to happen only after the builds of the latest pipeline definition).\n        restartExecutionOnUpdate: true,\n      });\n    }\n\n    const graphFromBp = new PipelineGraph(this, {\n      selfMutation: this.selfMutation,\n      singlePublisherPerAssetType: this.singlePublisherPerAssetType,\n    });\n    this._cloudAssemblyFileSet = graphFromBp.cloudAssemblyFileSet;\n\n    this.pipelineStagesAndActionsFromGraph(graphFromBp);\n  }\n\n  private get myCxAsmRoot(): string {\n    if (!this._myCxAsmRoot) {\n      throw new Error('Can\\'t read \\'myCxAsmRoot\\' if build deployment not called yet');\n    }\n    return this._myCxAsmRoot;\n  }\n\n  /**\n   * Scope for Assets-related resources.\n   *\n   * Purely exists for construct tree backwards compatibility with legacy pipelines\n   */\n  private get assetsScope(): Construct {\n    return obtainScope(this, 'Assets');\n  }\n\n  private pipelineStagesAndActionsFromGraph(structure: PipelineGraph) {\n    // Translate graph into Pipeline Stages and Actions\n    let beforeSelfMutation = this.selfMutation;\n    for (const stageNode of flatten(structure.graph.sortedChildren())) {\n      if (!isGraph(stageNode)) {\n        throw new Error(`Top-level children must be graphs, got '${stageNode}'`);\n      }\n\n      // Group our ordered tranches into blocks of 50.\n      // We can map these onto stages without exceeding the capacity of a Stage.\n      const chunks = chunkTranches(50, stageNode.sortedLeaves());\n      const actionsOverflowStage = chunks.length > 1;\n      for (const [i, tranches] of enumerate(chunks)) {\n        const stageName = actionsOverflowStage ? `${stageNode.id}.${i + 1}` : stageNode.id;\n        const pipelineStage = this.pipeline.addStage({ stageName });\n\n        const sharedParent = new GraphNodeCollection(flatten(tranches)).commonAncestor();\n\n        let runOrder = 1;\n        for (const tranche of tranches) {\n          const runOrdersConsumed = [0];\n\n          for (const node of tranche) {\n            const factory = this.actionFromNode(node);\n\n            const nodeType = this.nodeTypeFromNode(node);\n            const name = actionName(node, sharedParent);\n\n            const variablesNamespace = node.data?.type === 'step'\n              ? namespaceStepOutputs(node.data.step, pipelineStage, name)\n              : undefined;\n\n            const result = factory.produceAction(pipelineStage, {\n              actionName: name,\n              runOrder,\n              artifacts: this.artifacts,\n              scope: obtainScope(this.pipeline, stageName),\n              fallbackArtifact: this._fallbackArtifact,\n              pipeline: this,\n              // If this step happens to produce a CodeBuild job, set the default options\n              codeBuildDefaults: nodeType ? this.codeBuildDefaultsFor(nodeType) : undefined,\n              beforeSelfMutation,\n              variablesNamespace,\n            });\n\n            if (node.data?.type === 'self-update') {\n              beforeSelfMutation = false;\n            }\n\n            this.postProcessNode(node, result);\n\n            runOrdersConsumed.push(result.runOrdersConsumed);\n          }\n\n          runOrder += Math.max(...runOrdersConsumed);\n        }\n      }\n    }\n  }\n\n  /**\n   * Do additional things after the action got added to the pipeline\n   *\n   * Some minor state manipulation of CodeBuild projects and pipeline\n   * artifacts.\n   */\n  private postProcessNode(node: AGraphNode, result: CodePipelineActionFactoryResult) {\n    const nodeType = this.nodeTypeFromNode(node);\n\n    if (result.project) {\n      const dockerUsage = dockerUsageFromCodeBuild(nodeType ?? CodeBuildProjectType.STEP);\n      if (dockerUsage) {\n        for (const c of this.dockerCredentials) {\n          c.grantRead(result.project, dockerUsage);\n        }\n      }\n\n      if (nodeType === CodeBuildProjectType.SYNTH) {\n        this._synthProject = result.project;\n      }\n    }\n\n    if (node.data?.type === 'step' && node.data.step.primaryOutput?.primaryOutput && !this._fallbackArtifact) {\n      this._fallbackArtifact = this.artifacts.toCodePipeline(node.data.step.primaryOutput?.primaryOutput);\n    }\n  }\n\n  /**\n   * Make an action from the given node and/or step\n   */\n  private actionFromNode(node: AGraphNode): ICodePipelineActionFactory {\n    switch (node.data?.type) {\n      // Nothing for these, they are groupings (shouldn't even have popped up here)\n      case 'group':\n      case 'stack-group':\n      case undefined:\n        throw new Error(`actionFromNode: did not expect to get group nodes: ${node.data?.type}`);\n\n      case 'self-update':\n        return this.selfMutateAction();\n\n      case 'publish-assets':\n        return this.publishAssetsAction(node, node.data.assets);\n\n      case 'prepare':\n        return this.createChangeSetAction(node.data.stack);\n\n      case 'execute':\n        return this.executeChangeSetAction(node.data.stack, node.data.captureOutputs);\n\n      case 'step':\n        return this.actionFromStep(node, node.data.step);\n    }\n  }\n\n  /**\n   * Take a Step and turn it into a CodePipeline Action\n   *\n   * There are only 3 types of Steps we need to support:\n   *\n   * - Shell (generic)\n   * - ManualApproval (generic)\n   * - CodePipelineActionFactory (CodePipeline-specific)\n   *\n   * The rest is expressed in terms of these 3, or in terms of graph nodes\n   * which are handled elsewhere.\n   */\n  private actionFromStep(node: AGraphNode, step: Step): ICodePipelineActionFactory {\n    const nodeType = this.nodeTypeFromNode(node);\n\n    // CodePipeline-specific steps first -- this includes Sources\n    if (isCodePipelineActionFactory(step)) {\n      return step;\n    }\n\n    // Now built-in steps\n    if (step instanceof ShellStep || step instanceof CodeBuildStep) {\n      // The 'CdkBuildProject' will be the construct ID of the CodeBuild project, necessary for backwards compat\n      let constructId = nodeType === CodeBuildProjectType.SYNTH\n        ? 'CdkBuildProject'\n        : step.id;\n\n      return step instanceof CodeBuildStep\n        ? CodeBuildFactory.fromCodeBuildStep(constructId, step)\n        : CodeBuildFactory.fromShellStep(constructId, step);\n    }\n\n    if (step instanceof ManualApprovalStep) {\n      return {\n        produceAction: (stage, options) => {\n          stage.addAction(new cpa.ManualApprovalAction({\n            actionName: options.actionName,\n            runOrder: options.runOrder,\n            additionalInformation: step.comment,\n          }));\n          return { runOrdersConsumed: 1 };\n        },\n      };\n    }\n\n    throw new Error(`Deployment step '${step}' is not supported for CodePipeline-backed pipelines`);\n  }\n\n  private createChangeSetAction(stack: StackDeployment): ICodePipelineActionFactory {\n    const changeSetName = 'PipelineChange';\n\n    const templateArtifact = this.artifacts.toCodePipeline(this._cloudAssemblyFileSet!);\n    const templateConfigurationPath = this.writeTemplateConfiguration(stack);\n\n    const region = stack.region !== Stack.of(this).region ? stack.region : undefined;\n    const account = stack.account !== Stack.of(this).account ? stack.account : undefined;\n\n    const relativeTemplatePath = path.relative(this.myCxAsmRoot, stack.absoluteTemplatePath);\n\n    return {\n      produceAction: (stage, options) => {\n        stage.addAction(new cpa.CloudFormationCreateReplaceChangeSetAction({\n          actionName: options.actionName,\n          runOrder: options.runOrder,\n          changeSetName,\n          stackName: stack.stackName,\n          templatePath: templateArtifact.atPath(toPosixPath(relativeTemplatePath)),\n          adminPermissions: true,\n          role: this.roleFromPlaceholderArn(this.pipeline, region, account, stack.assumeRoleArn),\n          deploymentRole: this.roleFromPlaceholderArn(this.pipeline, region, account, stack.executionRoleArn),\n          region: region,\n          templateConfiguration: templateConfigurationPath\n            ? templateArtifact.atPath(toPosixPath(templateConfigurationPath))\n            : undefined,\n          cfnCapabilities: [CfnCapabilities.NAMED_IAM, CfnCapabilities.AUTO_EXPAND],\n        }));\n        return { runOrdersConsumed: 1 };\n      },\n    };\n  }\n\n  private executeChangeSetAction(stack: StackDeployment, captureOutputs: boolean): ICodePipelineActionFactory {\n    const changeSetName = 'PipelineChange';\n\n    const region = stack.region !== Stack.of(this).region ? stack.region : undefined;\n    const account = stack.account !== Stack.of(this).account ? stack.account : undefined;\n\n    return {\n      produceAction: (stage, options) => {\n        stage.addAction(new cpa.CloudFormationExecuteChangeSetAction({\n          actionName: options.actionName,\n          runOrder: options.runOrder,\n          changeSetName,\n          stackName: stack.stackName,\n          role: this.roleFromPlaceholderArn(this.pipeline, region, account, stack.assumeRoleArn),\n          region: region,\n          variablesNamespace: captureOutputs ? stackVariableNamespace(stack) : undefined,\n        }));\n\n        return { runOrdersConsumed: 1 };\n      },\n    };\n  }\n\n  private selfMutateAction(): ICodePipelineActionFactory {\n    const installSuffix = this.cliVersion ? `@${this.cliVersion}` : '';\n\n    const pipelineStack = Stack.of(this.pipeline);\n    const pipelineStackIdentifier = pipelineStack.node.path ?? pipelineStack.stackName;\n\n    const step = new CodeBuildStep('SelfMutate', {\n      projectName: maybeSuffix(this.props.pipelineName, '-selfupdate'),\n      input: this._cloudAssemblyFileSet,\n      installCommands: [\n        `npm install -g aws-cdk${installSuffix}`,\n      ],\n      commands: [\n        `cdk -a ${toPosixPath(embeddedAsmPath(this.pipeline))} deploy ${pipelineStackIdentifier} --require-approval=never --verbose`,\n      ],\n\n      rolePolicyStatements: [\n        // allow the self-mutating project permissions to assume the bootstrap Action role\n        new iam.PolicyStatement({\n          actions: ['sts:AssumeRole'],\n          resources: [`arn:*:iam::${Stack.of(this.pipeline).account}:role/*`],\n          conditions: {\n            'ForAnyValue:StringEquals': {\n              'iam:ResourceTag/aws-cdk:bootstrap-role': ['image-publishing', 'file-publishing', 'deploy'],\n            },\n          },\n        }),\n        new iam.PolicyStatement({\n          actions: ['cloudformation:DescribeStacks'],\n          resources: ['*'], // this is needed to check the status of the bootstrap stack when doing `cdk deploy`\n        }),\n        // S3 checks for the presence of the ListBucket permission\n        new iam.PolicyStatement({\n          actions: ['s3:ListBucket'],\n          resources: ['*'],\n        }),\n      ],\n    });\n\n    // Different on purpose -- id needed for backwards compatible LogicalID\n    return CodeBuildFactory.fromCodeBuildStep('SelfMutation', step, {\n      additionalConstructLevel: false,\n      scope: obtainScope(this, 'UpdatePipeline'),\n    });\n  }\n\n  private publishAssetsAction(node: AGraphNode, assets: StackAsset[]): ICodePipelineActionFactory {\n    const installSuffix = this.cliVersion ? `@${this.cliVersion}` : '';\n\n    const commands = assets.map(asset => {\n      const relativeAssetManifestPath = path.relative(this.myCxAsmRoot, asset.assetManifestPath);\n      return `cdk-assets --path \"${toPosixPath(relativeAssetManifestPath)}\" --verbose publish \"${asset.assetSelector}\"`;\n    });\n\n    const assetType = assets[0].assetType;\n    if (assets.some(a => a.assetType !== assetType)) {\n      throw new Error('All assets in a single publishing step must be of the same type');\n    }\n\n    const publishingRoles = this.assetPublishingRoles[assetType] = (this.assetPublishingRoles[assetType] ?? new Set());\n    for (const asset of assets) {\n      if (asset.assetPublishingRoleArn) {\n        publishingRoles.add(asset.assetPublishingRoleArn);\n      }\n    }\n\n    const role = this.obtainAssetCodeBuildRole(assets[0].assetType);\n\n    // The base commands that need to be run\n    const script = new CodeBuildStep(node.id, {\n      commands,\n      installCommands: [\n        `npm install -g cdk-assets${installSuffix}`,\n      ],\n      input: this._cloudAssemblyFileSet,\n      buildEnvironment: {\n        privileged: assets.some(asset => asset.assetType === AssetType.DOCKER_IMAGE),\n      },\n      role,\n    });\n\n    // Customizations that are not accessible to regular users\n    return CodeBuildFactory.fromCodeBuildStep(node.id, script, {\n      additionalConstructLevel: false,\n\n      // If we use a single publisher, pass buildspec via file otherwise it'll\n      // grow too big.\n      passBuildSpecViaCloudAssembly: this.singlePublisherPerAssetType,\n      scope: this.assetsScope,\n    });\n  }\n\n  private nodeTypeFromNode(node: AGraphNode) {\n    if (node.data?.type === 'step') {\n      return !!node.data?.isBuildStep ? CodeBuildProjectType.SYNTH : CodeBuildProjectType.STEP;\n    }\n    if (node.data?.type === 'publish-assets') {\n      return CodeBuildProjectType.ASSETS;\n    }\n    if (node.data?.type === 'self-update') {\n      return CodeBuildProjectType.SELF_MUTATE;\n    }\n    return undefined;\n  }\n\n  private codeBuildDefaultsFor(nodeType: CodeBuildProjectType): CodeBuildOptions | undefined {\n    const defaultOptions: CodeBuildOptions = {\n      buildEnvironment: {\n        buildImage: cb.LinuxBuildImage.STANDARD_5_0,\n        computeType: cb.ComputeType.SMALL,\n      },\n    };\n\n    const typeBasedCustomizations = {\n      [CodeBuildProjectType.SYNTH]: this.props.dockerEnabledForSynth\n        ? mergeCodeBuildOptions(this.props.synthCodeBuildDefaults, { buildEnvironment: { privileged: true } })\n        : this.props.synthCodeBuildDefaults,\n\n      [CodeBuildProjectType.ASSETS]: this.props.assetPublishingCodeBuildDefaults,\n\n      [CodeBuildProjectType.SELF_MUTATE]: this.props.dockerEnabledForSelfMutation\n        ? mergeCodeBuildOptions(this.props.selfMutationCodeBuildDefaults, { buildEnvironment: { privileged: true } })\n        : this.props.selfMutationCodeBuildDefaults,\n\n      [CodeBuildProjectType.STEP]: {},\n    };\n\n    const dockerUsage = dockerUsageFromCodeBuild(nodeType);\n    const dockerCommands = dockerUsage !== undefined\n      ? dockerCredentialsInstallCommands(dockerUsage, this.dockerCredentials, 'both')\n      : [];\n    const typeBasedDockerCommands = dockerCommands.length > 0 ? {\n      partialBuildSpec: cb.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          pre_build: {\n            commands: dockerCommands,\n          },\n        },\n      }),\n    } : {};\n\n    return mergeCodeBuildOptions(\n      defaultOptions,\n      this.props.codeBuildDefaults,\n      typeBasedCustomizations[nodeType],\n      typeBasedDockerCommands,\n    );\n  }\n\n  private roleFromPlaceholderArn(scope: Construct, region: string | undefined,\n    account: string | undefined, arn: string): iam.IRole;\n  private roleFromPlaceholderArn(scope: Construct, region: string | undefined,\n    account: string | undefined, arn: string | undefined): iam.IRole | undefined;\n  private roleFromPlaceholderArn(scope: Construct, region: string | undefined,\n    account: string | undefined, arn: string | undefined): iam.IRole | undefined {\n\n    if (!arn) { return undefined; }\n\n    // Use placeholder arn as construct ID.\n    const id = arn;\n\n    // https://github.com/aws/aws-cdk/issues/7255\n    let existingRole = scope.node.tryFindChild(`ImmutableRole${id}`) as iam.IRole;\n    if (existingRole) { return existingRole; }\n    // For when #7255 is fixed.\n    existingRole = scope.node.tryFindChild(id) as iam.IRole;\n    if (existingRole) { return existingRole; }\n\n    const arnToImport = cxapi.EnvironmentPlaceholders.replace(arn, {\n      region: region ?? Aws.REGION,\n      accountId: account ?? Aws.ACCOUNT_ID,\n      partition: Aws.PARTITION,\n    });\n    return iam.Role.fromRoleArn(scope, id, arnToImport, { mutable: false, addGrantsToResources: true });\n  }\n\n  /**\n   * Non-template config files for CodePipeline actions\n   *\n   * Currently only supports tags.\n   */\n  private writeTemplateConfiguration(stack: StackDeployment): string | undefined {\n    if (Object.keys(stack.tags).length === 0) { return undefined; }\n\n    const absConfigPath = `${stack.absoluteTemplatePath}.config.json`;\n    const relativeConfigPath = path.relative(this.myCxAsmRoot, absConfigPath);\n\n    // Write the template configuration file (for parameters into CreateChangeSet call that\n    // cannot be configured any other way). They must come from a file, and there's unfortunately\n    // no better hook to write this file (`construct.onSynthesize()` would have been the prime candidate\n    // but that is being deprecated--and DeployCdkStackAction isn't even a construct).\n    writeTemplateConfiguration(absConfigPath, {\n      Tags: noUndefined(stack.tags),\n    });\n\n    return relativeConfigPath;\n  }\n\n  /**\n   * This role is used by both the CodePipeline build action and related CodeBuild project. Consolidating these two\n   * roles into one, and re-using across all assets, saves significant size of the final synthesized output.\n   * Modeled after the CodePipeline role and 'CodePipelineActionRole' roles.\n   * Generates one role per asset type to separate file and Docker/image-based permissions.\n   */\n  private obtainAssetCodeBuildRole(assetType: AssetType): iam.IRole {\n    if (this.assetCodeBuildRoles[assetType]) {\n      return this.assetCodeBuildRoles[assetType];\n    }\n\n    const stack = Stack.of(this);\n\n    const rolePrefix = assetType === AssetType.DOCKER_IMAGE ? 'Docker' : 'File';\n    const assetRole = new AssetSingletonRole(this.assetsScope, `${rolePrefix}Role`, {\n      roleName: PhysicalName.GENERATE_IF_NEEDED,\n      assumedBy: new iam.CompositePrincipal(\n        new iam.ServicePrincipal('codebuild.amazonaws.com'),\n        new iam.AccountPrincipal(stack.account),\n      ),\n    });\n\n    // Publishing role access\n    // The ARNs include raw AWS pseudo parameters (e.g., ${AWS::Partition}), which need to be substituted.\n    // Lazy-evaluated so all asset publishing roles are included.\n    assetRole.addToPolicy(new iam.PolicyStatement({\n      actions: ['sts:AssumeRole'],\n      resources: Lazy.list({ produce: () => Array.from(this.assetPublishingRoles[assetType] ?? []).map(arn => Fn.sub(arn)) }),\n    }));\n\n    // Grant pull access for any ECR registries and secrets that exist\n    if (assetType === AssetType.DOCKER_IMAGE) {\n      this.dockerCredentials.forEach(reg => reg.grantRead(assetRole, DockerCredentialUsage.ASSET_PUBLISHING));\n    }\n\n    this.assetCodeBuildRoles[assetType] = assetRole;\n    return assetRole;\n  }\n}\n\nfunction dockerUsageFromCodeBuild(cbt: CodeBuildProjectType): DockerCredentialUsage | undefined {\n  switch (cbt) {\n    case CodeBuildProjectType.ASSETS: return DockerCredentialUsage.ASSET_PUBLISHING;\n    case CodeBuildProjectType.SELF_MUTATE: return DockerCredentialUsage.SELF_UPDATE;\n    case CodeBuildProjectType.SYNTH: return DockerCredentialUsage.SYNTH;\n    case CodeBuildProjectType.STEP: return undefined;\n  }\n}\n\nenum CodeBuildProjectType {\n  SYNTH = 'SYNTH',\n  ASSETS = 'ASSETS',\n  SELF_MUTATE = 'SELF_MUTATE',\n  STEP = 'STEP',\n}\n\n/**\n * Take a set of tranches and split them up into groups so\n * that no set of tranches has more than n items total\n */\nfunction chunkTranches<A>(n: number, xss: A[][]): A[][][] {\n  const ret: A[][][] = [];\n\n  while (xss.length > 0) {\n    const tranches: A[][] = [];\n    let count = 0;\n\n    while (xss.length > 0) {\n      const xs = xss[0];\n      const spaceRemaining = n - count;\n      if (xs.length <= spaceRemaining) {\n        tranches.push(xs);\n        count += xs.length;\n        xss.shift();\n      } else {\n        tranches.push(xs.splice(0, spaceRemaining));\n        count = n;\n        break;\n      }\n    }\n\n    ret.push(tranches);\n  }\n\n\n  return ret;\n}\n\nfunction isCodePipelineActionFactory(x: any): x is ICodePipelineActionFactory {\n  return !!(x as ICodePipelineActionFactory).produceAction;\n}\n"],
  "mappings": "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",
  "names": []
}
