{
  "version": 3,
  "sources": ["artifact-map.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\nimport * as cp from '../../../aws-codepipeline';\nimport { FileSet } from '../blueprint';\nimport { PipelineGraph } from '../helpers-internal';\n\n/**\n * Translate FileSets to CodePipeline Artifacts\n */\nexport class ArtifactMap {\n  private artifacts = new Map<FileSet, cp.Artifact>();\n  private usedNames = new Set<string>();\n\n  /**\n   * Return the matching CodePipeline artifact for a FileSet\n   */\n  public toCodePipeline(x: FileSet): cp.Artifact {\n    if (x instanceof CodePipelineFileSet) {\n      return x._artifact;\n    }\n\n    let ret = this.artifacts.get(x);\n    if (!ret) {\n      // They all need a name\n      const artifactName = this.makeUniqueName(`${x.producer.id}.${x.id}`);\n      this.usedNames.add(artifactName);\n      this.artifacts.set(x, ret = new cp.Artifact(artifactName));\n    }\n    return ret;\n  }\n\n  private makeUniqueName(baseName: string) {\n    let i = 1;\n    baseName = sanitizeArtifactName(baseName);\n    let name = baseName;\n    while (this.usedNames.has(name)) {\n      name = `${baseName}${++i}`;\n    }\n    return name;\n  }\n}\n\n/**\n * Sanitize a string to be a valid artifact name\n *\n * This must comport to both the rules of artifacts in CodePipeline, as well\n * as the names of Source Identifiers in CodeBuild.\n *\n * Artifact Name limits aren't documented.\n *\n * Source Identifier limits are documented here:\n * https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ProjectSource.html#CodeBuild-Type-ProjectSource-sourceIdentifier\n */\nfunction sanitizeArtifactName(x: string): string {\n  let sani = x.replace(/[^A-Za-z0-9_]/g, '_'); // Charset requirement is imposed by CodeBuild\n  const maxLength = 100; // Max length of 100 is imposed by CodePipeline library\n\n  if (sani.length > maxLength) {\n    const fingerprint = crypto.createHash('sha256').update(sani).digest('hex').slice(0, 8);\n    sani = sani.slice(0, maxLength - fingerprint.length) + fingerprint;\n  }\n\n  return sani;\n}\n\n/**\n * A FileSet created from a CodePipeline artifact\n *\n * You only need to use this if you want to add CDK Pipeline stages\n * add the end of an existing CodePipeline, which should be very rare.\n */\nexport class CodePipelineFileSet extends FileSet {\n  /**\n   * Turn a CodePipeline Artifact into a FileSet\n   */\n  public static fromArtifact(artifact: cp.Artifact) {\n    return new CodePipelineFileSet(artifact);\n  }\n\n  /**\n   * The artifact this class is wrapping\n   *\n   * @internal\n   */\n  public readonly _artifact: cp.Artifact;\n\n  private constructor(artifact: cp.Artifact) {\n    super(artifact.artifactName ?? 'Imported', PipelineGraph.NO_STEP);\n    this._artifact = artifact;\n  }\n}"],
  "mappings": "oPAAA,OAAA,QAAA,QAAA,EACA,GAAA,QAAA,2BAAA,EACA,YAAA,QAAA,cAAA,EACA,mBAAA,QAAA,qBAAA,EAKA,MAAa,WAAW,CAAxB,aAAA,CACU,KAAA,UAAY,GAAI,KAChB,KAAA,UAAY,GAAI,KAKjB,eAAe,EAAU,CAC9B,4DAAI,YAAa,qBACf,MAAO,GAAE,UAGX,GAAI,KAAM,KAAK,UAAU,IAAI,CAAC,EAC9B,GAAI,CAAC,IAAK,CAER,KAAM,cAAe,KAAK,eAAe,GAAG,EAAE,SAAS,MAAM,EAAE,IAAI,EACnE,KAAK,UAAU,IAAI,YAAY,EAC/B,KAAK,UAAU,IAAI,EAAG,IAAM,GAAI,IAAG,SAAS,YAAY,CAAC,EAE3D,MAAO,KAGD,eAAe,SAAgB,CACrC,GAAI,GAAI,EACR,SAAW,qBAAqB,QAAQ,EACxC,GAAI,MAAO,SACX,KAAO,KAAK,UAAU,IAAI,IAAI,GAC5B,KAAO,GAAG,WAAW,EAAE,IAEzB,MAAO,OA7BX,QAAA,YAAA,6GA4CA,8BAA8B,EAAS,CACrC,GAAI,MAAO,EAAE,QAAQ,iBAAkB,GAAG,EAC1C,KAAM,WAAY,IAElB,GAAI,KAAK,OAAS,UAAW,CAC3B,KAAM,aAAc,OAAO,WAAW,QAAQ,EAAE,OAAO,IAAI,EAAE,OAAO,KAAK,EAAE,MAAM,EAAG,CAAC,EACrF,KAAO,KAAK,MAAM,EAAG,UAAY,YAAY,MAAM,EAAI,YAGzD,MAAO,KACT,CAQA,MAAa,2BAA4B,aAAA,OAAO,CAe9C,YAAoB,SAAqB,QACvC,MAAK,IAAC,SAAS,gBAAY,MAAA,KAAA,OAAA,GAAI,WAAY,mBAAA,cAAc,OAAO,EAChE,KAAK,UAAY,eAbL,cAAa,SAAqB,gFACvC,GAAI,qBAAoB,QAAQ,GAL3C,QAAA,oBAAA",
  "names": []
}
