{
  "version": 3,
  "sources": ["codepipeline-source.ts"],
  "sourcesContent": ["import * as codecommit from '../../../aws-codecommit';\nimport * as cp from '../../../aws-codepipeline';\nimport { Artifact } from '../../../aws-codepipeline';\nimport * as cp_actions from '../../../aws-codepipeline-actions';\nimport { Action, CodeCommitTrigger, GitHubTrigger, S3Trigger } from '../../../aws-codepipeline-actions';\nimport { IRepository } from '../../../aws-ecr';\nimport * as iam from '../../../aws-iam';\nimport { IBucket } from '../../../aws-s3';\nimport { Fn, SecretValue, Token } from '../../../core';\nimport { Node } from 'constructs';\nimport { FileSet, Step } from '../blueprint';\nimport { CodePipelineActionFactoryResult, ProduceActionOptions, ICodePipelineActionFactory } from './codepipeline-action-factory';\nimport { makeCodePipelineOutput } from './private/outputs';\n\n/**\n * Factory for CodePipeline source steps\n *\n * This class contains a number of factory methods for the different types\n * of sources that CodePipeline supports.\n */\nexport abstract class CodePipelineSource extends Step implements ICodePipelineActionFactory {\n  /**\n   * Returns a GitHub source, using OAuth tokens to authenticate with\n   * GitHub and a separate webhook to detect changes. This is no longer\n   * the recommended method. Please consider using `connection()`\n   * instead.\n   *\n   * Pass in the owner and repository in a single string, like this:\n   *\n   * ```ts\n   * pipelines.CodePipelineSource.gitHub('owner/repo', 'main');\n   * ```\n   *\n   * Authentication will be done by a secret called `github-token` in AWS\n   * Secrets Manager (unless specified otherwise).\n   *\n   * The token should have these permissions:\n   *\n   * * **repo** - to read the repository\n   * * **admin:repo_hook** - if you plan to use webhooks (true by default)\n   */\n  public static gitHub(repoString: string, branch: string, props: GitHubSourceOptions = {}): CodePipelineSource {\n    return new GitHubSource(repoString, branch, props);\n  }\n\n  /**\n   * Returns an S3 source.\n   *\n   * @param bucket The bucket where the source code is located.\n   * @param props The options, which include the key that identifies the source code file and\n   * and how the pipeline should be triggered.\n   *\n   * @example\n   * declare const bucket: s3.Bucket;\n   * pipelines.CodePipelineSource.s3(bucket, 'path/to/file.zip');\n   */\n  public static s3(bucket: IBucket, objectKey: string, props: S3SourceOptions = {}): CodePipelineSource {\n    return new S3Source(bucket, objectKey, props);\n  }\n\n  /**\n   * Returns an ECR source.\n   *\n   * @param repository The repository that will be watched for changes.\n   * @param props The options, which include the image tag to be checked for changes.\n   *\n   * @example\n   * declare const repository: ecr.IRepository;\n   * pipelines.CodePipelineSource.ecr(repository, {\n   *   imageTag: 'latest',\n   * });\n   */\n  public static ecr(repository: IRepository, props: ECRSourceOptions = {}): CodePipelineSource {\n    return new ECRSource(repository, props);\n  }\n\n  /**\n   * Returns a CodeStar connection source. A CodeStar connection allows AWS CodePipeline to\n   * access external resources, such as repositories in GitHub, GitHub Enterprise or\n   * BitBucket.\n   *\n   * To use this method, you first need to create a CodeStar connection\n   * using the AWS console. In the process, you may have to sign in to the external provider\n   * -- GitHub, for example -- to authorize AWS to read and modify your repository.\n   * Once you have done this, copy the connection ARN and use it to create the source.\n   *\n   * Example:\n   *\n   * ```ts\n   * pipelines.CodePipelineSource.connection('owner/repo', 'main', {\n   *   connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console\n   * });\n   * ```\n   *\n   * @param repoString A string that encodes owner and repository separated by a slash (e.g. 'owner/repo').\n   * @param branch The branch to use.\n   * @param props The source properties, including the connection ARN.\n   *\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html\n   */\n  public static connection(repoString: string, branch: string, props: ConnectionSourceOptions): CodePipelineSource {\n    return new CodeStarConnectionSource(repoString, branch, props);\n  }\n\n  /**\n   * Returns a CodeCommit source.\n   *\n   * @param repository The CodeCommit repository.\n   * @param branch The branch to use.\n   * @param props The source properties.\n   *\n   * @example\n   * declare const repository: codecommit.IRepository;\n   * pipelines.CodePipelineSource.codeCommit(repository, 'main');\n   */\n  public static codeCommit(repository: codecommit.IRepository, branch: string, props: CodeCommitSourceOptions = {}): CodePipelineSource {\n    return new CodeCommitSource(repository, branch, props);\n  }\n\n  // tells `PipelineGraph` to hoist a \"Source\" step\n  public readonly isSource = true;\n\n  public produceAction(stage: cp.IStage, options: ProduceActionOptions): CodePipelineActionFactoryResult {\n    const output = options.artifacts.toCodePipeline(this.primaryOutput!);\n\n    const action = this.getAction(output, options.actionName, options.runOrder, options.variablesNamespace);\n    stage.addAction(action);\n    return { runOrdersConsumed: 1 };\n  }\n\n  protected abstract getAction(output: Artifact, actionName: string, runOrder: number, variablesNamespace?: string): Action;\n\n  /**\n   * Return an attribute of the current source revision\n   *\n   * These values can be passed into the environment variables of pipeline steps,\n   * so your steps can access information about the source revision.\n   *\n   * Pipeline synth step has some source attributes predefined in the environment.\n   * If these suffice, you don't need to use this method for the synth step.\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n   *\n   * What attributes are available depends on the type of source. These attributes\n   * are supported:\n   *\n   * - GitHub, CodeCommit, and CodeStarSourceConnection\n   *   - `AuthorDate`\n   *   - `BranchName`\n   *   - `CommitId`\n   *   - `CommitMessage`\n   * - GitHub, CodeCommit and ECR\n   *   - `RepositoryName`\n   * - GitHub and CodeCommit\n   *   - `CommitterDate`\n   * - GitHub\n   *   - `CommitUrl`\n   * - CodeStarSourceConnection\n   *   - `FullRepositoryName`\n   * - S3\n   *   - `ETag`\n   *   - `VersionId`\n   * - ECR\n   *   - `ImageDigest`\n   *   - `ImageTag`\n   *   - `ImageURI`\n   *   - `RegistryId`\n   *\n   * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-variables.html#reference-variables-list\n   * @example\n   * // Access the CommitId of a GitHub source in the synth\n   * const source = pipelines.CodePipelineSource.gitHub('owner/repo', 'main');\n   *\n   * const pipeline = new pipelines.CodePipeline(scope, 'MyPipeline', {\n   *   synth: new pipelines.ShellStep('Synth', {\n   *     input: source,\n   *     commands: [],\n   *     env: {\n   *       'COMMIT_ID': source.sourceAttribute('CommitId'),\n   *     }\n   *   })\n   * });\n   */\n  public sourceAttribute(name: string): string {\n    return makeCodePipelineOutput(this, name);\n  }\n}\n\n/**\n * Options for GitHub sources\n */\nexport interface GitHubSourceOptions {\n  /**\n   * A GitHub OAuth token to use for authentication.\n   *\n   * It is recommended to use a Secrets Manager `Secret` to obtain the token:\n   *\n   * ```ts\n   * const oauth = cdk.SecretValue.secretsManager('my-github-token');\n   * ```\n   *\n   * The GitHub Personal Access Token should have these scopes:\n   *\n   * * **repo** - to read the repository\n   * * **admin:repo_hook** - if you plan to use webhooks (true by default)\n   *\n   * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/GitHub-create-personal-token-CLI.html\n   *\n   * @default - SecretValue.secretsManager('github-token')\n   */\n  readonly authentication?: SecretValue;\n\n  /**\n   * How AWS CodePipeline should be triggered\n   *\n   * With the default value \"WEBHOOK\", a webhook is created in GitHub that triggers the action.\n   * With \"POLL\", CodePipeline periodically checks the source for changes.\n   * With \"None\", the action is not triggered through changes in the source.\n   *\n   * To use `WEBHOOK`, your GitHub Personal Access Token should have\n   * **admin:repo_hook** scope (in addition to the regular **repo** scope).\n   *\n   * @default GitHubTrigger.WEBHOOK\n   */\n  readonly trigger?: GitHubTrigger;\n\n}\n\n/**\n * Extend CodePipelineSource so we can type-test in the CodePipelineEngine.\n */\nclass GitHubSource extends CodePipelineSource {\n  private readonly owner: string;\n  private readonly repo: string;\n  private readonly authentication: SecretValue;\n\n  constructor(repoString: string, readonly branch: string, readonly props: GitHubSourceOptions) {\n    super(repoString);\n\n    const parts = repoString.split('/');\n    if (Token.isUnresolved(repoString) || parts.length !== 2) {\n      throw new Error(`GitHub repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);\n    }\n    this.owner = parts[0];\n    this.repo = parts[1];\n    this.authentication = props.authentication ?? SecretValue.secretsManager('github-token');\n    this.configurePrimaryOutput(new FileSet('Source', this));\n  }\n\n  protected getAction(output: Artifact, actionName: string, runOrder: number, variablesNamespace?: string) {\n    return new cp_actions.GitHubSourceAction({\n      output,\n      actionName,\n      runOrder,\n      oauthToken: this.authentication,\n      owner: this.owner,\n      repo: this.repo,\n      branch: this.branch,\n      trigger: this.props.trigger,\n      variablesNamespace,\n    });\n  }\n}\n\n/**\n * Options for S3 sources\n */\nexport interface S3SourceOptions {\n  /**\n   * How should CodePipeline detect source changes for this Action.\n   * Note that if this is S3Trigger.EVENTS, you need to make sure to include the source Bucket in a CloudTrail Trail,\n   * as otherwise the CloudWatch Events will not be emitted.\n   *\n   * @default S3Trigger.POLL\n   * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/log-s3-data-events.html\n   */\n  readonly trigger?: S3Trigger;\n\n  /**\n   * The action name used for this source in the CodePipeline\n   *\n   * @default - The bucket name\n   */\n  readonly actionName?: string;\n}\n\nclass S3Source extends CodePipelineSource {\n  constructor(readonly bucket: IBucket, private readonly objectKey: string, readonly props: S3SourceOptions) {\n    super(Node.of(bucket).addr);\n\n    this.configurePrimaryOutput(new FileSet('Source', this));\n  }\n\n  protected getAction(output: Artifact, _actionName: string, runOrder: number, variablesNamespace?: string) {\n    return new cp_actions.S3SourceAction({\n      output,\n      // Bucket names are guaranteed to conform to ActionName restrictions\n      actionName: this.props.actionName ?? this.bucket.bucketName,\n      runOrder,\n      bucketKey: this.objectKey,\n      trigger: this.props.trigger,\n      bucket: this.bucket,\n      variablesNamespace,\n    });\n  }\n}\n\n/**\n * Options for ECR sources\n */\nexport interface ECRSourceOptions {\n  /**\n   * The image tag that will be checked for changes.\n   *\n   * @default latest\n   */\n  readonly imageTag?: string;\n\n  /**\n   * The action name used for this source in the CodePipeline\n   *\n   * @default - The repository name\n   */\n  readonly actionName?: string;\n}\n\nclass ECRSource extends CodePipelineSource {\n  constructor(readonly repository: IRepository, readonly props: ECRSourceOptions) {\n    super(Node.of(repository).addr);\n\n    this.configurePrimaryOutput(new FileSet('Source', this));\n  }\n\n  protected getAction(output: Artifact, _actionName: string, runOrder: number, variablesNamespace: string) {\n    // RepositoryName can contain '/' that is not a valid ActionName character, use '_' instead\n    const formattedRepositoryName = Fn.join('_', Fn.split('/', this.repository.repositoryName));\n    return new cp_actions.EcrSourceAction({\n      output,\n      actionName: this.props.actionName ?? formattedRepositoryName,\n      runOrder,\n      repository: this.repository,\n      imageTag: this.props.imageTag,\n      variablesNamespace,\n    });\n  }\n}\n\n/**\n * Configuration options for CodeStar source\n */\nexport interface ConnectionSourceOptions {\n  /**\n   * The ARN of the CodeStar Connection created in the AWS console\n   * that has permissions to access this GitHub or BitBucket repository.\n   *\n   * @example 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh'\n   * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/connections-create.html\n   */\n  readonly connectionArn: string;\n\n\n  // long URL in @see\n  /**\n   * Whether the output should be the contents of the repository\n   * (which is the default),\n   * or a link that allows CodeBuild to clone the repository before building.\n   *\n   * **Note**: if this option is true,\n   * then only CodeBuild actions can use the resulting {@link output}.\n   *\n   * @default false\n   * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html#action-reference-CodestarConnectionSource-config\n   */\n  readonly codeBuildCloneOutput?: boolean;\n\n  /**\n   * Controls automatically starting your pipeline when a new commit\n   * is made on the configured repository and branch. If unspecified,\n   * the default value is true, and the field does not display by default.\n   *\n   * @default true\n   * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html\n   */\n  readonly triggerOnPush?: boolean;\n}\n\nclass CodeStarConnectionSource extends CodePipelineSource {\n  private readonly owner: string;\n  private readonly repo: string;\n\n  constructor(repoString: string, readonly branch: string, readonly props: ConnectionSourceOptions) {\n    super(repoString);\n\n    const parts = repoString.split('/');\n    if (Token.isUnresolved(repoString) || parts.length !== 2) {\n      throw new Error(`CodeStar repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);\n    }\n    this.owner = parts[0];\n    this.repo = parts[1];\n    this.configurePrimaryOutput(new FileSet('Source', this));\n  }\n\n  protected getAction(output: Artifact, actionName: string, runOrder: number, variablesNamespace?: string) {\n    return new cp_actions.CodeStarConnectionsSourceAction({\n      output,\n      actionName,\n      runOrder,\n      connectionArn: this.props.connectionArn,\n      owner: this.owner,\n      repo: this.repo,\n      branch: this.branch,\n      codeBuildCloneOutput: this.props.codeBuildCloneOutput,\n      triggerOnPush: this.props.triggerOnPush,\n      variablesNamespace,\n    });\n  }\n}\n\n/**\n * Configuration options for a CodeCommit source\n */\nexport interface CodeCommitSourceOptions {\n  /**\n   * How should CodePipeline detect source changes for this Action.\n   *\n   * @default CodeCommitTrigger.EVENTS\n   */\n  readonly trigger?: CodeCommitTrigger;\n\n  /**\n   * Role to be used by on commit event rule.\n   * Used only when trigger value is CodeCommitTrigger.EVENTS.\n   *\n   * @default a new role will be created.\n   */\n  readonly eventRole?: iam.IRole;\n\n  /**\n   * Whether the output should be the contents of the repository\n   * (which is the default),\n   * or a link that allows CodeBuild to clone the repository before building.\n   *\n   * **Note**: if this option is true,\n   * then only CodeBuild actions can use the resulting {@link output}.\n   *\n   * @default false\n   * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodeCommit.html\n   */\n  readonly codeBuildCloneOutput?: boolean;\n}\n\nclass CodeCommitSource extends CodePipelineSource {\n  constructor(private readonly repository: codecommit.IRepository, private readonly branch: string, private readonly props: CodeCommitSourceOptions) {\n    super(Token.isUnresolved(repository.repositoryName)\n      ? Node.of(repository).addr\n      : repository.repositoryName);\n\n    this.configurePrimaryOutput(new FileSet('Source', this));\n  }\n\n  protected getAction(output: Artifact, _actionName: string, runOrder: number, variablesNamespace?: string) {\n    return new cp_actions.CodeCommitSourceAction({\n      output,\n      // Guaranteed to be okay as action name\n      actionName: this.repository.repositoryName,\n      runOrder,\n      branch: this.branch,\n      trigger: this.props.trigger,\n      repository: this.repository,\n      eventRole: this.props.eventRole,\n      codeBuildCloneOutput: this.props.codeBuildCloneOutput,\n      variablesNamespace,\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
