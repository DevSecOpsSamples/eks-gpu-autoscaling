{
  "version": 3,
  "sources": ["shell-step.ts"],
  "sourcesContent": ["import { CfnOutput, Stack } from '../../../core';\nimport { mapValues } from '../private/javascript';\nimport { FileSet, IFileSetProducer } from './file-set';\nimport { StackDeployment } from './stack-deployment';\nimport { Step } from './step';\n\n/**\n * Construction properties for a `ShellStep`.\n */\nexport interface ShellStepProps {\n  /**\n   * Commands to run\n   */\n  readonly commands: string[];\n\n  /**\n   * Installation commands to run before the regular commands\n   *\n   * For deployment engines that support it, install commands will be classified\n   * differently in the job history from the regular `commands`.\n   *\n   * @default - No installation commands\n   */\n  readonly installCommands?: string[];\n\n  /**\n   * Environment variables to set\n   *\n   * @default - No environment variables\n   */\n  readonly env?: Record<string, string>;\n\n  /**\n   * Set environment variables based on Stack Outputs\n   *\n   * `ShellStep`s following stack or stage deployments may\n   * access the `CfnOutput`s of those stacks to get access to\n   * --for example--automatically generated resource names or\n   * endpoint URLs.\n   *\n   * @default - No environment variables created from stack outputs\n   */\n  readonly envFromCfnOutputs?: Record<string, CfnOutput>;\n\n  /**\n   * FileSet to run these scripts on\n   *\n   * The files in the FileSet will be placed in the working directory when\n   * the script is executed. Use `additionalInputs` to download file sets\n   * to other directories as well.\n   *\n   * @default - No input specified\n   */\n  readonly input?: IFileSetProducer;\n\n  /**\n   * Additional FileSets to put in other directories\n   *\n   * Specifies a mapping from directory name to FileSets. During the\n   * script execution, the FileSets will be available in the directories\n   * indicated.\n   *\n   * The directory names may be relative. For example, you can put\n   * the main input and an additional input side-by-side with the\n   * following configuration:\n   *\n   * ```ts\n   * const script = new pipelines.ShellStep('MainScript', {\n   *   commands: ['npm ci','npm run build','npx cdk synth'],\n   *   input: pipelines.CodePipelineSource.gitHub('org/source1', 'main'),\n   *   additionalInputs: {\n   *     '../siblingdir': pipelines.CodePipelineSource.gitHub('org/source2', 'main'),\n   *   }\n   * });\n   * ```\n   *\n   * @default - No additional inputs\n   */\n  readonly additionalInputs?: Record<string, IFileSetProducer>;\n\n  /**\n   * The directory that will contain the primary output fileset\n   *\n   * After running the script, the contents of the given directory\n   * will be treated as the primary output of this Step.\n   *\n   * @default - No primary output\n   */\n  readonly primaryOutputDirectory?: string;\n}\n\n/**\n * Run shell script commands in the pipeline. This is a generic step designed\n * to be deployment engine agnostic.\n */\nexport class ShellStep extends Step {\n  /**\n   * Commands to run\n   */\n  public readonly commands: string[];\n\n  /**\n   * Installation commands to run before the regular commands\n   *\n   * For deployment engines that support it, install commands will be classified\n   * differently in the job history from the regular `commands`.\n   *\n   * @default - No installation commands\n   */\n  public readonly installCommands: string[];\n\n  /**\n   * Environment variables to set\n   *\n   * @default - No environment variables\n   */\n  public readonly env: Record<string, string>;\n\n  /**\n   * Set environment variables based on Stack Outputs\n   *\n   * @default - No environment variables created from stack outputs\n   */\n  public readonly envFromCfnOutputs: Record<string, StackOutputReference>;\n\n  /**\n   * Input FileSets\n   *\n   * A list of `(FileSet, directory)` pairs, which are a copy of the\n   * input properties. This list should not be modified directly.\n   */\n  public readonly inputs: FileSetLocation[] = [];\n\n  /**\n   * Output FileSets\n   *\n   * A list of `(FileSet, directory)` pairs, which are a copy of the\n   * input properties. This list should not be modified directly.\n   */\n  public readonly outputs: FileSetLocation[] = [];\n\n  private readonly _additionalOutputs: Record<string, FileSet> = {};\n\n  private _primaryOutputDirectory?: string;\n\n  constructor(id: string, props: ShellStepProps) {\n    super(id);\n\n    this.commands = props.commands;\n    this.installCommands = props.installCommands ?? [];\n    this.env = props.env ?? {};\n    this.envFromCfnOutputs = mapValues(props.envFromCfnOutputs ?? {}, StackOutputReference.fromCfnOutput);\n\n    // 'env' is the only thing that can contain outputs\n    this.discoverReferencedOutputs({\n      env: this.env,\n    });\n\n    // Inputs\n    if (props.input) {\n      const fileSet = props.input.primaryOutput;\n      if (!fileSet) {\n        throw new Error(`'${id}': primary input should be a step that has produced a file set, got ${props.input}`);\n      }\n      this.addDependencyFileSet(fileSet);\n      this.inputs.push({ directory: '.', fileSet });\n    }\n\n    for (const [directory, step] of Object.entries(props.additionalInputs ?? {})) {\n      if (directory === '.') {\n        throw new Error(`'${id}': input for directory '.' should be passed via 'input' property`);\n      }\n\n      const fileSet = step.primaryOutput;\n      if (!fileSet) {\n        throw new Error(`'${id}': additionalInput for directory '${directory}' should be a step that has produced a file set, got ${step}`);\n      }\n      this.addDependencyFileSet(fileSet);\n      this.inputs.push({ directory, fileSet });\n    }\n\n    // Outputs\n\n    if (props.primaryOutputDirectory) {\n      this._primaryOutputDirectory = props.primaryOutputDirectory;\n      const fileSet = new FileSet('Output', this);\n      this.configurePrimaryOutput(fileSet);\n      this.outputs.push({ directory: props.primaryOutputDirectory, fileSet });\n    }\n  }\n\n  /**\n   * Configure the given output directory as primary output\n   *\n   * If no primary output has been configured yet, this directory\n   * will become the primary output of this ShellStep, otherwise this\n   * method will throw if the given directory is different than the\n   * currently configured primary output directory.\n   */\n  public primaryOutputDirectory(directory: string): FileSet {\n    if (this._primaryOutputDirectory !== undefined) {\n      if (this._primaryOutputDirectory !== directory) {\n        throw new Error(`${this}: primaryOutputDirectory is '${this._primaryOutputDirectory}', cannot be changed to '${directory}'`);\n      }\n\n      return this.primaryOutput!;\n    }\n\n    this._primaryOutputDirectory = directory;\n    const fileSet = new FileSet('Output', this);\n    this.configurePrimaryOutput(fileSet);\n    this.outputs.push({ directory: directory, fileSet });\n    return fileSet;\n  }\n\n  /**\n   * Add an additional output FileSet based on a directory.\n   *\n   *\n   * After running the script, the contents of the given directory\n   * will be exported as a `FileSet`. Use the `FileSet` as the\n   * input to another step.\n   *\n   * Multiple calls with the exact same directory name string (not normalized)\n   * will return the same FileSet.\n   */\n  public addOutputDirectory(directory: string): FileSet {\n    let fileSet = this._additionalOutputs[directory];\n    if (!fileSet) {\n      fileSet = new FileSet(directory, this);\n      this._additionalOutputs[directory] = fileSet;\n      this.outputs.push({ directory, fileSet });\n    }\n    return fileSet;\n  }\n}\n\n/**\n * Location of a FileSet consumed or produced by a ShellStep\n */\nexport interface FileSetLocation {\n  /**\n   * The (relative) directory where the FileSet is found\n   */\n  readonly directory: string;\n\n  /**\n   * The FileSet object\n   */\n  readonly fileSet: FileSet;\n}\n\n/**\n * A Reference to a Stack Output\n */\nexport class StackOutputReference {\n  /**\n   * Create a StackOutputReference that references the given CfnOutput\n   */\n  public static fromCfnOutput(output: CfnOutput) {\n    const stack = Stack.of(output);\n    return new StackOutputReference(stack.node.path, stack.artifactId, stack.resolve(output.logicalId));\n  }\n\n  private constructor(\n    /** A human-readable description of the producing stack */\n    public readonly stackDescription: string,\n    /** Artifact id of the producing stack */\n    private readonly stackArtifactId: string,\n    /** Output name of the producing stack */\n    public readonly outputName: string) {\n  }\n\n  /**\n   * Whether or not this stack output is being produced by the given Stack deployment\n   */\n  public isProducedBy(stack: StackDeployment) {\n    return stack.stackArtifactId === this.stackArtifactId;\n  }\n}"],
  "mappings": "mPAAA,OAAA,QAAA,eAAA,EACA,aAAA,QAAA,uBAAA,EACA,WAAA,QAAA,YAAA,EAEA,OAAA,QAAA,QAAA,EA2FA,MAAa,iBAAkB,QAAA,IAAI,CAkDjC,YAAY,GAAY,MAAqB,iBAC3C,MAAM,EAAE,EAaR,GA5Bc,KAAA,OAA4B,CAAA,EAQ5B,KAAA,QAA6B,CAAA,EAE5B,KAAA,mBAA8C,CAAA,sEAO7D,KAAK,SAAW,MAAM,SACtB,KAAK,gBAAe,IAAG,MAAM,mBAAe,MAAA,KAAA,OAAA,GAAI,CAAA,EAChD,KAAK,IAAG,IAAG,MAAM,OAAG,MAAA,KAAA,OAAA,GAAI,CAAA,EACxB,KAAK,kBAAoB,aAAA,UAAS,IAAC,MAAM,qBAAiB,MAAA,KAAA,OAAA,GAAI,CAAA,EAAI,qBAAqB,aAAa,EAGpG,KAAK,0BAA0B,CAC7B,IAAK,KAAK,IACX,EAGG,MAAM,MAAO,CACf,KAAM,SAAU,MAAM,MAAM,cAC5B,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,IAAI,yEAAyE,MAAM,OAAO,EAE5G,KAAK,qBAAqB,OAAO,EACjC,KAAK,OAAO,KAAK,CAAE,UAAW,IAAK,OAAO,CAAE,EAG9C,SAAW,CAAC,UAAW,OAAS,QAAO,QAAO,IAAC,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAAI,CAAA,CAAE,EAAG,CAC5E,GAAI,YAAc,IAChB,KAAM,IAAI,OAAM,IAAI,oEAAoE,EAG1F,KAAM,SAAU,KAAK,cACrB,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,IAAI,uCAAuC,iEAAiE,MAAM,EAEpI,KAAK,qBAAqB,OAAO,EACjC,KAAK,OAAO,KAAK,CAAE,UAAW,OAAO,CAAE,EAKzC,GAAI,MAAM,uBAAwB,CAChC,KAAK,wBAA0B,MAAM,uBACrC,KAAM,SAAU,GAAI,YAAA,QAAQ,SAAU,IAAI,EAC1C,KAAK,uBAAuB,OAAO,EACnC,KAAK,QAAQ,KAAK,CAAE,UAAW,MAAM,uBAAwB,OAAO,CAAE,GAYnE,uBAAuB,UAAiB,CAC7C,GAAI,KAAK,0BAA4B,OAAW,CAC9C,GAAI,KAAK,0BAA4B,UACnC,KAAM,IAAI,OAAM,GAAG,oCAAoC,KAAK,mDAAmD,YAAY,EAG7H,MAAO,MAAK,cAGd,KAAK,wBAA0B,UAC/B,KAAM,SAAU,GAAI,YAAA,QAAQ,SAAU,IAAI,EAC1C,YAAK,uBAAuB,OAAO,EACnC,KAAK,QAAQ,KAAK,CAAE,UAAsB,OAAO,CAAE,EAC5C,QAcF,mBAAmB,UAAiB,CACzC,GAAI,SAAU,KAAK,mBAAmB,WACtC,MAAK,UACH,SAAU,GAAI,YAAA,QAAQ,UAAW,IAAI,EACrC,KAAK,mBAAmB,WAAa,QACrC,KAAK,QAAQ,KAAK,CAAE,UAAW,OAAO,CAAE,GAEnC,SA1IX,QAAA,UAAA,uGAgKA,MAAa,oBAAoB,CAS/B,YAEkB,iBAEC,gBAED,WAAkB,CAJlB,KAAA,iBAAA,iBAEC,KAAA,gBAAA,gBAED,KAAA,WAAA,iBAXJ,eAAc,OAAiB,uDAC3C,KAAM,OAAQ,OAAA,MAAM,GAAG,MAAM,EAC7B,MAAO,IAAI,sBAAqB,MAAM,KAAK,KAAM,MAAM,WAAY,MAAM,QAAQ,OAAO,SAAS,CAAC,EAe7F,aAAa,MAAsB,6EACjC,MAAM,kBAAoB,KAAK,iBAtB1C,QAAA,qBAAA",
  "names": []
}
