{
  "version": 3,
  "sources": ["stage-deployment.ts"],
  "sourcesContent": ["import * as cdk from '../../../core';\nimport { CloudFormationStackArtifact } from '../../../cx-api';\nimport { isStackArtifact } from '../private/cloud-assembly-internals';\nimport { pipelineSynth } from '../private/construct-internals';\nimport { StackDeployment } from './stack-deployment';\nimport { StackSteps, Step } from './step';\n\n/**\n * Properties for a `StageDeployment`\n */\nexport interface StageDeploymentProps {\n  /**\n   * Stage name to use in the pipeline\n   *\n   * @default - Use Stage's construct ID\n   */\n  readonly stageName?: string;\n\n  /**\n   * Additional steps to run before any of the stacks in the stage\n   *\n   * @default - No additional steps\n   */\n  readonly pre?: Step[];\n\n  /**\n   * Additional steps to run after all of the stacks in the stage\n   *\n   * @default - No additional steps\n   */\n  readonly post?: Step[];\n\n  /**\n   * Instructions for additional steps that are run at the stack level\n   *\n   * @default - No additional instructions\n   */\n  readonly stackSteps?: StackSteps[];\n}\n\n/**\n * Deployment of a single `Stage`\n *\n * A `Stage` consists of one or more `Stacks`, which will be\n * deployed in dependency order.\n */\nexport class StageDeployment {\n  /**\n   * Create a new `StageDeployment` from a `Stage`\n   *\n   * Synthesizes the target stage, and deployes the stacks found inside\n   * in dependency order.\n   */\n  public static fromStage(stage: cdk.Stage, props: StageDeploymentProps = {}) {\n    const assembly = pipelineSynth(stage);\n    if (assembly.stacks.length === 0) {\n      // If we don't check here, a more puzzling \"stage contains no actions\"\n      // error will be thrown come deployment time.\n      throw new Error(`The given Stage construct ('${stage.node.path}') should contain at least one Stack`);\n    }\n\n    const stepFromArtifact = new Map<CloudFormationStackArtifact, StackDeployment>();\n    for (const artifact of assembly.stacks) {\n      const step = StackDeployment.fromArtifact(artifact);\n      stepFromArtifact.set(artifact, step);\n    }\n    if (props.stackSteps) {\n      for (const stackstep of props.stackSteps) {\n        const stackArtifact = assembly.getStackArtifact(stackstep.stack.artifactId);\n        const thisStep = stepFromArtifact.get(stackArtifact);\n        if (!thisStep) {\n          throw new Error('Logic error: we just added a step for this artifact but it disappeared.');\n        }\n        thisStep.addStackSteps(stackstep.pre ?? [], stackstep.changeSet ?? [], stackstep.post ?? []);\n      }\n    }\n\n    for (const artifact of assembly.stacks) {\n      const thisStep = stepFromArtifact.get(artifact);\n      if (!thisStep) {\n        throw new Error('Logic error: we just added a step for this artifact but it disappeared.');\n      }\n\n      const stackDependencies = artifact.dependencies.filter(isStackArtifact);\n      for (const dep of stackDependencies) {\n        const depStep = stepFromArtifact.get(dep);\n        if (!depStep) {\n          throw new Error(`Stack '${artifact.id}' depends on stack not found in same Stage: '${dep.id}'`);\n        }\n        thisStep.addStackDependency(depStep);\n      }\n    }\n\n    return new StageDeployment(Array.from(stepFromArtifact.values()), {\n      stageName: stage.stageName,\n      ...props,\n    });\n  }\n\n  /**\n   * The display name of this stage\n   */\n  public readonly stageName: string;\n\n  /**\n   * Additional steps that are run before any of the stacks in the stage\n   */\n  public readonly pre: Step[];\n\n  /**\n   * Additional steps that are run after all of the stacks in the stage\n   */\n  public readonly post: Step[];\n\n  /**\n   * Instructions for additional steps that are run at stack level\n   */\n  public readonly stackSteps: StackSteps[];\n\n  private constructor(\n    /** The stacks deployed in this stage */\n    public readonly stacks: StackDeployment[], props: StageDeploymentProps = {}) {\n    this.stageName = props.stageName ?? '';\n    this.pre = props.pre ?? [];\n    this.post = props.post ?? [];\n    this.stackSteps = props.stackSteps ?? [];\n  }\n\n  /**\n   * Add an additional step to run before any of the stacks in this stage\n   */\n  public addPre(...steps: Step[]) {\n    this.pre.push(...steps);\n  }\n\n  /**\n   * Add an additional step to run after all of the stacks in this stage\n   */\n  public addPost(...steps: Step[]) {\n    this.post.push(...steps);\n  }\n}"],
  "mappings": "yNAEA,2BAAA,QAAA,qCAAA,EACA,sBAAA,QAAA,gCAAA,EACA,mBAAA,QAAA,oBAAA,EA0CA,MAAa,eAAe,CAyE1B,YAEkB,OAA2B,MAA8B,CAAA,EAAE,iBAA3D,KAAA,OAAA,OAChB,KAAK,UAAS,IAAG,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,GACpC,KAAK,IAAG,IAAG,MAAM,OAAG,MAAA,KAAA,OAAA,GAAI,CAAA,EACxB,KAAK,KAAI,IAAG,MAAM,QAAI,MAAA,KAAA,OAAA,GAAI,CAAA,EAC1B,KAAK,WAAU,IAAG,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,CAAA,QAxE1B,WAAU,MAAkB,MAA8B,CAAA,EAAE,yIACxE,KAAM,UAAW,sBAAA,cAAc,KAAK,EACpC,GAAI,SAAS,OAAO,SAAW,EAG7B,KAAM,IAAI,OAAM,+BAA+B,MAAM,KAAK,0CAA0C,EAGtG,KAAM,kBAAmB,GAAI,KAC7B,SAAW,YAAY,UAAS,OAAQ,CACtC,KAAM,MAAO,mBAAA,gBAAgB,aAAa,QAAQ,EAClD,iBAAiB,IAAI,SAAU,IAAI,EAErC,GAAI,MAAM,WACR,SAAW,aAAa,OAAM,WAAY,CACxC,KAAM,eAAgB,SAAS,iBAAiB,UAAU,MAAM,UAAU,EACpE,SAAW,iBAAiB,IAAI,aAAa,EACnD,GAAI,CAAC,SACH,KAAM,IAAI,OAAM,yEAAyE,EAE3F,SAAS,cAAa,IAAC,UAAU,OAAG,MAAA,KAAA,OAAA,GAAI,CAAA,EAAE,IAAE,UAAU,aAAS,MAAA,KAAA,OAAA,GAAI,CAAA,EAAE,IAAE,UAAU,QAAI,MAAA,KAAA,OAAA,GAAI,CAAA,CAAE,EAI/F,SAAW,YAAY,UAAS,OAAQ,CACtC,KAAM,UAAW,iBAAiB,IAAI,QAAQ,EAC9C,GAAI,CAAC,SACH,KAAM,IAAI,OAAM,yEAAyE,EAG3F,KAAM,mBAAoB,SAAS,aAAa,OAAO,2BAAA,eAAe,EACtE,SAAW,OAAO,mBAAmB,CACnC,KAAM,SAAU,iBAAiB,IAAI,GAAG,EACxC,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,UAAU,SAAS,kDAAkD,IAAI,KAAK,EAEhG,SAAS,mBAAmB,OAAO,GAIvC,MAAO,IAAI,iBAAgB,MAAM,KAAK,iBAAiB,OAAM,CAAE,EAAG,CAChE,UAAW,MAAM,aACd,MACJ,EAmCI,UAAU,MAAa,2DAC5B,KAAK,IAAI,KAAK,GAAG,KAAK,EAMjB,WAAW,MAAa,2DAC7B,KAAK,KAAK,KAAK,GAAG,KAAK,GA7F3B,QAAA,gBAAA",
  "names": []
}
