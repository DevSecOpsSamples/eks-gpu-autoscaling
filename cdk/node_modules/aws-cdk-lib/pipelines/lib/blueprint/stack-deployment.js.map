{
  "version": 3,
  "sources": ["stack-deployment.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport { parse as parseUrl } from 'url';\nimport * as cxapi from '../../../cx-api';\nimport { AssetManifestReader, DockerImageManifestEntry, FileManifestEntry } from '../private/asset-manifest';\nimport { isAssetManifest } from '../private/cloud-assembly-internals';\nimport { AssetType } from './asset-type';\nimport { Step } from './step';\n\n/**\n * Properties for a `StackDeployment`\n */\nexport interface StackDeploymentProps {\n  /**\n   * Artifact ID for this stack\n   */\n  readonly stackArtifactId: string;\n\n  /**\n   * Construct path for this stack\n   */\n  readonly constructPath: string;\n\n  /**\n   * Name for this stack\n   */\n  readonly stackName: string;\n\n  /**\n   * Region where the stack should be deployed\n   *\n   * @default - Pipeline region\n   */\n  readonly region?: string;\n\n  /**\n   * Account where the stack should be deployed\n   *\n   * @default - Pipeline account\n   */\n  readonly account?: string;\n\n  /**\n   * Role to assume before deploying this stack\n   *\n   * @default - Don't assume any role\n   */\n  readonly assumeRoleArn?: string;\n\n  /**\n   * Execution role to pass to CloudFormation\n   *\n   * @default - No execution role\n   */\n  readonly executionRoleArn?: string;\n\n  /**\n   * Tags to apply to the stack\n   *\n   * @default - No tags\n   */\n  readonly tags?: Record<string, string>;\n\n  /**\n   * Template path on disk to cloud assembly (cdk.out)\n   */\n  readonly absoluteTemplatePath: string;\n\n  /**\n   * Assets referenced by this stack\n   *\n   * @default - No assets\n   */\n  readonly assets?: StackAsset[];\n\n  /**\n   * The S3 URL which points to the template asset location in the publishing\n   * bucket.\n   *\n   * @default - Stack template is not published\n   */\n  readonly templateS3Uri?: string;\n}\n\n/**\n * Deployment of a single Stack\n *\n * You don't need to instantiate this class -- it will\n * be automatically instantiated as necessary when you\n * add a `Stage` to a pipeline.\n */\nexport class StackDeployment {\n  /**\n   * Build a `StackDeployment` from a Stack Artifact in a Cloud Assembly.\n   */\n  public static fromArtifact(stackArtifact: cxapi.CloudFormationStackArtifact): StackDeployment {\n    const artRegion = stackArtifact.environment.region;\n    const region = artRegion === cxapi.UNKNOWN_REGION ? undefined : artRegion;\n    const artAccount = stackArtifact.environment.account;\n    const account = artAccount === cxapi.UNKNOWN_ACCOUNT ? undefined : artAccount;\n\n    return new StackDeployment({\n      account,\n      region,\n      tags: stackArtifact.tags,\n      stackArtifactId: stackArtifact.id,\n      constructPath: stackArtifact.hierarchicalId,\n      stackName: stackArtifact.stackName,\n      absoluteTemplatePath: path.join(stackArtifact.assembly.directory, stackArtifact.templateFile),\n      assumeRoleArn: stackArtifact.assumeRoleArn,\n      executionRoleArn: stackArtifact.cloudFormationExecutionRoleArn,\n      assets: extractStackAssets(stackArtifact),\n      templateS3Uri: stackArtifact.stackTemplateAssetObjectUrl,\n    });\n  }\n\n  /**\n   * Artifact ID for this stack\n   */\n  public readonly stackArtifactId: string;\n\n  /**\n   * Construct path for this stack\n   */\n  public readonly constructPath: string;\n\n  /**\n   * Name for this stack\n   */\n  public readonly stackName: string;\n\n  /**\n   * Region where the stack should be deployed\n   *\n   * @default - Pipeline region\n   */\n  public readonly region?: string;\n\n  /**\n   * Account where the stack should be deployed\n   *\n   * @default - Pipeline account\n   */\n  public readonly account?: string;\n\n  /**\n   * Role to assume before deploying this stack\n   *\n   * @default - Don't assume any role\n   */\n  public readonly assumeRoleArn?: string;\n\n  /**\n   * Execution role to pass to CloudFormation\n   *\n   * @default - No execution role\n   */\n  public readonly executionRoleArn?: string;\n\n  /**\n   * Tags to apply to the stack\n   */\n  public readonly tags: Record<string, string>;\n\n  /**\n   * Assets referenced by this stack\n   */\n  public readonly assets: StackAsset[];\n\n  /**\n   * Other stacks this stack depends on\n   */\n  public readonly stackDependencies: StackDeployment[] = [];\n\n  /**\n   * The asset that represents the CloudFormation template for this stack.\n   */\n  public readonly templateAsset?: StackAsset;\n\n  /**\n   * The S3 URL which points to the template asset location in the publishing\n   * bucket.\n   *\n   * This is `undefined` if the stack template is not published. Use the\n   * `DefaultStackSynthesizer` to ensure it is.\n   *\n   * Example value: `https://bucket.s3.amazonaws.com/object/key`\n   */\n  public readonly templateUrl?: string;\n\n  /**\n   * Template path on disk to CloudAssembly\n   */\n  public readonly absoluteTemplatePath: string;\n\n  /**\n   * Steps that take place before stack is prepared. If your pipeline engine disables 'prepareStep', then this will happen before stack deploys\n   */\n  public readonly pre: Step[] = [];\n\n  /**\n   * Steps that take place after stack is prepared but before stack deploys. Your pipeline engine may not disable `prepareStep`.\n   */\n  public readonly changeSet: Step[] = [];\n\n  /**\n   * Steps to execute after stack deploys\n   */\n  public readonly post: Step[] = [];\n\n  private constructor(props: StackDeploymentProps) {\n    this.stackArtifactId = props.stackArtifactId;\n    this.constructPath = props.constructPath;\n    this.account = props.account;\n    this.region = props.region;\n    this.tags = props.tags ?? {};\n    this.assumeRoleArn = props.assumeRoleArn;\n    this.executionRoleArn = props.executionRoleArn;\n    this.stackName = props.stackName;\n    this.absoluteTemplatePath = props.absoluteTemplatePath;\n    this.templateUrl = props.templateS3Uri ? s3UrlFromUri(props.templateS3Uri, props.region) : undefined;\n\n    this.assets = new Array<StackAsset>();\n\n    for (const asset of props.assets ?? []) {\n      if (asset.isTemplate) {\n        this.templateAsset = asset;\n      } else {\n        this.assets.push(asset);\n      }\n    }\n  }\n\n  /**\n   * Add a dependency on another stack\n   */\n  public addStackDependency(stackDeployment: StackDeployment) {\n    this.stackDependencies.push(stackDeployment);\n  }\n\n  /**\n   * Adds steps to each phase of the stack\n   * @param pre steps executed before stack.prepare\n   * @param changeSet steps executed after stack.prepare and before stack.deploy\n   * @param post steps executed after stack.deploy\n   */\n  public addStackSteps(pre: Step[], changeSet: Step[], post: Step[]) {\n    this.pre.push(...pre);\n    this.changeSet.push(...changeSet);\n    this.post.push(...post);\n  }\n}\n\n/**\n * An asset used by a Stack\n */\nexport interface StackAsset {\n  /**\n   * Absolute asset manifest path\n   *\n   * This needs to be made relative at a later point in time, but when this\n   * information is parsed we don't know about the root cloud assembly yet.\n   */\n  readonly assetManifestPath: string;\n\n  /**\n   * Asset identifier\n   */\n  readonly assetId: string;\n\n  /**\n   * Asset selector to pass to `cdk-assets`.\n   */\n  readonly assetSelector: string;\n\n  /**\n   * Type of asset to publish\n   */\n  readonly assetType: AssetType;\n\n  /**\n   * Role ARN to assume to publish\n   *\n   * @default - No need to assume any role\n   */\n  readonly assetPublishingRoleArn?: string;\n\n  /**\n   * Does this asset represent the CloudFormation template for the stack\n   *\n   * @default false\n   */\n  readonly isTemplate: boolean;\n}\n\nfunction extractStackAssets(stackArtifact: cxapi.CloudFormationStackArtifact): StackAsset[] {\n  const ret = new Array<StackAsset>();\n\n  const assetManifests = stackArtifact.dependencies.filter(isAssetManifest);\n  for (const manifestArtifact of assetManifests) {\n    const manifest = AssetManifestReader.fromFile(manifestArtifact.file);\n\n    for (const entry of manifest.entries) {\n      let assetType: AssetType;\n      let isTemplate = false;\n\n      if (entry instanceof DockerImageManifestEntry) {\n        assetType = AssetType.DOCKER_IMAGE;\n      } else if (entry instanceof FileManifestEntry) {\n        isTemplate = entry.source.packaging === 'file' && entry.source.path === stackArtifact.templateFile;\n        assetType = AssetType.FILE;\n      } else {\n        throw new Error(`Unrecognized asset type: ${entry.type}`);\n      }\n\n      ret.push({\n        assetManifestPath: manifestArtifact.file,\n        assetId: entry.id.assetId,\n        assetSelector: entry.id.toString(),\n        assetType,\n        assetPublishingRoleArn: entry.destination.assumeRoleArn,\n        isTemplate,\n      });\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Takes an s3://bucket/object-key uri and returns a region-aware https:// url for it\n *\n * @param uri The s3 URI\n * @param region The region (if undefined, we will return the global endpoint)\n * @see https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#virtual-hosted-style-access\n */\nfunction s3UrlFromUri(uri: string, region: string | undefined) {\n  const url = parseUrl(uri);\n  return `https://${url.hostname}.s3.${region ? `${region}.` : ''}amazonaws.com${url.path}`;\n}"],
  "mappings": "yNAAA,KAAA,QAAA,MAAA,EACA,MAAA,QAAA,KAAA,EACA,MAAA,QAAA,iBAAA,EACA,iBAAA,QAAA,2BAAA,EACA,2BAAA,QAAA,qCAAA,EACA,aAAA,QAAA,cAAA,EAqFA,MAAa,eAAe,CAuH1B,YAAoB,MAA2B,WAtC/B,KAAA,kBAAuC,CAAA,EA0BvC,KAAA,IAAc,CAAA,EAKd,KAAA,UAAoB,CAAA,EAKpB,KAAA,KAAe,CAAA,EAG7B,KAAK,gBAAkB,MAAM,gBAC7B,KAAK,cAAgB,MAAM,cAC3B,KAAK,QAAU,MAAM,QACrB,KAAK,OAAS,MAAM,OACpB,KAAK,KAAI,IAAG,MAAM,QAAI,MAAA,KAAA,OAAA,GAAI,CAAA,EAC1B,KAAK,cAAgB,MAAM,cAC3B,KAAK,iBAAmB,MAAM,iBAC9B,KAAK,UAAY,MAAM,UACvB,KAAK,qBAAuB,MAAM,qBAClC,KAAK,YAAc,MAAM,cAAgB,aAAa,MAAM,cAAe,MAAM,MAAM,EAAI,OAE3F,KAAK,OAAS,GAAI,OAElB,SAAW,SAAK,IAAI,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,CAAA,EAClC,AAAI,MAAM,WACR,KAAK,cAAgB,MAErB,KAAK,OAAO,KAAK,KAAK,QArId,cAAa,cAAgD,uFACzE,KAAM,WAAY,cAAc,YAAY,OACtC,OAAS,YAAc,MAAM,eAAiB,OAAY,UAC1D,WAAa,cAAc,YAAY,QACvC,QAAU,aAAe,MAAM,gBAAkB,OAAY,WAEnE,MAAO,IAAI,iBAAgB,CACzB,QACA,OACA,KAAM,cAAc,KACpB,gBAAiB,cAAc,GAC/B,cAAe,cAAc,eAC7B,UAAW,cAAc,UACzB,qBAAsB,KAAK,KAAK,cAAc,SAAS,UAAW,cAAc,YAAY,EAC5F,cAAe,cAAc,cAC7B,iBAAkB,cAAc,+BAChC,OAAQ,mBAAmB,aAAa,EACxC,cAAe,cAAc,4BAC9B,EA2HI,mBAAmB,gBAAgC,gFACxD,KAAK,kBAAkB,KAAK,eAAe,EAStC,cAAc,IAAa,UAAmB,KAAY,CAC/D,KAAK,IAAI,KAAK,GAAG,GAAG,EACpB,KAAK,UAAU,KAAK,GAAG,SAAS,EAChC,KAAK,KAAK,KAAK,GAAG,IAAI,GA9J1B,QAAA,gBAAA,yHA4MA,4BAA4B,cAAgD,CAC1E,KAAM,KAAM,GAAI,OAEV,eAAiB,cAAc,aAAa,OAAO,2BAAA,eAAe,EACxE,SAAW,oBAAoB,gBAAgB,CAC7C,KAAM,UAAW,iBAAA,oBAAoB,SAAS,iBAAiB,IAAI,EAEnE,SAAW,SAAS,UAAS,QAAS,CACpC,GAAI,WACA,WAAa,GAEjB,GAAI,gBAAiB,kBAAA,yBACnB,UAAY,aAAA,UAAU,qBACb,gBAAiB,kBAAA,kBAC1B,WAAa,MAAM,OAAO,YAAc,QAAU,MAAM,OAAO,OAAS,cAAc,aACtF,UAAY,aAAA,UAAU,SAEtB,MAAM,IAAI,OAAM,4BAA4B,MAAM,MAAM,EAG1D,IAAI,KAAK,CACP,kBAAmB,iBAAiB,KACpC,QAAS,MAAM,GAAG,QAClB,cAAe,MAAM,GAAG,SAAQ,EAChC,UACA,uBAAwB,MAAM,YAAY,cAC1C,WACD,GAIL,MAAO,IACT,CASA,sBAAsB,IAAa,OAA0B,CAC3D,KAAM,KAAM,MAAA,MAAS,GAAG,EACxB,MAAO,WAAW,IAAI,eAAe,OAAS,GAAG,UAAY,kBAAkB,IAAI,MACrF",
  "names": []
}
