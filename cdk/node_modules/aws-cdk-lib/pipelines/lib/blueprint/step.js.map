{
  "version": 3,
  "sources": ["step.ts"],
  "sourcesContent": ["import { Stack, Token } from '../../../core';\nimport { StepOutput } from '../helpers-internal/step-output';\nimport { FileSet, IFileSetProducer } from './file-set';\n\n/**\n * A generic Step which can be added to a Pipeline\n *\n * Steps can be used to add Sources, Build Actions and Validations\n * to your pipeline.\n *\n * This class is abstract. See specific subclasses of Step for\n * useful steps to add to your Pipeline\n */\nexport abstract class Step implements IFileSetProducer {\n  /**\n   * Define a sequence of steps to be executed in order.\n   *\n   * If you need more fine-grained step ordering, use the `addStepDependency()`\n   * API. For example, if you want `secondStep` to occur after `firstStep`, call\n   * `secondStep.addStepDependency(firstStep)`.\n   */\n  public static sequence(steps: Step[]): Step[] {\n    for (let i = 1; i < steps.length; i++) {\n      steps[i].addStepDependency(steps[i-1]);\n    }\n    return steps;\n  }\n\n  /**\n   * The list of FileSets consumed by this Step\n   */\n  public readonly dependencyFileSets: FileSet[] = [];\n\n  /**\n   * Whether or not this is a Source step\n   *\n   * What it means to be a Source step depends on the engine.\n   */\n  public readonly isSource: boolean = false;\n\n  private _primaryOutput?: FileSet;\n\n  private _dependencies = new Set<Step>();\n\n  constructor(\n    /** Identifier for this step */\n    public readonly id: string) {\n\n    if (Token.isUnresolved(id)) {\n      throw new Error(`Step id cannot be unresolved, got '${id}'`);\n    }\n  }\n\n  /**\n   * Return the steps this step depends on, based on the FileSets it requires\n   */\n  public get dependencies(): Step[] {\n    return Array.from(new Set([\n      ...this.dependencyFileSets.map(f => f.producer),\n      ...this._dependencies,\n    ]));\n  }\n\n  /**\n   * Return a string representation of this Step\n   */\n  public toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  /**\n   * The primary FileSet produced by this Step\n   *\n   * Not all steps produce an output FileSet--if they do\n   * you can substitute the `Step` object for the `FileSet` object.\n   */\n  public get primaryOutput(): FileSet | undefined {\n    // Accessor so it can be mutable in children\n    return this._primaryOutput;\n  }\n\n  /**\n   * Add a dependency on another step.\n   */\n  public addStepDependency(step: Step) {\n    this._dependencies.add(step);\n  }\n\n  /**\n   * Add an additional FileSet to the set of file sets required by this step\n   *\n   * This will lead to a dependency on the producer of that file set.\n   */\n  protected addDependencyFileSet(fs: FileSet) {\n    this.dependencyFileSets.push(fs);\n  }\n\n  /**\n   * Configure the given FileSet as the primary output of this step\n   */\n  protected configurePrimaryOutput(fs: FileSet) {\n    this._primaryOutput = fs;\n  }\n\n  /**\n   * Crawl the given structure for references to StepOutputs and add dependencies on all steps found\n   *\n   * Should be called in the constructor of subclasses based on what the user\n   * passes in as construction properties. The format of the structure passed in\n   * here does not have to correspond exactly to what gets rendered into the\n   * engine, it just needs to contain the same data.\n   */\n  protected discoverReferencedOutputs(structure: any) {\n    for (const output of StepOutput.findAll(structure)) {\n      this._dependencies.add(output.step);\n      StepOutput.recordProducer(output);\n    }\n  }\n}\n\n/**\n * Instructions for additional steps that are run at stack level\n */\nexport interface StackSteps {\n  /**\n   * The stack you want the steps to run in\n   */\n  readonly stack: Stack;\n\n  /**\n   * Steps that execute before stack is prepared\n   *\n   * @default - no additional steps\n   */\n  readonly pre?: Step[];\n\n  /**\n   * Steps that execute after stack is prepared but before stack is deployed\n   *\n   * @default - no additional steps\n   */\n  readonly changeSet?: Step[];\n\n  /**\n   * Steps that execute after stack is deployed\n   *\n   * @default - no additional steps\n   */\n  readonly post?: Step[];\n}"],
  "mappings": "8MAAA,OAAA,QAAA,eAAA,EACA,cAAA,QAAA,iCAAA,EAYA,MAAsB,IAAI,CA+BxB,YAEkB,GAAU,CAE1B,GAFgB,KAAA,GAAA,GAfF,KAAA,mBAAgC,CAAA,EAOhC,KAAA,SAAoB,GAI5B,KAAA,cAAgB,GAAI,KAMtB,OAAA,MAAM,aAAa,EAAE,EACvB,KAAM,IAAI,OAAM,sCAAsC,KAAK,QA5BjD,UAAS,MAAa,CAClC,OAAS,GAAI,EAAG,EAAI,MAAM,OAAQ,IAChC,MAAM,GAAG,kBAAkB,MAAM,EAAE,EAAE,EAEvC,MAAO,UA+BE,eAAY,CACrB,MAAO,OAAM,KAAK,GAAI,KAAI,CACxB,GAAG,KAAK,mBAAmB,IAAI,GAAK,EAAE,QAAQ,EAC9C,GAAG,KAAK,cACT,CAAC,EAMG,UAAQ,CACb,MAAO,GAAG,KAAK,YAAY,QAAQ,KAAK,SAS/B,gBAAa,CAEtB,MAAO,MAAK,eAMP,kBAAkB,KAAU,0DACjC,KAAK,cAAc,IAAI,IAAI,EAQnB,qBAAqB,GAAW,2DACxC,KAAK,mBAAmB,KAAK,EAAE,EAMvB,uBAAuB,GAAW,2DAC1C,KAAK,eAAiB,GAWd,0BAA0B,UAAc,CAChD,SAAW,UAAU,eAAA,WAAW,QAAQ,SAAS,EAC/C,KAAK,cAAc,IAAI,OAAO,IAAI,EAClC,cAAA,WAAW,eAAe,MAAM,GAtGtC,QAAA,KAAA",
  "names": []
}
