{
  "version": 3,
  "sources": ["asset-singleton-role.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport { PolicyStatement } from '../../../aws-iam';\nimport { ArnFormat, Stack } from '../../../core';\nimport { Construct, IDependable } from 'constructs';\n\n/**\n * Role which will be reused across asset jobs\n *\n * Has some '*' resources to save IAM policy space, and will not\n * actually add policies that look like policies that were already added.\n */\nexport class AssetSingletonRole extends iam.Role {\n  private _rejectDuplicates = false;\n\n  constructor(scope: Construct, id: string, props: iam.RoleProps) {\n    super(scope, id, props);\n\n    // Logging permissions\n    this.addToPolicy(new iam.PolicyStatement({\n      resources: [Stack.of(this).formatArn({\n        service: 'logs',\n        resource: 'log-group',\n        arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n        resourceName: '/aws/codebuild/*',\n      })],\n      actions: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],\n    }));\n\n    // CodeBuild report groups\n    this.addToPolicy(new iam.PolicyStatement({\n      actions: [\n        'codebuild:CreateReportGroup',\n        'codebuild:CreateReport',\n        'codebuild:UpdateReport',\n        'codebuild:BatchPutTestCases',\n        'codebuild:BatchPutCodeCoverages',\n      ],\n      resources: [Stack.of(this).formatArn({\n        service: 'codebuild',\n        resource: 'report-group',\n        resourceName: '*',\n      })],\n    }));\n\n    // CodeBuild start/stop\n    this.addToPolicy(new iam.PolicyStatement({\n      resources: ['*'],\n      actions: [\n        'codebuild:BatchGetBuilds',\n        'codebuild:StartBuild',\n        'codebuild:StopBuild',\n      ],\n    }));\n\n    this._rejectDuplicates = true;\n  }\n\n  public addToPrincipalPolicy(statement: PolicyStatement): iam.AddToPrincipalPolicyResult {\n    const json = statement.toStatementJson();\n    const acts = JSON.stringify(json.Action);\n\n    // These have already been added with wildcard resources on creation\n    const alreadyAdded = [\n      '[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"]',\n      '[\"codebuild:CreateReportGroup\",\"codebuild:CreateReport\",\"codebuild:UpdateReport\",\"codebuild:BatchPutTestCases\",\"codebuild:BatchPutCodeCoverages\"]',\n      '[\"codebuild:BatchGetBuilds\",\"codebuild:StartBuild\",\"codebuild:StopBuild\"]',\n    ];\n\n    if (this._rejectDuplicates && alreadyAdded.includes(acts)) {\n      // Pretend we did it\n      return { statementAdded: true, policyDependable: new class implements IDependable { } };\n    }\n\n    // These are added in duplicate (specifically these come from\n    // Project#bindToCodePipeline) -- the original singleton asset role didn't\n    // have these, and they're not necessary either, so in order to not cause\n    // unnecessary diffs, recognize and drop them there as well.\n    if (acts === '[\"kms:Decrypt\",\"kms:Encrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey*\"]') {\n      // Pretend we did it\n      return { statementAdded: true, policyDependable: new class implements IDependable { } };\n    }\n\n    return super.addToPrincipalPolicy(statement);\n  }\n}\n"],
  "mappings": "sGAAA,KAAA,KAAA,QAAA,kBAAA,EAEA,OAAA,QAAA,eAAA,EASA,MAAa,0BAA2B,KAAI,IAAI,CAG9C,YAAY,MAAkB,GAAY,MAAoB,CAC5D,MAAM,MAAO,GAAI,KAAK,EAHhB,KAAA,kBAAoB,GAM1B,KAAK,YAAY,GAAI,KAAI,gBAAgB,CACvC,UAAW,CAAC,OAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CACnC,QAAS,OACT,SAAU,YACV,UAAW,OAAA,UAAU,oBACrB,aAAc,mBACf,CAAC,EACF,QAAS,CAAC,sBAAuB,uBAAwB,mBAAmB,EAC7E,CAAC,EAGF,KAAK,YAAY,GAAI,KAAI,gBAAgB,CACvC,QAAS,CACP,8BACA,yBACA,yBACA,8BACA,mCAEF,UAAW,CAAC,OAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CACnC,QAAS,YACT,SAAU,eACV,aAAc,IACf,CAAC,EACH,CAAC,EAGF,KAAK,YAAY,GAAI,KAAI,gBAAgB,CACvC,UAAW,CAAC,GAAG,EACf,QAAS,CACP,2BACA,uBACA,uBAEH,CAAC,EAEF,KAAK,kBAAoB,GAGpB,qBAAqB,UAA0B,CACpD,KAAM,MAAO,UAAU,gBAAe,EAChC,KAAO,KAAK,UAAU,KAAK,MAAM,EAGjC,aAAe,CACnB,qEACA,oJACA,6EAGF,MAAI,MAAK,mBAAqB,aAAa,SAAS,IAAI,EAE/C,CAAE,eAAgB,GAAM,iBAAkB,GAAI,MAAA,EAAgC,EAOnF,OAAS,wEAEJ,CAAE,eAAgB,GAAM,iBAAkB,GAAI,MAAA,EAAgC,EAGhF,MAAM,qBAAqB,SAAS,GAvE/C,QAAA,mBAAA",
  "names": []
}
