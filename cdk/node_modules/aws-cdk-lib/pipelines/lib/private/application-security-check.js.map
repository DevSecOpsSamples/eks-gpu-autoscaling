{
  "version": 3,
  "sources": ["application-security-check.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as codebuild from '../../../aws-codebuild';\nimport * as cp from '../../../aws-codepipeline';\nimport * as iam from '../../../aws-iam';\nimport * as lambda from '../../../aws-lambda';\nimport { Duration, Tags } from '../../../core';\nimport { Construct } from 'constructs';\n\n/**\n * Properties for an ApplicationSecurityCheck\n */\nexport interface ApplicationSecurityCheckProps {\n  /**\n   * The pipeline that will be automatically approved\n   *\n   * Will have a tag added to it.\n   */\n  readonly codePipeline: cp.Pipeline;\n}\n\n/**\n * A construct containing both the Lambda and CodeBuild Project\n * needed to conduct a security check on any given application stage.\n *\n * The Lambda acts as an auto approving mechanism that should only be\n * triggered when the CodeBuild Project registers no security changes.\n *\n * The CodeBuild Project runs a security diff on the application stage,\n * and exports the link to the console of the project.\n */\nexport class ApplicationSecurityCheck extends Construct {\n  /**\n   * A lambda function that approves a Manual Approval Action, given\n   * the following payload:\n   *\n   * {\n   *  \"PipelineName\": [CodePipelineName],\n   *  \"StageName\": [CodePipelineStageName],\n   *  \"ActionName\": [ManualApprovalActionName]\n   * }\n   */\n  public readonly preApproveLambda: lambda.Function;\n  /**\n   * A CodeBuild Project that runs a security diff on the application stage.\n   *\n   * - If the diff registers no security changes, CodeBuild will invoke the\n   *   pre-approval lambda and approve the ManualApprovalAction.\n   * - If changes are detected, CodeBuild will exit into a ManualApprovalAction\n   */\n  public readonly cdkDiffProject: codebuild.Project;\n\n  constructor(scope: Construct, id: string, props: ApplicationSecurityCheckProps) {\n    super(scope, id);\n\n    Tags.of(props.codePipeline).add('SECURITY_CHECK', 'ALLOW_APPROVE', {\n      includeResourceTypes: ['AWS::CodePipeline::Pipeline'],\n    });\n\n    this.preApproveLambda = new lambda.Function(this, 'CDKPipelinesAutoApprove', {\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_12_X,\n      code: lambda.Code.fromAsset(path.resolve(__dirname, 'approve-lambda')),\n      timeout: Duration.minutes(5),\n    });\n\n    this.preApproveLambda.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['codepipeline:GetPipelineState', 'codepipeline:PutApprovalResult'],\n      conditions: {\n        StringEquals: {\n          'aws:ResourceTag/SECURITY_CHECK': 'ALLOW_APPROVE',\n        },\n      },\n      resources: ['*'],\n    }));\n\n    const invokeLambda =\n      'aws lambda invoke' +\n      ` --function-name ${this.preApproveLambda.functionName}` +\n      ' --invocation-type Event' +\n      ' --payload \"$payload\"' +\n      ' lambda.out';\n\n    const message = [\n      'An upcoming change would broaden security changes in $PIPELINE_NAME.',\n      'Review and approve the changes in CodePipeline to proceed with the deployment.',\n      '',\n      'Review the changes in CodeBuild:',\n      '',\n      '$LINK',\n      '',\n      'Approve the changes in CodePipeline (stage $STAGE_NAME, action $ACTION_NAME):',\n      '',\n      '$PIPELINE_LINK',\n    ];\n    const publishNotification =\n      'aws sns publish' +\n      ' --topic-arn $NOTIFICATION_ARN' +\n      ' --subject \"$NOTIFICATION_SUBJECT\"' +\n      ` --message \"${message.join('\\n')}\"`;\n\n    this.cdkDiffProject = new codebuild.Project(this, 'CDKSecurityCheck', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: 0.2,\n        phases: {\n          build: {\n            commands: [\n              'npm install -g aws-cdk',\n              // $CODEBUILD_INITIATOR will always be Code Pipeline and in the form of:\n              // \"codepipeline/example-pipeline-name-Xxx\"\n              'export PIPELINE_NAME=\"$(node -pe \\'`${process.env.CODEBUILD_INITIATOR}`.split(\"/\")[1]\\')\"',\n              'payload=\"$(node -pe \\'JSON.stringify({ \"PipelineName\": process.env.PIPELINE_NAME, \"StageName\": process.env.STAGE_NAME, \"ActionName\": process.env.ACTION_NAME })\\' )\"',\n              // ARN: \"arn:aws:codebuild:$region:$account_id:build/$project_name:$project_execution_id$\"\n              'ARN=$CODEBUILD_BUILD_ARN',\n              'REGION=\"$(node -pe \\'`${process.env.ARN}`.split(\":\")[3]\\')\"',\n              'ACCOUNT_ID=\"$(node -pe \\'`${process.env.ARN}`.split(\":\")[4]\\')\"',\n              'PROJECT_NAME=\"$(node -pe \\'`${process.env.ARN}`.split(\":\")[5].split(\"/\")[1]\\')\"',\n              'PROJECT_ID=\"$(node -pe \\'`${process.env.ARN}`.split(\":\")[6]\\')\"',\n              // Manual Approval adds 'http/https' to the resolved link\n              'export LINK=\"https://$REGION.console.aws.amazon.com/codesuite/codebuild/$ACCOUNT_ID/projects/$PROJECT_NAME/build/$PROJECT_NAME:$PROJECT_ID/?region=$REGION\"',\n              'export PIPELINE_LINK=\"https://$REGION.console.aws.amazon.com/codesuite/codepipeline/pipelines/$PIPELINE_NAME/view?region=$REGION\"',\n              // Run invoke only if cdk diff passes (returns exit code 0)\n              // 0 -> true, 1 -> false\n              ifElse({\n                condition: 'cdk diff -a . --security-only --fail $STAGE_PATH/\\\\*',\n                thenStatements: [\n                  invokeLambda,\n                  'export MESSAGE=\"No security-impacting changes detected.\"',\n                ],\n                elseStatements: [\n                  `[ -z \"\\${NOTIFICATION_ARN}\" ] || ${publishNotification}`,\n                  'export MESSAGE=\"Deployment would make security-impacting changes. Click the link below to inspect them, then click Approve if all changes are expected.\"',\n                ],\n              }),\n            ],\n          },\n        },\n        env: {\n          'exported-variables': [\n            'LINK',\n            'MESSAGE',\n          ],\n        },\n      }),\n    });\n\n    // this is needed to check the status the stacks when doing `cdk diff`\n    this.cdkDiffProject.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['sts:AssumeRole'],\n      resources: ['*'],\n      conditions: {\n        'ForAnyValue:StringEquals': {\n          'iam:ResourceTag/aws-cdk:bootstrap-role': ['deploy'],\n        },\n      },\n    }));\n\n    this.preApproveLambda.grantInvoke(this.cdkDiffProject);\n  }\n}\n\ninterface ifElseOptions {\n  readonly condition: string,\n  readonly thenStatements: string[],\n  readonly elseStatements?: string[]\n}\n\nconst ifElse = ({ condition, thenStatements, elseStatements }: ifElseOptions): string => {\n  let statement = thenStatements.reduce((acc, ifTrue) => {\n    return `${acc} ${ifTrue};`;\n  }, `if ${condition}; then`);\n\n  if (elseStatements) {\n    statement = elseStatements.reduce((acc, ifFalse) => {\n      return `${acc} ${ifFalse};`;\n    }, `${statement} else`);\n  }\n\n  return `${statement} fi`;\n};\n"],
  "mappings": "4GAAA,KAAA,MAAA,QAAA,MAAA,EACA,UAAA,QAAA,wBAAA,EAEA,IAAA,QAAA,kBAAA,EACA,OAAA,QAAA,qBAAA,EACA,OAAA,QAAA,eAAA,EACA,aAAA,QAAA,YAAA,EAwBA,MAAa,gCAAiC,cAAA,SAAS,CAqBrD,YAAY,MAAkB,GAAY,MAAoC,CAC5E,MAAM,MAAO,EAAE,EAEf,OAAA,KAAK,GAAG,MAAM,YAAY,EAAE,IAAI,iBAAkB,gBAAiB,CACjE,qBAAsB,CAAC,6BAA6B,EACrD,EAED,KAAK,iBAAmB,GAAI,QAAO,SAAS,KAAM,0BAA2B,CAC3E,QAAS,gBACT,QAAS,OAAO,QAAQ,YACxB,KAAM,OAAO,KAAK,UAAU,KAAK,QAAQ,UAAW,gBAAgB,CAAC,EACrE,QAAS,OAAA,SAAS,QAAQ,CAAC,EAC5B,EAED,KAAK,iBAAiB,gBAAgB,GAAI,KAAI,gBAAgB,CAC5D,QAAS,CAAC,gCAAiC,gCAAgC,EAC3E,WAAY,CACV,aAAc,CACZ,iCAAkC,kBAGtC,UAAW,CAAC,GAAG,EAChB,CAAC,EAEF,KAAM,cACJ,qCACoB,KAAK,iBAAiB,uEAiBtC,oBACJ,8FAGe,AAhBD,CACd,uEACA,iFACA,GACA,mCACA,GACA,QACA,GACA,gFACA,GACA,kBAMuB,KAAK;CAAI,KAElC,KAAK,eAAiB,GAAI,WAAU,QAAQ,KAAM,mBAAoB,CACpE,UAAW,UAAU,UAAU,WAAW,CACxC,QAAS,GACT,OAAQ,CACN,MAAO,CACL,SAAU,CACR,yBAGA,4FACA,qKAEA,2BACA,8DACA,kEACA,kFACA,kEAEA,8JACA,oIAGA,OAAO,CACL,UAAW,uDACX,eAAgB,CACd,aACA,4DAEF,eAAgB,CACd,oCAAoC,sBACpC,4JAEH,KAIP,IAAK,CACH,qBAAsB,CACpB,OACA,YAGL,EACF,EAGD,KAAK,eAAe,gBAAgB,GAAI,KAAI,gBAAgB,CAC1D,QAAS,CAAC,gBAAgB,EAC1B,UAAW,CAAC,GAAG,EACf,WAAY,CACV,2BAA4B,CAC1B,yCAA0C,CAAC,QAAQ,IAGxD,CAAC,EAEF,KAAK,iBAAiB,YAAY,KAAK,cAAc,GA9HzD,QAAA,yBAAA,yBAwIA,KAAM,QAAS,CAAC,CAAE,UAAW,eAAgB,kBAA2C,CACtF,GAAI,WAAY,eAAe,OAAO,CAAC,IAAK,SACnC,GAAG,OAAO,UAChB,MAAM,iBAAiB,EAE1B,MAAI,iBACF,WAAY,eAAe,OAAO,CAAC,IAAK,UAC/B,GAAG,OAAO,WAChB,GAAG,gBAAgB,GAGjB,GAAG,cACZ",
  "names": []
}
