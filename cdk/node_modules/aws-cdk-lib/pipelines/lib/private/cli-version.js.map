{
  "version": 3,
  "sources": ["cli-version.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Return the preferred CLI version for the current CDK Library version\n *\n * This is necessary to prevent cxapi version incompatibility between the two\n * CDK major versions. Since changes currently go into v1 before they go into\n * v2, a cxapi change can be released in v1 while the v2 CLI doesn't support it\n * yet.\n *\n * In those cases, simply installing the \"latest\" CLI (2) is not good enough\n * because it won't be able to read the Cloud Assembly of the v1 app.\n *\n * Find this version by finding the containing `package.json` and reading\n * `preferredCdkCliVersion` from it.\n */\nexport function preferredCliVersion(): string | undefined {\n  const pjLocation = findUp('package.json', __dirname);\n  if (!pjLocation) {\n    return undefined;\n  }\n  const pj = JSON.parse(fs.readFileSync(pjLocation, { encoding: 'utf-8' }));\n  return pj.preferredCdkCliVersion ? `${pj.preferredCdkCliVersion}` : undefined;\n}\n\nexport function findUp(name: string, directory: string): string | undefined {\n  const absoluteDirectory = path.resolve(directory);\n\n  const file = path.join(directory, name);\n  if (fs.existsSync(file)) {\n    return file;\n  }\n\n  const { root } = path.parse(absoluteDirectory);\n  if (absoluteDirectory == root) {\n    return undefined;\n  }\n\n  return findUp(name, path.dirname(absoluteDirectory));\n}"],
  "mappings": "sHAAA,KAAA,IAAA,QAAA,IAAA,EACA,KAAA,QAAA,MAAA,EAgBA,8BAAmC,CACjC,KAAM,YAAa,OAAO,eAAgB,SAAS,EACnD,GAAI,CAAC,WACH,OAEF,KAAM,IAAK,KAAK,MAAM,GAAG,aAAa,WAAY,CAAE,SAAU,OAAO,CAAE,CAAC,EACxE,MAAO,IAAG,uBAAyB,GAAG,GAAG,yBAA2B,MACtE,CAPA,QAAA,oBAAA,oBASA,gBAAuB,KAAc,UAAiB,CACpD,KAAM,mBAAoB,KAAK,QAAQ,SAAS,EAE1C,KAAO,KAAK,KAAK,UAAW,IAAI,EACtC,GAAI,GAAG,WAAW,IAAI,EACpB,MAAO,MAGT,KAAM,CAAE,MAAS,KAAK,MAAM,iBAAiB,EAC7C,GAAI,mBAAqB,KAIzB,MAAO,QAAO,KAAM,KAAK,QAAQ,iBAAiB,CAAC,CACrD,CAdA,QAAA,OAAA",
  "names": []
}
