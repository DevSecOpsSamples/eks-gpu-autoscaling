{
  "version": 3,
  "sources": ["pipeline-base.ts"],
  "sourcesContent": ["import { Aspects, Stage } from '../../../core';\nimport { Construct } from 'constructs';\nimport { AddStageOpts as StageOptions, WaveOptions, Wave, IFileSetProducer, ShellStep, FileSet } from '../blueprint';\n\n/**\n * Properties for a `Pipeline`\n */\nexport interface PipelineBaseProps {\n  /**\n   * The build step that produces the CDK Cloud Assembly\n   *\n   * The primary output of this step needs to be the `cdk.out` directory\n   * generated by the `cdk synth` command.\n   *\n   * If you use a `ShellStep` here and you don't configure an output directory,\n   * the output directory will automatically be assumed to be `cdk.out`.\n   */\n  readonly synth: IFileSetProducer;\n}\n\n/**\n * A generic CDK Pipelines pipeline\n *\n * Different deployment systems will provide subclasses of `Pipeline` that generate\n * the deployment infrastructure necessary to deploy CDK apps, specific to that system.\n *\n * This library comes with the `CodePipeline` class, which uses AWS CodePipeline\n * to deploy CDK apps.\n *\n * The actual pipeline infrastructure is constructed (by invoking the engine)\n * when `buildPipeline()` is called, or when `app.synth()` is called (whichever\n * happens first).\n */\nexport abstract class PipelineBase extends Construct {\n  /**\n   * The build step that produces the CDK Cloud Assembly\n   */\n  public readonly synth: IFileSetProducer;\n\n  /**\n   * The waves in this pipeline\n   */\n  public readonly waves: Wave[];\n\n  /**\n   * The FileSet tha contains the cloud assembly\n   *\n   * This is the primary output of the synth step.\n   */\n  public readonly cloudAssemblyFileSet: FileSet;\n\n  private built = false;\n\n  constructor(scope: Construct, id: string, props: PipelineBaseProps) {\n    super(scope, id);\n\n    if (props.synth instanceof ShellStep && !props.synth.primaryOutput) {\n      props.synth.primaryOutputDirectory('cdk.out');\n    }\n\n    if (!props.synth.primaryOutput) {\n      throw new Error(`synthStep ${props.synth} must produce a primary output, but is not producing anything. Configure the Step differently or use a different Step type.`);\n    }\n\n    this.synth = props.synth;\n    this.waves = [];\n    this.cloudAssemblyFileSet = props.synth.primaryOutput;\n\n    Aspects.of(this).add({ visit: () => this.buildJustInTime() });\n  }\n\n  /**\n   * Deploy a single Stage by itself\n   *\n   * Add a Stage to the pipeline, to be deployed in sequence with other\n   * Stages added to the pipeline. All Stacks in the stage will be deployed\n   * in an order automatically determined by their relative dependencies.\n   */\n  public addStage(stage: Stage, options?: StageOptions) {\n    if (this.built) {\n      throw new Error('addStage: can\\'t add Stages anymore after buildPipeline() has been called');\n    }\n    return this.addWave(stage.stageName).addStage(stage, options);\n  }\n\n  /**\n   * Add a Wave to the pipeline, for deploying multiple Stages in parallel\n   *\n   * Use the return object of this method to deploy multiple stages in parallel.\n   *\n   * Example:\n   *\n   * ```ts\n   * declare const pipeline: pipelines.CodePipeline;\n   *\n   * const wave = pipeline.addWave('MyWave');\n   * wave.addStage(new MyApplicationStage(this, 'Stage1'));\n   * wave.addStage(new MyApplicationStage(this, 'Stage2'));\n   * ```\n   */\n  public addWave(id: string, options?: WaveOptions) {\n    if (this.built) {\n      throw new Error('addWave: can\\'t add Waves anymore after buildPipeline() has been called');\n    }\n\n    const wave = new Wave(id, options);\n    this.waves.push(wave);\n    return wave;\n  }\n\n  /**\n   * Send the current pipeline definition to the engine, and construct the pipeline\n   *\n   * It is not possible to modify the pipeline after calling this method.\n   */\n  public buildPipeline() {\n    if (this.built) {\n      throw new Error('build() has already been called: can only call it once');\n    }\n    this.doBuildPipeline();\n    this.built = true;\n  }\n\n  /**\n   * Implemented by subclasses to do the actual pipeline construction\n   */\n  protected abstract doBuildPipeline(): void;\n\n  /**\n   * Automatically call 'build()' just before synthesis if the user hasn't explicitly called it yet\n   */\n  private buildJustInTime() {\n    if (!this.built) {\n      this.buildPipeline();\n    }\n  }\n}"],
  "mappings": "sNAAA,OAAA,QAAA,eAAA,EACA,aAAA,QAAA,YAAA,EACA,YAAA,QAAA,cAAA,EA+BA,MAAsB,oBAAqB,cAAA,SAAS,CAoBlD,YAAY,MAAkB,GAAY,MAAwB,CAChE,MAAM,MAAO,EAAE,EAMf,GATM,KAAA,MAAQ,0EAKV,MAAM,gBAAiB,aAAA,WAAa,CAAC,MAAM,MAAM,eACnD,MAAM,MAAM,uBAAuB,SAAS,EAG1C,CAAC,MAAM,MAAM,cACf,KAAM,IAAI,OAAM,aAAa,MAAM,kIAAkI,EAGvK,KAAK,MAAQ,MAAM,MACnB,KAAK,MAAQ,CAAA,EACb,KAAK,qBAAuB,MAAM,MAAM,cAExC,OAAA,QAAQ,GAAG,IAAI,EAAE,IAAI,CAAE,MAAO,IAAM,KAAK,gBAAe,CAAE,CAAE,EAUvD,SAAS,MAAc,QAAsB,CAClD,wHAAI,KAAK,MACP,KAAM,IAAI,OAAM,0EAA2E,EAE7F,MAAO,MAAK,QAAQ,MAAM,SAAS,EAAE,SAAS,MAAO,OAAO,EAkBvD,QAAQ,GAAY,QAAqB,CAC9C,sEAAI,KAAK,MACP,KAAM,IAAI,OAAM,wEAAyE,EAG3F,KAAM,MAAO,GAAI,aAAA,KAAK,GAAI,OAAO,EACjC,YAAK,MAAM,KAAK,IAAI,EACb,KAQF,eAAa,CAClB,GAAI,KAAK,MACP,KAAM,IAAI,OAAM,wDAAwD,EAE1E,KAAK,gBAAe,EACpB,KAAK,MAAQ,GAWP,iBAAe,CACrB,AAAK,KAAK,OACR,KAAK,cAAa,GApGxB,QAAA,aAAA",
  "names": []
}
