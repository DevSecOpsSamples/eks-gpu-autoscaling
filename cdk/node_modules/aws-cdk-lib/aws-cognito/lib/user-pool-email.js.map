{
  "version": 3,
  "sources": ["user-pool-email.ts"],
  "sourcesContent": ["import { Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { toASCII as punycodeEncode } from 'punycode/';\n\n/**\n * Configuration for Cognito sending emails via Amazon SES\n */\nexport interface UserPoolSESOptions {\n  /**\n   * The verified Amazon SES email address that Cognito should\n   * use to send emails.\n   *\n   * The email address used must be a verified email address\n   * in Amazon SES and must be configured to allow Cognito to\n   * send emails.\n   *\n   * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html\n   */\n  readonly fromEmail: string;\n\n  /**\n   * An optional name that should be used as the sender's name\n   * along with the email.\n   *\n   * @default - no name\n   */\n  readonly fromName?: string;\n\n  /**\n   * The destination to which the receiver of the email should reploy to.\n   *\n   * @default - same as the fromEmail\n   */\n  readonly replyTo?: string;\n\n  /**\n   * The name of a configuration set in Amazon SES that should\n   * be applied to emails sent via Cognito.\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-emailconfiguration.html#cfn-cognito-userpool-emailconfiguration-configurationset\n   *\n   * @default - no configuration set\n   */\n  readonly configurationSetName?: string;\n\n  /**\n   * Required if the UserPool region is different than the SES region.\n   *\n   * If sending emails with a Amazon SES verified email address,\n   * and the region that SES is configured is different than the\n   * region in which the UserPool is deployed, you must specify that\n   * region here.\n   *\n   * Must be 'us-east-1', 'us-west-2', or 'eu-west-1'\n   *\n   * @default - The same region as the Cognito UserPool\n   */\n  readonly sesRegion?: string;\n}\n\n/**\n * Result of binding email settings with a user pool\n */\ninterface UserPoolEmailConfig {\n  /**\n   * The name of the configuration set in SES.\n   *\n   * @default - none\n   */\n  readonly configurationSet?: string;\n\n  /**\n   * Specifies whether to use Cognito's built in email functionality\n   * or SES.\n   *\n   * @default - Cognito built in email functionality\n   */\n  readonly emailSendingAccount?: string;\n\n  /**\n   * Identifies either the sender's email address or the sender's\n   * name with their email address.\n   *\n   * If emailSendingAccount is DEVELOPER then this cannot be specified.\n   *\n   * @default 'no-reply@verificationemail.com'\n   */\n  readonly from?: string;\n\n  /**\n   * The destination to which the receiver of the email should reply to.\n   *\n   * @default - same as `from`\n   */\n  readonly replyToEmailAddress?: string;\n\n  /**\n   * The ARN of a verified email address in Amazon SES.\n   *\n   * required if emailSendingAccount is DEVELOPER or if\n   * 'from' is provided.\n   *\n   * @default - none\n   */\n  readonly sourceArn?: string;\n}\n\n/**\n * Configure how Cognito sends emails\n */\nexport abstract class UserPoolEmail {\n  /**\n   * Send email using Cognito\n   */\n  public static withCognito(replyTo?: string): UserPoolEmail {\n    return new CognitoEmail(replyTo);\n  }\n\n  /**\n   * Send email using SES\n   */\n  public static withSES(options: UserPoolSESOptions): UserPoolEmail {\n    return new SESEmail(options);\n  }\n\n\n  /**\n   * Returns the email configuration for a Cognito UserPool\n   * that controls how Cognito will send emails\n   * @internal\n   */\n  public abstract _bind(scope: Construct): UserPoolEmailConfig;\n\n}\n\nclass CognitoEmail extends UserPoolEmail {\n  constructor(private readonly replyTo?: string) {\n    super();\n  }\n\n  public _bind(_scope: Construct): UserPoolEmailConfig {\n    return {\n      replyToEmailAddress: encodeAndTest(this.replyTo),\n      emailSendingAccount: 'COGNITO_DEFAULT',\n    };\n\n  }\n}\n\nclass SESEmail extends UserPoolEmail {\n  constructor(private readonly options: UserPoolSESOptions) {\n    super();\n  }\n\n  public _bind(scope: Construct): UserPoolEmailConfig {\n    const region = Stack.of(scope).region;\n\n    if (Token.isUnresolved(region) && !this.options.sesRegion) {\n      throw new Error('Your stack region cannot be determined so \"sesRegion\" is required in SESOptions');\n    }\n\n    let from = this.options.fromEmail;\n    if (this.options.fromName) {\n      from = `${this.options.fromName} <${this.options.fromEmail}>`;\n    }\n\n    return {\n      from: encodeAndTest(from),\n      replyToEmailAddress: encodeAndTest(this.options.replyTo),\n      configurationSet: this.options.configurationSetName,\n      emailSendingAccount: 'DEVELOPER',\n      sourceArn: Stack.of(scope).formatArn({\n        service: 'ses',\n        resource: 'identity',\n        resourceName: encodeAndTest(this.options.fromEmail),\n        region: this.options.sesRegion ?? region,\n      }),\n    };\n  }\n}\n\nfunction encodeAndTest(input: string | undefined): string | undefined {\n  if (input) {\n    const local = input.split('@')[0];\n    if (!/[\\p{ASCII}]+/u.test(local)) {\n      throw new Error('the local part of the email address must use ASCII characters only');\n    }\n    return punycodeEncode(input);\n  } else {\n    return undefined;\n  }\n}\n"],
  "mappings": "oNAAA,OAAA,QAAA,YAAA,EAEA,WAAA,QAAA,WAAA,EA4GA,MAAsB,aAAa,OAInB,aAAY,QAAgB,CACxC,MAAO,IAAI,cAAa,OAAO,QAMnB,SAAQ,QAA2B,oFACxC,GAAI,UAAS,OAAO,GAZ/B,QAAA,cAAA,qHAyBA,MAAM,oBAAqB,cAAa,CACtC,YAA6B,QAAgB,CAC3C,MAAK,EADsB,KAAA,QAAA,QAItB,MAAM,OAAiB,CAC5B,MAAO,CACL,oBAAqB,cAAc,KAAK,OAAO,EAC/C,oBAAqB,oBAM3B,MAAM,gBAAiB,cAAa,CAClC,YAA6B,QAA2B,CACtD,MAAK,EADsB,KAAA,QAAA,QAItB,MAAM,MAAgB,QAC3B,KAAM,QAAS,OAAA,MAAM,GAAG,KAAK,EAAE,OAE/B,GAAI,OAAA,MAAM,aAAa,MAAM,GAAK,CAAC,KAAK,QAAQ,UAC9C,KAAM,IAAI,OAAM,iFAAiF,EAGnG,GAAI,MAAO,KAAK,QAAQ,UACxB,MAAI,MAAK,QAAQ,UACf,MAAO,GAAG,KAAK,QAAQ,aAAa,KAAK,QAAQ,cAG5C,CACL,KAAM,cAAc,IAAI,EACxB,oBAAqB,cAAc,KAAK,QAAQ,OAAO,EACvD,iBAAkB,KAAK,QAAQ,qBAC/B,oBAAqB,YACrB,UAAW,OAAA,MAAM,GAAG,KAAK,EAAE,UAAU,CACnC,QAAS,MACT,SAAU,WACV,aAAc,cAAc,KAAK,QAAQ,SAAS,EAClD,OAAM,IAAE,KAAK,QAAQ,aAAS,MAAA,KAAA,OAAA,GAAI,OACnC,IAKP,uBAAuB,MAAyB,CAC9C,GAAI,MAAO,CACT,KAAM,OAAQ,MAAM,MAAM,GAAG,EAAE,GAC/B,GAAI,CAAC,gBAAgB,KAAK,KAAK,EAC7B,KAAM,IAAI,OAAM,oEAAoE,EAEtF,MAAO,YAAA,QAAe,KAAK,MAE3B,OAEJ",
  "names": []
}
