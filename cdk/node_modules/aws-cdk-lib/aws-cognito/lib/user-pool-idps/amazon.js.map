{
  "version": 3,
  "sources": ["amazon.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnUserPoolIdentityProvider } from '../cognito.generated';\nimport { UserPoolIdentityProviderProps } from './base';\nimport { UserPoolIdentityProviderBase } from './private/user-pool-idp-base';\n\n/**\n * Properties to initialize UserPoolAmazonIdentityProvider\n */\nexport interface UserPoolIdentityProviderAmazonProps extends UserPoolIdentityProviderProps {\n  /**\n   * The client id recognized by 'Login with Amazon' APIs.\n   * @see https://developer.amazon.com/docs/login-with-amazon/security-profile.html#client-identifier\n   */\n  readonly clientId: string;\n  /**\n   * The client secret to be accompanied with clientId for 'Login with Amazon' APIs to authenticate the client.\n   * @see https://developer.amazon.com/docs/login-with-amazon/security-profile.html#client-identifier\n   */\n  readonly clientSecret: string;\n  /**\n   * The types of user profile data to obtain for the Amazon profile.\n   * @see https://developer.amazon.com/docs/login-with-amazon/customer-profile.html\n   * @default [ profile ]\n   */\n  readonly scopes?: string[];\n}\n\n/**\n * Represents a identity provider that integrates with 'Login with Amazon'\n * @resource AWS::Cognito::UserPoolIdentityProvider\n */\nexport class UserPoolIdentityProviderAmazon extends UserPoolIdentityProviderBase {\n  public readonly providerName: string;\n\n  constructor(scope: Construct, id: string, props: UserPoolIdentityProviderAmazonProps) {\n    super(scope, id, props);\n\n    const scopes = props.scopes ?? ['profile'];\n\n    const resource = new CfnUserPoolIdentityProvider(this, 'Resource', {\n      userPoolId: props.userPool.userPoolId,\n      providerName: 'LoginWithAmazon', // must be 'LoginWithAmazon' when the type is 'LoginWithAmazon'\n      providerType: 'LoginWithAmazon',\n      providerDetails: {\n        client_id: props.clientId,\n        client_secret: props.clientSecret,\n        authorize_scopes: scopes.join(' '),\n      },\n      attributeMapping: super.configureAttributeMapping(),\n    });\n\n    this.providerName = super.getResourceNameAttribute(resource.ref);\n  }\n}"],
  "mappings": "wOACA,oBAAA,QAAA,sBAAA,EAEA,qBAAA,QAAA,8BAAA,EA4BA,MAAa,sCAAuC,sBAAA,4BAA4B,CAG9E,YAAY,MAAkB,GAAY,MAA0C,QAClF,MAAM,MAAO,GAAI,KAAK,6FAEtB,KAAM,QAAM,IAAG,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,CAAC,SAAS,EAEnC,SAAW,GAAI,qBAAA,4BAA4B,KAAM,WAAY,CACjE,WAAY,MAAM,SAAS,WAC3B,aAAc,kBACd,aAAc,kBACd,gBAAiB,CACf,UAAW,MAAM,SACjB,cAAe,MAAM,aACrB,iBAAkB,OAAO,KAAK,GAAG,GAEnC,iBAAkB,MAAM,0BAAyB,EAClD,EAED,KAAK,aAAe,MAAM,yBAAyB,SAAS,GAAG,GApBnE,QAAA,+BAAA",
  "names": []
}
