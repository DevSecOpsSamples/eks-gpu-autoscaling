{
  "version": 3,
  "sources": ["user-pool-domain.ts"],
  "sourcesContent": ["import { ICertificate } from '../../aws-certificatemanager';\nimport { IResource, Resource, Stack, Token } from '../../core';\nimport { AwsCustomResource, AwsCustomResourcePolicy, AwsSdkCall, PhysicalResourceId } from '../../custom-resources';\nimport { Construct } from 'constructs';\nimport { CfnUserPoolDomain } from './cognito.generated';\nimport { IUserPool } from './user-pool';\nimport { UserPoolClient } from './user-pool-client';\n\n/**\n * Represents a user pool domain.\n */\nexport interface IUserPoolDomain extends IResource {\n  /**\n   * The domain that was specified to be created.\n   * If `customDomain` was selected, this holds the full domain name that was specified.\n   * If the `cognitoDomain` was used, it contains the prefix to the Cognito hosted domain.\n   * @attribute\n   */\n  readonly domainName: string;\n}\n\n/**\n * Options while specifying custom domain\n * @see https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html\n */\nexport interface CustomDomainOptions {\n  /**\n   * The custom domain name that you would like to associate with this User Pool.\n   */\n  readonly domainName: string;\n\n  /**\n   * The certificate to associate with this domain.\n   */\n  readonly certificate: ICertificate;\n}\n\n/**\n * Options while specifying a cognito prefix domain.\n * @see https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain-prefix.html\n */\nexport interface CognitoDomainOptions {\n  /**\n   * The prefix to the Cognito hosted domain name that will be associated with the user pool.\n   */\n  readonly domainPrefix: string;\n}\n\n/**\n * Options to create a UserPoolDomain\n */\nexport interface UserPoolDomainOptions {\n  /**\n   * Associate a custom domain with your user pool\n   * Either `customDomain` or `cognitoDomain` must be specified.\n   * @see https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html\n   * @default - not set if `cognitoDomain` is specified, otherwise, throws an error.\n   */\n  readonly customDomain?: CustomDomainOptions;\n\n  /**\n   * Associate a cognito prefix domain with your user pool\n   * Either `customDomain` or `cognitoDomain` must be specified.\n   * @see https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain-prefix.html\n   * @default - not set if `customDomain` is specified, otherwise, throws an error.\n   */\n  readonly cognitoDomain?: CognitoDomainOptions;\n}\n\n/**\n * Props for UserPoolDomain construct\n */\nexport interface UserPoolDomainProps extends UserPoolDomainOptions {\n  /**\n   * The user pool to which this domain should be associated.\n   */\n  readonly userPool: IUserPool;\n}\n\n/**\n * Define a user pool domain\n */\nexport class UserPoolDomain extends Resource implements IUserPoolDomain {\n  /**\n   * Import a UserPoolDomain given its domain name\n   */\n  public static fromDomainName(scope: Construct, id: string, userPoolDomainName: string): IUserPoolDomain {\n    class Import extends Resource implements IUserPoolDomain {\n      public readonly domainName = userPoolDomainName;\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly domainName: string;\n  private isCognitoDomain: boolean;\n\n  private cloudFrontCustomResource?: AwsCustomResource;\n\n  constructor(scope: Construct, id: string, props: UserPoolDomainProps) {\n    super(scope, id);\n\n    if (!!props.customDomain === !!props.cognitoDomain) {\n      throw new Error('One of, and only one of, cognitoDomain or customDomain must be specified');\n    }\n\n    if (props.cognitoDomain?.domainPrefix &&\n      !Token.isUnresolved(props.cognitoDomain?.domainPrefix) &&\n      !/^[a-z0-9-]+$/.test(props.cognitoDomain.domainPrefix)) {\n\n      throw new Error('domainPrefix for cognitoDomain can contain only lowercase alphabets, numbers and hyphens');\n    }\n\n    this.isCognitoDomain = !!props.cognitoDomain;\n\n    const domainName = props.cognitoDomain?.domainPrefix || props.customDomain?.domainName!;\n    const resource = new CfnUserPoolDomain(this, 'Resource', {\n      userPoolId: props.userPool.userPoolId,\n      domain: domainName,\n      customDomainConfig: props.customDomain ? { certificateArn: props.customDomain.certificate.certificateArn } : undefined,\n    });\n\n    this.domainName = resource.ref;\n  }\n\n  /**\n   * The domain name of the CloudFront distribution associated with the user pool domain.\n   */\n  public get cloudFrontDomainName(): string {\n    if (!this.cloudFrontCustomResource) {\n      const sdkCall: AwsSdkCall = {\n        service: 'CognitoIdentityServiceProvider',\n        action: 'describeUserPoolDomain',\n        parameters: {\n          Domain: this.domainName,\n        },\n        physicalResourceId: PhysicalResourceId.of(this.domainName),\n      };\n      this.cloudFrontCustomResource = new AwsCustomResource(this, 'CloudFrontDomainName', {\n        resourceType: 'Custom::UserPoolCloudFrontDomainName',\n        onCreate: sdkCall,\n        onUpdate: sdkCall,\n        policy: AwsCustomResourcePolicy.fromSdkCalls({\n          // DescribeUserPoolDomain only supports access level '*'\n          // https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncognitouserpools.html#amazoncognitouserpools-actions-as-permissions\n          resources: ['*'],\n        }),\n      });\n    }\n    return this.cloudFrontCustomResource.getResponseField('DomainDescription.CloudFrontDistribution');\n  }\n\n  /**\n   * The URL to the hosted UI associated with this domain\n   */\n  public baseUrl(): string {\n    if (this.isCognitoDomain) {\n      return `https://${this.domainName}.auth.${Stack.of(this).region}.amazoncognito.com`;\n    }\n    return `https://${this.domainName}`;\n  }\n\n  /**\n   * The URL to the sign in page in this domain using a specific UserPoolClient\n   * @param client [disable-awslint:ref-via-interface] the user pool client that the UI will use to interact with the UserPool\n   * @param options options to customize the behaviour of this method.\n   */\n  public signInUrl(client: UserPoolClient, options: SignInUrlOptions): string {\n    let responseType: string;\n    if (client.oAuthFlows.authorizationCodeGrant) {\n      responseType = 'code';\n    } else if (client.oAuthFlows.implicitCodeGrant) {\n      responseType = 'token';\n    } else {\n      throw new Error('signInUrl is not supported for clients without authorizationCodeGrant or implicitCodeGrant flow enabled');\n    }\n    const path = options.signInPath ?? '/login';\n    return `${this.baseUrl()}${path}?client_id=${client.userPoolClientId}&response_type=${responseType}&redirect_uri=${options.redirectUri}`;\n  }\n}\n\n/**\n * Options to customize the behaviour of `signInUrl()`\n */\nexport interface SignInUrlOptions {\n  /**\n   * Where to redirect to after sign in\n   */\n  readonly redirectUri: string;\n\n  /**\n   * The path in the URI where the sign-in page is located\n   * @default '/login'\n   */\n  readonly signInPath?: string;\n}\n"],
  "mappings": "qNACA,OAAA,QAAA,YAAA,EACA,mBAAA,QAAA,wBAAA,EAEA,oBAAA,QAAA,qBAAA,EA8EA,MAAa,sBAAuB,QAAA,QAAQ,CAiB1C,YAAY,MAAkB,GAAY,MAA0B,iBAClE,MAAM,MAAO,EAAE,EAEf,8EAAI,CAAC,CAAC,MAAM,cAAiB,CAAC,CAAC,MAAM,cACnC,KAAM,IAAI,OAAM,0EAA0E,EAG5F,GAAI,KAAA,MAAM,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,eACvB,CAAC,OAAA,MAAM,aAAY,IAAC,MAAM,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,YAAY,GACrD,CAAC,eAAe,KAAK,MAAM,cAAc,YAAY,EAErD,KAAM,IAAI,OAAM,0FAA0F,EAG5G,KAAK,gBAAkB,CAAC,CAAC,MAAM,cAE/B,KAAM,YAAa,KAAA,MAAM,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,eAAgB,KAAA,MAAM,gBAAY,MAAA,KAAA,OAAA,OAAA,GAAE,YACtE,SAAW,GAAI,qBAAA,kBAAkB,KAAM,WAAY,CACvD,WAAY,MAAM,SAAS,WAC3B,OAAQ,WACR,mBAAoB,MAAM,aAAe,CAAE,eAAgB,MAAM,aAAa,YAAY,cAAc,EAAK,OAC9G,EAED,KAAK,WAAa,SAAS,UApCf,gBAAe,MAAkB,GAAY,mBAA0B,CACnF,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,WAAa,kBAC/B,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,KAqClB,uBAAoB,CAC7B,GAAI,CAAC,KAAK,yBAA0B,CAClC,KAAM,SAAsB,CAC1B,QAAS,iCACT,OAAQ,yBACR,WAAY,CACV,OAAQ,KAAK,YAEf,mBAAoB,mBAAA,mBAAmB,GAAG,KAAK,UAAU,GAE3D,KAAK,yBAA2B,GAAI,oBAAA,kBAAkB,KAAM,uBAAwB,CAClF,aAAc,uCACd,SAAU,QACV,SAAU,QACV,OAAQ,mBAAA,wBAAwB,aAAa,CAG3C,UAAW,CAAC,GAAG,EAChB,EACF,EAEH,MAAO,MAAK,yBAAyB,iBAAiB,0CAA0C,EAM3F,SAAO,CACZ,MAAI,MAAK,gBACA,WAAW,KAAK,mBAAmB,OAAA,MAAM,GAAG,IAAI,EAAE,2BAEpD,WAAW,KAAK,aAQlB,UAAU,OAAwB,QAAyB,yJAChE,GAAI,cACJ,GAAI,OAAO,WAAW,uBACpB,aAAe,eACN,OAAO,WAAW,kBAC3B,aAAe,YAEf,MAAM,IAAI,OAAM,yGAAyG,EAE3H,KAAM,MAAI,IAAG,QAAQ,cAAU,MAAA,KAAA,OAAA,GAAI,SACnC,MAAO,GAAG,KAAK,QAAO,IAAK,kBAAkB,OAAO,kCAAkC,6BAA6B,QAAQ,eA/F/H,QAAA,eAAA",
  "names": []
}
