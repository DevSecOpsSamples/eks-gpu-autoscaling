{
  "version": 3,
  "sources": ["user-pool-attr.ts"],
  "sourcesContent": ["import { Token } from '../../core';\nimport { StandardAttributeNames } from './private/attr-names';\n\n/**\n * The set of standard attributes that can be marked as required or mutable.\n *\n * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes\n */\nexport interface StandardAttributes {\n  /**\n   * The user's postal address.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly address?: StandardAttribute;\n\n  /**\n   * The user's birthday, represented as an ISO 8601:2004 format.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly birthdate?: StandardAttribute;\n\n  /**\n   * The user's e-mail address, represented as an RFC 5322 [RFC5322] addr-spec.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly email?: StandardAttribute;\n\n  /**\n   * The surname or last name of the user.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly familyName?: StandardAttribute;\n\n  /**\n   * The user's gender.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly gender?: StandardAttribute;\n\n  /**\n   * The user's first name or give name.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly givenName?: StandardAttribute;\n\n  /**\n   * The user's locale, represented as a BCP47 [RFC5646] language tag.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly locale?: StandardAttribute;\n\n  /**\n   * The user's middle name.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly middleName?: StandardAttribute;\n\n  /**\n   * The user's full name in displayable form, including all name parts, titles and suffixes.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly fullname?: StandardAttribute;\n\n  /**\n   * The user's nickname or casual name.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly nickname?: StandardAttribute;\n\n  /**\n   * The user's telephone number.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly phoneNumber?: StandardAttribute;\n\n  /**\n   * The URL to the user's profile picture.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly profilePicture?: StandardAttribute;\n\n  /**\n   * The user's preffered username, different from the immutable user name.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly preferredUsername?: StandardAttribute;\n\n  /**\n   * The URL to the user's profile page.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly profilePage?: StandardAttribute;\n\n  /**\n   * The user's time zone.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly timezone?: StandardAttribute;\n\n  /**\n   * The time, the user's information was last updated.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly lastUpdateTime?: StandardAttribute;\n\n  /**\n   * The URL to the user's web page or blog.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly website?: StandardAttribute;\n\n  /**\n   * DEPRECATED\n   * @deprecated this is not a standard attribute and was incorrectly added to the CDK.\n   * It is a Cognito built-in attribute and cannot be controlled as part of user pool creation.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly emailVerified?: StandardAttribute;\n\n  /**\n   * DEPRECATED\n   * @deprecated this is not a standard attribute and was incorrectly added to the CDK.\n   * It is a Cognito built-in attribute and cannot be controlled as part of user pool creation.\n   * @default - see the defaults under `StandardAttribute`\n   */\n  readonly phoneNumberVerified?: StandardAttribute;\n}\n\n/**\n * Standard attribute that can be marked as required or mutable.\n *\n * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#cognito-user-pools-standard-attributes\n */\nexport interface StandardAttribute {\n  /**\n   * Specifies whether the value of the attribute can be changed.\n   * For any user pool attribute that's mapped to an identity provider attribute, this must be set to `true`.\n   * Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider.\n   * If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute.\n   *\n   * @default true\n   */\n  readonly mutable?: boolean;\n  /**\n   * Specifies whether the attribute is required upon user registration.\n   * If the attribute is required and the user does not provide a value, registration or sign-in will fail.\n   *\n   * @default false\n   */\n  readonly required?: boolean;\n}\n\n/**\n * Represents a custom attribute type.\n */\nexport interface ICustomAttribute {\n  /**\n   * Bind this custom attribute type to the values as expected by CloudFormation\n   */\n  bind(): CustomAttributeConfig;\n}\n\n/**\n * Configuration that will be fed into CloudFormation for any custom attribute type.\n */\nexport interface CustomAttributeConfig {\n  /**\n   * The data type of the custom attribute.\n   *\n   * @see https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SchemaAttributeType.html#CognitoUserPools-Type-SchemaAttributeType-AttributeDataType\n   */\n  readonly dataType: string;\n\n  /**\n   * The constraints for a custom attribute of 'String' data type.\n   * @default - None.\n   */\n  readonly stringConstraints?: StringAttributeConstraints;\n\n  /**\n   * The constraints for a custom attribute of the 'Number' data type.\n   * @default - None.\n   */\n  readonly numberConstraints?: NumberAttributeConstraints;\n\n  /**\n   * Specifies whether the value of the attribute can be changed.\n   * For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to true.\n   * Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider.\n   * If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute.\n   *\n   * @default false\n   */\n  readonly mutable?: boolean;\n}\n\n/**\n * Constraints that can be applied to a custom attribute of any type.\n */\nexport interface CustomAttributeProps {\n  /**\n   * Specifies whether the value of the attribute can be changed.\n   * For any user pool attribute that's mapped to an identity provider attribute, you must set this parameter to true.\n   * Amazon Cognito updates mapped attributes when users sign in to your application through an identity provider.\n   * If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute.\n   *\n   * @default false\n   */\n  readonly mutable?: boolean\n}\n\n/**\n * Constraints that can be applied to a custom attribute of string type.\n */\nexport interface StringAttributeConstraints {\n  /**\n   * Minimum length of this attribute.\n   * @default 0\n   */\n  readonly minLen?: number;\n\n  /**\n   * Maximum length of this attribute.\n   * @default 2048\n   */\n  readonly maxLen?: number;\n}\n\n/**\n * Props for constructing a StringAttr\n */\nexport interface StringAttributeProps extends StringAttributeConstraints, CustomAttributeProps {\n}\n\n/**\n * The String custom attribute type.\n */\nexport class StringAttribute implements ICustomAttribute {\n  private readonly minLen?: number;\n  private readonly maxLen?: number;\n  private readonly mutable?: boolean;\n\n  constructor(props: StringAttributeProps = {}) {\n    if (props.minLen && !Token.isUnresolved(props.minLen) && props.minLen < 0) {\n      throw new Error(`minLen cannot be less than 0 (value: ${props.minLen}).`);\n    }\n    if (props.maxLen && !Token.isUnresolved(props.maxLen) && props.maxLen > 2048) {\n      throw new Error(`maxLen cannot be greater than 2048 (value: ${props.maxLen}).`);\n    }\n    this.minLen = props?.minLen;\n    this.maxLen = props?.maxLen;\n    this.mutable = props?.mutable;\n  }\n\n  public bind(): CustomAttributeConfig {\n    let stringConstraints: StringAttributeConstraints | undefined;\n    if (this.minLen || this.maxLen) {\n      stringConstraints = {\n        minLen: this.minLen,\n        maxLen: this.maxLen,\n      };\n    }\n\n    return {\n      dataType: 'String',\n      stringConstraints,\n      mutable: this.mutable,\n    };\n  }\n}\n\n/**\n * Constraints that can be applied to a custom attribute of number type.\n */\nexport interface NumberAttributeConstraints {\n  /**\n   * Minimum value of this attribute.\n   * @default - no minimum value\n   */\n  readonly min?: number;\n\n  /**\n   * Maximum value of this attribute.\n   * @default - no maximum value\n   */\n  readonly max?: number;\n}\n\n/**\n * Props for NumberAttr\n */\nexport interface NumberAttributeProps extends NumberAttributeConstraints, CustomAttributeProps {\n}\n\n/**\n * The Number custom attribute type.\n */\nexport class NumberAttribute implements ICustomAttribute {\n  private readonly min?: number;\n  private readonly max?: number;\n  private readonly mutable?: boolean;\n\n  constructor(props: NumberAttributeProps = {}) {\n    this.min = props?.min;\n    this.max = props?.max;\n    this.mutable = props?.mutable;\n  }\n\n  public bind(): CustomAttributeConfig {\n    let numberConstraints: NumberAttributeConstraints | undefined;\n    if (this.min || this.max) {\n      numberConstraints = {\n        min: this.min,\n        max: this.max,\n      };\n    }\n\n    return {\n      dataType: 'Number',\n      numberConstraints,\n      mutable: this.mutable,\n    };\n  }\n}\n\n/**\n * The Boolean custom attribute type.\n */\nexport class BooleanAttribute implements ICustomAttribute {\n  private readonly mutable?: boolean;\n\n  constructor(props: CustomAttributeProps = {}) {\n    this.mutable = props?.mutable;\n  }\n\n  public bind(): CustomAttributeConfig {\n    return {\n      dataType: 'Boolean',\n      mutable: this.mutable,\n    };\n  }\n}\n\n/**\n * The DateTime custom attribute type.\n */\nexport class DateTimeAttribute implements ICustomAttribute {\n  private readonly mutable?: boolean;\n\n  constructor(props: CustomAttributeProps = {}) {\n    this.mutable = props?.mutable;\n  }\n\n  public bind(): CustomAttributeConfig {\n    return {\n      dataType: 'DateTime',\n      mutable: this.mutable,\n    };\n  }\n}\n\n/**\n * This interface contains standard attributes recognized by Cognito\n * from https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html\n * including built-in attributes `email_verified` and `phone_number_verified`\n */\nexport interface StandardAttributesMask {\n  /**\n   * The user's postal address.\n   * @default false\n   */\n  readonly address?: boolean;\n\n  /**\n   * The user's birthday, represented as an ISO 8601:2004 format.\n   * @default false\n   */\n  readonly birthdate?: boolean;\n\n  /**\n   * The user's e-mail address, represented as an RFC 5322 [RFC5322] addr-spec.\n   * @default false\n   */\n  readonly email?: boolean;\n\n  /**\n   * The surname or last name of the user.\n   * @default false\n   */\n  readonly familyName?: boolean;\n\n  /**\n   * The user's gender.\n   * @default false\n   */\n  readonly gender?: boolean;\n\n  /**\n   * The user's first name or give name.\n   * @default false\n   */\n  readonly givenName?: boolean;\n\n  /**\n   * The user's locale, represented as a BCP47 [RFC5646] language tag.\n   * @default false\n   */\n  readonly locale?: boolean;\n\n  /**\n   * The user's middle name.\n   * @default false\n   */\n  readonly middleName?: boolean;\n\n  /**\n   * The user's full name in displayable form, including all name parts, titles and suffixes.\n   * @default false\n   */\n  readonly fullname?: boolean;\n\n  /**\n   * The user's nickname or casual name.\n   * @default false\n   */\n  readonly nickname?: boolean;\n\n  /**\n   * The user's telephone number.\n   * @default false\n   */\n  readonly phoneNumber?: boolean;\n\n  /**\n   * The URL to the user's profile picture.\n   * @default false\n   */\n  readonly profilePicture?: boolean;\n\n  /**\n   * The user's preffered username, different from the immutable user name.\n   * @default false\n   */\n  readonly preferredUsername?: boolean;\n\n  /**\n   * The URL to the user's profile page.\n   * @default false\n   */\n  readonly profilePage?: boolean;\n\n  /**\n   * The user's time zone.\n   * @default false\n   */\n  readonly timezone?: boolean;\n\n  /**\n   * The time, the user's information was last updated.\n   * @default false\n   */\n  readonly lastUpdateTime?: boolean;\n\n  /**\n   * The URL to the user's web page or blog.\n   * @default false\n   */\n  readonly website?: boolean;\n\n  /**\n   * Whether the email address has been verified.\n   * @default false\n   */\n  readonly emailVerified?: boolean;\n\n  /**\n   * Whether the phone number has been verified.\n   * @default false\n   */\n  readonly phoneNumberVerified?: boolean;\n}\n\n\n/**\n * A set of attributes, useful to set Read and Write attributes\n */\nexport class ClientAttributes {\n\n  /**\n   * The set of attributes\n   */\n  private attributesSet: Set<string>;\n\n  /**\n   * Creates a ClientAttributes with the specified attributes\n   *\n   * @default - a ClientAttributes object without any attributes\n   */\n  constructor() {\n    this.attributesSet = new Set<string>();\n  }\n\n  /**\n   * Creates a custom ClientAttributes with the specified attributes\n   * @param attributes a list of standard attributes to add to the set\n   */\n  public withStandardAttributes(attributes: StandardAttributesMask): ClientAttributes {\n    let attributesSet = new Set(this.attributesSet);\n    // iterate through key-values in the `StandardAttributeNames` constant\n    // to get the value for all attributes\n    for (const attributeKey in StandardAttributeNames) {\n      if ((attributes as any)[attributeKey] === true) {\n        const attributeName = (StandardAttributeNames as any)[attributeKey];\n        attributesSet.add(attributeName);\n      }\n    }\n    let aux = new ClientAttributes();\n    aux.attributesSet = attributesSet;\n    return aux;\n  }\n\n  /**\n   * Creates a custom ClientAttributes with the specified attributes\n   * @param attributes a list of custom attributes to add to the set\n   */\n  public withCustomAttributes(...attributes: string[]): ClientAttributes {\n    let attributesSet: Set<string> = new Set(this.attributesSet);\n    for (let attribute of attributes) {\n      // custom attributes MUST begin with `custom:`, so add the string if not present\n      if (!attribute.startsWith('custom:')) {\n        attribute = 'custom:' + attribute;\n      }\n      attributesSet.add(attribute);\n    }\n    let aux = new ClientAttributes();\n    aux.attributesSet = attributesSet;\n    return aux;\n  }\n\n  /**\n   * The list of attributes represented by this ClientAttributes\n   */\n  public attributes(): string[] {\n    // sorting is unnecessary but it simplify testing\n    return Array.from(this.attributesSet).sort();\n  }\n}\n"],
  "mappings": "sUAAA,OAAA,QAAA,YAAA,EACA,aAAA,QAAA,sBAAA,EA4OA,MAAa,eAAe,CAK1B,YAAY,MAA8B,CAAA,EAAE,CAC1C,+EAAI,MAAM,QAAU,CAAC,OAAA,MAAM,aAAa,MAAM,MAAM,GAAK,MAAM,OAAS,EACtE,KAAM,IAAI,OAAM,wCAAwC,MAAM,UAAU,EAE1E,GAAI,MAAM,QAAU,CAAC,OAAA,MAAM,aAAa,MAAM,MAAM,GAAK,MAAM,OAAS,KACtE,KAAM,IAAI,OAAM,8CAA8C,MAAM,UAAU,EAEhF,KAAK,OAAS,OAAK,KAAA,OAAL,MAAO,OACrB,KAAK,OAAS,OAAK,KAAA,OAAL,MAAO,OACrB,KAAK,QAAU,OAAK,KAAA,OAAL,MAAO,QAGjB,MAAI,CACT,GAAI,mBACJ,MAAI,MAAK,QAAU,KAAK,SACtB,mBAAoB,CAClB,OAAQ,KAAK,OACb,OAAQ,KAAK,SAIV,CACL,SAAU,SACV,kBACA,QAAS,KAAK,UA7BpB,QAAA,gBAAA,2HA4DA,MAAa,eAAe,CAK1B,YAAY,MAA8B,CAAA,EAAE,6EAC1C,KAAK,IAAM,OAAK,KAAA,OAAL,MAAO,IAClB,KAAK,IAAM,OAAK,KAAA,OAAL,MAAO,IAClB,KAAK,QAAU,OAAK,KAAA,OAAL,MAAO,QAGjB,MAAI,CACT,GAAI,mBACJ,MAAI,MAAK,KAAO,KAAK,MACnB,mBAAoB,CAClB,IAAK,KAAK,IACV,IAAK,KAAK,MAIP,CACL,SAAU,SACV,kBACA,QAAS,KAAK,UAvBpB,QAAA,gBAAA,2HA+BA,MAAa,gBAAgB,CAG3B,YAAY,MAA8B,CAAA,EAAE,6EAC1C,KAAK,QAAU,OAAK,KAAA,OAAL,MAAO,QAGjB,MAAI,CACT,MAAO,CACL,SAAU,UACV,QAAS,KAAK,UAVpB,QAAA,iBAAA,8HAkBA,MAAa,iBAAiB,CAG5B,YAAY,MAA8B,CAAA,EAAE,6EAC1C,KAAK,QAAU,OAAK,KAAA,OAAL,MAAO,QAGjB,MAAI,CACT,MAAO,CACL,SAAU,WACV,QAAS,KAAK,UAVpB,QAAA,kBAAA,iIA4IA,MAAa,gBAAgB,CAY3B,aAAA,CACE,KAAK,cAAgB,GAAI,KAOpB,uBAAuB,WAAkC,oFAC9D,GAAI,eAAgB,GAAI,KAAI,KAAK,aAAa,EAG9C,SAAW,gBAAgB,cAAA,uBACzB,GAAK,WAAmB,gBAAkB,GAAM,CAC9C,KAAM,eAAiB,aAAA,uBAA+B,cACtD,cAAc,IAAI,aAAa,EAGnC,GAAI,KAAM,GAAI,kBACd,WAAI,cAAgB,cACb,IAOF,wBAAwB,WAAoB,CACjD,GAAI,eAA6B,GAAI,KAAI,KAAK,aAAa,EAC3D,OAAS,aAAa,YAEpB,AAAK,UAAU,WAAW,SAAS,GACjC,WAAY,UAAY,WAE1B,cAAc,IAAI,SAAS,EAE7B,GAAI,KAAM,GAAI,kBACd,WAAI,cAAgB,cACb,IAMF,YAAU,CAEf,MAAO,OAAM,KAAK,KAAK,aAAa,EAAE,KAAI,GA1D9C,QAAA,iBAAA",
  "names": []
}
