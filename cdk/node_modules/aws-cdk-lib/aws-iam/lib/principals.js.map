{
  "version": 3,
  "sources": ["principals.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Default, FactName, RegionInfo } from '../../region-info';\nimport { IDependable } from 'constructs';\nimport { IOpenIdConnectProvider } from './oidc-provider';\nimport { PolicyDocument } from './policy-document';\nimport { Condition, Conditions, PolicyStatement } from './policy-statement';\nimport { defaultAddPrincipalToAssumeRole } from './private/assume-role-policy';\nimport { ISamlProvider } from './saml-provider';\nimport { LITERAL_STRING_KEY, mergePrincipal } from './util';\n\n/**\n * Any object that has an associated principal that a permission can be granted to\n */\nexport interface IGrantable {\n  /**\n   * The principal to grant permissions to\n   */\n  readonly grantPrincipal: IPrincipal;\n}\n\n/**\n * Represents a logical IAM principal.\n *\n * An IPrincipal describes a logical entity that can perform AWS API calls\n * against sets of resources, optionally under certain conditions.\n *\n * Examples of simple principals are IAM objects that you create, such\n * as Users or Roles.\n *\n * An example of a more complex principals is a `ServicePrincipal` (such as\n * `new ServicePrincipal(\"sns.amazonaws.com\")`, which represents the Simple\n * Notifications Service).\n *\n * A single logical Principal may also map to a set of physical principals.\n * For example, `new OrganizationPrincipal('o-1234')` represents all\n * identities that are part of the given AWS Organization.\n */\nexport interface IPrincipal extends IGrantable {\n  /**\n   * When this Principal is used in an AssumeRole policy, the action to use.\n   */\n  readonly assumeRoleAction: string;\n\n  /**\n   * Return the policy fragment that identifies this principal in a Policy.\n   */\n  readonly policyFragment: PrincipalPolicyFragment;\n\n  /**\n   * The AWS account ID of this principal.\n   * Can be undefined when the account is not known\n   * (for example, for service principals).\n   * Can be a Token - in that case,\n   * it's assumed to be AWS::AccountId.\n   */\n  readonly principalAccount?: string;\n\n  /**\n   * Add to the policy of this principal.\n   *\n   * @returns true if the statement was added, false if the principal in\n   * question does not have a policy document to add the statement to.\n   *\n   * @deprecated Use `addToPrincipalPolicy` instead.\n   */\n  addToPolicy(statement: PolicyStatement): boolean;\n\n  /**\n   * Add to the policy of this principal.\n   */\n  addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult;\n}\n\n/**\n * A type of principal that has more control over its own representation in AssumeRolePolicyDocuments\n *\n * More complex types of identity providers need more control over Role's policy documents\n * than simply `{ Effect: 'Allow', Action: 'AssumeRole', Principal: <Whatever> }`.\n *\n * If that control is necessary, they can implement `IAssumeRolePrincipal` to get full\n * access to a Role's AssumeRolePolicyDocument.\n */\nexport interface IAssumeRolePrincipal extends IPrincipal {\n  /**\n   * Add the princpial to the AssumeRolePolicyDocument\n   *\n   * Add the statements to the AssumeRolePolicyDocument necessary to give this principal\n   * permissions to assume the given role.\n   */\n  addToAssumeRolePolicy(document: PolicyDocument): void;\n}\n\n/**\n * Result of calling `addToPrincipalPolicy`\n */\nexport interface AddToPrincipalPolicyResult {\n  /**\n   * Whether the statement was added to the identity's policies.\n   *\n   */\n  readonly statementAdded: boolean;\n\n  /**\n   * Dependable which allows depending on the policy change being applied\n   *\n   * @default - Required if `statementAdded` is true.\n   */\n  readonly policyDependable?: IDependable;\n}\n\n/**\n * Base class for policy principals\n */\nexport abstract class PrincipalBase implements IAssumeRolePrincipal {\n  public readonly grantPrincipal: IPrincipal = this;\n  public readonly principalAccount: string | undefined = undefined;\n\n  /**\n   * Return the policy fragment that identifies this principal in a Policy.\n   */\n  public abstract readonly policyFragment: PrincipalPolicyFragment;\n\n  /**\n   * When this Principal is used in an AssumeRole policy, the action to use.\n   */\n  public readonly assumeRoleAction: string = 'sts:AssumeRole';\n\n  public addToPolicy(statement: PolicyStatement): boolean {\n    return this.addToPrincipalPolicy(statement).statementAdded;\n  }\n\n  public addToPrincipalPolicy(_statement: PolicyStatement): AddToPrincipalPolicyResult {\n    // This base class is used for non-identity principals. None of them\n    // have a PolicyDocument to add to.\n    return { statementAdded: false };\n  }\n\n  public addToAssumeRolePolicy(document: PolicyDocument): void {\n    // Default implementation of this protocol, compatible with the legacy behavior\n    document.addStatements(new PolicyStatement({\n      actions: [this.assumeRoleAction],\n      principals: [this],\n    }));\n  }\n\n  public toString() {\n    // This is a first pass to make the object readable. Descendant principals\n    // should return something nicer.\n    return JSON.stringify(this.policyFragment.principalJson);\n  }\n\n  /**\n   * JSON-ify the principal\n   *\n   * Used when JSON.stringify() is called\n   */\n  public toJSON() {\n    // Have to implement toJSON() because the default will lead to infinite recursion.\n    return this.policyFragment.principalJson;\n  }\n\n  /**\n   * Returns a new PrincipalWithConditions using this principal as the base, with the\n   * passed conditions added.\n   *\n   * When there is a value for the same operator and key in both the principal and the\n   * conditions parameter, the value from the conditions parameter will be used.\n   *\n   * @returns a new PrincipalWithConditions object.\n   */\n  public withConditions(conditions: Conditions): PrincipalBase {\n    return new PrincipalWithConditions(this, conditions);\n  }\n\n  /**\n   * Returns a new principal using this principal as the base, with session tags enabled.\n   *\n   * @returns a new SessionTagsPrincipal object.\n   */\n  public withSessionTags(): PrincipalBase {\n    return new SessionTagsPrincipal(this);\n  }\n}\n\n/**\n * Base class for Principals that wrap other principals\n */\nclass PrincipalAdapter extends PrincipalBase {\n  public readonly assumeRoleAction = this.wrapped.assumeRoleAction;\n  public readonly principalAccount = this.wrapped.principalAccount;\n\n  constructor(protected readonly wrapped: IPrincipal) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment { return this.wrapped.policyFragment; }\n\n  addToPolicy(statement: PolicyStatement): boolean {\n    return this.wrapped.addToPolicy(statement);\n  }\n  addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n    return this.wrapped.addToPrincipalPolicy(statement);\n  }\n}\n\n/**\n * An IAM principal with additional conditions specifying when the policy is in effect.\n *\n * For more information about conditions, see:\n * https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\n */\nexport class PrincipalWithConditions extends PrincipalAdapter {\n  private additionalConditions: Conditions;\n\n  constructor(principal: IPrincipal, conditions: Conditions) {\n    super(principal);\n    this.additionalConditions = conditions;\n  }\n\n  /**\n   * Add a condition to the principal\n   */\n  public addCondition(key: string, value: Condition) {\n    const existingValue = this.additionalConditions[key];\n    this.additionalConditions[key] = existingValue ? { ...existingValue, ...value } : value;\n  }\n\n  /**\n   * Adds multiple conditions to the principal\n   *\n   * Values from the conditions parameter will overwrite existing values with the same operator\n   * and key.\n   */\n  public addConditions(conditions: Conditions) {\n    Object.entries(conditions).forEach(([key, value]) => {\n      this.addCondition(key, value);\n    });\n  }\n\n  /**\n   * The conditions under which the policy is in effect.\n   * See [the IAM documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).\n   */\n  public get conditions() {\n    return this.mergeConditions(this.wrapped.policyFragment.conditions, this.additionalConditions);\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment(this.wrapped.policyFragment.principalJson, this.conditions);\n  }\n\n  public toString() {\n    return this.wrapped.toString();\n  }\n\n  /**\n   * JSON-ify the principal\n   *\n   * Used when JSON.stringify() is called\n   */\n  public toJSON() {\n    // Have to implement toJSON() because the default will lead to infinite recursion.\n    return this.policyFragment.principalJson;\n  }\n\n  private mergeConditions(principalConditions: Conditions, additionalConditions: Conditions): Conditions {\n    const mergedConditions: Conditions = {};\n    Object.entries(principalConditions).forEach(([operator, condition]) => {\n      mergedConditions[operator] = condition;\n    });\n\n    Object.entries(additionalConditions).forEach(([operator, condition]) => {\n      // merge the conditions if one of the additional conditions uses an\n      // operator that's already used by the principal's conditions merge the\n      // inner structure.\n      const existing = mergedConditions[operator];\n      if (!existing) {\n        mergedConditions[operator] = condition;\n        return; // continue\n      }\n\n      // if either the existing condition or the new one contain unresolved\n      // tokens, fail the merge. this is as far as we go at this point.\n      if (cdk.Token.isUnresolved(condition) || cdk.Token.isUnresolved(existing)) {\n        throw new Error(`multiple \"${operator}\" conditions cannot be merged if one of them contains an unresolved token`);\n      }\n\n      mergedConditions[operator] = { ...existing, ...condition };\n    });\n    return mergedConditions;\n  }\n}\n\n/**\n * Enables session tags on role assumptions from a principal\n *\n * For more information on session tags, see:\n * https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html\n */\nexport class SessionTagsPrincipal extends PrincipalAdapter {\n  constructor(principal: IPrincipal) {\n    super(principal);\n  }\n\n  public addToAssumeRolePolicy(doc: PolicyDocument) {\n    // Lazy import to avoid circular import dependencies during startup\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const adapter: typeof import('./private/policydoc-adapter') = require('./private/policydoc-adapter');\n\n    defaultAddPrincipalToAssumeRole(this.wrapped, new adapter.MutatingPolicyDocumentAdapter(doc, (statement) => {\n      statement.addActions('sts:TagSession');\n      return statement;\n    }));\n  }\n}\n\n/**\n * A collection of the fields in a PolicyStatement that can be used to identify a principal.\n *\n * This consists of the JSON used in the \"Principal\" field, and optionally a\n * set of \"Condition\"s that need to be applied to the policy.\n *\n * Generally, a principal looks like:\n *\n *     { '<TYPE>': ['ID', 'ID', ...] }\n *\n * And this is also the type of the field `principalJson`.  However, there is a\n * special type of principal that is just the string '*', which is treated\n * differently by some services. To represent that principal, `principalJson`\n * should contain `{ 'LiteralString': ['*'] }`.\n */\nexport class PrincipalPolicyFragment {\n  /**\n   *\n   * @param principalJson JSON of the \"Principal\" section in a policy statement\n   * @param conditions conditions that need to be applied to this policy\n   */\n  constructor(\n    public readonly principalJson: { [key: string]: string[] },\n    /**\n     * The conditions under which the policy is in effect.\n     * See [the IAM documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).\n     */\n    public readonly conditions: Conditions = {}) {\n  }\n}\n\n/**\n * Specify a principal by the Amazon Resource Name (ARN).\n * You can specify AWS accounts, IAM users, Federated SAML users, IAM roles, and specific assumed-role sessions.\n * You cannot specify IAM groups or instance profiles as principals\n *\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\n */\nexport class ArnPrincipal extends PrincipalBase {\n  /**\n   *\n   * @param arn Amazon Resource Name (ARN) of the principal entity (i.e. arn:aws:iam::123456789012:user/user-name)\n   */\n  constructor(public readonly arn: string) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ AWS: [this.arn] });\n  }\n\n  public toString() {\n    return `ArnPrincipal(${this.arn})`;\n  }\n}\n\n/**\n * Specify AWS account ID as the principal entity in a policy to delegate authority to the account.\n */\nexport class AccountPrincipal extends ArnPrincipal {\n  public readonly principalAccount: string | undefined;\n\n  /**\n   *\n   * @param accountId AWS account ID (i.e. 123456789012)\n   */\n  constructor(public readonly accountId: any) {\n    super(new StackDependentToken(stack => `arn:${stack.partition}:iam::${accountId}:root`).toString());\n    this.principalAccount = accountId;\n  }\n\n  public toString() {\n    return `AccountPrincipal(${this.accountId})`;\n  }\n}\n\n/**\n * Options for a service principal.\n */\nexport interface ServicePrincipalOpts {\n  /**\n   * The region in which the service is operating.\n   *\n   * @default the current Stack's region.\n   * @deprecated You should not need to set this. The stack's region is always correct.\n   */\n  readonly region?: string;\n\n  /**\n   * Additional conditions to add to the Service Principal\n   *\n   * @default - No conditions\n   */\n  readonly conditions?: { [key: string]: any };\n}\n\n/**\n * An IAM principal that represents an AWS service (i.e. sqs.amazonaws.com).\n */\nexport class ServicePrincipal extends PrincipalBase {\n  /**\n   *\n   * @param service AWS service (i.e. sqs.amazonaws.com)\n   */\n  constructor(public readonly service: string, private readonly opts: ServicePrincipalOpts = {}) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({\n      Service: [\n        new ServicePrincipalToken(this.service, this.opts).toString(),\n      ],\n    }, this.opts.conditions);\n  }\n\n  public toString() {\n    return `ServicePrincipal(${this.service})`;\n  }\n}\n\n/**\n * A principal that represents an AWS Organization\n */\nexport class OrganizationPrincipal extends PrincipalBase {\n  /**\n   *\n   * @param organizationId The unique identifier (ID) of an organization (i.e. o-12345abcde)\n   */\n  constructor(public readonly organizationId: string) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment(\n      { AWS: ['*'] },\n      { StringEquals: { 'aws:PrincipalOrgID': this.organizationId } },\n    );\n  }\n\n  public toString() {\n    return `OrganizationPrincipal(${this.organizationId})`;\n  }\n}\n\n/**\n * A policy principal for canonicalUserIds - useful for S3 bucket policies that use\n * Origin Access identities.\n *\n * See https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html\n *\n * and\n *\n * https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html\n *\n * for more details.\n *\n */\nexport class CanonicalUserPrincipal extends PrincipalBase {\n  /**\n   *\n   * @param canonicalUserId unique identifier assigned by AWS for every account.\n   *   root user and IAM users for an account all see the same ID.\n   *   (i.e. 79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be)\n   */\n  constructor(public readonly canonicalUserId: string) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ CanonicalUser: [this.canonicalUserId] });\n  }\n\n  public toString() {\n    return `CanonicalUserPrincipal(${this.canonicalUserId})`;\n  }\n}\n\n/**\n * Principal entity that represents a federated identity provider such as Amazon Cognito,\n * that can be used to provide temporary security credentials to users who have been authenticated.\n * Additional condition keys are available when the temporary security credentials are used to make a request.\n * You can use these keys to write policies that limit the access of federated users.\n *\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html#condition-keys-wif\n */\nexport class FederatedPrincipal extends PrincipalBase {\n  public readonly assumeRoleAction: string;\n\n  /**\n   *\n   * @param federated federated identity provider (i.e. 'cognito-identity.amazonaws.com' for users authenticated through Cognito)\n   * @param conditions The conditions under which the policy is in effect.\n   *   See [the IAM documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).\n   * @param sessionTags Whether to enable session tagging (see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html)\n   */\n  constructor(\n    public readonly federated: string,\n    public readonly conditions: Conditions,\n    assumeRoleAction: string = 'sts:AssumeRole') {\n    super();\n\n    this.assumeRoleAction = assumeRoleAction;\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ Federated: [this.federated] }, this.conditions);\n  }\n\n  public toString() {\n    return `FederatedPrincipal(${this.federated})`;\n  }\n}\n\n/**\n * A principal that represents a federated identity provider as Web Identity such as Cognito, Amazon,\n * Facebook, Google, etc.\n */\nexport class WebIdentityPrincipal extends FederatedPrincipal {\n\n  /**\n   *\n   * @param identityProvider identity provider (i.e. 'cognito-identity.amazonaws.com' for users authenticated through Cognito)\n   * @param conditions The conditions under which the policy is in effect.\n   *   See [the IAM documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).\n   * @param sessionTags Whether to enable session tagging (see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html)\n   */\n  constructor(identityProvider: string, conditions: Conditions = {}) {\n    super(identityProvider, conditions ?? {}, 'sts:AssumeRoleWithWebIdentity');\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ Federated: [this.federated] }, this.conditions);\n  }\n\n  public toString() {\n    return `WebIdentityPrincipal(${this.federated})`;\n  }\n}\n\n/**\n * A principal that represents a federated identity provider as from a OpenID Connect provider.\n */\nexport class OpenIdConnectPrincipal extends WebIdentityPrincipal {\n\n  /**\n   *\n   * @param openIdConnectProvider OpenID Connect provider\n   * @param conditions The conditions under which the policy is in effect.\n   *   See [the IAM documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).\n   */\n  constructor(openIdConnectProvider: IOpenIdConnectProvider, conditions: Conditions = {}) {\n    super(openIdConnectProvider.openIdConnectProviderArn, conditions ?? {});\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ Federated: [this.federated] }, this.conditions);\n  }\n\n  public toString() {\n    return `OpenIdConnectPrincipal(${this.federated})`;\n  }\n}\n\n/**\n * Principal entity that represents a SAML federated identity provider\n */\nexport class SamlPrincipal extends FederatedPrincipal {\n  constructor(samlProvider: ISamlProvider, conditions: Conditions) {\n    super(samlProvider.samlProviderArn, conditions, 'sts:AssumeRoleWithSAML');\n  }\n\n  public toString() {\n    return `SamlPrincipal(${this.federated})`;\n  }\n}\n\n/**\n * Principal entity that represents a SAML federated identity provider for\n * programmatic and AWS Management Console access.\n */\nexport class SamlConsolePrincipal extends SamlPrincipal {\n  constructor(samlProvider: ISamlProvider, conditions: Conditions = {}) {\n    super(samlProvider, {\n      ...conditions,\n      StringEquals: {\n        'SAML:aud': 'https://signin.aws.amazon.com/saml',\n      },\n    });\n  }\n\n  public toString() {\n    return `SamlConsolePrincipal(${this.federated})`;\n  }\n}\n\n/**\n * Use the AWS account into which a stack is deployed as the principal entity in a policy\n */\nexport class AccountRootPrincipal extends AccountPrincipal {\n  constructor() {\n    super(new StackDependentToken(stack => stack.account).toString());\n  }\n\n  public toString() {\n    return 'AccountRootPrincipal()';\n  }\n}\n\n/**\n * A principal representing all AWS identities in all accounts\n *\n * Some services behave differently when you specify `Principal: '*'`\n * or `Principal: { AWS: \"*\" }` in their resource policy.\n *\n * `AnyPrincipal` renders to `Principal: { AWS: \"*\" }`. This is correct\n * most of the time, but in cases where you need the other principal,\n * use `StarPrincipal` instead.\n */\nexport class AnyPrincipal extends ArnPrincipal {\n  constructor() {\n    super('*');\n  }\n\n  public toString() {\n    return 'AnyPrincipal()';\n  }\n}\n\n/**\n * A principal representing all identities in all accounts\n * @deprecated use `AnyPrincipal`\n */\nexport class Anyone extends AnyPrincipal { }\n\n/**\n * A principal that uses a literal '*' in the IAM JSON language\n *\n * Some services behave differently when you specify `Principal: \"*\"`\n * or `Principal: { AWS: \"*\" }` in their resource policy.\n *\n * `StarPrincipal` renders to `Principal: *`. Most of the time, you\n * should use `AnyPrincipal` instead.\n */\nexport class StarPrincipal extends PrincipalBase {\n  public readonly policyFragment: PrincipalPolicyFragment = {\n    principalJson: { [LITERAL_STRING_KEY]: ['*'] },\n    conditions: {},\n  };\n\n  public toString() {\n    return 'StarPrincipal()';\n  }\n}\n\n/**\n * Represents a principal that has multiple types of principals. A composite principal cannot\n * have conditions. i.e. multiple ServicePrincipals that form a composite principal\n */\nexport class CompositePrincipal extends PrincipalBase {\n  public readonly assumeRoleAction: string;\n  private readonly principals = new Array<IPrincipal>();\n\n  constructor(...principals: IPrincipal[]) {\n    super();\n    if (principals.length === 0) {\n      throw new Error('CompositePrincipals must be constructed with at least 1 Principal but none were passed.');\n    }\n    this.assumeRoleAction = principals[0].assumeRoleAction;\n    this.addPrincipals(...principals);\n  }\n\n  /**\n   * Adds IAM principals to the composite principal. Composite principals cannot have\n   * conditions.\n   *\n   * @param principals IAM principals that will be added to the composite principal\n   */\n  public addPrincipals(...principals: IPrincipal[]): this {\n    this.principals.push(...principals);\n    return this;\n  }\n\n  public addToAssumeRolePolicy(doc: PolicyDocument) {\n    for (const p of this.principals) {\n      defaultAddPrincipalToAssumeRole(p, doc);\n    }\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    // We only have a problem with conditions if we are trying to render composite\n    // princpals into a single statement (which is when `policyFragment` would get called)\n    for (const p of this.principals) {\n      const fragment = p.policyFragment;\n      if (fragment.conditions && Object.keys(fragment.conditions).length > 0) {\n        throw new Error(\n          'Components of a CompositePrincipal must not have conditions. ' +\n          `Tried to add the following fragment: ${JSON.stringify(fragment)}`);\n      }\n    }\n\n    const principalJson: { [key: string]: string[] } = {};\n\n    for (const p of this.principals) {\n      mergePrincipal(principalJson, p.policyFragment.principalJson);\n    }\n\n    return new PrincipalPolicyFragment(principalJson);\n  }\n\n  public toString() {\n    return `CompositePrincipal(${this.principals})`;\n  }\n}\n\n/**\n * A lazy token that requires an instance of Stack to evaluate\n */\nclass StackDependentToken implements cdk.IResolvable {\n  public readonly creationStack: string[];\n  constructor(private readonly fn: (stack: cdk.Stack) => any) {\n    this.creationStack = cdk.captureStackTrace();\n  }\n\n  public resolve(context: cdk.IResolveContext) {\n    return this.fn(cdk.Stack.of(context.scope));\n  }\n\n  public toString() {\n    return cdk.Token.asString(this);\n  }\n\n  /**\n   * JSON-ify the token\n   *\n   * Used when JSON.stringify() is called\n   */\n  public toJSON() {\n    return '<unresolved-token>';\n  }\n}\n\nclass ServicePrincipalToken implements cdk.IResolvable {\n  public readonly creationStack: string[];\n  constructor(\n    private readonly service: string,\n    private readonly opts: ServicePrincipalOpts) {\n    this.creationStack = cdk.captureStackTrace();\n  }\n\n  public resolve(ctx: cdk.IResolveContext) {\n    if (this.opts.region) {\n      // Special case, handle it separately to not break legacy behavior.\n      return RegionInfo.get(this.opts.region).servicePrincipal(this.service) ??\n        Default.servicePrincipal(this.service, this.opts.region, cdk.Aws.URL_SUFFIX);\n    }\n\n    const stack = cdk.Stack.of(ctx.scope);\n    return stack.regionalFact(\n      FactName.servicePrincipal(this.service),\n      Default.servicePrincipal(this.service, stack.region, cdk.Aws.URL_SUFFIX),\n    );\n  }\n\n  public toString() {\n    return cdk.Token.asString(this, {\n      displayHint: this.service,\n    });\n  }\n\n  /**\n   * JSON-ify the token\n   *\n   * Used when JSON.stringify() is called\n   */\n  public toJSON() {\n    return `<${this.service}>`;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
