{
  "version": 3,
  "sources": ["policy-document.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { PolicyStatement } from './policy-statement';\nimport { PostProcessPolicyDocument } from './private/postprocess-policy-document';\n\n/**\n * Properties for a new PolicyDocument\n */\nexport interface PolicyDocumentProps {\n  /**\n   * Automatically assign Statement Ids to all statements\n   *\n   * @default false\n   */\n  readonly assignSids?: boolean;\n\n  /**\n   * Initial statements to add to the policy document\n   *\n   * @default - No statements\n   */\n  readonly statements?: PolicyStatement[];\n\n  /**\n   * Try to minimize the policy by merging statements\n   *\n   * To avoid overrunning the maximum policy size, combine statements if they produce\n   * the same result. Merging happens according to the following rules:\n   *\n   * - The Effect of both statements is the same\n   * - Neither of the statements have a 'Sid'\n   * - Combine Principals if the rest of the statement is exactly the same.\n   * - Combine Resources if the rest of the statement is exactly the same.\n   * - Combine Actions if the rest of the statement is exactly the same.\n   * - We will never combine NotPrincipals, NotResources or NotActions, because doing\n   *   so would change the meaning of the policy document.\n   *\n   * @default - false, unless the feature flag `@aws-cdk/aws-iam:minimizePolicies` is set\n   */\n  readonly minimize?: boolean;\n}\n\n/**\n * A PolicyDocument is a collection of statements\n */\nexport class PolicyDocument implements cdk.IResolvable {\n\n  /**\n   * Creates a new PolicyDocument based on the object provided.\n   * This will accept an object created from the `.toJSON()` call\n   * @param obj the PolicyDocument in object form.\n   */\n  public static fromJson(obj: any): PolicyDocument {\n    const newPolicyDocument = new PolicyDocument();\n    const statement = obj.Statement ?? [];\n    if (statement && !Array.isArray(statement)) {\n      throw new Error('Statement must be an array');\n    }\n    newPolicyDocument.addStatements(...obj.Statement.map((s: any) => PolicyStatement.fromJson(s)));\n    return newPolicyDocument;\n  }\n\n  public readonly creationStack: string[];\n  private readonly statements = new Array<PolicyStatement>();\n  private readonly autoAssignSids: boolean;\n  private readonly minimize?: boolean;\n\n  constructor(props: PolicyDocumentProps = {}) {\n    this.creationStack = cdk.captureStackTrace();\n    this.autoAssignSids = !!props.assignSids;\n    this.minimize = props.minimize;\n\n    this.addStatements(...props.statements || []);\n  }\n\n  public resolve(context: cdk.IResolveContext): any {\n    context.registerPostProcessor(new PostProcessPolicyDocument(\n      this.autoAssignSids,\n      this.minimize ?? cdk.FeatureFlags.of(context.scope).isEnabled(cxapi.IAM_MINIMIZE_POLICIES) ?? false,\n    ));\n    return this.render();\n  }\n\n  /**\n   * Whether the policy document contains any statements.\n   */\n  public get isEmpty(): boolean {\n    return this.statements.length === 0;\n  }\n\n  /**\n   * The number of statements already added to this policy.\n   * Can be used, for example, to generate unique \"sid\"s within the policy.\n   */\n  public get statementCount(): number {\n    return this.statements.length;\n  }\n\n  /**\n   * Adds a statement to the policy document.\n   *\n   * @param statement the statement to add.\n   */\n  public addStatements(...statement: PolicyStatement[]) {\n    this.statements.push(...statement);\n  }\n\n  /**\n   * Encode the policy document as a string\n   */\n  public toString() {\n    return cdk.Token.asString(this, {\n      displayHint: 'PolicyDocument',\n    });\n  }\n\n  /**\n   * JSON-ify the document\n   *\n   * Used when JSON.stringify() is called\n   */\n  public toJSON() {\n    return this.render();\n  }\n\n  /**\n   * Validate that all policy statements in the policy document satisfies the\n   * requirements for any policy.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json\n   */\n  public validateForAnyPolicy(): string[] {\n    const errors = new Array<string>();\n    for (const statement of this.statements) {\n      errors.push(...statement.validateForAnyPolicy());\n    }\n    return errors;\n  }\n\n  /**\n   * Validate that all policy statements in the policy document satisfies the\n   * requirements for a resource-based policy.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json\n   */\n  public validateForResourcePolicy(): string[] {\n    const errors = new Array<string>();\n    for (const statement of this.statements) {\n      errors.push(...statement.validateForResourcePolicy());\n    }\n    return errors;\n  }\n\n  /**\n   * Validate that all policy statements in the policy document satisfies the\n   * requirements for an identity-based policy.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json\n   */\n  public validateForIdentityPolicy(): string[] {\n    const errors = new Array<string>();\n    for (const statement of this.statements) {\n      errors.push(...statement.validateForIdentityPolicy());\n    }\n    return errors;\n  }\n\n  private render(): any {\n    if (this.isEmpty) {\n      return undefined;\n    }\n\n    const doc = {\n      Statement: this.statements.map(s => s.toStatementJson()),\n      Version: '2012-10-17',\n    };\n\n    return doc;\n  }\n}\n"],
  "mappings": "qNAAA,IAAA,QAAA,YAAA,EACA,MAAA,QAAA,cAAA,EACA,mBAAA,QAAA,oBAAA,EACA,8BAAA,QAAA,uCAAA,EA0CA,MAAa,cAAc,CAsBzB,YAAY,MAA6B,CAAA,EAAE,CAJ1B,KAAA,WAAa,GAAI,8EAKhC,KAAK,cAAgB,IAAI,kBAAiB,EAC1C,KAAK,eAAiB,CAAC,CAAC,MAAM,WAC9B,KAAK,SAAW,MAAM,SAEtB,KAAK,cAAc,GAAG,MAAM,YAAc,CAAA,CAAE,QApBhC,UAAS,IAAQ,QAC7B,KAAM,mBAAoB,GAAI,gBACxB,UAAS,IAAG,IAAI,aAAS,MAAA,KAAA,OAAA,GAAI,CAAA,EACnC,GAAI,WAAa,CAAC,MAAM,QAAQ,SAAS,EACvC,KAAM,IAAI,OAAM,4BAA4B,EAE9C,yBAAkB,cAAc,GAAG,IAAI,UAAU,IAAI,AAAC,GAAW,mBAAA,gBAAgB,SAAS,CAAC,CAAC,CAAC,EACtF,kBAgBF,QAAQ,QAA4B,+EACzC,QAAQ,sBAAsB,GAAI,+BAAA,0BAChC,KAAK,eAAc,IAAA,IACnB,KAAK,YAAQ,MAAA,KAAA,OAAA,GAAI,IAAI,aAAa,GAAG,QAAQ,KAAK,EAAE,UAAU,MAAM,qBAAqB,KAAC,MAAA,KAAA,OAAA,GAAI,EAAK,CACpG,EACM,KAAK,OAAM,KAMT,UAAO,CAChB,MAAO,MAAK,WAAW,SAAW,KAOzB,iBAAc,CACvB,MAAO,MAAK,WAAW,OAQlB,iBAAiB,UAA4B,wEAClD,KAAK,WAAW,KAAK,GAAG,SAAS,EAM5B,UAAQ,CACb,MAAO,KAAI,MAAM,SAAS,KAAM,CAC9B,YAAa,iBACd,EAQI,QAAM,CACX,MAAO,MAAK,OAAM,EASb,sBAAoB,CACzB,KAAM,QAAS,GAAI,OACnB,SAAW,aAAa,MAAK,WAC3B,OAAO,KAAK,GAAG,UAAU,qBAAoB,CAAE,EAEjD,MAAO,QASF,2BAAyB,CAC9B,KAAM,QAAS,GAAI,OACnB,SAAW,aAAa,MAAK,WAC3B,OAAO,KAAK,GAAG,UAAU,0BAAyB,CAAE,EAEtD,MAAO,QASF,2BAAyB,CAC9B,KAAM,QAAS,GAAI,OACnB,SAAW,aAAa,MAAK,WAC3B,OAAO,KAAK,GAAG,UAAU,0BAAyB,CAAE,EAEtD,MAAO,QAGD,QAAM,CACZ,MAAI,MAAK,QACP,OAGU,CACV,UAAW,KAAK,WAAW,IAAI,GAAK,EAAE,gBAAe,CAAE,EACvD,QAAS,eAjIf,QAAA,eAAA",
  "names": []
}
