{
  "version": 3,
  "sources": ["lazy-role.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { Grant } from './grant';\nimport { IManagedPolicy } from './managed-policy';\nimport { Policy } from './policy';\nimport { PolicyStatement } from './policy-statement';\nimport { AddToPrincipalPolicyResult, IPrincipal, PrincipalPolicyFragment } from './principals';\nimport { IRole, Role, RoleProps } from './role';\n\n/**\n * Properties for defining a LazyRole\n */\nexport interface LazyRoleProps extends RoleProps {\n\n}\n\n/**\n * An IAM role that only gets attached to the construct tree once it gets used, not before\n *\n * This construct can be used to simplify logic in other constructs\n * which need to create a role but only if certain configurations occur\n * (such as when AutoScaling is configured). The role can be configured in one\n * place, but if it never gets used it doesn't get instantiated and will\n * not be synthesized or deployed.\n *\n * @resource AWS::IAM::Role\n */\nexport class LazyRole extends cdk.Resource implements IRole {\n  public readonly grantPrincipal: IPrincipal = this;\n  public readonly principalAccount: string | undefined = this.env.account;\n  public readonly assumeRoleAction: string = 'sts:AssumeRole';\n\n  private role?: Role;\n  private readonly statements = new Array<PolicyStatement>();\n  private readonly policies = new Array<Policy>();\n  private readonly managedPolicies = new Array<IManagedPolicy>();\n\n  constructor(scope: Construct, id: string, private readonly props: LazyRoleProps) {\n    super(scope, id);\n  }\n\n  /**\n   * Adds a permission to the role's default policy document.\n   * If there is no default policy attached to this role, it will be created.\n   * @param statement The permission statement to add to the policy document\n   */\n  public addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n    if (this.role) {\n      return this.role.addToPrincipalPolicy(statement);\n    } else {\n      this.statements.push(statement);\n      return { statementAdded: true, policyDependable: this };\n    }\n  }\n\n  public addToPolicy(statement: PolicyStatement): boolean {\n    return this.addToPrincipalPolicy(statement).statementAdded;\n  }\n\n  /**\n   * Attaches a policy to this role.\n   * @param policy The policy to attach\n   */\n  public attachInlinePolicy(policy: Policy): void {\n    if (this.role) {\n      this.role.attachInlinePolicy(policy);\n    } else {\n      this.policies.push(policy);\n    }\n  }\n\n  /**\n   * Attaches a managed policy to this role.\n   * @param policy The managed policy to attach.\n   */\n  public addManagedPolicy(policy: IManagedPolicy): void {\n    if (this.role) {\n      this.role.addManagedPolicy(policy);\n    } else {\n      this.managedPolicies.push(policy);\n    }\n  }\n\n  /**\n   * Returns the ARN of this role.\n   */\n  public get roleArn(): string {\n    return this.instantiate().roleArn;\n  }\n\n  /**\n   * Returns the stable and unique string identifying the role (i.e. AIDAJQABLZS4A3QDU576Q)\n   *\n   * @attribute\n   */\n  public get roleId(): string {\n    return this.instantiate().roleId;\n  }\n\n  public get roleName(): string {\n    return this.instantiate().roleName;\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return this.instantiate().policyFragment;\n  }\n\n  /**\n   * Grant the actions defined in actions to the identity Principal on this resource.\n   */\n  public grant(identity: IPrincipal, ...actions: string[]): Grant {\n    return this.instantiate().grant(identity, ...actions);\n  }\n\n  /**\n   * Grant permissions to the given principal to pass this role.\n   */\n  public grantPassRole(identity: IPrincipal): Grant {\n    return this.instantiate().grantPassRole(identity);\n  }\n\n  private instantiate(): Role {\n    if (!this.role) {\n      const role = new Role(this, 'Default', this.props);\n      this.statements.forEach(role.addToPolicy.bind(role));\n      this.policies.forEach(role.attachInlinePolicy.bind(role));\n      this.managedPolicies.forEach(role.addManagedPolicy.bind(role));\n      this.role = role;\n    }\n    return this.role;\n  }\n}\n"],
  "mappings": "+MAAA,IAAA,QAAA,YAAA,EAOA,OAAA,QAAA,QAAA,EAoBA,MAAa,gBAAiB,KAAI,QAAQ,CAUxC,YAAY,MAAkB,GAA6B,MAAoB,CAC7E,MAAM,MAAO,EAAE,EAD0C,KAAA,MAAA,MAT3C,KAAA,eAA6B,KAC7B,KAAA,iBAAuC,KAAK,IAAI,QAChD,KAAA,iBAA2B,iBAG1B,KAAA,WAAa,GAAI,OACjB,KAAA,SAAW,GAAI,OACf,KAAA,gBAAkB,GAAI,wEAWhC,qBAAqB,UAA0B,CACpD,8EAAI,KAAK,KACA,KAAK,KAAK,qBAAqB,SAAS,EAE/C,MAAK,WAAW,KAAK,SAAS,EACvB,CAAE,eAAgB,GAAM,iBAAkB,IAAI,GAIlD,YAAY,UAA0B,+EACpC,KAAK,qBAAqB,SAAS,EAAE,eAOvC,mBAAmB,OAAc,4DACtC,AAAI,KAAK,KACP,KAAK,KAAK,mBAAmB,MAAM,EAEnC,KAAK,SAAS,KAAK,MAAM,EAQtB,iBAAiB,OAAsB,oEAC5C,AAAI,KAAK,KACP,KAAK,KAAK,iBAAiB,MAAM,EAEjC,KAAK,gBAAgB,KAAK,MAAM,KAOzB,UAAO,CAChB,MAAO,MAAK,YAAW,EAAG,WAQjB,SAAM,CACf,MAAO,MAAK,YAAW,EAAG,UAGjB,WAAQ,CACjB,MAAO,MAAK,YAAW,EAAG,YAGjB,iBAAc,CACvB,MAAO,MAAK,YAAW,EAAG,eAMrB,MAAM,YAAyB,QAAiB,yEAC9C,KAAK,YAAW,EAAG,MAAM,SAAU,GAAG,OAAO,EAM/C,cAAc,SAAoB,yEAChC,KAAK,YAAW,EAAG,cAAc,QAAQ,EAG1C,aAAW,CACjB,GAAI,CAAC,KAAK,KAAM,CACd,KAAM,MAAO,GAAI,QAAA,KAAK,KAAM,UAAW,KAAK,KAAK,EACjD,KAAK,WAAW,QAAQ,KAAK,YAAY,KAAK,IAAI,CAAC,EACnD,KAAK,SAAS,QAAQ,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACxD,KAAK,gBAAgB,QAAQ,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAC7D,KAAK,KAAO,KAEd,MAAO,MAAK,MAtGhB,QAAA,SAAA",
  "names": []
}
