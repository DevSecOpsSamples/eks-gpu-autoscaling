{
  "version": 3,
  "sources": ["permissions-boundary.ts"],
  "sourcesContent": ["import { Aspects, CfnResource } from '../../core';\nimport { IConstruct } from 'constructs';\nimport { CfnRole, CfnUser } from './iam.generated';\nimport { IManagedPolicy } from './managed-policy';\n\n/**\n * Modify the Permissions Boundaries of Users and Roles in a construct tree\n *\n * ```ts\n * const policy = iam.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess');\n * iam.PermissionsBoundary.of(this).apply(policy);\n * ```\n */\nexport class PermissionsBoundary {\n  /**\n   * Access the Permissions Boundaries of a construct tree\n   */\n  public static of(scope: IConstruct): PermissionsBoundary {\n    return new PermissionsBoundary(scope);\n  }\n\n  private constructor(private readonly scope: IConstruct) {\n  }\n\n  /**\n   * Apply the given policy as Permissions Boundary to all Roles and Users in\n   * the scope.\n   *\n   * Will override any Permissions Boundaries configured previously; in case\n   * a Permission Boundary is applied in multiple scopes, the Boundary applied\n   * closest to the Role wins.\n   */\n  public apply(boundaryPolicy: IManagedPolicy) {\n    Aspects.of(this.scope).add({\n      visit(node: IConstruct) {\n        if (\n          CfnResource.isCfnResource(node) &&\n            (node.cfnResourceType == CfnRole.CFN_RESOURCE_TYPE_NAME || node.cfnResourceType == CfnUser.CFN_RESOURCE_TYPE_NAME)\n        ) {\n          node.addPropertyOverride('PermissionsBoundary', boundaryPolicy.managedPolicyArn);\n        }\n      },\n    });\n  }\n\n  /**\n   * Remove previously applied Permissions Boundaries\n   */\n  public clear() {\n    Aspects.of(this.scope).add({\n      visit(node: IConstruct) {\n        if (\n          CfnResource.isCfnResource(node) &&\n            (node.cfnResourceType == CfnRole.CFN_RESOURCE_TYPE_NAME || node.cfnResourceType == CfnUser.CFN_RESOURCE_TYPE_NAME)\n        ) {\n          node.addPropertyDeletionOverride('PermissionsBoundary');\n        }\n      },\n    });\n  }\n}\n"],
  "mappings": "0NAAA,OAAA,QAAA,YAAA,EAEA,gBAAA,QAAA,iBAAA,EAWA,MAAa,mBAAmB,CAQ9B,YAAqC,MAAiB,CAAjB,KAAA,MAAA,YAJvB,IAAG,MAAiB,CAChC,MAAO,IAAI,qBAAoB,KAAK,EAc/B,MAAM,eAA8B,4EACzC,OAAA,QAAQ,GAAG,KAAK,KAAK,EAAE,IAAI,CACzB,MAAM,KAAgB,CACpB,AACE,OAAA,YAAY,cAAc,IAAI,GAC3B,MAAK,iBAAmB,gBAAA,QAAQ,wBAA0B,KAAK,iBAAmB,gBAAA,QAAQ,yBAE7F,KAAK,oBAAoB,sBAAuB,eAAe,gBAAgB,CAEnF,EACD,EAMI,OAAK,CACV,OAAA,QAAQ,GAAG,KAAK,KAAK,EAAE,IAAI,CACzB,MAAM,KAAgB,CACpB,AACE,OAAA,YAAY,cAAc,IAAI,GAC3B,MAAK,iBAAmB,gBAAA,QAAQ,wBAA0B,KAAK,iBAAmB,gBAAA,QAAQ,yBAE7F,KAAK,4BAA4B,qBAAqB,CAE1D,EACD,GA7CL,QAAA,oBAAA",
  "names": []
}
