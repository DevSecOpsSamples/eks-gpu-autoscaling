{
  "version": 3,
  "sources": ["group.ts"],
  "sourcesContent": ["import { ArnFormat, Lazy, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnGroup } from './iam.generated';\nimport { IIdentity } from './identity-base';\nimport { IManagedPolicy } from './managed-policy';\nimport { Policy } from './policy';\nimport { PolicyStatement } from './policy-statement';\nimport { AddToPrincipalPolicyResult, ArnPrincipal, IPrincipal, PrincipalPolicyFragment } from './principals';\nimport { IUser } from './user';\nimport { AttachedPolicies } from './util';\n\n/**\n * Represents an IAM Group.\n *\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html\n */\nexport interface IGroup extends IIdentity {\n  /**\n   * Returns the IAM Group Name\n   *\n   * @attribute\n   */\n  readonly groupName: string;\n\n  /**\n   * Returns the IAM Group ARN\n   *\n   * @attribute\n   */\n  readonly groupArn: string;\n}\n\n/**\n * Properties for defining an IAM group\n */\nexport interface GroupProps {\n  /**\n   * A name for the IAM group. For valid values, see the GroupName parameter\n   * for the CreateGroup action in the IAM API Reference. If you don't specify\n   * a name, AWS CloudFormation generates a unique physical ID and uses that\n   * ID for the group name.\n   *\n   * If you specify a name, you must specify the CAPABILITY_NAMED_IAM value to\n   * acknowledge your template's capabilities. For more information, see\n   * Acknowledging IAM Resources in AWS CloudFormation Templates.\n   *\n   * @default Generated by CloudFormation (recommended)\n   */\n  readonly groupName?: string;\n\n  /**\n   * A list of managed policies associated with this role.\n   *\n   * You can add managed policies later using\n   * `addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName(policyName))`.\n   *\n   * @default - No managed policies.\n   */\n  readonly managedPolicies?: IManagedPolicy[];\n\n  /**\n   * The path to the group. For more information about paths, see [IAM\n   * Identifiers](http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html)\n   * in the IAM User Guide.\n   *\n   * @default /\n   */\n  readonly path?: string;\n}\n\nabstract class GroupBase extends Resource implements IGroup {\n  public abstract readonly groupName: string;\n  public abstract readonly groupArn: string;\n\n  public readonly grantPrincipal: IPrincipal = this;\n  public readonly principalAccount: string | undefined = this.env.account;\n  public readonly assumeRoleAction: string = 'sts:AssumeRole';\n\n  private readonly attachedPolicies = new AttachedPolicies();\n  private defaultPolicy?: Policy;\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new ArnPrincipal(this.groupArn).policyFragment;\n  }\n\n  /**\n   * Attaches a policy to this group.\n   * @param policy The policy to attach.\n   */\n  public attachInlinePolicy(policy: Policy) {\n    this.attachedPolicies.attach(policy);\n    policy.attachToGroup(this);\n  }\n\n  public addManagedPolicy(_policy: IManagedPolicy) {\n    // drop\n  }\n\n  /**\n   * Adds a user to this group.\n   */\n  public addUser(user: IUser) {\n    user.addToGroup(this);\n  }\n\n  /**\n   * Adds an IAM statement to the default policy.\n   */\n  public addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n    if (!this.defaultPolicy) {\n      this.defaultPolicy = new Policy(this, 'DefaultPolicy');\n      this.defaultPolicy.attachToGroup(this);\n    }\n\n    this.defaultPolicy.addStatements(statement);\n    return { statementAdded: true, policyDependable: this.defaultPolicy };\n  }\n\n  public addToPolicy(statement: PolicyStatement): boolean {\n    return this.addToPrincipalPolicy(statement).statementAdded;\n  }\n}\n\n/**\n * An IAM Group (collection of IAM users) lets you specify permissions for\n * multiple users, which can make it easier to manage permissions for those users.\n *\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html\n */\nexport class Group extends GroupBase {\n  /**\n   * Import an external group by ARN.\n   *\n   * If the imported Group ARN is a Token (such as a\n   * `CfnParameter.valueAsString` or a `Fn.importValue()`) *and* the referenced\n   * group has a `path` (like `arn:...:group/AdminGroup/NetworkAdmin`), the\n   * `groupName` property will not resolve to the correct value. Instead it\n   * will resolve to the first path component. We unfortunately cannot express\n   * the correct calculation of the full path name as a CloudFormation\n   * expression. In this scenario the Group ARN should be supplied without the\n   * `path` in order to resolve the correct group resource.\n   *\n   * @param scope construct scope\n   * @param id construct id\n   * @param groupArn the ARN of the group to import (e.g. `arn:aws:iam::account-id:group/group-name`)\n   */\n  public static fromGroupArn(scope: Construct, id: string, groupArn: string): IGroup {\n    const arnComponents = Stack.of(scope).splitArn(groupArn, ArnFormat.SLASH_RESOURCE_NAME);\n    const groupName = arnComponents.resourceName!;\n    class Import extends GroupBase {\n      public groupName = groupName;\n      public groupArn = groupArn;\n      public principalAccount = arnComponents.account;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * Import an existing group by given name (with path).\n   * This method has same caveats of `fromGroupArn`\n   *\n   * @param scope construct scope\n   * @param id construct id\n   * @param groupName the groupName (path included) of the existing group to import\n   */\n  static fromGroupName(scope: Construct, id: string, groupName: string) {\n    const groupArn = Stack.of(scope).formatArn({\n      service: 'iam',\n      region: '',\n      resource: 'group',\n      resourceName: groupName,\n    });\n    return Group.fromGroupArn(scope, id, groupArn);\n  }\n\n  public readonly groupName: string;\n  public readonly groupArn: string;\n\n  private readonly managedPolicies: IManagedPolicy[] = [];\n\n  constructor(scope: Construct, id: string, props: GroupProps = {}) {\n    super(scope, id, {\n      physicalName: props.groupName,\n    });\n\n    this.managedPolicies.push(...props.managedPolicies || []);\n\n    const group = new CfnGroup(this, 'Resource', {\n      groupName: this.physicalName,\n      managedPolicyArns: Lazy.list({ produce: () => this.managedPolicies.map(p => p.managedPolicyArn) }, { omitEmpty: true }),\n      path: props.path,\n    });\n\n    this.groupName = this.getResourceNameAttribute(group.ref);\n    this.groupArn = this.getResourceArnAttribute(group.attrArn, {\n      region: '', // IAM is global in each partition\n      service: 'iam',\n      resource: 'group',\n      resourceName: this.physicalName,\n    });\n  }\n\n  /**\n   * Attaches a managed policy to this group.\n   * @param policy The managed policy to attach.\n   */\n  public addManagedPolicy(policy: IManagedPolicy) {\n    if (this.managedPolicies.find(mp => mp === policy)) { return; }\n    this.managedPolicies.push(policy);\n  }\n}\n"],
  "mappings": "4MAAA,OAAA,QAAA,YAAA,EAEA,gBAAA,QAAA,iBAAA,EAGA,SAAA,QAAA,UAAA,EAEA,aAAA,QAAA,cAAA,EAEA,OAAA,QAAA,QAAA,EA6DA,MAAe,iBAAkB,QAAA,QAAQ,CAAzC,aAAA,qBAIkB,KAAA,eAA6B,KAC7B,KAAA,iBAAuC,KAAK,IAAI,QAChD,KAAA,iBAA2B,iBAE1B,KAAA,iBAAmB,GAAI,QAAA,gBA2C1C,IAxCa,iBAAc,CACvB,MAAO,IAAI,cAAA,aAAa,KAAK,QAAQ,EAAE,eAOlC,mBAAmB,OAAc,CACtC,KAAK,iBAAiB,OAAO,MAAM,EACnC,OAAO,cAAc,IAAI,EAGpB,iBAAiB,QAAuB,EAOxC,QAAQ,KAAW,CACxB,KAAK,WAAW,IAAI,EAMf,qBAAqB,UAA0B,CACpD,MAAK,MAAK,eACR,MAAK,cAAgB,GAAI,UAAA,OAAO,KAAM,eAAe,EACrD,KAAK,cAAc,cAAc,IAAI,GAGvC,KAAK,cAAc,cAAc,SAAS,EACnC,CAAE,eAAgB,GAAM,iBAAkB,KAAK,aAAa,EAG9D,YAAY,UAA0B,CAC3C,MAAO,MAAK,qBAAqB,SAAS,EAAE,gBAUhD,MAAa,aAAc,UAAS,CAoDlC,YAAY,MAAkB,GAAY,MAAoB,CAAA,EAAE,CAC9D,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,UACrB,EALc,KAAA,gBAAoC,CAAA,gEAOnD,KAAK,gBAAgB,KAAK,GAAG,MAAM,iBAAmB,CAAA,CAAE,EAExD,KAAM,OAAQ,GAAI,iBAAA,SAAS,KAAM,WAAY,CAC3C,UAAW,KAAK,aAChB,kBAAmB,OAAA,KAAK,KAAK,CAAE,QAAS,IAAM,KAAK,gBAAgB,IAAI,GAAK,EAAE,gBAAgB,CAAC,EAAI,CAAE,UAAW,EAAI,CAAE,EACtH,KAAM,MAAM,KACb,EAED,KAAK,UAAY,KAAK,yBAAyB,MAAM,GAAG,EACxD,KAAK,SAAW,KAAK,wBAAwB,MAAM,QAAS,CAC1D,OAAQ,GACR,QAAS,MACT,SAAU,QACV,aAAc,KAAK,aACpB,QAtDW,cAAa,MAAkB,GAAY,SAAgB,CACvE,KAAM,eAAgB,OAAA,MAAM,GAAG,KAAK,EAAE,SAAS,SAAU,OAAA,UAAU,mBAAmB,EAChF,UAAY,cAAc,aAChC,MAAM,cAAe,UAAS,CAA9B,aAAA,qBACS,KAAA,UAAY,UACZ,KAAA,SAAW,SACX,KAAA,iBAAmB,cAAc,OAC1C,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,QAWtB,eAAc,MAAkB,GAAY,UAAiB,CAClE,KAAM,UAAW,OAAA,MAAM,GAAG,KAAK,EAAE,UAAU,CACzC,QAAS,MACT,OAAQ,GACR,SAAU,QACV,aAAc,UACf,EACD,MAAO,OAAM,aAAa,MAAO,GAAI,QAAQ,EAkCxC,iBAAiB,OAAsB,CAC5C,mEAAI,MAAK,gBAAgB,KAAK,IAAM,KAAO,MAAM,GACjD,KAAK,gBAAgB,KAAK,MAAM,GAhFpC,QAAA,MAAA",
  "names": []
}
