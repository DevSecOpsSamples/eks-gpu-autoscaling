{
  "version": 3,
  "sources": ["saml-provider.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport { IResource, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnSAMLProvider } from './iam.generated';\n\n/**\n * A SAML provider\n */\nexport interface ISamlProvider extends IResource {\n  /**\n   * The Amazon Resource Name (ARN) of the provider\n   *\n   * @attribute\n   */\n  readonly samlProviderArn: string;\n}\n\n/**\n * Properties for a SAML provider\n */\nexport interface SamlProviderProps {\n  /**\n   * The name of the provider to create.\n   *\n   * This parameter allows a string of characters consisting of upper and\n   * lowercase alphanumeric characters with no spaces. You can also include\n   * any of the following characters: _+=,.@-\n   *\n   * Length must be between 1 and 128 characters.\n   *\n   * @default - a CloudFormation generated name\n   */\n  readonly name?: string;\n\n  /**\n   * An XML document generated by an identity provider (IdP) that supports\n   * SAML 2.0. The document includes the issuer's name, expiration information,\n   * and keys that can be used to validate the SAML authentication response\n   * (assertions) that are received from the IdP. You must generate the metadata\n   * document using the identity management software that is used as your\n   * organization's IdP.\n   */\n  readonly metadataDocument: SamlMetadataDocument;\n}\n\n/**\n * A SAML metadata document\n */\nexport abstract class SamlMetadataDocument {\n  /**\n   * Create a SAML metadata document from a XML string\n   */\n  public static fromXml(xml: string): SamlMetadataDocument {\n    return { xml };\n  }\n\n  /**\n   * Create a SAML metadata document from a XML file\n   */\n  public static fromFile(path: string): SamlMetadataDocument {\n    return { xml: fs.readFileSync(path, 'utf-8') };\n  }\n\n  /**\n   * The XML content of the metadata document\n   */\n  public abstract readonly xml: string;\n}\n\n/**\n * A SAML provider\n */\nexport class SamlProvider extends Resource implements ISamlProvider {\n  /**\n   * Import an existing provider\n   */\n  public static fromSamlProviderArn(scope: Construct, id: string, samlProviderArn: string): ISamlProvider {\n    class Import extends Resource implements ISamlProvider {\n      public readonly samlProviderArn = samlProviderArn;\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly samlProviderArn: string;\n\n  constructor(scope: Construct, id: string, props: SamlProviderProps) {\n    super(scope, id);\n\n    if (props.name && !Token.isUnresolved(props.name) && !/^[\\w+=,.@-]{1,128}$/.test(props.name)) {\n      throw new Error('Invalid SAML provider name. The name must be a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. Length must be between 1 and 128 characters.');\n    }\n\n    const samlProvider = new CfnSAMLProvider(this, 'Resource', {\n      name: props.name,\n      samlMetadataDocument: props.metadataDocument.xml,\n    });\n\n    this.samlProviderArn = samlProvider.ref;\n  }\n}\n"],
  "mappings": "mPAAA,GAAA,QAAA,IAAA,EACA,OAAA,QAAA,YAAA,EAEA,gBAAA,QAAA,iBAAA,EA6CA,MAAsB,oBAAoB,OAI1B,SAAQ,IAAW,CAC/B,MAAO,CAAE,GAAG,QAMA,UAAS,KAAY,CACjC,MAAO,CAAE,IAAK,GAAG,aAAa,KAAM,OAAO,CAAC,GAZhD,QAAA,qBAAA,sIAwBA,MAAa,oBAAqB,QAAA,QAAQ,CAaxC,YAAY,MAAkB,GAAY,MAAwB,CAChE,MAAM,MAAO,EAAE,EAEf,wEAAI,MAAM,MAAQ,CAAC,OAAA,MAAM,aAAa,MAAM,IAAI,GAAK,CAAC,sBAAsB,KAAK,MAAM,IAAI,EACzF,KAAM,IAAI,OAAM,2PAA2P,EAG7Q,KAAM,cAAe,GAAI,iBAAA,gBAAgB,KAAM,WAAY,CACzD,KAAM,MAAM,KACZ,qBAAsB,MAAM,iBAAiB,IAC9C,EAED,KAAK,gBAAkB,aAAa,UArBxB,qBAAoB,MAAkB,GAAY,gBAAuB,CACrF,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,gBAAkB,eACpC,EACA,MAAO,IAAI,QAAO,MAAO,EAAE,GAR/B,QAAA,aAAA",
  "names": []
}
