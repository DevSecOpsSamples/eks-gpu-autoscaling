{
  "version": 3,
  "sources": ["policy-statement.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Group } from './group';\nimport {\n  AccountPrincipal, AccountRootPrincipal, AnyPrincipal, ArnPrincipal, CanonicalUserPrincipal,\n  FederatedPrincipal, IPrincipal, PrincipalBase, PrincipalPolicyFragment, ServicePrincipal, ServicePrincipalOpts,\n} from './principals';\nimport { normalizeStatement } from './private/postprocess-policy-document';\nimport { LITERAL_STRING_KEY, mergePrincipal } from './util';\n\nconst ensureArrayOrUndefined = (field: any) => {\n  if (field === undefined) {\n    return undefined;\n  }\n  if (typeof (field) !== 'string' && !Array.isArray(field)) {\n    throw new Error('Fields must be either a string or an array of strings');\n  }\n  if (Array.isArray(field) && !!field.find((f: any) => typeof (f) !== 'string')) {\n    throw new Error('Fields must be either a string or an array of strings');\n  }\n  return Array.isArray(field) ? field : [field];\n};\n\n/**\n * Represents a statement in an IAM policy document.\n */\nexport class PolicyStatement {\n\n  /**\n   * Creates a new PolicyStatement based on the object provided.\n   * This will accept an object created from the `.toJSON()` call\n   * @param obj the PolicyStatement in object form.\n   */\n  public static fromJson(obj: any) {\n    const ret = new PolicyStatement({\n      sid: obj.Sid,\n      actions: ensureArrayOrUndefined(obj.Action),\n      resources: ensureArrayOrUndefined(obj.Resource),\n      conditions: obj.Condition,\n      effect: obj.Effect,\n      notActions: ensureArrayOrUndefined(obj.NotAction),\n      notResources: ensureArrayOrUndefined(obj.NotResource),\n      principals: obj.Principal ? [new JsonPrincipal(obj.Principal)] : undefined,\n      notPrincipals: obj.NotPrincipal ? [new JsonPrincipal(obj.NotPrincipal)] : undefined,\n    });\n\n    // validate that the PolicyStatement has the correct shape\n    const errors = ret.validateForAnyPolicy();\n    if (errors.length > 0) {\n      throw new Error('Incorrect Policy Statement: ' + errors.join('\\n'));\n    }\n\n    return ret;\n  }\n\n  /**\n   * Statement ID for this statement\n   */\n  public sid?: string;\n  /**\n   * Whether to allow or deny the actions in this statement\n   */\n  public effect: Effect;\n\n  private readonly action = new Array<any>();\n  private readonly notAction = new Array<any>();\n  private readonly principal: { [key: string]: any[] } = {};\n  private readonly notPrincipal: { [key: string]: any[] } = {};\n  private readonly resource = new Array<any>();\n  private readonly notResource = new Array<any>();\n  private readonly condition: { [key: string]: any } = { };\n  private principalConditionsJson?: string;\n\n  // Hold on to those principals\n  private readonly _principals = new Array<IPrincipal>();\n\n  constructor(props: PolicyStatementProps = {}) {\n    // Validate actions\n    for (const action of [...props.actions || [], ...props.notActions || []]) {\n\n      if (!/^(\\*|[a-zA-Z0-9-]+:[a-zA-Z0-9*]+)$/.test(action) && !cdk.Token.isUnresolved(action)) {\n        throw new Error(`Action '${action}' is invalid. An action string consists of a service namespace, a colon, and the name of an action. Action names can include wildcards.`);\n      }\n    }\n\n    this.sid = props.sid;\n    this.effect = props.effect || Effect.ALLOW;\n\n    this.addActions(...props.actions || []);\n    this.addNotActions(...props.notActions || []);\n    this.addPrincipals(...props.principals || []);\n    this.addNotPrincipals(...props.notPrincipals || []);\n    this.addResources(...props.resources || []);\n    this.addNotResources(...props.notResources || []);\n    if (props.conditions !== undefined) {\n      this.addConditions(props.conditions);\n    }\n  }\n\n  //\n  // Actions\n  //\n\n  /**\n   * Specify allowed actions into the \"Action\" section of the policy statement.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_action.html\n   *\n   * @param actions actions that will be allowed.\n   */\n  public addActions(...actions: string[]) {\n    if (actions.length > 0 && this.notAction.length > 0) {\n      throw new Error('Cannot add \\'Actions\\' to policy statement if \\'NotActions\\' have been added');\n    }\n    this.action.push(...actions);\n  }\n\n  /**\n   * Explicitly allow all actions except the specified list of actions into the \"NotAction\" section\n   * of the policy document.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_notaction.html\n   *\n   * @param notActions actions that will be denied. All other actions will be permitted.\n   */\n  public addNotActions(...notActions: string[]) {\n    if (notActions.length > 0 && this.action.length > 0) {\n      throw new Error('Cannot add \\'NotActions\\' to policy statement if \\'Actions\\' have been added');\n    }\n    this.notAction.push(...notActions);\n  }\n\n  //\n  // Principal\n  //\n\n  /**\n   * Indicates if this permission has a \"Principal\" section.\n   */\n  public get hasPrincipal() {\n    return Object.keys(this.principal).length > 0 || Object.keys(this.notPrincipal).length > 0;\n  }\n\n  /**\n   * Adds principals to the \"Principal\" section of a policy statement.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\n   *\n   * @param principals IAM principals that will be added\n   */\n  public addPrincipals(...principals: IPrincipal[]) {\n    this._principals.push(...principals);\n    if (Object.keys(principals).length > 0 && Object.keys(this.notPrincipal).length > 0) {\n      throw new Error('Cannot add \\'Principals\\' to policy statement if \\'NotPrincipals\\' have been added');\n    }\n    for (const principal of principals) {\n      this.validatePolicyPrincipal(principal);\n      const fragment = principal.policyFragment;\n      mergePrincipal(this.principal, fragment.principalJson);\n      this.addPrincipalConditions(fragment.conditions);\n    }\n  }\n\n  /**\n   * Expose principals to allow their ARNs to be replaced by account ID strings\n   * in policy statements for resources policies that don't allow full account ARNs,\n   * such as AWS::Logs::ResourcePolicy.\n   */\n  public get principals(): IPrincipal[] {\n    return [...this._principals];\n  }\n\n  /**\n   * Specify principals that is not allowed or denied access to the \"NotPrincipal\" section of\n   * a policy statement.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_notprincipal.html\n   *\n   * @param notPrincipals IAM principals that will be denied access\n   */\n  public addNotPrincipals(...notPrincipals: IPrincipal[]) {\n    if (Object.keys(notPrincipals).length > 0 && Object.keys(this.principal).length > 0) {\n      throw new Error('Cannot add \\'NotPrincipals\\' to policy statement if \\'Principals\\' have been added');\n    }\n    for (const notPrincipal of notPrincipals) {\n      this.validatePolicyPrincipal(notPrincipal);\n      const fragment = notPrincipal.policyFragment;\n      mergePrincipal(this.notPrincipal, fragment.principalJson);\n      this.addPrincipalConditions(fragment.conditions);\n    }\n  }\n\n  private validatePolicyPrincipal(principal: IPrincipal) {\n    if (principal instanceof Group) {\n      throw new Error('Cannot use an IAM Group as the \\'Principal\\' or \\'NotPrincipal\\' in an IAM Policy');\n    }\n  }\n\n  /**\n   * Specify AWS account ID as the principal entity to the \"Principal\" section of a policy statement.\n   */\n  public addAwsAccountPrincipal(accountId: string) {\n    this.addPrincipals(new AccountPrincipal(accountId));\n  }\n\n  /**\n   * Specify a principal using the ARN  identifier of the principal.\n   * You cannot specify IAM groups and instance profiles as principals.\n   *\n   * @param arn ARN identifier of AWS account, IAM user, or IAM role (i.e. arn:aws:iam::123456789012:user/user-name)\n   */\n  public addArnPrincipal(arn: string) {\n    this.addPrincipals(new ArnPrincipal(arn));\n  }\n\n  /**\n   * Adds a service principal to this policy statement.\n   *\n   * @param service the service name for which a service principal is requested (e.g: `s3.amazonaws.com`).\n   * @param opts    options for adding the service principal (such as specifying a principal in a different region)\n   */\n  public addServicePrincipal(service: string, opts?: ServicePrincipalOpts) {\n    this.addPrincipals(new ServicePrincipal(service, opts));\n  }\n\n  /**\n   * Adds a federated identity provider such as Amazon Cognito to this policy statement.\n   *\n   * @param federated federated identity provider (i.e. 'cognito-identity.amazonaws.com')\n   * @param conditions The conditions under which the policy is in effect.\n   *   See [the IAM documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).\n   */\n  public addFederatedPrincipal(federated: any, conditions: Conditions) {\n    this.addPrincipals(new FederatedPrincipal(federated, conditions));\n  }\n\n  /**\n   * Adds an AWS account root user principal to this policy statement\n   */\n  public addAccountRootPrincipal() {\n    this.addPrincipals(new AccountRootPrincipal());\n  }\n\n  /**\n   * Adds a canonical user ID principal to this policy document\n   *\n   * @param canonicalUserId unique identifier assigned by AWS for every account\n   */\n  public addCanonicalUserPrincipal(canonicalUserId: string) {\n    this.addPrincipals(new CanonicalUserPrincipal(canonicalUserId));\n  }\n\n  /**\n   * Adds all identities in all accounts (\"*\") to this policy statement\n   */\n  public addAnyPrincipal() {\n    this.addPrincipals(new AnyPrincipal());\n  }\n\n  //\n  // Resources\n  //\n\n  /**\n   * Specify resources that this policy statement applies into the \"Resource\" section of\n   * this policy statement.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_resource.html\n   *\n   * @param arns Amazon Resource Names (ARNs) of the resources that this policy statement applies to\n   */\n  public addResources(...arns: string[]) {\n    if (arns.length > 0 && this.notResource.length > 0) {\n      throw new Error('Cannot add \\'Resources\\' to policy statement if \\'NotResources\\' have been added');\n    }\n    this.resource.push(...arns);\n  }\n\n  /**\n   * Specify resources that this policy statement will not apply to in the \"NotResource\" section\n   * of this policy statement. All resources except the specified list will be matched.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_notresource.html\n   *\n   * @param arns Amazon Resource Names (ARNs) of the resources that this policy statement does not apply to\n   */\n  public addNotResources(...arns: string[]) {\n    if (arns.length > 0 && this.resource.length > 0) {\n      throw new Error('Cannot add \\'NotResources\\' to policy statement if \\'Resources\\' have been added');\n    }\n    this.notResource.push(...arns);\n  }\n\n  /**\n   * Adds a ``\"*\"`` resource to this statement.\n   */\n  public addAllResources() {\n    this.addResources('*');\n  }\n\n  /**\n   * Indicates if this permission has at least one resource associated with it.\n   */\n  public get hasResource() {\n    return this.resource && this.resource.length > 0;\n  }\n\n  //\n  // Condition\n  //\n\n  /**\n   * Add a condition to the Policy\n   */\n  public addCondition(key: string, value: Condition) {\n    const existingValue = this.condition[key];\n    this.condition[key] = existingValue ? { ...existingValue, ...value } : value;\n  }\n\n  /**\n   * Add multiple conditions to the Policy\n   */\n  public addConditions(conditions: Conditions) {\n    Object.keys(conditions).map(key => {\n      this.addCondition(key, conditions[key]);\n    });\n  }\n\n  /**\n   * Add a condition that limits to a given account\n   */\n  public addAccountCondition(accountId: string) {\n    this.addCondition('StringEquals', { 'sts:ExternalId': accountId });\n  }\n\n  /**\n   * Create a new `PolicyStatement` with the same exact properties\n   * as this one, except for the overrides\n   */\n  public copy(overrides: PolicyStatementProps = {}) {\n    return new PolicyStatement({\n      sid: overrides.sid ?? this.sid,\n      effect: overrides.effect ?? this.effect,\n      actions: overrides.actions ?? this.action,\n      notActions: overrides.notActions ?? this.notAction,\n\n      principals: overrides.principals,\n      notPrincipals: overrides.notPrincipals,\n\n      resources: overrides.resources ?? this.resource,\n      notResources: overrides.notResources ?? this.notResource,\n    });\n  }\n\n  /**\n   * JSON-ify the policy statement\n   *\n   * Used when JSON.stringify() is called\n   */\n  public toStatementJson(): any {\n    return normalizeStatement({\n      Action: this.action,\n      NotAction: this.notAction,\n      Condition: this.condition,\n      Effect: this.effect,\n      Principal: this.principal,\n      NotPrincipal: this.notPrincipal,\n      Resource: this.resource,\n      NotResource: this.notResource,\n      Sid: this.sid,\n    });\n  }\n\n  /**\n   * String representation of this policy statement\n   */\n  public toString() {\n    return cdk.Token.asString(this, {\n      displayHint: 'PolicyStatement',\n    });\n  }\n\n  /**\n   * JSON-ify the statement\n   *\n   * Used when JSON.stringify() is called\n   */\n  public toJSON() {\n    return this.toStatementJson();\n  }\n\n  /**\n   * Add a principal's conditions\n   *\n   * For convenience, principals have been modeled as both a principal\n   * and a set of conditions. This makes it possible to have a single\n   * object represent e.g. an \"SNS Topic\" (SNS service principal + aws:SourcArn\n   * condition) or an Organization member (* + aws:OrgId condition).\n   *\n   * However, when using multiple principals in the same policy statement,\n   * they must all have the same conditions or the OR samentics\n   * implied by a list of principals cannot be guaranteed (user needs to\n   * add multiple statements in that case).\n   */\n  private addPrincipalConditions(conditions: Conditions) {\n    // Stringifying the conditions is an easy way to do deep equality\n    const theseConditions = JSON.stringify(conditions);\n    if (this.principalConditionsJson === undefined) {\n      // First principal, anything goes\n      this.principalConditionsJson = theseConditions;\n    } else {\n      if (this.principalConditionsJson !== theseConditions) {\n        throw new Error(`All principals in a PolicyStatement must have the same Conditions (got '${this.principalConditionsJson}' and '${theseConditions}'). Use multiple statements instead.`);\n      }\n    }\n    this.addConditions(conditions);\n  }\n\n  /**\n   * Validate that the policy statement satisfies base requirements for a policy.\n   */\n  public validateForAnyPolicy(): string[] {\n    const errors = new Array<string>();\n    if (this.action.length === 0 && this.notAction.length === 0) {\n      errors.push('A PolicyStatement must specify at least one \\'action\\' or \\'notAction\\'.');\n    }\n    return errors;\n  }\n\n  /**\n   * Validate that the policy statement satisfies all requirements for a resource-based policy.\n   */\n  public validateForResourcePolicy(): string[] {\n    const errors = this.validateForAnyPolicy();\n    if (Object.keys(this.principal).length === 0 && Object.keys(this.notPrincipal).length === 0) {\n      errors.push('A PolicyStatement used in a resource-based policy must specify at least one IAM principal.');\n    }\n    return errors;\n  }\n\n  /**\n   * Validate that the policy statement satisfies all requirements for an identity-based policy.\n   */\n  public validateForIdentityPolicy(): string[] {\n    const errors = this.validateForAnyPolicy();\n    if (Object.keys(this.principal).length > 0 || Object.keys(this.notPrincipal).length > 0) {\n      errors.push('A PolicyStatement used in an identity-based policy cannot specify any IAM principals.');\n    }\n    if (Object.keys(this.resource).length === 0 && Object.keys(this.notResource).length === 0) {\n      errors.push('A PolicyStatement used in an identity-based policy must specify at least one resource.');\n    }\n    return errors;\n  }\n}\n\n/**\n * The Effect element of an IAM policy\n *\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_effect.html\n */\nexport enum Effect {\n  /**\n   * Allows access to a resource in an IAM policy statement. By default, access to resources are denied.\n   */\n  ALLOW = 'Allow',\n\n  /**\n   * Explicitly deny access to a resource. By default, all requests are denied implicitly.\n   *\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html\n   */\n  DENY = 'Deny',\n}\n\n/**\n * Condition for when an IAM policy is in effect. Maps from the keys in a request's context to\n * a string value or array of string values. See the Conditions interface for more details.\n */\nexport type Condition = any;\n\n// NOTE! We'd ideally like to type this as `Record<string, any>`, because the\n// API expects a map which can take either strings or lists of strings.\n//\n// However, if we were to change this right now, the Java bindings for CDK would\n// emit a type of `Map<String, Object>`, but the most common types people would\n// instantiate would be an `ImmutableMap<String, String>` which would not be\n// assignable to `Map<String, Object>`. The types don't have a built-in notion\n// of co-contravariance, you have to indicate that on the type. So jsii would first\n// need to emit the type as `Map<String, ? extends Object>`.\n//\n// Feature request in https://github.com/aws/jsii/issues/1517\n\n/**\n * Conditions for when an IAM Policy is in effect, specified in the following structure:\n *\n * `{ \"Operator\": { \"keyInRequestContext\": \"value\" } }`\n *\n * The value can be either a single string value or an array of string values.\n *\n * For more information, including which operators are supported, see [the IAM\n * documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).\n */\nexport type Conditions = Record<string, Condition>;\n\n/**\n * Interface for creating a policy statement\n */\nexport interface PolicyStatementProps {\n  /**\n   * The Sid (statement ID) is an optional identifier that you provide for the\n   * policy statement. You can assign a Sid value to each statement in a\n   * statement array. In services that let you specify an ID element, such as\n   * SQS and SNS, the Sid value is just a sub-ID of the policy document's ID. In\n   * IAM, the Sid value must be unique within a JSON policy.\n   *\n   * @default - no sid\n   */\n  readonly sid?: string;\n\n  /**\n   * List of actions to add to the statement\n   *\n   * @default - no actions\n   */\n  readonly actions?: string[];\n\n  /**\n   * List of not actions to add to the statement\n   *\n   * @default - no not-actions\n   */\n  readonly notActions?: string[];\n\n  /**\n   * List of principals to add to the statement\n   *\n   * @default - no principals\n   */\n  readonly principals?: IPrincipal[];\n\n  /**\n   * List of not principals to add to the statement\n   *\n   * @default - no not principals\n   */\n  readonly notPrincipals?: IPrincipal[];\n\n  /**\n   * Resource ARNs to add to the statement\n   *\n   * @default - no resources\n   */\n  readonly resources?: string[];\n\n  /**\n   * NotResource ARNs to add to the statement\n   *\n   * @default - no not-resources\n   */\n  readonly notResources?: string[];\n\n  /**\n   * Conditions to add to the statement\n   *\n   * @default - no condition\n   */\n  readonly conditions?: {[key: string]: any};\n\n  /**\n   * Whether to allow or deny the actions in this statement\n   *\n   * @default Effect.ALLOW\n   */\n  readonly effect?: Effect;\n}\n\nclass JsonPrincipal extends PrincipalBase {\n  public readonly policyFragment: PrincipalPolicyFragment;\n\n  constructor(json: any = { }) {\n    super();\n\n    // special case: if principal is a string, turn it into a \"LiteralString\" principal,\n    // so we render the exact same string back out.\n    if (typeof(json) === 'string') {\n      json = { [LITERAL_STRING_KEY]: [json] };\n    }\n    if (typeof(json) !== 'object') {\n      throw new Error(`JSON IAM principal should be an object, got ${JSON.stringify(json)}`);\n    }\n\n    this.policyFragment = {\n      principalJson: json,\n      conditions: {},\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
