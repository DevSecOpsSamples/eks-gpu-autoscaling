{
  "version": 3,
  "sources": ["access-key.ts"],
  "sourcesContent": ["import { IResource, Resource, SecretValue } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnAccessKey } from './iam.generated';\nimport { IUser } from './user';\n\n/**\n * Valid statuses for an IAM Access Key.\n */\nexport enum AccessKeyStatus {\n  /**\n   * An active access key. An active key can be used to make API calls.\n   */\n  ACTIVE = 'Active',\n\n  /**\n   * An inactive access key. An inactive key cannot be used to make API calls.\n   */\n  INACTIVE = 'Inactive'\n}\n\n/**\n * Represents an IAM Access Key.\n *\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\n */\nexport interface IAccessKey extends IResource {\n  /**\n   * The Access Key ID.\n   *\n   * @attribute\n   */\n  readonly accessKeyId: string;\n\n  /**\n   * The Secret Access Key.\n   *\n   * @attribute\n   */\n  readonly secretAccessKey: SecretValue;\n}\n\n/**\n * Properties for defining an IAM access key.\n */\nexport interface AccessKeyProps {\n  /**\n   * A CloudFormation-specific value that signifies the access key should be\n   * replaced/rotated. This value can only be incremented. Incrementing this\n   * value will cause CloudFormation to replace the Access Key resource.\n   *\n   * @default - No serial value\n   */\n  readonly serial?: number;\n\n  /**\n   * The status of the access key. An Active access key is allowed to be used\n   * to make API calls; An Inactive key cannot.\n   *\n   * @default - The access key is active\n   */\n  readonly status?: AccessKeyStatus;\n\n  /**\n   * The IAM user this key will belong to.\n   *\n   * Changing this value will result in the access key being deleted and a new\n   * access key (with a different ID and secret value) being assigned to the new\n   * user.\n   */\n  readonly user: IUser;\n}\n\n/**\n * Define a new IAM Access Key.\n */\nexport class AccessKey extends Resource implements IAccessKey {\n  public readonly accessKeyId: string;\n  public readonly secretAccessKey: SecretValue;\n\n  constructor(scope: Construct, id: string, props: AccessKeyProps) {\n    super(scope, id);\n    const accessKey = new CfnAccessKey(this, 'Resource', {\n      userName: props.user.userName,\n      serial: props.serial,\n      status: props.status,\n    });\n\n    this.accessKeyId = accessKey.ref;\n\n    // Not actually 'plainText', but until we have a more apt constructor\n    this.secretAccessKey = SecretValue.plainText(accessKey.attrSecretAccessKey);\n  }\n}\n"],
  "mappings": "wOAAA,OAAA,QAAA,YAAA,EAEA,gBAAA,QAAA,iBAAA,EAMA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAIzB,iBAAA,OAAA,SAKA,iBAAA,SAAA,UACF,GAVY,gBAAA,QAAA,iBAAA,SAAA,gBAAe,CAAA,EAAA,EAmE3B,MAAa,iBAAkB,QAAA,QAAQ,CAIrC,YAAY,MAAkB,GAAY,MAAqB,CAC7D,MAAM,MAAO,EAAE,oEACf,KAAM,WAAY,GAAI,iBAAA,aAAa,KAAM,WAAY,CACnD,SAAU,MAAM,KAAK,SACrB,OAAQ,MAAM,OACd,OAAQ,MAAM,OACf,EAED,KAAK,YAAc,UAAU,IAG7B,KAAK,gBAAkB,OAAA,YAAY,UAAU,UAAU,mBAAmB,GAf9E,QAAA,UAAA",
  "names": []
}
