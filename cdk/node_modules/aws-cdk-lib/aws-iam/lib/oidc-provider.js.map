{
  "version": 3,
  "sources": ["oidc-provider.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport {\n  Arn,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  IResource,\n  Resource,\n  Token,\n} from '../../core';\nimport { Construct } from 'constructs';\n\nconst RESOURCE_TYPE = 'Custom::AWSCDKOpenIdConnectProvider';\n\n/**\n * Represents an IAM OpenID Connect provider.\n *\n */\nexport interface IOpenIdConnectProvider extends IResource {\n  /**\n   * The Amazon Resource Name (ARN) of the IAM OpenID Connect provider.\n   */\n  readonly openIdConnectProviderArn: string;\n\n  /**\n   * The issuer for OIDC Provider\n   */\n  readonly openIdConnectProviderIssuer: string;\n}\n\n/**\n * Initialization properties for `OpenIdConnectProvider`.\n */\nexport interface OpenIdConnectProviderProps {\n  /**\n   * The URL of the identity provider. The URL must begin with https:// and\n   * should correspond to the iss claim in the provider's OpenID Connect ID\n   * tokens. Per the OIDC standard, path components are allowed but query\n   * parameters are not. Typically the URL consists of only a hostname, like\n   * https://server.example.org or https://example.com.\n   *\n   * You cannot register the same provider multiple times in a single AWS\n   * account. If you try to submit a URL that has already been used for an\n   * OpenID Connect provider in the AWS account, you will get an error.\n   */\n  readonly url: string;\n\n  /**\n   * A list of client IDs (also known as audiences). When a mobile or web app\n   * registers with an OpenID Connect provider, they establish a value that\n   * identifies the application. (This is the value that's sent as the client_id\n   * parameter on OAuth requests.)\n   *\n   * You can register multiple client IDs with the same provider. For example,\n   * you might have multiple applications that use the same OIDC provider. You\n   * cannot register more than 100 client IDs with a single IAM OIDC provider.\n   *\n   * Client IDs are up to 255 characters long.\n   *\n   * @default - no clients are allowed\n   */\n  readonly clientIds?: string[];\n\n  /**\n   * A list of server certificate thumbprints for the OpenID Connect (OIDC)\n   * identity provider's server certificates.\n   *\n   * Typically this list includes only one entry. However, IAM lets you have up\n   * to five thumbprints for an OIDC provider. This lets you maintain multiple\n   * thumbprints if the identity provider is rotating certificates.\n   *\n   * The server certificate thumbprint is the hex-encoded SHA-1 hash value of\n   * the X.509 certificate used by the domain where the OpenID Connect provider\n   * makes its keys available. It is always a 40-character string.\n   *\n   * You must provide at least one thumbprint when creating an IAM OIDC\n   * provider. For example, assume that the OIDC provider is server.example.com\n   * and the provider stores its keys at\n   * https://keys.server.example.com/openid-connect. In that case, the\n   * thumbprint string would be the hex-encoded SHA-1 hash value of the\n   * certificate used by https://keys.server.example.com.\n   *\n   * @default - If no thumbprints are specified (an empty array or `undefined`),\n   * the thumbprint of the root certificate authority will be obtained from the\n   * provider's server as described in https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc_verify-thumbprint.html\n   */\n  readonly thumbprints?: string[];\n}\n\n/**\n * IAM OIDC identity providers are entities in IAM that describe an external\n * identity provider (IdP) service that supports the OpenID Connect (OIDC)\n * standard, such as Google or Salesforce. You use an IAM OIDC identity provider\n * when you want to establish trust between an OIDC-compatible IdP and your AWS\n * account. This is useful when creating a mobile app or web application that\n * requires access to AWS resources, but you don't want to create custom sign-in\n * code or manage your own user identities.\n *\n * @see http://openid.net/connect\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html\n *\n * @resource AWS::CloudFormation::CustomResource\n */\nexport class OpenIdConnectProvider extends Resource implements IOpenIdConnectProvider {\n  /**\n   * Imports an Open ID connect provider from an ARN.\n   * @param scope The definition scope\n   * @param id ID of the construct\n   * @param openIdConnectProviderArn the ARN to import\n   */\n  public static fromOpenIdConnectProviderArn(scope: Construct, id: string, openIdConnectProviderArn: string): IOpenIdConnectProvider {\n    const resourceName = Arn.extractResourceName(openIdConnectProviderArn, 'oidc-provider');\n\n    class Import extends Resource implements IOpenIdConnectProvider {\n      public readonly openIdConnectProviderArn = openIdConnectProviderArn;\n      public readonly openIdConnectProviderIssuer = resourceName;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The Amazon Resource Name (ARN) of the IAM OpenID Connect provider.\n   */\n  public readonly openIdConnectProviderArn: string;\n\n  public readonly openIdConnectProviderIssuer: string;\n\n  /**\n   * Defines an OpenID Connect provider.\n   * @param scope The definition scope\n   * @param id Construct ID\n   * @param props Initialization properties\n   */\n  public constructor(scope: Construct, id: string, props: OpenIdConnectProviderProps) {\n    super(scope, id);\n\n    const resource = new CustomResource(this, 'Resource', {\n      resourceType: RESOURCE_TYPE,\n      serviceToken: this.getOrCreateProvider(),\n      properties: {\n        ClientIDList: props.clientIds,\n        ThumbprintList: props.thumbprints,\n        Url: props.url,\n      },\n    });\n\n    this.openIdConnectProviderArn = Token.asString(resource.ref);\n    this.openIdConnectProviderIssuer = Arn.extractResourceName(this.openIdConnectProviderArn, 'oidc-provider');\n  }\n\n  private getOrCreateProvider() {\n    return CustomResourceProvider.getOrCreate(this, RESOURCE_TYPE, {\n      codeDirectory: path.join(__dirname, 'oidc-provider'),\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n      policyStatements: [\n        {\n          Effect: 'Allow',\n          Resource: '*',\n          Action: [\n            'iam:CreateOpenIDConnectProvider',\n            'iam:DeleteOpenIDConnectProvider',\n            'iam:UpdateOpenIDConnectProviderThumbprint',\n            'iam:AddClientIDToOpenIDConnectProvider',\n            'iam:RemoveClientIDFromOpenIDConnectProvider',\n          ],\n        },\n      ],\n    });\n  }\n}\n"],
  "mappings": "4NAAA,KAAA,QAAA,MAAA,EACA,OAAA,QAAA,YAAA,EAWM,cAAgB,sCA2FtB,MAAa,6BAA8B,QAAA,QAAQ,CA+BjD,YAAmB,MAAkB,GAAY,MAAiC,CAChF,MAAM,MAAO,EAAE,gFAEf,KAAM,UAAW,GAAI,QAAA,eAAe,KAAM,WAAY,CACpD,aAAc,cACd,aAAc,KAAK,oBAAmB,EACtC,WAAY,CACV,aAAc,MAAM,UACpB,eAAgB,MAAM,YACtB,IAAK,MAAM,KAEd,EAED,KAAK,yBAA2B,OAAA,MAAM,SAAS,SAAS,GAAG,EAC3D,KAAK,4BAA8B,OAAA,IAAI,oBAAoB,KAAK,yBAA0B,eAAe,QAtC7F,8BAA6B,MAAkB,GAAY,yBAAgC,CACvG,KAAM,cAAe,OAAA,IAAI,oBAAoB,yBAA0B,eAAe,EAEtF,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,yBAA2B,yBAC3B,KAAA,4BAA8B,YAChD,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,EAiCrB,qBAAmB,CACzB,MAAO,QAAA,uBAAuB,YAAY,KAAM,cAAe,CAC7D,cAAe,KAAK,KAAK,UAAW,eAAe,EACnD,QAAS,OAAA,8BAA8B,YACvC,iBAAkB,CAChB,CACE,OAAQ,QACR,SAAU,IACV,OAAQ,CACN,kCACA,kCACA,4CACA,yCACA,iDAIP,GAjEL,QAAA,sBAAA",
  "names": []
}
