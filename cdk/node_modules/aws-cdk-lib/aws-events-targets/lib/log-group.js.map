{
  "version": 3,
  "sources": ["log-group.ts"],
  "sourcesContent": ["import * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as logs from '../../aws-logs';\nimport * as cdk from '../../core';\nimport { ArnFormat } from '../../core';\nimport { LogGroupResourcePolicy } from './log-group-resource-policy';\nimport { TargetBaseProps, bindBaseTargetConfig } from './util';\n\n/**\n * Customize the CloudWatch LogGroup Event Target\n */\nexport interface LogGroupProps extends TargetBaseProps {\n  /**\n   * The event to send to the CloudWatch LogGroup\n   *\n   * This will be the event logged into the CloudWatch LogGroup\n   *\n   * @default - the entire EventBridge event\n   */\n  readonly event?: events.RuleTargetInput;\n}\n\n/**\n * Use an AWS CloudWatch LogGroup as an event rule target.\n */\nexport class CloudWatchLogGroup implements events.IRuleTarget {\n  constructor(private readonly logGroup: logs.ILogGroup, private readonly props: LogGroupProps = {}) {}\n\n  /**\n   * Returns a RuleTarget that can be used to log an event into a CloudWatch LogGroup\n   */\n  public bind(_rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    // Use a custom resource to set the log group resource policy since it is not supported by CDK and cfn.\n    const resourcePolicyId = `EventsLogGroupPolicy${cdk.Names.nodeUniqueId(_rule.node)}`;\n\n    const logGroupStack = cdk.Stack.of(this.logGroup);\n\n    if (!this.logGroup.node.tryFindChild(resourcePolicyId)) {\n      new LogGroupResourcePolicy(logGroupStack, resourcePolicyId, {\n        policyStatements: [new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['logs:PutLogEvents', 'logs:CreateLogStream'],\n          resources: [this.logGroup.logGroupArn],\n          principals: [new iam.ServicePrincipal('events.amazonaws.com')],\n        })],\n      });\n    }\n\n    return {\n      ...bindBaseTargetConfig(this.props),\n      arn: logGroupStack.formatArn({\n        service: 'logs',\n        resource: 'log-group',\n        arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n        resourceName: this.logGroup.logGroupName,\n      }),\n      input: this.props.event,\n      targetResource: this.logGroup,\n    };\n  }\n}\n"],
  "mappings": "yNACA,IAAA,QAAA,eAAA,EAEA,IAAA,QAAA,YAAA,EACA,OAAA,QAAA,YAAA,EACA,4BAAA,QAAA,6BAAA,EACA,OAAA,QAAA,QAAA,EAmBA,MAAa,kBAAkB,CAC7B,YAA6B,SAA2C,MAAuB,CAAA,EAAE,CAApE,KAAA,SAAA,SAA2C,KAAA,MAAA,mJAKjE,KAAK,MAAqB,IAAY,6DAE3C,KAAM,kBAAmB,uBAAuB,IAAI,MAAM,aAAa,MAAM,IAAI,IAE3E,cAAgB,IAAI,MAAM,GAAG,KAAK,QAAQ,EAEhD,MAAK,MAAK,SAAS,KAAK,aAAa,gBAAgB,GACnD,GAAI,6BAAA,uBAAuB,cAAe,iBAAkB,CAC1D,iBAAkB,CAAC,GAAI,KAAI,gBAAgB,CACzC,OAAQ,IAAI,OAAO,MACnB,QAAS,CAAC,oBAAqB,sBAAsB,EACrD,UAAW,CAAC,KAAK,SAAS,WAAW,EACrC,WAAY,CAAC,GAAI,KAAI,iBAAiB,sBAAsB,CAAC,EAC9D,CAAC,EACH,EAGI,IACF,OAAA,qBAAqB,KAAK,KAAK,EAClC,IAAK,cAAc,UAAU,CAC3B,QAAS,OACT,SAAU,YACV,UAAW,OAAA,UAAU,oBACrB,aAAc,KAAK,SAAS,aAC7B,EACD,MAAO,KAAK,MAAM,MAClB,eAAgB,KAAK,WAhC3B,QAAA,mBAAA",
  "names": []
}
