{
  "version": 3,
  "sources": ["api-destination.ts"],
  "sourcesContent": ["import * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport { addToDeadLetterQueueResourcePolicy, bindBaseTargetConfig, singletonEventRole, TargetBaseProps } from './util';\n\n/**\n * Customize the EventBridge Api Destinations Target\n */\nexport interface ApiDestinationProps extends TargetBaseProps {\n  /**\n   * The event to send\n   *\n   * @default - the entire EventBridge event\n   */\n  readonly event?: events.RuleTargetInput;\n\n  /**\n   * The role to assume before invoking the target\n   *\n   * @default - a new role will be created\n   */\n  readonly eventRole?: iam.IRole;\n\n  /**\n   * Additional headers sent to the API Destination\n   *\n   * These are merged with headers specified on the Connection, with\n   * the headers on the Connection taking precedence.\n   *\n   * You can only specify secret values on the Connection.\n   *\n   * @default - none\n   */\n  readonly headerParameters?: Record<string, string>;\n\n  /**\n   * Path parameters to insert in place of path wildcards (`*`).\n   *\n   * If the API destination has a wilcard in the path, these path parts\n   * will be inserted in that place.\n   *\n   * @default - none\n   */\n  readonly pathParameterValues?: string[]\n\n  /**\n   * Additional query string parameters sent to the API Destination\n   *\n   * These are merged with headers specified on the Connection, with\n   * the headers on the Connection taking precedence.\n   *\n   * You can only specify secret values on the Connection.\n   *\n   * @default - none\n   */\n  readonly queryStringParameters?: Record<string, string>;\n}\n\n/**\n * Use an API Destination rule target.\n */\nexport class ApiDestination implements events.IRuleTarget {\n  constructor(\n    private readonly apiDestination: events.IApiDestination,\n    private readonly props: ApiDestinationProps = {},\n  ) { }\n\n  /**\n   * Returns a RuleTarget that can be used to trigger API destinations\n   * from an EventBridge event.\n   */\n  public bind(_rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    const httpParameters: events.CfnRule.HttpParametersProperty | undefined =\n      !!this.props.headerParameters ??\n      !!this.props.pathParameterValues ??\n      !!this.props.queryStringParameters\n        ? {\n          headerParameters: this.props.headerParameters,\n          pathParameterValues: this.props.pathParameterValues,\n          queryStringParameters: this.props.queryStringParameters,\n        } : undefined;\n\n    if (this.props?.deadLetterQueue) {\n      addToDeadLetterQueueResourcePolicy(_rule, this.props.deadLetterQueue);\n    }\n\n    return {\n      ...(this.props ? bindBaseTargetConfig(this.props) : {}),\n      arn: this.apiDestination.apiDestinationArn,\n      role: this.props?.eventRole ?? singletonEventRole(this.apiDestination, [new iam.PolicyStatement({\n        resources: [this.apiDestination.apiDestinationArn],\n        actions: ['events:InvokeApiDestination'],\n      })]),\n      input: this.props.event,\n      targetResource: this.apiDestination,\n      httpParameters,\n    };\n  }\n}\n"],
  "mappings": "qNACA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,QAAA,EA0DA,MAAa,cAAc,CACzB,YACmB,eACA,MAA6B,CAAA,EAAE,CAD/B,KAAA,eAAA,eACA,KAAA,MAAA,uKAOZ,KAAK,MAAqB,IAAY,gFAC3C,KAAM,gBACJ,KAAA,IAAA,CAAC,CAAC,KAAK,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAC7B,CAAC,CAAC,KAAK,MAAM,uBAAmB,MAAA,KAAA,OAAA,GAChC,CAAC,CAAC,KAAK,MAAM,uBACT,CACA,iBAAkB,KAAK,MAAM,iBAC7B,oBAAqB,KAAK,MAAM,oBAChC,sBAAuB,KAAK,MAAM,uBAChC,OAER,MAAA,MAAI,KAAK,SAAK,MAAA,KAAA,SAAA,GAAE,iBACd,OAAA,mCAAmC,MAAO,KAAK,MAAM,eAAe,EAG/D,IACD,KAAK,MAAQ,OAAA,qBAAqB,KAAK,KAAK,EAAI,CAAA,EACpD,IAAK,KAAK,eAAe,kBACzB,KAAI,IAAA,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,aAAS,MAAA,KAAA,OAAA,GAAI,OAAA,mBAAmB,KAAK,eAAgB,CAAC,GAAI,KAAI,gBAAgB,CAC9F,UAAW,CAAC,KAAK,eAAe,iBAAiB,EACjD,QAAS,CAAC,6BAA6B,EACxC,CAAC,CAAC,EACH,MAAO,KAAK,MAAM,MAClB,eAAgB,KAAK,eACrB,iBAlCN,QAAA,eAAA",
  "names": []
}
