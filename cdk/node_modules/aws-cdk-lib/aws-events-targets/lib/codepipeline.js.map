{
  "version": 3,
  "sources": ["codepipeline.ts"],
  "sourcesContent": ["import * as codepipeline from '../../aws-codepipeline';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport { bindBaseTargetConfig, singletonEventRole, TargetBaseProps } from './util';\n\n/**\n * Customization options when creating a {@link CodePipeline} event target.\n */\nexport interface CodePipelineTargetOptions extends TargetBaseProps {\n  /**\n   * The role to assume before invoking the target\n   * (i.e., the pipeline) when the given rule is triggered.\n   *\n   * @default - a new role will be created\n   */\n  readonly eventRole?: iam.IRole;\n}\n\n/**\n * Allows the pipeline to be used as an EventBridge rule target.\n */\nexport class CodePipeline implements events.IRuleTarget {\n  constructor(\n    private readonly pipeline: codepipeline.IPipeline,\n    private readonly options: CodePipelineTargetOptions = {}) {\n  }\n\n  public bind(_rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    return {\n      ...bindBaseTargetConfig(this.options),\n      id: '',\n      arn: this.pipeline.pipelineArn,\n      role: this.options.eventRole || singletonEventRole(this.pipeline, [new iam.PolicyStatement({\n        resources: [this.pipeline.pipelineArn],\n        actions: ['codepipeline:StartPipelineExecution'],\n      })]),\n      targetResource: this.pipeline,\n    };\n  }\n}\n"],
  "mappings": "mNAEA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,QAAA,EAkBA,MAAa,YAAY,CACvB,YACmB,SACA,QAAqC,CAAA,EAAE,CADvC,KAAA,SAAA,SACA,KAAA,QAAA,2KAGZ,KAAK,MAAqB,IAAY,oEACpC,IACF,OAAA,qBAAqB,KAAK,OAAO,EACpC,GAAI,GACJ,IAAK,KAAK,SAAS,YACnB,KAAM,KAAK,QAAQ,WAAa,OAAA,mBAAmB,KAAK,SAAU,CAAC,GAAI,KAAI,gBAAgB,CACzF,UAAW,CAAC,KAAK,SAAS,WAAW,EACrC,QAAS,CAAC,qCAAqC,EAChD,CAAC,CAAC,EACH,eAAgB,KAAK,WAf3B,QAAA,aAAA",
  "names": []
}
