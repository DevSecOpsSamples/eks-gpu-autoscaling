{
  "version": 3,
  "sources": ["aws-api.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as lambda from '../../aws-lambda';\nimport { Annotations } from '../../core';\nimport { metadata } from './sdk-api-metadata.generated';\nimport { addLambdaPermission } from './util';\n\n/**\n * AWS SDK service metadata.\n */\nexport type AwsSdkMetadata = {[key: string]: any};\n\nconst awsSdkMetadata: AwsSdkMetadata = metadata;\n\n/**\n * Rule target input for an AwsApi target.\n */\nexport interface AwsApiInput {\n  /**\n   * The service to call\n   *\n   * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html\n   */\n  readonly service: string;\n\n  /**\n   * The service action to call\n   *\n   * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html\n   */\n  readonly action: string;\n\n  /**\n   * The parameters for the service action\n   *\n   * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html\n   *\n   * @default - no parameters\n   */\n  readonly parameters?: any;\n\n  /**\n   * The regex pattern to use to catch API errors. The `code` property of the\n   * `Error` object will be tested against this pattern. If there is a match an\n   * error will not be thrown.\n   *\n   * @default - do not catch errors\n   */\n  readonly catchErrorPattern?: string;\n\n  /**\n   * API version to use for the service\n   *\n   * @see https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/locking-api-versions.html\n   * @default - use latest available API version\n   */\n  readonly apiVersion?: string;\n}\n\n/**\n * Properties for an AwsApi target.\n */\nexport interface AwsApiProps extends AwsApiInput {\n  /**\n   * The IAM policy statement to allow the API call. Use only if\n   * resource restriction is needed.\n   *\n   * @default - extract the permission from the API call\n   */\n  readonly policyStatement?: iam.PolicyStatement;\n}\n\n/**\n * Use an AWS Lambda function that makes API calls as an event rule target.\n */\nexport class AwsApi implements events.IRuleTarget {\n  constructor(private readonly props: AwsApiProps) {}\n\n  /**\n   * Returns a RuleTarget that can be used to trigger this AwsApi as a\n   * result from an EventBridge event.\n   */\n  public bind(rule: events.IRule, id?: string): events.RuleTargetConfig {\n    const handler = new lambda.SingletonFunction(rule as events.Rule, `${rule.node.id}${id}Handler`, {\n      code: lambda.Code.fromAsset(path.join(__dirname, 'aws-api-handler')),\n      runtime: lambda.Runtime.NODEJS_12_X,\n      handler: 'index.handler',\n      uuid: 'b4cf1abd-4e4f-4bc6-9944-1af7ccd9ec37',\n      lambdaPurpose: 'AWS',\n    });\n\n    checkServiceExists(this.props.service, handler);\n\n    if (this.props.policyStatement) {\n      handler.addToRolePolicy(this.props.policyStatement);\n    } else {\n      handler.addToRolePolicy(new iam.PolicyStatement({\n        actions: [awsSdkToIamAction(this.props.service, this.props.action)],\n        resources: ['*'],\n      }));\n    }\n\n    // Allow handler to be called from rule\n    addLambdaPermission(rule, handler);\n\n    const input: AwsApiInput = {\n      service: this.props.service,\n      action: this.props.action,\n      parameters: this.props.parameters,\n      catchErrorPattern: this.props.catchErrorPattern,\n      apiVersion: this.props.apiVersion,\n    };\n\n    return {\n      arn: handler.functionArn,\n      input: events.RuleTargetInput.fromObject(input),\n      targetResource: handler,\n    };\n  }\n}\n\n/**\n * Check if the given service exists in the AWS SDK. If not, a warning will be raised.\n * @param service Service name\n */\nfunction checkServiceExists(service: string, handler: lambda.SingletonFunction) {\n  const sdkService = awsSdkMetadata[service.toLowerCase()];\n  if (!sdkService) {\n    Annotations.of(handler).addWarning(`Service ${service} does not exist in the AWS SDK. Check the list of available \\\nservices and actions from https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html`);\n  }\n}\n\n/**\n * Transform SDK service/action to IAM action using metadata from aws-sdk module.\n */\nfunction awsSdkToIamAction(service: string, action: string): string {\n  const srv = service.toLowerCase();\n  const iamService = awsSdkMetadata[srv].prefix || srv;\n  const iamAction = action.charAt(0).toUpperCase() + action.slice(1);\n  return `${iamService}:${iamAction}`;\n}\n"],
  "mappings": "6MAAA,KAAA,QAAA,MAAA,EACA,OAAA,QAAA,kBAAA,EACA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,kBAAA,EACA,OAAA,QAAA,YAAA,EACA,6BAAA,QAAA,8BAAA,EACA,OAAA,QAAA,QAAA,EAOM,eAAiC,6BAAA,SA+DvC,MAAa,MAAM,CACjB,YAA6B,MAAkB,CAAlB,KAAA,MAAA,gFAMtB,KAAK,KAAoB,GAAW,4DACzC,KAAM,SAAU,GAAI,QAAO,kBAAkB,KAAqB,GAAG,KAAK,KAAK,KAAK,YAAa,CAC/F,KAAM,OAAO,KAAK,UAAU,KAAK,KAAK,UAAW,iBAAiB,CAAC,EACnE,QAAS,OAAO,QAAQ,YACxB,QAAS,gBACT,KAAM,uCACN,cAAe,MAChB,EAED,mBAAmB,KAAK,MAAM,QAAS,OAAO,EAE9C,AAAI,KAAK,MAAM,gBACb,QAAQ,gBAAgB,KAAK,MAAM,eAAe,EAElD,QAAQ,gBAAgB,GAAI,KAAI,gBAAgB,CAC9C,QAAS,CAAC,kBAAkB,KAAK,MAAM,QAAS,KAAK,MAAM,MAAM,CAAC,EAClE,UAAW,CAAC,GAAG,EAChB,CAAC,EAIJ,OAAA,oBAAoB,KAAM,OAAO,EAEjC,KAAM,OAAqB,CACzB,QAAS,KAAK,MAAM,QACpB,OAAQ,KAAK,MAAM,OACnB,WAAY,KAAK,MAAM,WACvB,kBAAmB,KAAK,MAAM,kBAC9B,WAAY,KAAK,MAAM,YAGzB,MAAO,CACL,IAAK,QAAQ,YACb,MAAO,OAAO,gBAAgB,WAAW,KAAK,EAC9C,eAAgB,UAzCtB,QAAA,OAAA,uGAkDA,4BAA4B,QAAiB,QAAiC,CAE5E,AAAK,AADc,eAAe,QAAQ,YAAW,IAEnD,OAAA,YAAY,GAAG,OAAO,EAAE,WAAW,WAAW,6JACuC,CAEzF,CAKA,2BAA2B,QAAiB,OAAc,CACxD,KAAM,KAAM,QAAQ,YAAW,EACzB,WAAa,eAAe,KAAK,QAAU,IAC3C,UAAY,OAAO,OAAO,CAAC,EAAE,YAAW,EAAK,OAAO,MAAM,CAAC,EACjE,MAAO,GAAG,cAAc,WAC1B",
  "names": []
}
