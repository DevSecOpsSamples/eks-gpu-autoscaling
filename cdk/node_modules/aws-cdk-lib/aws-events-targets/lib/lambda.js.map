{
  "version": 3,
  "sources": ["lambda.ts"],
  "sourcesContent": ["import * as events from '../../aws-events';\nimport * as lambda from '../../aws-lambda';\nimport { addLambdaPermission, addToDeadLetterQueueResourcePolicy, TargetBaseProps, bindBaseTargetConfig } from './util';\n\n/**\n * Customize the Lambda Event Target\n */\nexport interface LambdaFunctionProps extends TargetBaseProps {\n  /**\n   * The event to send to the Lambda\n   *\n   * This will be the payload sent to the Lambda Function.\n   *\n   * @default the entire EventBridge event\n   */\n  readonly event?: events.RuleTargetInput;\n}\n\n/**\n * Use an AWS Lambda function as an event rule target.\n */\nexport class LambdaFunction implements events.IRuleTarget {\n  constructor(private readonly handler: lambda.IFunction, private readonly props: LambdaFunctionProps = {}) {\n\n  }\n\n  /**\n   * Returns a RuleTarget that can be used to trigger this Lambda as a\n   * result from an EventBridge event.\n   */\n  public bind(rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    // Allow handler to be called from rule\n    addLambdaPermission(rule, this.handler);\n\n    if (this.props.deadLetterQueue) {\n      addToDeadLetterQueueResourcePolicy(rule, this.props.deadLetterQueue);\n    }\n\n    return {\n      ...bindBaseTargetConfig(this.props),\n      arn: this.handler.functionArn,\n      input: this.props.event,\n      targetResource: this.handler,\n    };\n  }\n}\n"],
  "mappings": "qNAEA,OAAA,QAAA,QAAA,EAmBA,MAAa,cAAc,CACzB,YAA6B,QAA4C,MAA6B,CAAA,EAAE,CAA3E,KAAA,QAAA,QAA4C,KAAA,MAAA,0JAQlE,KAAK,KAAoB,IAAY,mEAE1C,OAAA,oBAAoB,KAAM,KAAK,OAAO,EAElC,KAAK,MAAM,iBACb,OAAA,mCAAmC,KAAM,KAAK,MAAM,eAAe,EAG9D,IACF,OAAA,qBAAqB,KAAK,KAAK,EAClC,IAAK,KAAK,QAAQ,YAClB,MAAO,KAAK,MAAM,MAClB,eAAgB,KAAK,UArB3B,QAAA,eAAA",
  "names": []
}
