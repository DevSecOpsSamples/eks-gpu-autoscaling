{
  "version": 3,
  "sources": ["event-bus.ts"],
  "sourcesContent": ["import * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as sqs from '../../aws-sqs';\nimport { singletonEventRole, addToDeadLetterQueueResourcePolicy } from './util';\n\n/**\n * Configuration properties of an Event Bus event\n *\n * Cannot extend TargetBaseProps. Retry policy is not supported for Event bus targets.\n */\nexport interface EventBusProps {\n  /**\n   * Role to be used to publish the event\n   *\n   * @default a new role is created.\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * The SQS queue to be used as deadLetterQueue.\n   * Check out the [considerations for using a dead-letter queue](https://docs.aws.amazon.com/eventbridge/latest/userguide/rule-dlq.html#dlq-considerations).\n   *\n   * The events not successfully delivered are automatically retried for a specified period of time,\n   * depending on the retry policy of the target.\n   * If an event is not delivered before all retry attempts are exhausted, it will be sent to the dead letter queue.\n   *\n   * @default - no dead-letter queue\n   */\n  readonly deadLetterQueue?: sqs.IQueue;\n}\n\n/**\n * Notify an existing Event Bus of an event\n */\nexport class EventBus implements events.IRuleTarget {\n  constructor(private readonly eventBus: events.IEventBus, private readonly props: EventBusProps = {}) { }\n\n  bind(rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    if (this.props.role) {\n      this.props.role.addToPrincipalPolicy(this.putEventStatement());\n    }\n    const role = this.props.role ?? singletonEventRole(rule, [this.putEventStatement()]);\n\n    if (this.props.deadLetterQueue) {\n      addToDeadLetterQueueResourcePolicy(rule, this.props.deadLetterQueue);\n    }\n\n    return {\n      arn: this.eventBus.eventBusArn,\n      deadLetterConfig: this.props.deadLetterQueue ? { arn: this.props.deadLetterQueue?.queueArn } : undefined,\n      role,\n    };\n  }\n\n  private putEventStatement() {\n    return new iam.PolicyStatement({\n      actions: ['events:PutEvents'],\n      resources: [this.eventBus.eventBusArn],\n    });\n  }\n}\n"],
  "mappings": "+MACA,IAAA,QAAA,eAAA,EAEA,OAAA,QAAA,QAAA,EA+BA,MAAa,QAAQ,CACnB,YAA6B,SAA6C,MAAuB,CAAA,EAAE,CAAtE,KAAA,SAAA,SAA6C,KAAA,MAAA,qJAE1E,KAAK,KAAoB,IAAY,sEAC/B,KAAK,MAAM,MACb,KAAK,MAAM,KAAK,qBAAqB,KAAK,kBAAiB,CAAE,EAE/D,KAAM,MAAI,IAAG,KAAK,MAAM,QAAI,MAAA,KAAA,OAAA,GAAI,OAAA,mBAAmB,KAAM,CAAC,KAAK,kBAAiB,CAAE,CAAC,EAEnF,MAAI,MAAK,MAAM,iBACb,OAAA,mCAAmC,KAAM,KAAK,MAAM,eAAe,EAG9D,CACL,IAAK,KAAK,SAAS,YACnB,iBAAkB,KAAK,MAAM,gBAAkB,CAAE,IAAG,IAAE,KAAK,MAAM,mBAAe,MAAA,KAAA,OAAA,OAAA,GAAE,QAAQ,EAAK,OAC/F,MAII,mBAAiB,CACvB,MAAO,IAAI,KAAI,gBAAgB,CAC7B,QAAS,CAAC,kBAAkB,EAC5B,UAAW,CAAC,KAAK,SAAS,WAAW,EACtC,GAxBL,QAAA,SAAA",
  "names": []
}
