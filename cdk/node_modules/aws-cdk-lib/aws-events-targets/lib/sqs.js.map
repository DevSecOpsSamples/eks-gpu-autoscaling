{
  "version": 3,
  "sources": ["sqs.ts"],
  "sourcesContent": ["import * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as sqs from '../../aws-sqs';\nimport { addToDeadLetterQueueResourcePolicy, TargetBaseProps, bindBaseTargetConfig } from './util';\n\n/**\n * Customize the SQS Queue Event Target\n */\nexport interface SqsQueueProps extends TargetBaseProps {\n\n  /**\n   * Message Group ID for messages sent to this queue\n   *\n   * Required for FIFO queues, leave empty for regular queues.\n   *\n   * @default - no message group ID (regular queue)\n   */\n  readonly messageGroupId?: string;\n\n  /**\n   * The message to send to the queue.\n   *\n   * Must be a valid JSON text passed to the target queue.\n   *\n   * @default the entire EventBridge event\n   */\n  readonly message?: events.RuleTargetInput;\n}\n\n/**\n * Use an SQS Queue as a target for Amazon EventBridge rules.\n *\n * @example\n *   /// fixture=withRepoAndSqsQueue\n *   // publish to an SQS queue every time code is committed\n *   // to a CodeCommit repository\n *   repository.onCommit('onCommit', { target: new targets.SqsQueue(queue) });\n *\n */\nexport class SqsQueue implements events.IRuleTarget {\n\n  constructor(public readonly queue: sqs.IQueue, private readonly props: SqsQueueProps = {}) {\n    if (props.messageGroupId !== undefined && !queue.fifo) {\n      throw new Error('messageGroupId cannot be specified for non-FIFO queues');\n    }\n  }\n\n  /**\n   * Returns a RuleTarget that can be used to trigger this SQS queue as a\n   * result from an EventBridge event.\n   *\n   * @see https://docs.aws.amazon.com/eventbridge/latest/userguide/resource-based-policies-eventbridge.html#sqs-permissions\n   */\n  public bind(rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    // Only add the rule as a condition if the queue is not encrypted, to avoid circular dependency. See issue #11158.\n    const principalOpts = this.queue.encryptionMasterKey ? {} : {\n      conditions: {\n        ArnEquals: { 'aws:SourceArn': rule.ruleArn },\n      },\n    };\n\n    // deduplicated automatically\n    this.queue.grantSendMessages(new iam.ServicePrincipal('events.amazonaws.com', principalOpts));\n\n    if (this.props.deadLetterQueue) {\n      addToDeadLetterQueueResourcePolicy(rule, this.props.deadLetterQueue);\n    }\n\n    return {\n      ...bindBaseTargetConfig(this.props),\n      arn: this.queue.queueArn,\n      input: this.props.message,\n      targetResource: this.queue,\n      sqsParameters: this.props.messageGroupId ? { messageGroupId: this.props.messageGroupId } : undefined,\n    };\n  }\n\n}\n"],
  "mappings": "+MACA,IAAA,QAAA,eAAA,EAEA,OAAA,QAAA,QAAA,EAoCA,MAAa,QAAQ,CAEnB,YAA4B,MAAoC,MAAuB,CAAA,EAAE,CACvF,GAD0B,KAAA,MAAA,MAAoC,KAAA,MAAA,4IAC1D,MAAM,iBAAmB,QAAa,CAAC,MAAM,KAC/C,KAAM,IAAI,OAAM,wDAAwD,EAUrE,KAAK,KAAoB,IAAY,4DAE1C,KAAM,eAAgB,KAAK,MAAM,oBAAsB,CAAA,EAAK,CAC1D,WAAY,CACV,UAAW,CAAE,gBAAiB,KAAK,OAAO,IAK9C,YAAK,MAAM,kBAAkB,GAAI,KAAI,iBAAiB,uBAAwB,aAAa,CAAC,EAExF,KAAK,MAAM,iBACb,OAAA,mCAAmC,KAAM,KAAK,MAAM,eAAe,EAG9D,IACF,OAAA,qBAAqB,KAAK,KAAK,EAClC,IAAK,KAAK,MAAM,SAChB,MAAO,KAAK,MAAM,QAClB,eAAgB,KAAK,MACrB,cAAe,KAAK,MAAM,eAAiB,CAAE,eAAgB,KAAK,MAAM,cAAc,EAAK,SAlCjG,QAAA,SAAA",
  "names": []
}
