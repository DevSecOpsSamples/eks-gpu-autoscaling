{
  "version": 3,
  "sources": ["api-gateway.ts"],
  "sourcesContent": ["import * as api from '../../aws-apigateway';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport { addToDeadLetterQueueResourcePolicy, bindBaseTargetConfig, singletonEventRole, TargetBaseProps } from './util';\n\n/**\n * Customize the API Gateway Event Target\n */\nexport interface ApiGatewayProps extends TargetBaseProps {\n\n  /**\n   * The method for api resource invoked by the rule.\n   *\n   * @default '*' that treated as ANY\n   */\n  readonly method?: string;\n\n  /**\n   * The api resource invoked by the rule.\n   * We can use wildcards('*') to specify the path. In that case,\n   * an equal number of real values must be specified for pathParameterValues.\n   *\n   * @default '/'\n   */\n  readonly path?: string;\n\n  /**\n   * The deploy stage of api gateway invoked by the rule.\n   *\n   * @default the value of deploymentStage.stageName of target api gateway.\n   */\n  readonly stage?: string;\n\n  /**\n   * The headers to be set when requesting API\n   *\n   * @default no header parameters\n   */\n  readonly headerParameters?: { [key: string]: (string) };\n\n  /**\n   * The path parameter values to be used to\n   * populate to wildcards(\"*\") of requesting api path\n   *\n   * @default no path parameters\n   */\n  readonly pathParameterValues?: string[];\n\n  /**\n   * The query parameters to be set when requesting API.\n   *\n   * @default no querystring parameters\n   */\n  readonly queryStringParameters?: { [key: string]: (string) };\n\n  /**\n   * This will be the post request body send to the API.\n   *\n   * @default the entire EventBridge event\n   */\n  readonly postBody?: events.RuleTargetInput;\n\n  /**\n   * The role to assume before invoking the target\n   * (i.e., the pipeline) when the given rule is triggered.\n   *\n   * @default - a new role will be created\n   */\n  readonly eventRole?: iam.IRole;\n}\n\n/**\n * Use an API Gateway REST APIs as a target for Amazon EventBridge rules.\n */\nexport class ApiGateway implements events.IRuleTarget {\n\n  constructor(public readonly restApi: api.RestApi, private readonly props?: ApiGatewayProps) {\n  }\n\n  /**\n   * Returns a RuleTarget that can be used to trigger this API Gateway REST APIs\n   * as a result from an EventBridge event.\n   *\n   * @see https://docs.aws.amazon.com/eventbridge/latest/userguide/resource-based-policies-eventbridge.html#sqs-permissions\n   */\n  public bind(rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    if (this.props?.deadLetterQueue) {\n      addToDeadLetterQueueResourcePolicy(rule, this.props.deadLetterQueue);\n    }\n\n    const wildcardCountsInPath = this.props?.path?.match( /\\*/g )?.length ?? 0;\n    if (wildcardCountsInPath !== (this.props?.pathParameterValues || []).length) {\n      throw new Error('The number of wildcards in the path does not match the number of path pathParameterValues.');\n    }\n\n    const restApiArn = this.restApi.arnForExecuteApi(\n      this.props?.method,\n      this.props?.path || '/',\n      this.props?.stage || this.restApi.deploymentStage.stageName,\n    );\n    return {\n      ...(this.props ? bindBaseTargetConfig(this.props) : {}),\n      arn: restApiArn,\n      role: this.props?.eventRole || singletonEventRole(this.restApi, [new iam.PolicyStatement({\n        resources: [restApiArn],\n        actions: [\n          'execute-api:Invoke',\n          'execute-api:ManageConnections',\n        ],\n      })]),\n      deadLetterConfig: this.props?.deadLetterQueue && { arn: this.props.deadLetterQueue?.queueArn },\n      input: this.props?.postBody,\n      targetResource: this.restApi,\n      httpParameters: {\n        headerParameters: this.props?.headerParameters,\n        queryStringParameters: this.props?.queryStringParameters,\n        pathParameterValues: this.props?.pathParameterValues,\n      },\n    };\n  }\n\n}\n\n"],
  "mappings": "iNAEA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,QAAA,EAuEA,MAAa,UAAU,CAErB,YAA4B,QAAuC,MAAuB,CAA9D,KAAA,QAAA,QAAuC,KAAA,MAAA,wJAS5D,KAAK,KAAoB,IAAY,qDAM1C,8DALA,MAAI,KAAK,SAAK,MAAA,KAAA,SAAA,GAAE,iBACd,OAAA,mCAAmC,KAAM,KAAK,MAAM,eAAe,EAIjE,AADsB,KAAA,IAAA,IAAA,IAAG,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,QAAI,MAAA,KAAA,OAAA,OAAA,GAAE,MAAO,KAAK,KAAA,MAAA,KAAA,OAAA,OAAA,GAAI,UAAM,MAAA,KAAA,OAAA,GAAI,KAC3C,MAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,sBAAuB,CAAA,GAAI,OACnE,KAAM,IAAI,OAAM,4FAA4F,EAG9G,KAAM,YAAa,KAAK,QAAQ,iBAAgB,IAC9C,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,OACZ,KAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,OAAQ,IACpB,KAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,QAAS,KAAK,QAAQ,gBAAgB,SAAS,EAE7D,MAAO,IACD,KAAK,MAAQ,OAAA,qBAAqB,KAAK,KAAK,EAAI,CAAA,EACpD,IAAK,WACL,KAAM,KAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,YAAa,OAAA,mBAAmB,KAAK,QAAS,CAAC,GAAI,KAAI,gBAAgB,CACvF,UAAW,CAAC,UAAU,EACtB,QAAS,CACP,qBACA,iCAEH,CAAC,CAAC,EACH,iBAAkB,KAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,kBAAmB,CAAE,IAAG,IAAE,KAAK,MAAM,mBAAe,MAAA,KAAA,OAAA,OAAA,GAAE,QAAQ,EAC5F,MAAK,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,SACnB,eAAgB,KAAK,QACrB,eAAgB,CACd,iBAAgB,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,iBAC9B,sBAAqB,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,sBACnC,oBAAmB,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,uBA1CzC,QAAA,WAAA",
  "names": []
}
