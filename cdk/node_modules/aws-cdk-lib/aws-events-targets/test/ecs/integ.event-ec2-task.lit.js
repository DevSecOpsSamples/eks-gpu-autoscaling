"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const path=require("path"),ec2=require("../../../aws-ec2"),ecs=require("../../../aws-ecs"),events=require("../../../aws-events"),cdk=require("../../../core"),targets=require("../../lib"),app=new cdk.App;class EventStack extends cdk.Stack{constructor(scope,id){super(scope,id);const vpc=new ec2.Vpc(this,"Vpc",{maxAzs:1}),cluster=new ecs.Cluster(this,"EcsCluster",{vpc});cluster.addCapacity("DefaultAutoScalingGroup",{instanceType:new ec2.InstanceType("t2.micro")});const taskDefinition=new ecs.Ec2TaskDefinition(this,"TaskDef");taskDefinition.addContainer("TheContainer",{image:ecs.ContainerImage.fromAsset(path.resolve(__dirname,"eventhandler-image")),memoryLimitMiB:256,logging:new ecs.AwsLogDriver({streamPrefix:"EventDemo"})}),new events.Rule(this,"Rule",{schedule:events.Schedule.rate(cdk.Duration.minutes(1))}).addTarget(new targets.EcsTask({cluster,taskDefinition,taskCount:1,containerOverrides:[{containerName:"TheContainer",environment:[{name:"I_WAS_TRIGGERED",value:"From CloudWatch Events"}]}]}))}}new EventStack(app,"aws-ecs-integ-ecs"),app.synth();
//# sourceMappingURL=integ.event-ec2-task.lit.js.map
