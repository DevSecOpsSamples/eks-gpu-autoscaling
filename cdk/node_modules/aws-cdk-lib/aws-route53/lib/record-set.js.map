{
  "version": 3,
  "sources": ["record-set.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport { CustomResource, CustomResourceProvider, CustomResourceProviderRuntime, Duration, IResource, RemovalPolicy, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { IAliasRecordTarget } from './alias-record-target';\nimport { IHostedZone } from './hosted-zone-ref';\nimport { CfnRecordSet } from './route53.generated';\nimport { determineFullyQualifiedDomainName } from './util';\n\nconst CROSS_ACCOUNT_ZONE_DELEGATION_RESOURCE_TYPE = 'Custom::CrossAccountZoneDelegation';\n\n/**\n * A record set\n */\nexport interface IRecordSet extends IResource {\n  /**\n   * The domain name of the record\n   */\n  readonly domainName: string;\n}\n\n/**\n * The record type.\n */\nexport enum RecordType {\n  /**\n   * route traffic to a resource, such as a web server, using an IPv4 address in dotted decimal\n   * notation\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#AFormat\n   */\n  A = 'A',\n\n  /**\n   * route traffic to a resource, such as a web server, using an IPv6 address in colon-separated\n   * hexadecimal format\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#AAAAFormat\n   */\n  AAAA = 'AAAA',\n\n  /**\n   * A CAA record specifies which certificate authorities (CAs) are allowed to issue certificates\n   * for a domain or subdomain\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#CAAFormat\n   */\n  CAA = 'CAA',\n\n  /**\n   * A CNAME record maps DNS queries for the name of the current record, such as acme.example.com,\n   * to another domain (example.com or example.net) or subdomain (acme.example.com or zenith.example.org).\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#CNAMEFormat\n   */\n  CNAME = 'CNAME',\n\n  /**\n   * A delegation signer (DS) record refers a zone key for a delegated subdomain zone.\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#DSFormat\n   */\n  DS = 'DS',\n\n  /**\n   * An MX record specifies the names of your mail servers and, if you have two or more mail servers,\n   * the priority order.\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#MXFormat\n   */\n  MX = 'MX',\n\n  /**\n   * A Name Authority Pointer (NAPTR) is a type of record that is used by Dynamic Delegation Discovery\n   * System (DDDS) applications to convert one value to another or to replace one value with another.\n   * For example, one common use is to convert phone numbers into SIP URIs.\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#NAPTRFormat\n   */\n  NAPTR = 'NAPTR',\n\n  /**\n   * An NS record identifies the name servers for the hosted zone\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#NSFormat\n   */\n  NS = 'NS',\n\n  /**\n   * A PTR record maps an IP address to the corresponding domain name.\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#PTRFormat\n   */\n  PTR = 'PTR',\n\n  /**\n   * A start of authority (SOA) record provides information about a domain and the corresponding Amazon\n   * Route 53 hosted zone\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#SOAFormat\n   */\n  SOA = 'SOA',\n\n  /**\n   * SPF records were formerly used to verify the identity of the sender of email messages.\n   * Instead of an SPF record, we recommend that you create a TXT record that contains the applicable value.\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#SPFFormat\n   */\n  SPF = 'SPF',\n\n  /**\n   * An SRV record Value element consists of four space-separated values. The first three values are\n   * decimal numbers representing priority, weight, and port. The fourth value is a domain name.\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#SRVFormat\n   */\n  SRV = 'SRV',\n\n  /**\n   * A TXT record contains one or more strings that are enclosed in double quotation marks (\").\n   *\n   * @see https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html#TXTFormat\n   */\n  TXT = 'TXT'\n}\n\n/**\n * Options for a RecordSet.\n */\nexport interface RecordSetOptions {\n  /**\n   * The hosted zone in which to define the new record.\n   */\n  readonly zone: IHostedZone;\n\n  /**\n   * The domain name for this record.\n   *\n   * @default zone root\n   */\n  readonly recordName?: string;\n\n  /**\n   * The resource record cache time to live (TTL).\n   *\n   * @default Duration.minutes(30)\n   */\n  readonly ttl?: Duration;\n\n  /**\n   * A comment to add on the record.\n   *\n   * @default no comment\n   */\n  readonly comment?: string;\n}\n\n/**\n * Type union for a record that accepts multiple types of target.\n */\nexport class RecordTarget {\n  /**\n   * Use string values as target.\n   */\n  public static fromValues(...values: string[]) {\n    return new RecordTarget(values);\n  }\n\n  /**\n   * Use an alias as target.\n   */\n  public static fromAlias(aliasTarget: IAliasRecordTarget) {\n    return new RecordTarget(undefined, aliasTarget);\n  }\n\n  /**\n   * Use ip addresses as target.\n   */\n  public static fromIpAddresses(...ipAddresses: string[]) {\n    return RecordTarget.fromValues(...ipAddresses);\n  }\n\n  /**\n   *\n   * @param values correspond with the chosen record type (e.g. for 'A' Type, specify one or more IP addresses)\n   * @param aliasTarget alias for targets such as CloudFront distribution to route traffic to\n   */\n  protected constructor(public readonly values?: string[], public readonly aliasTarget?: IAliasRecordTarget) {\n  }\n}\n\n/**\n * Construction properties for a RecordSet.\n */\nexport interface RecordSetProps extends RecordSetOptions {\n  /**\n   * The record type.\n   */\n  readonly recordType: RecordType;\n\n  /**\n   * The target for this record, either `RecordTarget.fromValues()` or\n   * `RecordTarget.fromAlias()`.\n   */\n  readonly target: RecordTarget;\n}\n\n/**\n * A record set.\n */\nexport class RecordSet extends Resource implements IRecordSet {\n  public readonly domainName: string;\n\n  constructor(scope: Construct, id: string, props: RecordSetProps) {\n    super(scope, id);\n\n    const ttl = props.target.aliasTarget ? undefined : ((props.ttl && props.ttl.toSeconds()) ?? 1800).toString();\n\n    const recordSet = new CfnRecordSet(this, 'Resource', {\n      hostedZoneId: props.zone.hostedZoneId,\n      name: determineFullyQualifiedDomainName(props.recordName || props.zone.zoneName, props.zone),\n      type: props.recordType,\n      resourceRecords: props.target.values,\n      aliasTarget: props.target.aliasTarget && props.target.aliasTarget.bind(this, props.zone),\n      ttl,\n      comment: props.comment,\n    });\n\n    this.domainName = recordSet.ref;\n  }\n}\n\n/**\n * Target for a DNS A Record\n *\n * @deprecated Use RecordTarget\n */\nexport class AddressRecordTarget extends RecordTarget {\n}\n\n/**\n * Construction properties for a ARecord.\n */\nexport interface ARecordProps extends RecordSetOptions {\n  /**\n   * The target.\n   */\n  readonly target: RecordTarget;\n}\n\n/**\n * A DNS A record\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class ARecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: ARecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.A,\n      target: props.target,\n    });\n  }\n}\n\n/**\n * Construction properties for a AaaaRecord.\n */\nexport interface AaaaRecordProps extends RecordSetOptions {\n  /**\n   * The target.\n   */\n  readonly target: RecordTarget;\n}\n\n/**\n * A DNS AAAA record\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class AaaaRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: AaaaRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.AAAA,\n      target: props.target,\n    });\n  }\n}\n\n/**\n * Construction properties for a CnameRecord.\n */\nexport interface CnameRecordProps extends RecordSetOptions {\n  /**\n   * The domain name.\n   */\n  readonly domainName: string;\n}\n\n/**\n * A DNS CNAME record\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class CnameRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: CnameRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.CNAME,\n      target: RecordTarget.fromValues(props.domainName),\n    });\n  }\n}\n\n/**\n * Construction properties for a TxtRecord.\n */\nexport interface TxtRecordProps extends RecordSetOptions {\n  /**\n   * The text values.\n   */\n  readonly values: string[];\n}\n\n/**\n * A DNS TXT record\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class TxtRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: TxtRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.TXT,\n      target: RecordTarget.fromValues(...props.values.map(v => formatTxt(v))),\n    });\n  }\n}\n\n/**\n * Formats a text value for use in a TXT record\n *\n * Use `JSON.stringify` to correctly escape and enclose in double quotes (\"\").\n *\n * DNS TXT records can contain up to 255 characters in a single string. TXT\n * record strings over 255 characters must be split into multiple text strings\n * within the same record.\n *\n * @see https://aws.amazon.com/premiumsupport/knowledge-center/route53-resolve-dkim-text-record-error/\n */\nfunction formatTxt(string: string): string {\n  const result = [];\n  let idx = 0;\n  while (idx < string.length) {\n    result.push(string.slice(idx, idx += 255)); // chunks of 255 characters long\n  }\n  return result.map(r => JSON.stringify(r)).join('');\n}\n\n/**\n * Properties for a SRV record value.\n */\nexport interface SrvRecordValue {\n  /**\n   * The priority.\n   */\n  readonly priority: number;\n\n  /**\n   * The weight.\n   */\n  readonly weight: number;\n\n  /**\n   * The port.\n   */\n  readonly port: number;\n\n  /**\n   * The server host name.\n   */\n  readonly hostName: string;\n}\n/**\n * Construction properties for a SrvRecord.\n */\nexport interface SrvRecordProps extends RecordSetOptions {\n  /**\n   * The values.\n   */\n  readonly values: SrvRecordValue[];\n}\n\n/**\n * A DNS SRV record\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class SrvRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: SrvRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.SRV,\n      target: RecordTarget.fromValues(...props.values.map(v => `${v.priority} ${v.weight} ${v.port} ${v.hostName}`)),\n    });\n  }\n}\n\n/**\n * The CAA tag.\n */\nexport enum CaaTag {\n  /**\n   * Explicity authorizes a single certificate authority to issue a\n   * certificate (any type) for the hostname.\n   */\n  ISSUE = 'issue',\n\n  /**\n   * Explicity authorizes a single certificate authority to issue a\n   * wildcard certificate (and only wildcard) for the hostname.\n   */\n  ISSUEWILD = 'issuewild',\n\n  /**\n   * Specifies a URL to which a certificate authority may report policy\n   * violations.\n   */\n  IODEF = 'iodef',\n}\n\n/**\n * Properties for a CAA record value.\n */\nexport interface CaaRecordValue {\n  /**\n   * The flag.\n   */\n  readonly flag: number;\n\n  /**\n   * The tag.\n   */\n  readonly tag: CaaTag;\n\n  /**\n   * The value associated with the tag.\n   */\n  readonly value: string;\n}\n\n/**\n * Construction properties for a CaaRecord.\n */\nexport interface CaaRecordProps extends RecordSetOptions {\n  /**\n   * The values.\n   */\n  readonly values: CaaRecordValue[];\n}\n\n/**\n * A DNS CAA record\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class CaaRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: CaaRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.CAA,\n      target: RecordTarget.fromValues(...props.values.map(v => `${v.flag} ${v.tag} \"${v.value}\"`)),\n    });\n  }\n}\n\n/**\n * Construction properties for a CaaAmazonRecord.\n */\nexport interface CaaAmazonRecordProps extends RecordSetOptions {}\n\n/**\n * A DNS Amazon CAA record.\n *\n * A CAA record to restrict certificate authorities allowed\n * to issue certificates for a domain to Amazon only.\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class CaaAmazonRecord extends CaaRecord {\n  constructor(scope: Construct, id: string, props: CaaAmazonRecordProps) {\n    super(scope, id, {\n      ...props,\n      values: [\n        {\n          flag: 0,\n          tag: CaaTag.ISSUE,\n          value: 'amazon.com',\n        },\n      ],\n    });\n  }\n}\n\n/**\n * Properties for a MX record value.\n */\nexport interface MxRecordValue {\n  /**\n   * The priority.\n   */\n  readonly priority: number;\n\n  /**\n   * The mail server host name.\n   */\n  readonly hostName: string;\n}\n\n/**\n * Construction properties for a MxRecord.\n */\nexport interface MxRecordProps extends RecordSetOptions {\n  /**\n   * The values.\n   */\n  readonly values: MxRecordValue[];\n}\n\n/**\n * A DNS MX record\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class MxRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: MxRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.MX,\n      target: RecordTarget.fromValues(...props.values.map(v => `${v.priority} ${v.hostName}`)),\n    });\n  }\n}\n\n/**\n * Construction properties for a NSRecord.\n */\nexport interface NsRecordProps extends RecordSetOptions {\n  /**\n   * The NS values.\n   */\n  readonly values: string[];\n}\n\n/**\n * A DNS NS record\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class NsRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: NsRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.NS,\n      target: RecordTarget.fromValues(...props.values),\n    });\n  }\n}\n\n/**\n * Construction properties for a DSRecord.\n */\nexport interface DsRecordProps extends RecordSetOptions {\n  /**\n   * The DS values.\n   */\n  readonly values: string[];\n}\n\n/**\n * A DNS DS record\n *\n * @resource AWS::Route53::RecordSet\n */\nexport class DsRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: DsRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.DS,\n      target: RecordTarget.fromValues(...props.values),\n    });\n  }\n}\n\n/**\n * Construction properties for a ZoneDelegationRecord\n */\nexport interface ZoneDelegationRecordProps extends RecordSetOptions {\n  /**\n   * The name servers to report in the delegation records.\n   */\n  readonly nameServers: string[];\n}\n\n/**\n * A record to delegate further lookups to a different set of name servers.\n */\nexport class ZoneDelegationRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: ZoneDelegationRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.NS,\n      target: RecordTarget.fromValues(...Token.isUnresolved(props.nameServers)\n        ? props.nameServers // Can't map a string-array token!\n        : props.nameServers.map(ns => (Token.isUnresolved(ns) || ns.endsWith('.')) ? ns : `${ns}.`),\n      ),\n      ttl: props.ttl || Duration.days(2),\n    });\n  }\n}\n\n/**\n * Construction properties for a CrossAccountZoneDelegationRecord\n */\nexport interface CrossAccountZoneDelegationRecordProps {\n  /**\n   * The zone to be delegated\n   */\n  readonly delegatedZone: IHostedZone;\n\n  /**\n   * The hosted zone name in the parent account\n   *\n   * @default - no zone name\n   */\n  readonly parentHostedZoneName?: string;\n\n  /**\n   * The hosted zone id in the parent account\n   *\n   * @default - no zone id\n   */\n  readonly parentHostedZoneId?: string;\n\n  /**\n   * The delegation role in the parent account\n   */\n  readonly delegationRole: iam.IRole;\n\n  /**\n   * The resource record cache time to live (TTL).\n   *\n   * @default Duration.days(2)\n   */\n  readonly ttl?: Duration;\n\n  /**\n   * The removal policy to apply to the record set.\n   *\n   * @default RemovalPolicy.DESTROY\n   */\n  readonly removalPolicy?: RemovalPolicy;\n}\n\n/**\n * A Cross Account Zone Delegation record\n */\nexport class CrossAccountZoneDelegationRecord extends Construct {\n  constructor(scope: Construct, id: string, props: CrossAccountZoneDelegationRecordProps) {\n    super(scope, id);\n\n    if (!props.parentHostedZoneName && !props.parentHostedZoneId) {\n      throw Error('At least one of parentHostedZoneName or parentHostedZoneId is required');\n    }\n\n    if (props.parentHostedZoneName && props.parentHostedZoneId) {\n      throw Error('Only one of parentHostedZoneName and parentHostedZoneId is supported');\n    }\n\n    const provider = CustomResourceProvider.getOrCreateProvider(this, CROSS_ACCOUNT_ZONE_DELEGATION_RESOURCE_TYPE, {\n      codeDirectory: path.join(__dirname, 'cross-account-zone-delegation-handler'),\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n    });\n\n    const role = iam.Role.fromRoleArn(this, 'cross-account-zone-delegation-handler-role', provider.roleArn);\n\n    const addToPrinciplePolicyResult = role.addToPrincipalPolicy(new iam.PolicyStatement({\n      effect: iam.Effect.ALLOW,\n      actions: ['sts:AssumeRole'],\n      resources: [props.delegationRole.roleArn],\n    }));\n\n    const customResource = new CustomResource(this, 'CrossAccountZoneDelegationCustomResource', {\n      resourceType: CROSS_ACCOUNT_ZONE_DELEGATION_RESOURCE_TYPE,\n      serviceToken: provider.serviceToken,\n      removalPolicy: props.removalPolicy,\n      properties: {\n        AssumeRoleArn: props.delegationRole.roleArn,\n        ParentZoneName: props.parentHostedZoneName,\n        ParentZoneId: props.parentHostedZoneId,\n        DelegatedZoneName: props.delegatedZone.zoneName,\n        DelegatedZoneNameServers: props.delegatedZone.hostedZoneNameServers!,\n        TTL: (props.ttl || Duration.days(2)).toSeconds(),\n      },\n    });\n\n    if (addToPrinciplePolicyResult.policyDependable) {\n      customResource.node.addDependency(addToPrinciplePolicyResult.policyDependable);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
