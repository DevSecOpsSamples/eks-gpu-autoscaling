{
  "version": 3,
  "sources": ["hosted-zone.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport * as cxschema from '../../cloud-assembly-schema';\nimport { ContextProvider, Duration, Lazy, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { HostedZoneProviderProps } from './hosted-zone-provider';\nimport { HostedZoneAttributes, IHostedZone } from './hosted-zone-ref';\nimport { CaaAmazonRecord, ZoneDelegationRecord } from './record-set';\nimport { CfnHostedZone } from './route53.generated';\nimport { makeHostedZoneArn, validateZoneName } from './util';\n\n/**\n * Common properties to create a Route 53 hosted zone\n */\nexport interface CommonHostedZoneProps {\n  /**\n   * The name of the domain. For resource record types that include a domain\n   * name, specify a fully qualified domain name.\n   */\n  readonly zoneName: string;\n\n  /**\n   * Any comments that you want to include about the hosted zone.\n   *\n   * @default none\n   */\n  readonly comment?: string;\n\n  /**\n   * The Amazon Resource Name (ARN) for the log group that you want Amazon Route 53 to send query logs to.\n   *\n   * @default disabled\n   */\n  readonly queryLogsLogGroupArn?: string;\n}\n\n/**\n * Properties of a new hosted zone\n */\nexport interface HostedZoneProps extends CommonHostedZoneProps {\n  /**\n   * A VPC that you want to associate with this hosted zone. When you specify\n   * this property, a private hosted zone will be created.\n   *\n   * You can associate additional VPCs to this private zone using `addVpc(vpc)`.\n   *\n   * @default public (no VPCs associated)\n   */\n  readonly vpcs?: ec2.IVpc[];\n}\n\n/**\n * Container for records, and records contain information about how to route traffic for a\n * specific domain, such as example.com and its subdomains (acme.example.com, zenith.example.com)\n */\nexport class HostedZone extends Resource implements IHostedZone {\n  public get hostedZoneArn(): string {\n    return makeHostedZoneArn(this, this.hostedZoneId);\n  }\n\n  /**\n   * Import a Route 53 hosted zone defined either outside the CDK, or in a different CDK stack\n   *\n   * Use when hosted zone ID is known. Hosted zone name becomes unavailable through this query.\n   *\n   * @param scope the parent Construct for this Construct\n   * @param id  the logical name of this Construct\n   * @param hostedZoneId the ID of the hosted zone to import\n   */\n  public static fromHostedZoneId(scope: Construct, id: string, hostedZoneId: string): IHostedZone {\n    class Import extends Resource implements IHostedZone {\n      public readonly hostedZoneId = hostedZoneId;\n      public get zoneName(): string {\n        throw new Error('HostedZone.fromHostedZoneId doesn\\'t support \"zoneName\"');\n      }\n      public get hostedZoneArn(): string {\n        return makeHostedZoneArn(this, this.hostedZoneId);\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * Imports a hosted zone from another stack.\n   *\n   * Use when both hosted zone ID and hosted zone name are known.\n   *\n   * @param scope the parent Construct for this Construct\n   * @param id  the logical name of this Construct\n   * @param attrs the HostedZoneAttributes (hosted zone ID and hosted zone name)\n   */\n  public static fromHostedZoneAttributes(scope: Construct, id: string, attrs: HostedZoneAttributes): IHostedZone {\n    class Import extends Resource implements IHostedZone {\n      public readonly hostedZoneId = attrs.hostedZoneId;\n      public readonly zoneName = attrs.zoneName;\n      public get hostedZoneArn(): string {\n        return makeHostedZoneArn(this, this.hostedZoneId);\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * Lookup a hosted zone in the current account/region based on query parameters.\n   * Requires environment, you must specify env for the stack.\n   *\n   * Use to easily query hosted zones.\n   *\n   * @see https://docs.aws.amazon.com/cdk/latest/guide/environments.html\n   */\n  public static fromLookup(scope: Construct, id: string, query: HostedZoneProviderProps): IHostedZone {\n    const DEFAULT_HOSTED_ZONE: HostedZoneContextResponse = {\n      Id: 'DUMMY',\n      Name: query.domainName,\n    };\n\n    interface HostedZoneContextResponse {\n      Id: string;\n      Name: string;\n    }\n\n    const response: HostedZoneContextResponse = ContextProvider.getValue(scope, {\n      provider: cxschema.ContextProvider.HOSTED_ZONE_PROVIDER,\n      dummyValue: DEFAULT_HOSTED_ZONE,\n      props: query,\n    }).value;\n\n    // CDK handles the '.' at the end, so remove it here\n    if (response.Name.endsWith('.')) {\n      response.Name = response.Name.substring(0, response.Name.length - 1);\n    }\n\n    response.Id = response.Id.replace('/hostedzone/', '');\n\n    return HostedZone.fromHostedZoneAttributes(scope, id, {\n      hostedZoneId: response.Id,\n      zoneName: response.Name,\n    });\n  }\n\n  public readonly hostedZoneId: string;\n  public readonly zoneName: string;\n  public readonly hostedZoneNameServers?: string[];\n\n  /**\n   * VPCs to which this hosted zone will be added\n   */\n  protected readonly vpcs = new Array<CfnHostedZone.VPCProperty>();\n\n  constructor(scope: Construct, id: string, props: HostedZoneProps) {\n    super(scope, id);\n\n    validateZoneName(props.zoneName);\n\n    const resource = new CfnHostedZone(this, 'Resource', {\n      name: props.zoneName + '.',\n      hostedZoneConfig: props.comment ? { comment: props.comment } : undefined,\n      queryLoggingConfig: props.queryLogsLogGroupArn ? { cloudWatchLogsLogGroupArn: props.queryLogsLogGroupArn } : undefined,\n      vpcs: Lazy.any({ produce: () => this.vpcs.length === 0 ? undefined : this.vpcs }),\n    });\n\n    this.hostedZoneId = resource.ref;\n    this.hostedZoneNameServers = resource.attrNameServers;\n    this.zoneName = props.zoneName;\n\n    for (const vpc of props.vpcs || []) {\n      this.addVpc(vpc);\n    }\n  }\n\n  /**\n   * Add another VPC to this private hosted zone.\n   *\n   * @param vpc the other VPC to add.\n   */\n  public addVpc(vpc: ec2.IVpc) {\n    this.vpcs.push({ vpcId: vpc.vpcId, vpcRegion: Stack.of(vpc).region });\n  }\n}\n\n/**\n * Construction properties for a PublicHostedZone.\n */\nexport interface PublicHostedZoneProps extends CommonHostedZoneProps {\n  /**\n   * Whether to create a CAA record to restrict certificate authorities allowed\n   * to issue certificates for this domain to Amazon only.\n   *\n   * @default false\n   */\n  readonly caaAmazon?: boolean;\n\n  /**\n   * A principal which is trusted to assume a role for zone delegation\n   *\n   * @default - No delegation configuration\n   */\n  readonly crossAccountZoneDelegationPrincipal?: iam.IPrincipal;\n\n  /**\n   * The name of the role created for cross account delegation\n   *\n   * @default - A role name is generated automatically\n   */\n  readonly crossAccountZoneDelegationRoleName?: string;\n}\n\n/**\n * Represents a Route 53 public hosted zone\n */\nexport interface IPublicHostedZone extends IHostedZone { }\n\n/**\n * Create a Route53 public hosted zone.\n *\n * @resource AWS::Route53::HostedZone\n */\nexport class PublicHostedZone extends HostedZone implements IPublicHostedZone {\n\n  /**\n   * Import a Route 53 public hosted zone defined either outside the CDK, or in a different CDK stack\n   *\n   * @param scope the parent Construct for this Construct\n   * @param id the logical name of this Construct\n   * @param publicHostedZoneId the ID of the public hosted zone to import\n   */\n  public static fromPublicHostedZoneId(scope: Construct, id: string, publicHostedZoneId: string): IPublicHostedZone {\n    class Import extends Resource implements IPublicHostedZone {\n      public readonly hostedZoneId = publicHostedZoneId;\n      public get zoneName(): string { throw new Error('cannot retrieve \"zoneName\" from an an imported hosted zone'); }\n      public get hostedZoneArn(): string {\n        return makeHostedZoneArn(this, this.hostedZoneId);\n      }\n    }\n    return new Import(scope, id);\n  }\n\n  /**\n   * Role for cross account zone delegation\n   */\n  public readonly crossAccountZoneDelegationRole?: iam.Role;\n\n  constructor(scope: Construct, id: string, props: PublicHostedZoneProps) {\n    super(scope, id, props);\n\n    if (props.caaAmazon) {\n      new CaaAmazonRecord(this, 'CaaAmazon', {\n        zone: this,\n      });\n    }\n\n    if (!props.crossAccountZoneDelegationPrincipal && props.crossAccountZoneDelegationRoleName) {\n      throw Error('crossAccountZoneDelegationRoleName property is not supported without crossAccountZoneDelegationPrincipal');\n    }\n\n    if (props.crossAccountZoneDelegationPrincipal) {\n      this.crossAccountZoneDelegationRole = new iam.Role(this, 'CrossAccountZoneDelegationRole', {\n        roleName: props.crossAccountZoneDelegationRoleName,\n        assumedBy: props.crossAccountZoneDelegationPrincipal,\n        inlinePolicies: {\n          delegation: new iam.PolicyDocument({\n            statements: [\n              new iam.PolicyStatement({\n                actions: ['route53:ChangeResourceRecordSets'],\n                resources: [this.hostedZoneArn],\n              }),\n              new iam.PolicyStatement({\n                actions: ['route53:ListHostedZonesByName'],\n                resources: ['*'],\n              }),\n            ],\n          }),\n        },\n      });\n    }\n  }\n\n  public addVpc(_vpc: ec2.IVpc) {\n    throw new Error('Cannot associate public hosted zones with a VPC');\n  }\n\n  /**\n   * Adds a delegation from this zone to a designated zone.\n   *\n   * @param delegate the zone being delegated to.\n   * @param opts     options for creating the DNS record, if any.\n   */\n  public addDelegation(delegate: IPublicHostedZone, opts: ZoneDelegationOptions = {}): void {\n    new ZoneDelegationRecord(this, `${this.zoneName} -> ${delegate.zoneName}`, {\n      zone: this,\n      recordName: delegate.zoneName,\n      nameServers: delegate.hostedZoneNameServers!, // PublicHostedZones always have name servers!\n      comment: opts.comment,\n      ttl: opts.ttl,\n    });\n  }\n}\n\n/**\n * Options available when creating a delegation relationship from one PublicHostedZone to another.\n */\nexport interface ZoneDelegationOptions {\n  /**\n   * A comment to add on the DNS record created to incorporate the delegation.\n   *\n   * @default none\n   */\n  readonly comment?: string;\n\n  /**\n   * The TTL (Time To Live) of the DNS delegation record in DNS caches.\n   *\n   * @default 172800\n   */\n  readonly ttl?: Duration;\n}\n\n/**\n * Properties to create a Route 53 private hosted zone\n */\nexport interface PrivateHostedZoneProps extends CommonHostedZoneProps {\n  /**\n   * A VPC that you want to associate with this hosted zone.\n   *\n   * Private hosted zones must be associated with at least one VPC. You can\n   * associated additional VPCs using `addVpc(vpc)`.\n   */\n  readonly vpc: ec2.IVpc;\n}\n\n/**\n * Represents a Route 53 private hosted zone\n */\nexport interface IPrivateHostedZone extends IHostedZone {}\n\n/**\n * Create a Route53 private hosted zone for use in one or more VPCs.\n *\n * Note that `enableDnsHostnames` and `enableDnsSupport` must have been enabled\n * for the VPC you're configuring for private hosted zones.\n *\n * @resource AWS::Route53::HostedZone\n */\nexport class PrivateHostedZone extends HostedZone implements IPrivateHostedZone {\n\n  /**\n   * Import a Route 53 private hosted zone defined either outside the CDK, or in a different CDK stack\n   *\n   * @param scope the parent Construct for this Construct\n   * @param id the logical name of this Construct\n   * @param privateHostedZoneId the ID of the private hosted zone to import\n   */\n  public static fromPrivateHostedZoneId(scope: Construct, id: string, privateHostedZoneId: string): IPrivateHostedZone {\n    class Import extends Resource implements IPrivateHostedZone {\n      public readonly hostedZoneId = privateHostedZoneId;\n      public get zoneName(): string { throw new Error('cannot retrieve \"zoneName\" from an an imported hosted zone'); }\n      public get hostedZoneArn(): string {\n        return makeHostedZoneArn(this, this.hostedZoneId);\n      }\n    }\n    return new Import(scope, id);\n  }\n\n  constructor(scope: Construct, id: string, props: PrivateHostedZoneProps) {\n    super(scope, id, props);\n\n    this.addVpc(props.vpc);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
