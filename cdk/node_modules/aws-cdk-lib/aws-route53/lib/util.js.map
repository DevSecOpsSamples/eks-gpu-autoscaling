{
  "version": 3,
  "sources": ["util.ts"],
  "sourcesContent": ["import { Stack } from '../../core';\nimport { IHostedZone } from './hosted-zone-ref';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Validates a zone name is valid by Route53 specifc naming rules,\n * and that there is no trailing dot in the name.\n *\n * @param zoneName the zone name to be validated.\n * @returns +zoneName+\n * @throws ValidationError if the name is not valid.\n */\nexport function validateZoneName(zoneName: string) {\n  if (zoneName.endsWith('.')) {\n    throw new ValidationError('zone name must not end with a trailing dot');\n  }\n  if (zoneName.length > 255) {\n    throw new ValidationError('zone name cannot be more than 255 bytes long');\n  }\n  if (zoneName.split('.').find(label => label.length > 63)) {\n    throw new ValidationError('zone name labels cannot be more than 63 bytes long');\n  }\n  if (!zoneName.match(/^[a-z0-9!\"#$%&'()*+,/:;<=>?@[\\\\\\]^_`{|}~.-]+$/i)) {\n    throw new ValidationError('zone names can only contain a-z, 0-9, -, ! \" # $ % & \\' ( ) * + , - / : ; < = > ? @ [ \\ ] ^ _ ` { | } ~ .');\n  }\n}\n\nclass ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Route53 requires the record names are specified as fully qualified names, but this\n * forces lots of redundant work on the user (repeating the zone name over and over).\n * This function allows the user to be lazier and offers a nicer experience, by\n * qualifying relative names appropriately:\n *\n * @param providedName the user-specified name of the record.\n * @param zoneName   the fully-qualified name of the zone the record will be created in.\n *\n * @returns <ul>\n *        <li>If +providedName+ ends with a +.+, use it as-is</li>\n *        <li>If +providedName+ ends with or equals +zoneName+, append a trailing +.+</li>\n *        <li>Otherwise, append +.+, +zoneName+ and a trailing +.+</li>\n *      </ul>\n */\nexport function determineFullyQualifiedDomainName(providedName: string, hostedZone: IHostedZone): string {\n  if (providedName.endsWith('.')) {\n    return providedName;\n  }\n\n  const hostedZoneName = hostedZone.zoneName.endsWith('.')\n    ? hostedZone.zoneName.substring(0, hostedZone.zoneName.length - 1)\n    : hostedZone.zoneName;\n\n  const suffix = `.${hostedZoneName}`;\n  if (providedName.endsWith(suffix) || providedName === hostedZoneName) {\n    return `${providedName}.`;\n  }\n\n  return `${providedName}${suffix}.`;\n}\n\nexport function makeHostedZoneArn(construct: Construct, hostedZoneId: string): string {\n  return Stack.of(construct).formatArn({\n    account: '',\n    region: '',\n    service: 'route53',\n    resource: 'hostedzone',\n    resourceName: hostedZoneId,\n  });\n}\n"],
  "mappings": "wKAAA,KAAA,QAAA,QAAA,YAAA,EAeA,0BAAiC,SAAgB,CAC/C,GAAI,SAAS,SAAS,GAAG,EACvB,KAAM,IAAI,iBAAgB,4CAA4C,EAExE,GAAI,SAAS,OAAS,IACpB,KAAM,IAAI,iBAAgB,8CAA8C,EAE1E,GAAI,SAAS,MAAM,GAAG,EAAE,KAAK,OAAS,MAAM,OAAS,EAAE,EACrD,KAAM,IAAI,iBAAgB,oDAAoD,EAEhF,GAAI,CAAC,SAAS,MAAM,gDAAgD,EAClE,KAAM,IAAI,iBAAgB,0GAA2G,CAEzI,CAbA,QAAA,iBAAA,iBAeA,MAAM,uBAAwB,MAAK,CACjC,YAAY,QAAe,CACzB,MAAM,OAAO,GAmBjB,2CAAkD,aAAsB,WAAuB,CAC7F,GAAI,aAAa,SAAS,GAAG,EAC3B,MAAO,cAGT,KAAM,gBAAiB,WAAW,SAAS,SAAS,GAAG,EACnD,WAAW,SAAS,UAAU,EAAG,WAAW,SAAS,OAAS,CAAC,EAC/D,WAAW,SAET,OAAS,IAAI,iBACnB,MAAI,cAAa,SAAS,MAAM,GAAK,eAAiB,eAC7C,GAAG,gBAGL,GAAG,eAAe,SAC3B,CAfA,QAAA,kCAAA,kCAiBA,2BAAkC,UAAsB,aAAoB,CAC1E,MAAO,QAAA,MAAM,GAAG,SAAS,EAAE,UAAU,CACnC,QAAS,GACT,OAAQ,GACR,QAAS,UACT,SAAU,aACV,aAAc,aACf,CACH,CARA,QAAA,kBAAA",
  "names": []
}
