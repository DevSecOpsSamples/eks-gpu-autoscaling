{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Credentials, Route53, STS } from 'aws-sdk';\n\ninterface ResourceProperties {\n  AssumeRoleArn: string,\n  ParentZoneName?: string,\n  ParentZoneId?: string,\n  DelegatedZoneName: string,\n  DelegatedZoneNameServers: string[],\n  TTL: number,\n}\n\nexport async function handler(event: AWSLambda.CloudFormationCustomResourceEvent) {\n  const resourceProps = event.ResourceProperties as unknown as ResourceProperties;\n\n  switch (event.RequestType) {\n    case 'Create':\n    case 'Update':\n      return cfnEventHandler(resourceProps, false);\n    case 'Delete':\n      return cfnEventHandler(resourceProps, true);\n  }\n}\n\nasync function cfnEventHandler(props: ResourceProperties, isDeleteEvent: boolean) {\n  const { AssumeRoleArn, ParentZoneId, ParentZoneName, DelegatedZoneName, DelegatedZoneNameServers, TTL } = props;\n\n  if (!ParentZoneId && !ParentZoneName) {\n    throw Error('One of ParentZoneId or ParentZoneName must be specified');\n  }\n\n  const credentials = await getCrossAccountCredentials(AssumeRoleArn);\n  const route53 = new Route53({ credentials });\n\n  const parentZoneId = ParentZoneId ?? await getHostedZoneIdByName(ParentZoneName!, route53);\n\n  await route53.changeResourceRecordSets({\n    HostedZoneId: parentZoneId,\n    ChangeBatch: {\n      Changes: [{\n        Action: isDeleteEvent ? 'DELETE' : 'UPSERT',\n        ResourceRecordSet: {\n          Name: DelegatedZoneName,\n          Type: 'NS',\n          TTL,\n          ResourceRecords: DelegatedZoneNameServers.map(ns => ({ Value: ns })),\n        },\n      }],\n    },\n  }).promise();\n}\n\nasync function getCrossAccountCredentials(roleArn: string): Promise<Credentials> {\n  const sts = new STS();\n  const timestamp = (new Date()).getTime();\n\n  const { Credentials: assumedCredentials } = await sts\n    .assumeRole({\n      RoleArn: roleArn,\n      RoleSessionName: `cross-account-zone-delegation-${timestamp}`,\n    })\n    .promise();\n\n  if (!assumedCredentials) {\n    throw Error('Error getting assume role credentials');\n  }\n\n  return new Credentials({\n    accessKeyId: assumedCredentials.AccessKeyId,\n    secretAccessKey: assumedCredentials.SecretAccessKey,\n    sessionToken: assumedCredentials.SessionToken,\n  });\n}\n\nasync function getHostedZoneIdByName(name: string, route53: Route53): Promise<string> {\n  const zones = await route53.listHostedZonesByName({ DNSName: name }).promise();\n  const matchedZones = zones.HostedZones.filter(zone => zone.Name === `${name}.`);\n\n  if (matchedZones.length !== 1) {\n    throw Error(`Expected one hosted zone to match the given name but found ${matchedZones.length}`);\n  }\n\n  return matchedZones[0].Id;\n}\n"],
  "mappings": "2FACA,KAAA,WAAA,QAAA,SAAA,EAWO,uBAAuB,MAAkD,CAC9E,KAAM,eAAgB,MAAM,mBAE5B,OAAQ,MAAM,iBACP,aACA,SACH,MAAO,iBAAgB,cAAe,EAAK,MACxC,SACH,MAAO,iBAAgB,cAAe,EAAI,EAEhD,CAVA,QAAA,QAAA,QAYA,+BAA+B,MAA2B,cAAsB,CAC9E,KAAM,CAAE,cAAe,aAAc,eAAgB,kBAAmB,yBAA0B,KAAQ,MAE1G,GAAI,CAAC,cAAgB,CAAC,eACpB,KAAM,OAAM,yDAAyD,EAGvE,KAAM,aAAc,KAAM,4BAA2B,aAAa,EAC5D,QAAU,GAAI,WAAA,QAAQ,CAAE,WAAW,CAAE,EAErC,aAAe,cAAY,KAAZ,aAAgB,KAAM,uBAAsB,eAAiB,OAAO,EAEzF,KAAM,SAAQ,yBAAyB,CACrC,aAAc,aACd,YAAa,CACX,QAAS,CAAC,CACR,OAAQ,cAAgB,SAAW,SACnC,kBAAmB,CACjB,KAAM,kBACN,KAAM,KACN,IACA,gBAAiB,yBAAyB,IAAI,IAAO,EAAE,MAAO,EAAE,EAAG,GAEtE,GAEJ,EAAE,QAAO,CACZ,CAEA,0CAA0C,QAAe,CACvD,KAAM,KAAM,GAAI,WAAA,IACV,UAAa,GAAI,MAAI,EAAI,QAAO,EAEhC,CAAE,YAAa,oBAAuB,KAAM,KAC/C,WAAW,CACV,QAAS,QACT,gBAAiB,iCAAiC,YACnD,EACA,QAAO,EAEV,GAAI,CAAC,mBACH,KAAM,OAAM,uCAAuC,EAGrD,MAAO,IAAI,WAAA,YAAY,CACrB,YAAa,mBAAmB,YAChC,gBAAiB,mBAAmB,gBACpC,aAAc,mBAAmB,aAClC,CACH,CAEA,qCAAqC,KAAc,QAAgB,CAEjE,KAAM,cAAe,AADP,MAAM,SAAQ,sBAAsB,CAAE,QAAS,IAAI,CAAE,EAAE,QAAO,GACjD,YAAY,OAAO,MAAQ,KAAK,OAAS,GAAG,OAAO,EAE9E,GAAI,aAAa,SAAW,EAC1B,KAAM,OAAM,8DAA8D,aAAa,QAAQ,EAGjG,MAAO,cAAa,GAAG,EACzB",
  "names": []
}
