{
  "version": 3,
  "sources": ["_accelerator-security-group.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\n\nimport { CfnResource } from '../../core';\nimport { AwsCustomResource, AwsCustomResourcePolicy, PhysicalResourceId } from '../../custom-resources';\nimport { Construct } from 'constructs';\nimport { EndpointGroup } from '../lib';\n\n/**\n * The security group used by a Global Accelerator to send traffic to resources in a VPC.\n */\nexport class AcceleratorSecurityGroupPeer implements ec2.IPeer {\n  /**\n   * Lookup the Global Accelerator security group at CloudFormation deployment time.\n   *\n   * As of this writing, Global Accelerators (AGA) create a single security group per VPC. AGA security groups are shared\n   * by all AGAs in an account. Additionally, there is no CloudFormation mechanism to reference the AGA security groups.\n   *\n   * This makes creating security group rules which allow traffic from an AGA complicated in CDK. This lookup will identify\n   * the AGA security group for a given VPC at CloudFormation deployment time, and lets you create rules for traffic from AGA\n   * to other resources created by CDK.\n   */\n  public static fromVpc(scope: Construct, id: string, vpc: ec2.IVpc, endpointGroup: EndpointGroup) {\n\n    // The security group name is always 'GlobalAccelerator'\n    const globalAcceleratorSGName = 'GlobalAccelerator';\n\n    // How to reference the security group name in the response from EC2\n    const ec2ResponseSGIdField = 'SecurityGroups.0.GroupId';\n\n    // The AWS Custom Resource that make a call to EC2 to get the security group ID, for the given VPC\n    const lookupAcceleratorSGCustomResource = new AwsCustomResource(scope, id + 'CustomResource', {\n      onCreate: {\n        service: 'EC2',\n        action: 'describeSecurityGroups',\n        parameters: {\n          Filters: [\n            {\n              Name: 'group-name',\n              Values: [\n                globalAcceleratorSGName,\n              ],\n            },\n            {\n              Name: 'vpc-id',\n              Values: [\n                vpc.vpcId,\n              ],\n            },\n          ],\n        },\n        // We get back a list of responses, but the list should be of length 0 or 1\n        // Getting no response means no resources have been linked to the AGA\n        physicalResourceId: PhysicalResourceId.fromResponse(ec2ResponseSGIdField),\n      },\n      policy: AwsCustomResourcePolicy.fromSdkCalls({\n        resources: AwsCustomResourcePolicy.ANY_RESOURCE,\n      }),\n    });\n\n    // We add a dependency on the endpoint group, guaranteeing that CloudFormation won't\n    // try and look up the SG before AGA creates it. The SG is created when a VPC resource\n    // is associated with an AGA\n    lookupAcceleratorSGCustomResource.node.addDependency(endpointGroup.node.defaultChild as CfnResource);\n\n    // Look up the security group ID\n    return new AcceleratorSecurityGroupPeer(lookupAcceleratorSGCustomResource.getResponseField(ec2ResponseSGIdField));\n  }\n\n  public readonly canInlineRule = false;\n  public readonly connections: ec2.Connections = new ec2.Connections({ peer: this });\n  public readonly uniqueId: string = 'GlobalAcceleratorGroup';\n\n  private constructor(private readonly securityGroupId: string) {\n  }\n\n  public toIngressRuleConfig(): any {\n    return { sourceSecurityGroupId: this.securityGroupId };\n  }\n\n  public toEgressRuleConfig(): any {\n    return { destinationSecurityGroupId: this.securityGroupId };\n  }\n}\n"],
  "mappings": "gHAAA,KAAA,KAAA,QAAA,eAAA,EAGA,mBAAA,QAAA,wBAAA,EAOA,MAAa,4BAA4B,CA8DvC,YAAqC,gBAAuB,CAAvB,KAAA,gBAAA,gBAJrB,KAAA,cAAgB,GAChB,KAAA,YAA+B,GAAI,KAAI,YAAY,CAAE,KAAM,IAAI,CAAE,EACjE,KAAA,SAAmB,+BAjDrB,SAAQ,MAAkB,GAAY,IAAe,cAA4B,CAG7F,KAAM,yBAA0B,oBAG1B,qBAAuB,2BAGvB,kCAAoC,GAAI,oBAAA,kBAAkB,MAAO,GAAK,iBAAkB,CAC5F,SAAU,CACR,QAAS,MACT,OAAQ,yBACR,WAAY,CACV,QAAS,CACP,CACE,KAAM,aACN,OAAQ,CACN,0BAGJ,CACE,KAAM,SACN,OAAQ,CACN,IAAI,UAOZ,mBAAoB,mBAAA,mBAAmB,aAAa,oBAAoB,GAE1E,OAAQ,mBAAA,wBAAwB,aAAa,CAC3C,UAAW,mBAAA,wBAAwB,aACpC,EACF,EAKD,yCAAkC,KAAK,cAAc,cAAc,KAAK,YAA2B,EAG5F,GAAI,8BAA6B,kCAAkC,iBAAiB,oBAAoB,CAAC,EAU3G,qBAAmB,CACxB,MAAO,CAAE,sBAAuB,KAAK,eAAe,EAG/C,oBAAkB,CACvB,MAAO,CAAE,2BAA4B,KAAK,eAAe,GAtE7D,QAAA,6BAAA",
  "names": []
}
