{
  "version": 3,
  "sources": ["step-scaling-action.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnScalingPolicy } from './applicationautoscaling.generated';\nimport { IScalableTarget } from './scalable-target';\n\n/**\n * Properties for a scaling policy\n */\nexport interface StepScalingActionProps {\n  /**\n   * The scalable target\n   */\n  readonly scalingTarget: IScalableTarget;\n\n  /**\n   * A name for the scaling policy\n   *\n   * @default Automatically generated name\n   */\n  readonly policyName?: string;\n\n  /**\n   * How the adjustment numbers are interpreted\n   *\n   * @default ChangeInCapacity\n   */\n  readonly adjustmentType?: AdjustmentType;\n\n  /**\n   * Grace period after scaling activity.\n   *\n   * For scale out policies, multiple scale outs during the cooldown period are\n   * squashed so that only the biggest scale out happens.\n   *\n   * For scale in policies, subsequent scale ins during the cooldown period are\n   * ignored.\n   *\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_StepScalingPolicyConfiguration.html\n   * @default No cooldown period\n   */\n  readonly cooldown?: cdk.Duration;\n\n  /**\n   * Minimum absolute number to adjust capacity with as result of percentage scaling.\n   *\n   * Only when using AdjustmentType = PercentChangeInCapacity, this number controls\n   * the minimum absolute effect size.\n   *\n   * @default No minimum scaling effect\n   */\n  readonly minAdjustmentMagnitude?: number;\n\n  /**\n   * The aggregation type for the CloudWatch metrics.\n   *\n   * @default Average\n   */\n  readonly metricAggregationType?: MetricAggregationType;\n}\n\n/**\n * Define a step scaling action\n *\n * This kind of scaling policy adjusts the target capacity in configurable\n * steps. The size of the step is configurable based on the metric's distance\n * to its alarm threshold.\n *\n * This Action must be used as the target of a CloudWatch alarm to take effect.\n */\nexport class StepScalingAction extends Construct {\n  /**\n   * ARN of the scaling policy\n   */\n  public readonly scalingPolicyArn: string;\n\n  private readonly adjustments = new Array<CfnScalingPolicy.StepAdjustmentProperty>();\n\n  constructor(scope: Construct, id: string, props: StepScalingActionProps) {\n    super(scope, id);\n\n    // Cloudformation requires either the ResourceId, ScalableDimension, and ServiceNamespace\n    // properties, or the ScalingTargetId property, but not both.\n    // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalingpolicy.html\n    const resource = new CfnScalingPolicy(this, 'Resource', {\n      policyName: props.policyName || cdk.Names.uniqueId(this),\n      policyType: 'StepScaling',\n      scalingTargetId: props.scalingTarget.scalableTargetId,\n      stepScalingPolicyConfiguration: {\n        adjustmentType: props.adjustmentType,\n        cooldown: props.cooldown && props.cooldown.toSeconds(),\n        minAdjustmentMagnitude: props.minAdjustmentMagnitude,\n        metricAggregationType: props.metricAggregationType,\n        stepAdjustments: cdk.Lazy.any({ produce: () => this.adjustments }),\n      } as CfnScalingPolicy.StepScalingPolicyConfigurationProperty,\n    });\n\n    this.scalingPolicyArn = resource.ref;\n  }\n\n  /**\n   * Add an adjusment interval to the ScalingAction\n   */\n  public addAdjustment(adjustment: AdjustmentTier) {\n    if (adjustment.lowerBound === undefined && adjustment.upperBound === undefined) {\n      throw new Error('At least one of lowerBound or upperBound is required');\n    }\n    this.adjustments.push({\n      metricIntervalLowerBound: adjustment.lowerBound,\n      metricIntervalUpperBound: adjustment.upperBound,\n      scalingAdjustment: adjustment.adjustment,\n    });\n  }\n}\n\n/**\n * How adjustment numbers are interpreted\n */\nexport enum AdjustmentType {\n  /**\n   * Add the adjustment number to the current capacity.\n   *\n   * A positive number increases capacity, a negative number decreases capacity.\n   */\n  CHANGE_IN_CAPACITY = 'ChangeInCapacity',\n\n  /**\n   * Add this percentage of the current capacity to itself.\n   *\n   * The number must be between -100 and 100; a positive number increases\n   * capacity and a negative number decreases it.\n   */\n  PERCENT_CHANGE_IN_CAPACITY = 'PercentChangeInCapacity',\n\n  /**\n   * Make the capacity equal to the exact number given.\n   */\n  EXACT_CAPACITY = 'ExactCapacity',\n}\n\n/**\n * How the scaling metric is going to be aggregated\n */\nexport enum MetricAggregationType {\n  /**\n   * Average\n   */\n  AVERAGE = 'Average',\n\n  /**\n   * Minimum\n   */\n  MINIMUM = 'Minimum',\n\n  /**\n   * Maximum\n   */\n  MAXIMUM = 'Maximum'\n}\n\n/**\n * An adjustment\n */\nexport interface AdjustmentTier {\n  /**\n   * What number to adjust the capacity with\n   *\n   * The number is interpeted as an added capacity, a new fixed capacity or an\n   * added percentage depending on the AdjustmentType value of the\n   * StepScalingPolicy.\n   *\n   * Can be positive or negative.\n   */\n  readonly adjustment: number;\n\n  /**\n   * Lower bound where this scaling tier applies.\n   *\n   * The scaling tier applies if the difference between the metric\n   * value and its alarm threshold is higher than this value.\n   *\n   * @default -Infinity if this is the first tier, otherwise the upperBound of the previous tier\n   */\n  readonly lowerBound?: number;\n\n  /**\n   * Upper bound where this scaling tier applies\n   *\n   * The scaling tier applies if the difference between the metric\n   * value and its alarm threshold is lower than this value.\n   *\n   * @default +Infinity\n   */\n  readonly upperBound?: number;\n}\n"],
  "mappings": "6QAAA,IAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EACA,mCAAA,QAAA,oCAAA,EAmEA,MAAa,yBAA0B,cAAA,SAAS,CAQ9C,YAAY,MAAkB,GAAY,MAA6B,CACrE,MAAM,MAAO,EAAE,EAHA,KAAA,YAAc,GAAI,oGAQjC,KAAM,UAAW,GAAI,oCAAA,iBAAiB,KAAM,WAAY,CACtD,WAAY,MAAM,YAAc,IAAI,MAAM,SAAS,IAAI,EACvD,WAAY,cACZ,gBAAiB,MAAM,cAAc,iBACrC,+BAAgC,CAC9B,eAAgB,MAAM,eACtB,SAAU,MAAM,UAAY,MAAM,SAAS,UAAS,EACpD,uBAAwB,MAAM,uBAC9B,sBAAuB,MAAM,sBAC7B,gBAAiB,IAAI,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,WAAW,CAAE,GAEpE,EAED,KAAK,iBAAmB,SAAS,IAM5B,cAAc,WAA0B,CAC7C,6FAAI,WAAW,aAAe,QAAa,WAAW,aAAe,OACnE,KAAM,IAAI,OAAM,sDAAsD,EAExE,KAAK,YAAY,KAAK,CACpB,yBAA0B,WAAW,WACrC,yBAA0B,WAAW,WACrC,kBAAmB,WAAW,WAC/B,GAzCL,QAAA,kBAAA,gJAgDA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAMxB,gBAAA,mBAAA,mBAQA,gBAAA,2BAAA,0BAKA,gBAAA,eAAA,eACF,GApBY,eAAA,QAAA,gBAAA,SAAA,eAAc,CAAA,EAAA,EAyB1B,GAAY,uBAAZ,AAAA,UAAY,uBAAqB,CAI/B,uBAAA,QAAA,UAKA,uBAAA,QAAA,UAKA,uBAAA,QAAA,SACF,GAfY,sBAAA,QAAA,uBAAA,SAAA,sBAAqB,CAAA,EAAA",
  "names": []
}
