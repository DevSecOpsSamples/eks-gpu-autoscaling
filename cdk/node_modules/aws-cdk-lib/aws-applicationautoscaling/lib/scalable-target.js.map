{
  "version": 3,
  "sources": ["scalable-target.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { IResource, Lazy, Resource, withResolved } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnScalableTarget } from './applicationautoscaling.generated';\nimport { Schedule } from './schedule';\nimport { BasicStepScalingPolicyProps, StepScalingPolicy } from './step-scaling-policy';\nimport { BasicTargetTrackingScalingPolicyProps, TargetTrackingScalingPolicy } from './target-tracking-scaling-policy';\n\nexport interface IScalableTarget extends IResource {\n  /**\n   * @attribute\n   */\n  readonly scalableTargetId: string;\n}\n\n/**\n * Properties for a scalable target\n */\nexport interface ScalableTargetProps {\n  /**\n   * The minimum value that Application Auto Scaling can use to scale a target during a scaling activity.\n   */\n  readonly minCapacity: number;\n\n  /**\n   * The maximum value that Application Auto Scaling can use to scale a target during a scaling activity.\n   */\n  readonly maxCapacity: number;\n\n  /**\n   * Role that allows Application Auto Scaling to modify your scalable target.\n   *\n   * @default A role is automatically created\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * The resource identifier to associate with this scalable target.\n   *\n   * This string consists of the resource type and unique identifier.\n   *\n   * Example value: `service/ecsStack-MyECSCluster-AB12CDE3F4GH/ecsStack-MyECSService-AB12CDE3F4GH`\n   *\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\n   */\n  readonly resourceId: string;\n\n  /**\n   * The scalable dimension that's associated with the scalable target.\n   *\n   * Specify the service namespace, resource type, and scaling property.\n   *\n   * Example value: `ecs:service:DesiredCount`\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_ScalingPolicy.html\n   */\n  readonly scalableDimension: string;\n\n  /**\n   * The namespace of the AWS service that provides the resource or\n   * custom-resource for a resource provided by your own application or\n   * service.\n   *\n   * For valid AWS service namespace values, see the RegisterScalableTarget\n   * action in the Application Auto Scaling API Reference.\n   *\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_RegisterScalableTarget.html\n   */\n  readonly serviceNamespace: ServiceNamespace;\n}\n\n/**\n * Define a scalable target\n */\nexport class ScalableTarget extends Resource implements IScalableTarget {\n\n  public static fromScalableTargetId(scope: Construct, id: string, scalableTargetId: string): IScalableTarget {\n    class Import extends Resource implements IScalableTarget {\n      public readonly scalableTargetId = scalableTargetId;\n    }\n    return new Import(scope, id);\n  }\n\n  /**\n   * ID of the Scalable Target\n   *\n   * Example value: `service/ecsStack-MyECSCluster-AB12CDE3F4GH/ecsStack-MyECSService-AB12CDE3F4GH|ecs:service:DesiredCount|ecs`\n   *\n   * @attribute\n   */\n  public readonly scalableTargetId: string;\n\n  /**\n   * The role used to give AutoScaling permissions to your resource\n   */\n  public readonly role: iam.IRole;\n\n  private readonly actions = new Array<CfnScalableTarget.ScheduledActionProperty>();\n\n  constructor(scope: Construct, id: string, props: ScalableTargetProps) {\n    super(scope, id);\n\n    withResolved(props.maxCapacity, max => {\n      if (max < 0) {\n        throw new RangeError(`maxCapacity cannot be negative, got: ${props.maxCapacity}`);\n      }\n    });\n\n    withResolved(props.minCapacity, min => {\n      if (min < 0) {\n        throw new RangeError(`minCapacity cannot be negative, got: ${props.minCapacity}`);\n      }\n    });\n\n    withResolved(props.minCapacity, props.maxCapacity, (min, max) => {\n      if (max < min) {\n        throw new RangeError(`minCapacity (${props.minCapacity}) should be lower than maxCapacity (${props.maxCapacity})`);\n      }\n    });\n\n    this.role = props.role || new iam.Role(this, 'Role', {\n      assumedBy: new iam.ServicePrincipal('application-autoscaling.amazonaws.com'),\n    });\n\n    const resource = new CfnScalableTarget(this, 'Resource', {\n      maxCapacity: props.maxCapacity,\n      minCapacity: props.minCapacity,\n      resourceId: props.resourceId,\n      roleArn: this.role.roleArn,\n      scalableDimension: props.scalableDimension,\n      scheduledActions: Lazy.any({ produce: () => this.actions }, { omitEmptyArray: true }),\n      serviceNamespace: props.serviceNamespace,\n    });\n\n    this.scalableTargetId = resource.ref;\n  }\n\n  /**\n   * Add a policy statement to the role's policy\n   */\n  public addToRolePolicy(statement: iam.PolicyStatement) {\n    this.role.addToPrincipalPolicy(statement);\n  }\n\n  /**\n   * Scale out or in based on time\n   */\n  public scaleOnSchedule(id: string, action: ScalingSchedule) {\n    if (action.minCapacity === undefined && action.maxCapacity === undefined) {\n      throw new Error(`You must supply at least one of minCapacity or maxCapacity, got ${JSON.stringify(action)}`);\n    }\n\n    // add a warning on synth when minute is not defined in a cron schedule\n    action.schedule._bind(this);\n\n    this.actions.push({\n      scheduledActionName: id,\n      schedule: action.schedule.expressionString,\n      startTime: action.startTime,\n      endTime: action.endTime,\n      scalableTargetAction: {\n        maxCapacity: action.maxCapacity,\n        minCapacity: action.minCapacity,\n      },\n    });\n  }\n\n  /**\n   * Scale out or in, in response to a metric\n   */\n  public scaleOnMetric(id: string, props: BasicStepScalingPolicyProps) {\n    return new StepScalingPolicy(this, id, { ...props, scalingTarget: this });\n  }\n\n  /**\n   * Scale out or in in order to keep a metric around a target value\n   */\n  public scaleToTrackMetric(id: string, props: BasicTargetTrackingScalingPolicyProps) {\n    return new TargetTrackingScalingPolicy(this, id, { ...props, scalingTarget: this });\n  }\n}\n\n/**\n * A scheduled scaling action\n */\nexport interface ScalingSchedule {\n  /**\n   * When to perform this action.\n   */\n  readonly schedule: Schedule;\n\n  /**\n   * When this scheduled action becomes active.\n   *\n   * @default The rule is activate immediately\n   */\n  readonly startTime?: Date\n\n  /**\n   * When this scheduled action expires.\n   *\n   * @default The rule never expires.\n   */\n  readonly endTime?: Date;\n\n  /**\n   * The new minimum capacity.\n   *\n   * During the scheduled time, if the current capacity is below the minimum\n   * capacity, Application Auto Scaling scales out to the minimum capacity.\n   *\n   * At least one of maxCapacity and minCapacity must be supplied.\n   *\n   * @default No new minimum capacity\n   */\n  readonly minCapacity?: number;\n\n  /**\n   * The new maximum capacity.\n   *\n   * During the scheduled time, the current capacity is above the maximum\n   * capacity, Application Auto Scaling scales in to the maximum capacity.\n   *\n   * At least one of maxCapacity and minCapacity must be supplied.\n   *\n   * @default No new maximum capacity\n   */\n  readonly maxCapacity?: number;\n}\n\n/**\n * The service that supports Application AutoScaling\n */\nexport enum ServiceNamespace {\n  /**\n   * Elastic Container Service\n   */\n  ECS = 'ecs',\n\n  /**\n   * Elastic Map Reduce\n   */\n  ELASTIC_MAP_REDUCE = 'elasticmapreduce',\n\n  /**\n   * Elastic Compute Cloud\n   */\n  EC2 = 'ec2',\n\n  /**\n   * App Stream\n   */\n  APPSTREAM = 'appstream',\n\n  /**\n   * Dynamo DB\n   */\n  DYNAMODB = 'dynamodb',\n\n  /**\n   * Relational Database Service\n   */\n  RDS = 'rds',\n\n  /**\n   * SageMaker\n   */\n  SAGEMAKER = 'sagemaker',\n\n  /**\n   * Custom Resource\n   */\n  CUSTOM_RESOURCE = 'custom-resource',\n\n  /**\n   * Lambda\n   */\n  LAMBDA = 'lambda',\n\n  /**\n   * Comprehend\n   */\n  COMPREHEND = 'comprehend',\n\n  /**\n   * Kafka\n   */\n  KAFKA = 'kafka',\n\n  /**\n   * ElastiCache\n   */\n  ELASTICACHE = 'elasticache',\n}\n"],
  "mappings": "8OAAA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EAEA,mCAAA,QAAA,oCAAA,EAEA,sBAAA,QAAA,uBAAA,EACA,iCAAA,QAAA,kCAAA,EAmEA,MAAa,sBAAuB,QAAA,QAAQ,CAyB1C,YAAY,MAAkB,GAAY,MAA0B,CAClE,MAAM,MAAO,EAAE,EAHA,KAAA,QAAU,GAAI,iGAK7B,OAAA,aAAa,MAAM,YAAa,KAAM,CACpC,GAAI,IAAM,EACR,KAAM,IAAI,YAAW,wCAAwC,MAAM,aAAa,CAEpF,CAAC,EAED,OAAA,aAAa,MAAM,YAAa,KAAM,CACpC,GAAI,IAAM,EACR,KAAM,IAAI,YAAW,wCAAwC,MAAM,aAAa,CAEpF,CAAC,EAED,OAAA,aAAa,MAAM,YAAa,MAAM,YAAa,CAAC,IAAK,MAAO,CAC9D,GAAI,IAAM,IACR,KAAM,IAAI,YAAW,gBAAgB,MAAM,kDAAkD,MAAM,cAAc,CAErH,CAAC,EAED,KAAK,KAAO,MAAM,MAAQ,GAAI,KAAI,KAAK,KAAM,OAAQ,CACnD,UAAW,GAAI,KAAI,iBAAiB,uCAAuC,EAC5E,EAED,KAAM,UAAW,GAAI,oCAAA,kBAAkB,KAAM,WAAY,CACvD,YAAa,MAAM,YACnB,YAAa,MAAM,YACnB,WAAY,MAAM,WAClB,QAAS,KAAK,KAAK,QACnB,kBAAmB,MAAM,kBACzB,iBAAkB,OAAA,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,OAAO,EAAI,CAAE,eAAgB,EAAI,CAAE,EACpF,iBAAkB,MAAM,iBACzB,EAED,KAAK,iBAAmB,SAAS,UA1DrB,sBAAqB,MAAkB,GAAY,iBAAwB,CACvF,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,iBAAmB,gBACrC,EACA,MAAO,IAAI,QAAO,MAAO,EAAE,EA4DtB,gBAAgB,UAA8B,wEACnD,KAAK,KAAK,qBAAqB,SAAS,EAMnC,gBAAgB,GAAY,OAAuB,CACxD,0FAAI,OAAO,cAAgB,QAAa,OAAO,cAAgB,OAC7D,KAAM,IAAI,OAAM,mEAAmE,KAAK,UAAU,MAAM,GAAG,EAI7G,OAAO,SAAS,MAAM,IAAI,EAE1B,KAAK,QAAQ,KAAK,CAChB,oBAAqB,GACrB,SAAU,OAAO,SAAS,iBAC1B,UAAW,OAAO,UAClB,QAAS,OAAO,QAChB,qBAAsB,CACpB,YAAa,OAAO,YACpB,YAAa,OAAO,aAEvB,EAMI,cAAc,GAAY,MAAkC,0GAC1D,GAAI,uBAAA,kBAAkB,KAAM,GAAI,IAAK,MAAO,cAAe,IAAI,CAAE,EAMnE,mBAAmB,GAAY,MAA4C,oHACzE,GAAI,kCAAA,4BAA4B,KAAM,GAAI,IAAK,MAAO,cAAe,IAAI,CAAE,GAxGtF,QAAA,eAAA,uIA+JA,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAI1B,kBAAA,IAAA,MAKA,kBAAA,mBAAA,mBAKA,kBAAA,IAAA,MAKA,kBAAA,UAAA,YAKA,kBAAA,SAAA,WAKA,kBAAA,IAAA,MAKA,kBAAA,UAAA,YAKA,kBAAA,gBAAA,kBAKA,kBAAA,OAAA,SAKA,kBAAA,WAAA,aAKA,kBAAA,MAAA,QAKA,kBAAA,YAAA,aACF,GA5DY,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,CAAA,EAAA",
  "names": []
}
