{
  "version": 3,
  "sources": ["target-tracking-scaling-policy.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnScalingPolicy } from './applicationautoscaling.generated';\nimport { IScalableTarget } from './scalable-target';\n\n/**\n * Base interface for target tracking props\n *\n * Contains the attributes that are common to target tracking policies,\n * except the ones relating to the metric and to the scalable target.\n *\n * This interface is reused by more specific target tracking props objects\n * in other services.\n */\nexport interface BaseTargetTrackingProps {\n  /**\n   * A name for the scaling policy\n   *\n   * @default - Automatically generated name.\n   */\n  readonly policyName?: string;\n\n  /**\n   * Indicates whether scale in by the target tracking policy is disabled.\n   *\n   * If the value is true, scale in is disabled and the target tracking policy\n   * won't remove capacity from the scalable resource. Otherwise, scale in is\n   * enabled and the target tracking policy can remove capacity from the\n   * scalable resource.\n   *\n   * @default false\n   */\n  readonly disableScaleIn?: boolean;\n\n  /**\n   * Period after a scale in activity completes before another scale in activity can start.\n   *\n   * @default Duration.seconds(300) for the following scalable targets: ECS services,\n   * Spot Fleet requests, EMR clusters, AppStream 2.0 fleets, Aurora DB clusters,\n   * Amazon SageMaker endpoint variants, Custom resources. For all other scalable\n   * targets, the default value is Duration.seconds(0): DynamoDB tables, DynamoDB\n   * global secondary indexes, Amazon Comprehend document classification endpoints,\n   * Lambda provisioned concurrency\n   */\n  readonly scaleInCooldown?: cdk.Duration;\n\n  /**\n   * Period after a scale out activity completes before another scale out activity can start.\n   *\n   * @default Duration.seconds(300) for the following scalable targets: ECS services,\n   * Spot Fleet requests, EMR clusters, AppStream 2.0 fleets, Aurora DB clusters,\n   * Amazon SageMaker endpoint variants, Custom resources. For all other scalable\n   * targets, the default value is Duration.seconds(0): DynamoDB tables, DynamoDB\n   * global secondary indexes, Amazon Comprehend document classification endpoints,\n   * Lambda provisioned concurrency\n   */\n  readonly scaleOutCooldown?: cdk.Duration;\n}\n\n/**\n * Properties for a Target Tracking policy that include the metric but exclude the target\n */\nexport interface BasicTargetTrackingScalingPolicyProps extends BaseTargetTrackingProps {\n  /**\n   * The target value for the metric.\n   */\n  readonly targetValue: number;\n\n  /**\n   * A predefined metric for application autoscaling\n   *\n   * The metric must track utilization. Scaling out will happen if the metric is higher than\n   * the target value, scaling in will happen in the metric is lower than the target value.\n   *\n   * Exactly one of customMetric or predefinedMetric must be specified.\n   *\n   * @default - No predefined metrics.\n   */\n  readonly predefinedMetric?: PredefinedMetric;\n\n  /**\n   * Identify the resource associated with the metric type.\n   *\n   * Only used for predefined metric ALBRequestCountPerTarget.\n   *\n   * Example value: `app/<load-balancer-name>/<load-balancer-id>/targetgroup/<target-group-name>/<target-group-id>`\n   *\n   * @default - No resource label.\n   */\n  readonly resourceLabel?: string;\n\n  /**\n   * A custom metric for application autoscaling\n   *\n   * The metric must track utilization. Scaling out will happen if the metric is higher than\n   * the target value, scaling in will happen in the metric is lower than the target value.\n   *\n   * Exactly one of customMetric or predefinedMetric must be specified.\n   *\n   * @default - No custom metric.\n   */\n  readonly customMetric?: cloudwatch.IMetric;\n}\n\n/**\n * Properties for a concrete TargetTrackingPolicy\n *\n * Adds the scalingTarget.\n */\nexport interface TargetTrackingScalingPolicyProps extends BasicTargetTrackingScalingPolicyProps {\n  /*\n   * The scalable target\n   */\n  readonly scalingTarget: IScalableTarget;\n}\n\nexport class TargetTrackingScalingPolicy extends Construct {\n  /**\n   * ARN of the scaling policy\n   */\n  public readonly scalingPolicyArn: string;\n\n  constructor(scope: Construct, id: string, props: TargetTrackingScalingPolicyProps) {\n    if ((props.customMetric === undefined) === (props.predefinedMetric === undefined)) {\n      throw new Error('Exactly one of \\'customMetric\\' or \\'predefinedMetric\\' must be specified.');\n    }\n\n    if (props.customMetric && !props.customMetric.toMetricConfig().metricStat) {\n      throw new Error('Only direct metrics are supported for Target Tracking. Use Step Scaling or supply a Metric object.');\n    }\n\n    super(scope, id);\n\n    // replace dummy value in DYNAMODB_WRITE_CAPACITY_UTILIZATION due to a jsii bug (https://github.com/aws/jsii/issues/2782)\n    const predefinedMetric = props.predefinedMetric === PredefinedMetric.DYNAMODB_WRITE_CAPACITY_UTILIZATION ?\n      PredefinedMetric.DYANMODB_WRITE_CAPACITY_UTILIZATION :\n      props.predefinedMetric;\n\n    const resource = new CfnScalingPolicy(this, 'Resource', {\n      policyName: props.policyName || cdk.Names.uniqueId(this),\n      policyType: 'TargetTrackingScaling',\n      scalingTargetId: props.scalingTarget.scalableTargetId,\n      targetTrackingScalingPolicyConfiguration: {\n        customizedMetricSpecification: renderCustomMetric(props.customMetric),\n        disableScaleIn: props.disableScaleIn,\n        predefinedMetricSpecification: predefinedMetric !== undefined ? {\n          predefinedMetricType: predefinedMetric,\n          resourceLabel: props.resourceLabel,\n        } : undefined,\n        scaleInCooldown: props.scaleInCooldown && props.scaleInCooldown.toSeconds(),\n        scaleOutCooldown: props.scaleOutCooldown && props.scaleOutCooldown.toSeconds(),\n        targetValue: props.targetValue,\n      },\n    });\n\n    this.scalingPolicyArn = resource.ref;\n  }\n}\n\nfunction renderCustomMetric(metric?: cloudwatch.IMetric): CfnScalingPolicy.CustomizedMetricSpecificationProperty | undefined {\n  if (!metric) { return undefined; }\n  const c = metric.toMetricConfig().metricStat!;\n\n  if (c.statistic.startsWith('p')) {\n    throw new Error(`Cannot use statistic '${c.statistic}' for Target Tracking: only 'Average', 'Minimum', 'Maximum', 'SampleCount', and 'Sum' are supported.`);\n  }\n\n  return {\n    dimensions: c.dimensions,\n    metricName: c.metricName,\n    namespace: c.namespace,\n    statistic: c.statistic,\n    unit: c.unitFilter,\n  };\n}\n\n/**\n * One of the predefined autoscaling metrics\n */\nexport enum PredefinedMetric {\n  /**\n   * Average percentage of instances in an AppStream fleet that are being used.\n   */\n  APPSTREAM_AVERAGE_CAPACITY_UTILIZATION = 'AppStreamAverageCapacityUtilization',\n  /**\n   * Percentage of provisioned read capacity units utilized by a Keyspaces table.\n   */\n  CASSANDRA_READ_CAPACITY_UTILIZATION = 'CassandraReadCapacityUtilization',\n  /**\n   * Percentage of provisioned write capacity units utilized by a Keyspaces table.\n   */\n  CASSANDRA_WRITE_CAPACITY_UTILIZATION = 'CassandraWriteCapacityUtilization',\n  /**\n   * Percentage of provisioned inference units utilized by a Comprehend endpoint.\n   */\n  COMPREHEND_INFERENCE_UTILIZATION = 'ComprehendInferenceUtilization',\n  /**\n   * Average CPU Utilization of read replica instances in a Neptune DB cluster.\n   */\n  NEPTURE_READER_AVERAGE_CPU_UTILIZATION = 'NeptuneReaderAverageCPUUtilization',\n  /**\n   * Percentage of provisioned read capacity units consumed by a DynamoDB table.\n   */\n  DYNAMODB_READ_CAPACITY_UTILIZATION = 'DynamoDBReadCapacityUtilization',\n  /**\n   * Percentage of provisioned write capacity units consumed by a DynamoDB table.\n   *\n   * Suffix `dummy` is necessary due to jsii bug (https://github.com/aws/jsii/issues/2782).\n   * Duplicate values will be dropped, so this suffix is added as a workaround.\n   * The value will be replaced when this enum is used.\n   *\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  DYNAMODB_WRITE_CAPACITY_UTILIZATION = 'DynamoDBWriteCapacityUtilization-dummy',\n  /**\n   * DYANMODB_WRITE_CAPACITY_UTILIZATION\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   * @deprecated use `PredefinedMetric.DYNAMODB_WRITE_CAPACITY_UTILIZATION`\n   */\n  DYANMODB_WRITE_CAPACITY_UTILIZATION = 'DynamoDBWriteCapacityUtilization',\n  /**\n   * ALB_REQUEST_COUNT_PER_TARGET\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  ALB_REQUEST_COUNT_PER_TARGET = 'ALBRequestCountPerTarget',\n  /**\n   * RDS_READER_AVERAGE_CPU_UTILIZATION\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  RDS_READER_AVERAGE_CPU_UTILIZATION = 'RDSReaderAverageCPUUtilization',\n  /**\n   * RDS_READER_AVERAGE_DATABASE_CONNECTIONS\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  RDS_READER_AVERAGE_DATABASE_CONNECTIONS = 'RDSReaderAverageDatabaseConnections',\n  /**\n   * EC2_SPOT_FLEET_REQUEST_AVERAGE_CPU_UTILIZATION\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  EC2_SPOT_FLEET_REQUEST_AVERAGE_CPU_UTILIZATION = 'EC2SpotFleetRequestAverageCPUUtilization',\n  /**\n   * EC2_SPOT_FLEET_REQUEST_AVERAGE_NETWORK_IN\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  EC2_SPOT_FLEET_REQUEST_AVERAGE_NETWORK_IN = 'EC2SpotFleetRequestAverageNetworkIn',\n  /**\n   * EC2_SPOT_FLEET_REQUEST_AVERAGE_NETWORK_OUT\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  EC2_SPOT_FLEET_REQUEST_AVERAGE_NETWORK_OUT = 'EC2SpotFleetRequestAverageNetworkOut',\n  /**\n   * SAGEMAKER_VARIANT_INVOCATIONS_PER_INSTANCE\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  SAGEMAKER_VARIANT_INVOCATIONS_PER_INSTANCE = 'SageMakerVariantInvocationsPerInstance',\n  /**\n   * ECS_SERVICE_AVERAGE_CPU_UTILIZATION\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  ECS_SERVICE_AVERAGE_CPU_UTILIZATION = 'ECSServiceAverageCPUUtilization',\n  /**\n   * ECS_SERVICE_AVERAGE_MEMORY_UTILIZATION\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  ECS_SERVICE_AVERAGE_MEMORY_UTILIZATION = 'ECSServiceAverageMemoryUtilization',\n  /**\n   * LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n   * @see https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics.html#monitoring-metrics-concurrency\n   */\n  LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION = 'LambdaProvisionedConcurrencyUtilization',\n  /**\n   * KAFKA_BROKER_STORAGE_UTILIZATION\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  KAFKA_BROKER_STORAGE_UTILIZATION = 'KafkaBrokerStorageUtilization',\n  /**\n   * ELASTIC_CACHE_PRIMARY_ENGINE_CPU_UTILIZATION\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  ELASTICACHE_PRIMARY_ENGINE_CPU_UTILIZATION = 'ElastiCachePrimaryEngineCPUUtilization',\n  /**\n   * ELASTIC_CACHE_REPLICA_ENGINE_CPU_UTILIZATION\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  ELASTICACHE_REPLICA_ENGINE_CPU_UTILIZATION = 'ElastiCacheReplicaEngineCPUUtilization',\n  /**\n   * ELASTIC_CACHE_REPLICA_ENGINE_CPU_UTILIZATION\n   * @see https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PredefinedMetricSpecification.html\n   */\n  ELASTICACHE_DATABASE_MEMORY_USAGE_COUNTED_FOR_EVICT_PERCENTAGE = 'ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage',\n}\n"],
  "mappings": "2PACA,IAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EACA,mCAAA,QAAA,oCAAA,EAkHA,MAAa,mCAAoC,cAAA,SAAS,CAMxD,YAAY,MAAkB,GAAY,MAAuC,CAC/E,0GAAK,MAAM,eAAiB,QAAgB,OAAM,mBAAqB,QACrE,KAAM,IAAI,OAAM,wEAA4E,EAG9F,GAAI,MAAM,cAAgB,CAAC,MAAM,aAAa,eAAc,EAAG,WAC7D,KAAM,IAAI,OAAM,oGAAoG,EAGtH,MAAM,MAAO,EAAE,EAGf,KAAM,kBAAmB,MAAM,mBAAqB,iBAAiB,oCACnE,iBAAiB,oCACjB,MAAM,iBAEF,SAAW,GAAI,oCAAA,iBAAiB,KAAM,WAAY,CACtD,WAAY,MAAM,YAAc,IAAI,MAAM,SAAS,IAAI,EACvD,WAAY,wBACZ,gBAAiB,MAAM,cAAc,iBACrC,yCAA0C,CACxC,8BAA+B,mBAAmB,MAAM,YAAY,EACpE,eAAgB,MAAM,eACtB,8BAA+B,mBAAqB,OAAY,CAC9D,qBAAsB,iBACtB,cAAe,MAAM,eACnB,OACJ,gBAAiB,MAAM,iBAAmB,MAAM,gBAAgB,UAAS,EACzE,iBAAkB,MAAM,kBAAoB,MAAM,iBAAiB,UAAS,EAC5E,YAAa,MAAM,aAEtB,EAED,KAAK,iBAAmB,SAAS,KAvCrC,QAAA,4BAAA,8KA2CA,4BAA4B,OAA2B,CACrD,GAAI,CAAC,OAAU,OACf,KAAM,GAAI,OAAO,eAAc,EAAG,WAElC,GAAI,EAAE,UAAU,WAAW,GAAG,EAC5B,KAAM,IAAI,OAAM,yBAAyB,EAAE,+GAA+G,EAG5J,MAAO,CACL,WAAY,EAAE,WACd,WAAY,EAAE,WACd,UAAW,EAAE,UACb,UAAW,EAAE,UACb,KAAM,EAAE,WAEZ,CAKA,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAI1B,kBAAA,uCAAA,sCAIA,kBAAA,oCAAA,mCAIA,kBAAA,qCAAA,oCAIA,kBAAA,iCAAA,iCAIA,kBAAA,uCAAA,qCAIA,kBAAA,mCAAA,kCAUA,kBAAA,oCAAA,yCAMA,kBAAA,oCAAA,mCAKA,kBAAA,6BAAA,2BAKA,kBAAA,mCAAA,iCAKA,kBAAA,wCAAA,sCAKA,kBAAA,+CAAA,2CAKA,kBAAA,0CAAA,sCAKA,kBAAA,2CAAA,uCAKA,kBAAA,2CAAA,yCAKA,kBAAA,oCAAA,kCAKA,kBAAA,uCAAA,qCAKA,kBAAA,2CAAA,0CAKA,kBAAA,iCAAA,gCAKA,kBAAA,2CAAA,yCAKA,kBAAA,2CAAA,yCAKA,kBAAA,+DAAA,yDACF,GA/GY,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,CAAA,EAAA",
  "names": []
}
