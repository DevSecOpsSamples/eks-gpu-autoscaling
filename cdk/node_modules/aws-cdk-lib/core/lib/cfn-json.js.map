{
  "version": 3,
  "sources": ["cfn-json.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CustomResource } from './custom-resource';\nimport { CfnUtilsProvider } from './private/cfn-utils-provider';\nimport { CfnUtilsResourceType } from './private/cfn-utils-provider/consts';\nimport { Reference } from './reference';\nimport { IResolvable, IResolveContext } from './resolvable';\nimport { Stack } from './stack';\nimport { captureStackTrace } from './stack-trace';\n\nexport interface CfnJsonProps {\n  /**\n   * The value to resolve. Can be any JavaScript object, including tokens and\n   * references in keys or values.\n   */\n  readonly value: any;\n}\n\n/**\n * Captures a synthesis-time JSON object a CloudFormation reference which\n * resolves during deployment to the resolved values of the JSON object.\n *\n * The main use case for this is to overcome a limitation in CloudFormation that\n * does not allow using intrinsic functions as dictionary keys (because\n * dictionary keys in JSON must be strings). Specifically this is common in IAM\n * conditions such as `StringEquals: { lhs: \"rhs\" }` where you want \"lhs\" to be\n * a reference.\n *\n * This object is resolvable, so it can be used as a value.\n *\n * This construct is backed by a custom resource.\n */\nexport class CfnJson extends Construct implements IResolvable {\n  public readonly creationStack: string[] = [];\n\n  /**\n   * An Fn::GetAtt to the JSON object passed through `value` and resolved during\n   * synthesis.\n   *\n   * Normally there is no need to use this property since `CfnJson` is an\n   * IResolvable, so it can be simply used as a value.\n   */\n  public readonly value: Reference;\n\n  private readonly jsonString: string;\n\n  constructor(scope: Construct, id: string, props: CfnJsonProps) {\n    super(scope, id);\n\n    this.creationStack = captureStackTrace();\n\n    // stringify the JSON object in a token-aware way.\n    this.jsonString = Stack.of(this).toJsonString(props.value);\n\n    const resource = new CustomResource(this, 'Resource', {\n      serviceToken: CfnUtilsProvider.getOrCreate(this),\n      resourceType: CfnUtilsResourceType.CFN_JSON,\n      properties: {\n        Value: this.jsonString,\n      },\n    });\n\n    this.value = resource.getAtt('Value');\n  }\n\n  /**\n   * This is required in case someone JSON.stringifys an object which refrences\n   * this object. Otherwise, we'll get a cyclic JSON reference.\n   */\n  public toJSON() {\n    return this.jsonString;\n  }\n\n  public resolve(_: IResolveContext): any {\n    return this.value;\n  }\n}\n"],
  "mappings": "8MAAA,aAAA,QAAA,YAAA,EACA,kBAAA,QAAA,mBAAA,EACA,qBAAA,QAAA,8BAAA,EAIA,QAAA,QAAA,SAAA,EACA,cAAA,QAAA,eAAA,EAwBA,MAAa,eAAgB,cAAA,SAAS,CAcpC,YAAY,MAAkB,GAAY,MAAmB,CAC3D,MAAM,MAAO,EAAE,EAdD,KAAA,cAA0B,CAAA,0DAgBxC,KAAK,cAAgB,cAAA,kBAAiB,EAGtC,KAAK,WAAa,QAAA,MAAM,GAAG,IAAI,EAAE,aAAa,MAAM,KAAK,EAEzD,KAAM,UAAW,GAAI,mBAAA,eAAe,KAAM,WAAY,CACpD,aAAc,qBAAA,iBAAiB,YAAY,IAAI,EAC/C,aAAY,wBACZ,WAAY,CACV,MAAO,KAAK,YAEf,EAED,KAAK,MAAQ,SAAS,OAAO,OAAO,EAO/B,QAAM,CACX,MAAO,MAAK,WAGP,QAAQ,EAAkB,+DACxB,KAAK,OA1ChB,QAAA,QAAA",
  "names": []
}
