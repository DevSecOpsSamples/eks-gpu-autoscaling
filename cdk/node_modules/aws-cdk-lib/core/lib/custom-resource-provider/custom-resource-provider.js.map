{
  "version": 3,
  "sources": ["custom-resource-provider.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { AssetStaging } from '../asset-staging';\nimport { FileAssetPackaging } from '../assets';\nimport { CfnResource } from '../cfn-resource';\nimport { Duration } from '../duration';\nimport { Size } from '../size';\nimport { Stack } from '../stack';\nimport { Token } from '../token';\n\nconst ENTRYPOINT_FILENAME = '__entrypoint__';\nconst ENTRYPOINT_NODEJS_SOURCE = path.join(__dirname, 'nodejs-entrypoint.js');\n\n/**\n * Initialization properties for `CustomResourceProvider`.\n *\n */\nexport interface CustomResourceProviderProps {\n  /**\n   * A local file system directory with the provider's code. The code will be\n   * bundled into a zip asset and wired to the provider's AWS Lambda function.\n   */\n  readonly codeDirectory: string;\n\n  /**\n   * The AWS Lambda runtime and version to use for the provider.\n   */\n  readonly runtime: CustomResourceProviderRuntime;\n\n  /**\n   * A set of IAM policy statements to include in the inline policy of the\n   * provider's lambda function.\n   *\n   * **Please note**: these are direct IAM JSON policy blobs, *not* `iam.PolicyStatement`\n   * objects like you will see in the rest of the CDK.\n   *\n   * @default - no additional inline policy\n   *\n   * @example\n   * const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n   *   codeDirectory: `${__dirname}/my-handler`,\n   *   runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n   *   policyStatements: [\n   *     {\n   *       Effect: 'Allow',\n   *       Action: 's3:PutObject*',\n   *       Resource: '*',\n   *     }\n   *   ],\n   * });\n   */\n  readonly policyStatements?: any[];\n\n  /**\n   * AWS Lambda timeout for the provider.\n   *\n   * @default Duration.minutes(15)\n   */\n  readonly timeout?: Duration;\n\n  /**\n   * The amount of memory that your function has access to. Increasing the\n   * function's memory also increases its CPU allocation.\n   *\n   * @default Size.mebibytes(128)\n   */\n  readonly memorySize?: Size;\n\n  /**\n   * Key-value pairs that are passed to Lambda as Environment\n   *\n   * @default - No environment variables.\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * A description of the function.\n   *\n   * @default - No description.\n   */\n  readonly description?: string;\n}\n\n/**\n * The lambda runtime to use for the resource provider. This also indicates\n * which language is used for the handler.\n */\nexport enum CustomResourceProviderRuntime {\n  /**\n   * Node.js 12.x\n   */\n  NODEJS_12_X = 'nodejs12.x',\n\n  /**\n   * Node.js 12.x\n   *\n   * @deprecated Use {@link NODEJS_12_X}\n   */\n  NODEJS_12 = 'nodejs12.x',\n\n  /**\n   * Node.js 14.x\n   */\n  NODEJS_14_X = 'nodejs14.x',\n}\n\n/**\n * An AWS-Lambda backed custom resource provider, for CDK Construct Library constructs\n *\n * This is a provider for `CustomResource` constructs, backed by an AWS Lambda\n * Function. It only supports NodeJS runtimes.\n *\n * **This is not a generic custom resource provider class**. It is specifically\n * intended to be used only by constructs in the AWS CDK Construct Library, and\n * only exists here because of reverse dependency issues (for example, it cannot\n * use `iam.PolicyStatement` objects, since the `iam` library already depends on\n * the CDK `core` library and we cannot have cyclic dependencies).\n *\n * If you are not writing constructs for the AWS Construct Library, you should\n * use the `Provider` class in the `custom-resources` module instead, which has\n * a better API and supports all Lambda runtimes, not just Node.\n *\n * N.B.: When you are writing Custom Resource Providers, there are a number of\n * lifecycle events you have to pay attention to. These are documented in the\n * README of the `custom-resources` module. Be sure to give the documentation\n * in that module a read, regardless of whether you end up using the Provider\n * class in there or this one.\n */\nexport class CustomResourceProvider extends Construct {\n  /**\n   * Returns a stack-level singleton ARN (service token) for the custom resource\n   * provider.\n   *\n   * @param scope Construct scope\n   * @param uniqueid A globally unique id that will be used for the stack-level\n   * construct.\n   * @param props Provider properties which will only be applied when the\n   * provider is first created.\n   * @returns the service token of the custom resource provider, which should be\n   * used when defining a `CustomResource`.\n   */\n  public static getOrCreate(scope: Construct, uniqueid: string, props: CustomResourceProviderProps) {\n    return this.getOrCreateProvider(scope, uniqueid, props).serviceToken;\n  }\n\n  /**\n   * Returns a stack-level singleton for the custom resource provider.\n   *\n   * @param scope Construct scope\n   * @param uniqueid A globally unique id that will be used for the stack-level\n   * construct.\n   * @param props Provider properties which will only be applied when the\n   * provider is first created.\n   * @returns the service token of the custom resource provider, which should be\n   * used when defining a `CustomResource`.\n   */\n  public static getOrCreateProvider(scope: Construct, uniqueid: string, props: CustomResourceProviderProps) {\n    const id = `${uniqueid}CustomResourceProvider`;\n    const stack = Stack.of(scope);\n    const provider = stack.node.tryFindChild(id) as CustomResourceProvider\n      ?? new CustomResourceProvider(stack, id, props);\n\n    return provider;\n  }\n\n  /**\n   * The ARN of the provider's AWS Lambda function which should be used as the\n   * `serviceToken` when defining a custom resource.\n   *\n   * @example\n   * declare const myProvider: CustomResourceProvider;\n   *\n   * new CustomResource(this, 'MyCustomResource', {\n   *   serviceToken: myProvider.serviceToken,\n   *   properties: {\n   *     myPropertyOne: 'one',\n   *     myPropertyTwo: 'two',\n   *   },\n   * });\n   */\n  public readonly serviceToken: string;\n\n  /**\n   * The ARN of the provider's AWS Lambda function role.\n   */\n  public readonly roleArn: string;\n\n  protected constructor(scope: Construct, id: string, props: CustomResourceProviderProps) {\n    super(scope, id);\n\n    const stack = Stack.of(scope);\n\n    // copy the entry point to the code directory\n    fs.copyFileSync(ENTRYPOINT_NODEJS_SOURCE, path.join(props.codeDirectory, `${ENTRYPOINT_FILENAME}.js`));\n\n    // verify we have an index file there\n    if (!fs.existsSync(path.join(props.codeDirectory, 'index.js'))) {\n      throw new Error(`cannot find ${props.codeDirectory}/index.js`);\n    }\n\n    const staging = new AssetStaging(this, 'Staging', {\n      sourcePath: props.codeDirectory,\n    });\n\n    const assetFileName = staging.relativeStagedPath(stack);\n\n    const asset = stack.synthesizer.addFileAsset({\n      fileName: assetFileName,\n      sourceHash: staging.assetHash,\n      packaging: FileAssetPackaging.ZIP_DIRECTORY,\n    });\n\n    const policies = !props.policyStatements ? undefined : [\n      {\n        PolicyName: 'Inline',\n        PolicyDocument: {\n          Version: '2012-10-17',\n          Statement: props.policyStatements,\n        },\n      },\n    ];\n\n    const role = new CfnResource(this, 'Role', {\n      type: 'AWS::IAM::Role',\n      properties: {\n        AssumeRolePolicyDocument: {\n          Version: '2012-10-17',\n          Statement: [{ Action: 'sts:AssumeRole', Effect: 'Allow', Principal: { Service: 'lambda.amazonaws.com' } }],\n        },\n        ManagedPolicyArns: [\n          { 'Fn::Sub': 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole' },\n        ],\n        Policies: policies,\n      },\n    });\n    this.roleArn = Token.asString(role.getAtt('Arn'));\n\n    const timeout = props.timeout ?? Duration.minutes(15);\n    const memory = props.memorySize ?? Size.mebibytes(128);\n\n    const handler = new CfnResource(this, 'Handler', {\n      type: 'AWS::Lambda::Function',\n      properties: {\n        Code: {\n          S3Bucket: asset.bucketName,\n          S3Key: asset.objectKey,\n        },\n        Timeout: timeout.toSeconds(),\n        MemorySize: memory.toMebibytes(),\n        Handler: `${ENTRYPOINT_FILENAME}.handler`,\n        Role: role.getAtt('Arn'),\n        Runtime: props.runtime,\n        Environment: this.renderEnvironmentVariables(props.environment),\n        Description: props.description ?? undefined,\n      },\n    });\n\n    handler.addDependsOn(role);\n\n    if (this.node.tryGetContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT)) {\n      handler.addMetadata(cxapi.ASSET_RESOURCE_METADATA_PATH_KEY, assetFileName);\n      handler.addMetadata(cxapi.ASSET_RESOURCE_METADATA_PROPERTY_KEY, 'Code');\n    }\n\n    this.serviceToken = Token.asString(handler.getAtt('Arn'));\n  }\n\n  private renderEnvironmentVariables(env?: { [key: string]: string }) {\n    if (!env || Object.keys(env).length === 0) {\n      return undefined;\n    }\n\n    // Sort environment so the hash of the function used to create\n    // `currentVersion` is not affected by key order (this is how lambda does\n    // it)\n    const variables: { [key: string]: string } = {};\n    const keys = Object.keys(env).sort();\n\n    for (const key of keys) {\n      variables[key] = env[key];\n    }\n\n    return { Variables: variables };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
