{
  "version": 3,
  "sources": ["context-provider.ts"],
  "sourcesContent": ["import * as cxschema from '../../cloud-assembly-schema';\nimport * as cxapi from '../../cx-api';\nimport { Construct, Node } from 'constructs';\nimport { Annotations } from './annotations';\nimport { Stack } from './stack';\nimport { Token } from './token';\n\n/**\n */\nexport interface GetContextKeyOptions {\n  /**\n   * The context provider to query.\n   */\n  readonly provider: string;\n\n  /**\n   * Provider-specific properties.\n   */\n  readonly props?: { [key: string]: any };\n\n  /**\n   * Whether to include the stack's account and region automatically.\n   *\n   * @default true\n   */\n  readonly includeEnvironment?: boolean;\n}\n\n/**\n */\nexport interface GetContextValueOptions extends GetContextKeyOptions {\n  /**\n   * The value to return if the context value was not found and a missing\n   * context is reported. This should be a dummy value that should preferably\n   * fail during deployment since it represents an invalid state.\n   */\n  readonly dummyValue: any;\n}\n\n/**\n */\nexport interface GetContextKeyResult {\n  readonly key: string;\n  readonly props: { [key: string]: any };\n}\n\n/**\n */\nexport interface GetContextValueResult {\n  readonly value?: any;\n}\n\n/**\n * Base class for the model side of context providers\n *\n * Instances of this class communicate with context provider plugins in the 'cdk\n * toolkit' via context variables (input), outputting specialized queries for\n * more context variables (output).\n *\n * ContextProvider needs access to a Construct to hook into the context mechanism.\n *\n */\nexport class ContextProvider {\n  /**\n   * @returns the context key or undefined if a key cannot be rendered (due to tokens used in any of the props)\n   */\n  public static getKey(scope: Construct, options: GetContextKeyOptions): GetContextKeyResult {\n    const stack = Stack.of(scope);\n\n    const props = options.includeEnvironment ?? true\n      ? { account: stack.account, region: stack.region, ...options.props }\n      : (options.props ?? {});\n\n    if (Object.values(props).find(x => Token.isUnresolved(x))) {\n      throw new Error(\n        `Cannot determine scope for context provider ${options.provider}.\\n` +\n        'This usually happens when one or more of the provider props have unresolved tokens');\n    }\n\n    const propStrings = propsToArray(props);\n    return {\n      key: `${options.provider}:${propStrings.join(':')}`,\n      props,\n    };\n  }\n\n  public static getValue(scope: Construct, options: GetContextValueOptions): GetContextValueResult {\n    const stack = Stack.of(scope);\n\n    if (Token.isUnresolved(stack.account) || Token.isUnresolved(stack.region)) {\n      throw new Error(`Cannot retrieve value from context provider ${options.provider} since account/region ` +\n                      'are not specified at the stack level. Configure \"env\" with an account and region when ' +\n                      'you define your stack.' +\n                      'See https://docs.aws.amazon.com/cdk/latest/guide/environments.html for more details.');\n    }\n\n    const { key, props } = this.getKey(scope, options);\n    const value = Node.of(scope).tryGetContext(key);\n    const providerError = extractProviderError(value);\n\n    // if context is missing or an error occurred during context retrieval,\n    // report and return a dummy value.\n    if (value === undefined || providerError !== undefined) {\n      stack.reportMissingContextKey({\n        key,\n        provider: options.provider as cxschema.ContextProvider,\n        props: props as cxschema.ContextQueryProperties,\n      });\n\n      if (providerError !== undefined) {\n        Annotations.of(scope).addError(providerError);\n      }\n\n      return { value: options.dummyValue };\n    }\n\n    return { value };\n  }\n\n  private constructor() { }\n}\n\n/**\n * If the context value represents an error, return the error message\n */\nfunction extractProviderError(value: any): string | undefined {\n  if (typeof value === 'object' && value !== null) {\n    return value[cxapi.PROVIDER_ERROR_KEY];\n  }\n  return undefined;\n}\n\n/**\n * Quote colons in all strings so that we can undo the quoting at a later point\n *\n * We'll use $ as a quoting character, for no particularly good reason other\n * than that \\ is going to lead to quoting hell when the keys are stored in JSON.\n */\nfunction colonQuote(xs: string): string {\n  return xs.replace('$', '$$').replace(':', '$:');\n}\n\nfunction propsToArray(props: {[key: string]: any}, keyPrefix = ''): string[] {\n  const ret: string[] = [];\n\n  for (const key of Object.keys(props)) {\n    // skip undefined values\n    if (props[key] === undefined) {\n      continue;\n    }\n\n    switch (typeof props[key]) {\n      case 'object': {\n        ret.push(...propsToArray(props[key], `${keyPrefix}${key}.`));\n        break;\n      }\n      case 'string': {\n        ret.push(`${keyPrefix}${key}=${colonQuote(props[key])}`);\n        break;\n      }\n      default: {\n        ret.push(`${keyPrefix}${key}=${JSON.stringify(props[key])}`);\n        break;\n      }\n    }\n  }\n\n  ret.sort();\n  return ret;\n}\n"],
  "mappings": "sNACA,MAAA,QAAA,cAAA,EACA,aAAA,QAAA,YAAA,EACA,cAAA,QAAA,eAAA,EACA,QAAA,QAAA,SAAA,EACA,QAAA,QAAA,SAAA,EAyDA,MAAa,eAAe,CAyD1B,aAAA,CAAA,OArDc,QAAO,MAAkB,QAA6B,6EAClE,KAAM,OAAQ,QAAA,MAAM,GAAG,KAAK,EAEtB,MAAQ,MAAA,QAAQ,sBAAkB,MAAA,KAAA,SAAA,GACpC,CAAE,QAAS,MAAM,QAAS,OAAQ,MAAM,UAAW,QAAQ,KAAK,EAChE,IAAC,QAAQ,SAAK,MAAA,KAAA,OAAA,GAAI,CAAA,EAEtB,GAAI,OAAO,OAAO,KAAK,EAAE,KAAK,GAAK,QAAA,MAAM,aAAa,CAAC,CAAC,EACtD,KAAM,IAAI,OACR,+CAA+C,QAAQ;mFAC6B,EAGxF,KAAM,aAAc,aAAa,KAAK,EACtC,MAAO,CACL,IAAK,GAAG,QAAQ,YAAY,YAAY,KAAK,GAAG,IAChD,aAIU,UAAS,MAAkB,QAA+B,qEACtE,KAAM,OAAQ,QAAA,MAAM,GAAG,KAAK,EAE5B,GAAI,QAAA,MAAM,aAAa,MAAM,OAAO,GAAK,QAAA,MAAM,aAAa,MAAM,MAAM,EACtE,KAAM,IAAI,OAAM,+CAA+C,QAAQ,gOAG+B,EAGxG,KAAM,CAAE,IAAK,OAAU,KAAK,OAAO,MAAO,OAAO,EAC3C,MAAQ,aAAA,KAAK,GAAG,KAAK,EAAE,cAAc,GAAG,EACxC,cAAgB,qBAAqB,KAAK,EAIhD,MAAI,SAAU,QAAa,gBAAkB,OAC3C,OAAM,wBAAwB,CAC5B,IACA,SAAU,QAAQ,SAClB,MACD,EAEG,gBAAkB,QACpB,cAAA,YAAY,GAAG,KAAK,EAAE,SAAS,aAAa,EAGvC,CAAE,MAAO,QAAQ,UAAU,GAG7B,CAAE,KAAK,GAtDlB,QAAA,gBAAA,+GA+DA,8BAA8B,MAAU,CACtC,GAAI,MAAO,QAAU,UAAY,QAAU,KACzC,MAAO,OAAM,MAAM,mBAGvB,CAQA,oBAAoB,GAAU,CAC5B,MAAO,IAAG,QAAQ,IAAK,IAAI,EAAE,QAAQ,IAAK,IAAI,CAChD,CAEA,sBAAsB,MAA6B,UAAY,GAAE,CAC/D,KAAM,KAAgB,CAAA,EAEtB,SAAW,OAAO,QAAO,KAAK,KAAK,EAEjC,GAAI,MAAM,OAAS,OAInB,OAAQ,MAAO,OAAM,UACd,SAAU,CACb,IAAI,KAAK,GAAG,aAAa,MAAM,KAAM,GAAG,YAAY,MAAM,CAAC,EAC3D,UAEG,SAAU,CACb,IAAI,KAAK,GAAG,YAAY,OAAO,WAAW,MAAM,IAAI,GAAG,EACvD,cAEO,CACP,IAAI,KAAK,GAAG,YAAY,OAAO,KAAK,UAAU,MAAM,IAAI,GAAG,EAC3D,OAKN,WAAI,KAAI,EACD,GACT",
  "names": []
}
