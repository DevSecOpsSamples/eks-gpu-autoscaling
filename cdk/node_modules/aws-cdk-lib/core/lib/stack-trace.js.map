{
  "version": 3,
  "sources": ["stack-trace.ts"],
  "sourcesContent": ["import { debugModeEnabled } from './debug';\n\n/**\n * Captures the current process' stack trace.\n *\n * Stack traces are often invaluable tools to help diagnose problems, however\n * their capture is a rather expensive operation, and the stack traces can be\n * large. Consequently, users are stronly advised to condition capturing stack\n * traces to specific user opt-in.\n *\n * Stack traces will only be captured if the `CDK_DEBUG` environment variable\n * is set to `'true'` or `1`.\n *\n * @param below an optional function starting from which stack frames will be\n *              ignored. Defaults to the `captureStackTrace` function itself.\n * @param limit and optional upper bound to the number of stack frames to be\n *              captured. If not provided, this defaults to\n *              `Number.MAX_SAFE_INTEGER`, effectively meaning \"no limit\".\n *\n * @returns the captured stack trace, as an array of stack frames.\n */\nexport function captureStackTrace(\n  below: Function = captureStackTrace,\n  limit = Number.MAX_SAFE_INTEGER,\n): string[] {\n  if (!debugModeEnabled()) {\n    return ['stack traces disabled'];\n  }\n\n  const object: { stack?: string } = {};\n  const previousLimit = Error.stackTraceLimit;\n  try {\n    Error.stackTraceLimit = limit;\n    Error.captureStackTrace(object, below);\n  } finally {\n    Error.stackTraceLimit = previousLimit;\n  }\n  if (!object.stack) {\n    return [];\n  }\n  return object.stack.split('\\n').slice(1).map(s => s.replace(/^\\s*at\\s+/, ''));\n}\n"],
  "mappings": "qGAAA,KAAA,SAAA,QAAA,SAAA,EAqBA,2BACE,MAAkB,kBAClB,MAAQ,OAAO,iBAAgB,CAE/B,GAAI,CAAC,QAAA,iBAAgB,EACnB,MAAO,CAAC,uBAAuB,EAGjC,KAAM,QAA6B,CAAA,EAC7B,cAAgB,MAAM,gBAC5B,GAAI,CACF,MAAM,gBAAkB,MACxB,MAAM,kBAAkB,OAAQ,KAAK,UAErC,MAAM,gBAAkB,cAE1B,MAAK,QAAO,MAGL,OAAO,MAAM,MAAM;CAAI,EAAE,MAAM,CAAC,EAAE,IAAI,GAAK,EAAE,QAAQ,YAAa,EAAE,CAAC,EAFnE,CAAA,CAGX,CApBA,QAAA,kBAAA",
  "names": []
}
