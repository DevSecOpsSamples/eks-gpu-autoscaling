{
  "version": 3,
  "sources": ["cfn-parameter.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnElement } from './cfn-element';\nimport { CfnReference } from './private/cfn-reference';\nimport { IResolvable, IResolveContext } from './resolvable';\nimport { Token } from './token';\n\nexport interface CfnParameterProps {\n  /**\n   * The data type for the parameter (DataType).\n   *\n   * @default String\n   */\n  readonly type?: string;\n\n  /**\n   * A value of the appropriate type for the template to use if no value is specified\n   * when a stack is created. If you define constraints for the parameter, you must specify\n   * a value that adheres to those constraints.\n   *\n   * @default - No default value for parameter.\n   */\n  readonly default?: any;\n\n  /**\n   * A regular expression that represents the patterns to allow for String types.\n   *\n   * @default - No constraints on patterns allowed for parameter.\n   */\n  readonly allowedPattern?: string;\n\n  /**\n   * An array containing the list of values allowed for the parameter.\n   *\n   * @default - No constraints on values allowed for parameter.\n   */\n  readonly allowedValues?: string[];\n\n  /**\n   * A string that explains a constraint when the constraint is violated.\n   * For example, without a constraint description, a parameter that has an allowed\n   * pattern of [A-Za-z0-9]+ displays the following error message when the user specifies\n   * an invalid value:\n   *\n   * @default - No description with customized error message when user specifies invalid values.\n   */\n  readonly constraintDescription?: string;\n\n  /**\n   * A string of up to 4000 characters that describes the parameter.\n   *\n   * @default - No description for the parameter.\n   */\n  readonly description?: string;\n\n  /**\n   * An integer value that determines the largest number of characters you want to allow for String types.\n   *\n   * @default - None.\n   */\n  readonly maxLength?: number;\n\n  /**\n   * A numeric value that determines the largest numeric value you want to allow for Number types.\n   *\n   * @default - None.\n   */\n  readonly maxValue?: number;\n\n  /**\n   * An integer value that determines the smallest number of characters you want to allow for String types.\n   *\n   * @default - None.\n   */\n  readonly minLength?: number;\n\n  /**\n   * A numeric value that determines the smallest numeric value you want to allow for Number types.\n   *\n   * @default - None.\n   */\n  readonly minValue?: number;\n\n  /**\n   * Whether to mask the parameter value when anyone makes a call that describes the stack.\n   * If you set the value to ``true``, the parameter value is masked with asterisks (``*****``).\n   *\n   * @default - Parameter values are not masked.\n   */\n  readonly noEcho?: boolean;\n}\n\n/**\n * A CloudFormation parameter.\n *\n * Use the optional Parameters section to customize your templates.\n * Parameters enable you to input custom values to your template each time you create or\n * update a stack.\n */\nexport class CfnParameter extends CfnElement {\n  private _type: string;\n  private _default?: any;\n  private _allowedPattern?: string;\n  private _allowedValues?: string[];\n  private _constraintDescription?: string;\n  private _description?: string;\n  private _maxLength?: number;\n  private _maxValue?: number;\n  private _minLength?: number;\n  private _minValue?: number;\n  private _noEcho?: boolean;\n\n  /**\n   * Creates a parameter construct.\n   * Note that the name (logical ID) of the parameter will derive from it's `coname` and location\n   * within the stack. Therefore, it is recommended that parameters are defined at the stack level.\n   *\n   * @param scope The parent construct.\n   * @param props The parameter properties.\n   */\n  constructor(scope: Construct, id: string, props: CfnParameterProps = {}) {\n    super(scope, id);\n\n    this._type = props.type || 'String';\n    this._default = props.default;\n    this._allowedPattern = props.allowedPattern;\n    this._allowedValues = props.allowedValues;\n    this._constraintDescription = props.constraintDescription;\n    this._description = props.description;\n    this._maxLength = props.maxLength;\n    this._maxValue = props.maxValue;\n    this._minLength = props.minLength;\n    this._minValue = props.minValue;\n    this._noEcho = props.noEcho;\n  }\n\n  /**\n   * The data type for the parameter (DataType).\n   *\n   * @default String\n   */\n  public get type(): string {\n    return this._type;\n  }\n\n  public set type(type: string) {\n    this._type = type;\n  }\n\n  /**\n   * A value of the appropriate type for the template to use if no value is specified\n   * when a stack is created. If you define constraints for the parameter, you must specify\n   * a value that adheres to those constraints.\n   *\n   * @default - No default value for parameter.\n   */\n  public get default(): any {\n    return this._default;\n  }\n\n  public set default(value: any) {\n    this._default = value;\n  }\n\n  /**\n   * A regular expression that represents the patterns to allow for String types.\n   *\n   * @default - No constraints on patterns allowed for parameter.\n   */\n  public get allowedPattern(): string | undefined {\n    return this._allowedPattern;\n  }\n\n  public set allowedPattern(pattern: string | undefined) {\n    this._allowedPattern = pattern;\n  }\n\n  /**\n   * An array containing the list of values allowed for the parameter.\n   *\n   * @default - No constraints on values allowed for parameter.\n   */\n  public get allowedValues(): string[] | undefined {\n    return this._allowedValues;\n  }\n\n  public set allowedValues(values: string[] | undefined) {\n    this._allowedValues = values;\n  }\n\n  /**\n   * A string that explains a constraint when the constraint is violated.\n   * For example, without a constraint description, a parameter that has an allowed\n   * pattern of [A-Za-z0-9]+ displays the following error message when the user specifies\n   * an invalid value:\n   *\n   * @default - No description with customized error message when user specifies invalid values.\n   */\n  public get constraintDescription(): string | undefined {\n    return this._constraintDescription;\n  }\n\n  public set constraintDescription(desc: string | undefined) {\n    this._constraintDescription = desc;\n  }\n\n  /**\n   * A string of up to 4000 characters that describes the parameter.\n   *\n   * @default - No description for the parameter.\n   */\n  public get description(): string | undefined {\n    return this._description;\n  }\n\n  public set description(desc: string | undefined) {\n    this._description = desc;\n  }\n\n  /**\n   * An integer value that determines the largest number of characters you want to allow for String types.\n   *\n   * @default - None.\n   */\n  public get maxLength(): number | undefined {\n    return this._maxLength;\n  }\n\n  public set maxLength(len: number | undefined) {\n    this._maxLength = len;\n  }\n\n  /**\n   * An integer value that determines the smallest number of characters you want to allow for String types.\n   *\n   * @default - None.\n   */\n  public get minLength(): number | undefined {\n    return this._minLength;\n  }\n\n  public set minLength(len: number | undefined) {\n    this._minLength = len;\n  }\n\n  /**\n   * A numeric value that determines the largest numeric value you want to allow for Number types.\n   *\n   * @default - None.\n   */\n  public get maxValue(): number | undefined {\n    return this._maxValue;\n  }\n\n  public set maxValue(len: number | undefined) {\n    this._maxValue = len;\n  }\n  /**\n   * A numeric value that determines the smallest numeric value you want to allow for Number types.\n   *\n   * @default - None.\n   */\n  public get minValue(): number | undefined {\n    return this._minValue;\n  }\n\n  public set minValue(len: number | undefined) {\n    this._minValue = len;\n  }\n\n  /**\n   * Indicates if this parameter is configured with \"NoEcho\" enabled.\n   */\n  public get noEcho(): boolean {\n    return !!this._noEcho;\n  }\n\n  public set noEcho(echo: boolean) {\n    this._noEcho = echo;\n  }\n\n  /**\n   * The parameter value as a Token\n   */\n  public get value(): IResolvable {\n    return CfnReference.for(this, 'Ref');\n  }\n\n  /**\n   * The parameter value, if it represents a string.\n   */\n  public get valueAsString(): string {\n    if (!isStringType(this.type) && !isNumberType(this.type)) {\n      throw new Error(`Parameter type (${this.type}) is not a string or number type`);\n    }\n    return Token.asString(this.value);\n  }\n\n  /**\n   * The parameter value, if it represents a string list.\n   */\n  public get valueAsList(): string[] {\n    if (!isListType(this.type)) {\n      throw new Error(`Parameter type (${this.type}) is not a string list type`);\n    }\n    return Token.asList(this.value);\n  }\n\n  /**\n   * The parameter value, if it represents a number.\n   */\n  public get valueAsNumber(): number {\n    if (!isNumberType(this.type)) {\n      throw new Error(`Parameter type (${this.type}) is not a number type`);\n    }\n    return Token.asNumber(this.value);\n  }\n\n  /**\n   * @internal\n   */\n  public _toCloudFormation(): object {\n    return {\n      Parameters: {\n        [this.logicalId]: {\n          Type: this.type,\n          Default: this.default,\n          AllowedPattern: this.allowedPattern,\n          AllowedValues: this.allowedValues,\n          ConstraintDescription: this.constraintDescription,\n          Description: this.description,\n          MaxLength: this.maxLength,\n          MaxValue: this.maxValue,\n          MinLength: this.minLength,\n          MinValue: this.minValue,\n          NoEcho: this._noEcho,\n        },\n      },\n    };\n  }\n\n  public resolve(_context: IResolveContext): any {\n    return this.value;\n  }\n}\n\n/**\n * Whether the given parameter type looks like a list type\n */\nfunction isListType(type: string) {\n  return type.indexOf('List<') >= 0 || type.indexOf('CommaDelimitedList') >= 0;\n}\n\n/**\n * Whether the given parameter type looks like a number type\n */\nfunction isNumberType(type: string) {\n  return type === 'Number';\n}\n\n/**\n * Whether the given parameter type looks like a string type\n */\nfunction isStringType(type: string) {\n  return !isListType(type) && !isNumberType(type);\n}\n"],
  "mappings": "mNACA,cAAA,QAAA,eAAA,EACA,gBAAA,QAAA,yBAAA,EAEA,QAAA,QAAA,SAAA,EA8FA,MAAa,oBAAqB,eAAA,UAAU,CAqB1C,YAAY,MAAkB,GAAY,MAA2B,CAAA,EAAE,CACrE,MAAM,MAAO,EAAE,+DAEf,KAAK,MAAQ,MAAM,MAAQ,SAC3B,KAAK,SAAW,MAAM,QACtB,KAAK,gBAAkB,MAAM,eAC7B,KAAK,eAAiB,MAAM,cAC5B,KAAK,uBAAyB,MAAM,sBACpC,KAAK,aAAe,MAAM,YAC1B,KAAK,WAAa,MAAM,UACxB,KAAK,UAAY,MAAM,SACvB,KAAK,WAAa,MAAM,UACxB,KAAK,UAAY,MAAM,SACvB,KAAK,QAAU,MAAM,UAQZ,OAAI,CACb,MAAO,MAAK,SAGH,MAAK,KAAY,CAC1B,KAAK,MAAQ,QAUJ,UAAO,CAChB,MAAO,MAAK,YAGH,SAAQ,MAAU,CAC3B,KAAK,SAAW,SAQP,iBAAc,CACvB,MAAO,MAAK,mBAGH,gBAAe,QAA2B,CACnD,KAAK,gBAAkB,WAQd,gBAAa,CACtB,MAAO,MAAK,kBAGH,eAAc,OAA4B,CACnD,KAAK,eAAiB,UAWb,wBAAqB,CAC9B,MAAO,MAAK,0BAGH,uBAAsB,KAAwB,CACvD,KAAK,uBAAyB,QAQrB,cAAW,CACpB,MAAO,MAAK,gBAGH,aAAY,KAAwB,CAC7C,KAAK,aAAe,QAQX,YAAS,CAClB,MAAO,MAAK,cAGH,WAAU,IAAuB,CAC1C,KAAK,WAAa,OAQT,YAAS,CAClB,MAAO,MAAK,cAGH,WAAU,IAAuB,CAC1C,KAAK,WAAa,OAQT,WAAQ,CACjB,MAAO,MAAK,aAGH,UAAS,IAAuB,CACzC,KAAK,UAAY,OAOR,WAAQ,CACjB,MAAO,MAAK,aAGH,UAAS,IAAuB,CACzC,KAAK,UAAY,OAMR,SAAM,CACf,MAAO,CAAC,CAAC,KAAK,WAGL,QAAO,KAAa,CAC7B,KAAK,QAAU,QAMN,QAAK,CACd,MAAO,iBAAA,aAAa,IAAI,KAAM,KAAK,KAM1B,gBAAa,CACtB,GAAI,CAAC,aAAa,KAAK,IAAI,GAAK,CAAC,aAAa,KAAK,IAAI,EACrD,KAAM,IAAI,OAAM,mBAAmB,KAAK,sCAAsC,EAEhF,MAAO,SAAA,MAAM,SAAS,KAAK,KAAK,KAMvB,cAAW,CACpB,GAAI,CAAC,WAAW,KAAK,IAAI,EACvB,KAAM,IAAI,OAAM,mBAAmB,KAAK,iCAAiC,EAE3E,MAAO,SAAA,MAAM,OAAO,KAAK,KAAK,KAMrB,gBAAa,CACtB,GAAI,CAAC,aAAa,KAAK,IAAI,EACzB,KAAM,IAAI,OAAM,mBAAmB,KAAK,4BAA4B,EAEtE,MAAO,SAAA,MAAM,SAAS,KAAK,KAAK,EAM3B,mBAAiB,CACtB,MAAO,CACL,WAAY,EACT,KAAK,WAAY,CAChB,KAAM,KAAK,KACX,QAAS,KAAK,QACd,eAAgB,KAAK,eACrB,cAAe,KAAK,cACpB,sBAAuB,KAAK,sBAC5B,YAAa,KAAK,YAClB,UAAW,KAAK,UAChB,SAAU,KAAK,SACf,UAAW,KAAK,UAChB,SAAU,KAAK,SACf,OAAQ,KAAK,WAMd,QAAQ,SAAyB,sEAC/B,KAAK,OAnPhB,QAAA,aAAA,sGA0PA,oBAAoB,KAAY,CAC9B,MAAO,MAAK,QAAQ,OAAO,GAAK,GAAK,KAAK,QAAQ,oBAAoB,GAAK,CAC7E,CAKA,sBAAsB,KAAY,CAChC,MAAO,QAAS,QAClB,CAKA,sBAAsB,KAAY,CAChC,MAAO,CAAC,WAAW,IAAI,GAAK,CAAC,aAAa,IAAI,CAChD",
  "names": []
}
