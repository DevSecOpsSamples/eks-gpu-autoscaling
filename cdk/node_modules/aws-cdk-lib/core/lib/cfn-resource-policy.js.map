{
  "version": 3,
  "sources": ["cfn-resource-policy.ts"],
  "sourcesContent": ["/**\n * Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until\n * AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a\n * resource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals\n * to the stack events so that you track the number of signals sent.\n *\n * The creation policy is invoked only when AWS CloudFormation creates the associated resource. Currently, the only\n * AWS CloudFormation resources that support creation policies are AWS::AutoScaling::AutoScalingGroup, AWS::EC2::Instance,\n * and AWS::CloudFormation::WaitCondition.\n *\n * Use the CreationPolicy attribute when you want to wait on resource configuration actions before stack creation proceeds.\n * For example, if you install and configure software applications on an EC2 instance, you might want those applications to\n * be running before proceeding. In such cases, you can add a CreationPolicy attribute to the instance, and then send a success\n * signal to the instance after the applications are installed and configured. For a detailed example, see Deploying Applications\n * on Amazon EC2 with AWS CloudFormation.\n */\nexport interface CfnCreationPolicy {\n  /**\n   * For an Auto Scaling group replacement update, specifies how many instances must signal success for the\n   * update to succeed.\n   */\n  readonly autoScalingCreationPolicy?: CfnResourceAutoScalingCreationPolicy;\n\n  /**\n   * When AWS CloudFormation creates the associated resource, configures the number of required success signals and\n   * the length of time that AWS CloudFormation waits for those signals.\n   */\n  readonly resourceSignal?: CfnResourceSignal;\n}\n\n/**\n * For an Auto Scaling group replacement update, specifies how many instances must signal success for the\n * update to succeed.\n */\nexport interface CfnResourceAutoScalingCreationPolicy {\n  /**\n   * Specifies the percentage of instances in an Auto Scaling replacement update that must signal success for the\n   * update to succeed. You can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent.\n   * For example, if you update five instances with a minimum successful percentage of 50, three instances must signal success.\n   * If an instance doesn't send a signal within the time specified by the Timeout property, AWS CloudFormation assumes that the\n   * instance wasn't created.\n   */\n  readonly minSuccessfulInstancesPercent?: number;\n}\n\n/**\n * When AWS CloudFormation creates the associated resource, configures the number of required success signals and\n * the length of time that AWS CloudFormation waits for those signals.\n */\nexport interface CfnResourceSignal {\n\n  /**\n   * The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE.\n   * If the resource receives a failure signal or doesn't receive the specified number of signals before the timeout period\n   * expires, the resource creation fails and AWS CloudFormation rolls the stack back.\n   */\n  readonly count?: number;\n\n  /**\n   * The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property.\n   * The timeout period starts after AWS CloudFormation starts creating the resource, and the timeout expires no sooner\n   * than the time you specify but can occur shortly thereafter. The maximum time that you can specify is 12 hours.\n   */\n  readonly timeout?: string;\n}\n\n/**\n * With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.\n * You specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy\n * attribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations\n * that lead to resources being removed.\n */\nexport enum CfnDeletionPolicy {\n  /**\n   * AWS CloudFormation deletes the resource and all its content if applicable during stack deletion. You can add this\n   * deletion policy to any resource type. By default, if you don't specify a DeletionPolicy, AWS CloudFormation deletes\n   * your resources. However, be aware of the following considerations:\n   */\n  DELETE = 'Delete',\n\n  /**\n   * AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted.\n   * You can add this deletion policy to any resource type. Note that when AWS CloudFormation completes the stack deletion,\n   * the stack will be in Delete_Complete state; however, resources that are retained continue to exist and continue to incur\n   * applicable charges until you delete those resources.\n   */\n  RETAIN = 'Retain',\n\n  /**\n   * For resources that support snapshots (AWS::EC2::Volume, AWS::ElastiCache::CacheCluster, AWS::ElastiCache::ReplicationGroup,\n   * AWS::RDS::DBInstance, AWS::RDS::DBCluster, and AWS::Redshift::Cluster), AWS CloudFormation creates a snapshot for the\n   * resource before deleting it. Note that when AWS CloudFormation completes the stack deletion, the stack will be in the\n   * Delete_Complete state; however, the snapshots that are created with this policy continue to exist and continue to\n   * incur applicable charges until you delete those snapshots.\n   */\n  SNAPSHOT = 'Snapshot',\n}\n\n/**\n * Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup\n * resource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a\n * scheduled action is associated with the Auto Scaling group.\n */\nexport interface CfnUpdatePolicy {\n\n  /**\n   * Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,\n   * AWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation\n   * can roll back to the old Auto Scaling group and delete the new Auto Scaling group.\n   */\n  readonly autoScalingReplacingUpdate?: CfnAutoScalingReplacingUpdate;\n\n  /**\n   * To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate\n   * policy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling\n   * group in batches or all at once.\n   */\n  readonly autoScalingRollingUpdate?: CfnAutoScalingRollingUpdate;\n\n  /**\n   * To specify how AWS CloudFormation handles updates for the MinSize, MaxSize, and DesiredCapacity properties when\n   * the AWS::AutoScaling::AutoScalingGroup resource has an associated scheduled action, use the AutoScalingScheduledAction\n   * policy.\n   */\n  readonly autoScalingScheduledAction?: CfnAutoScalingScheduledAction;\n\n  /**\n   * To perform an AWS CodeDeploy deployment when the version changes on an AWS::Lambda::Alias resource,\n   * use the CodeDeployLambdaAliasUpdate update policy.\n   */\n  readonly codeDeployLambdaAliasUpdate?: CfnCodeDeployLambdaAliasUpdate;\n\n  /**\n   * To modify a replication group's shards by adding or removing shards, rather than replacing the entire\n   * AWS::ElastiCache::ReplicationGroup resource, use the UseOnlineResharding update policy.\n   */\n  readonly useOnlineResharding?: boolean;\n\n  /**\n   * To upgrade an Amazon ES domain to a new version of Elasticsearch rather than replacing the entire\n   * AWS::Elasticsearch::Domain resource, use the EnableVersionUpgrade update policy.\n   */\n  readonly enableVersionUpgrade?: boolean;\n\n}\n\n/**\n * To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate\n * policy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling\n * group in batches or all at once.\n */\nexport interface CfnAutoScalingRollingUpdate {\n\n  /**\n   * Specifies the maximum number of instances that AWS CloudFormation updates.\n   */\n  readonly maxBatchSize?: number;\n\n  /**\n   * Specifies the minimum number of instances that must be in service within the Auto Scaling group while AWS\n   * CloudFormation updates old instances.\n   */\n  readonly minInstancesInService?: number;\n\n  /**\n   * Specifies the percentage of instances in an Auto Scaling rolling update that must signal success for an update to succeed.\n   * You can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent. For example, if you\n   * update five instances with a minimum successful percentage of 50, three instances must signal success.\n   *\n   * If an instance doesn't send a signal within the time specified in the PauseTime property, AWS CloudFormation assumes\n   * that the instance wasn't updated.\n   *\n   * If you specify this property, you must also enable the WaitOnResourceSignals and PauseTime properties.\n   */\n  readonly minSuccessfulInstancesPercent?: number;\n\n  /**\n   * The amount of time that AWS CloudFormation pauses after making a change to a batch of instances to give those instances\n   * time to start software applications. For example, you might need to specify PauseTime when scaling up the number of\n   * instances in an Auto Scaling group.\n   *\n   * If you enable the WaitOnResourceSignals property, PauseTime is the amount of time that AWS CloudFormation should wait\n   * for the Auto Scaling group to receive the required number of valid signals from added or replaced instances. If the\n   * PauseTime is exceeded before the Auto Scaling group receives the required number of signals, the update fails. For best\n   * results, specify a time period that gives your applications sufficient time to get started. If the update needs to be\n   * rolled back, a short PauseTime can cause the rollback to fail.\n   *\n   * Specify PauseTime in the ISO8601 duration format (in the format PT#H#M#S, where each # is the number of hours, minutes,\n   * and seconds, respectively). The maximum PauseTime is one hour (PT1H).\n   */\n  readonly pauseTime?: string;\n\n  /**\n   * Specifies the Auto Scaling processes to suspend during a stack update. Suspending processes prevents Auto Scaling from\n   * interfering with a stack update. For example, you can suspend alarming so that Auto Scaling doesn't execute scaling\n   * policies associated with an alarm. For valid values, see the ScalingProcesses.member.N parameter for the SuspendProcesses\n   * action in the Auto Scaling API Reference.\n   */\n  readonly suspendProcesses?: string[];\n\n  /**\n   * Specifies whether the Auto Scaling group waits on signals from new instances during an update. Use this property to\n   * ensure that instances have completed installing and configuring applications before the Auto Scaling group update proceeds.\n   * AWS CloudFormation suspends the update of an Auto Scaling group after new EC2 instances are launched into the group.\n   * AWS CloudFormation must receive a signal from each new instance within the specified PauseTime before continuing the update.\n   * To signal the Auto Scaling group, use the cfn-signal helper script or SignalResource API.\n   *\n   * To have instances wait for an Elastic Load Balancing health check before they signal success, add a health-check\n   * verification by using the cfn-init helper script. For an example, see the verify_instance_health command in the Auto Scaling\n   * rolling updates sample template.\n   */\n  readonly waitOnResourceSignals?: boolean;\n}\n\n/**\n * Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,\n * AWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation\n * can roll back to the old Auto Scaling group and delete the new Auto Scaling group.\n *\n * While AWS CloudFormation creates the new group, it doesn't detach or attach any instances. After successfully creating\n * the new Auto Scaling group, AWS CloudFormation deletes the old Auto Scaling group during the cleanup process.\n *\n * When you set the WillReplace parameter, remember to specify a matching CreationPolicy. If the minimum number of\n * instances (specified by the MinSuccessfulInstancesPercent property) don't signal success within the Timeout period\n * (specified in the CreationPolicy policy), the replacement update fails and AWS CloudFormation rolls back to the old\n * Auto Scaling group.\n */\nexport interface CfnAutoScalingReplacingUpdate {\n  readonly willReplace?: boolean;\n}\n\n/**\n * With scheduled actions, the group size properties of an Auto Scaling group can change at any time. When you update a\n * stack with an Auto Scaling group and scheduled action, AWS CloudFormation always sets the group size property values of\n * your Auto Scaling group to the values that are defined in the AWS::AutoScaling::AutoScalingGroup resource of your template,\n * even if a scheduled action is in effect.\n *\n * If you do not want AWS CloudFormation to change any of the group size property values when you have a scheduled action in\n * effect, use the AutoScalingScheduledAction update policy to prevent AWS CloudFormation from changing the MinSize, MaxSize,\n * or DesiredCapacity properties unless you have modified these values in your template.\\\n */\nexport interface CfnAutoScalingScheduledAction {\n  /*\n  * Specifies whether AWS CloudFormation ignores differences in group size properties between your current Auto Scaling\n  * group and the Auto Scaling group described in the AWS::AutoScaling::AutoScalingGroup resource of your template during\n  * a stack update. If you modify any of the group size property values in your template, AWS CloudFormation uses the modified\n  * values and updates your Auto Scaling group.\n  */\n  readonly ignoreUnmodifiedGroupSizeProperties?: boolean;\n}\n\n/**\n * To perform an AWS CodeDeploy deployment when the version changes on an AWS::Lambda::Alias resource,\n * use the CodeDeployLambdaAliasUpdate update policy.\n */\nexport interface CfnCodeDeployLambdaAliasUpdate {\n  /**\n   * The name of the AWS CodeDeploy application.\n   */\n  readonly applicationName: string;\n\n  /**\n   * The name of the AWS CodeDeploy deployment group. This is where the traffic-shifting policy is set.\n   */\n  readonly deploymentGroupName: string;\n\n  /**\n   * The name of the Lambda function to run before traffic routing starts.\n   */\n  readonly beforeAllowTrafficHook?: string;\n\n  /**\n   * The name of the Lambda function to run after traffic routing completes.\n   */\n  readonly afterAllowTrafficHook?: string;\n}\n"],
  "mappings": "qGAwEA,GAAY,mBAAZ,AAAA,UAAY,mBAAiB,CAM3B,mBAAA,OAAA,SAQA,mBAAA,OAAA,SASA,mBAAA,SAAA,UACF,GAxBY,kBAAA,QAAA,mBAAA,SAAA,kBAAiB,CAAA,EAAA",
  "names": []
}
