{
  "version": 3,
  "sources": ["names.ts"],
  "sourcesContent": ["import { Construct, Node } from 'constructs';\nimport { makeUniqueId } from './private/uniqueid';\n\n/**\n * Functions for devising unique names for constructs. For example, those can be\n * used to allocate unique physical names for resources.\n */\nexport class Names {\n  /**\n   * Returns a CloudFormation-compatible unique identifier for a construct based\n   * on its path. The identifier includes a human readable portion rendered\n   * from the path components and a hash suffix.\n   *\n   * @param construct The construct\n   * @returns a unique id based on the construct path\n   */\n  public static uniqueId(construct: Construct): string {\n    const node = Node.of(construct);\n    const components = node.scopes.slice(1).map(c => Node.of(c).id);\n    return components.length > 0 ? makeUniqueId(components) : '';\n  }\n\n  /**\n   * Returns a CloudFormation-compatible unique identifier for a construct based\n   * on its path. The identifier includes a human readable portion rendered\n   * from the path components and a hash suffix.\n   *\n   * TODO (v2): replace with API to use `constructs.Node`.\n   *\n   * @param node The construct node\n   * @returns a unique id based on the construct path\n   */\n  public static nodeUniqueId(node: Node): string {\n    const components = node.scopes.slice(1).map(c => Node.of(c).id);\n    return components.length > 0 ? makeUniqueId(components) : '';\n  }\n\n  private constructor() {}\n}\n"],
  "mappings": "iJAAA,aAAA,QAAA,YAAA,EACA,WAAA,QAAA,oBAAA,EAMA,MAAa,KAAK,CA8BhB,aAAA,CAAA,OArBc,UAAS,UAAoB,CAEzC,KAAM,YAAa,AADN,aAAA,KAAK,GAAG,SAAS,EACN,OAAO,MAAM,CAAC,EAAE,IAAI,GAAK,aAAA,KAAK,GAAG,CAAC,EAAE,EAAE,EAC9D,MAAO,YAAW,OAAS,EAAI,WAAA,aAAa,UAAU,EAAI,SAa9C,cAAa,KAAU,CACnC,KAAM,YAAa,KAAK,OAAO,MAAM,CAAC,EAAE,IAAI,GAAK,aAAA,KAAK,GAAG,CAAC,EAAE,EAAE,EAC9D,MAAO,YAAW,OAAS,EAAI,WAAA,aAAa,UAAU,EAAI,IA3B9D,QAAA,MAAA",
  "names": []
}
