{
  "version": 3,
  "sources": ["aspect.ts"],
  "sourcesContent": ["import { IConstruct } from 'constructs';\n\nconst ASPECTS_SYMBOL = Symbol.for('cdk-aspects');\n\n/**\n * Represents an Aspect\n */\nexport interface IAspect {\n  /**\n   * All aspects can visit an IConstruct\n   */\n  visit(node: IConstruct): void;\n}\n\n/**\n * Aspects can be applied to CDK tree scopes and can operate on the tree before\n * synthesis.\n */\nexport class Aspects {\n  /**\n   * Returns the `Aspects` object associated with a construct scope.\n   * @param scope The scope for which these aspects will apply.\n   */\n  public static of(scope: IConstruct): Aspects {\n    let aspects = (scope as any)[ASPECTS_SYMBOL];\n    if (!aspects) {\n      aspects = new Aspects();\n\n      Object.defineProperty(scope, ASPECTS_SYMBOL, {\n        value: aspects,\n        configurable: false,\n        enumerable: false,\n      });\n    }\n    return aspects;\n  }\n\n  private readonly _aspects: IAspect[];\n\n  private constructor() {\n    this._aspects = [];\n  }\n\n  /**\n   * Adds an aspect to apply this scope before synthesis.\n   * @param aspect The aspect to add.\n   */\n  public add(aspect: IAspect) {\n    this._aspects.push(aspect);\n  }\n\n  /**\n   * The list of aspects which were directly applied on this scope.\n   */\n  public get all(): IAspect[] {\n    return [...this._aspects];\n  }\n}"],
  "mappings": "8MAEM,eAAiB,OAAO,IAAI,aAAa,EAgB/C,MAAa,OAAO,CAqBlB,aAAA,CACE,KAAK,SAAW,CAAA,QAjBJ,IAAG,MAAiB,CAChC,GAAI,SAAW,MAAc,gBAC7B,MAAK,UACH,SAAU,GAAI,SAEd,OAAO,eAAe,MAAO,eAAgB,CAC3C,MAAO,QACP,aAAc,GACd,WAAY,GACb,GAEI,QAaF,IAAI,OAAe,qDACxB,KAAK,SAAS,KAAK,MAAM,KAMhB,MAAG,CACZ,MAAO,CAAC,GAAG,KAAK,QAAQ,GArC5B,QAAA,QAAA",
  "names": []
}
