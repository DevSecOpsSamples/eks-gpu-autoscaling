{
  "version": 3,
  "sources": ["stage.ts"],
  "sourcesContent": ["import * as cxapi from '../../cx-api';\nimport { IConstruct, Construct, Node } from 'constructs';\nimport { Environment } from './environment';\nimport { synthesize } from './private/synthesis';\n\nconst STAGE_SYMBOL = Symbol.for('@aws-cdk/core.Stage');\n\n/**\n * Initialization props for a stage.\n */\nexport interface StageProps {\n  /**\n   * Default AWS environment (account/region) for `Stack`s in this `Stage`.\n   *\n   * Stacks defined inside this `Stage` with either `region` or `account` missing\n   * from its env will use the corresponding field given here.\n   *\n   * If either `region` or `account`is is not configured for `Stack` (either on\n   * the `Stack` itself or on the containing `Stage`), the Stack will be\n   * *environment-agnostic*.\n   *\n   * Environment-agnostic stacks can be deployed to any environment, may not be\n   * able to take advantage of all features of the CDK. For example, they will\n   * not be able to use environmental context lookups, will not automatically\n   * translate Service Principals to the right format based on the environment's\n   * AWS partition, and other such enhancements.\n   *\n   * @example\n   *\n   * // Use a concrete account and region to deploy this Stage to\n   * new Stage(app, 'Stage1', {\n   *   env: { account: '123456789012', region: 'us-east-1' },\n   * });\n   *\n   * // Use the CLI's current credentials to determine the target environment\n   * new Stage(app, 'Stage2', {\n   *   env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },\n   * });\n   *\n   * @default - The environments should be configured on the `Stack`s.\n   */\n  readonly env?: Environment;\n\n  /**\n   * The output directory into which to emit synthesized artifacts.\n   *\n   * Can only be specified if this stage is the root stage (the app). If this is\n   * specified and this stage is nested within another stage, an error will be\n   * thrown.\n   *\n   * @default - for nested stages, outdir will be determined as a relative\n   * directory to the outdir of the app. For apps, if outdir is not specified, a\n   * temporary directory will be created.\n   */\n  readonly outdir?: string;\n}\n\n/**\n * An abstract application modeling unit consisting of Stacks that should be\n * deployed together.\n *\n * Derive a subclass of `Stage` and use it to model a single instance of your\n * application.\n *\n * You can then instantiate your subclass multiple times to model multiple\n * copies of your application which should be be deployed to different\n * environments.\n */\nexport class Stage extends Construct {\n  /**\n   * Return the stage this construct is contained with, if available. If called\n   * on a nested stage, returns its parent.\n   *\n   */\n  public static of(construct: IConstruct): Stage | undefined {\n    return Node.of(construct).scopes.reverse().slice(1).find(Stage.isStage);\n  }\n\n  /**\n   * Test whether the given construct is a stage.\n   *\n   */\n  public static isStage(x: any ): x is Stage {\n    return x !== null && typeof(x) === 'object' && STAGE_SYMBOL in x;\n  }\n\n  /**\n   * The default region for all resources defined within this stage.\n   *\n   */\n  public readonly region?: string;\n\n  /**\n   * The default account for all resources defined within this stage.\n   *\n   */\n  public readonly account?: string;\n\n  /**\n   * The cloud assembly builder that is being used for this App\n   *\n   * @internal\n   */\n  public readonly _assemblyBuilder: cxapi.CloudAssemblyBuilder;\n\n  /**\n   * The name of the stage. Based on names of the parent stages separated by\n   * hypens.\n   *\n   */\n  public readonly stageName: string;\n\n  /**\n   * The parent stage or `undefined` if this is the app.\n   * *\n   */\n  public readonly parentStage?: Stage;\n\n  /**\n   * The cached assembly if it was already built\n   */\n  private assembly?: cxapi.CloudAssembly;\n\n  constructor(scope: Construct, id: string, props: StageProps = {}) {\n    super(scope, id);\n\n    if (id !== '' && !/^[a-z][a-z0-9\\-\\_\\.]+$/i.test(id)) {\n      throw new Error(`invalid stage name \"${id}\". Stage name must start with a letter and contain only alphanumeric characters, hypens ('-'), underscores ('_') and periods ('.')`);\n    }\n\n    Object.defineProperty(this, STAGE_SYMBOL, { value: true });\n\n    this.parentStage = Stage.of(this);\n\n    this.region = props.env?.region ?? this.parentStage?.region;\n    this.account = props.env?.account ?? this.parentStage?.account;\n\n    this._assemblyBuilder = this.createBuilder(props.outdir);\n    this.stageName = [this.parentStage?.stageName, id].filter(x => x).join('-');\n  }\n\n  /**\n   * The cloud assembly output directory.\n   */\n  public get outdir() {\n    return this._assemblyBuilder.outdir;\n  }\n\n  /**\n   * The cloud assembly asset output directory.\n   */\n  public get assetOutdir() {\n    return this._assemblyBuilder.assetOutdir;\n  }\n\n  /**\n   * Artifact ID of the assembly if it is a nested stage. The root stage (app)\n   * will return an empty string.\n   *\n   * Derived from the construct path.\n   *\n   */\n  public get artifactId() {\n    if (!this.node.path) { return ''; }\n    return `assembly-${this.node.path.replace(/\\//g, '-').replace(/^-+|-+$/g, '')}`;\n  }\n\n  /**\n   * Synthesize this stage into a cloud assembly.\n   *\n   * Once an assembly has been synthesized, it cannot be modified. Subsequent\n   * calls will return the same assembly.\n   */\n  public synth(options: StageSynthesisOptions = { }): cxapi.CloudAssembly {\n    if (!this.assembly || options.force) {\n      this.assembly = synthesize(this, {\n        skipValidation: options.skipValidation,\n        validateOnSynthesis: options.validateOnSynthesis,\n      });\n    }\n\n    return this.assembly;\n  }\n\n  private createBuilder(outdir?: string) {\n    // cannot specify \"outdir\" if we are a nested stage\n    if (this.parentStage && outdir) {\n      throw new Error('\"outdir\" cannot be specified for nested stages');\n    }\n\n    // Need to determine fixed output directory already, because we must know where\n    // to write sub-assemblies (which must happen before we actually get to this app's\n    // synthesize() phase).\n    return this.parentStage\n      ? this.parentStage._assemblyBuilder.createNestedAssembly(this.artifactId, this.node.path)\n      : new cxapi.CloudAssemblyBuilder(outdir);\n  }\n}\n\n/**\n * Options for assembly synthesis.\n */\nexport interface StageSynthesisOptions {\n  /**\n   * Should we skip construct validation.\n   * @default - false\n   */\n  readonly skipValidation?: boolean;\n\n  /**\n   * Whether the stack should be validated after synthesis to check for error metadata\n   *\n   * @default - false\n   */\n  readonly validateOnSynthesis?: boolean;\n\n  /**\n   * Force a re-synth, even if the stage has already been synthesized.\n   * This is used by tests to allow for incremental verification of the output.\n   * Do not use in production.\n   * @default false\n   */\n  readonly force?: boolean;\n}\n"],
  "mappings": "4MAAA,MAAA,QAAA,cAAA,EACA,aAAA,QAAA,YAAA,EAEA,YAAA,QAAA,qBAAA,EAEM,aAAe,OAAO,IAAI,qBAAqB,EA+DrD,MAAa,aAAc,cAAA,SAAS,CAuDlC,YAAY,MAAkB,GAAY,MAAoB,CAAA,EAAE,0BAC9D,MAAM,MAAO,EAAE,EAEf,yDAAI,KAAO,IAAM,CAAC,0BAA0B,KAAK,EAAE,EACjD,KAAM,IAAI,OAAM,uBAAuB,sIAAsI,EAG/K,OAAO,eAAe,KAAM,aAAc,CAAE,MAAO,EAAI,CAAE,EAEzD,KAAK,YAAc,MAAM,GAAG,IAAI,EAEhC,KAAK,OAAM,IAAA,IAAG,MAAM,OAAG,MAAA,KAAA,OAAA,OAAA,GAAE,UAAM,MAAA,KAAA,OAAA,GAAA,IAAI,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,OACrD,KAAK,QAAO,IAAA,IAAG,MAAM,OAAG,MAAA,KAAA,OAAA,OAAA,GAAE,WAAO,MAAA,KAAA,OAAA,GAAA,IAAI,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,QAEvD,KAAK,iBAAmB,KAAK,cAAc,MAAM,MAAM,EACvD,KAAK,UAAY,CAAA,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,UAAW,EAAE,EAAE,OAAO,GAAK,CAAC,EAAE,KAAK,GAAG,QAhE9D,IAAG,UAAqB,CACpC,MAAO,cAAA,KAAK,GAAG,SAAS,EAAE,OAAO,QAAO,EAAG,MAAM,CAAC,EAAE,KAAK,MAAM,OAAO,QAO1D,SAAQ,EAAM,CAC1B,MAAO,KAAM,MAAQ,MAAO,IAAO,UAAY,eAAgB,MA6DtD,SAAM,CACf,MAAO,MAAK,iBAAiB,UAMpB,cAAW,CACpB,MAAO,MAAK,iBAAiB,eAUpB,aAAU,CACnB,MAAK,MAAK,KAAK,KACR,YAAY,KAAK,KAAK,KAAK,QAAQ,MAAO,GAAG,EAAE,QAAQ,WAAY,EAAE,IAD9C,GAUzB,MAAM,QAAiC,CAAA,EAAG,2EAC3C,EAAC,KAAK,UAAY,QAAQ,QAC5B,MAAK,SAAW,YAAA,WAAW,KAAM,CAC/B,eAAgB,QAAQ,eACxB,oBAAqB,QAAQ,oBAC9B,GAGI,KAAK,SAGN,cAAc,OAAe,CAEnC,GAAI,KAAK,aAAe,OACtB,KAAM,IAAI,OAAM,gDAAgD,EAMlE,MAAO,MAAK,YACR,KAAK,YAAY,iBAAiB,qBAAqB,KAAK,WAAY,KAAK,KAAK,IAAI,EACtF,GAAI,OAAM,qBAAqB,MAAM,GA/H7C,QAAA,MAAA",
  "names": []
}
