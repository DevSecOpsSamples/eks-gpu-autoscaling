{
  "version": 3,
  "sources": ["cfn-mapping.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Annotations } from './annotations';\nimport { CfnRefElement } from './cfn-element';\nimport { Fn } from './cfn-fn';\nimport { Token } from './token';\n\ntype Mapping = { [k1: string]: { [k2: string]: any } };\n\nexport interface CfnMappingProps {\n  /**\n   * Mapping of key to a set of corresponding set of named values.\n   * The key identifies a map of name-value pairs and must be unique within the mapping.\n   *\n   * For example, if you want to set values based on a region, you can create a mapping\n   * that uses the region name as a key and contains the values you want to specify for\n   * each specific region.\n   *\n   * @default - No mapping.\n   */\n  readonly mapping?: Mapping;\n\n  /*\n   * Synthesize this map in a lazy fashion.\n   *\n   * Lazy maps will only synthesize a mapping if a `findInMap` operation is unable to\n   * immediately return a value because one or both of the requested keys are unresolved\n   * tokens. In this case, `findInMap` will return a `Fn::FindInMap` CloudFormation\n   * intrinsic.\n   *\n   * @default false\n   */\n  readonly lazy?: boolean;\n}\n\n/**\n * Represents a CloudFormation mapping.\n */\nexport class CfnMapping extends CfnRefElement {\n  private mapping: Mapping;\n  private readonly lazy?: boolean;\n  private lazyRender = false;\n  private lazyInformed = false;\n\n  constructor(scope: Construct, id: string, props: CfnMappingProps = {}) {\n    super(scope, id);\n    this.mapping = props.mapping ? this.validateMapping(props.mapping) : {};\n    this.lazy = props.lazy;\n  }\n\n  /**\n   * Sets a value in the map based on the two keys.\n   */\n  public setValue(key1: string, key2: string, value: any) {\n    this.validateAlphanumeric(key2);\n\n    if (!(key1 in this.mapping)) {\n      this.mapping[key1] = { };\n    }\n\n    this.mapping[key1][key2] = value;\n  }\n\n  /**\n   * @returns A reference to a value in the map based on the two keys.\n   */\n  public findInMap(key1: string, key2: string): string {\n    let fullyResolved = false;\n    if (!Token.isUnresolved(key1)) {\n      if (!(key1 in this.mapping)) {\n        throw new Error(`Mapping doesn't contain top-level key '${key1}'`);\n      }\n      if (!Token.isUnresolved(key2)) {\n        if (!(key2 in this.mapping[key1])) {\n          throw new Error(`Mapping doesn't contain second-level key '${key2}'`);\n        }\n        fullyResolved = true;\n      }\n    }\n    if (fullyResolved) {\n      if (this.lazy) {\n        return this.mapping[key1][key2];\n      }\n    } else {\n      this.lazyRender = true;\n    }\n    return Fn.findInMap(this.logicalId, key1, key2);\n  }\n\n  /**\n   * @internal\n   */\n  public _toCloudFormation(): object {\n    if (this.lazy === undefined && !this.lazyRender) {\n      this.informLazyUse();\n    }\n    if (!this.lazy || (this.lazy && this.lazyRender)) {\n      return {\n        Mappings: {\n          [this.logicalId]: this.mapping,\n        },\n      };\n    } else {\n      return {};\n    }\n  }\n\n  private informLazyUse() {\n    if (!this.lazyInformed) {\n      Annotations.of(this).addInfo('Consider making this CfnMapping a lazy mapping by providing `lazy: true`: either no findInMap was called or every findInMap could be immediately resolved without using Fn::FindInMap');\n    }\n    this.lazyInformed = true;\n  }\n\n  private validateMapping(mapping: Mapping): Mapping {\n    Object.keys(mapping).forEach((m) => Object.keys(mapping[m]).forEach(this.validateAlphanumeric));\n    return mapping;\n  }\n\n  private validateAlphanumeric(value: any) {\n    // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html\n    if (value.match(/[^a-zA-Z0-9]/g)) {\n      throw new Error(`Attribute name '${value}' must contain only alphanumeric characters.`);\n    }\n  }\n}\n"],
  "mappings": "iNACA,cAAA,QAAA,eAAA,EACA,cAAA,QAAA,eAAA,EACA,SAAA,QAAA,UAAA,EACA,QAAA,QAAA,SAAA,EAiCA,MAAa,kBAAmB,eAAA,aAAa,CAM3C,YAAY,MAAkB,GAAY,MAAyB,CAAA,EAAE,CACnE,MAAM,MAAO,EAAE,EAJT,KAAA,WAAa,GACb,KAAA,aAAe,8DAIrB,KAAK,QAAU,MAAM,QAAU,KAAK,gBAAgB,MAAM,OAAO,EAAI,CAAA,EACrE,KAAK,KAAO,MAAM,KAMb,SAAS,KAAc,KAAc,MAAU,CACpD,KAAK,qBAAqB,IAAI,EAExB,OAAQ,MAAK,SACjB,MAAK,QAAQ,MAAQ,CAAA,GAGvB,KAAK,QAAQ,MAAM,MAAQ,MAMtB,UAAU,KAAc,KAAY,CACzC,GAAI,eAAgB,GACpB,GAAI,CAAC,QAAA,MAAM,aAAa,IAAI,EAAG,CAC7B,GAAI,CAAE,QAAQ,MAAK,SACjB,KAAM,IAAI,OAAM,0CAA0C,OAAO,EAEnE,GAAI,CAAC,QAAA,MAAM,aAAa,IAAI,EAAG,CAC7B,GAAI,CAAE,QAAQ,MAAK,QAAQ,OACzB,KAAM,IAAI,OAAM,6CAA6C,OAAO,EAEtE,cAAgB,IAGpB,GAAI,eACF,GAAI,KAAK,KACP,MAAO,MAAK,QAAQ,MAAM,UAG5B,MAAK,WAAa,GAEpB,MAAO,UAAA,GAAG,UAAU,KAAK,UAAW,KAAM,IAAI,EAMzC,mBAAiB,CAItB,MAHI,MAAK,OAAS,QAAa,CAAC,KAAK,YACnC,KAAK,cAAa,EAEhB,CAAC,KAAK,MAAS,KAAK,MAAQ,KAAK,WAC5B,CACL,SAAU,EACP,KAAK,WAAY,KAAK,UAIpB,CAAA,EAIH,eAAa,CACnB,AAAK,KAAK,cACR,cAAA,YAAY,GAAG,IAAI,EAAE,QAAQ,uLAAuL,EAEtN,KAAK,aAAe,GAGd,gBAAgB,QAAgB,CACtC,cAAO,KAAK,OAAO,EAAE,QAAQ,AAAC,GAAM,OAAO,KAAK,QAAQ,EAAE,EAAE,QAAQ,KAAK,oBAAoB,CAAC,EACvF,QAGD,qBAAqB,MAAU,CAErC,GAAI,MAAM,MAAM,eAAe,EAC7B,KAAM,IAAI,OAAM,mBAAmB,mDAAmD,GApF5F,QAAA,WAAA",
  "names": []
}
