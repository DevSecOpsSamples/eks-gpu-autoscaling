{
  "version": 3,
  "sources": ["bundling.ts"],
  "sourcesContent": ["import { spawnSync, SpawnSyncOptions } from 'child_process';\nimport * as crypto from 'crypto';\nimport { isAbsolute, join } from 'path';\nimport { FileSystem } from './fs';\nimport { quiet, reset } from './private/jsii-deprecated';\n\n/**\n * Bundling options\n *\n */\nexport interface BundlingOptions {\n  /**\n   * The Docker image where the command will run.\n   */\n  readonly image: DockerImage;\n\n  /**\n   * The entrypoint to run in the Docker container.\n   *\n   * Example value: `['/bin/sh', '-c']`\n   *\n   * @see https://docs.docker.com/engine/reference/builder/#entrypoint\n   *\n   * @default - run the entrypoint defined in the image\n   */\n  readonly entrypoint?: string[];\n\n  /**\n   * The command to run in the Docker container.\n   *\n   * Example value: `['npm', 'install']`\n   *\n   * @see https://docs.docker.com/engine/reference/run/\n   *\n   * @default - run the command defined in the image\n   */\n  readonly command?: string[];\n\n  /**\n   * Additional Docker volumes to mount.\n   *\n   * @default - no additional volumes are mounted\n   */\n  readonly volumes?: DockerVolume[];\n\n  /**\n   * The environment variables to pass to the Docker container.\n   *\n   * @default - no environment variables.\n   */\n  readonly environment?: { [key: string]: string; };\n\n  /**\n   * Working directory inside the Docker container.\n   *\n   * @default /asset-input\n   */\n  readonly workingDirectory?: string;\n\n  /**\n   * The user to use when running the Docker container.\n   *\n   *   user | user:group | uid | uid:gid | user:gid | uid:group\n   *\n   * @see https://docs.docker.com/engine/reference/run/#user\n   *\n   * @default - uid:gid of the current user or 1000:1000 on Windows\n   */\n  readonly user?: string;\n\n  /**\n   * Local bundling provider.\n   *\n   * The provider implements a method `tryBundle()` which should return `true`\n   * if local bundling was performed. If `false` is returned, docker bundling\n   * will be done.\n   *\n   * @default - bundling will only be performed in a Docker container\n   *\n   */\n  readonly local?: ILocalBundling;\n\n  /**\n   * The type of output that this bundling operation is producing.\n   *\n   * @default BundlingOutput.AUTO_DISCOVER\n   *\n   */\n  readonly outputType?: BundlingOutput;\n\n  /**\n   * [Security configuration](https://docs.docker.com/engine/reference/run/#security-configuration)\n   * when running the docker container.\n   *\n   * @default - no security options\n   */\n  readonly securityOpt?: string;\n}\n\n/**\n * The type of output that a bundling operation is producing.\n *\n */\nexport enum BundlingOutput {\n  /**\n   * The bundling output directory includes a single .zip or .jar file which\n   * will be used as the final bundle. If the output directory does not\n   * include exactly a single archive, bundling will fail.\n   */\n  ARCHIVED = 'archived',\n\n  /**\n   * The bundling output directory contains one or more files which will be\n   * archived and uploaded as a .zip file to S3.\n   */\n  NOT_ARCHIVED = 'not-archived',\n\n  /**\n   * If the bundling output directory contains a single archive file (zip or jar)\n   * it will be used as the bundle output as-is. Otherwise all the files in the bundling output directory will be zipped.\n   */\n  AUTO_DISCOVER = 'auto-discover',\n}\n\n/**\n * Local bundling\n *\n */\nexport interface ILocalBundling {\n  /**\n   * This method is called before attempting docker bundling to allow the\n   * bundler to be executed locally. If the local bundler exists, and bundling\n   * was performed locally, return `true`. Otherwise, return `false`.\n   *\n   * @param outputDir the directory where the bundled asset should be output\n   * @param options bundling options for this asset\n   */\n  tryBundle(outputDir: string, options: BundlingOptions): boolean;\n}\n\n/**\n * A Docker image used for asset bundling\n *\n * @deprecated use DockerImage\n */\nexport class BundlingDockerImage {\n  /**\n   * Reference an image on DockerHub or another online registry.\n   *\n   * @param image the image name\n   */\n  public static fromRegistry(image: string) {\n    return new DockerImage(image);\n  }\n\n  /**\n   * Reference an image that's built directly from sources on disk.\n   *\n   * @param path The path to the directory containing the Docker file\n   * @param options Docker build options\n   *\n   * @deprecated use DockerImage.fromBuild()\n   */\n  public static fromAsset(path: string, options: DockerBuildOptions = {}): BundlingDockerImage {\n    return DockerImage.fromBuild(path, options);\n  }\n\n  /** @param image The Docker image */\n  protected constructor(public readonly image: string, private readonly _imageHash?: string) {}\n\n  /**\n   * Provides a stable representation of this image for JSON serialization.\n   *\n   * @return The overridden image name if set or image hash name in that order\n   */\n  public toJSON() {\n    return this._imageHash ?? this.image;\n  }\n\n  /**\n   * Runs a Docker image\n   */\n  public run(options: DockerRunOptions = {}) {\n    const volumes = options.volumes || [];\n    const environment = options.environment || {};\n    const entrypoint = options.entrypoint?.[0] || null;\n    const command = [\n      ...options.entrypoint?.[1]\n        ? [...options.entrypoint.slice(1)]\n        : [],\n      ...options.command\n        ? [...options.command]\n        : [],\n    ];\n\n    const dockerArgs: string[] = [\n      'run', '--rm',\n      ...options.securityOpt\n        ? ['--security-opt', options.securityOpt]\n        : [],\n      ...options.user\n        ? ['-u', options.user]\n        : [],\n      ...flatten(volumes.map(v => ['-v', `${v.hostPath}:${v.containerPath}:${isSeLinux() ? 'z,' : ''}${v.consistency ?? DockerVolumeConsistency.DELEGATED}`])),\n      ...flatten(Object.entries(environment).map(([k, v]) => ['--env', `${k}=${v}`])),\n      ...options.workingDirectory\n        ? ['-w', options.workingDirectory]\n        : [],\n      ...entrypoint\n        ? ['--entrypoint', entrypoint]\n        : [],\n      this.image,\n      ...command,\n    ];\n\n    dockerExec(dockerArgs);\n  }\n\n  /**\n   * Copies a file or directory out of the Docker image to the local filesystem.\n   *\n   * If `outputPath` is omitted the destination path is a temporary directory.\n   *\n   * @param imagePath the path in the Docker image\n   * @param outputPath the destination path for the copy operation\n   * @returns the destination path\n   */\n  public cp(imagePath: string, outputPath?: string): string {\n    const { stdout } = dockerExec(['create', this.image], {}); // Empty options to avoid stdout redirect here\n    const match = stdout.toString().match(/([0-9a-f]{16,})/);\n    if (!match) {\n      throw new Error('Failed to extract container ID from Docker create output');\n    }\n\n    const containerId = match[1];\n    const containerPath = `${containerId}:${imagePath}`;\n    const destPath = outputPath ?? FileSystem.mkdtemp('cdk-docker-cp-');\n    try {\n      dockerExec(['cp', containerPath, destPath]);\n      return destPath;\n    } catch (err) {\n      throw new Error(`Failed to copy files from ${containerPath} to ${destPath}: ${err}`);\n    } finally {\n      dockerExec(['rm', '-v', containerId]);\n    }\n  }\n}\n\n/**\n * A Docker image\n */\nexport class DockerImage extends BundlingDockerImage {\n  /**\n   * Builds a Docker image\n   *\n   * @param path The path to the directory containing the Docker file\n   * @param options Docker build options\n   */\n  public static fromBuild(path: string, options: DockerBuildOptions = {}) {\n    const buildArgs = options.buildArgs || {};\n\n    if (options.file && isAbsolute(options.file)) {\n      throw new Error(`\"file\" must be relative to the docker build directory. Got ${options.file}`);\n    }\n\n    // Image tag derived from path and build options\n    const input = JSON.stringify({ path, ...options });\n    const tagHash = crypto.createHash('sha256').update(input).digest('hex');\n    const tag = `cdk-${tagHash}`;\n\n    const dockerArgs: string[] = [\n      'build', '-t', tag,\n      ...(options.file ? ['-f', join(path, options.file)] : []),\n      ...(options.platform ? ['--platform', options.platform] : []),\n      ...flatten(Object.entries(buildArgs).map(([k, v]) => ['--build-arg', `${k}=${v}`])),\n      path,\n    ];\n\n    dockerExec(dockerArgs);\n\n    // Fingerprints the directory containing the Dockerfile we're building and\n    // differentiates the fingerprint based on build arguments. We do this so\n    // we can provide a stable image hash. Otherwise, the image ID will be\n    // different every time the Docker layer cache is cleared, due primarily to\n    // timestamps.\n    const hash = FileSystem.fingerprint(path, { extraHash: JSON.stringify(options) });\n    return new DockerImage(tag, hash);\n  }\n\n  /**\n   * Reference an image on DockerHub or another online registry.\n   *\n   * @param image the image name\n   */\n  public static fromRegistry(image: string) {\n    return new DockerImage(image);\n  }\n\n  /** The Docker image */\n  public readonly image: string;\n\n  constructor(image: string, _imageHash?: string) {\n    // It is preferrable for the deprecated class to inherit a non-deprecated class.\n    // However, in this case, the opposite has occurred which is incompatible with\n    // a deprecation feature. See https://github.com/aws/jsii/issues/3102.\n    const deprecated = quiet();\n\n    super(image, _imageHash);\n\n    reset(deprecated);\n    this.image = image;\n  }\n\n  /**\n   * Provides a stable representation of this image for JSON serialization.\n   *\n   * @return The overridden image name if set or image hash name in that order\n   */\n  public toJSON() {\n    // It is preferrable for the deprecated class to inherit a non-deprecated class.\n    // However, in this case, the opposite has occurred which is incompatible with\n    // a deprecation feature. See https://github.com/aws/jsii/issues/3102.\n    const deprecated = quiet();\n\n    const json = super.toJSON();\n\n    reset(deprecated);\n    return json;\n  }\n\n  /**\n   * Runs a Docker image\n   */\n  public run(options: DockerRunOptions = {}) {\n    // It is preferrable for the deprecated class to inherit a non-deprecated class.\n    // However, in this case, the opposite has occurred which is incompatible with\n    // a deprecation feature. See https://github.com/aws/jsii/issues/3102.\n    const deprecated = quiet();\n\n    const result = super.run(options);\n\n    reset(deprecated);\n    return result;\n  }\n\n  /**\n   * Copies a file or directory out of the Docker image to the local filesystem.\n   *\n   * If `outputPath` is omitted the destination path is a temporary directory.\n   *\n   * @param imagePath the path in the Docker image\n   * @param outputPath the destination path for the copy operation\n   * @returns the destination path\n   */\n  public cp(imagePath: string, outputPath?: string): string {\n    // It is preferrable for the deprecated class to inherit a non-deprecated class.\n    // However, in this case, the opposite has occurred which is incompatible with\n    // a deprecation feature. See https://github.com/aws/jsii/issues/3102.\n    const deprecated = quiet();\n\n    const result = super.cp(imagePath, outputPath);\n\n    reset(deprecated);\n    return result;\n  }\n}\n\n/**\n * A Docker volume\n */\nexport interface DockerVolume {\n  /**\n   * The path to the file or directory on the host machine\n   */\n  readonly hostPath: string;\n\n  /**\n   * The path where the file or directory is mounted in the container\n   */\n  readonly containerPath: string;\n\n  /**\n   * Mount consistency. Only applicable for macOS\n   *\n   * @default DockerConsistency.DELEGATED\n   * @see https://docs.docker.com/storage/bind-mounts/#configure-mount-consistency-for-macos\n   */\n  readonly consistency?: DockerVolumeConsistency;\n}\n\n/**\n * Supported Docker volume consistency types. Only valid on macOS due to the way file storage works on Mac\n */\nexport enum DockerVolumeConsistency {\n  /**\n   * Read/write operations inside the Docker container are applied immediately on the mounted host machine volumes\n   */\n  CONSISTENT = 'consistent',\n  /**\n   * Read/write operations on mounted Docker volumes are first written inside the container and then synchronized to the host machine\n   */\n  DELEGATED = 'delegated',\n  /**\n   * Read/write operations on mounted Docker volumes are first applied on the host machine and then synchronized to the container\n   */\n  CACHED = 'cached',\n}\n\n/**\n * Docker run options\n */\nexport interface DockerRunOptions {\n  /**\n   * The entrypoint to run in the container.\n   *\n   * @default - run the entrypoint defined in the image\n   */\n  readonly entrypoint?: string[];\n\n  /**\n   * The command to run in the container.\n   *\n   * @default - run the command defined in the image\n   */\n  readonly command?: string[];\n\n  /**\n   * Docker volumes to mount.\n   *\n   * @default - no volumes are mounted\n   */\n  readonly volumes?: DockerVolume[];\n\n  /**\n   * The environment variables to pass to the container.\n   *\n   * @default - no environment variables.\n   */\n  readonly environment?: { [key: string]: string; };\n\n  /**\n   * Working directory inside the container.\n   *\n   * @default - image default\n   */\n  readonly workingDirectory?: string;\n\n  /**\n   * The user to use when running the container.\n   *\n   * @default - root or image default\n   */\n  readonly user?: string;\n\n  /**\n   * [Security configuration](https://docs.docker.com/engine/reference/run/#security-configuration)\n   * when running the docker container.\n   *\n   * @default - no security options\n   */\n  readonly securityOpt?: string;\n}\n\n/**\n * Docker build options\n */\nexport interface DockerBuildOptions {\n  /**\n   * Build args\n   *\n   * @default - no build args\n   */\n  readonly buildArgs?: { [key: string]: string };\n\n  /**\n   * Name of the Dockerfile, must relative to the docker build path.\n   *\n   * @default `Dockerfile`\n   */\n  readonly file?: string;\n\n  /**\n   * Set platform if server is multi-platform capable. _Requires Docker Engine API v1.38+_.\n   *\n   * Example value: `linux/amd64`\n   *\n   * @default - no platform specified\n   */\n  readonly platform?: string;\n}\n\nfunction flatten(x: string[][]) {\n  return Array.prototype.concat([], ...x);\n}\n\nfunction dockerExec(args: string[], options?: SpawnSyncOptions) {\n  const prog = process.env.CDK_DOCKER ?? 'docker';\n  const proc = spawnSync(prog, args, options ?? {\n    stdio: [ // show Docker output\n      'ignore', // ignore stdio\n      process.stderr, // redirect stdout to stderr\n      'inherit', // inherit stderr\n    ],\n  });\n\n  if (proc.error) {\n    throw proc.error;\n  }\n\n  if (proc.status !== 0) {\n    if (proc.stdout || proc.stderr) {\n      throw new Error(`[Status ${proc.status}] stdout: ${proc.stdout?.toString().trim()}\\n\\n\\nstderr: ${proc.stderr?.toString().trim()}`);\n    }\n    throw new Error(`${prog} exited with status ${proc.status}`);\n  }\n\n  return proc;\n}\n\nfunction isSeLinux() : boolean {\n  if (process.platform != 'linux') {\n    return false;\n  }\n  const prog = 'selinuxenabled';\n  const proc = spawnSync(prog, [], {\n    stdio: [ // show selinux status output\n      'pipe', // get value of stdio\n      process.stderr, // redirect stdout to stderr\n      'inherit', // inherit stderr\n    ],\n  });\n  if (proc.error) {\n    // selinuxenabled not a valid command, therefore not enabled\n    return false;\n  }\n  if (proc.status == 0) {\n    // selinux enabled\n    return true;\n  } else {\n    // selinux not enabled\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
