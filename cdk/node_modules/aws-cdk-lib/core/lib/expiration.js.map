{
  "version": 3,
  "sources": ["expiration.ts"],
  "sourcesContent": ["import { Duration } from './duration';\n/**\n * Represents a date of expiration.\n *\n * The amount can be specified either as a Date object, timestamp, Duration or string.\n */\nexport class Expiration {\n  /**\n   * Expire at the specified date\n   * @param d date to expire at\n   */\n  public static atDate(d: Date) { return new Expiration(d); }\n\n  /**\n   * Expire at the specified timestamp\n   * @param t timestamp in unix milliseconds\n   */\n  public static atTimestamp(t: number) { return Expiration.atDate(new Date(t)); }\n\n  /**\n   * Expire once the specified duration has passed since deployment time\n   * @param t the duration to wait before expiring\n   */\n  public static after(t: Duration) { return Expiration.atDate(new Date(Date.now() + t.toMilliseconds())); }\n\n  /**\n   * Expire at specified date, represented as a string\n   *\n   * @param s the string that represents date to expire at\n   */\n  public static fromString(s: string) { return new Expiration(new Date(s)); }\n\n  /**\n   * Expiration value as a Date object\n   */\n  public readonly date: Date;\n\n  private constructor(date: Date) {\n    this.date = date;\n  }\n\n  /**\n   * Exipration Value in a formatted Unix Epoch Time in seconds\n   */\n  public toEpoch(): number {\n    return Math.round(this.date.getTime() / 1000);\n  }\n  /**\n   * Check if Exipiration expires before input\n   * @param t the duration to check against\n   */\n  public isBefore(t: Duration): boolean {\n    return this.date < new Date(Date.now() + t.toMilliseconds());\n  }\n\n  /**\n   * Check if Exipiration expires after input\n   * @param t the duration to check against\n   */\n  public isAfter( t: Duration ): boolean {\n    return this.date > new Date(Date.now() + t.toMilliseconds());\n  }\n}\n"],
  "mappings": "iNAMA,MAAa,UAAU,CA+BrB,YAAoB,KAAU,CAC5B,KAAK,KAAO,WA3BA,QAAO,EAAO,CAAI,MAAO,IAAI,YAAW,CAAC,CAAE,OAM3C,aAAY,EAAS,CAAI,MAAO,YAAW,OAAO,GAAI,MAAK,CAAC,CAAC,CAAE,OAM/D,OAAM,EAAW,CAAA,+BAAA,qBAAA,CAAA,EAAW,WAAW,OAAO,GAAI,MAAK,KAAK,IAAG,EAAK,EAAE,eAAc,CAAE,CAAC,CAAE,OAOzF,YAAW,EAAS,CAAI,MAAO,IAAI,YAAW,GAAI,MAAK,CAAC,CAAC,CAAE,CAclE,SAAO,CACZ,MAAO,MAAK,MAAM,KAAK,KAAK,QAAO,EAAK,GAAI,EAMvC,SAAS,EAAW,wDAClB,KAAK,KAAO,GAAI,MAAK,KAAK,IAAG,EAAK,EAAE,eAAc,CAAE,EAOtD,QAAS,EAAW,wDAClB,KAAK,KAAO,GAAI,MAAK,KAAK,IAAG,EAAK,EAAE,eAAc,CAAE,GAtD/D,QAAA,WAAA",
  "names": []
}
