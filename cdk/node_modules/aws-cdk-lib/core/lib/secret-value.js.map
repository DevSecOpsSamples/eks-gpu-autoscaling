{
  "version": 3,
  "sources": ["secret-value.ts"],
  "sourcesContent": ["import { CfnDynamicReference, CfnDynamicReferenceService } from './cfn-dynamic-reference';\nimport { CfnParameter } from './cfn-parameter';\nimport { Intrinsic } from './private/intrinsic';\nimport { Token } from './token';\n\n/**\n * Work with secret values in the CDK\n *\n * Secret values in the CDK (such as those retrieved from SecretsManager) are\n * represented as regular strings, just like other values that are only\n * available at deployment time.\n *\n * To help you avoid accidental mistakes which would lead to you putting your\n * secret values directly into a CloudFormation template, constructs that take\n * secret values will not allow you to pass in a literal secret value. They do\n * so by calling `Secret.assertSafeSecret()`.\n *\n * You can escape the check by calling `Secret.plainText()`, but doing\n * so is highly discouraged.\n */\nexport class SecretValue extends Intrinsic {\n  /**\n   * Construct a literal secret value for use with secret-aware constructs\n   *\n   * *Do not use this method for any secrets that you care about.*\n   *\n   * The only reasonable use case for using this method is when you are testing.\n   */\n  public static plainText(secret: string): SecretValue {\n    return new SecretValue(secret);\n  }\n\n  /**\n   * Creates a `SecretValue` with a value which is dynamically loaded from AWS Secrets Manager.\n   * @param secretId The ID or ARN of the secret\n   * @param options Options\n   */\n  public static secretsManager(secretId: string, options: SecretsManagerSecretOptions = {}): SecretValue {\n    if (!secretId) {\n      throw new Error('secretId cannot be empty');\n    }\n\n    if (!Token.isUnresolved(secretId) && !secretId.startsWith('arn:') && secretId.includes(':')) {\n      throw new Error(`secret id \"${secretId}\" is not an ARN but contains \":\"`);\n    }\n\n    if (options.versionStage && options.versionId) {\n      throw new Error(`verionStage: '${options.versionStage}' and versionId: '${options.versionId}' were both provided but only one is allowed`);\n    }\n\n    const parts = [\n      secretId,\n      'SecretString',\n      options.jsonField || '',\n      options.versionStage || '',\n      options.versionId || '',\n    ];\n\n    const dyref = new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, parts.join(':'));\n    return this.cfnDynamicReference(dyref);\n  }\n\n  /**\n   * Use a secret value stored from a Systems Manager (SSM) parameter.\n   *\n   * @param parameterName The name of the parameter in the Systems Manager\n   * Parameter Store. The parameter name is case-sensitive.\n   *\n   * @param version An integer that specifies the version of the parameter to\n   * use. If you don't specify the exact version, AWS CloudFormation uses the\n   * latest version of the parameter.\n   */\n  public static ssmSecure(parameterName: string, version?: string): SecretValue {\n    return this.cfnDynamicReference(\n      new CfnDynamicReference(CfnDynamicReferenceService.SSM_SECURE,\n        version ? `${parameterName}:${version}` : parameterName));\n  }\n\n  /**\n   * Obtain the secret value through a CloudFormation dynamic reference.\n   *\n   * If possible, use `SecretValue.ssmSecure` or `SecretValue.secretsManager` directly.\n   *\n   * @param ref The dynamic reference to use.\n   */\n  public static cfnDynamicReference(ref: CfnDynamicReference) {\n    return new SecretValue(ref);\n  }\n\n  /**\n   * Obtain the secret value through a CloudFormation parameter.\n   *\n   * Generally, this is not a recommended approach. AWS Secrets Manager is the\n   * recommended way to reference secrets.\n   *\n   * @param param The CloudFormation parameter to use.\n   */\n  public static cfnParameter(param: CfnParameter) {\n    if (!param.noEcho) {\n      throw new Error('CloudFormation parameter must be configured with \"NoEcho\"');\n    }\n\n    return new SecretValue(param.value);\n  }\n}\n\n/**\n * Options for referencing a secret value from Secrets Manager.\n */\nexport interface SecretsManagerSecretOptions {\n  /**\n   * Specifies the secret version that you want to retrieve by the staging label attached to the version.\n   *\n   * Can specify at most one of `versionId` and `versionStage`.\n   *\n   * @default AWSCURRENT\n   */\n  readonly versionStage?: string;\n\n  /**\n   * Specifies the unique identifier of the version of the secret you want to use.\n   *\n   * Can specify at most one of `versionId` and `versionStage`.\n   *\n   * @default AWSCURRENT\n   */\n  readonly versionId?: string;\n\n  /**\n   * The key of a JSON field to retrieve. This can only be used if the secret\n   * stores a JSON object.\n   *\n   * @default - returns all the content stored in the Secrets Manager secret.\n   */\n  readonly jsonField?: string;\n}\n"],
  "mappings": "kNAAA,wBAAA,QAAA,yBAAA,EAEA,YAAA,QAAA,qBAAA,EACA,QAAA,QAAA,SAAA,EAiBA,MAAa,mBAAoB,aAAA,SAAS,OAQ1B,WAAU,OAAc,CACpC,MAAO,IAAI,aAAY,MAAM,QAQjB,gBAAe,SAAkB,QAAuC,CAAA,EAAE,CACtF,4EAAI,CAAC,SACH,KAAM,IAAI,OAAM,0BAA0B,EAG5C,GAAI,CAAC,QAAA,MAAM,aAAa,QAAQ,GAAK,CAAC,SAAS,WAAW,MAAM,GAAK,SAAS,SAAS,GAAG,EACxF,KAAM,IAAI,OAAM,cAAc,0CAA0C,EAG1E,GAAI,QAAQ,cAAgB,QAAQ,UAClC,KAAM,IAAI,OAAM,iBAAiB,QAAQ,iCAAiC,QAAQ,uDAAuD,EAG3I,KAAM,OAAQ,CACZ,SACA,eACA,QAAQ,WAAa,GACrB,QAAQ,cAAgB,GACxB,QAAQ,WAAa,IAGjB,MAAQ,GAAI,yBAAA,oBAAoB,wBAAA,2BAA2B,gBAAiB,MAAM,KAAK,GAAG,CAAC,EACjG,MAAO,MAAK,oBAAoB,KAAK,QAazB,WAAU,cAAuB,QAAgB,CAC7D,MAAO,MAAK,oBACV,GAAI,yBAAA,oBAAoB,wBAAA,2BAA2B,WACjD,QAAU,GAAG,iBAAiB,UAAY,aAAa,CAAC,QAUhD,qBAAoB,IAAwB,qEACjD,GAAI,aAAY,GAAG,QAWd,cAAa,MAAmB,CAC5C,2DAAI,CAAC,MAAM,OACT,KAAM,IAAI,OAAM,2DAA2D,EAG7E,MAAO,IAAI,aAAY,MAAM,KAAK,GAlFtC,QAAA,YAAA",
  "names": []
}
