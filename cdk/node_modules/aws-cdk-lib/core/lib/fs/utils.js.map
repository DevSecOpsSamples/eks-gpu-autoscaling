{
  "version": 3,
  "sources": ["utils.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport { SymlinkFollowMode } from './options';\n\n/**\n * Determines whether a symlink should be followed or not, based on a FollowMode.\n *\n * @param mode       the FollowMode.\n * @param sourceRoot the root of the source tree.\n * @param realPath   the real path of the target of the symlink.\n *\n * @returns true if the link should be followed.\n */\nexport function shouldFollow(mode: SymlinkFollowMode, sourceRoot: string, realPath: string): boolean {\n  switch (mode) {\n    case SymlinkFollowMode.ALWAYS:\n      return fs.existsSync(realPath);\n    case SymlinkFollowMode.EXTERNAL:\n      return !_isInternal() && fs.existsSync(realPath);\n    case SymlinkFollowMode.BLOCK_EXTERNAL:\n      return _isInternal() && fs.existsSync(realPath);\n    case SymlinkFollowMode.NEVER:\n      return false;\n    default:\n      throw new Error(`Unsupported FollowMode: ${mode}`);\n  }\n\n  function _isInternal(): boolean {\n    return path.resolve(realPath).startsWith(path.resolve(sourceRoot));\n  }\n}\n"],
  "mappings": "gGAAA,KAAA,IAAA,QAAA,IAAA,EACA,KAAA,QAAA,MAAA,EACA,UAAA,QAAA,WAAA,EAWA,sBAA6B,KAAyB,WAAoB,SAAgB,CACxF,OAAQ,UACD,WAAA,kBAAkB,OACrB,MAAO,IAAG,WAAW,QAAQ,MAC1B,WAAA,kBAAkB,SACrB,MAAO,CAAC,YAAW,GAAM,GAAG,WAAW,QAAQ,MAC5C,WAAA,kBAAkB,eACrB,MAAO,aAAW,GAAM,GAAG,WAAW,QAAQ,MAC3C,WAAA,kBAAkB,MACrB,MAAO,WAEP,KAAM,IAAI,OAAM,2BAA2B,MAAM,EAGrD,sBAAoB,CAClB,MAAO,MAAK,QAAQ,QAAQ,EAAE,WAAW,KAAK,QAAQ,UAAU,CAAC,CACnE,CACF,CAjBA,QAAA,aAAA",
  "names": []
}
