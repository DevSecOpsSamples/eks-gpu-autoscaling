{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { copyDirectory } from './copy';\nimport { fingerprint } from './fingerprint';\nimport { CopyOptions, FingerprintOptions } from './options';\n\nexport * from './ignore';\nexport * from './options';\n\n/**\n * File system utilities.\n */\nexport class FileSystem {\n  /**\n   * Copies an entire directory structure.\n   * @param srcDir Source directory\n   * @param destDir Destination directory\n   * @param options options\n   * @param rootDir Root directory to calculate exclusions from\n   */\n  public static copyDirectory(srcDir: string, destDir: string, options: CopyOptions = { }, rootDir?: string) {\n    return copyDirectory(srcDir, destDir, options, rootDir);\n  }\n\n  /**\n   * Produces fingerprint based on the contents of a single file or an entire directory tree.\n   *\n   * The fingerprint will also include:\n   * 1. An extra string if defined in `options.extra`.\n   * 2. The set of exclude patterns, if defined in `options.exclude`\n   * 3. The symlink follow mode value.\n   *\n   * @param fileOrDirectory The directory or file to fingerprint\n   * @param options Fingerprinting options\n   */\n  public static fingerprint(fileOrDirectory: string, options: FingerprintOptions = { }) {\n    return fingerprint(fileOrDirectory, options);\n  }\n\n  /**\n   * Checks whether a directory is empty\n   *\n   * @param dir The directory to check\n   */\n  public static isEmpty(dir: string): boolean {\n    return fs.readdirSync(dir).length === 0;\n  }\n\n  /**\n   * The real path of the system temp directory\n   */\n  public static get tmpdir(): string {\n    if (FileSystem._tmpdir) {\n      return FileSystem._tmpdir;\n    }\n    FileSystem._tmpdir = fs.realpathSync(os.tmpdir());\n    return FileSystem._tmpdir;\n  }\n\n  /**\n   * Creates a unique temporary directory in the **system temp directory**.\n   *\n   * @param prefix A prefix for the directory name. Six random characters\n   * will be generated and appended behind this prefix.\n   */\n  public static mkdtemp(prefix: string): string {\n    return fs.mkdtempSync(path.join(FileSystem.tmpdir, prefix));\n  }\n\n  private static _tmpdir?: string;\n}\n"],
  "mappings": "olBAAA,GAAA,QAAA,IAAA,EACA,GAAA,QAAA,IAAA,EACA,KAAA,QAAA,MAAA,EACA,OAAA,QAAA,QAAA,EACA,cAAA,QAAA,eAAA,EAGA,aAAA,QAAA,UAAA,EAAA,OAAA,EACA,aAAA,QAAA,WAAA,EAAA,OAAA,EAKA,MAAa,UAAU,OAQP,eAAc,OAAgB,QAAiB,QAAuB,CAAA,EAAK,QAAgB,iEAChG,OAAA,cAAc,OAAQ,QAAS,QAAS,OAAO,QAc1C,aAAY,gBAAyB,QAA8B,CAAA,EAAG,wEAC3E,cAAA,YAAY,gBAAiB,OAAO,QAQ/B,SAAQ,IAAW,CAC/B,MAAO,IAAG,YAAY,GAAG,EAAE,SAAW,YAMtB,SAAM,CACtB,MAAI,YAAW,SAGf,YAAW,QAAU,GAAG,aAAa,GAAG,OAAM,CAAE,GACzC,WAAW,cASN,SAAQ,OAAc,CAClC,MAAO,IAAG,YAAY,KAAK,KAAK,WAAW,OAAQ,MAAM,CAAC,GAtD9D,QAAA,WAAA",
  "names": []
}
