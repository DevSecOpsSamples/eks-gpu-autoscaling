{
  "version": 3,
  "sources": ["ignore.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport dockerIgnore, * as DockerIgnore from '@balena/dockerignore';\nimport gitIgnore, * as GitIgnore from 'ignore';\nimport * as minimatch from 'minimatch';\nimport { CopyOptions, IgnoreMode } from './options';\n\n/**\n * Represents file path ignoring behavior.\n */\nexport abstract class IgnoreStrategy {\n  /**\n   * Ignores file paths based on simple glob patterns.\n   *\n   * @returns `GlobIgnorePattern` associated with the given patterns.\n   * @param absoluteRootPath the absolute path to the root directory of the paths to be considered\n   * @param patterns\n   */\n  public static glob(absoluteRootPath: string, patterns: string[]): GlobIgnoreStrategy {\n    return new GlobIgnoreStrategy(absoluteRootPath, patterns);\n  }\n\n  /**\n   * Ignores file paths based on the [`.gitignore specification`](https://git-scm.com/docs/gitignore).\n   *\n   * @returns `GitIgnorePattern` associated with the given patterns.\n   * @param absoluteRootPath the absolute path to the root directory of the paths to be considered\n   * @param patterns\n   */\n  public static git(absoluteRootPath: string, patterns: string[]): GitIgnoreStrategy {\n    return new GitIgnoreStrategy(absoluteRootPath, patterns);\n  }\n\n  /**\n   * Ignores file paths based on the [`.dockerignore specification`](https://docs.docker.com/engine/reference/builder/#dockerignore-file).\n   *\n   * @returns `DockerIgnorePattern` associated with the given patterns.\n   * @param absoluteRootPath the absolute path to the root directory of the paths to be considered\n   * @param patterns\n   */\n  public static docker(absoluteRootPath: string, patterns: string[]): DockerIgnoreStrategy {\n    return new DockerIgnoreStrategy(absoluteRootPath, patterns);\n  }\n\n  /**\n   * Creates an IgnoreStrategy based on the `ignoreMode` and `exclude` in a `CopyOptions`.\n   *\n   * @returns `IgnoreStrategy` based on the `CopyOptions`\n   * @param absoluteRootPath the absolute path to the root directory of the paths to be considered\n   * @param options the `CopyOptions` to create the `IgnoreStrategy` from\n   */\n  public static fromCopyOptions(options: CopyOptions, absoluteRootPath: string): IgnoreStrategy {\n    const ignoreMode = options.ignoreMode || IgnoreMode.GLOB;\n    const exclude = options.exclude || [];\n\n    switch (ignoreMode) {\n      case IgnoreMode.GLOB:\n        return this.glob(absoluteRootPath, exclude);\n\n      case IgnoreMode.GIT:\n        return this.git(absoluteRootPath, exclude);\n\n      case IgnoreMode.DOCKER:\n        return this.docker(absoluteRootPath, exclude);\n    }\n  }\n\n  /**\n   * Adds another pattern.\n   * @params pattern the pattern to add\n   */\n  public abstract add(pattern: string): void;\n\n  /**\n   * Determines whether a given file path should be ignored or not.\n   *\n   * @param absoluteFilePath absolute file path to be assessed against the pattern\n   * @returns `true` if the file should be ignored\n   */\n  public abstract ignores(absoluteFilePath: string): boolean;\n}\n\n/**\n * Ignores file paths based on simple glob patterns.\n */\nexport class GlobIgnoreStrategy extends IgnoreStrategy {\n  private readonly absoluteRootPath: string;\n  private readonly patterns: string[];\n\n  constructor(absoluteRootPath: string, patterns: string[]) {\n    super();\n\n    if (!path.isAbsolute(absoluteRootPath)) {\n      throw new Error('GlobIgnoreStrategy expects an absolute file path');\n    }\n\n    this.absoluteRootPath = absoluteRootPath;\n    this.patterns = patterns;\n  }\n\n  /**\n   * Adds another pattern.\n   * @params pattern the pattern to add\n   */\n  public add(pattern: string): void {\n    this.patterns.push(pattern);\n  }\n\n  /**\n   * Determines whether a given file path should be ignored or not.\n   *\n   * @param absoluteFilePath absolute file path to be assessed against the pattern\n   * @returns `true` if the file should be ignored\n   */\n  public ignores(absoluteFilePath: string): boolean {\n    if (!path.isAbsolute(absoluteFilePath)) {\n      throw new Error('GlobIgnoreStrategy.ignores() expects an absolute path');\n    }\n\n    let relativePath = path.relative(this.absoluteRootPath, absoluteFilePath);\n    let excludeOutput = false;\n\n    for (const pattern of this.patterns) {\n      const negate = pattern.startsWith('!');\n      const match = minimatch(relativePath, pattern, { matchBase: true, flipNegate: true });\n\n      if (!negate && match) {\n        excludeOutput = true;\n      }\n\n      if (negate && match) {\n        excludeOutput = false;\n      }\n    }\n\n    return excludeOutput;\n  }\n}\n\n/**\n * Ignores file paths based on the [`.gitignore specification`](https://git-scm.com/docs/gitignore).\n */\nexport class GitIgnoreStrategy extends IgnoreStrategy {\n  private readonly absoluteRootPath: string;\n  private readonly ignore: GitIgnore.Ignore;\n\n  constructor(absoluteRootPath: string, patterns: string[]) {\n    super();\n\n    if (!path.isAbsolute(absoluteRootPath)) {\n      throw new Error('GitIgnoreStrategy expects an absolute file path');\n    }\n\n    this.absoluteRootPath = absoluteRootPath;\n    this.ignore = gitIgnore().add(patterns);\n  }\n\n  /**\n   * Adds another pattern.\n   * @params pattern the pattern to add\n   */\n  public add(pattern: string): void {\n    this.ignore.add(pattern);\n  }\n\n  /**\n   * Determines whether a given file path should be ignored or not.\n   *\n   * @param absoluteFilePath absolute file path to be assessed against the pattern\n   * @returns `true` if the file should be ignored\n   */\n  public ignores(absoluteFilePath: string): boolean {\n    if (!path.isAbsolute(absoluteFilePath)) {\n      throw new Error('GitIgnoreStrategy.ignores() expects an absolute path');\n    }\n\n    let relativePath = path.relative(this.absoluteRootPath, absoluteFilePath);\n\n    return this.ignore.ignores(relativePath);\n  }\n}\n\n/**\n * Ignores file paths based on the [`.dockerignore specification`](https://docs.docker.com/engine/reference/builder/#dockerignore-file).\n */\nexport class DockerIgnoreStrategy extends IgnoreStrategy {\n  private readonly absoluteRootPath: string;\n  private readonly ignore: DockerIgnore.Ignore;\n\n  constructor(absoluteRootPath: string, patterns: string[]) {\n    super();\n\n    if (!path.isAbsolute(absoluteRootPath)) {\n      throw new Error('DockerIgnoreStrategy expects an absolute file path');\n    }\n\n    this.absoluteRootPath = absoluteRootPath;\n    this.ignore = dockerIgnore().add(patterns);\n  }\n\n  /**\n   * Adds another pattern.\n   * @params pattern the pattern to add\n   */\n  public add(pattern: string): void {\n    this.ignore.add(pattern);\n  }\n\n  /**\n   * Determines whether a given file path should be ignored or not.\n   *\n   * @param absoluteFilePath absolute file path to be assessed against the pattern\n   * @returns `true` if the file should be ignored\n   */\n  public ignores(absoluteFilePath: string): boolean {\n    if (!path.isAbsolute(absoluteFilePath)) {\n      throw new Error('DockerIgnoreStrategy.ignores() expects an absolute path');\n    }\n\n    let relativePath = path.relative(this.absoluteRootPath, absoluteFilePath);\n\n    return this.ignore.ignores(relativePath);\n  }\n}\n"],
  "mappings": "mTAAA,KAAA,QAAA,MAAA,EACA,eAAA,QAAA,sBAAA,EACA,SAAA,QAAA,QAAA,EACA,UAAA,QAAA,WAAA,EACA,UAAA,QAAA,WAAA,EAKA,MAAsB,cAAc,OAQpB,MAAK,iBAA0B,SAAkB,CAC7D,MAAO,IAAI,oBAAmB,iBAAkB,QAAQ,QAU5C,KAAI,iBAA0B,SAAkB,CAC5D,MAAO,IAAI,mBAAkB,iBAAkB,QAAQ,QAU3C,QAAO,iBAA0B,SAAkB,CAC/D,MAAO,IAAI,sBAAqB,iBAAkB,QAAQ,QAU9C,iBAAgB,QAAsB,iBAAwB,0DAC1E,KAAM,YAAa,QAAQ,YAAc,UAAA,WAAW,KAC9C,QAAU,QAAQ,SAAW,CAAA,EAEnC,OAAQ,gBACD,WAAA,WAAW,KACd,MAAO,MAAK,KAAK,iBAAkB,OAAO,MAEvC,WAAA,WAAW,IACd,MAAO,MAAK,IAAI,iBAAkB,OAAO,MAEtC,WAAA,WAAW,OACd,MAAO,MAAK,OAAO,iBAAkB,OAAO,IArDpD,QAAA,eAAA,4GA2EA,MAAa,0BAA2B,eAAc,CAIpD,YAAY,iBAA0B,SAAkB,CACtD,MAAK,EAEL,GAAI,CAAC,KAAK,WAAW,gBAAgB,EACnC,KAAM,IAAI,OAAM,kDAAkD,EAGpE,KAAK,iBAAmB,iBACxB,KAAK,SAAW,SAOX,IAAI,QAAe,CACxB,KAAK,SAAS,KAAK,OAAO,EASrB,QAAQ,iBAAwB,CACrC,GAAI,CAAC,KAAK,WAAW,gBAAgB,EACnC,KAAM,IAAI,OAAM,uDAAuD,EAGzE,GAAI,cAAe,KAAK,SAAS,KAAK,iBAAkB,gBAAgB,EACpE,cAAgB,GAEpB,SAAW,WAAW,MAAK,SAAU,CACnC,KAAM,QAAS,QAAQ,WAAW,GAAG,EAC/B,MAAQ,UAAU,aAAc,QAAS,CAAE,UAAW,GAAM,WAAY,EAAI,CAAE,EAEpF,AAAI,CAAC,QAAU,OACb,eAAgB,IAGd,QAAU,OACZ,eAAgB,IAIpB,MAAO,gBAlDX,QAAA,mBAAA,wHAyDA,MAAa,yBAA0B,eAAc,CAInD,YAAY,iBAA0B,SAAkB,CACtD,MAAK,EAEL,GAAI,CAAC,KAAK,WAAW,gBAAgB,EACnC,KAAM,IAAI,OAAM,iDAAiD,EAGnE,KAAK,iBAAmB,iBACxB,KAAK,OAAS,SAAA,QAAS,EAAG,IAAI,QAAQ,EAOjC,IAAI,QAAe,CACxB,KAAK,OAAO,IAAI,OAAO,EASlB,QAAQ,iBAAwB,CACrC,GAAI,CAAC,KAAK,WAAW,gBAAgB,EACnC,KAAM,IAAI,OAAM,sDAAsD,EAGxE,GAAI,cAAe,KAAK,SAAS,KAAK,iBAAkB,gBAAgB,EAExE,MAAO,MAAK,OAAO,QAAQ,YAAY,GApC3C,QAAA,kBAAA,qHA2CA,MAAa,4BAA6B,eAAc,CAItD,YAAY,iBAA0B,SAAkB,CACtD,MAAK,EAEL,GAAI,CAAC,KAAK,WAAW,gBAAgB,EACnC,KAAM,IAAI,OAAM,oDAAoD,EAGtE,KAAK,iBAAmB,iBACxB,KAAK,OAAS,eAAA,QAAY,EAAG,IAAI,QAAQ,EAOpC,IAAI,QAAe,CACxB,KAAK,OAAO,IAAI,OAAO,EASlB,QAAQ,iBAAwB,CACrC,GAAI,CAAC,KAAK,WAAW,gBAAgB,EACnC,KAAM,IAAI,OAAM,yDAAyD,EAG3E,GAAI,cAAe,KAAK,SAAS,KAAK,iBAAkB,gBAAgB,EAExE,MAAO,MAAK,OAAO,QAAQ,YAAY,GApC3C,QAAA,qBAAA",
  "names": []
}
