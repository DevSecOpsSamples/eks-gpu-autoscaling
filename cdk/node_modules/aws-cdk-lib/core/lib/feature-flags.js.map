{
  "version": 3,
  "sources": ["feature-flags.ts"],
  "sourcesContent": ["import * as cxapi from '../../cx-api';\nimport { IConstruct, Node } from 'constructs';\n\n/**\n * Features that are implemented behind a flag in order to preserve backwards\n * compatibility for existing apps. The list of flags are available in the\n * `@aws-cdk/cx-api` module.\n *\n * The state of the flag for this application is stored as a CDK context variable.\n */\nexport class FeatureFlags {\n  /**\n   * Inspect feature flags on the construct node's context.\n   */\n  public static of(scope: IConstruct) {\n    return new FeatureFlags(scope);\n  }\n\n  private constructor(private readonly construct: IConstruct) {}\n\n  /**\n   * Check whether a feature flag is enabled. If configured, the flag is present in\n   * the construct node context. Falls back to the defaults defined in the `cx-api`\n   * module.\n   */\n  public isEnabled(featureFlag: string): boolean | undefined {\n    const context = Node.of(this.construct).tryGetContext(featureFlag);\n    if (cxapi.FUTURE_FLAGS_EXPIRED.includes(featureFlag)) {\n      if (context !== undefined) {\n        throw new Error(`Unsupported feature flag '${featureFlag}'. This flag existed on CDKv1 but has been removed in CDKv2.`\n          + ' CDK will now behave as the same as when the flag is enabled.');\n      }\n      return true;\n    }\n    return context ?? cxapi.futureFlagDefault(featureFlag);\n  }\n}\n"],
  "mappings": "wJAAA,MAAA,QAAA,cAAA,EACA,aAAA,QAAA,YAAA,EASA,MAAa,YAAY,CAQvB,YAAqC,UAAqB,CAArB,KAAA,UAAA,gBAJvB,IAAG,MAAiB,CAChC,MAAO,IAAI,cAAa,KAAK,EAUxB,UAAU,YAAmB,CAClC,KAAM,SAAU,aAAA,KAAK,GAAG,KAAK,SAAS,EAAE,cAAc,WAAW,EACjE,GAAI,MAAM,qBAAqB,SAAS,WAAW,EAAG,CACpD,GAAI,UAAY,OACd,KAAM,IAAI,OAAM,6BAA6B,sIACsB,EAErE,MAAO,GAET,MAAO,UAAO,KAAP,QAAW,MAAM,kBAAkB,WAAW,GAxBzD,QAAA,aAAA",
  "names": []
}
