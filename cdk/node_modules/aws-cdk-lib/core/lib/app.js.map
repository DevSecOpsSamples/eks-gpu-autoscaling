{
  "version": 3,
  "sources": ["app.ts"],
  "sourcesContent": ["import * as cxapi from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { addCustomSynthesis, ICustomSynthesis } from './private/synthesis';\nimport { TreeMetadata } from './private/tree-metadata';\nimport { Stage } from './stage';\n\nconst APP_SYMBOL = Symbol.for('@aws-cdk/core.App');\n\n/**\n * Initialization props for apps.\n */\nexport interface AppProps {\n  /**\n   * Automatically call `synth()` before the program exits.\n   *\n   * If you set this, you don't have to call `synth()` explicitly. Note that\n   * this feature is only available for certain programming languages, and\n   * calling `synth()` is still recommended.\n   *\n   * @default true if running via CDK CLI (`CDK_OUTDIR` is set), `false`\n   * otherwise\n   */\n  readonly autoSynth?: boolean;\n\n  /**\n   * The output directory into which to emit synthesized artifacts.\n   *\n   * You should never need to set this value. By default, the value you pass to\n   * the CLI's `--output` flag will be used, and if you change it to a different\n   * directory the CLI will fail to pick up the generated Cloud Assembly.\n   *\n   * This property is intended for internal and testing use.\n   *\n   * @default - If this value is _not_ set, considers the environment variable `CDK_OUTDIR`.\n   *            If `CDK_OUTDIR` is not defined, uses a temp directory.\n   */\n  readonly outdir?: string;\n\n  /**\n   * Include construct creation stack trace in the `aws:cdk:trace` metadata key of all constructs.\n   * @default true stack traces are included unless `aws:cdk:disable-stack-trace` is set in the context.\n   */\n  readonly stackTraces?: boolean;\n\n  /**\n   * Include runtime versioning information in the Stacks of this app\n   *\n   * @deprecated use `versionReporting` instead\n   * @default Value of 'aws:cdk:version-reporting' context key\n   */\n  readonly runtimeInfo?: boolean;\n\n  /**\n   * Include runtime versioning information in the Stacks of this app\n   *\n   * @default Value of 'aws:cdk:version-reporting' context key\n   */\n  readonly analyticsReporting?: boolean;\n\n  /**\n   * Additional context values for the application.\n   *\n   * Context set by the CLI or the `context` key in `cdk.json` has precedence.\n   *\n   * Context can be read from any construct using `node.getContext(key)`.\n   *\n   * @default - no additional context\n   */\n  readonly context?: { [key: string]: any };\n\n  /**\n   * Include construct tree metadata as part of the Cloud Assembly.\n   *\n   * @default true\n   */\n  readonly treeMetadata?: boolean;\n}\n\n/**\n * A construct which represents an entire CDK app. This construct is normally\n * the root of the construct tree.\n *\n * You would normally define an `App` instance in your program's entrypoint,\n * then define constructs where the app is used as the parent scope.\n *\n * After all the child constructs are defined within the app, you should call\n * `app.synth()` which will emit a \"cloud assembly\" from this app into the\n * directory specified by `outdir`. Cloud assemblies includes artifacts such as\n * CloudFormation templates and assets that are needed to deploy this app into\n * the AWS cloud.\n *\n * @see https://docs.aws.amazon.com/cdk/latest/guide/apps.html\n */\nexport class App extends Stage {\n  /**\n   * Checks if an object is an instance of the `App` class.\n   * @returns `true` if `obj` is an `App`.\n   * @param obj The object to evaluate\n   */\n  public static isApp(obj: any): obj is App {\n    return APP_SYMBOL in obj;\n  }\n\n  /**\n   * Initializes a CDK application.\n   * @param props initialization properties\n   */\n  constructor(props: AppProps = {}) {\n    super(undefined as any, '', {\n      outdir: props.outdir ?? process.env[cxapi.OUTDIR_ENV],\n    });\n\n    Object.defineProperty(this, APP_SYMBOL, { value: true });\n\n    this.loadContext(props.context);\n\n    if (props.stackTraces === false) {\n      this.node.setContext(cxapi.DISABLE_METADATA_STACK_TRACE, true);\n    }\n\n    const analyticsReporting = props.analyticsReporting ?? props.runtimeInfo;\n\n    if (analyticsReporting !== undefined) {\n      this.node.setContext(cxapi.ANALYTICS_REPORTING_ENABLED_CONTEXT, analyticsReporting);\n    }\n\n    const autoSynth = props.autoSynth ?? cxapi.OUTDIR_ENV in process.env;\n    if (autoSynth) {\n      // synth() guarantuees it will only execute once, so a default of 'true'\n      // doesn't bite manual calling of the function.\n      process.once('beforeExit', () => this.synth());\n    }\n\n    if (props.treeMetadata === undefined || props.treeMetadata) {\n      new TreeMetadata(this);\n    }\n  }\n\n  private loadContext(defaults: { [key: string]: string } = { }) {\n    // prime with defaults passed through constructor\n    for (const [k, v] of Object.entries(defaults)) {\n      this.node.setContext(k, v);\n    }\n\n    // read from environment\n    const contextJson = process.env[cxapi.CONTEXT_ENV];\n    const contextFromEnvironment = contextJson\n      ? JSON.parse(contextJson)\n      : { };\n\n    for (const [k, v] of Object.entries(contextFromEnvironment)) {\n      this.node.setContext(k, v);\n    }\n  }\n}\n\n/**\n * Add a custom synthesis for the given construct\n *\n * When the construct is being synthesized, this allows it to add additional items\n * into the Cloud Assembly output.\n *\n * This feature is intended for use by official AWS CDK libraries only; 3rd party\n * library authors and CDK users should not use this function. That's why it's not\n * exposed via jsii.\n */\nexport function attachCustomSynthesis(construct: Construct, synthesis: ICustomSynthesis): void {\n  // synthesis.ts where the implementation lives is not exported. So\n  // this function is just a re-export of that function.\n  addCustomSynthesis(construct, synthesis);\n}\n"],
  "mappings": "wOAAA,MAAA,QAAA,cAAA,EAEA,YAAA,QAAA,qBAAA,EACA,gBAAA,QAAA,yBAAA,EACA,QAAA,QAAA,SAAA,EAEM,WAAa,OAAO,IAAI,mBAAmB,EAuFjD,MAAa,WAAY,SAAA,KAAK,CAc5B,YAAY,MAAkB,CAAA,EAAE,cAC9B,MAAM,OAAkB,GAAI,CAC1B,OAAM,IAAE,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,QAAQ,IAAI,MAAM,YAC3C,sDAED,OAAO,eAAe,KAAM,WAAY,CAAE,MAAO,EAAI,CAAE,EAEvD,KAAK,YAAY,MAAM,OAAO,EAE1B,MAAM,cAAgB,IACxB,KAAK,KAAK,WAAW,MAAM,6BAA8B,EAAI,EAG/D,KAAM,oBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,MAAM,YAE7D,AAAI,qBAAuB,QACzB,KAAK,KAAK,WAAW,MAAM,oCAAqC,kBAAkB,EAIhF,AADW,KAAG,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,MAAM,aAAc,SAAQ,MAI/D,QAAQ,KAAK,aAAc,IAAM,KAAK,MAAK,CAAE,EAG3C,OAAM,eAAiB,QAAa,MAAM,eAC5C,GAAI,iBAAA,aAAa,IAAI,QAnCX,OAAM,IAAQ,CAC1B,MAAO,cAAc,KAsCf,YAAY,SAAsC,CAAA,EAAG,CAE3D,SAAW,CAAC,EAAG,IAAM,QAAO,QAAQ,QAAQ,EAC1C,KAAK,KAAK,WAAW,EAAG,CAAC,EAI3B,KAAM,aAAc,QAAQ,IAAI,MAAM,aAChC,uBAAyB,YAC3B,KAAK,MAAM,WAAW,EACtB,CAAA,EAEJ,SAAW,CAAC,EAAG,IAAM,QAAO,QAAQ,sBAAsB,EACxD,KAAK,KAAK,WAAW,EAAG,CAAC,GA1D/B,QAAA,IAAA,2EAyEA,+BAAsC,UAAsB,UAA2B,CAGrF,YAAA,mBAAmB,UAAW,SAAS,CACzC,CAJA,QAAA,sBAAA",
  "names": []
}
