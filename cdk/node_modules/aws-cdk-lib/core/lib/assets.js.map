{
  "version": 3,
  "sources": ["assets.ts"],
  "sourcesContent": ["import { BundlingOptions } from './bundling';\n\n/**\n * Common interface for all assets.\n */\nexport interface IAsset {\n  /**\n   * A hash of this asset, which is available at construction time. As this is a plain string, it\n   * can be used in construct IDs in order to enforce creation of a new resource when the content\n   * hash has changed.\n   */\n  readonly assetHash: string;\n}\n\n/**\n * Asset hash options\n */\nexport interface AssetOptions {\n  /**\n   * Specify a custom hash for this asset. If `assetHashType` is set it must\n   * be set to `AssetHashType.CUSTOM`. For consistency, this custom hash will\n   * be SHA256 hashed and encoded as hex. The resulting hash will be the asset\n   * hash.\n   *\n   * NOTE: the hash is used in order to identify a specific revision of the asset, and\n   * used for optimizing and caching deployment activities related to this asset such as\n   * packaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will\n   * need to make sure it is updated every time the asset changes, or otherwise it is\n   * possible that some deployments will not be invalidated.\n   *\n   * @default - based on `assetHashType`\n   */\n  readonly assetHash?: string;\n\n  /**\n   * Specifies the type of hash to calculate for this asset.\n   *\n   * If `assetHash` is configured, this option must be `undefined` or\n   * `AssetHashType.CUSTOM`.\n   *\n   * @default - the default is `AssetHashType.SOURCE`, but if `assetHash` is\n   * explicitly specified this value defaults to `AssetHashType.CUSTOM`.\n   */\n  readonly assetHashType?: AssetHashType;\n\n  /**\n   * Bundle the asset by executing a command in a Docker container or a custom bundling provider.\n   *\n   * The asset path will be mounted at `/asset-input`. The Docker\n   * container is responsible for putting content at `/asset-output`.\n   * The content at `/asset-output` will be zipped and used as the\n   * final asset.\n   *\n   * @default - uploaded as-is to S3 if the asset is a regular file or a .zip file,\n   * archived into a .zip file and uploaded to S3 otherwise\n   *\n   *\n   */\n  readonly bundling?: BundlingOptions;\n}\n\n/**\n * The type of asset hash\n *\n * NOTE: the hash is used in order to identify a specific revision of the asset, and\n * used for optimizing and caching deployment activities related to this asset such as\n * packaging, uploading to Amazon S3, etc.\n */\nexport enum AssetHashType {\n  /**\n   * Based on the content of the source path\n   *\n   * When bundling, use `SOURCE` when the content of the bundling output is not\n   * stable across repeated bundling operations.\n   */\n  SOURCE = 'source',\n\n  /**\n   * Based on the content of the bundled path\n   *\n   * @deprecated use `OUTPUT` instead\n   */\n  BUNDLE = 'bundle',\n\n  /**\n   * Based on the content of the bundling output\n   *\n   * Use `OUTPUT` when the source of the asset is a top level folder containing\n   * code and/or dependencies that are not directly linked to the asset.\n   */\n  OUTPUT = 'output',\n\n  /**\n   * Use a custom hash\n   */\n  CUSTOM = 'custom',\n}\n\n/**\n * Represents the source for a file asset.\n */\nexport interface FileAssetSource {\n  /**\n   * A hash on the content source. This hash is used to uniquely identify this\n   * asset throughout the system. If this value doesn't change, the asset will\n   * not be rebuilt or republished.\n   */\n  readonly sourceHash: string;\n\n  /**\n   * An external command that will produce the packaged asset.\n   *\n   * The command should produce the location of a ZIP file on `stdout`.\n   *\n   * @default - Exactly one of `directory` and `executable` is required\n   */\n  readonly executable?: string[];\n\n  /**\n   * The path, relative to the root of the cloud assembly, in which this asset\n   * source resides. This can be a path to a file or a directory, depending on the\n   * packaging type.\n   *\n   * @default - Exactly one of `directory` and `executable` is required\n   */\n  readonly fileName?: string;\n\n  /**\n   * Which type of packaging to perform.\n   *\n   * @default - Required if `fileName` is specified.\n   */\n  readonly packaging?: FileAssetPackaging;\n}\n\nexport interface DockerImageAssetSource {\n  /**\n   * The hash of the contents of the docker build context. This hash is used\n   * throughout the system to identify this image and avoid duplicate work\n   * in case the source did not change.\n   *\n   * NOTE: this means that if you wish to update your docker image, you\n   * must make a modification to the source (e.g. add some metadata to your Dockerfile).\n   */\n  readonly sourceHash: string;\n\n  /**\n   * An external command that will produce the packaged asset.\n   *\n   * The command should produce the name of a local Docker image on `stdout`.\n   *\n   * @default - Exactly one of `directoryName` and `executable` is required\n   */\n  readonly executable?: string[];\n\n  /**\n   * The directory where the Dockerfile is stored, must be relative\n   * to the cloud assembly root.\n   *\n   * @default - Exactly one of `directoryName` and `executable` is required\n   */\n  readonly directoryName?: string;\n\n  /**\n   * Build args to pass to the `docker build` command.\n   *\n   * Since Docker build arguments are resolved before deployment, keys and\n   * values cannot refer to unresolved tokens (such as `lambda.functionArn` or\n   * `queue.queueUrl`).\n   *\n   * Only allowed when `directoryName` is specified.\n   *\n   * @default - no build args are passed\n   */\n  readonly dockerBuildArgs?: { [key: string]: string };\n\n  /**\n   * Docker target to build to\n   *\n   * Only allowed when `directoryName` is specified.\n   *\n   * @default - no target\n   */\n  readonly dockerBuildTarget?: string;\n\n  /**\n   * Path to the Dockerfile (relative to the directory).\n   *\n   * Only allowed when `directoryName` is specified.\n   *\n   * @default - no file\n   */\n  readonly dockerFile?: string;\n\n  /**\n   * ECR repository name\n   *\n   * Specify this property if you need to statically address the image, e.g.\n   * from a Kubernetes Pod. Note, this is only the repository name, without the\n   * registry and the tag parts.\n   *\n   * @default - automatically derived from the asset's ID.\n   * @deprecated repository name should be specified at the environment-level and not at the image level\n   */\n  readonly repositoryName?: string;\n\n  /**\n   * Networking mode for the RUN commands during build. _Requires Docker Engine API v1.25+_.\n   *\n   * Specify this property to build images on a specific networking mode.\n   *\n   * @default - no networking mode specified\n   */\n  readonly networkMode?: string;\n}\n\n/**\n * Packaging modes for file assets.\n */\nexport enum FileAssetPackaging {\n  /**\n   * The asset source path points to a directory, which should be archived using\n   * zip and and then uploaded to Amazon S3.\n   */\n  ZIP_DIRECTORY = 'zip',\n\n  /**\n   * The asset source path points to a single file, which should be uploaded\n   * to Amazon S3.\n   */\n  FILE = 'file'\n}\n\n/**\n * The location of the published file asset. This is where the asset\n * can be consumed at runtime.\n */\nexport interface FileAssetLocation {\n  /**\n   * The name of the Amazon S3 bucket.\n   */\n  readonly bucketName: string;\n\n  /**\n   * The Amazon S3 object key.\n   */\n  readonly objectKey: string;\n\n  /**\n   * The HTTP URL of this asset on Amazon S3.\n   * @default - value specified in `httpUrl` is used.\n   * @deprecated use `httpUrl`\n   */\n  readonly s3Url?: string;\n\n  /**\n   * The HTTP URL of this asset on Amazon S3.\n   *\n   * This value suitable for inclusion in a CloudFormation template, and\n   * may be an encoded token.\n   *\n   * Example value: `https://s3-us-east-1.amazonaws.com/mybucket/myobject`\n   */\n  readonly httpUrl: string;\n\n  /**\n   * The S3 URL of this asset on Amazon S3.\n   *\n   * This value suitable for inclusion in a CloudFormation template, and\n   * may be an encoded token.\n   *\n   * Example value: `s3://mybucket/myobject`\n   */\n  readonly s3ObjectUrl: string;\n\n  /**\n   * The ARN of the KMS key used to encrypt the file asset bucket, if any\n   *\n   * If so, the consuming role should be given \"kms:Decrypt\" permissions in its\n   * identity policy.\n   *\n   * It's the responsibility of they key's creator to make sure that all\n   * consumers that the key's key policy is configured such that the key can be used\n   * by all consumers that need it.\n   *\n   * The default bootstrap stack provisioned by the CDK CLI ensures this, and\n   * can be used as an example for how to configure the key properly.\n   *\n   * @default - Asset bucket is not encrypted\n   * @deprecated Since bootstrap bucket v4, the key policy properly allows use of the\n   * key via the bucket and no additional parameters have to be granted anymore.\n   */\n  readonly kmsKeyArn?: string;\n\n  /**\n   * Like `s3ObjectUrl`, but not suitable for CloudFormation consumption\n   *\n   * If there are placeholders in the S3 URL, they will be returned unreplaced\n   * and un-evaluated.\n   *\n   * @default - This feature cannot be used\n   */\n  readonly s3ObjectUrlWithPlaceholders?: string;\n}\n\n/**\n * The location of the published docker image. This is where the image can be\n * consumed at runtime.\n */\nexport interface DockerImageAssetLocation {\n  /**\n   * The URI of the image in Amazon ECR.\n   */\n  readonly imageUri: string;\n\n  /**\n   * The name of the ECR repository.\n   */\n  readonly repositoryName: string;\n}\n"],
  "mappings": "4HAoEA,GAAY,eAAZ,AAAA,UAAY,eAAa,CAOvB,eAAA,OAAA,SAOA,eAAA,OAAA,SAQA,eAAA,OAAA,SAKA,eAAA,OAAA,QACF,GA5BY,cAAA,QAAA,eAAA,SAAA,cAAa,CAAA,EAAA,EAuJzB,GAAY,oBAAZ,AAAA,UAAY,oBAAkB,CAK5B,oBAAA,cAAA,MAMA,oBAAA,KAAA,MACF,GAZY,mBAAA,QAAA,oBAAA,SAAA,mBAAkB,CAAA,EAAA",
  "names": []
}
