{
  "version": 3,
  "sources": ["logical-id.ts"],
  "sourcesContent": ["/**\n * Class that keeps track of the logical IDs that are assigned to resources\n *\n * Supports renaming the generated IDs.\n */\nexport class LogicalIDs {\n  /**\n   * The rename table (old to new)\n   */\n  private readonly renames: {[old: string]: string} = {};\n\n  /**\n   * All assigned names (new to old, may be identical)\n   *\n   * This is used to ensure that:\n   *\n   * - No 2 resources end up with the same final logical ID, unless they were the same to begin with.\n   * - All renames have been used at the end of renaming.\n   */\n  private readonly reverse: {[id: string]: string} = {};\n\n  /**\n   * Rename a logical ID from an old ID to a new ID\n   */\n  public addRename(oldId: string, newId: string) {\n    if (oldId in this.renames) {\n      throw new Error(`A rename has already been registered for '${oldId}'`);\n    }\n    this.renames[oldId] = newId;\n  }\n\n  /**\n   * Return the renamed version of an ID or the original ID.\n   */\n  public applyRename(oldId: string) {\n    let newId = oldId;\n    if (oldId in this.renames) {\n      newId = this.renames[oldId];\n    }\n\n    // If this newId has already been used, it must have been with the same oldId\n    if (newId in this.reverse && this.reverse[newId] !== oldId) {\n      // eslint-disable-next-line max-len\n      throw new Error(`Two objects have been assigned the same Logical ID: '${this.reverse[newId]}' and '${oldId}' are now both named '${newId}'.`);\n    }\n    this.reverse[newId] = oldId;\n\n    validateLogicalId(newId);\n    return newId;\n  }\n\n  /**\n   * Throw an error if not all renames have been used\n   *\n   * This is to assure that users didn't make typoes when registering renames.\n   */\n  public assertAllRenamesApplied() {\n    const keys = new Set<string>();\n    Object.keys(this.renames).forEach(keys.add.bind(keys));\n\n    Object.keys(this.reverse).map(newId => {\n      keys.delete(this.reverse[newId]);\n    });\n\n    if (keys.size !== 0) {\n      const unusedRenames = Array.from(keys.values());\n      throw new Error(`The following Logical IDs were attempted to be renamed, but not found: ${unusedRenames.join(', ')}`);\n    }\n  }\n}\n\nconst VALID_LOGICALID_REGEX = /^[A-Za-z][A-Za-z0-9]{1,254}$/;\n\n/**\n * Validate logical ID is valid for CloudFormation\n */\nfunction validateLogicalId(logicalId: string) {\n  if (!VALID_LOGICALID_REGEX.test(logicalId)) {\n    throw new Error(`Logical ID must adhere to the regular expression: ${VALID_LOGICALID_REGEX.toString()}, got '${logicalId}'`);\n  }\n}\n"],
  "mappings": "8FAKA,MAAa,UAAU,CAAvB,aAAA,CAImB,KAAA,QAAmC,CAAA,EAUnC,KAAA,QAAkC,CAAA,CAkDrD,CA7CS,UAAU,MAAe,MAAa,CAC3C,GAAI,QAAS,MAAK,QAChB,KAAM,IAAI,OAAM,6CAA6C,QAAQ,EAEvE,KAAK,QAAQ,OAAS,MAMjB,YAAY,MAAa,CAC9B,GAAI,OAAQ,MAMZ,GALI,QAAS,MAAK,SAChB,OAAQ,KAAK,QAAQ,QAInB,QAAS,MAAK,SAAW,KAAK,QAAQ,SAAW,MAEnD,KAAM,IAAI,OAAM,wDAAwD,KAAK,QAAQ,gBAAgB,8BAA8B,SAAS,EAE9I,YAAK,QAAQ,OAAS,MAEtB,kBAAkB,KAAK,EAChB,MAQF,yBAAuB,CAC5B,KAAM,MAAO,GAAI,KAOjB,GANA,OAAO,KAAK,KAAK,OAAO,EAAE,QAAQ,KAAK,IAAI,KAAK,IAAI,CAAC,EAErD,OAAO,KAAK,KAAK,OAAO,EAAE,IAAI,OAAQ,CACpC,KAAK,OAAO,KAAK,QAAQ,MAAM,CACjC,CAAC,EAEG,KAAK,OAAS,EAAG,CACnB,KAAM,eAAgB,MAAM,KAAK,KAAK,OAAM,CAAE,EAC9C,KAAM,IAAI,OAAM,0EAA0E,cAAc,KAAK,IAAI,GAAG,IA7D1H,QAAA,WAAA,WAkEA,KAAM,uBAAwB,+BAK9B,2BAA2B,UAAiB,CAC1C,GAAI,CAAC,sBAAsB,KAAK,SAAS,EACvC,KAAM,IAAI,OAAM,qDAAqD,sBAAsB,SAAQ,WAAY,YAAY,CAE/H",
  "names": []
}
