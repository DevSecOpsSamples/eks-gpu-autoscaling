{
  "version": 3,
  "sources": ["tree-metadata.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport { ArtifactType } from '../../../cloud-assembly-schema';\nimport { Construct, IConstruct } from 'constructs';\nimport { Annotations } from '../annotations';\nimport { Stack } from '../stack';\nimport { ISynthesisSession } from '../stack-synthesizers';\nimport { IInspectable, TreeInspector } from '../tree';\nimport { ConstructInfo, constructInfoFromConstruct } from './runtime-info';\n\nconst FILE_PATH = 'tree.json';\n\n/**\n * Construct that is automatically attached to the top-level `App`.\n * This generates, as part of synthesis, a file containing the construct tree and the metadata for each node in the tree.\n * The output is in a tree format so as to preserve the construct hierarchy.\n *\n */\nexport class TreeMetadata extends Construct {\n  constructor(scope: Construct) {\n    super(scope, 'Tree');\n  }\n\n  /**\n   * Create tree.json\n   * @internal\n   */\n  public _synthesizeTree(session: ISynthesisSession) {\n    const lookup: { [path: string]: Node } = { };\n\n    const visit = (construct: IConstruct): Node => {\n      const children = construct.node.children.map((c) => {\n        try {\n          return visit(c);\n        } catch (e) {\n          Annotations.of(this).addWarning(`Failed to render tree metadata for node [${c.node.id}]. Reason: ${e}`);\n          return undefined;\n        }\n      });\n      const childrenMap = children\n        .filter((child) => child !== undefined)\n        .reduce((map, child) => Object.assign(map, { [child!.id]: child }), {});\n\n      const node: Node = {\n        id: construct.node.id || 'App',\n        path: construct.node.path,\n        children: Object.keys(childrenMap).length === 0 ? undefined : childrenMap,\n        attributes: this.synthAttributes(construct),\n        constructInfo: constructInfoFromConstruct(construct),\n      };\n\n      lookup[node.path] = node;\n\n      return node;\n    };\n\n    const tree = {\n      version: 'tree-0.1',\n      tree: visit(this.node.root),\n    };\n\n    const builder = session.assembly;\n    fs.writeFileSync(path.join(builder.outdir, FILE_PATH), JSON.stringify(tree, undefined, 2), { encoding: 'utf-8' });\n\n    builder.addArtifact('Tree', {\n      type: ArtifactType.CDK_TREE,\n      properties: {\n        file: FILE_PATH,\n      },\n    });\n  }\n\n  private synthAttributes(construct: IConstruct): { [key: string]: any } | undefined {\n    // check if a construct implements IInspectable\n    function canInspect(inspectable: any): inspectable is IInspectable {\n      return inspectable.inspect !== undefined;\n    }\n\n    const inspector = new TreeInspector();\n\n    // get attributes from the inspector\n    if (canInspect(construct)) {\n      construct.inspect(inspector);\n      return Stack.of(construct).resolve(inspector.attributes);\n    }\n    return undefined;\n  }\n}\n\ninterface Node {\n  readonly id: string;\n  readonly path: string;\n  readonly children?: { [key: string]: Node };\n  readonly attributes?: { [key: string]: any };\n\n  /**\n   * Information on the construct class that led to this node, if available\n   */\n  readonly constructInfo?: ConstructInfo;\n}\n"],
  "mappings": "gGAAA,KAAA,IAAA,QAAA,IAAA,EACA,KAAA,QAAA,MAAA,EAEA,wBAAA,QAAA,gCAAA,EACA,aAAA,QAAA,YAAA,EACA,cAAA,QAAA,gBAAA,EACA,QAAA,QAAA,UAAA,EAEA,OAAA,QAAA,SAAA,EACA,eAAA,QAAA,gBAAA,EAEM,UAAY,YAQlB,MAAa,oBAAqB,cAAA,SAAS,CACzC,YAAY,MAAgB,CAC1B,MAAM,MAAO,MAAM,EAOd,gBAAgB,QAA0B,CAC/C,KAAM,QAAmC,CAAA,EAEnC,MAAQ,AAAC,WAA+B,CAS5C,KAAM,aAAc,AARH,UAAU,KAAK,SAAS,IAAI,AAAC,GAAK,CACjD,GAAI,CACF,MAAO,OAAM,CAAC,QACP,EAAP,CACA,cAAA,YAAY,GAAG,IAAI,EAAE,WAAW,4CAA4C,EAAE,KAAK,gBAAgB,GAAG,EACtG,OAEJ,CAAC,EAEE,OAAO,AAAC,OAAU,QAAU,MAAS,EACrC,OAAO,CAAC,IAAK,QAAU,OAAO,OAAO,IAAK,EAAG,MAAO,IAAK,KAAK,CAAE,EAAG,CAAA,CAAE,EAElE,KAAa,CACjB,GAAI,UAAU,KAAK,IAAM,MACzB,KAAM,UAAU,KAAK,KACrB,SAAU,OAAO,KAAK,WAAW,EAAE,SAAW,EAAI,OAAY,YAC9D,WAAY,KAAK,gBAAgB,SAAS,EAC1C,cAAe,eAAA,2BAA2B,SAAS,GAGrD,cAAO,KAAK,MAAQ,KAEb,IACT,EAEM,KAAO,CACX,QAAS,WACT,KAAM,MAAM,KAAK,KAAK,IAAI,GAGtB,QAAU,QAAQ,SACxB,GAAG,cAAc,KAAK,KAAK,QAAQ,OAAQ,SAAS,EAAG,KAAK,UAAU,KAAM,OAAW,CAAC,EAAG,CAAE,SAAU,OAAO,CAAE,EAEhH,QAAQ,YAAY,OAAQ,CAC1B,KAAM,wBAAA,aAAa,SACnB,WAAY,CACV,KAAM,WAET,EAGK,gBAAgB,UAAqB,CAE3C,oBAAoB,YAAgB,CAClC,MAAO,aAAY,UAAY,MACjC,CAEA,KAAM,WAAY,GAAI,QAAA,cAGtB,GAAI,WAAW,SAAS,EACtB,iBAAU,QAAQ,SAAS,EACpB,QAAA,MAAM,GAAG,SAAS,EAAE,QAAQ,UAAU,UAAU,GAjE7D,QAAA,aAAA",
  "names": []
}
