{
  "version": 3,
  "sources": ["uniqueid.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\nimport { unresolved } from './encoding';\n\n/**\n * Resources with this ID are hidden from humans\n *\n * They do not appear in the human-readable part of the logical ID,\n * but they are included in the hash calculation.\n */\nconst HIDDEN_FROM_HUMAN_ID = 'Resource';\n\n/**\n * Resources with this ID are complete hidden from the logical ID calculation.\n */\nconst HIDDEN_ID = 'Default';\n\nconst PATH_SEP = '/';\n\nconst HASH_LEN = 8;\nconst MAX_HUMAN_LEN = 240; // max ID len is 255\nconst MAX_ID_LEN = 255;\n\n/**\n * Calculates a unique ID for a set of textual components.\n *\n * This is done by calculating a hash on the full path and using it as a suffix\n * of a length-limited \"human\" rendition of the path components.\n *\n * @param components The path components\n * @returns a unique alpha-numeric identifier with a maximum length of 255\n */\nexport function makeUniqueId(components: string[]) {\n  components = components.filter(x => x !== HIDDEN_ID);\n\n  if (components.length === 0) {\n    throw new Error('Unable to calculate a unique id for an empty set of components');\n  }\n\n  // Lazy require in order to break a module dependency cycle\n  const unresolvedTokens = components.filter(c => unresolved(c));\n  if (unresolvedTokens.length > 0) {\n    throw new Error(`ID components may not include unresolved tokens: ${unresolvedTokens.join(',')}`);\n  }\n\n  // top-level resources will simply use the `name` as-is in order to support\n  // transparent migration of cloudformation templates to the CDK without the\n  // need to rename all resources.\n  if (components.length === 1) {\n    // we filter out non-alpha characters but that is actually a bad idea\n    // because it could create conflicts (\"A-B\" and \"AB\" will render the same\n    // logical ID). sadly, changing it in the 1.x version line is impossible\n    // because it will be a breaking change. we should consider for v2.0.\n    // https://github.com/aws/aws-cdk/issues/6421\n    const candidate = removeNonAlphanumeric(components[0]);\n\n    // if our candidate is short enough, use it as is. otherwise, fall back to\n    // the normal mode.\n    if (candidate.length <= MAX_ID_LEN) {\n      return candidate;\n    }\n  }\n\n  const hash = pathHash(components);\n  const human = removeDupes(components)\n    .filter(x => x !== HIDDEN_FROM_HUMAN_ID)\n    .map(removeNonAlphanumeric)\n    .join('')\n    .slice(0, MAX_HUMAN_LEN);\n\n  return human + hash;\n}\n\n/**\n * Take a hash of the given path.\n *\n * The hash is limited in size.\n */\nfunction pathHash(path: string[]): string {\n  const md5 = crypto.createHash('md5').update(path.join(PATH_SEP)).digest('hex');\n  return md5.slice(0, HASH_LEN).toUpperCase();\n}\n\n/**\n * Removes all non-alphanumeric characters in a string.\n */\nfunction removeNonAlphanumeric(s: string) {\n  return s.replace(/[^A-Za-z0-9]/g, '');\n}\n\n/**\n * Remove duplicate \"terms\" from the path list\n *\n * If the previous path component name ends with this component name, skip the\n * current component.\n */\nfunction removeDupes(path: string[]): string[] {\n  const ret = new Array<string>();\n\n  for (const component of path) {\n    if (ret.length === 0 || !ret[ret.length - 1].endsWith(component)) {\n      ret.push(component);\n    }\n  }\n\n  return ret;\n}\n"],
  "mappings": "gGAAA,KAAA,QAAA,QAAA,QAAA,EACA,WAAA,QAAA,YAAA,EAQM,qBAAuB,WAKvB,UAAY,UAEZ,SAAW,IAEX,SAAW,EACX,cAAgB,IAChB,WAAa,IAWnB,sBAA6B,WAAoB,CAG/C,GAFA,WAAa,WAAW,OAAO,GAAK,IAAM,SAAS,EAE/C,WAAW,SAAW,EACxB,KAAM,IAAI,OAAM,gEAAgE,EAIlF,KAAM,kBAAmB,WAAW,OAAO,GAAK,WAAA,WAAW,CAAC,CAAC,EAC7D,GAAI,iBAAiB,OAAS,EAC5B,KAAM,IAAI,OAAM,oDAAoD,iBAAiB,KAAK,GAAG,GAAG,EAMlG,GAAI,WAAW,SAAW,EAAG,CAM3B,KAAM,WAAY,sBAAsB,WAAW,EAAE,EAIrD,GAAI,UAAU,QAAU,WACtB,MAAO,WAIX,KAAM,MAAO,SAAS,UAAU,EAOhC,MAAO,AANO,aAAY,UAAU,EACjC,OAAO,GAAK,IAAM,oBAAoB,EACtC,IAAI,qBAAqB,EACzB,KAAK,EAAE,EACP,MAAM,EAAG,aAAa,EAEV,IACjB,CAvCA,QAAA,aAAA,aA8CA,kBAAkB,KAAc,CAE9B,MAAO,AADK,QAAO,WAAW,KAAK,EAAE,OAAO,KAAK,KAAK,QAAQ,CAAC,EAAE,OAAO,KAAK,EAClE,MAAM,EAAG,QAAQ,EAAE,YAAW,CAC3C,CAKA,+BAA+B,EAAS,CACtC,MAAO,GAAE,QAAQ,gBAAiB,EAAE,CACtC,CAQA,qBAAqB,KAAc,CACjC,KAAM,KAAM,GAAI,OAEhB,SAAW,aAAa,MACtB,AAAI,KAAI,SAAW,GAAK,CAAC,IAAI,IAAI,OAAS,GAAG,SAAS,SAAS,IAC7D,IAAI,KAAK,SAAS,EAItB,MAAO,IACT",
  "names": []
}
