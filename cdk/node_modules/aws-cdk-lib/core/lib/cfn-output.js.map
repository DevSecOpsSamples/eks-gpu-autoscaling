{
  "version": 3,
  "sources": ["cfn-output.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnElement } from './cfn-element';\n\nexport interface CfnOutputProps {\n  /**\n   * A String type that describes the output value.\n   * The description can be a maximum of 4 K in length.\n   *\n   * @default - No description.\n   */\n  readonly description?: string;\n\n  /**\n   * The value of the property returned by the aws cloudformation describe-stacks command.\n   * The value of an output can include literals, parameter references, pseudo-parameters,\n   * a mapping value, or intrinsic functions.\n   */\n  readonly value: string;\n\n  /**\n   * The name used to export the value of this output across stacks.\n   *\n   * To import the value from another stack, use `Fn.importValue(exportName)`.\n   *\n   * @default - the output is not exported\n   */\n  readonly exportName?: string;\n\n  /**\n   * A condition to associate with this output value. If the condition evaluates\n   * to `false`, this output value will not be included in the stack.\n   *\n   * @default - No condition is associated with the output.\n   */\n  readonly condition?: CfnCondition;\n}\n\nexport class CfnOutput extends CfnElement {\n  private _description?: string;\n  private _condition?: CfnCondition;\n  private _value?: any;\n  private _exportName?: string;\n\n  /**\n   * Creates an CfnOutput value for this stack.\n   * @param scope The parent construct.\n   * @param props CfnOutput properties.\n   */\n  constructor(scope: Construct, id: string, props: CfnOutputProps) {\n    super(scope, id);\n\n    if (props.value === undefined) {\n      throw new Error(`Missing value for CloudFormation output at path \"${this.node.path}\"`);\n    }\n\n    this._description = props.description;\n    this._value = props.value;\n    this._condition = props.condition;\n    this._exportName = props.exportName;\n\n    this.node.addValidation({ validate: () => this.validateOutput() });\n  }\n\n  /**\n   * A String type that describes the output value.\n   * The description can be a maximum of 4 K in length.\n   *\n   * @default - No description.\n   */\n  public get description() {\n    return this._description;\n  }\n\n  public set description(description: string | undefined) {\n    this._description = description;\n  }\n\n  /**\n   * The value of the property returned by the aws cloudformation describe-stacks command.\n   * The value of an output can include literals, parameter references, pseudo-parameters,\n   * a mapping value, or intrinsic functions.\n   */\n  public get value() {\n    return this._value;\n  }\n\n  public set value(value: any) {\n    this._value = value;\n  }\n\n  /**\n   * A condition to associate with this output value. If the condition evaluates\n   * to `false`, this output value will not be included in the stack.\n   *\n   * @default - No condition is associated with the output.\n   */\n  public get condition() {\n    return this._condition;\n  }\n\n  public set condition(condition: CfnCondition | undefined) {\n    this._condition = condition;\n  }\n\n  /**\n   * The name used to export the value of this output across stacks.\n   *\n   * To use the value in another stack, pass the value of\n   * `output.importValue` to it.\n   *\n   * @default - the output is not exported\n   */\n  public get exportName() {\n    return this._exportName;\n  }\n\n  public set exportName(exportName: string | undefined) {\n    this._exportName = exportName;\n  }\n\n  /**\n   * Return the `Fn.importValue` expression to import this value into another stack\n   *\n   * The returned value should not be used in the same stack, but in a\n   * different one. It must be deployed to the same environment, as\n   * CloudFormation exports can only be imported in the same Region and\n   * account.\n   *\n   * The is no automatic registration of dependencies between stacks when using\n   * this mechanism, so you should make sure to deploy them in the right order\n   * yourself.\n   *\n   * You can use this mechanism to share values across Stacks in different\n   * Stages. If you intend to share the value to another Stack inside the same\n   * Stage, the automatic cross-stack referencing mechanism is more convenient.\n   */\n  public get importValue() {\n    // We made _exportName mutable so this will have to be lazy.\n    return Fn.importValue(Lazy.uncachedString({\n      produce: (ctx) => {\n        if (Stack.of(ctx.scope) === this.stack) {\n          throw new Error(`'importValue' property of '${this.node.path}' should only be used in a different Stack`);\n        }\n        if (!this._exportName) {\n          throw new Error(`Add an exportName to the CfnOutput at '${this.node.path}' in order to use 'output.importValue'`);\n        }\n\n        return this._exportName;\n      },\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  public _toCloudFormation(): object {\n    return {\n      Outputs: {\n        [this.logicalId]: {\n          Description: this._description,\n          Value: this._value,\n          Export: this._exportName != null ? { Name: this._exportName } : undefined,\n          Condition: this._condition ? this._condition.logicalId : undefined,\n        },\n      },\n    };\n  }\n\n  private validateOutput(): string[] {\n    if (this._exportName && !Token.isUnresolved(this._exportName) && this._exportName.length > 255) {\n      return [`Export name cannot exceed 255 characters (got ${this._exportName.length} characters)`];\n    }\n    return [];\n  }\n}\n\n/* eslint-disable import/order */\nimport { CfnCondition } from './cfn-condition';\nimport { Fn } from './cfn-fn';\nimport { Lazy } from './lazy';\nimport { Stack } from './stack';\nimport { Token } from './token';\n\n"],
  "mappings": "gNACA,cAAA,QAAA,eAAA,EAoCA,MAAa,iBAAkB,eAAA,UAAU,CAWvC,YAAY,MAAkB,GAAY,MAAqB,CAC7D,MAAM,MAAO,EAAE,EAEf,6DAAI,MAAM,QAAU,OAClB,KAAM,IAAI,OAAM,oDAAoD,KAAK,KAAK,OAAO,EAGvF,KAAK,aAAe,MAAM,YAC1B,KAAK,OAAS,MAAM,MACpB,KAAK,WAAa,MAAM,UACxB,KAAK,YAAc,MAAM,WAEzB,KAAK,KAAK,cAAc,CAAE,SAAU,IAAM,KAAK,eAAc,CAAE,CAAE,KASxD,cAAW,CACpB,MAAO,MAAK,gBAGH,aAAY,YAA+B,CACpD,KAAK,aAAe,eAQX,QAAK,CACd,MAAO,MAAK,UAGH,OAAM,MAAU,CACzB,KAAK,OAAS,SASL,YAAS,CAClB,MAAO,MAAK,cAGH,WAAU,UAAmC,CACtD,KAAK,WAAa,aAWT,aAAU,CACnB,MAAO,MAAK,eAGH,YAAW,WAA8B,CAClD,KAAK,YAAc,cAmBV,cAAW,CAEpB,MAAO,UAAA,GAAG,YAAY,OAAA,KAAK,eAAe,CACxC,QAAS,AAAC,KAAO,CACf,GAAI,QAAA,MAAM,GAAG,IAAI,KAAK,IAAM,KAAK,MAC/B,KAAM,IAAI,OAAM,8BAA8B,KAAK,KAAK,gDAAgD,EAE1G,GAAI,CAAC,KAAK,YACR,KAAM,IAAI,OAAM,0CAA0C,KAAK,KAAK,4CAA4C,EAGlH,MAAO,MAAK,WACd,EACD,CAAC,EAMG,mBAAiB,CACtB,MAAO,CACL,QAAS,EACN,KAAK,WAAY,CAChB,YAAa,KAAK,aAClB,MAAO,KAAK,OACZ,OAAQ,KAAK,aAAe,KAAO,CAAE,KAAM,KAAK,WAAW,EAAK,OAChE,UAAW,KAAK,WAAa,KAAK,WAAW,UAAY,UAMzD,gBAAc,CACpB,MAAI,MAAK,aAAe,CAAC,QAAA,MAAM,aAAa,KAAK,WAAW,GAAK,KAAK,YAAY,OAAS,IAClF,CAAC,iDAAiD,KAAK,YAAY,oBAAoB,EAEzF,CAAA,GAvIX,QAAA,UAAA,6FA6IA,KAAA,UAAA,QAAA,UAAA,EACA,OAAA,QAAA,QAAA,EACA,QAAA,QAAA,SAAA,EACA,QAAA,QAAA,SAAA",
  "names": []
}
