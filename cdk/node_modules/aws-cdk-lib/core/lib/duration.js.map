{
  "version": 3,
  "sources": ["duration.ts"],
  "sourcesContent": ["import { Token, Tokenization } from './token';\n\n/**\n * Represents a length of time.\n *\n * The amount can be specified either as a literal value (e.g: `10`) which\n * cannot be negative, or as an unresolved number token.\n *\n * When the amount is passed as a token, unit conversion is not possible.\n */\nexport class Duration {\n  /**\n   * Create a Duration representing an amount of milliseconds\n   *\n   * @param amount the amount of Milliseconds the `Duration` will represent.\n   * @returns a new `Duration` representing `amount` ms.\n   */\n  public static millis(amount: number): Duration {\n    return new Duration(amount, TimeUnit.Milliseconds);\n  }\n\n  /**\n   * Create a Duration representing an amount of seconds\n   *\n   * @param amount the amount of Seconds the `Duration` will represent.\n   * @returns a new `Duration` representing `amount` Seconds.\n   */\n  public static seconds(amount: number): Duration {\n    return new Duration(amount, TimeUnit.Seconds);\n  }\n\n  /**\n   * Create a Duration representing an amount of minutes\n   *\n   * @param amount the amount of Minutes the `Duration` will represent.\n   * @returns a new `Duration` representing `amount` Minutes.\n   */\n  public static minutes(amount: number): Duration {\n    return new Duration(amount, TimeUnit.Minutes);\n  }\n\n  /**\n   * Create a Duration representing an amount of hours\n   *\n   * @param amount the amount of Hours the `Duration` will represent.\n   * @returns a new `Duration` representing `amount` Hours.\n   */\n  public static hours(amount: number): Duration {\n    return new Duration(amount, TimeUnit.Hours);\n  }\n\n  /**\n   * Create a Duration representing an amount of days\n   *\n   * @param amount the amount of Days the `Duration` will represent.\n   * @returns a new `Duration` representing `amount` Days.\n   */\n  public static days(amount: number): Duration {\n    return new Duration(amount, TimeUnit.Days);\n  }\n\n  /**\n   * Parse a period formatted according to the ISO 8601 standard\n   *\n   * @see https://www.iso.org/fr/standard/70907.html\n   * @param duration an ISO-formtted duration to be parsed.\n   * @returns the parsed `Duration`.\n   */\n  public static parse(duration: string): Duration {\n    const matches = duration.match(/^P(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?$/);\n    if (!matches) {\n      throw new Error(`Not a valid ISO duration: ${duration}`);\n    }\n    const [, days, hours, minutes, seconds] = matches;\n    if (!days && !hours && !minutes && !seconds) {\n      throw new Error(`Not a valid ISO duration: ${duration}`);\n    }\n    return Duration.millis(\n      _toInt(seconds) * TimeUnit.Seconds.inMillis\n      + (_toInt(minutes) * TimeUnit.Minutes.inMillis)\n      + (_toInt(hours) * TimeUnit.Hours.inMillis)\n      + (_toInt(days) * TimeUnit.Days.inMillis),\n    );\n\n    function _toInt(str: string): number {\n      if (!str) { return 0; }\n      return Number(str);\n    }\n  }\n\n  private readonly amount: number;\n  private readonly unit: TimeUnit;\n\n  private constructor(amount: number, unit: TimeUnit) {\n    if (!Token.isUnresolved(amount) && amount < 0) {\n      throw new Error(`Duration amounts cannot be negative. Received: ${amount}`);\n    }\n\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  /**\n   * Add two Durations together\n   */\n  public plus(rhs: Duration): Duration {\n    const targetUnit = finestUnit(this.unit, rhs.unit);\n    const res = convert(this.amount, this.unit, targetUnit, {}) + convert(rhs.amount, rhs.unit, targetUnit, {});\n    return new Duration(res, targetUnit);\n  }\n\n  /**\n   * Substract two Durations together\n   */\n  public minus(rhs: Duration): Duration {\n    const targetUnit = finestUnit(this.unit, rhs.unit);\n    const res = convert(this.amount, this.unit, targetUnit, {}) - convert(rhs.amount, rhs.unit, targetUnit, {});\n    return new Duration(res, targetUnit);\n  }\n\n  /**\n   * Return the total number of milliseconds in this Duration\n   *\n   * @returns the value of this `Duration` expressed in Milliseconds.\n   */\n  public toMilliseconds(opts: TimeConversionOptions = {}): number {\n    return convert(this.amount, this.unit, TimeUnit.Milliseconds, opts);\n  }\n\n  /**\n   * Return the total number of seconds in this Duration\n   *\n   * @returns the value of this `Duration` expressed in Seconds.\n   */\n  public toSeconds(opts: TimeConversionOptions = {}): number {\n    return convert(this.amount, this.unit, TimeUnit.Seconds, opts);\n  }\n\n  /**\n   * Return the total number of minutes in this Duration\n   *\n   * @returns the value of this `Duration` expressed in Minutes.\n   */\n  public toMinutes(opts: TimeConversionOptions = {}): number {\n    return convert(this.amount, this.unit, TimeUnit.Minutes, opts);\n  }\n\n  /**\n   * Return the total number of hours in this Duration\n   *\n   * @returns the value of this `Duration` expressed in Hours.\n   */\n  public toHours(opts: TimeConversionOptions = {}): number {\n    return convert(this.amount, this.unit, TimeUnit.Hours, opts);\n  }\n\n  /**\n   * Return the total number of days in this Duration\n   *\n   * @returns the value of this `Duration` expressed in Days.\n   */\n  public toDays(opts: TimeConversionOptions = {}): number {\n    return convert(this.amount, this.unit, TimeUnit.Days, opts);\n  }\n\n  /**\n   * Return an ISO 8601 representation of this period\n   *\n   * @returns a string starting with 'P' describing the period\n   * @see https://www.iso.org/fr/standard/70907.html\n   */\n  public toIsoString(): string {\n    if (this.amount === 0) { return 'PT0S'; }\n\n    const ret = ['P'];\n    let tee = false;\n\n    for (const [amount, unit] of this.components(true)) {\n      if ([TimeUnit.Seconds, TimeUnit.Minutes, TimeUnit.Hours].includes(unit) && !tee) {\n        ret.push('T');\n        tee = true;\n      }\n      ret.push(`${amount}${unit.isoLabel}`);\n    }\n\n    return ret.join('');\n  }\n\n  /**\n   * Return an ISO 8601 representation of this period\n   *\n   * @returns a string starting with 'P' describing the period\n   * @see https://www.iso.org/fr/standard/70907.html\n   * @deprecated Use `toIsoString()` instead.\n   */\n  public toISOString(): string {\n    return this.toIsoString();\n  }\n\n  /**\n   * Turn this duration into a human-readable string\n   */\n  public toHumanString(): string {\n    if (this.amount === 0) { return fmtUnit(0, this.unit); }\n    if (Token.isUnresolved(this.amount)) { return `<token> ${this.unit.label}`; }\n\n    return this.components(false)\n      // 2 significant parts, that's totally enough for humans\n      .slice(0, 2)\n      .map(([amount, unit]) => fmtUnit(amount, unit))\n      .join(' ');\n\n    function fmtUnit(amount: number, unit: TimeUnit) {\n      if (amount === 1) {\n        // All of the labels end in 's'\n        return `${amount} ${unit.label.substring(0, unit.label.length - 1)}`;\n      }\n      return `${amount} ${unit.label}`;\n    }\n  }\n\n  /**\n   * Returns a string representation of this `Duration`\n   *\n   * This is is never the right function to use when you want to use the `Duration`\n   * object in a template. Use `toSeconds()`, `toMinutes()`, `toDays()`, etc. instead.\n   */\n  public toString(): string {\n    return `Duration.${this.unit.label}(${this.amount})`;\n  }\n\n  /**\n   * Return the duration in a set of whole numbered time components, ordered from largest to smallest\n   *\n   * Only components != 0 will be returned.\n   *\n   * Can combine millis and seconds together for the benefit of toIsoString,\n   * makes the logic in there simpler.\n   */\n  private components(combineMillisWithSeconds: boolean): Array<[number, TimeUnit]> {\n    const ret = new Array<[number, TimeUnit]>();\n    let millis = convert(this.amount, this.unit, TimeUnit.Milliseconds, { integral: false });\n\n    for (const unit of [TimeUnit.Days, TimeUnit.Hours, TimeUnit.Minutes, TimeUnit.Seconds]) {\n      const count = convert(millis, TimeUnit.Milliseconds, unit, { integral: false });\n      // Round down to a whole number UNLESS we're combining millis and seconds and we got to the seconds\n      const wholeCount = unit === TimeUnit.Seconds && combineMillisWithSeconds ? count : Math.floor(count);\n      if (wholeCount > 0) {\n        ret.push([wholeCount, unit]);\n        millis -= wholeCount * unit.inMillis;\n      }\n    }\n\n    // Remainder in millis\n    if (millis > 0) {\n      ret.push([millis, TimeUnit.Milliseconds]);\n    }\n    return ret;\n  }\n\n  /**\n   * Checks if duration is a token or a resolvable object\n   */\n  public isUnresolved() {\n    return Token.isUnresolved(this.amount);\n  }\n\n  /**\n   * Returns unit of the duration\n   */\n  public unitLabel() {\n    return this.unit.label;\n  }\n\n  /**\n   * Returns stringified number of duration\n   */\n  public formatTokenToNumber(): string {\n    const number = Tokenization.stringifyNumber(this.amount);\n    return `${number} ${this.unit.label}`;\n  }\n}\n\n/**\n * Options for how to convert time to a different unit.\n */\nexport interface TimeConversionOptions {\n  /**\n   * If `true`, conversions into a larger time unit (e.g. `Seconds` to `Minutes`) will fail if the result is not an\n   * integer.\n   *\n   * @default true\n   */\n  readonly integral?: boolean;\n}\n\nclass TimeUnit {\n  public static readonly Milliseconds = new TimeUnit('millis', '', 1);\n  public static readonly Seconds = new TimeUnit('seconds', 'S', 1_000);\n  public static readonly Minutes = new TimeUnit('minutes', 'M', 60_000);\n  public static readonly Hours = new TimeUnit('hours', 'H', 3_600_000);\n  public static readonly Days = new TimeUnit('days', 'D', 86_400_000);\n\n  private constructor(public readonly label: string, public readonly isoLabel: string, public readonly inMillis: number) {\n    // MAX_SAFE_INTEGER is 2^53, so by representing our duration in millis (the lowest\n    // common unit) the highest duration we can represent is\n    // 2^53 / 86*10^6 ~= 104 * 10^6 days (about 100 million days).\n  }\n\n  public toString() {\n    return this.label;\n  }\n}\n\nfunction convert(amount: number, fromUnit: TimeUnit, toUnit: TimeUnit, { integral = true }: TimeConversionOptions) {\n  if (fromUnit.inMillis === toUnit.inMillis) { return amount; }\n\n  if (Token.isUnresolved(amount)) {\n    throw new Error(`Duration must be specified as 'Duration.${toUnit}()' here since its value comes from a token and cannot be converted (got Duration.${fromUnit})`);\n  }\n  const value = (amount * fromUnit.inMillis) / toUnit.inMillis;\n  if (!Number.isInteger(value) && integral) {\n    throw new Error(`'${amount} ${fromUnit}' cannot be converted into a whole number of ${toUnit}.`);\n  }\n  return value;\n}\n\n/**\n * Return the time unit with highest granularity\n */\nfunction finestUnit(a: TimeUnit, b: TimeUnit) {\n  return a.inMillis < b.inMillis ? a : b;\n}\n"],
  "mappings": "+MAAA,QAAA,QAAA,SAAA,EAUA,MAAa,QAAQ,CAmFnB,YAAoB,OAAgB,KAAc,CAChD,GAAI,CAAC,QAAA,MAAM,aAAa,MAAM,GAAK,OAAS,EAC1C,KAAM,IAAI,OAAM,kDAAkD,QAAQ,EAG5E,KAAK,OAAS,OACd,KAAK,KAAO,WAlFA,QAAO,OAAc,CACjC,MAAO,IAAI,UAAS,OAAQ,SAAS,YAAY,QASrC,SAAQ,OAAc,CAClC,MAAO,IAAI,UAAS,OAAQ,SAAS,OAAO,QAShC,SAAQ,OAAc,CAClC,MAAO,IAAI,UAAS,OAAQ,SAAS,OAAO,QAShC,OAAM,OAAc,CAChC,MAAO,IAAI,UAAS,OAAQ,SAAS,KAAK,QAS9B,MAAK,OAAc,CAC/B,MAAO,IAAI,UAAS,OAAQ,SAAS,IAAI,QAU7B,OAAM,SAAgB,CAClC,KAAM,SAAU,SAAS,MAAM,uDAAuD,EACtF,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,6BAA6B,UAAU,EAEzD,KAAM,CAAC,CAAE,KAAM,MAAO,QAAS,SAAW,QAC1C,GAAI,CAAC,MAAQ,CAAC,OAAS,CAAC,SAAW,CAAC,QAClC,KAAM,IAAI,OAAM,6BAA6B,UAAU,EAEzD,MAAO,UAAS,OACd,OAAO,OAAO,EAAI,SAAS,QAAQ,SAChC,OAAO,OAAO,EAAI,SAAS,QAAQ,SACnC,OAAO,KAAK,EAAI,SAAS,MAAM,SAC/B,OAAO,IAAI,EAAI,SAAS,KAAK,QAAS,EAG3C,gBAAgB,IAAW,CACzB,MAAK,KACE,OAAO,GAAG,EADE,CAErB,EAkBK,KAAK,IAAa,mDACvB,KAAM,YAAa,WAAW,KAAK,KAAM,IAAI,IAAI,EAC3C,IAAM,QAAQ,KAAK,OAAQ,KAAK,KAAM,WAAY,CAAA,CAAE,EAAI,QAAQ,IAAI,OAAQ,IAAI,KAAM,WAAY,CAAA,CAAE,EAC1G,MAAO,IAAI,UAAS,IAAK,UAAU,EAM9B,MAAM,IAAa,mDACxB,KAAM,YAAa,WAAW,KAAK,KAAM,IAAI,IAAI,EAC3C,IAAM,QAAQ,KAAK,OAAQ,KAAK,KAAM,WAAY,CAAA,CAAE,EAAI,QAAQ,IAAI,OAAQ,IAAI,KAAM,WAAY,CAAA,CAAE,EAC1G,MAAO,IAAI,UAAS,IAAK,UAAU,EAQ9B,eAAe,KAA8B,CAAA,EAAE,wEAC7C,QAAQ,KAAK,OAAQ,KAAK,KAAM,SAAS,aAAc,IAAI,EAQ7D,UAAU,KAA8B,CAAA,EAAE,wEACxC,QAAQ,KAAK,OAAQ,KAAK,KAAM,SAAS,QAAS,IAAI,EAQxD,UAAU,KAA8B,CAAA,EAAE,wEACxC,QAAQ,KAAK,OAAQ,KAAK,KAAM,SAAS,QAAS,IAAI,EAQxD,QAAQ,KAA8B,CAAA,EAAE,wEACtC,QAAQ,KAAK,OAAQ,KAAK,KAAM,SAAS,MAAO,IAAI,EAQtD,OAAO,KAA8B,CAAA,EAAE,wEACrC,QAAQ,KAAK,OAAQ,KAAK,KAAM,SAAS,KAAM,IAAI,EASrD,aAAW,CAChB,GAAI,KAAK,SAAW,EAAK,MAAO,OAEhC,KAAM,KAAM,CAAC,GAAG,EAChB,GAAI,KAAM,GAEV,SAAW,CAAC,OAAQ,OAAS,MAAK,WAAW,EAAI,EAC/C,AAAI,CAAC,SAAS,QAAS,SAAS,QAAS,SAAS,KAAK,EAAE,SAAS,IAAI,GAAK,CAAC,KAC1E,KAAI,KAAK,GAAG,EACZ,IAAM,IAER,IAAI,KAAK,GAAG,SAAS,KAAK,UAAU,EAGtC,MAAO,KAAI,KAAK,EAAE,EAUb,aAAW,CAChB,MAAO,MAAK,YAAW,EAMlB,eAAa,CAClB,GAAI,KAAK,SAAW,EAAK,MAAO,SAAQ,EAAG,KAAK,IAAI,EACpD,GAAI,QAAA,MAAM,aAAa,KAAK,MAAM,EAAK,MAAO,WAAW,KAAK,KAAK,QAEnE,MAAO,MAAK,WAAW,EAAK,EAEzB,MAAM,EAAG,CAAC,EACV,IAAI,CAAC,CAAC,OAAQ,QAAU,QAAQ,OAAQ,IAAI,CAAC,EAC7C,KAAK,GAAG,EAEX,iBAAiB,OAAgB,KAAc,CAC7C,MAAI,UAAW,EAEN,GAAG,UAAU,KAAK,MAAM,UAAU,EAAG,KAAK,MAAM,OAAS,CAAC,IAE5D,GAAG,UAAU,KAAK,OAC3B,EASK,UAAQ,CACb,MAAO,YAAY,KAAK,KAAK,SAAS,KAAK,UAWrC,WAAW,yBAAiC,CAClD,KAAM,KAAM,GAAI,OAChB,GAAI,QAAS,QAAQ,KAAK,OAAQ,KAAK,KAAM,SAAS,aAAc,CAAE,SAAU,EAAK,CAAE,EAEvF,SAAW,QAAQ,CAAC,SAAS,KAAM,SAAS,MAAO,SAAS,QAAS,SAAS,OAAO,EAAG,CACtF,KAAM,OAAQ,QAAQ,OAAQ,SAAS,aAAc,KAAM,CAAE,SAAU,EAAK,CAAE,EAExE,WAAa,OAAS,SAAS,SAAW,yBAA2B,MAAQ,KAAK,MAAM,KAAK,EACnG,AAAI,WAAa,GACf,KAAI,KAAK,CAAC,WAAY,IAAI,CAAC,EAC3B,QAAU,WAAa,KAAK,UAKhC,MAAI,QAAS,GACX,IAAI,KAAK,CAAC,OAAQ,SAAS,YAAY,CAAC,EAEnC,IAMF,cAAY,CACjB,MAAO,SAAA,MAAM,aAAa,KAAK,MAAM,EAMhC,WAAS,CACd,MAAO,MAAK,KAAK,MAMZ,qBAAmB,CAExB,MAAO,GADQ,QAAA,aAAa,gBAAgB,KAAK,MAAM,KACnC,KAAK,KAAK,SA7QlC,QAAA,SAAA,0FA8RA,MAAM,QAAQ,CAOZ,YAAoC,MAA+B,SAAkC,SAAgB,CAAjF,KAAA,MAAA,MAA+B,KAAA,SAAA,SAAkC,KAAA,SAAA,SAM9F,UAAQ,CACb,MAAO,MAAK,OAbS,SAAA,aAAe,GAAI,UAAS,SAAU,GAAI,CAAC,EAC3C,SAAA,QAAU,GAAI,UAAS,UAAW,IAAK,GAAK,EAC5C,SAAA,QAAU,GAAI,UAAS,UAAW,IAAK,GAAM,EAC7C,SAAA,MAAQ,GAAI,UAAS,QAAS,IAAK,IAAS,EAC5C,SAAA,KAAO,GAAI,UAAS,OAAQ,IAAK,KAAU,EAapE,iBAAiB,OAAgB,SAAoB,OAAkB,CAAE,SAAW,IAA6B,CAC/G,GAAI,SAAS,WAAa,OAAO,SAAY,MAAO,QAEpD,GAAI,QAAA,MAAM,aAAa,MAAM,EAC3B,KAAM,IAAI,OAAM,2CAA2C,2FAA2F,WAAW,EAEnK,KAAM,OAAS,OAAS,SAAS,SAAY,OAAO,SACpD,GAAI,CAAC,OAAO,UAAU,KAAK,GAAK,SAC9B,KAAM,IAAI,OAAM,IAAI,UAAU,wDAAwD,SAAS,EAEjG,MAAO,MACT,CAKA,oBAAoB,EAAa,EAAW,CAC1C,MAAO,GAAE,SAAW,EAAE,SAAW,EAAI,CACvC",
  "names": []
}
