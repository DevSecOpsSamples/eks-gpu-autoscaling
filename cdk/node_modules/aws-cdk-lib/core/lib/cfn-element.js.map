{
  "version": 3,
  "sources": ["cfn-element.ts"],
  "sourcesContent": ["import * as cxschema from '../../cloud-assembly-schema';\nimport { Construct, Node } from 'constructs';\nimport { Lazy } from './lazy';\n\nconst CFN_ELEMENT_SYMBOL = Symbol.for('@aws-cdk/core.CfnElement');\n\n/**\n * An element of a CloudFormation stack.\n */\nexport abstract class CfnElement extends Construct {\n  /**\n   * Returns `true` if a construct is a stack element (i.e. part of the\n   * synthesized cloudformation template).\n   *\n   * Uses duck-typing instead of `instanceof` to allow stack elements from different\n   * versions of this library to be included in the same stack.\n   *\n   * @returns The construct as a stack element or undefined if it is not a stack element.\n   */\n  public static isCfnElement(x: any): x is CfnElement {\n    return CFN_ELEMENT_SYMBOL in x;\n  }\n\n  /**\n   * The logical ID for this CloudFormation stack element. The logical ID of the element\n   * is calculated from the path of the resource node in the construct tree.\n   *\n   * To override this value, use `overrideLogicalId(newLogicalId)`.\n   *\n   * @returns the logical ID as a stringified token. This value will only get\n   * resolved during synthesis.\n   */\n  public readonly logicalId: string;\n\n  /**\n   * The stack in which this element is defined. CfnElements must be defined within a stack scope (directly or indirectly).\n   */\n  public readonly stack: Stack;\n\n  /**\n   * An explicit logical ID provided by `overrideLogicalId`.\n   */\n  private _logicalIdOverride?: string;\n\n  /**\n   * Creates an entity and binds it to a tree.\n   * Note that the root of the tree must be a Stack object (not just any Root).\n   *\n   * @param scope The parent construct\n   * @param props Construct properties\n   */\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    Object.defineProperty(this, CFN_ELEMENT_SYMBOL, { value: true });\n\n    this.stack = Stack.of(this);\n\n    this.logicalId = Lazy.uncachedString({ produce: () => this.synthesizeLogicalId() }, {\n      displayHint: `${notTooLong(Node.of(this).path)}.LogicalID`,\n    });\n\n    this.node.addMetadata(cxschema.ArtifactMetadataEntryType.LOGICAL_ID, this.logicalId, {\n      traceFromFunction: this.constructor,\n    });\n  }\n\n  /**\n   * Overrides the auto-generated logical ID with a specific ID.\n   * @param newLogicalId The new logical ID to use for this stack element.\n   */\n  public overrideLogicalId(newLogicalId: string) {\n    this._logicalIdOverride = newLogicalId;\n  }\n\n  /**\n   * @returns the stack trace of the point where this Resource was created from, sourced\n   *      from the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most\n   *      node +internal+ entries filtered.\n   */\n  public get creationStack(): string[] {\n    const trace = Node.of(this).metadata.find(md => md.type === cxschema.ArtifactMetadataEntryType.LOGICAL_ID)!.trace;\n    if (!trace) {\n      return [];\n    }\n\n    return filterStackTrace(trace);\n\n    function filterStackTrace(stack: string[]): string[] {\n      const result = Array.of(...stack);\n      while (result.length > 0 && shouldFilter(result[result.length - 1])) {\n        result.pop();\n      }\n      // It's weird if we filtered everything, so return the whole stack...\n      return result.length === 0 ? stack : result;\n    }\n\n    function shouldFilter(str: string): boolean {\n      return str.match(/[^(]+\\(internal\\/.*/) !== null;\n    }\n  }\n\n  /**\n   * Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\n   * at the root level to ensure there are no identity conflicts.\n   *\n   * For example, a Resource class will return something like:\n   * {\n   *   Resources: {\n   *     [this.logicalId]: {\n   *       Type: this.resourceType,\n   *       Properties: this.props,\n   *       Condition: this.condition\n   *     }\n   *   }\n   * }\n   *\n   * @internal\n   */\n  public abstract _toCloudFormation(): object;\n\n  /**\n   * Called during synthesize to render the logical ID of this element. If\n   * `overrideLogicalId` was it will be used, otherwise, we will allocate the\n   * logical ID through the stack.\n   */\n  private synthesizeLogicalId() {\n    if (this._logicalIdOverride) {\n      return this._logicalIdOverride;\n    } else {\n      return this.stack.getLogicalId(this);\n    }\n  }\n}\n\n/**\n * Base class for referenceable CloudFormation constructs which are not Resources\n *\n * These constructs are things like Conditions and Parameters, can be\n * referenced by taking the `.ref` attribute.\n *\n * Resource constructs do not inherit from CfnRefElement because they have their\n * own, more specific types returned from the .ref attribute. Also, some\n * resources aren't referenceable at all (such as BucketPolicies or GatewayAttachments).\n */\nexport abstract class CfnRefElement extends CfnElement {\n  /**\n   * Return a string that will be resolved to a CloudFormation `{ Ref }` for this element.\n   *\n   * If, by any chance, the intrinsic reference of a resource is not a string, you could\n   * coerce it to an IResolvable through `Lazy.any({ produce: resource.ref })`.\n   */\n  public get ref(): string {\n    return Token.asString(CfnReference.for(this, 'Ref'));\n  }\n}\n\nfunction notTooLong(x: string) {\n  if (x.length < 100) { return x; }\n  return x.slice(0, 47) + '...' + x.slice(-47);\n}\n\nimport { CfnReference } from './private/cfn-reference';\nimport { Stack } from './stack';\nimport { Token } from './token';\n"],
  "mappings": "+KAAA,SAAA,QAAA,6BAAA,EACA,aAAA,QAAA,YAAA,EACA,OAAA,QAAA,QAAA,EAEM,mBAAqB,OAAO,IAAI,0BAA0B,EAKhE,MAAsB,kBAAmB,cAAA,SAAS,CA0ChD,YAAY,MAAkB,GAAU,CACtC,MAAM,MAAO,EAAE,EAEf,OAAO,eAAe,KAAM,mBAAoB,CAAE,MAAO,EAAI,CAAE,EAE/D,KAAK,MAAQ,QAAA,MAAM,GAAG,IAAI,EAE1B,KAAK,UAAY,OAAA,KAAK,eAAe,CAAE,QAAS,IAAM,KAAK,oBAAmB,CAAE,EAAI,CAClF,YAAa,GAAG,WAAW,aAAA,KAAK,GAAG,IAAI,EAAE,IAAI,cAC9C,EAED,KAAK,KAAK,YAAY,SAAS,0BAA0B,WAAY,KAAK,UAAW,CACnF,kBAAmB,KAAK,YACzB,QA7CW,cAAa,EAAM,CAC/B,MAAO,sBAAsB,GAmDxB,kBAAkB,aAAoB,CAC3C,KAAK,mBAAqB,gBAQjB,gBAAa,CACtB,KAAM,OAAQ,aAAA,KAAK,GAAG,IAAI,EAAE,SAAS,KAAK,IAAM,GAAG,OAAS,SAAS,0BAA0B,UAAU,EAAG,MAC5G,GAAI,CAAC,MACH,MAAO,CAAA,EAGT,MAAO,kBAAiB,KAAK,EAE7B,0BAA0B,MAAe,CACvC,KAAM,QAAS,MAAM,GAAG,GAAG,KAAK,EAChC,KAAO,OAAO,OAAS,GAAK,aAAa,OAAO,OAAO,OAAS,EAAE,GAChE,OAAO,IAAG,EAGZ,MAAO,QAAO,SAAW,EAAI,MAAQ,MACvC,CAEA,sBAAsB,IAAW,CAC/B,MAAO,KAAI,MAAM,qBAAqB,IAAM,IAC9C,EA2BM,qBAAmB,CACzB,MAAI,MAAK,mBACA,KAAK,mBAEL,KAAK,MAAM,aAAa,IAAI,GAzHzC,QAAA,WAAA,gGAwIA,MAAsB,qBAAsB,WAAU,IAOzC,MAAG,CACZ,MAAO,SAAA,MAAM,SAAS,gBAAA,aAAa,IAAI,KAAM,KAAK,CAAC,GARvD,QAAA,cAAA,yGAYA,oBAAoB,EAAS,CAC3B,MAAI,GAAE,OAAS,IAAc,EACtB,EAAE,MAAM,EAAG,EAAE,EAAI,MAAQ,EAAE,MAAM,GAAG,CAC7C,CAEA,KAAA,iBAAA,QAAA,yBAAA,EACA,QAAA,QAAA,SAAA,EACA,QAAA,QAAA,SAAA",
  "names": []
}
