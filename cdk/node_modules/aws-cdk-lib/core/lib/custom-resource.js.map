{
  "version": 3,
  "sources": ["custom-resource.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnResource } from './cfn-resource';\nimport { RemovalPolicy } from './removal-policy';\nimport { Resource } from './resource';\nimport { Token } from './token';\n\n/**\n * Properties to provide a Lambda-backed custom resource\n */\nexport interface CustomResourceProps {\n  /**\n   * The ARN of the provider which implements this custom resource type.\n   *\n   * You can implement a provider by listening to raw AWS CloudFormation events\n   * and specify the ARN of an SNS topic (`topic.topicArn`) or the ARN of an AWS\n   * Lambda function (`lambda.functionArn`) or use the CDK's custom [resource\n   * provider framework] which makes it easier to implement robust providers.\n   *\n   * [resource provider framework]:\n   * https://docs.aws.amazon.com/cdk/api/latest/docs/custom-resources-readme.html\n   *\n   * Provider framework:\n   *\n   * ```ts\n   * // use the provider framework from aws-cdk/custom-resources:\n   * const provider = new customresources.Provider(this, 'ResourceProvider', {\n   *   onEventHandler,\n   *   isCompleteHandler, // optional\n   * });\n   *\n   * new CustomResource(this, 'MyResource', {\n   *   serviceToken: provider.serviceToken,\n   * });\n   * ```\n   *\n   * AWS Lambda function:\n   *\n   * ```ts\n   * // invoke an AWS Lambda function when a lifecycle event occurs:\n   * new CustomResource(this, 'MyResource', {\n   *   serviceToken: myFunction.functionArn,\n   * });\n   * ```\n   *\n   * SNS topic:\n   *\n   * ```ts\n   * // publish lifecycle events to an SNS topic:\n   * new CustomResource(this, 'MyResource', {\n   *   serviceToken: myTopic.topicArn,\n   * });\n   * ```\n   */\n  readonly serviceToken: string;\n\n  /**\n   * Properties to pass to the Lambda\n   *\n   * @default - No properties.\n   */\n  readonly properties?: { [key: string]: any };\n\n  /**\n   * For custom resources, you can specify AWS::CloudFormation::CustomResource\n   * (the default) as the resource type, or you can specify your own resource\n   * type name. For example, you can use \"Custom::MyCustomResourceTypeName\".\n   *\n   * Custom resource type names must begin with \"Custom::\" and can include\n   * alphanumeric characters and the following characters: _@-. You can specify\n   * a custom resource type name up to a maximum length of 60 characters. You\n   * cannot change the type during an update.\n   *\n   * Using your own resource type names helps you quickly differentiate the\n   * types of custom resources in your stack. For example, if you had two custom\n   * resources that conduct two different ping tests, you could name their type\n   * as Custom::PingTester to make them easily identifiable as ping testers\n   * (instead of using AWS::CloudFormation::CustomResource).\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html#aws-cfn-resource-type-name\n   *\n   * @default - AWS::CloudFormation::CustomResource\n   */\n  readonly resourceType?: string;\n\n  /**\n   * The policy to apply when this resource is removed from the application.\n   *\n   * @default cdk.RemovalPolicy.Destroy\n   */\n  readonly removalPolicy?: RemovalPolicy;\n\n  /**\n   * Convert all property keys to pascal case.\n   *\n   * @default false\n   */\n  readonly pascalCaseProperties?: boolean;\n}\n\n/**\n * Instantiation of a custom resource, whose implementation is provided a Provider\n *\n * This class is intended to be used by construct library authors. Application\n * builder should not be able to tell whether or not a construct is backed by\n * a custom resource, and so the use of this class should be invisible.\n *\n * Instead, construct library authors declare a custom construct that hides the\n * choice of provider, and accepts a strongly-typed properties object with the\n * properties your provider accepts.\n *\n * Your custom resource provider (identified by the `serviceToken` property)\n * can be one of 4 constructs:\n *\n * - If you are authoring a construct library or application, we recommend you\n *   use the `Provider` class in the `custom-resources` module.\n * - If you are authoring a construct for the CDK's AWS Construct Library,\n *   you should use the `CustomResourceProvider` construct in this package.\n * - If you want full control over the provider, you can always directly use\n *   a Lambda Function or SNS Topic by passing the ARN into `serviceToken`.\n *\n * @resource AWS::CloudFormation::CustomResource\n */\nexport class CustomResource extends Resource {\n  private readonly resource: CfnResource;\n\n  constructor(scope: Construct, id: string, props: CustomResourceProps) {\n    super(scope, id);\n\n    const type = renderResourceType(props.resourceType);\n    const pascalCaseProperties = props.pascalCaseProperties ?? false;\n    const properties = pascalCaseProperties ? uppercaseProperties(props.properties || {}) : (props.properties || {});\n\n    this.resource = new CfnResource(this, 'Default', {\n      type,\n      properties: {\n        ServiceToken: props.serviceToken,\n        ...properties,\n      },\n    });\n\n    this.resource.applyRemovalPolicy(props.removalPolicy, {\n      default: RemovalPolicy.DESTROY,\n    });\n  }\n\n  /**\n   * The physical name of this custom resource.\n   */\n  public get ref() {\n    return this.resource.ref;\n  }\n\n  /**\n   * Returns the value of an attribute of the custom resource of an arbitrary\n   * type. Attributes are returned from the custom resource provider through the\n   * `Data` map where the key is the attribute name.\n   *\n   * @param attributeName the name of the attribute\n   * @returns a token for `Fn::GetAtt`. Use `Token.asXxx` to encode the returned `Reference` as a specific type or\n   * use the convenience `getAttString` for string attributes.\n   */\n  public getAtt(attributeName: string) {\n    return this.resource.getAtt(attributeName);\n  }\n\n  /**\n   * Returns the value of an attribute of the custom resource of type string.\n   * Attributes are returned from the custom resource provider through the\n   * `Data` map where the key is the attribute name.\n   *\n   * @param attributeName the name of the attribute\n   * @returns a token for `Fn::GetAtt` encoded as a string.\n   */\n  public getAttString(attributeName: string): string {\n    return Token.asString(this.getAtt(attributeName));\n  }\n}\n\n/**\n * Uppercase the first letter of every property name\n *\n * It's customary for CloudFormation properties to start with capitals, and our\n * properties to start with lowercase, so this function translates from one\n * to the other\n */\nfunction uppercaseProperties(props: { [key: string]: any }) {\n  const ret: { [key: string]: any } = {};\n  Object.keys(props).forEach(key => {\n    const upper = key.slice(0, 1).toUpperCase() + key.slice(1);\n    ret[upper] = props[key];\n  });\n  return ret;\n}\n\nfunction renderResourceType(resourceType?: string) {\n  if (!resourceType) {\n    return 'AWS::CloudFormation::CustomResource';\n  }\n\n  if (!resourceType.startsWith('Custom::')) {\n    throw new Error(`Custom resource type must begin with \"Custom::\" (${resourceType})`);\n  }\n\n  const typeName = resourceType.slice(resourceType.indexOf('::') + 2);\n  if (typeName.length > 60) {\n    throw new Error(`Custom resource type length > 60 (${resourceType})`);\n  }\n\n  if (!/^[a-z0-9_@-]+$/i.test(typeName)) {\n    throw new Error(`Custom resource type name can only include alphanumeric characters and _@- (${typeName})`);\n  }\n\n  return resourceType;\n}\n"],
  "mappings": "qNACA,eAAA,QAAA,gBAAA,EACA,iBAAA,QAAA,kBAAA,EACA,WAAA,QAAA,YAAA,EACA,QAAA,QAAA,SAAA,EAsHA,MAAa,sBAAuB,YAAA,QAAQ,CAG1C,YAAY,MAAkB,GAAY,MAA0B,QAClE,MAAM,MAAO,EAAE,iEAEf,KAAM,MAAO,mBAAmB,MAAM,YAAY,EAE5C,WAAa,AADO,KAAG,MAAM,wBAAoB,MAAA,KAAA,OAAA,GAAI,IACjB,oBAAoB,MAAM,YAAc,CAAA,CAAE,EAAK,MAAM,YAAc,CAAA,EAE7G,KAAK,SAAW,GAAI,gBAAA,YAAY,KAAM,UAAW,CAC/C,KACA,WAAY,CACV,aAAc,MAAM,gBACjB,YAEN,EAED,KAAK,SAAS,mBAAmB,MAAM,cAAe,CACpD,QAAS,iBAAA,cAAc,QACxB,KAMQ,MAAG,CACZ,MAAO,MAAK,SAAS,IAYhB,OAAO,cAAqB,CACjC,MAAO,MAAK,SAAS,OAAO,aAAa,EAWpC,aAAa,cAAqB,CACvC,MAAO,SAAA,MAAM,SAAS,KAAK,OAAO,aAAa,CAAC,GApDpD,QAAA,eAAA,4GA+DA,6BAA6B,MAA6B,CACxD,KAAM,KAA8B,CAAA,EACpC,cAAO,KAAK,KAAK,EAAE,QAAQ,KAAM,CAC/B,KAAM,OAAQ,IAAI,MAAM,EAAG,CAAC,EAAE,YAAW,EAAK,IAAI,MAAM,CAAC,EACzD,IAAI,OAAS,MAAM,IACrB,CAAC,EACM,GACT,CAEA,4BAA4B,aAAqB,CAC/C,GAAI,CAAC,aACH,MAAO,sCAGT,GAAI,CAAC,aAAa,WAAW,UAAU,EACrC,KAAM,IAAI,OAAM,oDAAoD,eAAe,EAGrF,KAAM,UAAW,aAAa,MAAM,aAAa,QAAQ,IAAI,EAAI,CAAC,EAClE,GAAI,SAAS,OAAS,GACpB,KAAM,IAAI,OAAM,qCAAqC,eAAe,EAGtE,GAAI,CAAC,kBAAkB,KAAK,QAAQ,EAClC,KAAM,IAAI,OAAM,+EAA+E,WAAW,EAG5G,MAAO,aACT",
  "names": []
}
