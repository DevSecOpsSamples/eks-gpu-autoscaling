{
  "version": 3,
  "sources": ["nested-stack.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\nimport * as cxapi from '../../cx-api';\nimport { Construct, Node } from 'constructs';\nimport { FileAssetPackaging } from './assets';\nimport { Fn } from './cfn-fn';\nimport { Aws } from './cfn-pseudo';\nimport { CfnResource } from './cfn-resource';\nimport { CfnStack } from './cloudformation.generated';\nimport { Duration } from './duration';\nimport { Lazy } from './lazy';\nimport { Names } from './names';\nimport { RemovalPolicy } from './removal-policy';\nimport { IResolveContext } from './resolvable';\nimport { Stack } from './stack';\nimport { NestedStackSynthesizer } from './stack-synthesizers';\nimport { Token } from './token';\n\nconst NESTED_STACK_SYMBOL = Symbol.for('@aws-cdk/core.NestedStack');\n\n/**\n * Initialization props for the `NestedStack` construct.\n *\n */\nexport interface NestedStackProps {\n  /**\n   * The set value pairs that represent the parameters passed to CloudFormation\n   * when this nested stack is created. Each parameter has a name corresponding\n   * to a parameter defined in the embedded template and a value representing\n   * the value that you want to set for the parameter.\n   *\n   * The nested stack construct will automatically synthesize parameters in order\n   * to bind references from the parent stack(s) into the nested stack.\n   *\n   * @default - no user-defined parameters are passed to the nested stack\n   */\n  readonly parameters?: { [key: string]: string };\n\n  /**\n   * The length of time that CloudFormation waits for the nested stack to reach\n   * the CREATE_COMPLETE state.\n   *\n   * When CloudFormation detects that the nested stack has reached the\n   * CREATE_COMPLETE state, it marks the nested stack resource as\n   * CREATE_COMPLETE in the parent stack and resumes creating the parent stack.\n   * If the timeout period expires before the nested stack reaches\n   * CREATE_COMPLETE, CloudFormation marks the nested stack as failed and rolls\n   * back both the nested stack and parent stack.\n   *\n   * @default - no timeout\n   */\n  readonly timeout?: Duration;\n\n  /**\n   * The Simple Notification Service (SNS) topics to publish stack related\n   * events.\n   *\n   * @default - notifications are not sent for this stack.\n   */\n  readonly notificationArns?: string[];\n\n  /**\n   * Policy to apply when the nested stack is removed\n   *\n   * The default is `Destroy`, because all Removal Policies of resources inside the\n   * Nested Stack should already have been set correctly. You normally should\n   * not need to set this value.\n   *\n   * @default RemovalPolicy.DESTROY\n   */\n  readonly removalPolicy?: RemovalPolicy;\n}\n\n/**\n * A CloudFormation nested stack.\n *\n * When you apply template changes to update a top-level stack, CloudFormation\n * updates the top-level stack and initiates an update to its nested stacks.\n * CloudFormation updates the resources of modified nested stacks, but does not\n * update the resources of unmodified nested stacks.\n *\n * Furthermore, this stack will not be treated as an independent deployment\n * artifact (won't be listed in \"cdk list\" or deployable through \"cdk deploy\"),\n * but rather only synthesized as a template and uploaded as an asset to S3.\n *\n * Cross references of resource attributes between the parent stack and the\n * nested stack will automatically be translated to stack parameters and\n * outputs.\n *\n */\nexport class NestedStack extends Stack {\n\n  /**\n   * Checks if `x` is an object of type `NestedStack`.\n   */\n  public static isNestedStack(x: any): x is NestedStack {\n    return x != null && typeof(x) === 'object' && NESTED_STACK_SYMBOL in x;\n  }\n\n  public readonly templateFile: string;\n  public readonly nestedStackResource?: CfnResource;\n\n  private readonly parameters: { [name: string]: string };\n  private readonly resource: CfnStack;\n  private readonly _contextualStackId: string;\n  private readonly _contextualStackName: string;\n  private _templateUrl?: string;\n  private _parentStack: Stack;\n\n  constructor(scope: Construct, id: string, props: NestedStackProps = { }) {\n    const parentStack = findParentStack(scope);\n\n    super(scope, id, {\n      env: { account: parentStack.account, region: parentStack.region },\n      synthesizer: new NestedStackSynthesizer(parentStack.synthesizer),\n    });\n\n    this._parentStack = parentStack;\n\n    const parentScope = new Construct(scope, id + '.NestedStack');\n\n    Object.defineProperty(this, NESTED_STACK_SYMBOL, { value: true });\n\n    // this is the file name of the synthesized template file within the cloud assembly\n    this.templateFile = `${Names.uniqueId(this)}.nested.template.json`;\n\n    this.parameters = props.parameters || {};\n\n    this.resource = new CfnStack(parentScope, `${id}.NestedStackResource`, {\n      // This value cannot be cached since it changes during the synthesis phase\n      templateUrl: Lazy.uncachedString({ produce: () => this._templateUrl || '<unresolved>' }),\n      parameters: Lazy.any({ produce: () => Object.keys(this.parameters).length > 0 ? this.parameters : undefined }),\n      notificationArns: props.notificationArns,\n      timeoutInMinutes: props.timeout ? props.timeout.toMinutes() : undefined,\n    });\n    this.resource.applyRemovalPolicy(props.removalPolicy ?? RemovalPolicy.DESTROY);\n\n    this.nestedStackResource = this.resource;\n\n    // context-aware stack name: if resolved from within this stack, return AWS::StackName\n    // if resolved from the outer stack, use the { Ref } of the AWS::CloudFormation::Stack resource\n    // which resolves the ARN of the stack. We need to extract the stack name, which is the second\n    // component after splitting by \"/\"\n    this._contextualStackName = this.contextualAttribute(Aws.STACK_NAME, Fn.select(1, Fn.split('/', this.resource.ref)));\n    this._contextualStackId = this.contextualAttribute(Aws.STACK_ID, this.resource.ref);\n  }\n\n  /**\n   * An attribute that represents the name of the nested stack.\n   *\n   * This is a context aware attribute:\n   * - If this is referenced from the parent stack, it will return a token that parses the name from the stack ID.\n   * - If this is referenced from the context of the nested stack, it will return `{ \"Ref\": \"AWS::StackName\" }`\n   *\n   * Example value: `mystack-mynestedstack-sggfrhxhum7w`\n   * @attribute\n   */\n  public get stackName() {\n    return this._contextualStackName;\n  }\n\n  /**\n   * An attribute that represents the ID of the stack.\n   *\n   * This is a context aware attribute:\n   * - If this is referenced from the parent stack, it will return `{ \"Ref\": \"LogicalIdOfNestedStackResource\" }`.\n   * - If this is referenced from the context of the nested stack, it will return `{ \"Ref\": \"AWS::StackId\" }`\n   *\n   * Example value: `arn:aws:cloudformation:us-east-2:123456789012:stack/mystack-mynestedstack-sggfrhxhum7w/f449b250-b969-11e0-a185-5081d0136786`\n   * @attribute\n   */\n  public get stackId() {\n    return this._contextualStackId;\n  }\n\n  /**\n   * Assign a value to one of the nested stack parameters.\n   * @param name The parameter name (ID)\n   * @param value The value to assign\n   */\n  public setParameter(name: string, value: string) {\n    this.parameters[name] = value;\n  }\n\n  /**\n   * Defines an asset at the parent stack which represents the template of this\n   * nested stack.\n   *\n   * This private API is used by `App.prepare()` within a loop that rectifies\n   * references every time an asset is added. This is because (at the moment)\n   * assets are addressed using CloudFormation parameters.\n   *\n   * @returns `true` if a new asset was added or `false` if an asset was\n   * previously added. When this returns `true`, App will do another reference\n   * rectification cycle.\n   *\n   * @internal\n   */\n  public _prepareTemplateAsset() {\n    if (this._templateUrl) {\n      return false;\n    }\n\n    // When adding tags to nested stack, the tags need to be added to all the resources in\n    // in nested stack, which is handled by the `tags` property, But to tag the\n    //  tags have to be added in the parent stack CfnStack resource. The CfnStack resource created\n    // by this class dont share the same TagManager as that of the one exposed by the `tag` property of the\n    //  class, all the tags need to be copied to the CfnStack resource before synthesizing the resource.\n    // See https://github.com/aws/aws-cdk/pull/19128\n    Object.entries(this.tags.tagValues()).forEach(([key, value]) => {\n      this.resource.tags.setTag(key, value);\n    });\n\n    const cfn = JSON.stringify(this._toCloudFormation());\n    const templateHash = crypto.createHash('sha256').update(cfn).digest('hex');\n\n    const templateLocation = this._parentStack.synthesizer.addFileAsset({\n      packaging: FileAssetPackaging.FILE,\n      sourceHash: templateHash,\n      fileName: this.templateFile,\n    });\n\n    this.addResourceMetadata(this.resource, 'TemplateURL');\n\n    // if bucketName/objectKey are cfn parameters from a stack other than the parent stack, they will\n    // be resolved as cross-stack references like any other (see \"multi\" tests).\n    this._templateUrl = `https://s3.${this._parentStack.region}.${this._parentStack.urlSuffix}/${templateLocation.bucketName}/${templateLocation.objectKey}`;\n    return true;\n  }\n\n  private contextualAttribute(innerValue: string, outerValue: string) {\n    return Token.asString({\n      resolve: (context: IResolveContext) => {\n        if (Stack.of(context.scope) === this) {\n          return innerValue;\n        } else {\n          return outerValue;\n        }\n      },\n    });\n  }\n\n  private addResourceMetadata(resource: CfnResource, resourceProperty: string) {\n    if (!this.node.tryGetContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT)) {\n      return; // not enabled\n    }\n\n    // tell tools such as SAM CLI that the \"TemplateURL\" property of this resource\n    // points to the nested stack template for local emulation\n    resource.cfnOptions.metadata = resource.cfnOptions.metadata || { };\n    resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PATH_KEY] = this.templateFile;\n    resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PROPERTY_KEY] = resourceProperty;\n  }\n}\n\n/**\n * Validates the scope for a nested stack. Nested stacks must be defined within the scope of another `Stack`.\n */\nfunction findParentStack(scope: Construct): Stack {\n  if (!scope) {\n    throw new Error('Nested stacks cannot be defined as a root construct');\n  }\n\n  const parentStack = Node.of(scope).scopes.reverse().find(p => Stack.isStack(p));\n  if (!parentStack) {\n    throw new Error('Nested stacks must be defined within scope of another non-nested stack');\n  }\n\n  return parentStack as Stack;\n}\n"],
  "mappings": "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",
  "names": []
}
