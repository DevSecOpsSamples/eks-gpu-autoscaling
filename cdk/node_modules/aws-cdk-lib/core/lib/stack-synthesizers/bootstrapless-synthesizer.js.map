{
  "version": 3,
  "sources": ["bootstrapless-synthesizer.ts"],
  "sourcesContent": ["import { DockerImageAssetLocation, DockerImageAssetSource, FileAssetLocation, FileAssetSource } from '../assets';\nimport { assertBound } from './_shared';\nimport { DefaultStackSynthesizer } from './default-synthesizer';\nimport { ISynthesisSession } from './types';\n\n/**\n * Construction properties of {@link BootstraplessSynthesizer}.\n */\nexport interface BootstraplessSynthesizerProps {\n  /**\n   * The deploy Role ARN to use.\n   *\n   * @default - No deploy role (use CLI credentials)\n   *\n   */\n  readonly deployRoleArn?: string;\n\n  /**\n   * The CFN execution Role ARN to use.\n   *\n   * @default - No CloudFormation role (use CLI credentials)\n   */\n  readonly cloudFormationExecutionRoleArn?: string;\n}\n\n/**\n * Synthesizer that reuses bootstrap roles from a different region\n *\n * A special synthesizer that behaves similarly to `DefaultStackSynthesizer`,\n * but doesn't require bootstrapping the environment it operates in. Instead,\n * it will re-use the Roles that were created for a different region (which\n * is possible because IAM is a global service).\n *\n * However, it will not assume asset buckets or repositories have been created,\n * and therefore does not support assets.\n *\n * Used by the CodePipeline construct for the support stacks needed for\n * cross-region replication S3 buckets. App builders do not need to use this\n * synthesizer directly.\n */\nexport class BootstraplessSynthesizer extends DefaultStackSynthesizer {\n  constructor(props: BootstraplessSynthesizerProps) {\n    super({\n      deployRoleArn: props.deployRoleArn,\n      cloudFormationExecutionRole: props.cloudFormationExecutionRoleArn,\n      generateBootstrapVersionRule: false,\n    });\n  }\n\n  public addFileAsset(_asset: FileAssetSource): FileAssetLocation {\n    throw new Error('Cannot add assets to a Stack that uses the BootstraplessSynthesizer');\n  }\n\n  public addDockerImageAsset(_asset: DockerImageAssetSource): DockerImageAssetLocation {\n    throw new Error('Cannot add assets to a Stack that uses the BootstraplessSynthesizer');\n  }\n\n  public synthesize(session: ISynthesisSession): void {\n    assertBound(this.stack);\n\n    this.synthesizeStackTemplate(this.stack, session);\n\n    // do _not_ treat the template as an asset,\n    // because this synthesizer doesn't have a bootstrap bucket to put it in\n    this.emitStackArtifact(this.stack, session, {\n      assumeRoleArn: this.deployRoleArn,\n      cloudFormationExecutionRoleArn: this.cloudFormationExecutionRoleArn,\n    });\n  }\n}\n"],
  "mappings": "kOACA,UAAA,QAAA,WAAA,EACA,sBAAA,QAAA,uBAAA,EAsCA,MAAa,gCAAiC,uBAAA,uBAAuB,CACnE,YAAY,MAAoC,CAC9C,MAAM,CACJ,cAAe,MAAM,cACrB,4BAA6B,MAAM,+BACnC,6BAA8B,GAC/B,2EAGI,aAAa,OAAuB,mEACnC,GAAI,OAAM,qEAAqE,EAGhF,oBAAoB,OAA8B,0EACjD,GAAI,OAAM,qEAAqE,EAGhF,WAAW,QAA0B,gEAC1C,UAAA,YAAY,KAAK,KAAK,EAEtB,KAAK,wBAAwB,KAAK,MAAO,OAAO,EAIhD,KAAK,kBAAkB,KAAK,MAAO,QAAS,CAC1C,cAAe,KAAK,cACpB,+BAAgC,KAAK,+BACtC,GA3BL,QAAA,yBAAA",
  "names": []
}
