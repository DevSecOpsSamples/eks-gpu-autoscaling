{
  "version": 3,
  "sources": ["legacy.ts"],
  "sourcesContent": ["import * as cxschema from '../../../cloud-assembly-schema';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { DockerImageAssetLocation, DockerImageAssetSource, FileAssetLocation, FileAssetSource } from '../assets';\nimport { Fn } from '../cfn-fn';\nimport { FileAssetParameters } from '../private/asset-parameters';\nimport { Stack } from '../stack';\nimport { assertBound } from './_shared';\nimport { StackSynthesizer } from './stack-synthesizer';\nimport { ISynthesisSession } from './types';\n\n/**\n * The well-known name for the docker image asset ECR repository. All docker\n * image assets will be pushed into this repository with an image tag based on\n * the source hash.\n */\nconst ASSETS_ECR_REPOSITORY_NAME = 'aws-cdk/assets';\n\n/**\n * This allows users to work around the fact that the ECR repository is\n * (currently) not configurable by setting this context key to their desired\n * repository name. The CLI will auto-create this ECR repository if it's not\n * already created.\n */\nconst ASSETS_ECR_REPOSITORY_NAME_OVERRIDE_CONTEXT_KEY = 'assets-ecr-repository-name';\n\n/**\n * Use the CDK classic way of referencing assets\n *\n * This synthesizer will generate CloudFormation parameters for every referenced\n * asset, and use the CLI's current credentials to deploy the stack.\n *\n * - It does not support cross-account deployment (the CLI must have credentials\n *   to the account you are trying to deploy to).\n * - It cannot be used with **CDK Pipelines**. To deploy using CDK Pipelines,\n *   you must use the `DefaultStackSynthesizer`.\n * - Each asset will take up a CloudFormation Parameter in your template. Keep in\n *   mind that there is a maximum of 200 parameters in a CloudFormation template.\n *   To use determinstic asset locations instead, use `CliCredentialsStackSynthesizer`.\n *\n * Be aware that your CLI credentials must be valid for the duration of the\n * entire deployment. If you are using session credentials, make sure the\n * session lifetime is long enough.\n *\n * This is the only StackSynthesizer that supports customizing asset behavior\n * by overriding `Stack.addFileAsset()` and `Stack.addDockerImageAsset()`.\n */\nexport class LegacyStackSynthesizer extends StackSynthesizer {\n  private stack?: Stack;\n  private cycle = false;\n\n  /**\n   * Includes all parameters synthesized for assets (lazy).\n   */\n  private _assetParameters?: Construct;\n\n  /**\n   * The image ID of all the docker image assets that were already added to this\n   * stack (to avoid duplication).\n   */\n  private readonly addedImageAssets = new Set<string>();\n\n  public bind(stack: Stack): void {\n    if (this.stack !== undefined) {\n      throw new Error('A StackSynthesizer can only be used for one Stack: create a new instance to use with a different Stack');\n    }\n    this.stack = stack;\n  }\n\n  public addFileAsset(asset: FileAssetSource): FileAssetLocation {\n    assertBound(this.stack);\n\n    // Backwards compatibility hack. We have a number of conflicting goals here:\n    //\n    // - We want put the actual logic in this class\n    // - We ALSO want to keep supporting people overriding Stack.addFileAsset (for backwards compatibility,\n    // because that mechanism is currently used to make CI/CD scenarios work)\n    // - We ALSO want to allow both entry points from user code (our own framework\n    // code will always call stack.deploymentMechanism.addFileAsset() but existing users\n    // may still be calling `stack.addFileAsset()` directly.\n    //\n    // Solution: delegate call to the stack, but if the stack delegates back to us again\n    // then do the actual logic.\n    //\n    // @deprecated: this can be removed for v2\n    if (this.cycle) {\n      return this.doAddFileAsset(asset);\n    }\n    this.cycle = true;\n    try {\n      const stack = this.stack;\n      return withoutDeprecationWarnings(() => stack.addFileAsset(asset));\n    } finally {\n      this.cycle = false;\n    }\n  }\n\n  public addDockerImageAsset(asset: DockerImageAssetSource): DockerImageAssetLocation {\n    assertBound(this.stack);\n\n    // See `addFileAsset` for explanation.\n    // @deprecated: this can be removed for v2\n    if (this.cycle) {\n      return this.doAddDockerImageAsset(asset);\n    }\n    this.cycle = true;\n    try {\n      const stack = this.stack;\n      return withoutDeprecationWarnings(() => stack.addDockerImageAsset(asset));\n    } finally {\n      this.cycle = false;\n    }\n  }\n\n  /**\n   * Synthesize the associated stack to the session\n   */\n  public synthesize(session: ISynthesisSession): void {\n    assertBound(this.stack);\n\n    this.synthesizeStackTemplate(this.stack, session);\n\n    // Just do the default stuff, nothing special\n    this.emitStackArtifact(this.stack, session);\n  }\n\n  private doAddDockerImageAsset(asset: DockerImageAssetSource): DockerImageAssetLocation {\n    assertBound(this.stack);\n\n    // check if we have an override from context\n    const repositoryNameOverride = this.stack.node.tryGetContext(ASSETS_ECR_REPOSITORY_NAME_OVERRIDE_CONTEXT_KEY);\n    const repositoryName = asset.repositoryName ?? repositoryNameOverride ?? ASSETS_ECR_REPOSITORY_NAME;\n    const imageTag = asset.sourceHash;\n    const assetId = asset.sourceHash;\n\n    // only add every image (identified by source hash) once for each stack that uses it.\n    if (!this.addedImageAssets.has(assetId)) {\n      if (!asset.directoryName) {\n        throw new Error(`LegacyStackSynthesizer does not support this type of file asset: ${JSON.stringify(asset)}`);\n      }\n\n      const metadata: cxschema.ContainerImageAssetMetadataEntry = {\n        repositoryName,\n        imageTag,\n        id: assetId,\n        packaging: 'container-image',\n        path: asset.directoryName,\n        sourceHash: asset.sourceHash,\n        buildArgs: asset.dockerBuildArgs,\n        target: asset.dockerBuildTarget,\n        file: asset.dockerFile,\n        networkMode: asset.networkMode,\n      };\n\n      this.stack.node.addMetadata(cxschema.ArtifactMetadataEntryType.ASSET, metadata);\n      this.addedImageAssets.add(assetId);\n    }\n\n    return {\n      imageUri: `${this.stack.account}.dkr.ecr.${this.stack.region}.${this.stack.urlSuffix}/${repositoryName}:${imageTag}`,\n      repositoryName,\n    };\n  }\n\n  private doAddFileAsset(asset: FileAssetSource): FileAssetLocation {\n    assertBound(this.stack);\n\n    let params = this.assetParameters.node.tryFindChild(asset.sourceHash) as FileAssetParameters;\n    if (!params) {\n      params = new FileAssetParameters(this.assetParameters, asset.sourceHash);\n\n      if (!asset.fileName || !asset.packaging) {\n        throw new Error(`LegacyStackSynthesizer does not support this type of file asset: ${JSON.stringify(asset)}`);\n      }\n\n      const metadata: cxschema.FileAssetMetadataEntry = {\n        path: asset.fileName,\n        id: asset.sourceHash,\n        packaging: asset.packaging,\n        sourceHash: asset.sourceHash,\n\n        s3BucketParameter: params.bucketNameParameter.logicalId,\n        s3KeyParameter: params.objectKeyParameter.logicalId,\n        artifactHashParameter: params.artifactHashParameter.logicalId,\n      };\n\n      this.stack.node.addMetadata(cxschema.ArtifactMetadataEntryType.ASSET, metadata);\n    }\n\n    const bucketName = params.bucketNameParameter.valueAsString;\n\n    // key is prefix|postfix\n    const encodedKey = params.objectKeyParameter.valueAsString;\n\n    const s3Prefix = Fn.select(0, Fn.split(cxapi.ASSET_PREFIX_SEPARATOR, encodedKey));\n    const s3Filename = Fn.select(1, Fn.split(cxapi.ASSET_PREFIX_SEPARATOR, encodedKey));\n    const objectKey = `${s3Prefix}${s3Filename}`;\n\n    const httpUrl = `https://s3.${this.stack.region}.${this.stack.urlSuffix}/${bucketName}/${objectKey}`;\n    const s3ObjectUrl = `s3://${bucketName}/${objectKey}`;\n\n    return { bucketName, objectKey, httpUrl, s3ObjectUrl, s3Url: httpUrl };\n  }\n\n  private get assetParameters() {\n    assertBound(this.stack);\n\n    if (!this._assetParameters) {\n      this._assetParameters = new Construct(this.stack, 'AssetParameters');\n    }\n    return this._assetParameters;\n  }\n}\n\nfunction withoutDeprecationWarnings<A>(block: () => A): A {\n  const orig = process.env.JSII_DEPRECATED;\n  process.env.JSII_DEPRECATED = 'quiet';\n  try {\n    return block();\n  } finally {\n    process.env.JSII_DEPRECATED = orig;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
