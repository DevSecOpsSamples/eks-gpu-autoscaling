{
  "version": 3,
  "sources": ["cli-credentials-synthesizer.ts"],
  "sourcesContent": ["import * as cxapi from '../../../cx-api';\nimport { DockerImageAssetLocation, DockerImageAssetSource, FileAssetLocation, FileAssetSource } from '../assets';\nimport { Stack } from '../stack';\nimport { Token } from '../token';\nimport { AssetManifestBuilder } from './_asset-manifest-builder';\nimport { assertBound, StringSpecializer, stackTemplateFileAsset } from './_shared';\nimport { BOOTSTRAP_QUALIFIER_CONTEXT, DefaultStackSynthesizer } from './default-synthesizer';\nimport { StackSynthesizer } from './stack-synthesizer';\nimport { ISynthesisSession } from './types';\n\n/**\n * Properties for the CliCredentialsStackSynthesizer\n */\nexport interface CliCredentialsStackSynthesizerProps {\n  /**\n   * Name of the S3 bucket to hold file assets\n   *\n   * You must supply this if you have given a non-standard name to the staging bucket.\n   *\n   * The placeholders `${Qualifier}`, `${AWS::AccountId}` and `${AWS::Region}` will\n   * be replaced with the values of qualifier and the stack's account and region,\n   * respectively.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_FILE_ASSETS_BUCKET_NAME\n   */\n  readonly fileAssetsBucketName?: string;\n\n  /**\n   * Name of the ECR repository to hold Docker Image assets\n   *\n   * You must supply this if you have given a non-standard name to the ECR repository.\n   *\n   * The placeholders `${Qualifier}`, `${AWS::AccountId}` and `${AWS::Region}` will\n   * be replaced with the values of qualifier and the stack's account and region,\n   * respectively.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME\n   */\n  readonly imageAssetsRepositoryName?: string;\n\n  /**\n   * Qualifier to disambiguate multiple environments in the same account\n   *\n   * You can use this and leave the other naming properties empty if you have deployed\n   * the bootstrap environment with standard names but only differnet qualifiers.\n   *\n   * @default - Value of context key '@aws-cdk/core:bootstrapQualifier' if set, otherwise `DefaultStackSynthesizer.DEFAULT_QUALIFIER`\n   */\n  readonly qualifier?: string;\n\n  /**\n   * bucketPrefix to use while storing S3 Assets\n   *\n   * @default - DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PREFIX\n   */\n  readonly bucketPrefix?: string;\n\n  /**\n   * A prefix to use while tagging and uploading Docker images to ECR.\n   *\n   * This does not add any separators - the source hash will be appended to\n   * this string directly.\n   *\n   * @default - DefaultStackSynthesizer.DEFAULT_DOCKER_ASSET_PREFIX\n   */\n  readonly dockerTagPrefix?: string;\n}\n\n/**\n * A synthesizer that uses conventional asset locations, but not conventional deployment roles\n *\n * Instead of assuming the bootstrapped deployment roles, all stack operations will be performed\n * using the CLI's current credentials.\n *\n * - This synthesizer does not support deploying to accounts to which the CLI does not have\n *   credentials. It also does not support deploying using **CDK Pipelines**. For either of those\n *   features, use `DefaultStackSynthesizer`.\n * - This synthesizer requires an S3 bucket and ECR repository with well-known names. To\n *   not depend on those, use `LegacyStackSynthesizer`.\n *\n * Be aware that your CLI credentials must be valid for the duration of the\n * entire deployment. If you are using session credentials, make sure the\n * session lifetime is long enough.\n *\n * By default, expects the environment to have been bootstrapped with just the staging resources\n * of the Bootstrap Stack V2 (also known as \"modern bootstrap stack\"). You can override\n * the default names using the synthesizer's construction properties.\n */\nexport class CliCredentialsStackSynthesizer extends StackSynthesizer {\n  private stack?: Stack;\n  private qualifier?: string;\n  private bucketName?: string;\n  private repositoryName?: string;\n  private bucketPrefix?: string;\n  private dockerTagPrefix?: string;\n\n  private readonly assetManifest = new AssetManifestBuilder();\n\n  constructor(private readonly props: CliCredentialsStackSynthesizerProps = {}) {\n    super();\n\n    for (const key in props) {\n      if (props.hasOwnProperty(key)) {\n        validateNoToken(key as keyof CliCredentialsStackSynthesizerProps);\n      }\n    }\n\n    function validateNoToken<A extends keyof CliCredentialsStackSynthesizerProps>(key: A) {\n      const prop = props[key];\n      if (typeof prop === 'string' && Token.isUnresolved(prop)) {\n        throw new Error(`DefaultSynthesizer property '${key}' cannot contain tokens; only the following placeholder strings are allowed: ` + [\n          '${Qualifier}',\n          cxapi.EnvironmentPlaceholders.CURRENT_REGION,\n          cxapi.EnvironmentPlaceholders.CURRENT_ACCOUNT,\n          cxapi.EnvironmentPlaceholders.CURRENT_PARTITION,\n        ].join(', '));\n      }\n    }\n  }\n\n  public bind(stack: Stack): void {\n    if (this.stack !== undefined) {\n      throw new Error('A StackSynthesizer can only be used for one Stack: create a new instance to use with a different Stack');\n    }\n\n    this.stack = stack;\n\n    const qualifier = this.props.qualifier ?? stack.node.tryGetContext(BOOTSTRAP_QUALIFIER_CONTEXT) ?? DefaultStackSynthesizer.DEFAULT_QUALIFIER;\n    this.qualifier = qualifier;\n\n    const spec = new StringSpecializer(stack, qualifier);\n\n    /* eslint-disable max-len */\n    this.bucketName = spec.specialize(this.props.fileAssetsBucketName ?? DefaultStackSynthesizer.DEFAULT_FILE_ASSETS_BUCKET_NAME);\n    this.repositoryName = spec.specialize(this.props.imageAssetsRepositoryName ?? DefaultStackSynthesizer.DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME);\n    this.bucketPrefix = spec.specialize(this.props.bucketPrefix ?? DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PREFIX);\n    this.dockerTagPrefix = spec.specialize(this.props.dockerTagPrefix ?? DefaultStackSynthesizer.DEFAULT_DOCKER_ASSET_PREFIX);\n    /* eslint-enable max-len */\n  }\n\n  public addFileAsset(asset: FileAssetSource): FileAssetLocation {\n    assertBound(this.stack);\n    assertBound(this.bucketName);\n    assertBound(this.bucketPrefix);\n\n    return this.assetManifest.addFileAssetDefault(asset, this.stack, this.bucketName, this.bucketPrefix);\n  }\n\n  public addDockerImageAsset(asset: DockerImageAssetSource): DockerImageAssetLocation {\n    assertBound(this.stack);\n    assertBound(this.repositoryName);\n    assertBound(this.dockerTagPrefix);\n\n    return this.assetManifest.addDockerImageAssetDefault(asset, this.stack, this.repositoryName, this.dockerTagPrefix);\n  }\n\n  /**\n   * Synthesize the associated stack to the session\n   */\n  public synthesize(session: ISynthesisSession): void {\n    assertBound(this.stack);\n    assertBound(this.qualifier);\n\n    this.synthesizeStackTemplate(this.stack, session);\n\n    const templateAsset = this.addFileAsset(stackTemplateFileAsset(this.stack, session));\n    const assetManifestId = this.assetManifest.writeManifest(this.stack, session);\n\n    this.emitStackArtifact(this.stack, session, {\n      stackTemplateAssetObjectUrl: templateAsset.s3ObjectUrlWithPlaceholders,\n      additionalDependencies: [assetManifestId],\n    });\n  }\n}"],
  "mappings": "wOAAA,MAAA,QAAA,iBAAA,EAGA,QAAA,QAAA,UAAA,EACA,0BAAA,QAAA,2BAAA,EACA,UAAA,QAAA,WAAA,EACA,sBAAA,QAAA,uBAAA,EACA,oBAAA,QAAA,qBAAA,EAiFA,MAAa,sCAAuC,qBAAA,gBAAgB,CAUlE,YAA6B,MAA6C,CAAA,EAAE,CAC1E,MAAK,EADsB,KAAA,MAAA,MAFZ,KAAA,cAAgB,GAAI,2BAAA,oGAKnC,SAAW,OAAO,OAChB,AAAI,MAAM,eAAe,GAAG,GAC1B,gBAAgB,GAAgD,EAIpE,yBAA8E,IAAM,CAClF,KAAM,MAAO,MAAM,KACnB,GAAI,MAAO,OAAS,UAAY,QAAA,MAAM,aAAa,IAAI,EACrD,KAAM,IAAI,OAAM,gCAAgC,mFAAqF,CACnI,eACA,MAAM,wBAAwB,eAC9B,MAAM,wBAAwB,gBAC9B,MAAM,wBAAwB,mBAC9B,KAAK,IAAI,CAAC,CAEhB,EAGK,KAAK,MAAY,uBACtB,oDAAI,KAAK,QAAU,OACjB,KAAM,IAAI,OAAM,wGAAwG,EAG1H,KAAK,MAAQ,MAEb,KAAM,WAAS,IAAA,IAAG,KAAK,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,MAAM,KAAK,cAAc,sBAAA,2BAA2B,KAAC,MAAA,KAAA,OAAA,GAAI,sBAAA,wBAAwB,kBAC3H,KAAK,UAAY,UAEjB,KAAM,MAAO,GAAI,WAAA,kBAAkB,MAAO,SAAS,EAGnD,KAAK,WAAa,KAAK,WAAU,IAAC,KAAK,MAAM,wBAAoB,MAAA,KAAA,OAAA,GAAI,sBAAA,wBAAwB,+BAA+B,EAC5H,KAAK,eAAiB,KAAK,WAAU,IAAC,KAAK,MAAM,6BAAyB,MAAA,KAAA,OAAA,GAAI,sBAAA,wBAAwB,oCAAoC,EAC1I,KAAK,aAAe,KAAK,WAAU,IAAC,KAAK,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,sBAAA,wBAAwB,yBAAyB,EAChH,KAAK,gBAAkB,KAAK,WAAU,IAAC,KAAK,MAAM,mBAAe,MAAA,KAAA,OAAA,GAAI,sBAAA,wBAAwB,2BAA2B,EAInH,aAAa,MAAsB,mEACxC,UAAA,YAAY,KAAK,KAAK,EACtB,UAAA,YAAY,KAAK,UAAU,EAC3B,UAAA,YAAY,KAAK,YAAY,EAEtB,KAAK,cAAc,oBAAoB,MAAO,KAAK,MAAO,KAAK,WAAY,KAAK,YAAY,EAG9F,oBAAoB,MAA6B,0EACtD,UAAA,YAAY,KAAK,KAAK,EACtB,UAAA,YAAY,KAAK,cAAc,EAC/B,UAAA,YAAY,KAAK,eAAe,EAEzB,KAAK,cAAc,2BAA2B,MAAO,KAAK,MAAO,KAAK,eAAgB,KAAK,eAAe,EAM5G,WAAW,QAA0B,gEAC1C,UAAA,YAAY,KAAK,KAAK,EACtB,UAAA,YAAY,KAAK,SAAS,EAE1B,KAAK,wBAAwB,KAAK,MAAO,OAAO,EAEhD,KAAM,eAAgB,KAAK,aAAa,UAAA,uBAAuB,KAAK,MAAO,OAAO,CAAC,EAC7E,gBAAkB,KAAK,cAAc,cAAc,KAAK,MAAO,OAAO,EAE5E,KAAK,kBAAkB,KAAK,MAAO,QAAS,CAC1C,4BAA6B,cAAc,4BAC3C,uBAAwB,CAAC,eAAe,EACzC,GAnFL,QAAA,+BAAA",
  "names": []
}
