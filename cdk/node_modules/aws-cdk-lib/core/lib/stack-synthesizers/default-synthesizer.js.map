{
  "version": 3,
  "sources": ["default-synthesizer.ts"],
  "sourcesContent": ["import * as cxapi from '../../../cx-api';\nimport { DockerImageAssetLocation, DockerImageAssetSource, FileAssetLocation, FileAssetSource } from '../assets';\nimport { Fn } from '../cfn-fn';\nimport { CfnParameter } from '../cfn-parameter';\nimport { CfnRule } from '../cfn-rule';\nimport { Stack } from '../stack';\nimport { Token } from '../token';\nimport { AssetManifestBuilder } from './_asset-manifest-builder';\nimport { assertBound, StringSpecializer, stackTemplateFileAsset } from './_shared';\nimport { StackSynthesizer } from './stack-synthesizer';\nimport { ISynthesisSession } from './types';\n\nexport const BOOTSTRAP_QUALIFIER_CONTEXT = '@aws-cdk/core:bootstrapQualifier';\n\n/* eslint-disable max-len */\n\n/**\n * The minimum bootstrap stack version required by this app.\n */\nconst MIN_BOOTSTRAP_STACK_VERSION = 6;\n\n/**\n * The minimum bootstrap stack version required\n * to use the lookup role.\n */\nconst MIN_LOOKUP_ROLE_BOOTSTRAP_STACK_VERSION = 8;\n\n/**\n * Configuration properties for DefaultStackSynthesizer\n */\nexport interface DefaultStackSynthesizerProps {\n  /**\n   * Name of the S3 bucket to hold file assets\n   *\n   * You must supply this if you have given a non-standard name to the staging bucket.\n   *\n   * The placeholders `${Qualifier}`, `${AWS::AccountId}` and `${AWS::Region}` will\n   * be replaced with the values of qualifier and the stack's account and region,\n   * respectively.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_FILE_ASSETS_BUCKET_NAME\n   */\n  readonly fileAssetsBucketName?: string;\n\n  /**\n   * Name of the ECR repository to hold Docker Image assets\n   *\n   * You must supply this if you have given a non-standard name to the ECR repository.\n   *\n   * The placeholders `${Qualifier}`, `${AWS::AccountId}` and `${AWS::Region}` will\n   * be replaced with the values of qualifier and the stack's account and region,\n   * respectively.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME\n   */\n  readonly imageAssetsRepositoryName?: string;\n\n  /**\n   * The role to use to publish file assets to the S3 bucket in this environment\n   *\n   * You must supply this if you have given a non-standard name to the publishing role.\n   *\n   * The placeholders `${Qualifier}`, `${AWS::AccountId}` and `${AWS::Region}` will\n   * be replaced with the values of qualifier and the stack's account and region,\n   * respectively.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PUBLISHING_ROLE_ARN\n   */\n  readonly fileAssetPublishingRoleArn?: string;\n\n  /**\n   * External ID to use when assuming role for file asset publishing\n   *\n   * @default - No external ID\n   */\n  readonly fileAssetPublishingExternalId?: string;\n\n  /**\n   * The role to use to publish image assets to the ECR repository in this environment\n   *\n   * You must supply this if you have given a non-standard name to the publishing role.\n   *\n   * The placeholders `${Qualifier}`, `${AWS::AccountId}` and `${AWS::Region}` will\n   * be replaced with the values of qualifier and the stack's account and region,\n   * respectively.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_IMAGE_ASSET_PUBLISHING_ROLE_ARN\n   */\n  readonly imageAssetPublishingRoleArn?: string;\n\n  /**\n   * The role to use to look up values from the target AWS account during synthesis\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n  /**\n   * External ID to use when assuming lookup role\n   *\n   * @default - No external ID\n   */\n  readonly lookupRoleExternalId?: string;\n\n  /**\n   * Use the bootstrapped lookup role for (read-only) stack operations\n   *\n   * Use the lookup role when performing a `cdk diff`. If set to `false`, the\n   * `deploy role` credentials will be used to perform a `cdk diff`.\n   *\n   * Requires bootstrap stack version 8.\n   *\n   * @default true\n   */\n  readonly useLookupRoleForStackOperations?: boolean;\n\n  /**\n   * External ID to use when assuming role for image asset publishing\n   *\n   * @default - No external ID\n   */\n  readonly imageAssetPublishingExternalId?: string;\n\n  /**\n   * External ID to use when assuming role for cloudformation deployments\n   *\n   * @default - No external ID\n   */\n  readonly deployRoleExternalId?: string;\n\n  /**\n   * The role to assume to initiate a deployment in this environment\n   *\n   * You must supply this if you have given a non-standard name to the publishing role.\n   *\n   * The placeholders `${Qualifier}`, `${AWS::AccountId}` and `${AWS::Region}` will\n   * be replaced with the values of qualifier and the stack's account and region,\n   * respectively.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_DEPLOY_ROLE_ARN\n   */\n  readonly deployRoleArn?: string;\n\n  /**\n   * The role CloudFormation will assume when deploying the Stack\n   *\n   * You must supply this if you have given a non-standard name to the execution role.\n   *\n   * The placeholders `${Qualifier}`, `${AWS::AccountId}` and `${AWS::Region}` will\n   * be replaced with the values of qualifier and the stack's account and region,\n   * respectively.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_CLOUDFORMATION_ROLE_ARN\n   */\n  readonly cloudFormationExecutionRole?: string;\n\n  /**\n   * Name of the CloudFormation Export with the asset key name\n   *\n   * You must supply this if you have given a non-standard name to the KMS key export\n   *\n   * The placeholders `${Qualifier}`, `${AWS::AccountId}` and `${AWS::Region}` will\n   * be replaced with the values of qualifier and the stack's account and region,\n   * respectively.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_FILE_ASSET_KEY_ARN_EXPORT_NAME\n   * @deprecated This property is not used anymore\n   */\n  readonly fileAssetKeyArnExportName?: string;\n\n  /**\n   * Qualifier to disambiguate multiple environments in the same account\n   *\n   * You can use this and leave the other naming properties empty if you have deployed\n   * the bootstrap environment with standard names but only differnet qualifiers.\n   *\n   * @default - Value of context key '@aws-cdk/core:bootstrapQualifier' if set, otherwise `DefaultStackSynthesizer.DEFAULT_QUALIFIER`\n   */\n  readonly qualifier?: string;\n\n  /**\n   * Whether to add a Rule to the stack template verifying the bootstrap stack version\n   *\n   * This generally should be left set to `true`, unless you explicitly\n   * want to be able to deploy to an unbootstrapped environment.\n   *\n   * @default true\n   */\n  readonly generateBootstrapVersionRule?: boolean;\n\n  /**\n   * bucketPrefix to use while storing S3 Assets\n   *\n   * @default - DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PREFIX\n   */\n  readonly bucketPrefix?: string;\n\n  /**\n   * A prefix to use while tagging and uploading Docker images to ECR.\n   *\n   * This does not add any separators - the source hash will be appended to\n   * this string directly.\n   *\n   * @default - DefaultStackSynthesizer.DEFAULT_DOCKER_ASSET_PREFIX\n   */\n  readonly dockerTagPrefix?: string;\n\n  /**\n   * Bootstrap stack version SSM parameter.\n   *\n   * The placeholder `${Qualifier}` will be replaced with the value of qualifier.\n   *\n   * @default DefaultStackSynthesizer.DEFAULT_BOOTSTRAP_STACK_VERSION_SSM_PARAMETER\n   */\n  readonly bootstrapStackVersionSsmParameter?: string;\n}\n\n/**\n * Uses conventionally named roles and asset storage locations\n *\n * This synthesizer:\n *\n * - Supports cross-account deployments (the CLI can have credentials to one\n *   account, and you can still deploy to another account by assuming roles with\n *   well-known names in the other account).\n * - Supports the **CDK Pipelines** library.\n *\n * Requires the environment to have been bootstrapped with Bootstrap Stack V2\n * (also known as \"modern bootstrap stack\"). The synthesizer adds a version\n * check to the template, to make sure the bootstrap stack is recent enough\n * to support all features expected by this synthesizer.\n */\nexport class DefaultStackSynthesizer extends StackSynthesizer {\n  /**\n   * Default ARN qualifier\n   */\n  public static readonly DEFAULT_QUALIFIER = 'hnb659fds';\n\n  /**\n   * Default CloudFormation role ARN.\n   */\n  public static readonly DEFAULT_CLOUDFORMATION_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}';\n\n  /**\n   * Default deploy role ARN.\n   */\n  public static readonly DEFAULT_DEPLOY_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}';\n\n  /**\n   * Default asset publishing role ARN for file (S3) assets.\n   */\n  public static readonly DEFAULT_FILE_ASSET_PUBLISHING_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}';\n\n  /**\n   * Default asset publishing role ARN for image (ECR) assets.\n   */\n  public static readonly DEFAULT_IMAGE_ASSET_PUBLISHING_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-image-publishing-role-${AWS::AccountId}-${AWS::Region}';\n\n  /**\n   * Default lookup role ARN for missing values.\n   */\n  public static readonly DEFAULT_LOOKUP_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}';\n\n  /**\n   * Default image assets repository name\n   */\n  public static readonly DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME = 'cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}';\n\n  /**\n   * Default file assets bucket name\n   */\n  public static readonly DEFAULT_FILE_ASSETS_BUCKET_NAME = 'cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}';\n\n  /**\n   * Name of the CloudFormation Export with the asset key name\n   */\n  public static readonly DEFAULT_FILE_ASSET_KEY_ARN_EXPORT_NAME = 'CdkBootstrap-${Qualifier}-FileAssetKeyArn';\n\n  /**\n   * Default file asset prefix\n   */\n  public static readonly DEFAULT_FILE_ASSET_PREFIX = '';\n  /**\n   * Default Docker asset prefix\n   */\n  public static readonly DEFAULT_DOCKER_ASSET_PREFIX = '';\n\n  /**\n   * Default bootstrap stack version SSM parameter.\n   */\n  public static readonly DEFAULT_BOOTSTRAP_STACK_VERSION_SSM_PARAMETER = '/cdk-bootstrap/${Qualifier}/version';\n\n  private _stack?: Stack;\n  private bucketName?: string;\n  private repositoryName?: string;\n  private _deployRoleArn?: string;\n  private _cloudFormationExecutionRoleArn?: string;\n  private fileAssetPublishingRoleArn?: string;\n  private imageAssetPublishingRoleArn?: string;\n  private lookupRoleArn?: string;\n  private useLookupRoleForStackOperations: boolean;\n  private qualifier?: string;\n  private bucketPrefix?: string;\n  private dockerTagPrefix?: string;\n  private bootstrapStackVersionSsmParameter?: string;\n\n  private assetManifest = new AssetManifestBuilder();\n\n  constructor(private readonly props: DefaultStackSynthesizerProps = {}) {\n    super();\n    this.useLookupRoleForStackOperations = props.useLookupRoleForStackOperations ?? true;\n\n    for (const key in props) {\n      if (props.hasOwnProperty(key)) {\n        validateNoToken(key as keyof DefaultStackSynthesizerProps);\n      }\n    }\n\n    function validateNoToken<A extends keyof DefaultStackSynthesizerProps>(key: A) {\n      const prop = props[key];\n      if (typeof prop === 'string' && Token.isUnresolved(prop)) {\n        throw new Error(`DefaultSynthesizer property '${key}' cannot contain tokens; only the following placeholder strings are allowed: ` + [\n          '${Qualifier}',\n          cxapi.EnvironmentPlaceholders.CURRENT_REGION,\n          cxapi.EnvironmentPlaceholders.CURRENT_ACCOUNT,\n          cxapi.EnvironmentPlaceholders.CURRENT_PARTITION,\n        ].join(', '));\n      }\n    }\n  }\n\n  public bind(stack: Stack): void {\n    if (this._stack !== undefined) {\n      throw new Error('A StackSynthesizer can only be used for one Stack: create a new instance to use with a different Stack');\n    }\n\n    this._stack = stack;\n\n    const qualifier = this.props.qualifier ?? stack.node.tryGetContext(BOOTSTRAP_QUALIFIER_CONTEXT) ?? DefaultStackSynthesizer.DEFAULT_QUALIFIER;\n    this.qualifier = qualifier;\n\n    const spec = new StringSpecializer(stack, qualifier);\n\n    /* eslint-disable max-len */\n    this.bucketName = spec.specialize(this.props.fileAssetsBucketName ?? DefaultStackSynthesizer.DEFAULT_FILE_ASSETS_BUCKET_NAME);\n    this.repositoryName = spec.specialize(this.props.imageAssetsRepositoryName ?? DefaultStackSynthesizer.DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME);\n    this._deployRoleArn = spec.specialize(this.props.deployRoleArn ?? DefaultStackSynthesizer.DEFAULT_DEPLOY_ROLE_ARN);\n    this._cloudFormationExecutionRoleArn = spec.specialize(this.props.cloudFormationExecutionRole ?? DefaultStackSynthesizer.DEFAULT_CLOUDFORMATION_ROLE_ARN);\n    this.fileAssetPublishingRoleArn = spec.specialize(this.props.fileAssetPublishingRoleArn ?? DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PUBLISHING_ROLE_ARN);\n    this.imageAssetPublishingRoleArn = spec.specialize(this.props.imageAssetPublishingRoleArn ?? DefaultStackSynthesizer.DEFAULT_IMAGE_ASSET_PUBLISHING_ROLE_ARN);\n    this.lookupRoleArn = spec.specialize(this.props.lookupRoleArn ?? DefaultStackSynthesizer.DEFAULT_LOOKUP_ROLE_ARN);\n    this.bucketPrefix = spec.specialize(this.props.bucketPrefix ?? DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PREFIX);\n    this.dockerTagPrefix = spec.specialize(this.props.dockerTagPrefix ?? DefaultStackSynthesizer.DEFAULT_DOCKER_ASSET_PREFIX);\n    this.bootstrapStackVersionSsmParameter = spec.qualifierOnly(this.props.bootstrapStackVersionSsmParameter ?? DefaultStackSynthesizer.DEFAULT_BOOTSTRAP_STACK_VERSION_SSM_PARAMETER);\n    /* eslint-enable max-len */\n  }\n\n  public addFileAsset(asset: FileAssetSource): FileAssetLocation {\n    assertBound(this.stack);\n    assertBound(this.bucketName);\n    assertBound(this.bucketPrefix);\n\n    return this.assetManifest.addFileAssetDefault(asset, this.stack, this.bucketName, this.bucketPrefix, {\n      assumeRoleArn: this.fileAssetPublishingRoleArn,\n      assumeRoleExternalId: this.props.fileAssetPublishingExternalId,\n    });\n  }\n\n  public addDockerImageAsset(asset: DockerImageAssetSource): DockerImageAssetLocation {\n    assertBound(this.stack);\n    assertBound(this.repositoryName);\n    assertBound(this.dockerTagPrefix);\n\n    return this.assetManifest.addDockerImageAssetDefault(asset, this.stack, this.repositoryName, this.dockerTagPrefix, {\n      assumeRoleArn: this.imageAssetPublishingRoleArn,\n      assumeRoleExternalId: this.props.imageAssetPublishingExternalId,\n    });\n  }\n\n  protected synthesizeStackTemplate(stack: Stack, session: ISynthesisSession) {\n    stack._synthesizeTemplate(session, this.lookupRoleArn);\n  }\n\n  /**\n   * Synthesize the associated stack to the session\n   */\n  public synthesize(session: ISynthesisSession): void {\n    assertBound(this.stack);\n    assertBound(this.qualifier);\n\n    // Must be done here -- if it's done in bind() (called in the Stack's constructor)\n    // then it will become impossible to set context after that.\n    //\n    // If it's done AFTER _synthesizeTemplate(), then the template won't contain the\n    // right constructs.\n    if (this.props.generateBootstrapVersionRule ?? true) {\n      addBootstrapVersionRule(this.stack, MIN_BOOTSTRAP_STACK_VERSION, <string> this.bootstrapStackVersionSsmParameter);\n    }\n\n    this.synthesizeStackTemplate(this.stack, session);\n\n    const templateAsset = this.addFileAsset(stackTemplateFileAsset(this.stack, session));\n\n    const assetManifestId = this.assetManifest.writeManifest(this.stack, session, {\n      requiresBootstrapStackVersion: MIN_BOOTSTRAP_STACK_VERSION,\n      bootstrapStackVersionSsmParameter: this.bootstrapStackVersionSsmParameter,\n    });\n\n    this.emitStackArtifact(this.stack, session, {\n      assumeRoleExternalId: this.props.deployRoleExternalId,\n      assumeRoleArn: this._deployRoleArn,\n      cloudFormationExecutionRoleArn: this._cloudFormationExecutionRoleArn,\n      stackTemplateAssetObjectUrl: templateAsset.s3ObjectUrlWithPlaceholders,\n      requiresBootstrapStackVersion: MIN_BOOTSTRAP_STACK_VERSION,\n      bootstrapStackVersionSsmParameter: this.bootstrapStackVersionSsmParameter,\n      additionalDependencies: [assetManifestId],\n      lookupRole: this.useLookupRoleForStackOperations && this.lookupRoleArn ? {\n        arn: this.lookupRoleArn,\n        assumeRoleExternalId: this.props.lookupRoleExternalId,\n        requiresBootstrapStackVersion: MIN_LOOKUP_ROLE_BOOTSTRAP_STACK_VERSION,\n        bootstrapStackVersionSsmParameter: this.bootstrapStackVersionSsmParameter,\n      } : undefined,\n    });\n  }\n\n  /**\n   * Returns the ARN of the deploy Role.\n   */\n  public get deployRoleArn(): string {\n    if (!this._deployRoleArn) {\n      throw new Error('deployRoleArn getter can only be called after the synthesizer has been bound to a Stack');\n    }\n    return this._deployRoleArn;\n  }\n\n  /**\n   * Returns the ARN of the CFN execution Role.\n   */\n  public get cloudFormationExecutionRoleArn(): string {\n    if (!this._cloudFormationExecutionRoleArn) {\n      throw new Error('cloudFormationExecutionRoleArn getter can only be called after the synthesizer has been bound to a Stack');\n    }\n    return this._cloudFormationExecutionRoleArn;\n  }\n\n  protected get stack(): Stack | undefined {\n    return this._stack;\n  }\n}\n\n/**\n * Add a CfnRule to the Stack which checks the current version of the bootstrap stack this template is targeting\n *\n * The CLI normally checks this, but in a pipeline the CLI is not involved\n * so we encode this rule into the template in a way that CloudFormation will check it.\n */\nfunction addBootstrapVersionRule(stack: Stack, requiredVersion: number, bootstrapStackVersionSsmParameter: string) {\n  // Because of https://github.com/aws/aws-cdk/blob/master/packages/assert-internal/lib/synth-utils.ts#L74\n  // synthesize() may be called more than once on a stack in unit tests, and the below would break\n  // if we execute it a second time. Guard against the constructs already existing.\n  if (stack.node.tryFindChild('BootstrapVersion')) { return; }\n\n  const param = new CfnParameter(stack, 'BootstrapVersion', {\n    type: 'AWS::SSM::Parameter::Value<String>',\n    description: `Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. ${cxapi.SSMPARAM_NO_INVALIDATE}`,\n    default: bootstrapStackVersionSsmParameter,\n  });\n\n  // There is no >= check in CloudFormation, so we have to check the number\n  // is NOT in [1, 2, 3, ... <required> - 1]\n  const oldVersions = range(1, requiredVersion).map(n => `${n}`);\n\n  new CfnRule(stack, 'CheckBootstrapVersion', {\n    assertions: [\n      {\n        assert: Fn.conditionNot(Fn.conditionContains(oldVersions, param.valueAsString)),\n        assertDescription: `CDK bootstrap stack version ${requiredVersion} required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.`,\n      },\n    ],\n  });\n}\n\nfunction range(startIncl: number, endExcl: number) {\n  const ret = new Array<number>();\n  for (let i = startIncl; i < endExcl; i++) {\n    ret.push(i);\n  }\n  return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
