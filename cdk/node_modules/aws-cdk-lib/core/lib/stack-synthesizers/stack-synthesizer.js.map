{
  "version": 3,
  "sources": ["stack-synthesizer.ts"],
  "sourcesContent": ["import * as cxschema from '../../../cloud-assembly-schema';\nimport { DockerImageAssetLocation, DockerImageAssetSource, FileAssetLocation, FileAssetSource } from '../assets';\nimport { Stack } from '../stack';\nimport { addStackArtifactToAssembly } from './_shared';\nimport { IStackSynthesizer, ISynthesisSession } from './types';\n\n/**\n * Base class for implementing an IStackSynthesizer\n *\n * This class needs to exist to provide public surface area for external\n * implementations of stack synthesizers. The protected methods give\n * access to functions that are otherwise @_internal to the framework\n * and could not be accessed by external implementors.\n */\nexport abstract class StackSynthesizer implements IStackSynthesizer {\n  /**\n   * Bind to the stack this environment is going to be used on\n   *\n   * Must be called before any of the other methods are called.\n   */\n  public abstract bind(stack: Stack): void;\n\n  /**\n   * Register a File Asset\n   *\n   * Returns the parameters that can be used to refer to the asset inside the template.\n   */\n  public abstract addFileAsset(asset: FileAssetSource): FileAssetLocation;\n\n  /**\n   * Register a Docker Image Asset\n   *\n   * Returns the parameters that can be used to refer to the asset inside the template.\n   */\n  public abstract addDockerImageAsset(asset: DockerImageAssetSource): DockerImageAssetLocation;\n\n  /**\n   * Synthesize the associated stack to the session\n   */\n  public abstract synthesize(session: ISynthesisSession): void;\n\n  /**\n   * Have the stack write out its template\n   */\n  protected synthesizeStackTemplate(stack: Stack, session: ISynthesisSession): void {\n    stack._synthesizeTemplate(session);\n  }\n\n  /**\n   * Write the stack artifact to the session\n   *\n   * Use default settings to add a CloudFormationStackArtifact artifact to\n   * the given synthesis session.\n   */\n  protected emitStackArtifact(stack: Stack, session: ISynthesisSession, options: SynthesizeStackArtifactOptions = {}) {\n    addStackArtifactToAssembly(session, stack, options ?? {}, options.additionalDependencies ?? []);\n  }\n}\n\n/**\n * Stack artifact options\n *\n * A subset of `cxschema.AwsCloudFormationStackProperties` of optional settings that need to be\n * configurable by synthesizers, plus `additionalDependencies`.\n */\nexport interface SynthesizeStackArtifactOptions {\n  /**\n   * Identifiers of additional dependencies\n   *\n   * @default - No additional dependencies\n   */\n  readonly additionalDependencies?: string[];\n\n  /**\n   * Values for CloudFormation stack parameters that should be passed when the stack is deployed.\n   *\n   * @default - No parameters\n   */\n  readonly parameters?: { [id: string]: string };\n\n  /**\n   * The role that needs to be assumed to deploy the stack\n   *\n   * @default - No role is assumed (current credentials are used)\n   */\n  readonly assumeRoleArn?: string;\n\n  /**\n   * The externalID to use with the assumeRoleArn\n   *\n   * @default - No externalID is used\n   */\n  readonly assumeRoleExternalId?: string;\n\n  /**\n   * The role that is passed to CloudFormation to execute the change set\n   *\n   * @default - No role is passed (currently assumed role/credentials are used)\n   */\n  readonly cloudFormationExecutionRoleArn?: string;\n\n  /**\n   * The role to use to look up values from the target AWS account\n   *\n   * @default - None\n   */\n  readonly lookupRole?: cxschema.BootstrapRole;\n\n  /**\n   * If the stack template has already been included in the asset manifest, its asset URL\n   *\n   * @default - Not uploaded yet, upload just before deploying\n   */\n  readonly stackTemplateAssetObjectUrl?: string;\n\n  /**\n   * Version of bootstrap stack required to deploy this stack\n   *\n   * @default - No bootstrap stack required\n   */\n  readonly requiresBootstrapStackVersion?: number;\n\n  /**\n   * SSM parameter where the bootstrap stack version number can be found\n   *\n   * Only used if `requiresBootstrapStackVersion` is set.\n   *\n   * - If this value is not set, the bootstrap stack name must be known at\n   *   deployment time so the stack version can be looked up from the stack\n   *   outputs.\n   * - If this value is set, the bootstrap stack can have any name because\n   *   we won't need to look it up.\n   *\n   * @default - Bootstrap stack version number looked up\n   */\n  readonly bootstrapStackVersionSsmParameter?: string;\n}\n"],
  "mappings": "0NAGA,UAAA,QAAA,WAAA,EAWA,MAAsB,gBAAgB,CA8B1B,wBAAwB,MAAc,QAA0B,iHACxE,MAAM,oBAAoB,OAAO,EASzB,kBAAkB,MAAc,QAA4B,QAA0C,CAAA,EAAE,oMAChH,UAAA,2BAA2B,QAAS,MAAO,SAAO,KAAP,QAAW,CAAA,EAAE,IAAE,QAAQ,0BAAsB,MAAA,KAAA,OAAA,GAAI,CAAA,CAAE,GAzClG,QAAA,iBAAA",
  "names": []
}
