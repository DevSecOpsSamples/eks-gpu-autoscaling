{
  "version": 3,
  "sources": ["annotations.ts"],
  "sourcesContent": ["import * as cxschema from '../../cloud-assembly-schema';\nimport * as cxapi from '../../cx-api';\nimport { IConstruct, Node } from 'constructs';\n\nconst DEPRECATIONS_SYMBOL = Symbol.for('@aws-cdk/core.deprecations');\n\n/**\n * Includes API for attaching annotations such as warning messages to constructs.\n */\nexport class Annotations {\n  /**\n   * Returns the annotations API for a construct scope.\n   * @param scope The scope\n   */\n  public static of(scope: IConstruct) {\n    return new Annotations(scope);\n  }\n\n  private readonly stackTraces: boolean;\n\n  private constructor(private readonly scope: IConstruct) {\n    const disableTrace =\n      scope.node.tryGetContext(cxapi.DISABLE_METADATA_STACK_TRACE) ||\n      process.env.CDK_DISABLE_STACK_TRACE;\n\n    this.stackTraces = !disableTrace;\n  }\n\n  /**\n   * Adds a warning metadata entry to this construct.\n   *\n   * The CLI will display the warning when an app is synthesized, or fail if run\n   * in --strict mode.\n   *\n   * @param message The warning message.\n   */\n  public addWarning(message: string) {\n    this.addMessage(cxschema.ArtifactMetadataEntryType.WARN, message);\n  }\n\n  /**\n   * Adds an info metadata entry to this construct.\n   *\n   * The CLI will display the info message when apps are synthesized.\n   *\n   * @param message The info message.\n   */\n  public addInfo(message: string): void {\n    this.addMessage(cxschema.ArtifactMetadataEntryType.INFO, message);\n  }\n\n  /**\n   * Adds an { \"error\": <message> } metadata entry to this construct.\n   * The toolkit will fail deployment of any stack that has errors reported against it.\n   * @param message The error message.\n   */\n  public addError(message: string) {\n    this.addMessage(cxschema.ArtifactMetadataEntryType.ERROR, message);\n  }\n\n  /**\n   * Adds a deprecation warning for a specific API.\n   *\n   * Deprecations will be added only once per construct as a warning and will be\n   * deduplicated based on the `api`.\n   *\n   * If the environment variable `CDK_BLOCK_DEPRECATIONS` is set, this method\n   * will throw an error instead with the deprecation message.\n   *\n   * @param api The API being deprecated in the format `module.Class.property`\n   * (e.g. `@aws-cdk/core.Construct.node`).\n   * @param message The deprecation message to display, with information about\n   * alternatives.\n   */\n  public addDeprecation(api: string, message: string) {\n    const text = `The API ${api} is deprecated: ${message}. This API will be removed in the next major release`;\n\n    // throw if CDK_BLOCK_DEPRECATIONS is set\n    if (process.env.CDK_BLOCK_DEPRECATIONS) {\n      throw new Error(`${Node.of(this.scope).path}: ${text}`);\n    }\n\n    // de-dup based on api key\n    const set = this.deprecationsReported;\n    if (set.has(api)) {\n      return;\n    }\n\n    this.addWarning(text);\n    set.add(api);\n  }\n\n  /**\n   * Adds a message metadata entry to the construct node, to be displayed by the CDK CLI.\n   * @param level The message level\n   * @param message The message itself\n   */\n  private addMessage(level: string, message: string) {\n    Node.of(this.scope).addMetadata(level, message, { stackTrace: this.stackTraces });\n  }\n\n  /**\n   * Returns the set of deprecations reported on this construct.\n   */\n  private get deprecationsReported() {\n    let set = (this.scope as any)[DEPRECATIONS_SYMBOL];\n    if (!set) {\n      set = new Set();\n      Object.defineProperty(this.scope, DEPRECATIONS_SYMBOL, { value: set });\n    }\n\n    return set;\n  }\n}\n"],
  "mappings": "uJAAA,SAAA,QAAA,6BAAA,EACA,MAAA,QAAA,cAAA,EACA,aAAA,QAAA,YAAA,EAEM,oBAAsB,OAAO,IAAI,4BAA4B,EAKnE,MAAa,WAAW,CAWtB,YAAqC,MAAiB,CAAjB,KAAA,MAAA,MACnC,KAAM,cACJ,MAAM,KAAK,cAAc,MAAM,4BAA4B,GAC3D,QAAQ,IAAI,wBAEd,KAAK,YAAc,CAAC,mBAXR,IAAG,MAAiB,CAChC,MAAO,IAAI,aAAY,KAAK,EAqBvB,WAAW,QAAe,CAC/B,KAAK,WAAW,SAAS,0BAA0B,KAAM,OAAO,EAU3D,QAAQ,QAAe,CAC5B,KAAK,WAAW,SAAS,0BAA0B,KAAM,OAAO,EAQ3D,SAAS,QAAe,CAC7B,KAAK,WAAW,SAAS,0BAA0B,MAAO,OAAO,EAiB5D,eAAe,IAAa,QAAe,CAChD,KAAM,MAAO,WAAW,sBAAsB,8DAG9C,GAAI,QAAQ,IAAI,uBACd,KAAM,IAAI,OAAM,GAAG,aAAA,KAAK,GAAG,KAAK,KAAK,EAAE,SAAS,MAAM,EAIxD,KAAM,KAAM,KAAK,qBACjB,AAAI,IAAI,IAAI,GAAG,GAIf,MAAK,WAAW,IAAI,EACpB,IAAI,IAAI,GAAG,GAQL,WAAW,MAAe,QAAe,CAC/C,aAAA,KAAK,GAAG,KAAK,KAAK,EAAE,YAAY,MAAO,QAAS,CAAE,WAAY,KAAK,WAAW,CAAE,KAMtE,uBAAoB,CAC9B,GAAI,KAAO,KAAK,MAAc,qBAC9B,MAAK,MACH,KAAM,GAAI,KACV,OAAO,eAAe,KAAK,MAAO,oBAAqB,CAAE,MAAO,GAAG,CAAE,GAGhE,KAtGX,QAAA,YAAA",
  "names": []
}
