{
  "version": 3,
  "sources": ["untrusted-code-boundary-policy.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { Construct } from 'constructs';\n\n/**\n * Construction properties for UntrustedCodeBoundaryPolicy\n */\nexport interface UntrustedCodeBoundaryPolicyProps {\n  /**\n   * The name of the managed policy.\n   *\n   * @default - A name is automatically generated.\n   */\n  readonly managedPolicyName?: string;\n\n  /**\n   * Additional statements to add to the default set of statements\n   *\n   * @default - No additional statements\n   */\n  readonly additionalStatements?: iam.PolicyStatement[];\n}\n\n/**\n * Permissions Boundary for a CodeBuild Project running untrusted code\n *\n * This class is a Policy, intended to be used as a Permissions Boundary\n * for a CodeBuild project. It allows most of the actions necessary to run\n * the CodeBuild project, but disallows reading from Parameter Store\n * and Secrets Manager.\n *\n * Use this when your CodeBuild project is running untrusted code (for\n * example, if you are using one to automatically build Pull Requests\n * that anyone can submit), and you want to prevent your future self\n * from accidentally exposing Secrets to this build.\n *\n * (The reason you might want to do this is because otherwise anyone\n * who can submit a Pull Request to your project can write a script\n * to email those secrets to themselves).\n *\n * @example\n *\n * declare const project: codebuild.Project;\n * iam.PermissionsBoundary.of(project).apply(new codebuild.UntrustedCodeBoundaryPolicy(this, 'Boundary'));\n */\nexport class UntrustedCodeBoundaryPolicy extends iam.ManagedPolicy {\n  constructor(scope: Construct, id: string, props: UntrustedCodeBoundaryPolicyProps = {}) {\n    super(scope, id, {\n      managedPolicyName: props.managedPolicyName,\n      description: 'Permissions Boundary Policy for CodeBuild Projects running untrusted code',\n      statements: [\n        new iam.PolicyStatement({\n          actions: [\n            // For logging\n            'logs:CreateLogGroup',\n            'logs:CreateLogStream',\n            'logs:PutLogEvents',\n\n            // For test reports\n            'codebuild:CreateReportGroup',\n            'codebuild:CreateReport',\n            'codebuild:UpdateReport',\n            'codebuild:BatchPutTestCases',\n            'codebuild:BatchPutCodeCoverages',\n\n            // For batch builds\n            'codebuild:StartBuild',\n            'codebuild:StopBuild',\n            'codebuild:RetryBuild',\n\n            // For pulling ECR images\n            'ecr:GetDownloadUrlForLayer',\n            'ecr:BatchGetImage',\n            'ecr:BatchCheckLayerAvailability',\n\n            // For running in a VPC\n            'ec2:CreateNetworkInterfacePermission',\n            'ec2:CreateNetworkInterface',\n            'ec2:DescribeNetworkInterfaces',\n            'ec2:DeleteNetworkInterface',\n            'ec2:DescribeSubnets',\n            'ec2:DescribeSecurityGroups',\n            'ec2:DescribeDhcpOptions',\n            'ec2:DescribeVpcs',\n\n            // NOTABLY MISSING:\n            // - Reading secrets\n            // - Reading parameterstore\n          ],\n          resources: ['*'],\n        }),\n        ...props.additionalStatements ?? [],\n      ],\n    });\n  }\n}"],
  "mappings": "kOAAA,IAAA,QAAA,eAAA,EA4CA,MAAa,mCAAoC,KAAI,aAAa,CAChE,YAAY,MAAkB,GAAY,MAA0C,CAAA,EAAE,QACpF,MAAM,MAAO,GAAI,CACf,kBAAmB,MAAM,kBACzB,YAAa,4EACb,WAAY,CACV,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAEP,sBACA,uBACA,oBAGA,8BACA,yBACA,yBACA,8BACA,kCAGA,uBACA,sBACA,uBAGA,6BACA,oBACA,kCAGA,uCACA,6BACA,gCACA,6BACA,sBACA,6BACA,0BACA,oBAMF,UAAW,CAAC,GAAG,EAChB,EACD,GAAA,IAAG,MAAM,wBAAoB,MAAA,KAAA,OAAA,GAAI,CAAA,GAEpC,6FAhDL,QAAA,4BAAA",
  "names": []
}
