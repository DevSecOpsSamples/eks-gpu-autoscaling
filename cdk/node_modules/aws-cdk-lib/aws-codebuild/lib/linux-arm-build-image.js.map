{
  "version": 3,
  "sources": ["linux-arm-build-image.ts"],
  "sourcesContent": ["import * as ecr from '../../aws-ecr';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport { BuildSpec } from './build-spec';\nimport { runScriptLinuxBuildSpec } from './private/run-script-linux-build-spec';\nimport { BuildEnvironment, ComputeType, IBuildImage, ImagePullPrincipalType } from './project';\n\n/**\n * Construction properties of {@link LinuxArmBuildImage}.\n * Module-private, as the constructor of {@link LinuxArmBuildImage} is private.\n */\ninterface LinuxArmBuildImageProps {\n  readonly imageId: string;\n  readonly imagePullPrincipalType?: ImagePullPrincipalType;\n  readonly secretsManagerCredentials?: secretsmanager.ISecret;\n  readonly repository?: ecr.IRepository;\n}\n\n/**\n * A CodeBuild image running aarch64 Linux.\n *\n * This class has a bunch of public constants that represent the CodeBuild ARM images.\n *\n * You can also specify a custom image using the static method:\n *\n * - LinuxBuildImage.fromEcrRepository(repo[, tag])\n *\n *\n * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html\n */\nexport class LinuxArmBuildImage implements IBuildImage {\n  /** Image \"aws/codebuild/amazonlinux2-aarch64-standard:1.0\". */\n  public static readonly AMAZON_LINUX_2_STANDARD_1_0 = LinuxArmBuildImage.fromCodeBuildImageId('aws/codebuild/amazonlinux2-aarch64-standard:1.0');\n  /** Image \"aws/codebuild/amazonlinux2-aarch64-standard:2.0\". */\n  public static readonly AMAZON_LINUX_2_STANDARD_2_0 = LinuxArmBuildImage.fromCodeBuildImageId('aws/codebuild/amazonlinux2-aarch64-standard:2.0');\n\n  /**\n   * Returns an ARM image running Linux from an ECR repository.\n   *\n   * NOTE: if the repository is external (i.e. imported), then we won't be able to add\n   * a resource policy statement for it so CodeBuild can pull the image.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-ecr.html\n   *\n   * @param repository The ECR repository\n   * @param tag Image tag (default \"latest\")\n   * @returns An aarch64 Linux build image from an ECR repository.\n   */\n  public static fromEcrRepository(repository: ecr.IRepository, tag: string = 'latest'): IBuildImage {\n    return new LinuxArmBuildImage({\n      imageId: repository.repositoryUriForTag(tag),\n      imagePullPrincipalType: ImagePullPrincipalType.SERVICE_ROLE,\n      repository,\n    });\n  }\n\n  /**\n   * Uses a Docker image provided by CodeBuild.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html\n   *\n   * @param id The image identifier\n   * @example 'aws/codebuild/amazonlinux2-aarch64-standard:1.0'\n   * @returns A Docker image provided by CodeBuild.\n   */\n  public static fromCodeBuildImageId(id: string): IBuildImage {\n    return new LinuxArmBuildImage({\n      imageId: id,\n      imagePullPrincipalType: ImagePullPrincipalType.CODEBUILD,\n    });\n  }\n\n  public readonly type = 'ARM_CONTAINER';\n  public readonly defaultComputeType = ComputeType.LARGE;\n  public readonly imageId: string;\n  public readonly imagePullPrincipalType?: ImagePullPrincipalType;\n  public readonly secretsManagerCredentials?: secretsmanager.ISecret;\n  public readonly repository?: ecr.IRepository;\n\n  private constructor(props: LinuxArmBuildImageProps) {\n    this.imageId = props.imageId;\n    this.imagePullPrincipalType = props.imagePullPrincipalType;\n    this.secretsManagerCredentials = props.secretsManagerCredentials;\n    this.repository = props.repository;\n  }\n\n  /**\n   * Validates by checking the BuildEnvironment computeType as aarch64 images only support ComputeType.SMALL and\n   * ComputeType.LARGE\n   * @param buildEnvironment BuildEnvironment\n   */\n  public validate(buildEnvironment: BuildEnvironment): string[] {\n    const ret = [];\n    if (buildEnvironment.computeType &&\n        buildEnvironment.computeType !== ComputeType.SMALL &&\n        buildEnvironment.computeType !== ComputeType.LARGE) {\n      ret.push(`ARM images only support ComputeTypes '${ComputeType.SMALL}' and '${ComputeType.LARGE}' - ` +\n               `'${buildEnvironment.computeType}' was given`);\n    }\n    return ret;\n  }\n\n  public runScriptBuildspec(entrypoint: string): BuildSpec {\n    return runScriptLinuxBuildSpec(entrypoint);\n  }\n}\n"],
  "mappings": "yNAGA,8BAAA,QAAA,uCAAA,EACA,UAAA,QAAA,WAAA,EAyBA,MAAa,kBAAkB,CAiD7B,YAAoB,MAA8B,CAPlC,KAAA,KAAO,gBACP,KAAA,mBAAqB,UAAA,YAAY,MAO/C,KAAK,QAAU,MAAM,QACrB,KAAK,uBAAyB,MAAM,uBACpC,KAAK,0BAA4B,MAAM,0BACvC,KAAK,WAAa,MAAM,iBAnCZ,mBAAkB,WAA6B,IAAc,SAAQ,4EAC1E,GAAI,oBAAmB,CAC5B,QAAS,WAAW,oBAAoB,GAAG,EAC3C,uBAAwB,UAAA,uBAAuB,aAC/C,WACD,QAYW,sBAAqB,GAAU,CAC3C,MAAO,IAAI,oBAAmB,CAC5B,QAAS,GACT,uBAAwB,UAAA,uBAAuB,UAChD,EAsBI,SAAS,iBAAkC,sFAChD,KAAM,KAAM,CAAA,EACZ,MAAI,kBAAiB,aACjB,iBAAiB,cAAgB,UAAA,YAAY,OAC7C,iBAAiB,cAAgB,UAAA,YAAY,OAC/C,IAAI,KAAK,yCAAyC,UAAA,YAAY,eAAe,UAAA,YAAY,aAC5E,iBAAiB,wBAAwB,EAEjD,IAGF,mBAAmB,WAAkB,CAC1C,MAAO,+BAAA,wBAAwB,UAAU,GAzE7C,QAAA,mBAAA,sIAEyB,mBAAA,4BAA8B,mBAAmB,qBAAqB,iDAAiD,EAEvH,mBAAA,4BAA8B,mBAAmB,qBAAqB,iDAAiD",
  "names": []
}
