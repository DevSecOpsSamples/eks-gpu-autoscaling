{
  "version": 3,
  "sources": ["project.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport * as notifications from '../../aws-codestarnotifications';\nimport * as ec2 from '../../aws-ec2';\nimport * as ecr from '../../aws-ecr';\nimport { DockerImageAsset, DockerImageAssetProps } from '../../aws-ecr-assets';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as s3 from '../../aws-s3';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport { ArnFormat, Aws, Duration, IResource, Lazy, Names, PhysicalName, Reference, Resource, SecretValue, Stack, Token, TokenComparison, Tokenization } from '../../core';\nimport { Construct, IConstruct } from 'constructs';\nimport { BuildSpec } from './build-spec';\nimport { Cache } from './cache';\nimport { CodeBuildMetrics } from './codebuild-canned-metrics.generated';\nimport { CfnProject } from './codebuild.generated';\nimport { CodePipelineArtifacts } from './codepipeline-artifacts';\nimport { IFileSystemLocation } from './file-location';\nimport { NoArtifacts } from './no-artifacts';\nimport { NoSource } from './no-source';\nimport { runScriptLinuxBuildSpec, S3_BUCKET_ENV, S3_KEY_ENV } from './private/run-script-linux-build-spec';\nimport { LoggingOptions } from './project-logs';\nimport { renderReportGroupArn } from './report-group-utils';\nimport { ISource } from './source';\nimport { CODEPIPELINE_SOURCE_ARTIFACTS_TYPE, NO_SOURCE_TYPE } from './source-types';\nimport { IArtifacts } from './artifacts';\n\nconst VPC_POLICY_SYM = Symbol.for('@aws-cdk/aws-codebuild.roleVpcPolicy');\n\n/**\n * The type returned from {@link IProject#enableBatchBuilds}.\n */\nexport interface BatchBuildConfig {\n  /** The IAM batch service Role of this Project. */\n  readonly role: iam.IRole;\n}\n\n/**\n * Location of a PEM certificate on S3\n */\nexport interface BuildEnvironmentCertificate {\n  /**\n   * The bucket where the certificate is\n   */\n  readonly bucket: s3.IBucket;\n  /**\n   * The full path and name of the key file\n   */\n  readonly objectKey: string;\n}\n\n/**\n * Additional options to pass to the notification rule.\n */\nexport interface ProjectNotifyOnOptions extends notifications.NotificationRuleOptions {\n  /**\n   * A list of event types associated with this notification rule for CodeBuild Project.\n   * For a complete list of event types and IDs, see Notification concepts in the Developer Tools Console User Guide.\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#concepts-api\n   */\n  readonly events: ProjectNotificationEvents[];\n}\n\nexport interface IProject extends IResource, iam.IGrantable, ec2.IConnectable, notifications.INotificationRuleSource {\n  /**\n   * The ARN of this Project.\n   * @attribute\n   */\n  readonly projectArn: string;\n\n  /**\n   * The human-visible name of this Project.\n   * @attribute\n   */\n  readonly projectName: string;\n\n  /** The IAM service Role of this Project. Undefined for imported Projects. */\n  readonly role?: iam.IRole;\n\n  /**\n   * Enable batch builds.\n   *\n   * Returns an object contining the batch service role if batch builds\n   * could be enabled.\n   */\n  enableBatchBuilds(): BatchBuildConfig | undefined;\n\n  addToRolePolicy(policyStatement: iam.PolicyStatement): void;\n\n  /**\n   * Defines a CloudWatch event rule triggered when something happens with this project.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-build-notifications.html\n   */\n  onEvent(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule triggered when the build project state\n   * changes. You can filter specific build status events using an event\n   * pattern filter on the `build-status` detail field:\n   *\n   *    const rule = project.onStateChange('OnBuildStarted', { target });\n   *    rule.addEventPattern({\n   *      detail: {\n   *        'build-status': [\n   *          \"IN_PROGRESS\",\n   *          \"SUCCEEDED\",\n   *          \"FAILED\",\n   *          \"STOPPED\"\n   *        ]\n   *      }\n   *    });\n   *\n   * You can also use the methods `onBuildFailed` and `onBuildSucceeded` to define rules for\n   * these specific state changes.\n   *\n   * To access fields from the event in the event target input,\n   * use the static fields on the `StateChangeEvent` class.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-build-notifications.html\n   */\n  onStateChange(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CloudWatch event rule that triggers upon phase change of this\n   * build project.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-build-notifications.html\n   */\n  onPhaseChange(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines an event rule which triggers when a build starts.\n   */\n  onBuildStarted(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines an event rule which triggers when a build fails.\n   */\n  onBuildFailed(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines an event rule which triggers when a build completes successfully.\n   */\n  onBuildSucceeded(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * @returns a CloudWatch metric associated with this build project.\n   * @param metricName The name of the metric\n   * @param props Customization properties\n   */\n  metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Measures the number of builds triggered.\n   *\n   * Units: Count\n   *\n   * Valid CloudWatch statistics: Sum\n   *\n   * @default sum over 5 minutes\n   */\n  metricBuilds(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Measures the duration of all builds over time.\n   *\n   * Units: Seconds\n   *\n   * Valid CloudWatch statistics: Average (recommended), Maximum, Minimum\n   *\n   * @default average over 5 minutes\n   */\n  metricDuration(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Measures the number of successful builds.\n   *\n   * Units: Count\n   *\n   * Valid CloudWatch statistics: Sum\n   *\n   * @default sum over 5 minutes\n   */\n  metricSucceededBuilds(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Measures the number of builds that failed because of client error or\n   * because of a timeout.\n   *\n   * Units: Count\n   *\n   * Valid CloudWatch statistics: Sum\n   *\n   * @default sum over 5 minutes\n   */\n  metricFailedBuilds(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Defines a CodeStar Notification rule triggered when the project\n   * events emitted by you specified, it very similar to `onEvent` API.\n   *\n   * You can also use the methods `notifyOnBuildSucceeded` and\n   * `notifyOnBuildFailed` to define rules for these specific event emitted.\n   *\n   * @param id The logical identifier of the CodeStar Notifications rule that will be created\n   * @param target The target to register for the CodeStar Notifications destination.\n   * @param options Customization options for CodeStar Notifications rule\n   * @returns CodeStar Notifications rule associated with this build project.\n   */\n  notifyOn(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options: ProjectNotifyOnOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar notification rule which triggers when a build completes successfully.\n   */\n  notifyOnBuildSucceeded(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Defines a CodeStar notification rule which triggers when a build fails.\n   */\n  notifyOnBuildFailed(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n}\n\n/**\n * Represents a reference to a CodeBuild Project.\n *\n * If you're managing the Project alongside the rest of your CDK resources,\n * use the {@link Project} class.\n *\n * If you want to reference an already existing Project\n * (or one defined in a different CDK Stack),\n * use the {@link import} method.\n */\nabstract class ProjectBase extends Resource implements IProject {\n  public abstract readonly grantPrincipal: iam.IPrincipal;\n\n  /** The ARN of this Project. */\n  public abstract readonly projectArn: string;\n\n  /** The human-visible name of this Project. */\n  public abstract readonly projectName: string;\n\n  /** The IAM service Role of this Project. */\n  public abstract readonly role?: iam.IRole;\n\n  /**\n   * Actual connections object for this Project.\n   * May be unset, in which case this Project is not configured to use a VPC.\n   * @internal\n   */\n  protected _connections: ec2.Connections | undefined;\n\n  /**\n   * Access the Connections object.\n   * Will fail if this Project does not have a VPC set.\n   */\n  public get connections(): ec2.Connections {\n    if (!this._connections) {\n      throw new Error('Only VPC-associated Projects have security groups to manage. Supply the \"vpc\" parameter when creating the Project');\n    }\n    return this._connections;\n  }\n\n  public enableBatchBuilds(): BatchBuildConfig | undefined {\n    return undefined;\n  }\n\n  /**\n   * Add a permission only if there's a policy attached.\n   * @param statement The permissions statement to add\n   */\n  public addToRolePolicy(statement: iam.PolicyStatement) {\n    if (this.role) {\n      this.role.addToPrincipalPolicy(statement);\n    }\n  }\n\n  /**\n   * Defines a CloudWatch event rule triggered when something happens with this project.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-build-notifications.html\n   */\n  public onEvent(id: string, options: events.OnEventOptions = {}): events.Rule {\n    const rule = new events.Rule(this, id, options);\n    rule.addTarget(options.target);\n    rule.addEventPattern({\n      source: ['aws.codebuild'],\n      detail: {\n        'project-name': [this.projectName],\n      },\n    });\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule triggered when the build project state\n   * changes. You can filter specific build status events using an event\n   * pattern filter on the `build-status` detail field:\n   *\n   *    const rule = project.onStateChange('OnBuildStarted', { target });\n   *    rule.addEventPattern({\n   *      detail: {\n   *        'build-status': [\n   *          \"IN_PROGRESS\",\n   *          \"SUCCEEDED\",\n   *          \"FAILED\",\n   *          \"STOPPED\"\n   *        ]\n   *      }\n   *    });\n   *\n   * You can also use the methods `onBuildFailed` and `onBuildSucceeded` to define rules for\n   * these specific state changes.\n   *\n   * To access fields from the event in the event target input,\n   * use the static fields on the `StateChangeEvent` class.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-build-notifications.html\n   */\n  public onStateChange(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onEvent(id, options);\n    rule.addEventPattern({\n      detailType: ['CodeBuild Build State Change'],\n    });\n    return rule;\n  }\n\n  /**\n   * Defines a CloudWatch event rule that triggers upon phase change of this\n   * build project.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-build-notifications.html\n   */\n  public onPhaseChange(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onEvent(id, options);\n    rule.addEventPattern({\n      detailType: ['CodeBuild Build Phase Change'],\n    });\n    return rule;\n  }\n\n  /**\n   * Defines an event rule which triggers when a build starts.\n   *\n   * To access fields from the event in the event target input,\n   * use the static fields on the `StateChangeEvent` class.\n   */\n  public onBuildStarted(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onStateChange(id, options);\n    rule.addEventPattern({\n      detail: {\n        'build-status': ['IN_PROGRESS'],\n      },\n    });\n    return rule;\n  }\n\n  /**\n   * Defines an event rule which triggers when a build fails.\n   *\n   * To access fields from the event in the event target input,\n   * use the static fields on the `StateChangeEvent` class.\n   */\n  public onBuildFailed(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onStateChange(id, options);\n    rule.addEventPattern({\n      detail: {\n        'build-status': ['FAILED'],\n      },\n    });\n    return rule;\n  }\n\n  /**\n   * Defines an event rule which triggers when a build completes successfully.\n   *\n   * To access fields from the event in the event target input,\n   * use the static fields on the `StateChangeEvent` class.\n   */\n  public onBuildSucceeded(id: string, options: events.OnEventOptions = {}) {\n    const rule = this.onStateChange(id, options);\n    rule.addEventPattern({\n      detail: {\n        'build-status': ['SUCCEEDED'],\n      },\n    });\n    return rule;\n  }\n\n  /**\n   * @returns a CloudWatch metric associated with this build project.\n   * @param metricName The name of the metric\n   * @param props Customization properties\n   */\n  public metric(metricName: string, props?: cloudwatch.MetricOptions) {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/CodeBuild',\n      metricName,\n      dimensionsMap: { ProjectName: this.projectName },\n      ...props,\n    }).attachTo(this);\n  }\n\n  /**\n   * Measures the number of builds triggered.\n   *\n   * Units: Count\n   *\n   * Valid CloudWatch statistics: Sum\n   *\n   * @default sum over 5 minutes\n   */\n  public metricBuilds(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(CodeBuildMetrics.buildsSum, props);\n  }\n\n  /**\n   * Measures the duration of all builds over time.\n   *\n   * Units: Seconds\n   *\n   * Valid CloudWatch statistics: Average (recommended), Maximum, Minimum\n   *\n   * @default average over 5 minutes\n   */\n  public metricDuration(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(CodeBuildMetrics.durationAverage, props);\n  }\n\n  /**\n   * Measures the number of successful builds.\n   *\n   * Units: Count\n   *\n   * Valid CloudWatch statistics: Sum\n   *\n   * @default sum over 5 minutes\n   */\n  public metricSucceededBuilds(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(CodeBuildMetrics.succeededBuildsSum, props);\n  }\n\n  /**\n   * Measures the number of builds that failed because of client error or\n   * because of a timeout.\n   *\n   * Units: Count\n   *\n   * Valid CloudWatch statistics: Sum\n   *\n   * @default sum over 5 minutes\n   */\n  public metricFailedBuilds(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(CodeBuildMetrics.failedBuildsSum, props);\n  }\n\n  public notifyOn(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options: ProjectNotifyOnOptions,\n  ): notifications.INotificationRule {\n    return new notifications.NotificationRule(this, id, {\n      ...options,\n      source: this,\n      targets: [target],\n    });\n  }\n\n  public notifyOnBuildSucceeded(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOn(id, target, {\n      ...options,\n      events: [ProjectNotificationEvents.BUILD_SUCCEEDED],\n    });\n  }\n\n  public notifyOnBuildFailed(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule {\n    return this.notifyOn(id, target, {\n      ...options,\n      events: [ProjectNotificationEvents.BUILD_FAILED],\n    });\n  }\n\n  public bindAsNotificationRuleSource(_scope: Construct): notifications.NotificationRuleSourceConfig {\n    return {\n      sourceArn: this.projectArn,\n    };\n  }\n\n  private cannedMetric(\n    fn: (dims: { ProjectName: string }) => cloudwatch.MetricProps,\n    props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      ...fn({ ProjectName: this.projectName }),\n      ...props,\n    }).attachTo(this);\n  }\n}\n\nexport interface CommonProjectProps {\n  /**\n   * A description of the project. Use the description to identify the purpose\n   * of the project.\n   *\n   * @default - No description.\n   */\n  readonly description?: string;\n\n  /**\n   * Filename or contents of buildspec in JSON format.\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-example\n   *\n   * @default - Empty buildspec.\n   */\n  readonly buildSpec?: BuildSpec;\n\n  /**\n   * Service Role to assume while running the build.\n   *\n   * @default - A role will be created.\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * Encryption key to use to read and write artifacts.\n   *\n   * @default - The AWS-managed CMK for Amazon Simple Storage Service (Amazon S3) is used.\n   */\n  readonly encryptionKey?: kms.IKey;\n\n  /**\n   * Caching strategy to use.\n   *\n   * @default Cache.none\n   */\n  readonly cache?: Cache;\n\n  /**\n   * Build environment to use for the build.\n   *\n   * @default BuildEnvironment.LinuxBuildImage.STANDARD_1_0\n   */\n  readonly environment?: BuildEnvironment;\n\n  /**\n   * Indicates whether AWS CodeBuild generates a publicly accessible URL for\n   * your project's build badge. For more information, see Build Badges Sample\n   * in the AWS CodeBuild User Guide.\n   *\n   * @default false\n   */\n  readonly badge?: boolean;\n\n  /**\n   * The number of minutes after which AWS CodeBuild stops the build if it's\n   * not complete. For valid values, see the timeoutInMinutes field in the AWS\n   * CodeBuild User Guide.\n   *\n   * @default Duration.hours(1)\n   */\n  readonly timeout?: Duration;\n\n  /**\n   * Additional environment variables to add to the build environment.\n   *\n   * @default - No additional environment variables are specified.\n   */\n  readonly environmentVariables?: { [name: string]: BuildEnvironmentVariable };\n\n  /**\n   * Whether to check for the presence of any secrets in the environment variables of the default type, BuildEnvironmentVariableType.PLAINTEXT.\n   * Since using a secret for the value of that kind of variable would result in it being displayed in plain text in the AWS Console,\n   * the construct will throw an exception if it detects a secret was passed there.\n   * Pass this property as false if you want to skip this validation,\n   * and keep using a secret in a plain text environment variable.\n   *\n   * @default true\n   */\n  readonly checkSecretsInPlainTextEnvVariables?: boolean;\n\n  /**\n   * The physical, human-readable name of the CodeBuild Project.\n   *\n   * @default - Name is automatically generated.\n   */\n  readonly projectName?: string;\n\n  /**\n   * VPC network to place codebuild network interfaces\n   *\n   * Specify this if the codebuild project needs to access resources in a VPC.\n   *\n   * @default - No VPC is specified.\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * Where to place the network interfaces within the VPC.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default - All private subnets.\n   */\n  readonly subnetSelection?: ec2.SubnetSelection;\n\n  /**\n   * What security group to associate with the codebuild project's network interfaces.\n   * If no security group is identified, one will be created automatically.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default - Security group will be automatically created.\n   *\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n  /**\n   * Whether to allow the CodeBuild to send all network traffic\n   *\n   * If set to false, you must individually add traffic rules to allow the\n   * CodeBuild project to connect to network targets.\n   *\n   * Only used if 'vpc' is supplied.\n   *\n   * @default true\n   */\n  readonly allowAllOutbound?: boolean;\n\n  /**\n   * An  ProjectFileSystemLocation objects for a CodeBuild build project.\n   *\n   * A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint,\n   * and type of a file system created using Amazon Elastic File System.\n   *\n   * @default - no file system locations\n   */\n  readonly fileSystemLocations?: IFileSystemLocation[];\n\n  /**\n   * Add permissions to this project's role to create and use test report groups with name starting with the name of this project.\n   *\n   * That is the standard report group that gets created when a simple name\n   * (in contrast to an ARN)\n   * is used in the 'reports' section of the buildspec of this project.\n   * This is usually harmless, but you can turn these off if you don't plan on using test\n   * reports in this project.\n   *\n   * @default true\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/test-report-group-naming.html\n   */\n  readonly grantReportGroupPermissions?: boolean;\n\n  /**\n   * Information about logs for the build project. A project can create logs in Amazon CloudWatch Logs, an S3 bucket, or both.\n   *\n   * @default - no log configuration is set\n   */\n  readonly logging?: LoggingOptions;\n\n  /**\n   * The number of minutes after which AWS CodeBuild stops the build if it's\n   * still in queue. For valid values, see the timeoutInMinutes field in the AWS\n   * CodeBuild User Guide.\n   *\n   * @default - no queue timeout is set\n   */\n  readonly queuedTimeout?: Duration\n\n  /**\n   * Maximum number of concurrent builds. Minimum value is 1 and maximum is account build limit.\n   *\n   * @default - no explicit limit is set\n   */\n  readonly concurrentBuildLimit?: number\n}\n\nexport interface ProjectProps extends CommonProjectProps {\n  /**\n   * The source of the build.\n   * *Note*: if {@link NoSource} is given as the source,\n   * then you need to provide an explicit `buildSpec`.\n   *\n   * @default - NoSource\n   */\n  readonly source?: ISource;\n\n  /**\n   * Defines where build artifacts will be stored.\n   * Could be: PipelineBuildArtifacts, NoArtifacts and S3Artifacts.\n   *\n   * @default NoArtifacts\n   */\n  readonly artifacts?: IArtifacts;\n\n  /**\n   * The secondary sources for the Project.\n   * Can be also added after the Project has been created by using the {@link Project#addSecondarySource} method.\n   *\n   * @default - No secondary sources.\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-multi-in-out.html\n   */\n  readonly secondarySources?: ISource[];\n\n  /**\n   * The secondary artifacts for the Project.\n   * Can also be added after the Project has been created by using the {@link Project#addSecondaryArtifact} method.\n   *\n   * @default - No secondary artifacts.\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-multi-in-out.html\n   */\n  readonly secondaryArtifacts?: IArtifacts[];\n}\n\n/**\n * The extra options passed to the {@link IProject.bindToCodePipeline} method.\n */\nexport interface BindToCodePipelineOptions {\n  /**\n   * The artifact bucket that will be used by the action that invokes this project.\n   */\n  readonly artifactBucket: s3.IBucket;\n}\n\n/**\n * A representation of a CodeBuild Project.\n */\nexport class Project extends ProjectBase {\n\n  public static fromProjectArn(scope: Construct, id: string, projectArn: string): IProject {\n    const parsedArn = Stack.of(scope).splitArn(projectArn, ArnFormat.SLASH_RESOURCE_NAME);\n\n    class Import extends ProjectBase {\n      public readonly grantPrincipal: iam.IPrincipal;\n      public readonly projectArn = projectArn;\n      public readonly projectName = parsedArn.resourceName!;\n      public readonly role?: iam.Role = undefined;\n\n      constructor(s: Construct, i: string) {\n        super(s, i, {\n          account: parsedArn.account,\n          region: parsedArn.region,\n        });\n        this.grantPrincipal = new iam.UnknownPrincipal({ resource: this });\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * Import a Project defined either outside the CDK,\n   * or in a different CDK Stack\n   * (and exported using the {@link export} method).\n   *\n   * @note if you're importing a CodeBuild Project for use\n   *   in a CodePipeline, make sure the existing Project\n   *   has permissions to access the S3 Bucket of that Pipeline -\n   *   otherwise, builds in that Pipeline will always fail.\n   *\n   * @param scope the parent Construct for this Construct\n   * @param id the logical name of this Construct\n   * @param projectName the name of the project to import\n   * @returns a reference to the existing Project\n   */\n  public static fromProjectName(scope: Construct, id: string, projectName: string): IProject {\n    class Import extends ProjectBase {\n      public readonly grantPrincipal: iam.IPrincipal;\n      public readonly projectArn: string;\n      public readonly projectName: string;\n      public readonly role?: iam.Role = undefined;\n\n      constructor(s: Construct, i: string) {\n        super(s, i);\n\n        this.projectArn = Stack.of(this).formatArn({\n          service: 'codebuild',\n          resource: 'project',\n          resourceName: projectName,\n        });\n\n        this.grantPrincipal = new iam.UnknownPrincipal({ resource: this });\n        this.projectName = projectName;\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * Convert the environment variables map of string to {@link BuildEnvironmentVariable},\n   * which is the customer-facing type, to a list of {@link CfnProject.EnvironmentVariableProperty},\n   * which is the representation of environment variables in CloudFormation.\n   *\n   * @param environmentVariables the map of string to environment variables\n   * @param validateNoPlainTextSecrets whether to throw an exception\n   *   if any of the plain text environment variables contain secrets, defaults to 'false'\n   * @returns an array of {@link CfnProject.EnvironmentVariableProperty} instances\n   */\n  public static serializeEnvVariables(environmentVariables: { [name: string]: BuildEnvironmentVariable },\n    validateNoPlainTextSecrets: boolean = false, principal?: iam.IGrantable): CfnProject.EnvironmentVariableProperty[] {\n\n    const ret = new Array<CfnProject.EnvironmentVariableProperty>();\n    const ssmIamResources = new Array<string>();\n    const secretsManagerIamResources = new Set<string>();\n    const kmsIamResources = new Set<string>();\n\n    for (const [name, envVariable] of Object.entries(environmentVariables)) {\n      const envVariableValue = envVariable.value?.toString();\n      const cfnEnvVariable: CfnProject.EnvironmentVariableProperty = {\n        name,\n        type: envVariable.type || BuildEnvironmentVariableType.PLAINTEXT,\n        value: envVariableValue,\n      };\n      ret.push(cfnEnvVariable);\n\n      // validate that the plain-text environment variables don't contain any secrets in them\n      if (validateNoPlainTextSecrets && cfnEnvVariable.type === BuildEnvironmentVariableType.PLAINTEXT) {\n        const fragments = Tokenization.reverseString(cfnEnvVariable.value);\n        for (const token of fragments.tokens) {\n          if (token instanceof SecretValue) {\n            throw new Error(`Plaintext environment variable '${name}' contains a secret value! ` +\n              'This means the value of this variable will be visible in plain text in the AWS Console. ' +\n              \"Please consider using CodeBuild's SecretsManager environment variables feature instead. \" +\n              \"If you'd like to continue with having this secret in the plaintext environment variables, \" +\n              'please set the checkSecretsInPlainTextEnvVariables property to false');\n          }\n        }\n      }\n\n      if (principal) {\n        const stack = Stack.of(principal as unknown as IConstruct);\n\n        // save the SSM env variables\n        if (envVariable.type === BuildEnvironmentVariableType.PARAMETER_STORE) {\n          ssmIamResources.push(stack.formatArn({\n            service: 'ssm',\n            resource: 'parameter',\n            // If the parameter name starts with / the resource name is not separated with a double '/'\n            // arn:aws:ssm:region:1111111111:parameter/PARAM_NAME\n            resourceName: envVariableValue.startsWith('/')\n              ? envVariableValue.slice(1)\n              : envVariableValue,\n          }));\n        }\n\n        // save SecretsManager env variables\n        if (envVariable.type === BuildEnvironmentVariableType.SECRETS_MANAGER) {\n          // We have 3 basic cases here of what envVariableValue can be:\n          // 1. A string that starts with 'arn:' (and might contain Token fragments).\n          // 2. A Token.\n          // 3. A simple value, like 'secret-id'.\n          if (envVariableValue.startsWith('arn:')) {\n            const parsedArn = stack.splitArn(envVariableValue, ArnFormat.COLON_RESOURCE_NAME);\n            if (!parsedArn.resourceName) {\n              throw new Error('SecretManager ARN is missing the name of the secret: ' + envVariableValue);\n            }\n\n            // the value of the property can be a complex string, separated by ':';\n            // see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.secrets-manager\n            const secretName = parsedArn.resourceName.split(':')[0];\n            secretsManagerIamResources.add(stack.formatArn({\n              service: 'secretsmanager',\n              resource: 'secret',\n              // since we don't know whether the ARN was full, or partial\n              // (CodeBuild supports both),\n              // stick a \"*\" at the end, which makes it work for both\n              resourceName: `${secretName}*`,\n              arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n              partition: parsedArn.partition,\n              account: parsedArn.account,\n              region: parsedArn.region,\n            }));\n            // if secret comes from another account, SecretsManager will need to access\n            // KMS on the other account as well to be able to get the secret\n            if (parsedArn.account && Token.compareStrings(parsedArn.account, stack.account) === TokenComparison.DIFFERENT) {\n              kmsIamResources.add(stack.formatArn({\n                service: 'kms',\n                resource: 'key',\n                // We do not know the ID of the key, but since this is a cross-account access,\n                // the key policies have to allow this access, so a wildcard is safe here\n                resourceName: '*',\n                arnFormat: ArnFormat.SLASH_RESOURCE_NAME,\n                partition: parsedArn.partition,\n                account: parsedArn.account,\n                region: parsedArn.region,\n              }));\n            }\n          } else if (Token.isUnresolved(envVariableValue)) {\n            // the value of the property can be a complex string, separated by ':';\n            // see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.secrets-manager\n            let secretArn = envVariableValue.split(':')[0];\n\n            // parse the Token, and see if it represents a single resource\n            // (we will assume it's a Secret from SecretsManager)\n            const fragments = Tokenization.reverseString(envVariableValue);\n            if (fragments.tokens.length === 1) {\n              const resolvable = fragments.tokens[0];\n              if (Reference.isReference(resolvable)) {\n                // check the Stack the resource owning the reference belongs to\n                const resourceStack = Stack.of(resolvable.target);\n                if (Token.compareStrings(stack.account, resourceStack.account) === TokenComparison.DIFFERENT) {\n                  // since this is a cross-account access,\n                  // add the appropriate KMS permissions\n                  kmsIamResources.add(stack.formatArn({\n                    service: 'kms',\n                    resource: 'key',\n                    // We do not know the ID of the key, but since this is a cross-account access,\n                    // the key policies have to allow this access, so a wildcard is safe here\n                    resourceName: '*',\n                    arnFormat: ArnFormat.SLASH_RESOURCE_NAME,\n                    partition: resourceStack.partition,\n                    account: resourceStack.account,\n                    region: resourceStack.region,\n                  }));\n\n                  // Work around a bug in SecretsManager -\n                  // when the access is cross-environment,\n                  // Secret.secretArn returns a partial ARN!\n                  // So add a \"*\" at the end, so that the permissions work\n                  secretArn = `${secretArn}-??????`;\n                }\n              }\n            }\n\n            // if we are passed a Token, we should assume it's the ARN of the Secret\n            // (as the name would not work anyway, because it would be the full name, which CodeBuild does not support)\n            secretsManagerIamResources.add(secretArn);\n          } else {\n            // the value of the property can be a complex string, separated by ':';\n            // see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.secrets-manager\n            const secretName = envVariableValue.split(':')[0];\n            secretsManagerIamResources.add(stack.formatArn({\n              service: 'secretsmanager',\n              resource: 'secret',\n              resourceName: `${secretName}-??????`,\n              arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n            }));\n          }\n        }\n      }\n    }\n\n    if (ssmIamResources.length !== 0) {\n      principal?.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n        actions: ['ssm:GetParameters'],\n        resources: ssmIamResources,\n      }));\n    }\n    if (secretsManagerIamResources.size !== 0) {\n      principal?.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n        actions: ['secretsmanager:GetSecretValue'],\n        resources: Array.from(secretsManagerIamResources),\n      }));\n    }\n    if (kmsIamResources.size !== 0) {\n      principal?.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n        actions: ['kms:Decrypt'],\n        resources: Array.from(kmsIamResources),\n      }));\n    }\n\n    return ret;\n  }\n\n  public readonly grantPrincipal: iam.IPrincipal;\n\n  /**\n   * The IAM role for this project.\n   */\n  public readonly role?: iam.IRole;\n\n  /**\n   * The ARN of the project.\n   */\n  public readonly projectArn: string;\n\n  /**\n   * The name of the project.\n   */\n  public readonly projectName: string;\n\n  private readonly source: ISource;\n  private readonly buildImage: IBuildImage;\n  private readonly _secondarySources: CfnProject.SourceProperty[];\n  private readonly _secondarySourceVersions: CfnProject.ProjectSourceVersionProperty[];\n  private readonly _secondaryArtifacts: CfnProject.ArtifactsProperty[];\n  private _encryptionKey?: kms.IKey;\n  private readonly _fileSystemLocations: CfnProject.ProjectFileSystemLocationProperty[];\n  private _batchServiceRole?: iam.Role;\n\n  constructor(scope: Construct, id: string, props: ProjectProps) {\n    super(scope, id, {\n      physicalName: props.projectName,\n    });\n\n    this.role = props.role || new iam.Role(this, 'Role', {\n      roleName: PhysicalName.GENERATE_IF_NEEDED,\n      assumedBy: new iam.ServicePrincipal('codebuild.amazonaws.com'),\n    });\n    this.grantPrincipal = this.role;\n\n    this.buildImage = (props.environment && props.environment.buildImage) || LinuxBuildImage.STANDARD_1_0;\n\n    // let source \"bind\" to the project. this usually involves granting permissions\n    // for the code build role to interact with the source.\n    this.source = props.source || new NoSource();\n    const sourceConfig = this.source.bind(this, this);\n    if (props.badge && !this.source.badgeSupported) {\n      throw new Error(`Badge is not supported for source type ${this.source.type}`);\n    }\n\n    const artifacts = props.artifacts\n      ? props.artifacts\n      : (this.source.type === CODEPIPELINE_SOURCE_ARTIFACTS_TYPE\n        ? new CodePipelineArtifacts()\n        : new NoArtifacts());\n    const artifactsConfig = artifacts.bind(this, this);\n\n    const cache = props.cache || Cache.none();\n\n    // give the caching strategy the option to grant permissions to any required resources\n    cache._bind(this);\n\n    // Inject download commands for asset if requested\n    const environmentVariables = props.environmentVariables || {};\n    const buildSpec = props.buildSpec;\n    if (this.source.type === NO_SOURCE_TYPE && (buildSpec === undefined || !buildSpec.isImmediate)) {\n      throw new Error(\"If the Project's source is NoSource, you need to provide a concrete buildSpec\");\n    }\n\n    this._secondarySources = [];\n    this._secondarySourceVersions = [];\n    this._fileSystemLocations = [];\n    for (const secondarySource of props.secondarySources || []) {\n      this.addSecondarySource(secondarySource);\n    }\n\n    this._secondaryArtifacts = [];\n    for (const secondaryArtifact of props.secondaryArtifacts || []) {\n      this.addSecondaryArtifact(secondaryArtifact);\n    }\n\n    this.validateCodePipelineSettings(artifacts);\n\n    for (const fileSystemLocation of props.fileSystemLocations || []) {\n      this.addFileSystemLocation(fileSystemLocation);\n    }\n\n    const resource = new CfnProject(this, 'Resource', {\n      description: props.description,\n      source: {\n        ...sourceConfig.sourceProperty,\n        buildSpec: buildSpec && buildSpec.toBuildSpec(),\n      },\n      artifacts: artifactsConfig.artifactsProperty,\n      serviceRole: this.role.roleArn,\n      environment: this.renderEnvironment(props, environmentVariables),\n      fileSystemLocations: Lazy.any({ produce: () => this.renderFileSystemLocations() }),\n      // lazy, because we have a setter for it in setEncryptionKey\n      // The 'alias/aws/s3' default is necessary because leaving the `encryptionKey` field\n      // empty will not remove existing encryptionKeys during an update (ref. t/D17810523)\n      encryptionKey: Lazy.string({ produce: () => this._encryptionKey ? this._encryptionKey.keyArn : 'alias/aws/s3' }),\n      badgeEnabled: props.badge,\n      cache: cache._toCloudFormation(),\n      name: this.physicalName,\n      timeoutInMinutes: props.timeout && props.timeout.toMinutes(),\n      queuedTimeoutInMinutes: props.queuedTimeout && props.queuedTimeout.toMinutes(),\n      concurrentBuildLimit: props.concurrentBuildLimit,\n      secondarySources: Lazy.any({ produce: () => this.renderSecondarySources() }),\n      secondarySourceVersions: Lazy.any({ produce: () => this.renderSecondarySourceVersions() }),\n      secondaryArtifacts: Lazy.any({ produce: () => this.renderSecondaryArtifacts() }),\n      triggers: sourceConfig.buildTriggers,\n      sourceVersion: sourceConfig.sourceVersion,\n      vpcConfig: this.configureVpc(props),\n      logsConfig: this.renderLoggingConfiguration(props.logging),\n      buildBatchConfig: Lazy.any({\n        produce: () => {\n          const config: CfnProject.ProjectBuildBatchConfigProperty | undefined = this._batchServiceRole ? {\n            serviceRole: this._batchServiceRole.roleArn,\n          } : undefined;\n          return config;\n        },\n      }),\n    });\n\n    this.addVpcRequiredPermissions(props, resource);\n\n    this.projectArn = this.getResourceArnAttribute(resource.attrArn, {\n      service: 'codebuild',\n      resource: 'project',\n      resourceName: this.physicalName,\n    });\n    this.projectName = this.getResourceNameAttribute(resource.ref);\n\n    this.addToRolePolicy(this.createLoggingPermission());\n    // add permissions to create and use test report groups\n    // with names starting with the project's name,\n    // unless the customer explicitly opts out of it\n    if (props.grantReportGroupPermissions !== false) {\n      this.addToRolePolicy(new iam.PolicyStatement({\n        actions: [\n          'codebuild:CreateReportGroup',\n          'codebuild:CreateReport',\n          'codebuild:UpdateReport',\n          'codebuild:BatchPutTestCases',\n          'codebuild:BatchPutCodeCoverages',\n        ],\n        resources: [renderReportGroupArn(this, `${this.projectName}-*`)],\n      }));\n    }\n\n    if (props.encryptionKey) {\n      this.encryptionKey = props.encryptionKey;\n    }\n\n    // bind\n    if (isBindableBuildImage(this.buildImage)) {\n      this.buildImage.bind(this, this, {});\n    }\n\n    this.node.addValidation({ validate: () => this.validateProject() });\n  }\n\n  public enableBatchBuilds(): BatchBuildConfig | undefined {\n    if (!this._batchServiceRole) {\n      this._batchServiceRole = new iam.Role(this, 'BatchServiceRole', {\n        assumedBy: new iam.ServicePrincipal('codebuild.amazonaws.com'),\n      });\n      this._batchServiceRole.addToPrincipalPolicy(new iam.PolicyStatement({\n        resources: [Lazy.string({\n          produce: () => this.projectArn,\n        })],\n        actions: [\n          'codebuild:StartBuild',\n          'codebuild:StopBuild',\n          'codebuild:RetryBuild',\n        ],\n      }));\n    }\n    return {\n      role: this._batchServiceRole,\n    };\n  }\n\n  /**\n   * Adds a secondary source to the Project.\n   *\n   * @param secondarySource the source to add as a secondary source\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-multi-in-out.html\n   */\n  public addSecondarySource(secondarySource: ISource): void {\n    if (!secondarySource.identifier) {\n      throw new Error('The identifier attribute is mandatory for secondary sources');\n    }\n    const secondarySourceConfig = secondarySource.bind(this, this);\n    this._secondarySources.push(secondarySourceConfig.sourceProperty);\n    if (secondarySourceConfig.sourceVersion) {\n      this._secondarySourceVersions.push({\n        sourceIdentifier: secondarySource.identifier,\n        sourceVersion: secondarySourceConfig.sourceVersion,\n      });\n    }\n  }\n\n  /**\n   * Adds a fileSystemLocation to the Project.\n   *\n   * @param fileSystemLocation the fileSystemLocation to add\n   */\n  public addFileSystemLocation(fileSystemLocation: IFileSystemLocation): void {\n    const fileSystemConfig = fileSystemLocation.bind(this, this);\n    this._fileSystemLocations.push(fileSystemConfig.location);\n  }\n\n  /**\n   * Adds a secondary artifact to the Project.\n   *\n   * @param secondaryArtifact the artifact to add as a secondary artifact\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-multi-in-out.html\n   */\n  public addSecondaryArtifact(secondaryArtifact: IArtifacts): void {\n    if (!secondaryArtifact.identifier) {\n      throw new Error('The identifier attribute is mandatory for secondary artifacts');\n    }\n    this._secondaryArtifacts.push(secondaryArtifact.bind(this, this).artifactsProperty);\n  }\n\n  /**\n   * A callback invoked when the given project is added to a CodePipeline.\n   *\n   * @param _scope the construct the binding is taking place in\n   * @param options additional options for the binding\n   */\n  public bindToCodePipeline(_scope: Construct, options: BindToCodePipelineOptions): void {\n    // work around a bug in CodeBuild: it ignores the KMS key set on the pipeline,\n    // and always uses its own, project-level key\n    if (options.artifactBucket.encryptionKey && !this._encryptionKey) {\n      // we cannot safely do this assignment if the key is of type kms.Key,\n      // and belongs to a stack in a different account or region than the project\n      // (that would cause an illegal reference, as KMS keys don't have physical names)\n      const keyStack = Stack.of(options.artifactBucket.encryptionKey);\n      const projectStack = Stack.of(this);\n      if (!(options.artifactBucket.encryptionKey instanceof kms.Key &&\n          (keyStack.account !== projectStack.account || keyStack.region !== projectStack.region))) {\n        this.encryptionKey = options.artifactBucket.encryptionKey;\n      }\n    }\n  }\n\n  private validateProject(): string[] {\n    const ret = new Array<string>();\n    if (this.source.type === CODEPIPELINE_SOURCE_ARTIFACTS_TYPE) {\n      if (this._secondarySources.length > 0) {\n        ret.push('A Project with a CodePipeline Source cannot have secondary sources. ' +\n          \"Use the CodeBuild Pipeline Actions' `extraInputs` property instead\");\n      }\n      if (this._secondaryArtifacts.length > 0) {\n        ret.push('A Project with a CodePipeline Source cannot have secondary artifacts. ' +\n          \"Use the CodeBuild Pipeline Actions' `outputs` property instead\");\n      }\n    }\n    return ret;\n  }\n\n  private set encryptionKey(encryptionKey: kms.IKey) {\n    this._encryptionKey = encryptionKey;\n    encryptionKey.grantEncryptDecrypt(this);\n  }\n\n  private createLoggingPermission() {\n    const logGroupArn = Stack.of(this).formatArn({\n      service: 'logs',\n      resource: 'log-group',\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n      resourceName: `/aws/codebuild/${this.projectName}`,\n    });\n\n    const logGroupStarArn = `${logGroupArn}:*`;\n\n    return new iam.PolicyStatement({\n      resources: [logGroupArn, logGroupStarArn],\n      actions: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],\n    });\n  }\n\n  private renderEnvironment(\n    props: ProjectProps,\n    projectVars: { [name: string]: BuildEnvironmentVariable } = {}): CfnProject.EnvironmentProperty {\n\n    const env = props.environment ?? {};\n    const vars: { [name: string]: BuildEnvironmentVariable } = {};\n    const containerVars = env.environmentVariables || {};\n\n    // first apply environment variables from the container definition\n    for (const name of Object.keys(containerVars)) {\n      vars[name] = containerVars[name];\n    }\n\n    // now apply project-level vars\n    for (const name of Object.keys(projectVars)) {\n      vars[name] = projectVars[name];\n    }\n\n    const hasEnvironmentVars = Object.keys(vars).length > 0;\n\n    const errors = this.buildImage.validate(env);\n    if (errors.length > 0) {\n      throw new Error('Invalid CodeBuild environment: ' + errors.join('\\n'));\n    }\n\n    const imagePullPrincipalType = this.buildImage.imagePullPrincipalType === ImagePullPrincipalType.CODEBUILD\n      ? ImagePullPrincipalType.CODEBUILD\n      : ImagePullPrincipalType.SERVICE_ROLE;\n    if (this.buildImage.repository) {\n      if (imagePullPrincipalType === ImagePullPrincipalType.SERVICE_ROLE) {\n        this.buildImage.repository.grantPull(this);\n      } else {\n        const statement = new iam.PolicyStatement({\n          principals: [new iam.ServicePrincipal('codebuild.amazonaws.com')],\n          actions: ['ecr:GetDownloadUrlForLayer', 'ecr:BatchGetImage', 'ecr:BatchCheckLayerAvailability'],\n        });\n        statement.sid = 'CodeBuild';\n        this.buildImage.repository.addToResourcePolicy(statement);\n      }\n    }\n    if (imagePullPrincipalType === ImagePullPrincipalType.SERVICE_ROLE) {\n      this.buildImage.secretsManagerCredentials?.grantRead(this);\n    }\n\n    const secret = this.buildImage.secretsManagerCredentials;\n    return {\n      type: this.buildImage.type,\n      image: this.buildImage.imageId,\n      imagePullCredentialsType: imagePullPrincipalType,\n      registryCredential: secret\n        ? {\n          credentialProvider: 'SECRETS_MANAGER',\n          // Secrets must be referenced by either the full ARN (with SecretsManager suffix), or by name.\n          // \"Partial\" ARNs (without the suffix) will fail a validation regex at deploy-time.\n          credential: secret.secretFullArn ?? secret.secretName,\n        }\n        : undefined,\n      certificate: env.certificate?.bucket.arnForObjects(env.certificate.objectKey),\n      privilegedMode: env.privileged || false,\n      computeType: env.computeType || this.buildImage.defaultComputeType,\n      environmentVariables: hasEnvironmentVars\n        ? Project.serializeEnvVariables(vars, props.checkSecretsInPlainTextEnvVariables ?? true, this)\n        : undefined,\n    };\n  }\n\n  private renderFileSystemLocations(): CfnProject.ProjectFileSystemLocationProperty[] | undefined {\n    return this._fileSystemLocations.length === 0\n      ? undefined\n      : this._fileSystemLocations;\n  }\n\n  private renderSecondarySources(): CfnProject.SourceProperty[] | undefined {\n    return this._secondarySources.length === 0\n      ? undefined\n      : this._secondarySources;\n  }\n\n  private renderSecondarySourceVersions(): CfnProject.ProjectSourceVersionProperty[] | undefined {\n    return this._secondarySourceVersions.length === 0\n      ? undefined\n      : this._secondarySourceVersions;\n  }\n\n  private renderSecondaryArtifacts(): CfnProject.ArtifactsProperty[] | undefined {\n    return this._secondaryArtifacts.length === 0\n      ? undefined\n      : this._secondaryArtifacts;\n  }\n\n  /**\n   * If configured, set up the VPC-related properties\n   *\n   * Returns the VpcConfig that should be added to the\n   * codebuild creation properties.\n   */\n  private configureVpc(props: ProjectProps): CfnProject.VpcConfigProperty | undefined {\n    if ((props.securityGroups || props.allowAllOutbound !== undefined) && !props.vpc) {\n      throw new Error('Cannot configure \\'securityGroup\\' or \\'allowAllOutbound\\' without configuring a VPC');\n    }\n\n    if (!props.vpc) { return undefined; }\n\n    if ((props.securityGroups && props.securityGroups.length > 0) && props.allowAllOutbound !== undefined) {\n      throw new Error('Configure \\'allowAllOutbound\\' directly on the supplied SecurityGroup.');\n    }\n\n    let securityGroups: ec2.ISecurityGroup[];\n    if (props.securityGroups && props.securityGroups.length > 0) {\n      securityGroups = props.securityGroups;\n    } else {\n      const securityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {\n        vpc: props.vpc,\n        description: 'Automatic generated security group for CodeBuild ' + Names.uniqueId(this),\n        allowAllOutbound: props.allowAllOutbound,\n      });\n      securityGroups = [securityGroup];\n    }\n    this._connections = new ec2.Connections({ securityGroups });\n\n    return {\n      vpcId: props.vpc.vpcId,\n      subnets: props.vpc.selectSubnets(props.subnetSelection).subnetIds,\n      securityGroupIds: this.connections.securityGroups.map(s => s.securityGroupId),\n    };\n  }\n\n  private renderLoggingConfiguration(props: LoggingOptions | undefined): CfnProject.LogsConfigProperty | undefined {\n    if (props === undefined) {\n      return undefined;\n    }\n\n    let s3Config: CfnProject.S3LogsConfigProperty | undefined = undefined;\n    let cloudwatchConfig: CfnProject.CloudWatchLogsConfigProperty | undefined = undefined;\n\n    if (props.s3) {\n      const s3Logs = props.s3;\n      s3Config = {\n        status: (s3Logs.enabled ?? true) ? 'ENABLED' : 'DISABLED',\n        location: `${s3Logs.bucket.bucketName}` + (s3Logs.prefix ? `/${s3Logs.prefix}` : ''),\n        encryptionDisabled: s3Logs.encrypted,\n      };\n      s3Logs.bucket?.grantWrite(this);\n    }\n\n    if (props.cloudWatch) {\n      const cloudWatchLogs = props.cloudWatch;\n      const status = (cloudWatchLogs.enabled ?? true) ? 'ENABLED' : 'DISABLED';\n\n      if (status === 'ENABLED' && !(cloudWatchLogs.logGroup)) {\n        throw new Error('Specifying a LogGroup is required if CloudWatch logging for CodeBuild is enabled');\n      }\n      cloudWatchLogs.logGroup?.grantWrite(this);\n\n      cloudwatchConfig = {\n        status,\n        groupName: cloudWatchLogs.logGroup?.logGroupName,\n        streamName: cloudWatchLogs.prefix,\n      };\n    }\n\n    return {\n      s3Logs: s3Config,\n      cloudWatchLogs: cloudwatchConfig,\n    };\n  }\n\n  private addVpcRequiredPermissions(props: ProjectProps, project: CfnProject): void {\n    if (!props.vpc || !this.role) {\n      return;\n    }\n\n    this.role.addToPrincipalPolicy(new iam.PolicyStatement({\n      resources: [`arn:${Aws.PARTITION}:ec2:${Aws.REGION}:${Aws.ACCOUNT_ID}:network-interface/*`],\n      actions: ['ec2:CreateNetworkInterfacePermission'],\n      conditions: {\n        StringEquals: {\n          'ec2:Subnet': props.vpc\n            .selectSubnets(props.subnetSelection).subnetIds\n            .map(si => `arn:${Aws.PARTITION}:ec2:${Aws.REGION}:${Aws.ACCOUNT_ID}:subnet/${si}`),\n          'ec2:AuthorizedService': 'codebuild.amazonaws.com',\n        },\n      },\n    }));\n\n    // If the same Role is used for multiple Projects, always creating a new `iam.Policy`\n    // will attach the same policy multiple times, probably exceeding the maximum size of the\n    // Role policy. Make sure we only do it once for the same role.\n    //\n    // This deduplication could be a feature of the Role itself, but that feels risky and\n    // is hard to implement (what with Tokens and all). Safer to fix it locally for now.\n    let policy: iam.Policy | undefined = (this.role as any)[VPC_POLICY_SYM];\n    if (!policy) {\n      policy = new iam.Policy(this, 'PolicyDocument', {\n        statements: [\n          new iam.PolicyStatement({\n            resources: ['*'],\n            actions: [\n              'ec2:CreateNetworkInterface',\n              'ec2:DescribeNetworkInterfaces',\n              'ec2:DeleteNetworkInterface',\n              'ec2:DescribeSubnets',\n              'ec2:DescribeSecurityGroups',\n              'ec2:DescribeDhcpOptions',\n              'ec2:DescribeVpcs',\n            ],\n          }),\n        ],\n      });\n      this.role.attachInlinePolicy(policy);\n      (this.role as any)[VPC_POLICY_SYM] = policy;\n    }\n\n    // add an explicit dependency between the EC2 Policy and this Project -\n    // otherwise, creating the Project fails, as it requires these permissions\n    // to be already attached to the Project's Role\n    project.node.addDependency(policy);\n  }\n\n  private validateCodePipelineSettings(artifacts: IArtifacts) {\n    const sourceType = this.source.type;\n    const artifactsType = artifacts.type;\n\n    if ((sourceType === CODEPIPELINE_SOURCE_ARTIFACTS_TYPE ||\n        artifactsType === CODEPIPELINE_SOURCE_ARTIFACTS_TYPE) &&\n        (sourceType !== artifactsType)) {\n      throw new Error('Both source and artifacts must be set to CodePipeline');\n    }\n  }\n}\n\n/**\n * Build machine compute type.\n */\nexport enum ComputeType {\n  SMALL = 'BUILD_GENERAL1_SMALL',\n  MEDIUM = 'BUILD_GENERAL1_MEDIUM',\n  LARGE = 'BUILD_GENERAL1_LARGE',\n  X2_LARGE = 'BUILD_GENERAL1_2XLARGE'\n}\n\n/**\n * The type of principal CodeBuild will use to pull your build Docker image.\n */\nexport enum ImagePullPrincipalType {\n  /**\n   * CODEBUILD specifies that CodeBuild uses its own identity when pulling the image.\n   * This means the resource policy of the ECR repository that hosts the image will be modified to trust\n   * CodeBuild's service principal.\n   * This is the required principal type when using CodeBuild's pre-defined images.\n   */\n  CODEBUILD = 'CODEBUILD',\n\n  /**\n   * SERVICE_ROLE specifies that AWS CodeBuild uses the project's role when pulling the image.\n   * The role will be granted pull permissions on the ECR repository hosting the image.\n   */\n  SERVICE_ROLE = 'SERVICE_ROLE'\n}\n\nexport interface BuildEnvironment {\n  /**\n   * The image used for the builds.\n   *\n   * @default LinuxBuildImage.STANDARD_1_0\n   */\n  readonly buildImage?: IBuildImage;\n\n  /**\n   * The type of compute to use for this build.\n   * See the {@link ComputeType} enum for the possible values.\n   *\n   * @default taken from {@link #buildImage#defaultComputeType}\n   */\n  readonly computeType?: ComputeType;\n\n  /**\n   * Indicates how the project builds Docker images. Specify true to enable\n   * running the Docker daemon inside a Docker container. This value must be\n   * set to true only if this build project will be used to build Docker\n   * images, and the specified build environment image is not one provided by\n   * AWS CodeBuild with Docker support. Otherwise, all associated builds that\n   * attempt to interact with the Docker daemon will fail.\n   *\n   * @default false\n   */\n  readonly privileged?: boolean;\n\n  /**\n   * The location of the PEM-encoded certificate for the build project\n   *\n   * @default - No external certificate is added to the project\n   */\n  readonly certificate?: BuildEnvironmentCertificate;\n\n  /**\n   * The environment variables that your builds can use.\n   */\n  readonly environmentVariables?: { [name: string]: BuildEnvironmentVariable };\n}\n\n/**\n * Represents a Docker image used for the CodeBuild Project builds.\n * Use the concrete subclasses, either:\n * {@link LinuxBuildImage} or {@link WindowsBuildImage}.\n */\nexport interface IBuildImage {\n  /**\n   * The type of build environment.\n   */\n  readonly type: string;\n\n  /**\n   * The Docker image identifier that the build environment uses.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html\n   */\n  readonly imageId: string;\n\n  /**\n   * The default {@link ComputeType} to use with this image,\n   * if one was not specified in {@link BuildEnvironment#computeType} explicitly.\n   */\n  readonly defaultComputeType: ComputeType;\n\n  /**\n   * The type of principal that CodeBuild will use to pull this build Docker image.\n   *\n   * @default ImagePullPrincipalType.SERVICE_ROLE\n   */\n  readonly imagePullPrincipalType?: ImagePullPrincipalType;\n\n  /**\n   * The secretsManagerCredentials for access to a private registry.\n   *\n   * @default no credentials will be used\n   */\n  readonly secretsManagerCredentials?: secretsmanager.ISecret;\n\n  /**\n   * An optional ECR repository that the image is hosted in.\n   *\n   * @default no repository\n   */\n  readonly repository?: ecr.IRepository;\n\n  /**\n   * Allows the image a chance to validate whether the passed configuration is correct.\n   *\n   * @param buildEnvironment the current build environment\n   */\n  validate(buildEnvironment: BuildEnvironment): string[];\n\n  /**\n   * Make a buildspec to run the indicated script\n   */\n  runScriptBuildspec(entrypoint: string): BuildSpec;\n}\n\n/** Optional arguments to {@link IBuildImage.binder} - currently empty. */\nexport interface BuildImageBindOptions { }\n\n/** The return type from {@link IBuildImage.binder} - currently empty. */\nexport interface BuildImageConfig { }\n\n// @deprecated(not in tsdoc on purpose): add bind() to IBuildImage\n// and get rid of IBindableBuildImage\n\n/** A variant of {@link IBuildImage} that allows binding to the project. */\nexport interface IBindableBuildImage extends IBuildImage {\n  /** Function that allows the build image access to the construct tree. */\n  bind(scope: Construct, project: IProject, options: BuildImageBindOptions): BuildImageConfig;\n}\n\n/**\n * The options when creating a CodeBuild Docker build image\n * using {@link LinuxBuildImage.fromDockerRegistry}\n * or {@link WindowsBuildImage.fromDockerRegistry}.\n */\nexport interface DockerImageOptions {\n  /**\n   * The credentials, stored in Secrets Manager,\n   * used for accessing the repository holding the image,\n   * if the repository is private.\n   *\n   * @default no credentials will be used (we assume the repository is public)\n   */\n  readonly secretsManagerCredentials?: secretsmanager.ISecret;\n}\n\n/**\n * Construction properties of {@link LinuxBuildImage}.\n * Module-private, as the constructor of {@link LinuxBuildImage} is private.\n */\ninterface LinuxBuildImageProps {\n  readonly imageId: string;\n  readonly imagePullPrincipalType?: ImagePullPrincipalType;\n  readonly secretsManagerCredentials?: secretsmanager.ISecret;\n  readonly repository?: ecr.IRepository;\n}\n\n// Keep around to resolve a circular dependency until removing deprecated ARM image constants from LinuxBuildImage\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { LinuxArmBuildImage } from './linux-arm-build-image';\n\n/**\n * A CodeBuild image running x86-64 Linux.\n *\n * This class has a bunch of public constants that represent the most popular images.\n *\n * You can also specify a custom image using one of the static methods:\n *\n * - LinuxBuildImage.fromDockerRegistry(image[, { secretsManagerCredentials }])\n * - LinuxBuildImage.fromEcrRepository(repo[, tag])\n * - LinuxBuildImage.fromAsset(parent, id, props)\n *\n *\n * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html\n */\nexport class LinuxBuildImage implements IBuildImage {\n  public static readonly STANDARD_1_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/standard:1.0');\n  public static readonly STANDARD_2_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/standard:2.0');\n  public static readonly STANDARD_3_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/standard:3.0');\n  /** The `aws/codebuild/standard:4.0` build image. */\n  public static readonly STANDARD_4_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/standard:4.0');\n  /** The `aws/codebuild/standard:5.0` build image. */\n  public static readonly STANDARD_5_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/standard:5.0');\n\n  public static readonly AMAZON_LINUX_2 = LinuxBuildImage.codeBuildImage('aws/codebuild/amazonlinux2-x86_64-standard:1.0');\n  public static readonly AMAZON_LINUX_2_2 = LinuxBuildImage.codeBuildImage('aws/codebuild/amazonlinux2-x86_64-standard:2.0');\n  /** The Amazon Linux 2 x86_64 standard image, version `3.0`. */\n  public static readonly AMAZON_LINUX_2_3 = LinuxBuildImage.codeBuildImage('aws/codebuild/amazonlinux2-x86_64-standard:3.0');\n\n  /** @deprecated Use LinuxArmBuildImage.AMAZON_LINUX_2_STANDARD_1_0 instead. */\n  public static readonly AMAZON_LINUX_2_ARM = LinuxArmBuildImage.AMAZON_LINUX_2_STANDARD_1_0;\n  /**\n   * Image \"aws/codebuild/amazonlinux2-aarch64-standard:2.0\".\n   * @deprecated Use LinuxArmBuildImage.AMAZON_LINUX_2_STANDARD_2_0 instead.\n   * */\n  public static readonly AMAZON_LINUX_2_ARM_2 = LinuxArmBuildImage.AMAZON_LINUX_2_STANDARD_2_0;\n\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_BASE = LinuxBuildImage.codeBuildImage('aws/codebuild/ubuntu-base:14.04');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_ANDROID_JAVA8_24_4_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/android-java-8:24.4.1');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_ANDROID_JAVA8_26_1_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/android-java-8:26.1.1');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_DOCKER_17_09_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/docker:17.09.0');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_DOCKER_18_09_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/docker:18.09.0');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_GOLANG_1_10 = LinuxBuildImage.codeBuildImage('aws/codebuild/golang:1.10');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_GOLANG_1_11 = LinuxBuildImage.codeBuildImage('aws/codebuild/golang:1.11');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_OPEN_JDK_8 = LinuxBuildImage.codeBuildImage('aws/codebuild/java:openjdk-8');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_OPEN_JDK_9 = LinuxBuildImage.codeBuildImage('aws/codebuild/java:openjdk-9');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_OPEN_JDK_11 = LinuxBuildImage.codeBuildImage('aws/codebuild/java:openjdk-11');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_NODEJS_10_14_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/nodejs:10.14.1');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_NODEJS_10_1_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/nodejs:10.1.0');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_NODEJS_8_11_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/nodejs:8.11.0');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_NODEJS_6_3_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/nodejs:6.3.1');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_PHP_5_6 = LinuxBuildImage.codeBuildImage('aws/codebuild/php:5.6');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_PHP_7_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/php:7.0');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_PHP_7_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/php:7.1');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_PYTHON_3_7_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/python:3.7.1');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_PYTHON_3_6_5 = LinuxBuildImage.codeBuildImage('aws/codebuild/python:3.6.5');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_PYTHON_3_5_2 = LinuxBuildImage.codeBuildImage('aws/codebuild/python:3.5.2');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_PYTHON_3_4_5 = LinuxBuildImage.codeBuildImage('aws/codebuild/python:3.4.5');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_PYTHON_3_3_6 = LinuxBuildImage.codeBuildImage('aws/codebuild/python:3.3.6');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_PYTHON_2_7_12 = LinuxBuildImage.codeBuildImage('aws/codebuild/python:2.7.12');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_RUBY_2_5_3 = LinuxBuildImage.codeBuildImage('aws/codebuild/ruby:2.5.3');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_RUBY_2_5_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/ruby:2.5.1');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_RUBY_2_3_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/ruby:2.3.1');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_RUBY_2_2_5 = LinuxBuildImage.codeBuildImage('aws/codebuild/ruby:2.2.5');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_DOTNET_CORE_1_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/dot-net:core-1');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_DOTNET_CORE_2_0 = LinuxBuildImage.codeBuildImage('aws/codebuild/dot-net:core-2.0');\n  /** @deprecated Use {@link STANDARD_2_0} and specify runtime in buildspec runtime-versions section */\n  public static readonly UBUNTU_14_04_DOTNET_CORE_2_1 = LinuxBuildImage.codeBuildImage('aws/codebuild/dot-net:core-2.1');\n\n  /**\n   * @returns a x86-64 Linux build image from a Docker Hub image.\n   */\n  public static fromDockerRegistry(name: string, options: DockerImageOptions = {}): IBuildImage {\n    return new LinuxBuildImage({\n      ...options,\n      imageId: name,\n      imagePullPrincipalType: ImagePullPrincipalType.SERVICE_ROLE,\n    });\n  }\n\n  /**\n   * @returns A x86-64 Linux build image from an ECR repository.\n   *\n   * NOTE: if the repository is external (i.e. imported), then we won't be able to add\n   * a resource policy statement for it so CodeBuild can pull the image.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-ecr.html\n   *\n   * @param repository The ECR repository\n   * @param tag Image tag (default \"latest\")\n   */\n  public static fromEcrRepository(repository: ecr.IRepository, tag: string = 'latest'): IBuildImage {\n    return new LinuxBuildImage({\n      imageId: repository.repositoryUriForTag(tag),\n      imagePullPrincipalType: ImagePullPrincipalType.SERVICE_ROLE,\n      repository,\n    });\n  }\n\n  /**\n   * Uses an Docker image asset as a x86-64 Linux build image.\n   */\n  public static fromAsset(scope: Construct, id: string, props: DockerImageAssetProps): IBuildImage {\n    const asset = new DockerImageAsset(scope, id, props);\n    return new LinuxBuildImage({\n      imageId: asset.imageUri,\n      imagePullPrincipalType: ImagePullPrincipalType.SERVICE_ROLE,\n      repository: asset.repository,\n    });\n  }\n\n  /**\n   * Uses a Docker image provided by CodeBuild.\n   *\n   * @returns A Docker image provided by CodeBuild.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html\n   *\n   * @param id The image identifier\n   * @example 'aws/codebuild/standard:4.0'\n   */\n  public static fromCodeBuildImageId(id: string): IBuildImage {\n    return LinuxBuildImage.codeBuildImage(id);\n  }\n\n  private static codeBuildImage(name: string): IBuildImage {\n    return new LinuxBuildImage({\n      imageId: name,\n      imagePullPrincipalType: ImagePullPrincipalType.CODEBUILD,\n    });\n  }\n\n  public readonly type = 'LINUX_CONTAINER';\n  public readonly defaultComputeType = ComputeType.SMALL;\n  public readonly imageId: string;\n  public readonly imagePullPrincipalType?: ImagePullPrincipalType;\n  public readonly secretsManagerCredentials?: secretsmanager.ISecret;\n  public readonly repository?: ecr.IRepository;\n\n  private constructor(props: LinuxBuildImageProps) {\n    this.imageId = props.imageId;\n    this.imagePullPrincipalType = props.imagePullPrincipalType;\n    this.secretsManagerCredentials = props.secretsManagerCredentials;\n    this.repository = props.repository;\n  }\n\n  public validate(_: BuildEnvironment): string[] {\n    return [];\n  }\n\n  public runScriptBuildspec(entrypoint: string): BuildSpec {\n    return runScriptLinuxBuildSpec(entrypoint);\n  }\n}\n\n/**\n * Environment type for Windows Docker images\n */\nexport enum WindowsImageType {\n  /**\n   * The standard environment type, WINDOWS_CONTAINER\n   */\n  STANDARD = 'WINDOWS_CONTAINER',\n\n  /**\n   * The WINDOWS_SERVER_2019_CONTAINER environment type\n   */\n  SERVER_2019 = 'WINDOWS_SERVER_2019_CONTAINER'\n}\n\n/**\n * Construction properties of {@link WindowsBuildImage}.\n * Module-private, as the constructor of {@link WindowsBuildImage} is private.\n */\ninterface WindowsBuildImageProps {\n  readonly imageId: string;\n  readonly imagePullPrincipalType?: ImagePullPrincipalType;\n  readonly secretsManagerCredentials?: secretsmanager.ISecret;\n  readonly repository?: ecr.IRepository;\n  readonly imageType?: WindowsImageType;\n}\n\n/**\n * A CodeBuild image running Windows.\n *\n * This class has a bunch of public constants that represent the most popular images.\n *\n * You can also specify a custom image using one of the static methods:\n *\n * - WindowsBuildImage.fromDockerRegistry(image[, { secretsManagerCredentials }, imageType])\n * - WindowsBuildImage.fromEcrRepository(repo[, tag, imageType])\n * - WindowsBuildImage.fromAsset(parent, id, props, [, imageType])\n *\n * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html\n */\nexport class WindowsBuildImage implements IBuildImage {\n  /**\n   * Corresponds to the standard CodeBuild image `aws/codebuild/windows-base:1.0`.\n   *\n   * @deprecated `WindowsBuildImage.WINDOWS_BASE_2_0` should be used instead.\n   */\n  public static readonly WIN_SERVER_CORE_2016_BASE: IBuildImage = new WindowsBuildImage({\n    imageId: 'aws/codebuild/windows-base:1.0',\n    imagePullPrincipalType: ImagePullPrincipalType.CODEBUILD,\n  });\n\n  /**\n   * The standard CodeBuild image `aws/codebuild/windows-base:2.0`, which is\n   * based off Windows Server Core 2016.\n   */\n  public static readonly WINDOWS_BASE_2_0: IBuildImage = new WindowsBuildImage({\n    imageId: 'aws/codebuild/windows-base:2.0',\n    imagePullPrincipalType: ImagePullPrincipalType.CODEBUILD,\n  });\n\n  /**\n   * The standard CodeBuild image `aws/codebuild/windows-base:2019-1.0`, which is\n   * based off Windows Server Core 2019.\n   */\n  public static readonly WIN_SERVER_CORE_2019_BASE: IBuildImage = new WindowsBuildImage({\n    imageId: 'aws/codebuild/windows-base:2019-1.0',\n    imagePullPrincipalType: ImagePullPrincipalType.CODEBUILD,\n    imageType: WindowsImageType.SERVER_2019,\n  });\n\n  /**\n   * @returns a Windows build image from a Docker Hub image.\n   */\n  public static fromDockerRegistry(\n    name: string,\n    options: DockerImageOptions = {},\n    imageType: WindowsImageType = WindowsImageType.STANDARD): IBuildImage {\n\n    return new WindowsBuildImage({\n      ...options,\n      imageId: name,\n      imagePullPrincipalType: ImagePullPrincipalType.SERVICE_ROLE,\n      imageType,\n    });\n  }\n\n  /**\n   * @returns A Windows build image from an ECR repository.\n   *\n   * NOTE: if the repository is external (i.e. imported), then we won't be able to add\n   * a resource policy statement for it so CodeBuild can pull the image.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-ecr.html\n   *\n   * @param repository The ECR repository\n   * @param tag Image tag (default \"latest\")\n   */\n  public static fromEcrRepository(\n    repository: ecr.IRepository,\n    tag: string = 'latest',\n    imageType: WindowsImageType = WindowsImageType.STANDARD): IBuildImage {\n\n    return new WindowsBuildImage({\n      imageId: repository.repositoryUriForTag(tag),\n      imagePullPrincipalType: ImagePullPrincipalType.SERVICE_ROLE,\n      imageType,\n      repository,\n    });\n  }\n\n  /**\n   * Uses an Docker image asset as a Windows build image.\n   */\n  public static fromAsset(\n    scope: Construct,\n    id: string,\n    props: DockerImageAssetProps,\n    imageType: WindowsImageType = WindowsImageType.STANDARD): IBuildImage {\n\n    const asset = new DockerImageAsset(scope, id, props);\n    return new WindowsBuildImage({\n      imageId: asset.imageUri,\n      imagePullPrincipalType: ImagePullPrincipalType.SERVICE_ROLE,\n      imageType,\n      repository: asset.repository,\n    });\n  }\n\n  public readonly type: string;\n  public readonly defaultComputeType = ComputeType.MEDIUM;\n  public readonly imageId: string;\n  public readonly imagePullPrincipalType?: ImagePullPrincipalType;\n  public readonly secretsManagerCredentials?: secretsmanager.ISecret;\n  public readonly repository?: ecr.IRepository;\n\n  private constructor(props: WindowsBuildImageProps) {\n    this.type = (props.imageType ?? WindowsImageType.STANDARD).toString();\n    this.imageId = props.imageId;\n    this.imagePullPrincipalType = props.imagePullPrincipalType;\n    this.secretsManagerCredentials = props.secretsManagerCredentials;\n    this.repository = props.repository;\n  }\n\n  public validate(buildEnvironment: BuildEnvironment): string[] {\n    const ret: string[] = [];\n    if (buildEnvironment.computeType === ComputeType.SMALL) {\n      ret.push('Windows images do not support the Small ComputeType');\n    }\n    return ret;\n  }\n\n  public runScriptBuildspec(entrypoint: string): BuildSpec {\n    return BuildSpec.fromObject({\n      version: '0.2',\n      phases: {\n        pre_build: {\n          // Would love to do downloading here and executing in the next step,\n          // but I don't know how to propagate the value of $TEMPDIR.\n          //\n          // Punting for someone who knows PowerShell well enough.\n          commands: [],\n        },\n        build: {\n          commands: [\n            'Set-Variable -Name TEMPDIR -Value (New-TemporaryFile).DirectoryName',\n            `aws s3 cp s3://$env:${S3_BUCKET_ENV}/$env:${S3_KEY_ENV} $TEMPDIR\\\\scripts.zip`,\n            'New-Item -ItemType Directory -Path $TEMPDIR\\\\scriptdir',\n            'Expand-Archive -Path $TEMPDIR/scripts.zip -DestinationPath $TEMPDIR\\\\scriptdir',\n            '$env:SCRIPT_DIR = \"$TEMPDIR\\\\scriptdir\"',\n            `& $TEMPDIR\\\\scriptdir\\\\${entrypoint}`,\n          ],\n        },\n      },\n    });\n  }\n}\n\nexport interface BuildEnvironmentVariable {\n  /**\n   * The type of environment variable.\n   * @default PlainText\n   */\n  readonly type?: BuildEnvironmentVariableType;\n\n  /**\n   * The value of the environment variable.\n   * For plain-text variables (the default), this is the literal value of variable.\n   * For SSM parameter variables, pass the name of the parameter here (`parameterName` property of `IParameter`).\n   * For SecretsManager variables secrets, pass either the secret name (`secretName` property of `ISecret`)\n   * or the secret ARN (`secretArn` property of `ISecret`) here,\n   * along with optional SecretsManager qualifiers separated by ':', like the JSON key, or the version or stage\n   * (see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec.env.secrets-manager for details).\n   */\n  readonly value: any;\n}\n\nexport enum BuildEnvironmentVariableType {\n  /**\n   * An environment variable in plaintext format.\n   */\n  PLAINTEXT = 'PLAINTEXT',\n\n  /**\n   * An environment variable stored in Systems Manager Parameter Store.\n   */\n  PARAMETER_STORE = 'PARAMETER_STORE',\n\n  /**\n   * An environment variable stored in AWS Secrets Manager.\n   */\n  SECRETS_MANAGER = 'SECRETS_MANAGER'\n}\n\n/**\n * The list of event types for AWS Codebuild\n * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-buildproject\n */\nexport enum ProjectNotificationEvents {\n  /**\n   * Trigger notification when project build state failed\n   */\n  BUILD_FAILED = 'codebuild-project-build-state-failed',\n\n  /**\n   * Trigger notification when project build state succeeded\n   */\n  BUILD_SUCCEEDED = 'codebuild-project-build-state-succeeded',\n\n  /**\n   * Trigger notification when project build state in progress\n   */\n  BUILD_IN_PROGRESS = 'codebuild-project-build-state-in-progress',\n\n  /**\n   * Trigger notification when project build state stopped\n   */\n  BUILD_STOPPED = 'codebuild-project-build-state-stopped',\n\n  /**\n   * Trigger notification when project build phase failure\n   */\n  BUILD_PHASE_FAILED = 'codebuild-project-build-phase-failure',\n\n  /**\n   * Trigger notification when project build phase success\n   */\n  BUILD_PHASE_SUCCEEDED = 'codebuild-project-build-phase-success',\n}\n\nfunction isBindableBuildImage(x: unknown): x is IBindableBuildImage {\n  return typeof x === 'object' && !!x && !!(x as any).bind;\n}\n"],
  "mappings": "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",
  "names": []
}
