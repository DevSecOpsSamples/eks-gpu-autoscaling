{
  "version": 3,
  "sources": ["artifacts.ts"],
  "sourcesContent": ["import * as s3 from '../../aws-s3';\nimport { Construct } from 'constructs';\nimport { CfnProject } from './codebuild.generated';\nimport { IProject } from './project';\n\n/**\n * The type returned from {@link IArtifacts#bind}.\n */\nexport interface ArtifactsConfig {\n  /**\n   * The low-level CloudFormation artifacts property.\n   */\n  readonly artifactsProperty: CfnProject.ArtifactsProperty;\n}\n\n/**\n * The abstract interface of a CodeBuild build output.\n * Implemented by {@link Artifacts}.\n */\nexport interface IArtifacts {\n  /**\n   * The artifact identifier.\n   * This property is required on secondary artifacts.\n   */\n  readonly identifier?: string;\n\n  /**\n   * The CodeBuild type of this artifact.\n   */\n  readonly type: string;\n\n  /**\n   * Callback when an Artifacts class is used in a CodeBuild Project.\n   *\n   * @param scope a root Construct that allows creating new Constructs\n   * @param project the Project this Artifacts is used in\n   */\n  bind(scope: Construct, project: IProject): ArtifactsConfig;\n}\n\n/**\n * Properties common to all Artifacts classes.\n */\nexport interface ArtifactsProps {\n  /**\n   * The artifact identifier.\n   * This property is required on secondary artifacts.\n   */\n  readonly identifier?: string;\n}\n\n/**\n * Artifacts definition for a CodeBuild Project.\n */\nexport abstract class Artifacts implements IArtifacts {\n  public static s3(props: S3ArtifactsProps): IArtifacts {\n    return new S3Artifacts(props);\n  }\n\n  public readonly identifier?: string;\n  public abstract readonly type: string;\n\n  protected constructor(props: ArtifactsProps) {\n    this.identifier = props.identifier;\n  }\n\n  public bind(_scope: Construct, _project: IProject): ArtifactsConfig {\n    return {\n      artifactsProperty: {\n        artifactIdentifier: this.identifier,\n        type: this.type,\n      },\n    };\n  }\n}\n\n/**\n * Construction properties for {@link S3Artifacts}.\n */\nexport interface S3ArtifactsProps extends ArtifactsProps {\n  /**\n   * The name of the output bucket.\n   */\n  readonly bucket: s3.IBucket;\n\n  /**\n   * The path inside of the bucket for the build output .zip file or folder.\n   * If a value is not specified, then build output will be stored at the root of the\n   * bucket (or under the <build-id> directory if `includeBuildId` is set to true).\n   *\n   * @default the root of the bucket\n   */\n  readonly path?: string;\n\n  /**\n   * The name of the build output ZIP file or folder inside the bucket.\n   *\n   * The full S3 object key will be \"<path>/<build-id>/<name>\" or\n   * \"<path>/<name>\" depending on whether `includeBuildId` is set to true.\n   *\n   * If not set, `overrideArtifactName` will be set and the name from the\n   * buildspec will be used instead.\n   *\n   * @default undefined, and use the name from the buildspec\n   */\n  readonly name?: string;\n\n  /**\n   * Indicates if the build ID should be included in the path. If this is set to true,\n   * then the build artifact will be stored in \"<path>/<build-id>/<name>\".\n   *\n   * @default true\n   */\n  readonly includeBuildId?: boolean;\n\n  /**\n   * If this is true, all build output will be packaged into a single .zip file.\n   * Otherwise, all files will be uploaded to <path>/<name>\n   *\n   * @default true - files will be archived\n   */\n  readonly packageZip?: boolean;\n\n  /**\n   * If this is false, build output will not be encrypted.\n   * This is useful if the artifact to publish a static website or sharing content with others\n   *\n   * @default true - output will be encrypted\n   */\n  readonly encryption?: boolean;\n}\n\n/**\n * S3 Artifact definition for a CodeBuild Project.\n */\nclass S3Artifacts extends Artifacts {\n  public readonly type = 'S3';\n\n  constructor(private readonly props: S3ArtifactsProps) {\n    super(props);\n  }\n\n  public bind(_scope: Construct, project: IProject): ArtifactsConfig {\n    this.props.bucket.grantReadWrite(project);\n    const superConfig = super.bind(_scope, project);\n    return {\n      artifactsProperty: {\n        ...superConfig.artifactsProperty,\n        location: this.props.bucket.bucketName,\n        path: this.props.path,\n        namespaceType: this.props.includeBuildId === false ? 'NONE' : 'BUILD_ID',\n        name: this.props.name == null ? undefined : this.props.name,\n        packaging: this.props.packageZip === false ? 'NONE' : 'ZIP',\n        encryptionDisabled: this.props.encryption === false ? true : undefined,\n        overrideArtifactName: this.props.name == null ? true : undefined,\n      },\n    };\n  }\n}\n"],
  "mappings": "gNAsDA,MAAsB,SAAS,CAQ7B,YAAsB,MAAqB,yEACzC,KAAK,WAAa,MAAM,iBARZ,IAAG,MAAuB,kFAC/B,GAAI,aAAY,KAAK,EAUvB,KAAK,OAAmB,SAAkB,6EACxC,CACL,kBAAmB,CACjB,mBAAoB,KAAK,WACzB,KAAM,KAAK,QAhBnB,QAAA,UAAA,2GAiFA,MAAM,mBAAoB,UAAS,CAGjC,YAA6B,MAAuB,CAClD,MAAM,KAAK,EADgB,KAAA,MAAA,MAFb,KAAA,KAAO,KAMhB,KAAK,OAAmB,QAAiB,CAC9C,YAAK,MAAM,OAAO,eAAe,OAAO,EAEjC,CACL,kBAAmB,IACd,AAHa,MAAM,KAAK,OAAQ,OAAO,EAG3B,kBACf,SAAU,KAAK,MAAM,OAAO,WAC5B,KAAM,KAAK,MAAM,KACjB,cAAe,KAAK,MAAM,iBAAmB,GAAQ,OAAS,WAC9D,KAAM,KAAK,MAAM,MAAQ,KAAO,OAAY,KAAK,MAAM,KACvD,UAAW,KAAK,MAAM,aAAe,GAAQ,OAAS,MACtD,mBAAoB,KAAK,MAAM,aAAe,GAAQ,GAAO,OAC7D,qBAAsB,KAAK,MAAM,MAAQ,KAAO,GAAO",
  "names": []
}
