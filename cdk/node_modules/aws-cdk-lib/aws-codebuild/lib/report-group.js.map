{
  "version": 3,
  "sources": ["report-group.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnReportGroup } from './codebuild.generated';\nimport { renderReportGroupArn, reportGroupArnComponents } from './report-group-utils';\n\n/**\n * The interface representing the ReportGroup resource -\n * either an existing one, imported using the\n * {@link ReportGroup.fromReportGroupName} method,\n * or a new one, created with the {@link ReportGroup} class.\n */\nexport interface IReportGroup extends cdk.IResource {\n  /**\n   * The ARN of the ReportGroup.\n   *\n   * @attribute\n   */\n  readonly reportGroupArn: string;\n\n  /**\n   * The name of the ReportGroup.\n   *\n   * @attribute\n   */\n  readonly reportGroupName: string;\n\n  /**\n   * Grants the given entity permissions to write\n   * (that is, upload reports to)\n   * this report group.\n   */\n  grantWrite(identity: iam.IGrantable): iam.Grant;\n}\n\nabstract class ReportGroupBase extends cdk.Resource implements IReportGroup {\n  public abstract readonly reportGroupArn: string;\n  public abstract readonly reportGroupName: string;\n  protected abstract readonly exportBucket?: s3.IBucket;\n\n  public grantWrite(identity: iam.IGrantable): iam.Grant {\n    const ret = iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions: [\n        'codebuild:CreateReport',\n        'codebuild:UpdateReport',\n        'codebuild:BatchPutTestCases',\n      ],\n      resourceArns: [this.reportGroupArn],\n    });\n\n    if (this.exportBucket) {\n      this.exportBucket.grantWrite(identity);\n    }\n\n    return ret;\n  }\n}\n\n/**\n * Construction properties for {@link ReportGroup}.\n */\nexport interface ReportGroupProps {\n  /**\n   * The physical name of the report group.\n   *\n   * @default - CloudFormation-generated name\n   */\n  readonly reportGroupName?: string;\n\n  /**\n   * An optional S3 bucket to export the reports to.\n   *\n   * @default - the reports will not be exported\n   */\n  readonly exportBucket?: s3.IBucket;\n\n  /**\n   * Whether to output the report files into the export bucket as-is,\n   * or create a ZIP from them before doing the export.\n   * Ignored if {@link exportBucket} has not been provided.\n   *\n   * @default - false (the files will not be ZIPped)\n   */\n  readonly zipExport?: boolean;\n\n  /**\n   * What to do when this resource is deleted from a stack.\n   * As CodeBuild does not allow deleting a ResourceGroup that has reports inside of it,\n   * this is set to retain the resource by default.\n   *\n   * @default RemovalPolicy.RETAIN\n   */\n  readonly removalPolicy?: cdk.RemovalPolicy;\n}\n\n/**\n * The ReportGroup resource class.\n */\nexport class ReportGroup extends ReportGroupBase {\n\n  /**\n   * Reference an existing ReportGroup,\n   * defined outside of the CDK code,\n   * by name.\n   */\n  public static fromReportGroupName(scope: Construct, id: string, reportGroupName: string): IReportGroup {\n    class Import extends ReportGroupBase {\n      public readonly reportGroupName = reportGroupName;\n      public readonly reportGroupArn = renderReportGroupArn(scope, reportGroupName);\n      protected readonly exportBucket = undefined;\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly reportGroupArn: string;\n  public readonly reportGroupName: string;\n  protected readonly exportBucket?: s3.IBucket;\n\n  constructor(scope: Construct, id: string, props: ReportGroupProps = {}) {\n    super(scope, id, {\n      physicalName: props.reportGroupName,\n    });\n\n    const resource = new CfnReportGroup(this, 'Resource', {\n      type: 'TEST',\n      exportConfig: {\n        exportConfigType: props.exportBucket ? 'S3' : 'NO_EXPORT',\n        s3Destination: props.exportBucket\n          ? {\n            bucket: props.exportBucket.bucketName,\n            encryptionDisabled: props.exportBucket.encryptionKey ? false : undefined,\n            encryptionKey: props.exportBucket.encryptionKey?.keyArn,\n            packaging: props.zipExport ? 'ZIP' : undefined,\n          }\n          : undefined,\n      },\n      name: props.reportGroupName,\n    });\n    resource.applyRemovalPolicy(props.removalPolicy, {\n      default: cdk.RemovalPolicy.RETAIN,\n    });\n    this.reportGroupArn = this.getResourceArnAttribute(resource.attrArn,\n      reportGroupArnComponents(this.physicalName));\n    this.reportGroupName = this.getResourceNameAttribute(\n      // there is no separate name attribute,\n      // so use Fn::Select + Fn::Split to make one\n      cdk.Fn.select(1, cdk.Fn.split('/', resource.ref)),\n    );\n    this.exportBucket = props.exportBucket;\n  }\n}\n"],
  "mappings": "kNAAA,IAAA,QAAA,eAAA,EAEA,IAAA,QAAA,YAAA,EAEA,sBAAA,QAAA,uBAAA,EACA,qBAAA,QAAA,sBAAA,EA+BA,MAAe,uBAAwB,KAAI,QAAQ,CAK1C,WAAW,SAAwB,CACxC,KAAM,KAAM,IAAI,MAAM,eAAe,CACnC,QAAS,SACT,QAAS,CACP,yBACA,yBACA,+BAEF,aAAc,CAAC,KAAK,cAAc,EACnC,EAED,MAAI,MAAK,cACP,KAAK,aAAa,WAAW,QAAQ,EAGhC,KA4CX,MAAa,mBAAoB,gBAAe,CAqB9C,YAAY,MAAkB,GAAY,MAA0B,CAAA,EAAE,QACpE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,gBACrB,4EAED,KAAM,UAAW,GAAI,uBAAA,eAAe,KAAM,WAAY,CACpD,KAAM,OACN,aAAc,CACZ,iBAAkB,MAAM,aAAe,KAAO,YAC9C,cAAe,MAAM,aACjB,CACA,OAAQ,MAAM,aAAa,WAC3B,mBAAoB,MAAM,aAAa,cAAgB,GAAQ,OAC/D,cAAa,IAAE,MAAM,aAAa,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,OACjD,UAAW,MAAM,UAAY,MAAQ,QAErC,QAEN,KAAM,MAAM,gBACb,EACD,SAAS,mBAAmB,MAAM,cAAe,CAC/C,QAAS,IAAI,cAAc,OAC5B,EACD,KAAK,eAAiB,KAAK,wBAAwB,SAAS,QAC1D,qBAAA,yBAAyB,KAAK,YAAY,CAAC,EAC7C,KAAK,gBAAkB,KAAK,yBAG1B,IAAI,GAAG,OAAO,EAAG,IAAI,GAAG,MAAM,IAAK,SAAS,GAAG,CAAC,CAAC,EAEnD,KAAK,aAAe,MAAM,mBA5Cd,qBAAoB,MAAkB,GAAY,gBAAuB,CACrF,MAAM,cAAe,gBAAe,CAApC,aAAA,qBACkB,KAAA,gBAAkB,gBAClB,KAAA,eAAiB,qBAAA,qBAAqB,MAAO,eAAe,EACzD,KAAA,aAAe,MACpC,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,GAd/B,QAAA,YAAA",
  "names": []
}
