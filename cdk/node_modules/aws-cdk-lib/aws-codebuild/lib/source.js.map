{
  "version": 3,
  "sources": ["source.ts"],
  "sourcesContent": ["import * as codecommit from '../../aws-codecommit';\nimport * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport { Construct } from 'constructs';\nimport { CfnProject } from './codebuild.generated';\nimport { IProject } from './project';\nimport {\n  BITBUCKET_SOURCE_TYPE,\n  CODECOMMIT_SOURCE_TYPE,\n  GITHUB_ENTERPRISE_SOURCE_TYPE,\n  GITHUB_SOURCE_TYPE,\n  S3_SOURCE_TYPE,\n} from './source-types';\n\n/**\n * The type returned from {@link ISource#bind}.\n */\nexport interface SourceConfig {\n  readonly sourceProperty: CfnProject.SourceProperty;\n\n  readonly buildTriggers?: CfnProject.ProjectTriggersProperty;\n\n  /**\n   * `AWS::CodeBuild::Project.SourceVersion`\n   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html#cfn-codebuild-project-sourceversion\n   * @default the latest version\n   */\n  readonly sourceVersion?: string;\n}\n\n/**\n * The abstract interface of a CodeBuild source.\n * Implemented by {@link Source}.\n */\nexport interface ISource {\n  readonly identifier?: string;\n\n  readonly type: string;\n\n  readonly badgeSupported: boolean;\n\n  bind(scope: Construct, project: IProject): SourceConfig;\n}\n\n/**\n * Properties common to all Source classes.\n */\nexport interface SourceProps {\n  /**\n   * The source identifier.\n   * This property is required on secondary sources.\n   */\n  readonly identifier?: string;\n}\n\n/**\n * Source provider definition for a CodeBuild Project.\n */\nexport abstract class Source implements ISource {\n  public static s3(props: S3SourceProps): ISource {\n    return new S3Source(props);\n  }\n\n  public static codeCommit(props: CodeCommitSourceProps): ISource {\n    return new CodeCommitSource(props);\n  }\n\n  public static gitHub(props: GitHubSourceProps): ISource {\n    return new GitHubSource(props);\n  }\n\n  public static gitHubEnterprise(props: GitHubEnterpriseSourceProps): ISource {\n    return new GitHubEnterpriseSource(props);\n  }\n\n  public static bitBucket(props: BitBucketSourceProps): ISource {\n    return new BitBucketSource(props);\n  }\n\n  public readonly identifier?: string;\n  public abstract readonly type: string;\n  public readonly badgeSupported: boolean = false;\n\n  protected constructor(props: SourceProps) {\n    this.identifier = props.identifier;\n  }\n\n  /**\n   * Called by the project when the source is added so that the source can perform\n   * binding operations on the source. For example, it can grant permissions to the\n   * code build project to read from the S3 bucket.\n   */\n  public bind(_scope: Construct, _project: IProject): SourceConfig {\n    return {\n      sourceProperty: {\n        sourceIdentifier: this.identifier,\n        type: this.type,\n      },\n    };\n  }\n}\n\n/**\n * The construction properties common to all build sources that are backed by Git.\n */\ninterface GitSourceProps extends SourceProps {\n  /**\n   * The depth of history to download. Minimum value is 0.\n   * If this value is 0, greater than 25, or not provided,\n   * then the full history is downloaded with each build of the project.\n   */\n  readonly cloneDepth?: number;\n\n  /**\n   * The commit ID, pull request ID, branch name, or tag name that corresponds to\n   * the version of the source code you want to build\n   *\n   * @example 'mybranch'\n   * @default the default branch's HEAD commit ID is used\n   */\n  readonly branchOrRef?: string;\n\n  /**\n   * Whether to fetch submodules while cloning git repo.\n   *\n   * @default false\n   */\n  readonly fetchSubmodules?: boolean;\n}\n\n/**\n * A common superclass of all build sources that are backed by Git.\n */\nabstract class GitSource extends Source {\n  private readonly cloneDepth?: number;\n  private readonly branchOrRef?: string;\n  private readonly fetchSubmodules?: boolean;\n\n  protected constructor(props: GitSourceProps) {\n    super(props);\n\n    this.cloneDepth = props.cloneDepth;\n    this.branchOrRef = props.branchOrRef;\n    this.fetchSubmodules = props.fetchSubmodules;\n  }\n\n  public bind(_scope: Construct, _project: IProject): SourceConfig {\n    const superConfig = super.bind(_scope, _project);\n    return {\n      sourceVersion: this.branchOrRef,\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        gitCloneDepth: this.cloneDepth,\n        gitSubmodulesConfig: this.fetchSubmodules ? {\n          fetchSubmodules: this.fetchSubmodules,\n        } : undefined,\n      },\n    };\n  }\n}\n\n/**\n * The types of webhook event actions.\n */\nexport enum EventAction {\n  /**\n   * A push (of a branch, or a tag) to the repository.\n   */\n  PUSH = 'PUSH',\n\n  /**\n   * Creating a Pull Request.\n   */\n  PULL_REQUEST_CREATED = 'PULL_REQUEST_CREATED',\n\n  /**\n   * Updating a Pull Request.\n   */\n  PULL_REQUEST_UPDATED = 'PULL_REQUEST_UPDATED',\n\n  /**\n   * Merging a Pull Request.\n   */\n  PULL_REQUEST_MERGED = 'PULL_REQUEST_MERGED',\n\n  /**\n   * Re-opening a previously closed Pull Request.\n   * Note that this event is only supported for GitHub and GitHubEnterprise sources.\n   */\n  PULL_REQUEST_REOPENED = 'PULL_REQUEST_REOPENED',\n}\n\nenum WebhookFilterTypes {\n  FILE_PATH = 'FILE_PATH',\n  COMMIT_MESSAGE = 'COMMIT_MESSAGE',\n  HEAD_REF = 'HEAD_REF',\n  ACTOR_ACCOUNT_ID = 'ACTOR_ACCOUNT_ID',\n  BASE_REF = 'BASE_REF',\n}\n\n/**\n * An object that represents a group of filter conditions for a webhook.\n * Every condition in a given FilterGroup must be true in order for the whole group to be true.\n * You construct instances of it by calling the {@link #inEventOf} static factory method,\n * and then calling various `andXyz` instance methods to create modified instances of it\n * (this class is immutable).\n *\n * You pass instances of this class to the `webhookFilters` property when constructing a source.\n */\nexport class FilterGroup {\n  /**\n   * Creates a new event FilterGroup that triggers on any of the provided actions.\n   *\n   * @param actions the actions to trigger the webhook on\n   */\n  public static inEventOf(...actions: EventAction[]): FilterGroup {\n    return new FilterGroup(new Set(actions), []);\n  }\n\n  private readonly actions: Set<EventAction>;\n  private readonly filters: CfnProject.WebhookFilterProperty[];\n\n  private constructor(actions: Set<EventAction>, filters: CfnProject.WebhookFilterProperty[]) {\n    if (actions.size === 0) {\n      throw new Error('A filter group must contain at least one event action');\n    }\n    this.actions = actions;\n    this.filters = filters;\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the event must affect the given branch.\n   *\n   * @param branchName the name of the branch (can be a regular expression)\n   */\n  public andBranchIs(branchName: string): FilterGroup {\n    return this.addHeadBranchFilter(branchName, true);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the event must not affect the given branch.\n   *\n   * @param branchName the name of the branch (can be a regular expression)\n   */\n  public andBranchIsNot(branchName: string): FilterGroup {\n    return this.addHeadBranchFilter(branchName, false);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the event must affect a head commit with the given message.\n   *\n   * @param commitMessage the commit message (can be a regular expression)\n   */\n  public andCommitMessageIs(commitMessage: string): FilterGroup {\n    return this.addCommitMessageFilter(commitMessage, true);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the event must not affect a head commit with the given message.\n   *\n   * @param commitMessage the commit message (can be a regular expression)\n   */\n  public andCommitMessageIsNot(commitMessage: string): FilterGroup {\n    return this.addCommitMessageFilter(commitMessage, false);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the event must affect the given tag.\n   *\n   * @param tagName the name of the tag (can be a regular expression)\n   */\n  public andTagIs(tagName: string): FilterGroup {\n    return this.addHeadTagFilter(tagName, true);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the event must not affect the given tag.\n   *\n   * @param tagName the name of the tag (can be a regular expression)\n   */\n  public andTagIsNot(tagName: string): FilterGroup {\n    return this.addHeadTagFilter(tagName, false);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the event must affect a Git reference (ie., a branch or a tag)\n   * that matches the given pattern.\n   *\n   * @param pattern a regular expression\n   */\n  public andHeadRefIs(pattern: string) {\n    return this.addHeadRefFilter(pattern, true);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the event must not affect a Git reference (ie., a branch or a tag)\n   * that matches the given pattern.\n   *\n   * @param pattern a regular expression\n   */\n  public andHeadRefIsNot(pattern: string) {\n    return this.addHeadRefFilter(pattern, false);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the account ID of the actor initiating the event must match the given pattern.\n   *\n   * @param pattern a regular expression\n   */\n  public andActorAccountIs(pattern: string): FilterGroup {\n    return this.addActorAccountId(pattern, true);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the account ID of the actor initiating the event must not match the given pattern.\n   *\n   * @param pattern a regular expression\n   */\n  public andActorAccountIsNot(pattern: string): FilterGroup {\n    return this.addActorAccountId(pattern, false);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the Pull Request that is the source of the event must target the given base branch.\n   * Note that you cannot use this method if this Group contains the `PUSH` event action.\n   *\n   * @param branchName the name of the branch (can be a regular expression)\n   */\n  public andBaseBranchIs(branchName: string): FilterGroup {\n    return this.addBaseBranchFilter(branchName, true);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the Pull Request that is the source of the event must not target the given base branch.\n   * Note that you cannot use this method if this Group contains the `PUSH` event action.\n   *\n   * @param branchName the name of the branch (can be a regular expression)\n   */\n  public andBaseBranchIsNot(branchName: string): FilterGroup {\n    return this.addBaseBranchFilter(branchName, false);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the Pull Request that is the source of the event must target the given Git reference.\n   * Note that you cannot use this method if this Group contains the `PUSH` event action.\n   *\n   * @param pattern a regular expression\n   */\n  public andBaseRefIs(pattern: string): FilterGroup {\n    return this.addBaseRefFilter(pattern, true);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the Pull Request that is the source of the event must not target the given Git reference.\n   * Note that you cannot use this method if this Group contains the `PUSH` event action.\n   *\n   * @param pattern a regular expression\n   */\n  public andBaseRefIsNot(pattern: string): FilterGroup {\n    return this.addBaseRefFilter(pattern, false);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the push that is the source of the event must affect a file that matches the given pattern.\n   * Note that you can only use this method if this Group contains only the `PUSH` event action,\n   * and only for GitHub, Bitbucket and GitHubEnterprise sources.\n   *\n   * @param pattern a regular expression\n   */\n  public andFilePathIs(pattern: string): FilterGroup {\n    return this.addFilePathFilter(pattern, true);\n  }\n\n  /**\n   * Create a new FilterGroup with an added condition:\n   * the push that is the source of the event must not affect a file that matches the given pattern.\n   * Note that you can only use this method if this Group contains only the `PUSH` event action,\n   * and only for GitHub, Bitbucket and GitHubEnterprise sources.\n   *\n   * @param pattern a regular expression\n   */\n  public andFilePathIsNot(pattern: string): FilterGroup {\n    return this.addFilePathFilter(pattern, false);\n  }\n\n  /** @internal */\n  public get _actions(): EventAction[] {\n    return set2Array(this.actions);\n  }\n\n  /** @internal */\n  public get _filters(): CfnProject.WebhookFilterProperty[] {\n    return this.filters.slice();\n  }\n\n  /** @internal */\n  public _toJson(): CfnProject.WebhookFilterProperty[] {\n    const eventFilter: CfnProject.WebhookFilterProperty = {\n      type: 'EVENT',\n      pattern: set2Array(this.actions).join(', '),\n    };\n    return [eventFilter].concat(this.filters);\n  }\n\n  private addCommitMessageFilter(commitMessage: string, include: boolean): FilterGroup {\n    return this.addFilter(WebhookFilterTypes.COMMIT_MESSAGE, commitMessage, include);\n  }\n\n  private addHeadBranchFilter(branchName: string, include: boolean): FilterGroup {\n    return this.addHeadRefFilter(`refs/heads/${branchName}`, include);\n  }\n\n  private addHeadTagFilter(tagName: string, include: boolean): FilterGroup {\n    return this.addHeadRefFilter(`refs/tags/${tagName}`, include);\n  }\n\n  private addHeadRefFilter(refName: string, include: boolean) {\n    return this.addFilter(WebhookFilterTypes.HEAD_REF, refName, include);\n  }\n\n  private addActorAccountId(accountId: string, include: boolean) {\n    return this.addFilter(WebhookFilterTypes.ACTOR_ACCOUNT_ID, accountId, include);\n  }\n\n  private addBaseBranchFilter(branchName: string, include: boolean): FilterGroup {\n    return this.addBaseRefFilter(`refs/heads/${branchName}`, include);\n  }\n\n  private addBaseRefFilter(refName: string, include: boolean) {\n    if (this.actions.has(EventAction.PUSH)) {\n      throw new Error('A base reference condition cannot be added if a Group contains a PUSH event action');\n    }\n    return this.addFilter(WebhookFilterTypes.BASE_REF, refName, include);\n  }\n\n  private addFilePathFilter(pattern: string, include: boolean): FilterGroup {\n    return this.addFilter(WebhookFilterTypes.FILE_PATH, pattern, include);\n  }\n\n  private addFilter(type: WebhookFilterTypes, pattern: string, include: boolean) {\n    return new FilterGroup(this.actions, this.filters.concat([{\n      type,\n      pattern,\n      excludeMatchedPattern: include ? undefined : true,\n    }]));\n  }\n}\n\n/**\n * The construction properties common to all third-party build sources that are backed by Git.\n */\ninterface ThirdPartyGitSourceProps extends GitSourceProps {\n  /**\n   * Whether to send notifications on your build's start and end.\n   *\n   * @default true\n   */\n  readonly reportBuildStatus?: boolean;\n\n  /**\n   * Whether to create a webhook that will trigger a build every time an event happens in the repository.\n   *\n   * @default true if any `webhookFilters` were provided, false otherwise\n   */\n  readonly webhook?: boolean;\n\n  /**\n   * Trigger a batch build from a webhook instead of a standard one.\n   *\n   * Enabling this will enable batch builds on the CodeBuild project.\n   *\n   * @default false\n   */\n  readonly webhookTriggersBatchBuild?: boolean;\n\n  /**\n   * A list of webhook filters that can constraint what events in the repository will trigger a build.\n   * A build is triggered if any of the provided filter groups match.\n   * Only valid if `webhook` was not provided as false.\n   *\n   * @default every push and every Pull Request (create or update) triggers a build\n   */\n  readonly webhookFilters?: FilterGroup[];\n}\n\n/**\n * A common superclass of all third-party build sources that are backed by Git.\n */\nabstract class ThirdPartyGitSource extends GitSource {\n  public readonly badgeSupported: boolean = true;\n  protected readonly webhookFilters: FilterGroup[];\n  private readonly reportBuildStatus: boolean;\n  private readonly webhook?: boolean;\n  private readonly webhookTriggersBatchBuild?: boolean;\n\n  protected constructor(props: ThirdPartyGitSourceProps) {\n    super(props);\n\n    this.webhook = props.webhook;\n    this.reportBuildStatus = props.reportBuildStatus ?? true;\n    this.webhookFilters = props.webhookFilters || [];\n    this.webhookTriggersBatchBuild = props.webhookTriggersBatchBuild;\n  }\n\n  public bind(_scope: Construct, project: IProject): SourceConfig {\n    const anyFilterGroupsProvided = this.webhookFilters.length > 0;\n    const webhook = this.webhook ?? (anyFilterGroupsProvided ? true : undefined);\n\n    if (!webhook && anyFilterGroupsProvided) {\n      throw new Error('`webhookFilters` cannot be used when `webhook` is `false`');\n    }\n\n    if (!webhook && this.webhookTriggersBatchBuild) {\n      throw new Error('`webhookTriggersBatchBuild` cannot be used when `webhook` is `false`');\n    }\n\n    const superConfig = super.bind(_scope, project);\n\n    if (this.webhookTriggersBatchBuild) {\n      project.enableBatchBuilds();\n    }\n\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        reportBuildStatus: this.reportBuildStatus,\n      },\n      sourceVersion: superConfig.sourceVersion,\n      buildTriggers: webhook === undefined ? undefined : {\n        webhook,\n        buildType: this.webhookTriggersBatchBuild ? 'BUILD_BATCH' : undefined,\n        filterGroups: anyFilterGroupsProvided ? this.webhookFilters.map(fg => fg._toJson()) : undefined,\n      },\n    };\n  }\n}\n\n/**\n * Construction properties for {@link CodeCommitSource}.\n */\nexport interface CodeCommitSourceProps extends GitSourceProps {\n  readonly repository: codecommit.IRepository;\n}\n\n/**\n * CodeCommit Source definition for a CodeBuild project.\n */\nclass CodeCommitSource extends GitSource {\n  public readonly badgeSupported = true;\n  public readonly type = CODECOMMIT_SOURCE_TYPE;\n  private readonly repo: codecommit.IRepository;\n\n  constructor(props: CodeCommitSourceProps) {\n    super(props);\n    this.repo = props.repository;\n  }\n\n  public bind(_scope: Construct, project: IProject): SourceConfig {\n    // https://docs.aws.amazon.com/codebuild/latest/userguide/setting-up.html\n    project.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['codecommit:GitPull'],\n      resources: [this.repo.repositoryArn],\n    }));\n\n    const superConfig = super.bind(_scope, project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: this.repo.repositoryCloneUrlHttp,\n      },\n      sourceVersion: superConfig.sourceVersion,\n    };\n  }\n}\n\n/**\n * Construction properties for {@link S3Source}.\n */\nexport interface S3SourceProps extends SourceProps {\n  readonly bucket: s3.IBucket;\n  readonly path: string;\n\n  /**\n   *  The version ID of the object that represents the build input ZIP file to use.\n   *\n   * @default latest\n   */\n  readonly version?: string;\n}\n\n/**\n * S3 bucket definition for a CodeBuild project.\n */\nclass S3Source extends Source {\n  public readonly type = S3_SOURCE_TYPE;\n  private readonly bucket: s3.IBucket;\n  private readonly path: string;\n  private readonly version?: string;\n\n  constructor(props: S3SourceProps) {\n    super(props);\n    this.bucket = props.bucket;\n    this.path = props.path;\n    this.version = props.version;\n  }\n\n  public bind(_scope: Construct, project: IProject): SourceConfig {\n    this.bucket.grantRead(project, this.path);\n\n    const superConfig = super.bind(_scope, project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: `${this.bucket.bucketName}/${this.path}`,\n      },\n      sourceVersion: this.version,\n    };\n  }\n}\n\n/**\n * Construction properties for {@link GitHubSource} and {@link GitHubEnterpriseSource}.\n */\nexport interface GitHubSourceProps extends ThirdPartyGitSourceProps {\n  /**\n   * The GitHub account/user that owns the repo.\n   *\n   * @example 'awslabs'\n   */\n  readonly owner: string;\n\n  /**\n   * The name of the repo (without the username).\n   *\n   * @example 'aws-cdk'\n   */\n  readonly repo: string;\n}\n\n/**\n * GitHub Source definition for a CodeBuild project.\n */\nclass GitHubSource extends ThirdPartyGitSource {\n  public readonly type = GITHUB_SOURCE_TYPE;\n  private readonly httpsCloneUrl: string;\n\n  constructor(props: GitHubSourceProps) {\n    super(props);\n    this.httpsCloneUrl = `https://github.com/${props.owner}/${props.repo}.git`;\n  }\n\n  public bind(_scope: Construct, project: IProject): SourceConfig {\n    const superConfig = super.bind(_scope, project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: this.httpsCloneUrl,\n      },\n      sourceVersion: superConfig.sourceVersion,\n      buildTriggers: superConfig.buildTriggers,\n    };\n  }\n}\n\n/**\n * Construction properties for {@link GitHubEnterpriseSource}.\n */\nexport interface GitHubEnterpriseSourceProps extends ThirdPartyGitSourceProps {\n  /**\n   * The HTTPS URL of the repository in your GitHub Enterprise installation.\n   */\n  readonly httpsCloneUrl: string;\n\n  /**\n   * Whether to ignore SSL errors when connecting to the repository.\n   *\n   * @default false\n   */\n  readonly ignoreSslErrors?: boolean;\n}\n\n/**\n * GitHub Enterprise Source definition for a CodeBuild project.\n */\nclass GitHubEnterpriseSource extends ThirdPartyGitSource {\n  public readonly type = GITHUB_ENTERPRISE_SOURCE_TYPE;\n  private readonly httpsCloneUrl: string;\n  private readonly ignoreSslErrors?: boolean;\n\n  constructor(props: GitHubEnterpriseSourceProps) {\n    super(props);\n    this.httpsCloneUrl = props.httpsCloneUrl;\n    this.ignoreSslErrors = props.ignoreSslErrors;\n  }\n\n  public bind(_scope: Construct, _project: IProject): SourceConfig {\n    if (this.hasCommitMessageFilterAndPrEvent()) {\n      throw new Error('COMMIT_MESSAGE filters cannot be used with GitHub Enterprise Server pull request events');\n    }\n\n    if (this.hasFilePathFilterAndPrEvent()) {\n      throw new Error('FILE_PATH filters cannot be used with GitHub Enterprise Server pull request events');\n    }\n\n    const superConfig = super.bind(_scope, _project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: this.httpsCloneUrl,\n        insecureSsl: this.ignoreSslErrors,\n      },\n      sourceVersion: superConfig.sourceVersion,\n      buildTriggers: superConfig.buildTriggers,\n    };\n  }\n\n  private hasCommitMessageFilterAndPrEvent() {\n    return this.webhookFilters.some(fg => (\n      fg._filters.some(fp => fp.type === WebhookFilterTypes.COMMIT_MESSAGE) &&\n      this.hasPrEvent(fg._actions)));\n  }\n  private hasFilePathFilterAndPrEvent() {\n    return this.webhookFilters.some(fg => (\n      fg._filters.some(fp => fp.type === WebhookFilterTypes.FILE_PATH) &&\n      this.hasPrEvent(fg._actions)));\n  }\n  private hasPrEvent(actions: EventAction[]) {\n    return actions.includes(\n      EventAction.PULL_REQUEST_CREATED ||\n      EventAction.PULL_REQUEST_MERGED ||\n      EventAction.PULL_REQUEST_REOPENED ||\n      EventAction.PULL_REQUEST_UPDATED);\n  }\n}\n\n/**\n * Construction properties for {@link BitBucketSource}.\n */\nexport interface BitBucketSourceProps extends ThirdPartyGitSourceProps {\n  /**\n   * The BitBucket account/user that owns the repo.\n   *\n   * @example 'awslabs'\n   */\n  readonly owner: string;\n\n  /**\n   * The name of the repo (without the username).\n   *\n   * @example 'aws-cdk'\n   */\n  readonly repo: string;\n}\n\n/**\n * BitBucket Source definition for a CodeBuild project.\n */\nclass BitBucketSource extends ThirdPartyGitSource {\n  public readonly type = BITBUCKET_SOURCE_TYPE;\n  private readonly httpsCloneUrl: any;\n\n  constructor(props: BitBucketSourceProps) {\n    super(props);\n    this.httpsCloneUrl = `https://bitbucket.org/${props.owner}/${props.repo}.git`;\n  }\n\n  public bind(_scope: Construct, _project: IProject): SourceConfig {\n    // BitBucket sources don't support the PULL_REQUEST_REOPENED event action\n    if (this.anyWebhookFilterContainsPrReopenedEventAction()) {\n      throw new Error('BitBucket sources do not support the PULL_REQUEST_REOPENED webhook event action');\n    }\n\n    const superConfig = super.bind(_scope, _project);\n    return {\n      sourceProperty: {\n        ...superConfig.sourceProperty,\n        location: this.httpsCloneUrl,\n      },\n      sourceVersion: superConfig.sourceVersion,\n      buildTriggers: superConfig.buildTriggers,\n    };\n  }\n\n  private anyWebhookFilterContainsPrReopenedEventAction() {\n    return this.webhookFilters.findIndex(fg => {\n      return fg._actions.findIndex(a => a === EventAction.PULL_REQUEST_REOPENED) !== -1;\n    }) !== -1;\n  }\n}\n\nfunction set2Array<T>(set: Set<T>): T[] {\n  const ret: T[] = [];\n  set.forEach(el => ret.push(el));\n  return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
