{
  "version": 3,
  "sources": ["cache.ts"],
  "sourcesContent": ["import { IBucket } from '../../aws-s3';\nimport { Aws, Fn } from '../../core';\nimport { CfnProject } from './codebuild.generated';\nimport { IProject } from './project';\n\nexport interface BucketCacheOptions {\n  /**\n   * The prefix to use to store the cache in the bucket\n   */\n  readonly prefix?: string;\n}\n\n/**\n * Local cache modes to enable for the CodeBuild Project\n */\nexport enum LocalCacheMode {\n  /**\n   * Caches Git metadata for primary and secondary sources\n   */\n  SOURCE = 'LOCAL_SOURCE_CACHE',\n\n  /**\n   * Caches existing Docker layers\n   */\n  DOCKER_LAYER = 'LOCAL_DOCKER_LAYER_CACHE',\n\n  /**\n   * Caches directories you specify in the buildspec file\n   */\n  CUSTOM = 'LOCAL_CUSTOM_CACHE',\n}\n\n/**\n * Cache options for CodeBuild Project.\n * A cache can store reusable pieces of your build environment and use them across multiple builds.\n * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-caching.html\n */\nexport abstract class Cache {\n  public static none(): Cache {\n    return {\n      _toCloudFormation(): CfnProject.ProjectCacheProperty | undefined {\n        return { type: 'NO_CACHE' };\n      },\n      _bind(): void {\n      },\n    };\n  }\n\n  /**\n   * Create a local caching strategy.\n   * @param modes the mode(s) to enable for local caching\n   */\n  public static local(...modes: LocalCacheMode[]): Cache {\n    return {\n      _toCloudFormation: () => ({\n        type: 'LOCAL',\n        modes,\n      }),\n      _bind: () => { return; },\n    };\n  }\n\n  /**\n   * Create an S3 caching strategy.\n   * @param bucket the S3 bucket to use for caching\n   * @param options additional options to pass to the S3 caching\n   */\n  public static bucket(bucket: IBucket, options?: BucketCacheOptions): Cache {\n    return {\n      _toCloudFormation: () => ({\n        type: 'S3',\n        location: Fn.join('/', [bucket.bucketName, options && options.prefix || Aws.NO_VALUE]),\n      }),\n      _bind: (project) => {\n        bucket.grantReadWrite(project);\n      },\n    };\n  }\n\n  /**\n   * @internal\n   */\n  public abstract _toCloudFormation(): CfnProject.ProjectCacheProperty | undefined;\n\n  /**\n   * @internal\n   */\n  public abstract _bind(project: IProject): void;\n}\n"],
  "mappings": "mOACA,OAAA,QAAA,YAAA,EAcA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAIxB,gBAAA,OAAA,qBAKA,gBAAA,aAAA,2BAKA,gBAAA,OAAA,oBACF,GAfY,eAAA,QAAA,gBAAA,SAAA,eAAc,CAAA,EAAA,EAsB1B,MAAsB,KAAK,OACX,OAAI,CAChB,MAAO,CACL,mBAAiB,CACf,MAAO,CAAE,KAAM,UAAU,CAC3B,EACA,OAAK,CACL,SAQU,UAAS,MAAuB,gFACrC,CACL,kBAAmB,IAAO,EACxB,KAAM,QACN,QAEF,MAAO,IAAK,CAAW,SASb,QAAO,OAAiB,QAA4B,iJACzD,CACL,kBAAmB,IAAO,EACxB,KAAM,KACN,SAAU,OAAA,GAAG,KAAK,IAAK,CAAC,OAAO,WAAY,SAAW,QAAQ,QAAU,OAAA,IAAI,QAAQ,CAAC,IAEvF,MAAO,AAAC,SAAW,CACjB,OAAO,eAAe,OAAO,CAC/B,IAtCN,QAAA,MAAA",
  "names": []
}
