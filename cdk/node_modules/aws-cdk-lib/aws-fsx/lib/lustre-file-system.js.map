{
  "version": 3,
  "sources": ["lustre-file-system.ts"],
  "sourcesContent": ["import { Connections, ISecurityGroup, ISubnet, Port, SecurityGroup } from '../../aws-ec2';\nimport { Aws, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { FileSystemAttributes, FileSystemBase, FileSystemProps, IFileSystem } from './file-system';\nimport { CfnFileSystem } from './fsx.generated';\nimport { LustreMaintenanceTime } from './maintenance-time';\n\n/**\n * The different kinds of file system deployments used by Lustre.\n */\nexport enum LustreDeploymentType {\n  /**\n   * Original type for shorter term data processing. Data is not replicated and does not persist on server fail.\n   */\n  SCRATCH_1 = 'SCRATCH_1',\n  /**\n   * Newer type for shorter term data processing. Data is not replicated and does not persist on server fail.\n   * Provides better support for spiky workloads.\n   */\n  SCRATCH_2 = 'SCRATCH_2',\n  /**\n   * Long term storage. Data is replicated and file servers are replaced if they fail.\n   */\n  PERSISTENT_1 = 'PERSISTENT_1',\n  /**\n   * Newer type of long term storage with higher throughput tiers.\n   * Data is replicated and file servers are replaced if they fail.\n   */\n  PERSISTENT_2 = 'PERSISTENT_2',\n}\n\n/**\n * The configuration for the Amazon FSx for Lustre file system.\n *\n * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-fsx-filesystem-lustreconfiguration.html\n */\nexport interface LustreConfiguration {\n  /**\n   * The type of backing file system deployment used by FSx.\n   */\n  readonly deploymentType: LustreDeploymentType;\n\n  /**\n   * The path in Amazon S3 where the root of your Amazon FSx file system is exported. The path must use the same\n   * Amazon S3 bucket as specified in ImportPath. If you only specify a bucket name, such as s3://import-bucket, you\n   * get a 1:1 mapping of file system objects to S3 bucket objects. This mapping means that the input data in S3 is\n   * overwritten on export. If you provide a custom prefix in the export path, such as\n   * s3://import-bucket/[custom-optional-prefix], Amazon FSx exports the contents of your file system to that export\n   * prefix in the Amazon S3 bucket.\n   *\n   * @default s3://import-bucket/FSxLustre[creation-timestamp]\n   */\n  readonly exportPath?: string;\n\n  /**\n   * For files imported from a data repository, this value determines the stripe count and maximum amount of data per\n   * file (in MiB) stored on a single physical disk. Allowed values are between 1 and 512,000.\n   *\n   * @default 1024\n   */\n  readonly importedFileChunkSizeMiB?: number;\n\n  /**\n   * The path to the Amazon S3 bucket (including the optional prefix) that you're using as the data repository for\n   * your Amazon FSx for Lustre file system. Must be of the format \"s3://{bucketName}/optional-prefix\" and cannot\n   * exceed 900 characters.\n   *\n   * @default - no bucket is imported\n   */\n  readonly importPath?: string;\n\n  /**\n   * Required for the PERSISTENT_1 deployment type, describes the amount of read and write throughput for each 1\n   * tebibyte of storage, in MB/s/TiB. Valid values are 50, 100, 200.\n   *\n   * @default - no default, conditionally required for PERSISTENT_1 deployment type\n   */\n  readonly perUnitStorageThroughput?: number;\n\n  /**\n   * The preferred day and time to perform weekly maintenance. The first digit is the day of the week, starting at 1\n   * for Monday, then the following are hours and minutes in the UTC time zone, 24 hour clock. For example: '2:20:30'\n   * is Tuesdays at 20:30.\n   *\n   * @default - no preference\n   */\n  readonly weeklyMaintenanceStartTime?: LustreMaintenanceTime;\n}\n\n/**\n * Properties specific to the Lustre version of the FSx file system.\n */\nexport interface LustreFileSystemProps extends FileSystemProps {\n  /**\n   * Additional configuration for FSx specific to Lustre.\n   */\n  readonly lustreConfiguration: LustreConfiguration;\n\n  /**\n   * The subnet that the file system will be accessible from.\n   */\n  readonly vpcSubnet: ISubnet;\n}\n\n/**\n * The FSx for Lustre File System implementation of IFileSystem.\n *\n * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-filesystem.html\n *\n * @resource AWS::FSx::FileSystem\n */\nexport class LustreFileSystem extends FileSystemBase {\n\n  /**\n   * Import an existing FSx for Lustre file system from the given properties.\n   */\n  public static fromLustreFileSystemAttributes(scope: Construct, id: string, attrs: FileSystemAttributes): IFileSystem {\n    class Import extends FileSystemBase {\n      public readonly dnsName = attrs.dnsName;\n      public readonly fileSystemId = attrs.fileSystemId;\n      public readonly connections = LustreFileSystem.configureConnections(attrs.securityGroup);\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The default FSx file system type used by FSx for Lustre.\n   */\n  private static readonly DEFAULT_FILE_SYSTEM_TYPE: string = 'LUSTRE';\n\n  /**\n   * The default ports the file system listens on. Actual port list is: [988, 1021, 1022, 1023]\n   */\n  private static readonly DEFAULT_PORT_RANGE = { startPort: 988, endPort: 1023 };\n\n  /**\n   * Configures a Connections object with all the ports required by FSx for Lustre\n   */\n  private static configureConnections(securityGroup: ISecurityGroup): Connections {\n    const connections = new Connections({\n      securityGroups: [securityGroup],\n      defaultPort: Port.tcpRange(\n        LustreFileSystem.DEFAULT_PORT_RANGE.startPort,\n        LustreFileSystem.DEFAULT_PORT_RANGE.endPort),\n    });\n\n    return connections;\n  }\n\n  /**\n   * The security groups/rules used to allow network connections to the file system.\n   */\n  public readonly connections: Connections;\n\n  /**\n   * The DNS name assigned to this file system.\n   */\n  public readonly dnsName: string;\n\n  /**\n   * The ID that AWS assigns to the file system.\n   */\n  public readonly fileSystemId: string;\n\n  /**\n   * The mount name of the file system, generated by FSx\n   *\n   * @attribute LustreMountName\n   */\n  public readonly mountName: string;\n\n  /**\n   * The encapsulated L1 file system.\n   */\n  private readonly fileSystem: CfnFileSystem;\n\n  constructor(scope: Construct, id: string, props: LustreFileSystemProps) {\n    super(scope, id);\n\n    this.validateProps(props);\n\n    const updatedLustureProps = {\n      importedFileChunkSize: props.lustreConfiguration.importedFileChunkSizeMiB,\n      weeklyMaintenanceStartTime: props.lustreConfiguration.weeklyMaintenanceStartTime?.toTimestamp(),\n    };\n    const lustreConfiguration = Object.assign({}, props.lustreConfiguration, updatedLustureProps);\n\n    const securityGroup = (props.securityGroup || new SecurityGroup(this, 'FsxLustreSecurityGroup', {\n      vpc: props.vpc,\n    }));\n    securityGroup.addIngressRule(\n      securityGroup,\n      Port.tcpRange(LustreFileSystem.DEFAULT_PORT_RANGE.startPort, LustreFileSystem.DEFAULT_PORT_RANGE.endPort));\n    this.connections = LustreFileSystem.configureConnections(securityGroup);\n\n    this.fileSystem = new CfnFileSystem(this, 'Resource', {\n      fileSystemType: LustreFileSystem.DEFAULT_FILE_SYSTEM_TYPE,\n      subnetIds: [props.vpcSubnet.subnetId],\n      backupId: props.backupId,\n      kmsKeyId: (props.kmsKey ? props.kmsKey.keyId : undefined),\n      lustreConfiguration,\n      securityGroupIds: [securityGroup.securityGroupId],\n      storageCapacity: props.storageCapacityGiB,\n    });\n    this.fileSystem.applyRemovalPolicy(props.removalPolicy);\n\n    this.fileSystemId = this.fileSystem.ref;\n    this.dnsName = `${this.fileSystemId}.fsx.${this.stack.region}.${Aws.URL_SUFFIX}`;\n    this.mountName = this.fileSystem.attrLustreMountName;\n  }\n\n  /**\n   * Validates the props provided for a new FSx for Lustre file system.\n   */\n  private validateProps(props: LustreFileSystemProps) {\n    const lustreConfiguration = props.lustreConfiguration;\n    const deploymentType = lustreConfiguration.deploymentType;\n\n    // Make sure the import path is valid before validating the export path\n    this.validateImportPath(lustreConfiguration.importPath);\n    this.validateExportPath(lustreConfiguration.exportPath, lustreConfiguration.importPath);\n\n    this.validateImportedFileChunkSize(lustreConfiguration.importedFileChunkSizeMiB);\n    this.validatePerUnitStorageThroughput(deploymentType, lustreConfiguration.perUnitStorageThroughput);\n    this.validateStorageCapacity(deploymentType, props.storageCapacityGiB);\n  }\n\n  /**\n   * Validates the export path is in the correct format and matches the import path.\n   */\n  private validateExportPath(exportPath?: string, importPath?: string): void {\n    if (exportPath === undefined) { return; }\n    if (importPath === undefined) {\n      throw new Error('Cannot define an export path without also defining an import path');\n    }\n\n    if (Token.isUnresolved(exportPath) && Token.isUnresolved(importPath)) { return; }\n\n    if (Token.isUnresolved(importPath) !== Token.isUnresolved(exportPath)) {\n      throw new Error('The importPath and exportPath must each be Tokens or not Tokens, you cannot use a mix');\n    }\n    if (!exportPath.startsWith(importPath)) {\n      throw new Error(`The export path \"${exportPath}\" is invalid. Expecting the format: s3://{IMPORT_PATH}/optional-prefix`);\n    }\n    if (exportPath.length > 900) {\n      throw new Error(`The export path \"${exportPath}\" exceeds the maximum length of 900 characters`);\n    }\n  }\n\n  /**\n   * Validates the importedFileChunkSize is in the correct range.\n   */\n  private validateImportedFileChunkSize(importedFileChunkSize?: number): void {\n    if (importedFileChunkSize === undefined) { return; }\n\n    if (importedFileChunkSize < 1 || importedFileChunkSize > 512000) {\n      throw new Error(`importedFileChunkSize cannot be ${importedFileChunkSize} MiB. It must be a value from 1 to 512,000 MiB`);\n    }\n  }\n\n  /**\n   * Validates the import path is the correct format.\n   */\n  private validateImportPath(importPath?: string): void {\n    if (importPath === undefined || Token.isUnresolved(importPath)) { return; }\n\n    const regexp = /^s3:\\/\\//;\n\n    if (importPath.search(regexp) === -1) {\n      throw new Error(`The import path \"${importPath}\" is invalid. Expecting the format: s3://{BUCKET_NAME}/optional-prefix`);\n    }\n    if (importPath.length > 900) {\n      throw new Error(`The import path \"${importPath}\" exceeds the maximum length of 900 characters`);\n    }\n  }\n\n  /**\n   * Validates the perUnitStorageThroughput is defined correctly for the given deploymentType.\n   */\n  private validatePerUnitStorageThroughput(deploymentType: LustreDeploymentType, perUnitStorageThroughput?: number) {\n    if (perUnitStorageThroughput === undefined) { return; }\n\n    if (deploymentType !== LustreDeploymentType.PERSISTENT_1 && deploymentType !== LustreDeploymentType.PERSISTENT_2) {\n      throw new Error('perUnitStorageThroughput can only be set for the PERSISTENT_1/PERSISTENT_2 deployment types, received: ' + deploymentType);\n    }\n\n    if (deploymentType === LustreDeploymentType.PERSISTENT_1) {\n      if (![50, 100, 200].includes(perUnitStorageThroughput)) {\n        throw new Error('perUnitStorageThroughput must be 50, 100, or 200 MB/s/TiB for PERSISTENT_1 deployment type, got: ' + perUnitStorageThroughput);\n      }\n    }\n\n    if (deploymentType === LustreDeploymentType.PERSISTENT_2) {\n      if (![125, 250, 500, 1000].includes(perUnitStorageThroughput)) {\n        throw new Error('perUnitStorageThroughput must be 125, 250, 500 or 1000 MB/s/TiB for PERSISTENT_2 deployment type, got: ' + perUnitStorageThroughput);\n      }\n    }\n  }\n\n  /**\n   * Validates the storage capacity is an acceptable value for the deployment type.\n   */\n  private validateStorageCapacity(deploymentType: LustreDeploymentType, storageCapacity: number): void {\n    if (deploymentType === LustreDeploymentType.SCRATCH_1) {\n      if (![1200, 2400, 3600].includes(storageCapacity) && storageCapacity % 3600 !== 0) {\n        throw new Error('storageCapacity must be 1,200, 2,400, 3,600, or a multiple of 3,600');\n      }\n    } else {\n      if (![1200, 2400].includes(storageCapacity) && storageCapacity % 2400 !== 0) {\n        throw new Error('storageCapacity must be 1,200, 2,400, or a multiple of 2,400');\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
