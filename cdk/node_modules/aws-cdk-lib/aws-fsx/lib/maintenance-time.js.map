{
  "version": 3,
  "sources": ["maintenance-time.ts"],
  "sourcesContent": ["/**\n * Enum for representing all the days of the week\n */\nexport enum Weekday {\n  /**\n   * Monday\n   */\n  MONDAY = '1',\n  /**\n   * Tuesday\n   */\n  TUESDAY = '2',\n  /**\n   * Wednesday\n   */\n  WEDNESDAY = '3',\n  /**\n   * Thursday\n   */\n  THURSDAY = '4',\n  /**\n   * Friday\n   */\n  FRIDAY = '5',\n  /**\n   * Saturday\n   */\n  SATURDAY = '6',\n  /**\n   * Sunday\n   */\n  SUNDAY = '7'\n}\n\n/**\n * Properties required for setting up a weekly maintenance time\n */\nexport interface LustreMaintenanceTimeProps {\n  /**\n   * The day of the week for maintenance to be performed.\n   */\n  readonly day: Weekday;\n  /**\n   * The hour of the day (from 0-24) for maintenance to be performed.\n   */\n  readonly hour: number;\n  /**\n   * The minute of the hour (from 0-59) for maintenance to be performed.\n   */\n  readonly minute: number;\n}\n\n/**\n * Class for scheduling a weekly manitenance time.\n */\nexport class LustreMaintenanceTime {\n  /**\n   * The day of the week for maintenance to be performed.\n   */\n  private readonly day: Weekday;\n  /**\n   * The hour of the day (from 00-24) for maintenance to be performed.\n   */\n  private readonly hour: string;\n  /**\n   * The minute of the hour (from 00-59) for maintenance to be performed.\n   */\n  private readonly minute: string;\n\n  constructor(props: LustreMaintenanceTimeProps) {\n    this.validate(props.hour, props.minute);\n\n    this.day = props.day;\n    this.hour = this.getTwoDigitString(props.hour);\n    this.minute = this.getTwoDigitString(props.minute);\n  }\n  /**\n   * Converts a day, hour, and minute into a timestamp as used by FSx for Lustre's weeklyMaintenanceStartTime field.\n   */\n  public toTimestamp(): string {\n    return `${this.day.valueOf()}:${this.hour}:${this.minute}`;\n  }\n\n  /**\n   * Pad an integer so that it always contains at least 2 digits. Assumes the number is a positive integer.\n   */\n  private getTwoDigitString(n: number): string {\n    const numberString = n.toString();\n    if (numberString.length === 1) {\n      return `0${n}`;\n    }\n    return numberString;\n  }\n\n  /**\n   * Validation needed for the values of the maintenance time.\n   */\n  private validate(hour: number, minute: number) {\n    if (!Number.isInteger(hour) || hour < 0 || hour > 24) {\n      throw new Error('Maintenance time hour must be an integer between 0 and 24');\n    }\n    if (!Number.isInteger(minute) || minute < 0 || minute > 59) {\n      throw new Error('Maintenance time minute must be an integer between 0 and 59');\n    }\n  }\n}"],
  "mappings": "4OAGA,GAAY,SAAZ,AAAA,UAAY,SAAO,CAIjB,SAAA,OAAA,IAIA,SAAA,QAAA,IAIA,SAAA,UAAA,IAIA,SAAA,SAAA,IAIA,SAAA,OAAA,IAIA,SAAA,SAAA,IAIA,SAAA,OAAA,GACF,GA7BY,QAAA,QAAA,SAAA,SAAA,QAAO,CAAA,EAAA,EAoDnB,MAAa,qBAAqB,CAchC,YAAY,MAAiC,+EAC3C,KAAK,SAAS,MAAM,KAAM,MAAM,MAAM,EAEtC,KAAK,IAAM,MAAM,IACjB,KAAK,KAAO,KAAK,kBAAkB,MAAM,IAAI,EAC7C,KAAK,OAAS,KAAK,kBAAkB,MAAM,MAAM,EAK5C,aAAW,CAChB,MAAO,GAAG,KAAK,IAAI,QAAO,KAAM,KAAK,QAAQ,KAAK,SAM5C,kBAAkB,EAAS,CACjC,KAAM,cAAe,EAAE,SAAQ,EAC/B,MAAI,cAAa,SAAW,EACnB,IAAI,IAEN,aAMD,SAAS,KAAc,OAAc,CAC3C,GAAI,CAAC,OAAO,UAAU,IAAI,GAAK,KAAO,GAAK,KAAO,GAChD,KAAM,IAAI,OAAM,2DAA2D,EAE7E,GAAI,CAAC,OAAO,UAAU,MAAM,GAAK,OAAS,GAAK,OAAS,GACtD,KAAM,IAAI,OAAM,6DAA6D,GA/CnF,QAAA,sBAAA",
  "names": []
}
