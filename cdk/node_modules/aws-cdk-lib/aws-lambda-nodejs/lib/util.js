"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getTsconfigCompilerOptions=exports.extractDependencies=exports.tryGetModuleVersionFromPkg=exports.tryGetModuleVersionFromRequire=exports.exec=exports.findUpMultiple=exports.findUp=exports.callsites=void 0;const child_process_1=require("child_process"),fs=require("fs"),path=require("path");function callsites(){var _a;const _prepareStackTrace=Error.prepareStackTrace;Error.prepareStackTrace=(_,stack2)=>stack2;const stack=(_a=new Error().stack)===null||_a===void 0?void 0:_a.slice(1);return Error.prepareStackTrace=_prepareStackTrace,stack}exports.callsites=callsites;function findUp(name,directory=process.cwd()){return findUpMultiple([name],directory)[0]}exports.findUp=findUp;function findUpMultiple(names,directory=process.cwd()){const absoluteDirectory=path.resolve(directory),files=[];for(const name of names){const file=path.join(directory,name);fs.existsSync(file)&&files.push(file)}if(files.length>0)return files;const{root}=path.parse(absoluteDirectory);return absoluteDirectory===root?[]:findUpMultiple(names,path.dirname(absoluteDirectory))}exports.findUpMultiple=findUpMultiple;function exec(cmd,args,options){var _a,_b;const proc=child_process_1.spawnSync(cmd,args,options);if(proc.error)throw proc.error;if(proc.status!==0)throw proc.stdout||proc.stderr?new Error(`[Status ${proc.status}] stdout: ${(_a=proc.stdout)===null||_a===void 0?void 0:_a.toString().trim()}


stderr: ${(_b=proc.stderr)===null||_b===void 0?void 0:_b.toString().trim()}`):new Error(`${cmd} ${args.join(" ")} ${options!=null&&options.cwd?`run in directory ${options.cwd}`:""} exited with status ${proc.status}`);return proc}exports.exec=exec;function tryGetModuleVersionFromRequire(mod){try{return require(`${mod}/package.json`).version}catch{return}}exports.tryGetModuleVersionFromRequire=tryGetModuleVersionFromRequire;function tryGetModuleVersionFromPkg(mod,pkgJson,pkgPath){var _a,_b,_c;const dependencies={...(_a=pkgJson.dependencies)!==null&&_a!==void 0?_a:{},...(_b=pkgJson.devDependencies)!==null&&_b!==void 0?_b:{},...(_c=pkgJson.peerDependencies)!==null&&_c!==void 0?_c:{}};if(!dependencies[mod])return;const fileMatch=dependencies[mod].match(/file:(.+)/);return fileMatch&&!path.isAbsolute(fileMatch[1])?`file:${path.join(path.dirname(pkgPath),fileMatch[1])}`:dependencies[mod]}exports.tryGetModuleVersionFromPkg=tryGetModuleVersionFromPkg;function extractDependencies(pkgPath,modules){var _a;const dependencies={},pkgJson=require(pkgPath);for(const mod of modules){const version=(_a=tryGetModuleVersionFromPkg(mod,pkgJson,pkgPath))!==null&&_a!==void 0?_a:tryGetModuleVersionFromRequire(mod);if(!version)throw new Error(`Cannot extract version for module '${mod}'. Check that it's referenced in your package.json or installed.`);dependencies[mod]=version}return dependencies}exports.extractDependencies=extractDependencies;function getTsconfigCompilerOptions(tsconfigPath){const compilerOptions=extractTsConfig(tsconfigPath),excludedCompilerOptions=["composite","tsBuildInfoFile"],options={...compilerOptions,incremental:!1,rootDir:"./",outDir:"./"};let compilerOptionsString="";return Object.keys(options).forEach(key=>{if(excludedCompilerOptions.includes(key))return;const value=options[key],option="--"+key,type=typeof value;if(type==="boolean")value&&(compilerOptionsString+=option+" ");else if(type==="string")compilerOptionsString+=option+" "+value+" ";else if(type==="object")Array.isArray(value)&&(compilerOptionsString+=option+" "+value.join(",")+" ");else throw new Error(`Missing support for compilerOption: [${key}]: { ${type}, ${value}} 
`)}),compilerOptionsString.trim()}exports.getTsconfigCompilerOptions=getTsconfigCompilerOptions;function extractTsConfig(tsconfigPath,previousCompilerOptions){const{extends:extendedConfig,compilerOptions}=require(tsconfigPath),updatedCompilerOptions={...previousCompilerOptions!=null?previousCompilerOptions:{},...compilerOptions};return extendedConfig?extractTsConfig(path.resolve(tsconfigPath.replace(/[^\/]+$/,""),extendedConfig),updatedCompilerOptions):updatedCompilerOptions}
//# sourceMappingURL=util.js.map
