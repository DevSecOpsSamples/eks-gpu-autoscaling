{
  "version": 3,
  "sources": ["util.ts"],
  "sourcesContent": ["import { spawnSync, SpawnSyncOptions } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface CallSite {\n  getThis(): any;\n  getTypeName(): string;\n  getFunctionName(): string;\n  getMethodName(): string;\n  getFileName(): string;\n  getLineNumber(): number;\n  getColumnNumber(): number;\n  getFunction(): Function;\n  getEvalOrigin(): string;\n  isNative(): boolean;\n  isToplevel(): boolean;\n  isEval(): boolean;\n  isConstructor(): boolean;\n}\n\n/**\n * Get callsites from the V8 stack trace API\n *\n * https://github.com/sindresorhus/callsites\n */\nexport function callsites(): CallSite[] {\n  const _prepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = (_, stack) => stack;\n  const stack = new Error().stack?.slice(1);\n  Error.prepareStackTrace = _prepareStackTrace;\n  return stack as unknown as CallSite[];\n}\n\n/**\n * Find a file by walking up parent directories\n */\nexport function findUp(name: string, directory: string = process.cwd()): string | undefined {\n  return findUpMultiple([name], directory)[0];\n}\n\n/**\n * Find the lowest of multiple files by walking up parent directories. If\n * multiple files exist at the same level, they will all be returned.\n */\nexport function findUpMultiple(names: string[], directory: string = process.cwd()): string[] {\n  const absoluteDirectory = path.resolve(directory);\n\n  const files = [];\n  for (const name of names) {\n    const file = path.join(directory, name);\n    if (fs.existsSync(file)) {\n      files.push(file);\n    }\n  }\n\n  if (files.length > 0) {\n    return files;\n  }\n\n  const { root } = path.parse(absoluteDirectory);\n  if (absoluteDirectory === root) {\n    return [];\n  }\n\n  return findUpMultiple(names, path.dirname(absoluteDirectory));\n}\n\n/**\n * Spawn sync with error handling\n */\nexport function exec(cmd: string, args: string[], options?: SpawnSyncOptions) {\n  const proc = spawnSync(cmd, args, options);\n\n  if (proc.error) {\n    throw proc.error;\n  }\n\n  if (proc.status !== 0) {\n    if (proc.stdout || proc.stderr) {\n      throw new Error(`[Status ${proc.status}] stdout: ${proc.stdout?.toString().trim()}\\n\\n\\nstderr: ${proc.stderr?.toString().trim()}`);\n    }\n    throw new Error(`${cmd} ${args.join(' ')} ${options?.cwd ? `run in directory ${options.cwd}` : ''} exited with status ${proc.status}`);\n  }\n\n  return proc;\n}\n\n/**\n * Returns a module version by requiring its package.json file\n */\nexport function tryGetModuleVersionFromRequire(mod: string): string | undefined {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    return require(`${mod}/package.json`).version;\n  } catch (err) {\n    return undefined;\n  }\n}\n\n/**\n * Gets module version from package.json content\n */\nexport function tryGetModuleVersionFromPkg(mod: string, pkgJson: { [key: string]: any }, pkgPath: string): string | undefined {\n  const dependencies = {\n    ...pkgJson.dependencies ?? {},\n    ...pkgJson.devDependencies ?? {},\n    ...pkgJson.peerDependencies ?? {},\n  };\n\n  if (!dependencies[mod]) {\n    return undefined;\n  }\n\n  // If it's a \"file:\" version, make it absolute\n  const fileMatch = dependencies[mod].match(/file:(.+)/);\n  if (fileMatch && !path.isAbsolute(fileMatch[1])) {\n    const absoluteFilePath = path.join(path.dirname(pkgPath), fileMatch[1]);\n    return `file:${absoluteFilePath}`;\n  };\n\n  return dependencies[mod];\n}\n\n/**\n * Extract versions for a list of modules.\n *\n * First lookup the version in the package.json and then fallback to requiring\n * the module's package.json. The fallback is needed for transitive dependencies.\n */\nexport function extractDependencies(pkgPath: string, modules: string[]): { [key: string]: string } {\n  const dependencies: { [key: string]: string } = {};\n\n  // Use require for cache\n  const pkgJson = require(pkgPath); // eslint-disable-line @typescript-eslint/no-require-imports\n\n  for (const mod of modules) {\n    const version = tryGetModuleVersionFromPkg(mod, pkgJson, pkgPath)\n      ?? tryGetModuleVersionFromRequire(mod);\n    if (!version) {\n      throw new Error(`Cannot extract version for module '${mod}'. Check that it's referenced in your package.json or installed.`);\n    }\n    dependencies[mod] = version;\n  }\n\n  return dependencies;\n}\n\nexport function getTsconfigCompilerOptions(tsconfigPath: string): string {\n  const compilerOptions = extractTsConfig(tsconfigPath);\n  const excludedCompilerOptions = [\n    'composite',\n    'tsBuildInfoFile',\n  ];\n\n  const options: Record<string, any> = {\n    ...compilerOptions,\n    // Overrides\n    incremental: false,\n    // Intentionally Setting rootDir and outDir, so that the compiled js file always end up next to .ts file.\n    rootDir: './',\n    outDir: './',\n  };\n\n  let compilerOptionsString = '';\n  Object.keys(options).forEach((key: string) => {\n\n    if (excludedCompilerOptions.includes(key)) {\n      return;\n    }\n\n    const value = options[key];\n    const option = '--' + key;\n    const type = typeof value;\n\n    if (type === 'boolean') {\n      if (value) {\n        compilerOptionsString += option + ' ';\n      }\n    } else if (type === 'string') {\n      compilerOptionsString += option + ' ' + value + ' ';\n    } else if (type === 'object') {\n      if (Array.isArray(value)) {\n        compilerOptionsString += option + ' ' + value.join(',') + ' ';\n      }\n    } else {\n      throw new Error(`Missing support for compilerOption: [${key}]: { ${type}, ${value}} \\n`);\n    }\n  });\n\n  return compilerOptionsString.trim();\n}\n\n\nfunction extractTsConfig(tsconfigPath: string, previousCompilerOptions?: Record<string, any>): Record<string, any> | undefined {\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  const { extends: extendedConfig, compilerOptions } = require(tsconfigPath);\n  const updatedCompilerOptions = {\n    ...(previousCompilerOptions ?? {}),\n    ...compilerOptions,\n  };\n  if (extendedConfig) {\n    return extractTsConfig(\n      path.resolve(tsconfigPath.replace(/[^\\/]+$/, ''), extendedConfig),\n      updatedCompilerOptions,\n    );\n  }\n  return updatedCompilerOptions;\n}"],
  "mappings": "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",
  "names": []
}
