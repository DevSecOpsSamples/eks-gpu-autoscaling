{
  "version": 3,
  "sources": ["types.ts"],
  "sourcesContent": ["import { DockerImage } from '../../core';\n\n/**\n * Bundling options\n */\nexport interface BundlingOptions {\n  /**\n   * Whether to minify files when bundling.\n   *\n   * @default false\n   */\n  readonly minify?: boolean;\n\n  /**\n   * Whether to include source maps when bundling.\n   *\n   * @default false\n   */\n  readonly sourceMap?: boolean;\n\n  /**\n   * Source map mode to be used when bundling.\n   * @see https://esbuild.github.io/api/#sourcemap\n   *\n   * @default SourceMapMode.DEFAULT\n   */\n  readonly sourceMapMode?: SourceMapMode;\n\n  /**\n   * Whether to include original source code in source maps when bundling.\n   *\n   * @see https://esbuild.github.io/api/#sources-content\n   *\n   * @default true\n   */\n  readonly sourcesContent?: boolean;\n\n  /**\n   * Target environment for the generated JavaScript code.\n   *\n   * @see https://esbuild.github.io/api/#target\n   *\n   * @default - the node version of the runtime\n   */\n  readonly target?: string;\n\n  /**\n   * Use loaders to change how a given input file is interpreted.\n   *\n   * Configuring a loader for a given file type lets you load that file type with\n   * an `import` statement or a `require` call.\n   *\n   * @see https://esbuild.github.io/api/#loader\n   *\n   * For example, `{ '.png': 'dataurl' }`.\n   *\n   * @default - use esbuild default loaders\n   */\n  readonly loader?: { [ext: string]: string };\n\n  /**\n   * Log level for esbuild. This is also propagated to the package manager and\n   * applies to its specific install command.\n   *\n   * @default LogLevel.WARNING\n   */\n  readonly logLevel?: LogLevel;\n\n  /**\n   * Whether to preserve the original `name` values even in minified code.\n   *\n   * In JavaScript the `name` property on functions and classes defaults to a\n   * nearby identifier in the source code.\n   *\n   * However, minification renames symbols to reduce code size and bundling\n   * sometimes need to rename symbols to avoid collisions. That changes value of\n   * the `name` property for many of these cases. This is usually fine because\n   * the `name` property is normally only used for debugging. However, some\n   * frameworks rely on the `name` property for registration and binding purposes.\n   * If this is the case, you can enable this option to preserve the original\n   * `name` values even in minified code.\n   *\n   * @default false\n   */\n  readonly keepNames?: boolean;\n\n  /**\n   * Normally the esbuild automatically discovers `tsconfig.json` files and reads their contents during a build.\n   *\n   * However, you can also configure a custom `tsconfig.json` file to use instead.\n   *\n   * This is similar to entry path, you need to provide path to your custom `tsconfig.json`.\n   *\n   * This can be useful if you need to do multiple builds of the same code with different settings.\n   *\n   * For example, `{ 'tsconfig': 'path/custom.tsconfig.json' }`.\n   *\n   * @default - automatically discovered by `esbuild`\n   */\n  readonly tsconfig? : string\n\n  /**\n   * This option tells esbuild to write out a JSON file relative to output directory with metadata about the build.\n   *\n   * The metadata in this JSON file follows this schema (specified using TypeScript syntax):\n   *\n   * ```text\n   * {\n   *   outputs: {\n   *     [path: string]: {\n   *       bytes: number\n   *       inputs: {\n   *         [path: string]: { bytesInOutput: number }\n   *       }\n   *       imports: { path: string }[]\n   *       exports: string[]\n   *     }\n   *   }\n   * }\n   * ```\n   * This data can then be analyzed by other tools. For example,\n   * bundle buddy can consume esbuild's metadata format and generates a treemap visualization\n   * of the modules in your bundle and how much space each one takes up.\n   * @see https://esbuild.github.io/api/#metafile\n   * @default false\n   */\n  readonly metafile?: boolean\n\n  /**\n   * Use this to insert an arbitrary string at the beginning of generated JavaScript files.\n   *\n   * This is similar to footer which inserts at the end instead of the beginning.\n   *\n   * This is commonly used to insert comments:\n   *\n   * @default - no comments are passed\n   */\n  readonly banner? : string\n\n  /**\n   * Use this to insert an arbitrary string at the end of generated JavaScript files.\n   *\n   * This is similar to banner which inserts at the beginning instead of the end.\n   *\n   * This is commonly used to insert comments\n   *\n   * @default - no comments are passed\n   */\n  readonly footer? : string\n\n  /**\n   * The charset to use for esbuild's output.\n   *\n   * By default esbuild's output is ASCII-only. Any non-ASCII characters are escaped\n   * using backslash escape sequences. Using escape sequences makes the generated output\n   * slightly bigger, and also makes it harder to read. If you would like for esbuild to print\n   * the original characters without using escape sequences, use `Charset.UTF8`.\n   *\n   * @see https://esbuild.github.io/api/#charset\n   * @default Charset.ASCII\n   */\n  readonly charset?: Charset;\n\n  /**\n   * Environment variables defined when bundling runs.\n   *\n   * @default - no environment variables are defined.\n   */\n  readonly environment?: { [key: string]: string; };\n\n  /**\n   * Replace global identifiers with constant expressions.\n   *\n   * For example, `{ 'process.env.DEBUG': 'true' }`.\n   *\n   * Another example, `{ 'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx') }`.\n   *\n   * @default - no replacements are made\n   */\n  readonly define?: { [key: string]: string };\n\n  /**\n   * A list of modules that should be considered as externals (already available\n   * in the runtime).\n   *\n   * @default ['aws-sdk']\n   */\n  readonly externalModules?: string[];\n\n  /**\n   * A list of modules that should be installed instead of bundled. Modules are\n   * installed in a Lambda compatible environment only when bundling runs in\n   * Docker.\n   *\n   * @default - all modules are bundled\n   */\n  readonly nodeModules?: string[];\n\n  /**\n   * The version of esbuild to use when running in a Docker container.\n   *\n   * @default - latest v0\n   */\n  readonly esbuildVersion?: string;\n\n  /**\n   * Build arguments to pass into esbuild.\n   *\n   * For example, to add the [--log-limit](https://esbuild.github.io/api/#log-limit) flag:\n   *\n   * ```text\n   * new NodejsFunction(scope, id, {\n   *   ...\n   *   bundling: {\n   *     esbuildArgs: {\n   *       \"--log-limit\": \"0\",\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @default - no additional esbuild arguments are passed\n   */\n  readonly esbuildArgs?: { [key: string]: string | boolean };\n\n  /**\n   * Build arguments to pass when building the bundling image.\n   *\n   * @default - no build arguments are passed\n   */\n  readonly buildArgs?: { [key: string]: string };\n\n  /**\n   * Force bundling in a Docker container even if local bundling is\n   * possible. This is useful if your function relies on node modules\n   * that should be installed (`nodeModules`) in a Lambda compatible\n   * environment.\n   *\n   * @default false\n   */\n  readonly forceDockerBundling?: boolean;\n\n  /**\n  * Run compilation using tsc before running file through bundling step.\n  * This usually is not required unless you are using new experimental features that\n  * are only supported by typescript's `tsc` compiler.\n  * One example of such feature is `emitDecoratorMetadata`.\n  *\n  * @default false\n  */\n  readonly preCompilation?: boolean\n\n  /**\n   * A custom bundling Docker image.\n   *\n   * This image should have esbuild installed globally. If you plan to use `nodeModules`\n   * it should also have `npm` or `yarn` depending on the lock file you're using.\n   *\n   * See https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-lambda-nodejs/lib/Dockerfile\n   * for the default image provided by @aws-cdk/aws-lambda-nodejs.\n   *\n   * @default - use the Docker image provided by @aws-cdk/aws-lambda-nodejs\n   */\n  readonly dockerImage?: DockerImage;\n\n  /**\n   * Command hooks\n   *\n   * @default - do not run additional commands\n   */\n  readonly commandHooks?: ICommandHooks;\n\n  /**\n   * Specify a custom hash for this asset. For consistency, this custom hash will\n   * be SHA256 hashed and encoded as hex. The resulting hash will be the asset\n   * hash.\n   *\n   * NOTE: the hash is used in order to identify a specific revision of the asset, and\n   * used for optimizing and caching deployment activities related to this asset such as\n   * packaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will\n   * need to make sure it is updated every time the asset changes, or otherwise it is\n   * possible that some deployments will not be invalidated.\n   *\n   * @default - asset hash is calculated based on the bundled output\n   */\n  readonly assetHash?: string;\n\n  /**\n   * Output format for the generated JavaScript files\n   *\n   * @default OutputFormat.CJS\n   */\n  readonly format?: OutputFormat;\n\n  /**\n   * How to determine the entry point for modules.\n   * Try ['module', 'main'] to default to ES module versions.\n   *\n   * @default ['main', 'module']\n   */\n  readonly mainFields?: string[];\n\n  /**\n   * This option allows you to automatically replace a global variable with an\n   * import from another file.\n   *\n   * @see https://esbuild.github.io/api/#inject\n   * @default - no code is injected\n   */\n  readonly inject?: string[]\n}\n\n/**\n * Output format for the generated JavaScript files\n */\nexport enum OutputFormat {\n  /**\n   * CommonJS\n   */\n  CJS = 'cjs',\n\n  /**\n   * ECMAScript module\n   *\n   * Requires a running environment that supports `import` and `export` syntax.\n   */\n  ESM = 'esm'\n}\n\n/**\n * Command hooks\n *\n * These commands will run in the environment in which bundling occurs: inside\n * the container for Docker bundling or on the host OS for local bundling.\n *\n * Commands are chained with `&&`.\n *\n * The following example (specified in TypeScript) copies a file from the input\n * directory to the output directory to include it in the bundled asset:\n *\n * ```text\n * afterBundling(inputDir: string, outputDir: string): string[]{\n *   return [`cp ${inputDir}/my-binary.node ${outputDir}`];\n * }\n * ```\n */\nexport interface ICommandHooks {\n  /**\n   * Returns commands to run before bundling.\n   *\n   * Commands are chained with `&&`.\n   */\n  beforeBundling(inputDir: string, outputDir: string): string[];\n\n  /**\n   * Returns commands to run before installing node modules.\n   *\n   * This hook only runs when node modules are installed.\n   *\n   * Commands are chained with `&&`.\n   */\n  beforeInstall(inputDir: string, outputDir: string): string[];\n\n  /**\n   * Returns commands to run after bundling.\n   *\n   * Commands are chained with `&&`.\n   */\n  afterBundling(inputDir: string, outputDir: string): string[];\n}\n\n/**\n * Log levels for esbuild and package managers' install commands.\n */\nexport enum LogLevel {\n  /** Show everything */\n  INFO = 'info',\n  /** Show warnings and errors */\n  WARNING = 'warning',\n  /** Show errors only */\n  ERROR = 'error',\n  /** Show nothing */\n  SILENT = 'silent',\n}\n\n\n/**\n * SourceMap mode for esbuild\n * @see https://esbuild.github.io/api/#sourcemap\n */\nexport enum SourceMapMode {\n  /**\n   * Default sourceMap mode - will generate a .js.map file alongside any generated .js file and add a special //# sourceMappingURL=\n   * comment to the bottom of the .js file pointing to the .js.map file\n   */\n  DEFAULT = 'default',\n  /**\n   *  External sourceMap mode - If you want to omit the special //# sourceMappingURL= comment from the generated .js file but you still\n   *  want to generate the .js.map files\n   */\n  EXTERNAL = 'external',\n  /**\n   * Inline sourceMap mode - If you want to insert the entire source map into the .js file instead of generating a separate .js.map file\n   */\n  INLINE = 'inline',\n  /**\n   * Both sourceMap mode - If you want to have the effect of both inline and external simultaneously\n   */\n  BOTH = 'both'\n}\n\n/**\n * Charset for esbuild's output\n */\nexport enum Charset {\n  /**\n   * ASCII\n   *\n   * Any non-ASCII characters are escaped using backslash escape sequences\n   */\n  ASCII = 'ascii',\n\n  /**\n   * UTF-8\n   *\n   * Keep original characters without using escape sequences\n   */\n  UTF8 = 'utf8'\n}\n"],
  "mappings": "uJA2TA,GAAY,cAAZ,AAAA,UAAY,cAAY,CAItB,cAAA,IAAA,MAOA,cAAA,IAAA,KACF,GAZY,aAAA,QAAA,cAAA,SAAA,aAAY,CAAA,EAAA,EA2DxB,GAAY,UAAZ,AAAA,UAAY,UAAQ,CAElB,UAAA,KAAA,OAEA,UAAA,QAAA,UAEA,UAAA,MAAA,QAEA,UAAA,OAAA,QACF,GATY,SAAA,QAAA,UAAA,SAAA,SAAQ,CAAA,EAAA,EAgBpB,GAAY,eAAZ,AAAA,UAAY,eAAa,CAKvB,eAAA,QAAA,UAKA,eAAA,SAAA,WAIA,eAAA,OAAA,SAIA,eAAA,KAAA,MACF,GAnBY,cAAA,QAAA,eAAA,SAAA,cAAa,CAAA,EAAA,EAwBzB,GAAY,SAAZ,AAAA,UAAY,SAAO,CAMjB,SAAA,MAAA,QAOA,SAAA,KAAA,MACF,GAdY,QAAA,QAAA,SAAA,SAAA,QAAO,CAAA,EAAA",
  "names": []
}
