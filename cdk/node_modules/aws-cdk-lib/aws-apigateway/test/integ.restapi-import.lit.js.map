{
  "version": 3,
  "sources": ["integ.restapi-import.lit.ts"],
  "sourcesContent": ["import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());"],
  "mappings": "oEAAA,KAAA,QAAA,QAAA,YAAA,EAEA,MAAA,QAAA,QAAA,EAYA,MAAM,iBAAkB,QAAA,KAAK,CAC3B,YAAY,MAAgB,CAC1B,MAAM,MAAO,gCAAgC,EAE7C,KAAM,SAAU,GAAI,OAAA,QAAQ,KAAM,UAAW,CAC3C,OAAQ,GACT,EACD,QAAQ,KAAK,UAAU,KAAK,EAE5B,KAAM,WAAY,GAAI,WAAU,KAAM,CACpC,UAAW,QAAQ,UACnB,eAAgB,QAAQ,sBACzB,EACK,WAAa,GAAI,YAAW,KAAM,CACtC,UAAW,QAAQ,UACnB,eAAgB,QAAQ,sBACzB,EACD,GAAI,aAAY,KAAM,CACpB,UAAW,QAAQ,UACnB,QAAS,UAAU,QAAQ,OAAO,WAAW,OAAO,EACrD,EAED,GAAI,QAAA,UAAU,KAAM,UAAW,CAC7B,MAAO,WAAW,QAAQ,yBAAyB,KAAK,iCACzD,EAED,GAAI,QAAA,UAAU,KAAM,WAAY,CAC9B,MAAO,WAAW,QAAQ,yBAAyB,KAAK,kCACzD,GAUL,MAAM,iBAAkB,QAAA,WAAW,CAGjC,YAAY,MAAkB,MAA+B,CAC3D,MAAM,MAAO,iCAAkC,KAAK,EAHtC,KAAA,QAAoB,CAAA,EAUlC,KAAM,QAAS,AALH,MAAA,QAAQ,sBAAsB,KAAM,UAAW,CACzD,UAAW,MAAM,UACjB,eAAgB,MAAM,eACvB,EAEkB,KAAK,YAAY,MAAM,EAAE,UAAU,MAAO,GAAI,OAAA,gBAAgB,CAC/E,qBAAsB,CAAC,CACrB,WAAY,MACb,EACD,oBAAqB,MAAA,oBAAoB,MACzC,iBAAkB,CAChB,mBAAoB,yBAEvB,EAAG,CACF,gBAAiB,CAAC,CAAE,WAAY,KAAK,CAAE,EACxC,EAED,KAAK,QAAQ,KAAK,MAAM,GAI5B,MAAM,kBAAmB,QAAA,WAAW,CAGlC,YAAY,MAAkB,MAA+B,CAC3D,MAAM,MAAO,kCAAmC,KAAK,EAHvC,KAAA,QAAoB,CAAA,EAUlC,KAAM,QAAS,AALH,MAAA,QAAQ,sBAAsB,KAAM,UAAW,CACzD,UAAW,MAAM,UACjB,eAAgB,MAAM,eACvB,EAEkB,KAAK,YAAY,OAAO,EAAE,UAAU,MAAO,GAAI,OAAA,gBAAgB,CAChF,qBAAsB,CAAC,CACrB,WAAY,MACb,EACD,oBAAqB,MAAA,oBAAoB,MACzC,iBAAkB,CAChB,mBAAoB,yBAEvB,EAAG,CACF,gBAAiB,CAAC,CAAE,WAAY,KAAK,CAAE,EACxC,EAED,KAAK,QAAQ,KAAK,MAAM,GAU5B,MAAM,mBAAoB,QAAA,WAAW,CACnC,YAAY,MAAkB,MAAuB,CACnD,MAAM,MAAO,mCAAoC,KAAK,EAEtD,KAAM,YAAa,GAAI,OAAA,WAAW,KAAM,aAAc,CACpD,IAAK,MAAA,QAAQ,cAAc,KAAM,UAAW,MAAM,SAAS,EAC5D,EACD,GAAI,MAAM,QACR,SAAW,UAAU,OAAM,QACzB,WAAW,KAAK,cAAc,MAAM,EAGxC,GAAI,OAAA,MAAM,KAAM,QAAS,CAAE,UAAU,CAAE,GAI3C,GAAI,WAAU,GAAI,QAAA,GAAK",
  "names": []
}
