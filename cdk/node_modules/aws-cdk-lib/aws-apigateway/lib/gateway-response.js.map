{
  "version": 3,
  "sources": ["gateway-response.ts"],
  "sourcesContent": ["import { IResource, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnGatewayResponse, CfnGatewayResponseProps } from './apigateway.generated';\nimport { IRestApi } from './restapi';\n\n/**\n * Represents gateway response resource.\n */\nexport interface IGatewayResponse extends IResource {\n}\n\n/**\n * Properties for a new gateway response.\n */\nexport interface GatewayResponseProps extends GatewayResponseOptions {\n  /**\n   * Rest api resource to target.\n   */\n  readonly restApi: IRestApi;\n}\n\n/**\n * Options to add gateway response.\n */\nexport interface GatewayResponseOptions {\n  /**\n   * Response type to associate with gateway response.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html\n   */\n  readonly type: ResponseType;\n\n  /**\n   * Http status code for response.\n   * @default - standard http status code for the response type.\n   */\n  readonly statusCode?: string;\n\n  /**\n   * Custom headers parameters for response.\n   * @default - no headers\n   */\n  readonly responseHeaders?: { [key: string]: string };\n\n  /**\n   * Custom templates to get mapped as response.\n   * @default - Response from api will be returned without applying any transformation.\n   */\n  readonly templates?: { [key: string]: string };\n\n}\n\n/**\n * Configure the response received by clients, produced from the API Gateway backend.\n *\n * @resource AWS::ApiGateway::GatewayResponse\n */\nexport class GatewayResponse extends Resource implements IGatewayResponse {\n  constructor(scope: Construct, id: string, props: GatewayResponseProps) {\n    super(scope, id);\n\n    const gatewayResponseProps: CfnGatewayResponseProps = {\n      restApiId: props.restApi.restApiId,\n      responseType: props.type.responseType,\n      responseParameters: this.buildResponseParameters(props.responseHeaders),\n      responseTemplates: props.templates,\n      statusCode: props.statusCode,\n    };\n\n    const resource = new CfnGatewayResponse(this, 'Resource', gatewayResponseProps);\n\n    const deployment = props.restApi.latestDeployment;\n    if (deployment) {\n      deployment.node.addDependency(resource);\n      deployment.addToLogicalId({\n        gatewayResponse: {\n          ...gatewayResponseProps,\n        },\n      });\n    }\n\n    this.node.defaultChild = resource;\n  }\n\n  private buildResponseParameters(responseHeaders?: { [key: string]: string }): { [key: string]: string } | undefined {\n    if (!responseHeaders) {\n      return undefined;\n    }\n\n    const responseParameters: { [key: string]: string } = {};\n    for (const [header, value] of Object.entries(responseHeaders)) {\n      responseParameters[`gatewayresponse.header.${header}`] = value;\n    }\n    return responseParameters;\n  }\n}\n\n/**\n * Supported types of gateway responses.\n * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html\n */\nexport class ResponseType {\n  /**\n   * The gateway response for authorization failure.\n   */\n  public static readonly ACCESS_DENIED = new ResponseType('ACCESS_DENIED');\n\n  /**\n   * The gateway response for an invalid API configuration.\n   */\n  public static readonly API_CONFIGURATION_ERROR = new ResponseType('API_CONFIGURATION_ERROR');\n\n  /**\n   * The gateway response when a custom or Amazon Cognito authorizer failed to authenticate the caller.\n   */\n  public static readonly AUTHORIZER_FAILURE = new ResponseType('AUTHORIZER_FAILURE');\n\n  /**\n   * The gateway response for failing to connect to a custom or Amazon Cognito authorizer.\n   */\n  public static readonly AUTHORIZER_CONFIGURATION_ERROR = new ResponseType('AUTHORIZER_CONFIGURATION_ERROR');\n\n  /**\n   * The gateway response when the request parameter cannot be validated according to an enabled request validator.\n   */\n  public static readonly BAD_REQUEST_PARAMETERS = new ResponseType('BAD_REQUEST_PARAMETERS');\n\n  /**\n   * The gateway response when the request body cannot be validated according to an enabled request validator.\n   */\n  public static readonly BAD_REQUEST_BODY = new ResponseType('BAD_REQUEST_BODY');\n\n  /**\n   * The default gateway response for an unspecified response type with the status code of 4XX.\n   */\n  public static readonly DEFAULT_4XX = new ResponseType('DEFAULT_4XX');\n\n  /**\n   * The default gateway response for an unspecified response type with a status code of 5XX.\n   */\n  public static readonly DEFAULT_5XX = new ResponseType('DEFAULT_5XX');\n\n  /**\n   * The gateway response for an AWS authentication token expired error.\n   */\n  public static readonly EXPIRED_TOKEN = new ResponseType('EXPIRED_TOKEN');\n\n  /**\n   * The gateway response for an invalid AWS signature error.\n   */\n  public static readonly INVALID_SIGNATURE = new ResponseType('INVALID_SIGNATURE');\n\n  /**\n   * The gateway response for an integration failed error.\n   */\n  public static readonly INTEGRATION_FAILURE = new ResponseType('INTEGRATION_FAILURE');\n\n  /**\n   * The gateway response for an integration timed out error.\n   */\n  public static readonly INTEGRATION_TIMEOUT = new ResponseType('INTEGRATION_TIMEOUT');\n\n  /**\n   * The gateway response for an invalid API key submitted for a method requiring an API key.\n   */\n  public static readonly INVALID_API_KEY = new ResponseType('INVALID_API_KEY');\n\n  /**\n   * The gateway response for a missing authentication token error,\n   * including the cases when the client attempts to invoke an unsupported API method or resource.\n   */\n  public static readonly MISSING_AUTHENTICATION_TOKEN = new ResponseType('MISSING_AUTHENTICATION_TOKEN');\n\n  /**\n   * The gateway response for the usage plan quota exceeded error.\n   */\n  public static readonly QUOTA_EXCEEDED = new ResponseType('QUOTA_EXCEEDED');\n\n  /**\n   * The gateway response for the request too large error.\n   */\n  public static readonly REQUEST_TOO_LARGE = new ResponseType('REQUEST_TOO_LARGE');\n\n  /**\n   * The gateway response when API Gateway cannot find the specified resource\n   * after an API request passes authentication and authorization.\n   */\n  public static readonly RESOURCE_NOT_FOUND = new ResponseType('RESOURCE_NOT_FOUND');\n\n  /**\n   * The gateway response when usage plan, method, stage, or account level throttling limits exceeded.\n   */\n  public static readonly THROTTLED = new ResponseType('THROTTLED');\n\n  /**\n   * The gateway response when the custom or Amazon Cognito authorizer failed to authenticate the caller.\n   */\n  public static readonly UNAUTHORIZED = new ResponseType('UNAUTHORIZED');\n\n  /**\n   * The gateway response when a payload is of an unsupported media type, if strict passthrough behavior is enabled.\n   */\n  public static readonly UNSUPPORTED_MEDIA_TYPE = new ResponseType('UNSUPPORTED_MEDIA_TYPE');\n\n  /**\n   * The gateway response when a request is blocked by AWS WAF.\n   */\n  public static readonly WAF_FILTERED = new ResponseType('WAF_FILTERED');\n\n  /** A custom response type to support future cases. */\n  public static of(type: string): ResponseType {\n    return new ResponseType(type.toUpperCase());\n  }\n\n  /**\n   * Valid value of response type.\n   */\n  public readonly responseType: string;\n\n  private constructor(type: string) {\n    this.responseType = type;\n  }\n\n}\n"],
  "mappings": "8OAAA,OAAA,QAAA,YAAA,EAEA,uBAAA,QAAA,wBAAA,EAsDA,MAAa,uBAAwB,QAAA,QAAQ,CAC3C,YAAY,MAAkB,GAAY,MAA2B,CACnE,MAAM,MAAO,EAAE,iFAEf,KAAM,sBAAgD,CACpD,UAAW,MAAM,QAAQ,UACzB,aAAc,MAAM,KAAK,aACzB,mBAAoB,KAAK,wBAAwB,MAAM,eAAe,EACtE,kBAAmB,MAAM,UACzB,WAAY,MAAM,YAGd,SAAW,GAAI,wBAAA,mBAAmB,KAAM,WAAY,oBAAoB,EAExE,WAAa,MAAM,QAAQ,iBACjC,AAAI,YACF,YAAW,KAAK,cAAc,QAAQ,EACtC,WAAW,eAAe,CACxB,gBAAiB,IACZ,sBAEN,GAGH,KAAK,KAAK,aAAe,SAGnB,wBAAwB,gBAA2C,CACzE,GAAI,CAAC,gBACH,OAGF,KAAM,oBAAgD,CAAA,EACtD,SAAW,CAAC,OAAQ,QAAU,QAAO,QAAQ,eAAe,EAC1D,mBAAmB,0BAA0B,UAAY,MAE3D,MAAO,qBApCX,QAAA,gBAAA,8HA4CA,MAAa,YAAY,CAsHvB,YAAoB,KAAY,CAC9B,KAAK,aAAe,WAVR,IAAG,KAAY,CAC3B,MAAO,IAAI,cAAa,KAAK,YAAW,CAAE,GA9G9C,QAAA,aAAA,qHAIyB,aAAA,cAAgB,GAAI,cAAa,eAAe,EAKhD,aAAA,wBAA0B,GAAI,cAAa,yBAAyB,EAKpE,aAAA,mBAAqB,GAAI,cAAa,oBAAoB,EAK1D,aAAA,+BAAiC,GAAI,cAAa,gCAAgC,EAKlF,aAAA,uBAAyB,GAAI,cAAa,wBAAwB,EAKlE,aAAA,iBAAmB,GAAI,cAAa,kBAAkB,EAKtD,aAAA,YAAc,GAAI,cAAa,aAAa,EAK5C,aAAA,YAAc,GAAI,cAAa,aAAa,EAK5C,aAAA,cAAgB,GAAI,cAAa,eAAe,EAKhD,aAAA,kBAAoB,GAAI,cAAa,mBAAmB,EAKxD,aAAA,oBAAsB,GAAI,cAAa,qBAAqB,EAK5D,aAAA,oBAAsB,GAAI,cAAa,qBAAqB,EAK5D,aAAA,gBAAkB,GAAI,cAAa,iBAAiB,EAMpD,aAAA,6BAA+B,GAAI,cAAa,8BAA8B,EAK9E,aAAA,eAAiB,GAAI,cAAa,gBAAgB,EAKlD,aAAA,kBAAoB,GAAI,cAAa,mBAAmB,EAMxD,aAAA,mBAAqB,GAAI,cAAa,oBAAoB,EAK1D,aAAA,UAAY,GAAI,cAAa,WAAW,EAKxC,aAAA,aAAe,GAAI,cAAa,cAAc,EAK9C,aAAA,uBAAyB,GAAI,cAAa,wBAAwB,EAKlE,aAAA,aAAe,GAAI,cAAa,cAAc",
  "names": []
}
