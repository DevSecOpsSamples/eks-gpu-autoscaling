{
  "version": 3,
  "sources": ["stepfunctions.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Token } from '../../../core';\nimport { RequestContext } from '.';\nimport { IntegrationConfig, IntegrationOptions, PassthroughBehavior } from '../integration';\nimport { Method } from '../method';\nimport { Model } from '../model';\nimport { AwsIntegration } from './aws';\n/**\n * Options when configuring Step Functions synchronous integration with Rest API\n */\nexport interface StepFunctionsExecutionIntegrationOptions extends IntegrationOptions {\n\n  /**\n   * Which details of the incoming request must be passed onto the underlying state machine,\n   * such as, account id, user identity, request id, etc. The execution input will include a new key `requestContext`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"requestContext\": {\n   *       \"key\": \"value\"\n   *   }\n   * }\n   *\n   * @default - all parameters within request context will be set as false\n   */\n  readonly requestContext?: RequestContext;\n\n  /**\n   * Check if querystring is to be included inside the execution input. The execution input will include a new key `queryString`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"querystring\": {\n   *     \"key\": \"value\"\n   *   }\n   * }\n   *\n   * @default true\n   */\n  readonly querystring?: boolean;\n\n  /**\n   * Check if path is to be included inside the execution input. The execution input will include a new key `path`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"path\": {\n   *     \"resourceName\": \"resourceValue\"\n   *   }\n   * }\n   *\n   * @default true\n   */\n  readonly path?: boolean;\n\n  /**\n   * Check if header is to be included inside the execution input. The execution input will include a new key `headers`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"headers\": {\n   *      \"header1\": \"value\",\n   *      \"header2\": \"value\"\n   *   }\n   * }\n   * @default false\n   */\n  readonly headers?: boolean;\n\n  /**\n   * If the whole authorizer object, including custom context values should be in the execution input. The execution input will include a new key `authorizer`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"authorizer\": {\n   *     \"key\": \"value\"\n   *   }\n   * }\n   *\n   * @default false\n   */\n  readonly authorizer?: boolean;\n}\n\n/**\n * Options to integrate with various StepFunction API\n */\nexport class StepFunctionsIntegration {\n  /**\n   * Integrates a Synchronous Express State Machine from AWS Step Functions to an API Gateway method.\n   *\n   * @example\n   *\n   *    const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n   *       stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n   *       definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   *    });\n   *\n   *    const api = new apigateway.RestApi(this, 'Api', {\n   *       restApiName: 'MyApi',\n   *    });\n   *    api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n   */\n  public static startExecution(stateMachine: sfn.IStateMachine, options?: StepFunctionsExecutionIntegrationOptions): AwsIntegration {\n    return new StepFunctionsExecutionIntegration(stateMachine, options);\n  }\n}\n\nclass StepFunctionsExecutionIntegration extends AwsIntegration {\n  private readonly stateMachine: sfn.IStateMachine;\n  constructor(stateMachine: sfn.IStateMachine, options: StepFunctionsExecutionIntegrationOptions = {}) {\n    super({\n      service: 'states',\n      action: 'StartSyncExecution',\n      options: {\n        credentialsRole: options.credentialsRole,\n        integrationResponses: integrationResponse(),\n        passthroughBehavior: PassthroughBehavior.NEVER,\n        requestTemplates: requestTemplates(stateMachine, options),\n        ...options,\n      },\n    });\n\n    this.stateMachine = stateMachine;\n  }\n\n  public bind(method: Method): IntegrationConfig {\n    const bindResult = super.bind(method);\n\n    const credentialsRole = bindResult.options?.credentialsRole ?? new iam.Role(method, 'StartSyncExecutionRole', {\n      assumedBy: new iam.ServicePrincipal('apigateway.amazonaws.com'),\n    });\n    this.stateMachine.grantStartSyncExecution(credentialsRole);\n\n    let stateMachineName;\n\n    if (this.stateMachine instanceof sfn.StateMachine) {\n      const stateMachineType = (this.stateMachine as sfn.StateMachine).stateMachineType;\n      if (stateMachineType !== sfn.StateMachineType.EXPRESS) {\n        throw new Error('State Machine must be of type \"EXPRESS\". Please use StateMachineType.EXPRESS as the stateMachineType');\n      }\n\n      //if not imported, extract the name from the CFN layer to reach the\n      //literal value if it is given (rather than a token)\n      stateMachineName = (this.stateMachine.node.defaultChild as sfn.CfnStateMachine).stateMachineName;\n    } else {\n      //imported state machine\n      stateMachineName = `StateMachine-${this.stateMachine.stack.node.addr}`;\n    }\n\n    let deploymentToken;\n\n    if (stateMachineName !== undefined && !Token.isUnresolved(stateMachineName)) {\n      deploymentToken = JSON.stringify({ stateMachineName });\n    }\n\n    for (const methodResponse of METHOD_RESPONSES) {\n      method.addMethodResponse(methodResponse);\n    }\n\n    return {\n      ...bindResult,\n      options: {\n        ...bindResult.options,\n        credentialsRole,\n      },\n      deploymentToken,\n    };\n  }\n}\n\n/**\n * Defines the integration response that passes the result on success,\n * or the error on failure, from the synchronous execution to the caller.\n *\n * @returns integrationResponse mapping\n */\nfunction integrationResponse() {\n  const errorResponse = [\n    {\n      /**\n       * Specifies the regular expression (regex) pattern used to choose\n       * an integration response based on the response from the back end.\n       * In this case it will match all '4XX' HTTP Errors\n       */\n      selectionPattern: '4\\\\d{2}',\n      statusCode: '400',\n      responseTemplates: {\n        'application/json': `{\n            \"error\": \"Bad request!\"\n          }`,\n      },\n    },\n    {\n      /**\n       * Match all '5XX' HTTP Errors\n       */\n      selectionPattern: '5\\\\d{2}',\n      statusCode: '500',\n      responseTemplates: {\n        'application/json': '\"error\": $input.path(\\'$.error\\')',\n      },\n    },\n  ];\n\n  const integResponse = [\n    {\n      statusCode: '200',\n      responseTemplates: {\n        /* eslint-disable */\n        'application/json': [\n          '#set($inputRoot = $input.path(\\'$\\'))',\n          '#if($input.path(\\'$.status\\').toString().equals(\"FAILED\"))',\n            '#set($context.responseOverride.status = 500)',\n            '{',\n              '\"error\": \"$input.path(\\'$.error\\')\",',\n              '\"cause\": \"$input.path(\\'$.cause\\')\"',\n            '}',\n          '#else',\n            '$input.path(\\'$.output\\')',\n          '#end',\n        /* eslint-enable */\n        ].join('\\n'),\n      },\n    },\n    ...errorResponse,\n  ];\n\n  return integResponse;\n}\n\n/**\n * Defines the request template that will be used for the integration\n * @param stateMachine\n * @param options\n * @returns requestTemplate\n */\nfunction requestTemplates(stateMachine: sfn.IStateMachine, options: StepFunctionsExecutionIntegrationOptions) {\n  const templateStr = templateString(stateMachine, options);\n\n  const requestTemplate: { [contentType:string] : string } =\n    {\n      'application/json': templateStr,\n    };\n\n  return requestTemplate;\n}\n\n/**\n * Reads the VTL template and returns the template string to be used\n * for the request template.\n *\n * @param stateMachine\n * @param includeRequestContext\n * @param options\n * @reutrns templateString\n */\nfunction templateString(\n  stateMachine: sfn.IStateMachine,\n  options: StepFunctionsExecutionIntegrationOptions): string {\n  let templateStr: string;\n\n  let requestContextStr = '';\n\n  const includeHeader = options.headers?? false;\n  const includeQueryString = options.querystring?? true;\n  const includePath = options.path?? true;\n  const includeAuthorizer = options.authorizer ?? false;\n\n  if (options.requestContext && Object.keys(options.requestContext).length > 0) {\n    requestContextStr = requestContext(options.requestContext);\n  }\n\n  templateStr = fs.readFileSync(path.join(__dirname, 'stepfunctions.vtl'), { encoding: 'utf-8' });\n  templateStr = templateStr.replace('%STATEMACHINE%', stateMachine.stateMachineArn);\n  templateStr = templateStr.replace('%INCLUDE_HEADERS%', String(includeHeader));\n  templateStr = templateStr.replace('%INCLUDE_QUERYSTRING%', String(includeQueryString));\n  templateStr = templateStr.replace('%INCLUDE_PATH%', String(includePath));\n  templateStr = templateStr.replace('%INCLUDE_AUTHORIZER%', String(includeAuthorizer));\n  templateStr = templateStr.replace('%REQUESTCONTEXT%', requestContextStr);\n\n  return templateStr;\n}\n\nfunction requestContext(requestContextObj: RequestContext | undefined): string {\n  const context = {\n    accountId: requestContextObj?.accountId? '$context.identity.accountId': undefined,\n    apiId: requestContextObj?.apiId? '$context.apiId': undefined,\n    apiKey: requestContextObj?.apiKey? '$context.identity.apiKey': undefined,\n    authorizerPrincipalId: requestContextObj?.authorizerPrincipalId? '$context.authorizer.principalId': undefined,\n    caller: requestContextObj?.caller? '$context.identity.caller': undefined,\n    cognitoAuthenticationProvider: requestContextObj?.cognitoAuthenticationProvider? '$context.identity.cognitoAuthenticationProvider': undefined,\n    cognitoAuthenticationType: requestContextObj?.cognitoAuthenticationType? '$context.identity.cognitoAuthenticationType': undefined,\n    cognitoIdentityId: requestContextObj?.cognitoIdentityId? '$context.identity.cognitoIdentityId': undefined,\n    cognitoIdentityPoolId: requestContextObj?.cognitoIdentityPoolId? '$context.identity.cognitoIdentityPoolId': undefined,\n    httpMethod: requestContextObj?.httpMethod? '$context.httpMethod': undefined,\n    stage: requestContextObj?.stage? '$context.stage': undefined,\n    sourceIp: requestContextObj?.sourceIp? '$context.identity.sourceIp': undefined,\n    user: requestContextObj?.user? '$context.identity.user': undefined,\n    userAgent: requestContextObj?.userAgent? '$context.identity.userAgent': undefined,\n    userArn: requestContextObj?.userArn? '$context.identity.userArn': undefined,\n    requestId: requestContextObj?.requestId? '$context.requestId': undefined,\n    resourceId: requestContextObj?.resourceId? '$context.resourceId': undefined,\n    resourcePath: requestContextObj?.resourcePath? '$context.resourcePath': undefined,\n  };\n\n  const contextAsString = JSON.stringify(context);\n\n  // The VTL Template conflicts with double-quotes (\") for strings.\n  // Before sending to the template, we replace double-quotes (\") with @@ and replace it back inside the .vtl file\n  const doublequotes = '\"';\n  const replaceWith = '@@';\n  return contextAsString.split(doublequotes).join(replaceWith);\n}\n\n/**\n * Method response model for each HTTP code response\n */\nconst METHOD_RESPONSES = [\n  {\n    statusCode: '200',\n    responseModels: {\n      'application/json': Model.EMPTY_MODEL,\n    },\n  },\n  {\n    statusCode: '400',\n    responseModels: {\n      'application/json': Model.ERROR_MODEL,\n    },\n  },\n  {\n    statusCode: '500',\n    responseModels: {\n      'application/json': Model.ERROR_MODEL,\n    },\n  },\n];\n"],
  "mappings": "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",
  "names": []
}
