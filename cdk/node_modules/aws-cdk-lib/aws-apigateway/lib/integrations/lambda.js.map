{
  "version": 3,
  "sources": ["lambda.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as lambda from '../../../aws-lambda';\nimport { Lazy, Names, Token } from '../../../core';\nimport { IntegrationConfig, IntegrationOptions } from '../integration';\nimport { Method } from '../method';\nimport { AwsIntegration } from './aws';\n\nexport interface LambdaIntegrationOptions extends IntegrationOptions {\n  /**\n   * Use proxy integration or normal (request/response mapping) integration.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-output-format\n   *\n   * @default true\n   */\n  readonly proxy?: boolean;\n\n  /**\n   * Allow invoking method from AWS Console UI (for testing purposes).\n   *\n   * This will add another permission to the AWS Lambda resource policy which\n   * will allow the `test-invoke-stage` stage to invoke this handler. If this\n   * is set to `false`, the function will only be usable from the deployment\n   * endpoint.\n   *\n   * @default true\n   */\n  readonly allowTestInvoke?: boolean;\n}\n\n/**\n * Integrates an AWS Lambda function to an API Gateway method.\n *\n * @example\n *\n *    declare const resource: apigateway.Resource;\n *    declare const handler: lambda.Function;\n *    resource.addMethod('GET', new apigateway.LambdaIntegration(handler));\n *\n */\nexport class LambdaIntegration extends AwsIntegration {\n  private readonly handler: lambda.IFunction;\n  private readonly enableTest: boolean;\n\n  constructor(handler: lambda.IFunction, options: LambdaIntegrationOptions = { }) {\n    const proxy = options.proxy ?? true;\n\n    super({\n      proxy,\n      service: 'lambda',\n      path: `2015-03-31/functions/${handler.functionArn}/invocations`,\n      options,\n    });\n\n    this.handler = handler;\n    this.enableTest = options.allowTestInvoke ?? true;\n  }\n\n  public bind(method: Method): IntegrationConfig {\n    const bindResult = super.bind(method);\n    const principal = new iam.ServicePrincipal('apigateway.amazonaws.com');\n\n    const desc = `${Names.nodeUniqueId(method.api.node)}.${method.httpMethod}.${method.resource.path.replace(/\\//g, '.')}`;\n\n    this.handler.addPermission(`ApiPermission.${desc}`, {\n      principal,\n      scope: method,\n      sourceArn: Lazy.string({ produce: () => method.methodArn }),\n    });\n\n    // add permission to invoke from the console\n    if (this.enableTest) {\n      this.handler.addPermission(`ApiPermission.Test.${desc}`, {\n        principal,\n        scope: method,\n        sourceArn: method.testMethodArn,\n      });\n    }\n\n    let functionName;\n\n    if (this.handler instanceof lambda.Function) {\n      // if not imported, extract the name from the CFN layer to reach\n      // the literal value if it is given (rather than a token)\n      functionName = (this.handler.node.defaultChild as lambda.CfnFunction).functionName;\n    } else {\n      // imported, just take the function name.\n      functionName = this.handler.functionName;\n    }\n\n    let deploymentToken;\n    if (!Token.isUnresolved(functionName)) {\n      deploymentToken = JSON.stringify({ functionName });\n    }\n    return {\n      ...bindResult,\n      deploymentToken,\n    };\n  }\n}\n"],
  "mappings": "2NAAA,IAAA,QAAA,kBAAA,EACA,OAAA,QAAA,qBAAA,EACA,OAAA,QAAA,eAAA,EAGA,MAAA,QAAA,OAAA,EAkCA,MAAa,yBAA0B,OAAA,cAAc,CAInD,YAAY,QAA2B,QAAoC,CAAA,EAAG,kKAC5E,KAAM,OAAK,IAAG,QAAQ,SAAK,MAAA,KAAA,OAAA,GAAI,GAE/B,MAAM,CACJ,MACA,QAAS,SACT,KAAM,wBAAwB,QAAQ,0BACtC,QACD,EAED,KAAK,QAAU,QACf,KAAK,WAAU,IAAG,QAAQ,mBAAe,MAAA,KAAA,OAAA,GAAI,GAGxC,KAAK,OAAc,mEACxB,KAAM,YAAa,MAAM,KAAK,MAAM,EAC9B,UAAY,GAAI,KAAI,iBAAiB,0BAA0B,EAE/D,KAAO,GAAG,OAAA,MAAM,aAAa,OAAO,IAAI,IAAI,KAAK,OAAO,cAAc,OAAO,SAAS,KAAK,QAAQ,MAAO,GAAG,IAEnH,KAAK,QAAQ,cAAc,iBAAiB,OAAQ,CAClD,UACA,MAAO,OACP,UAAW,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,OAAO,SAAS,CAAE,EAC3D,EAGG,KAAK,YACP,KAAK,QAAQ,cAAc,sBAAsB,OAAQ,CACvD,UACA,MAAO,OACP,UAAW,OAAO,cACnB,EAGH,GAAI,cAEJ,AAAI,KAAK,kBAAmB,QAAO,SAGjC,aAAgB,KAAK,QAAQ,KAAK,aAAoC,aAGtE,aAAe,KAAK,QAAQ,aAG9B,GAAI,iBACJ,MAAK,QAAA,MAAM,aAAa,YAAY,GAClC,iBAAkB,KAAK,UAAU,CAAE,YAAY,CAAE,GAE5C,IACF,WACH,kBAxDN,QAAA,kBAAA",
  "names": []
}
