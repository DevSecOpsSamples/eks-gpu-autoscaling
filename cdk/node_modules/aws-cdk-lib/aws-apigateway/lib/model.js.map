{
  "version": 3,
  "sources": ["model.ts"],
  "sourcesContent": ["import { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnModel, CfnModelProps } from './apigateway.generated';\nimport * as jsonSchema from './json-schema';\nimport { IRestApi, RestApi } from './restapi';\nimport * as util from './util';\n\nexport interface IModel {\n  /**\n   * Returns the model name, such as 'myModel'\n   *\n   * @attribute\n   */\n  readonly modelId: string;\n}\n\n/**\n * Represents a reference to a REST API's Empty model, which is available\n * as part of the model collection by default. This can be used for mapping\n * JSON responses from an integration to what is returned to a client,\n * where strong typing is not required. In the absence of any defined\n * model, the Empty model will be used to return the response payload\n * unmapped.\n *\n * Definition\n * {\n *   \"$schema\" : \"http://json-schema.org/draft-04/schema#\",\n *   \"title\" : \"Empty Schema\",\n *   \"type\" : \"object\"\n * }\n *\n * @see https://docs.amazonaws.cn/en_us/apigateway/latest/developerguide/models-mappings.html#models-mappings-models\n * @deprecated You should use Model.EMPTY_MODEL\n */\nexport class EmptyModel implements IModel {\n  public readonly modelId = 'Empty';\n}\n\n/**\n * Represents a reference to a REST API's Error model, which is available\n * as part of the model collection by default. This can be used for mapping\n * error JSON responses from an integration to a client, where a simple\n * generic message field is sufficient to map and return an error payload.\n *\n * Definition\n * {\n *   \"$schema\" : \"http://json-schema.org/draft-04/schema#\",\n *   \"title\" : \"Error Schema\",\n *   \"type\" : \"object\",\n *   \"properties\" : {\n *     \"message\" : { \"type\" : \"string\" }\n *   }\n * }\n * @deprecated You should use Model.ERROR_MODEL\n */\nexport class ErrorModel implements IModel {\n  public readonly modelId = 'Error';\n}\n\nexport interface ModelOptions {\n  /**\n   * The content type for the model. You can also force a\n   * content type in the request or response model mapping.\n   *\n   * @default 'application/json'\n   */\n  readonly contentType?: string;\n\n  /**\n   * A description that identifies this model.\n   * @default None\n   */\n  readonly description?: string;\n\n  /**\n   * A name for the model.\n   *\n   * Important\n   *  If you specify a name, you cannot perform updates that\n   *  require replacement of this resource. You can perform\n   *  updates that require no or some interruption. If you\n   *  must replace the resource, specify a new name.\n   *\n   * @default <auto> If you don't specify a name,\n   *  AWS CloudFormation generates a unique physical ID and\n   *  uses that ID for the model name. For more information,\n   *  see Name Type.\n   */\n  readonly modelName?: string;\n\n  /**\n   * The schema to use to transform data to one or more output formats.\n   * Specify null ({}) if you don't want to specify a schema.\n   */\n  readonly schema: jsonSchema.JsonSchema;\n}\n\nexport interface ModelProps extends ModelOptions {\n  /**\n   * The rest API that this model is part of.\n   *\n   * The reason we need the RestApi object itself and not just the ID is because the model\n   * is being tracked by the top-level RestApi object for the purpose of calculating it's\n   * hash to determine the ID of the deployment. This allows us to automatically update\n   * the deployment when the model of the REST API changes.\n   */\n  readonly restApi: IRestApi;\n}\n\nexport class Model extends Resource implements IModel {\n  /**\n   * Represents a reference to a REST API's Error model, which is available\n   * as part of the model collection by default. This can be used for mapping\n   * error JSON responses from an integration to a client, where a simple\n   * generic message field is sufficient to map and return an error payload.\n   *\n   * Definition\n   * {\n   *   \"$schema\" : \"http://json-schema.org/draft-04/schema#\",\n   *   \"title\" : \"Error Schema\",\n   *   \"type\" : \"object\",\n   *   \"properties\" : {\n   *     \"message\" : { \"type\" : \"string\" }\n   *   }\n   * }\n   */\n  public static readonly ERROR_MODEL: IModel = new ErrorModel();\n\n  /**\n   * Represents a reference to a REST API's Empty model, which is available\n   * as part of the model collection by default. This can be used for mapping\n   * JSON responses from an integration to what is returned to a client,\n   * where strong typing is not required. In the absence of any defined\n   * model, the Empty model will be used to return the response payload\n   * unmapped.\n   *\n   * Definition\n   * {\n   *   \"$schema\" : \"http://json-schema.org/draft-04/schema#\",\n   *   \"title\" : \"Empty Schema\",\n   *   \"type\" : \"object\"\n   * }\n   *\n   * @see https://docs.amazonaws.cn/en_us/apigateway/latest/developerguide/models-mappings.html#models-mappings-models\n   */\n  public static readonly EMPTY_MODEL: IModel = new EmptyModel();\n\n  public static fromModelName(scope: Construct, id: string, modelName: string): IModel {\n    class Import extends Resource implements IModel {\n      public readonly modelId = modelName;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * Returns the model name, such as 'myModel'\n   *\n   * @attribute\n   */\n  public readonly modelId: string;\n\n  constructor(scope: Construct, id: string, props: ModelProps) {\n    super(scope, id, {\n      physicalName: props.modelName,\n    });\n\n    const modelProps: CfnModelProps = {\n      name: this.physicalName,\n      restApiId: props.restApi.restApiId,\n      contentType: props.contentType ?? 'application/json',\n      description: props.description,\n      schema: util.JsonSchemaMapper.toCfnJsonSchema(props.schema),\n    };\n\n    const resource = new CfnModel(this, 'Resource', modelProps);\n\n    this.modelId = this.getResourceNameAttribute(resource.ref);\n\n    const deployment = (props.restApi instanceof RestApi) ? props.restApi.latestDeployment : undefined;\n    if (deployment) {\n      deployment.node.addDependency(resource);\n      deployment.addToLogicalId({ model: modelProps });\n    }\n  }\n}\n"],
  "mappings": "wPAAA,OAAA,QAAA,YAAA,EAEA,uBAAA,QAAA,wBAAA,EAEA,UAAA,QAAA,WAAA,EACA,KAAA,QAAA,QAAA,EA6BA,MAAa,UAAU,CAAvB,aAAA,CACkB,KAAA,QAAU,SAD5B,QAAA,WAAA,+GAqBA,MAAa,UAAU,CAAvB,aAAA,CACkB,KAAA,QAAU,SAD5B,QAAA,WAAA,+GAsDA,MAAa,aAAc,QAAA,QAAQ,CAqDjC,YAAY,MAAkB,GAAY,MAAiB,QACzD,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,UACrB,uEAED,KAAM,YAA4B,CAChC,KAAM,KAAK,aACX,UAAW,MAAM,QAAQ,UACzB,YAAW,IAAE,MAAM,eAAW,MAAA,KAAA,OAAA,GAAI,mBAClC,YAAa,MAAM,YACnB,OAAQ,KAAK,iBAAiB,gBAAgB,MAAM,MAAM,GAGtD,SAAW,GAAI,wBAAA,SAAS,KAAM,WAAY,UAAU,EAE1D,KAAK,QAAU,KAAK,yBAAyB,SAAS,GAAG,EAEzD,KAAM,YAAc,MAAM,kBAAmB,WAAA,QAAW,MAAM,QAAQ,iBAAmB,OACzF,AAAI,YACF,YAAW,KAAK,cAAc,QAAQ,EACtC,WAAW,eAAe,CAAE,MAAO,UAAU,CAAE,SAnCrC,eAAc,MAAkB,GAAY,UAAiB,CACzE,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,QAAU,SAC5B,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,GA3C/B,QAAA,MAAA,gGAiByB,MAAA,YAAsB,GAAI,YAmB1B,MAAA,YAAsB,GAAI",
  "names": []
}
