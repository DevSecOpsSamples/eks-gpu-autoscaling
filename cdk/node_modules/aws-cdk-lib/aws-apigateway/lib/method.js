"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.AuthorizationType=exports.Method=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),core_1=require("../../core"),apigateway_generated_1=require("./apigateway.generated"),authorizer_1=require("./authorizer"),mock_1=require("./integrations/mock"),restapi_1=require("./restapi"),util_1=require("./util");class Method extends core_1.Resource{constructor(scope,id,props){var _b,_c,_d,_e;super(scope,id);jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_MethodProps(props),this.resource=props.resource,this.api=props.resource.api,this.httpMethod=props.httpMethod.toUpperCase(),util_1.validateHttpMethod(this.httpMethod);const options=props.options||{},defaultMethodOptions=props.resource.defaultMethodOptions||{},authorizer=options.authorizer||defaultMethodOptions.authorizer,authorizerId=authorizer==null?void 0:authorizer.authorizerId,authorizationTypeOption=options.authorizationType||defaultMethodOptions.authorizationType,authorizationType=(authorizer==null?void 0:authorizer.authorizationType)||authorizationTypeOption||AuthorizationType.NONE;if((authorizer==null?void 0:authorizer.authorizationType)&&authorizationTypeOption&&(authorizer==null?void 0:authorizer.authorizationType)!==authorizationTypeOption)throw new Error(`${this.resource}/${this.httpMethod} - Authorization type is set to ${authorizationTypeOption} which is different from what is required by the authorizer [${authorizer.authorizationType}]`);authorizer_1.Authorizer.isAuthorizer(authorizer)&&authorizer._attachToApi(this.api),this.methodResponses=(_b=options.methodResponses)!==null&&_b!==void 0?_b:[];const bindResult=((_d=(_c=props.integration)!==null&&_c!==void 0?_c:this.resource.defaultIntegration)!==null&&_d!==void 0?_d:new mock_1.MockIntegration).bind(this),methodProps={resourceId:props.resource.resourceId,restApiId:this.api.restApiId,httpMethod:this.httpMethod,operationName:options.operationName||defaultMethodOptions.operationName,apiKeyRequired:options.apiKeyRequired||defaultMethodOptions.apiKeyRequired,authorizationType,authorizerId,requestParameters:options.requestParameters||defaultMethodOptions.requestParameters,integration:this.renderIntegration(bindResult),methodResponses:core_1.Lazy.any({produce:()=>this.renderMethodResponses(this.methodResponses)},{omitEmptyArray:!0}),requestModels:this.renderRequestModels(options.requestModels),requestValidatorId:this.requestValidatorId(options),authorizationScopes:(_e=options.authorizationScopes)!==null&&_e!==void 0?_e:defaultMethodOptions.authorizationScopes},resource=new apigateway_generated_1.CfnMethod(this,"Resource",methodProps);this.methodId=resource.ref,restapi_1.RestApiBase._isRestApiBase(props.resource.api)&&props.resource.api._attachMethod(this);const deployment=props.resource.api.latestDeployment;deployment&&(deployment.node.addDependency(resource),deployment.addToLogicalId({method:{...methodProps,integrationToken:bindResult==null?void 0:bindResult.deploymentToken}}))}get restApi(){return this.resource.restApi}get methodArn(){var _b;const stage=(_b=this.api.deploymentStage)===null||_b===void 0?void 0:_b.stageName;return this.api.arnForExecuteApi(this.httpMethod,pathForArn(this.resource.path),stage)}get testMethodArn(){return this.api.arnForExecuteApi(this.httpMethod,pathForArn(this.resource.path),"test-invoke-stage")}addMethodResponse(methodResponse){jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_MethodResponse(methodResponse),this.methodResponses.push(methodResponse)}renderIntegration(bindResult){var _b,_c;const options=(_b=bindResult.options)!==null&&_b!==void 0?_b:{};let credentials;return options.credentialsRole?credentials=options.credentialsRole.roleArn:options.credentialsPassthrough&&(credentials=core_1.Stack.of(this).formatArn({service:"iam",region:"",account:"*",resource:"user",arnFormat:core_1.ArnFormat.SLASH_RESOURCE_NAME,resourceName:"*"})),{type:bindResult.type,uri:bindResult.uri,cacheKeyParameters:options.cacheKeyParameters,cacheNamespace:options.cacheNamespace,contentHandling:options.contentHandling,integrationHttpMethod:bindResult.integrationHttpMethod,requestParameters:options.requestParameters,requestTemplates:options.requestTemplates,passthroughBehavior:options.passthroughBehavior,integrationResponses:options.integrationResponses,connectionType:options.connectionType,connectionId:options.vpcLink?options.vpcLink.vpcLinkId:void 0,credentials,timeoutInMillis:(_c=options.timeout)===null||_c===void 0?void 0:_c.toMilliseconds()}}renderMethodResponses(methodResponses){if(!!methodResponses)return methodResponses.map(mr=>{let responseModels;if(mr.responseModels){responseModels={};for(const contentType in mr.responseModels)mr.responseModels.hasOwnProperty(contentType)&&(responseModels[contentType]=mr.responseModels[contentType].modelId)}return{statusCode:mr.statusCode,responseParameters:mr.responseParameters,responseModels}})}renderRequestModels(requestModels){if(!requestModels)return;const models={};for(const contentType in requestModels)requestModels.hasOwnProperty(contentType)&&(models[contentType]=requestModels[contentType].modelId);return models}requestValidatorId(options){var _b;if(options.requestValidator&&options.requestValidatorOptions)throw new Error("Only one of 'requestValidator' or 'requestValidatorOptions' must be specified.");return options.requestValidatorOptions?this.api.addRequestValidator("validator",options.requestValidatorOptions).requestValidatorId:(_b=options.requestValidator)===null||_b===void 0?void 0:_b.requestValidatorId}}exports.Method=Method,_a=JSII_RTTI_SYMBOL_1,Method[_a]={fqn:"aws-cdk-lib.aws_apigateway.Method",version:"2.20.0"};var AuthorizationType;(function(AuthorizationType2){AuthorizationType2.NONE="NONE",AuthorizationType2.IAM="AWS_IAM",AuthorizationType2.CUSTOM="CUSTOM",AuthorizationType2.COGNITO="COGNITO_USER_POOLS"})(AuthorizationType=exports.AuthorizationType||(exports.AuthorizationType={}));function pathForArn(path){return path.replace(/\{[^\}]*\}/g,"*")}
//# sourceMappingURL=method.js.map
