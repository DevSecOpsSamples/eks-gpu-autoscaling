{
  "version": 3,
  "sources": ["stepfunctions-api.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as sfn from '../../aws-stepfunctions';\nimport { Construct } from 'constructs';\nimport { RestApi, RestApiProps } from '.';\nimport { RequestContext } from './integrations';\nimport { StepFunctionsIntegration } from './integrations/stepfunctions';\n\n/**\n * Properties for StepFunctionsRestApi\n *\n */\nexport interface StepFunctionsRestApiProps extends RestApiProps {\n  /**\n   * The default State Machine that handles all requests from this API.\n   *\n   * This stateMachine will be used as a the default integration for all methods in\n   * this API, unless specified otherwise in `addMethod`.\n   */\n  readonly stateMachine: sfn.IStateMachine;\n\n  /**\n   * Which details of the incoming request must be passed onto the underlying state machine,\n   * such as, account id, user identity, request id, etc. The execution input will include a new key `requestContext`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"requestContext\": {\n   *       \"key\": \"value\"\n   *   }\n   * }\n   *\n   * @default - all parameters within request context will be set as false\n   */\n  readonly requestContext?: RequestContext;\n\n  /**\n   * Check if querystring is to be included inside the execution input. The execution input will include a new key `queryString`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"querystring\": {\n   *     \"key\": \"value\"\n   *   }\n   * }\n   *\n   * @default true\n   */\n  readonly querystring?: boolean;\n\n  /**\n   * Check if path is to be included inside the execution input. The execution input will include a new key `path`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"path\": {\n   *     \"resourceName\": \"resourceValue\"\n   *   }\n   * }\n   *\n   * @default true\n   */\n  readonly path?: boolean;\n\n  /**\n   * Check if header is to be included inside the execution input. The execution input will include a new key `headers`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"headers\": {\n   *      \"header1\": \"value\",\n   *      \"header2\": \"value\"\n   *   }\n   * }\n   * @default false\n   */\n  readonly headers?: boolean;\n\n  /**\n   * If the whole authorizer object, including custom context values should be in the execution input. The execution input will include a new key `authorizer`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"authorizer\": {\n   *     \"key\": \"value\"\n   *   }\n   * }\n   *\n   * @default false\n   */\n  readonly authorizer?: boolean;\n\n  /**\n   * An IAM role that API Gateway will assume to start the execution of the\n   * state machine.\n   *\n   * @default - a new role is created\n   */\n  readonly role?: iam.IRole;\n}\n\n/**\n * Defines an API Gateway REST API with a Synchrounous Express State Machine as a proxy integration.\n */\nexport class StepFunctionsRestApi extends RestApi {\n  constructor(scope: Construct, id: string, props: StepFunctionsRestApiProps) {\n    if (props.defaultIntegration) {\n      throw new Error('Cannot specify \"defaultIntegration\" since Step Functions integration is automatically defined');\n    }\n\n    if ((props.stateMachine.node.defaultChild as sfn.CfnStateMachine).stateMachineType !== sfn.StateMachineType.EXPRESS) {\n      throw new Error('State Machine must be of type \"EXPRESS\". Please use StateMachineType.EXPRESS as the stateMachineType');\n    }\n\n    const stepfunctionsIntegration = StepFunctionsIntegration.startExecution(props.stateMachine, {\n      credentialsRole: props.role,\n      requestContext: props.requestContext,\n      path: props.path?? true,\n      querystring: props.querystring?? true,\n      headers: props.headers,\n      authorizer: props.authorizer,\n    });\n\n    super(scope, id, props);\n\n    this.root.addMethod('ANY', stepfunctionsIntegration);\n  }\n}\n"],
  "mappings": "2NACA,IAAA,QAAA,yBAAA,EAEA,GAAA,QAAA,GAAA,EAEA,gBAAA,QAAA,8BAAA,EAkGA,MAAa,4BAA6B,IAAA,OAAO,CAC/C,YAAY,MAAkB,GAAY,MAAgC,WACxE,uFAAI,MAAM,mBACR,KAAM,IAAI,OAAM,+FAA+F,EAGjH,GAAK,MAAM,aAAa,KAAK,aAAqC,mBAAqB,IAAI,iBAAiB,QAC1G,KAAM,IAAI,OAAM,sGAAsG,EAGxH,KAAM,0BAA2B,gBAAA,yBAAyB,eAAe,MAAM,aAAc,CAC3F,gBAAiB,MAAM,KACvB,eAAgB,MAAM,eACtB,KAAI,IAAE,MAAM,QAAI,MAAA,KAAA,OAAA,GAAG,GACnB,YAAW,IAAE,MAAM,eAAW,MAAA,KAAA,OAAA,GAAG,GACjC,QAAS,MAAM,QACf,WAAY,MAAM,WACnB,EAED,MAAM,MAAO,GAAI,KAAK,EAEtB,KAAK,KAAK,UAAU,MAAO,wBAAwB,GArBvD,QAAA,qBAAA",
  "names": []
}
