{
  "version": 3,
  "sources": ["resource.ts"],
  "sourcesContent": ["import { IResource as IResourceBase, Resource as ResourceConstruct } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnResource, CfnResourceProps } from './apigateway.generated';\nimport { Cors, CorsOptions } from './cors';\nimport { Integration } from './integration';\nimport { MockIntegration } from './integrations';\nimport { Method, MethodOptions } from './method';\nimport { IRestApi, RestApi } from './restapi';\n\nexport interface IResource extends IResourceBase {\n  /**\n   * The parent of this resource or undefined for the root resource.\n   */\n  readonly parentResource?: IResource;\n\n  /**\n   * The rest API that this resource is part of.\n   *\n   * @deprecated - Throws an error if this Resource is not associated with an instance of `RestApi`. Use `api` instead.\n   */\n  readonly restApi: RestApi;\n\n  /**\n   * The rest API that this resource is part of.\n   *\n   * The reason we need the RestApi object itself and not just the ID is because the model\n   * is being tracked by the top-level RestApi object for the purpose of calculating it's\n   * hash to determine the ID of the deployment. This allows us to automatically update\n   * the deployment when the model of the REST API changes.\n   */\n  readonly api: IRestApi;\n\n  /**\n   * The ID of the resource.\n   * @attribute\n   */\n  readonly resourceId: string;\n\n  /**\n   * The full path of this resource.\n   */\n  readonly path: string;\n\n  /**\n   * An integration to use as a default for all methods created within this\n   * API unless an integration is specified.\n   */\n  readonly defaultIntegration?: Integration;\n\n  /**\n   * Method options to use as a default for all methods created within this\n   * API unless custom options are specified.\n   */\n  readonly defaultMethodOptions?: MethodOptions;\n\n  /**\n   * Default options for CORS preflight OPTIONS method.\n   */\n  readonly defaultCorsPreflightOptions?: CorsOptions;\n\n  /**\n   * Gets or create all resources leading up to the specified path.\n   *\n   * - Path may only start with \"/\" if this method is called on the root resource.\n   * - All resources are created using default options.\n   *\n   * @param path The relative path\n   * @returns a new or existing resource.\n   */\n  resourceForPath(path: string): Resource;\n\n  /**\n   * Defines a new child resource where this resource is the parent.\n   * @param pathPart The path part for the child resource\n   * @param options Resource options\n   * @returns A Resource object\n   */\n  addResource(pathPart: string, options?: ResourceOptions): Resource;\n\n  /**\n   * Retrieves a child resource by path part.\n   *\n   * @param pathPart The path part of the child resource\n   * @returns the child resource or undefined if not found\n   */\n  getResource(pathPart: string): IResource | undefined;\n\n  /**\n   * Adds a greedy proxy resource (\"{proxy+}\") and an ANY method to this route.\n   * @param options Default integration and method options.\n   */\n  addProxy(options?: ProxyResourceOptions): ProxyResource;\n\n  /**\n   * Defines a new method for this resource.\n   * @param httpMethod The HTTP method\n   * @param target The target backend integration for this method\n   * @param options Method options, such as authentication.\n   *\n   * @returns The newly created `Method` object.\n   */\n  addMethod(httpMethod: string, target?: Integration, options?: MethodOptions): Method;\n\n  /**\n   * Adds an OPTIONS method to this resource which responds to Cross-Origin\n   * Resource Sharing (CORS) preflight requests.\n   *\n   * Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional\n   * HTTP headers to tell browsers to give a web application running at one\n   * origin, access to selected resources from a different origin. A web\n   * application executes a cross-origin HTTP request when it requests a\n   * resource that has a different origin (domain, protocol, or port) from its\n   * own.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n   * @param options CORS options\n   * @returns a `Method` object\n   */\n  addCorsPreflight(options: CorsOptions): Method;\n}\n\nexport interface ResourceOptions {\n  /**\n   * An integration to use as a default for all methods created within this\n   * API unless an integration is specified.\n   *\n   * @default - Inherited from parent.\n   */\n  readonly defaultIntegration?: Integration;\n\n  /**\n   * Method options to use as a default for all methods created within this\n   * API unless custom options are specified.\n   *\n   * @default - Inherited from parent.\n   */\n  readonly defaultMethodOptions?: MethodOptions;\n\n  /**\n   * Adds a CORS preflight OPTIONS method to this resource and all child\n   * resources.\n   *\n   * You can add CORS at the resource-level using `addCorsPreflight`.\n   *\n   * @default - CORS is disabled\n   */\n  readonly defaultCorsPreflightOptions?: CorsOptions;\n}\n\nexport interface ResourceProps extends ResourceOptions {\n  /**\n   * The parent resource of this resource. You can either pass another\n   * `Resource` object or a `RestApi` object here.\n   */\n  readonly parent: IResource;\n\n  /**\n   * A path name for the resource.\n   */\n  readonly pathPart: string;\n}\n\nexport abstract class ResourceBase extends ResourceConstruct implements IResource {\n  public abstract readonly parentResource?: IResource;\n  /**\n   * @deprecated -  Throws an error if this Resource is not associated with an instance of `RestApi`. Use `api` instead.\n   */\n  public abstract readonly restApi: RestApi;\n  public abstract readonly api: IRestApi;\n  public abstract readonly resourceId: string;\n  public abstract readonly path: string;\n  public abstract readonly defaultIntegration?: Integration;\n  public abstract readonly defaultMethodOptions?: MethodOptions;\n  public abstract readonly defaultCorsPreflightOptions?: CorsOptions;\n\n  private readonly children: { [pathPart: string]: Resource } = { };\n\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n  }\n\n  public addResource(pathPart: string, options?: ResourceOptions): Resource {\n    return new Resource(this, pathPart, { parent: this, pathPart, ...options });\n  }\n\n  public addMethod(httpMethod: string, integration?: Integration, options?: MethodOptions): Method {\n    return new Method(this, httpMethod, { resource: this, httpMethod, integration, options });\n  }\n\n  public addProxy(options?: ProxyResourceOptions): ProxyResource {\n    return new ProxyResource(this, '{proxy+}', { parent: this, ...options });\n  }\n\n  public addCorsPreflight(options: CorsOptions) {\n    const headers: { [name: string]: string } = { };\n\n    //\n    // Access-Control-Allow-Headers\n\n    const allowHeaders = options.allowHeaders || Cors.DEFAULT_HEADERS;\n    headers['Access-Control-Allow-Headers'] = `'${allowHeaders.join(',')}'`;\n\n    //\n    // Access-Control-Allow-Origin\n\n    if (options.allowOrigins.length === 0) {\n      throw new Error('allowOrigins must contain at least one origin');\n    }\n\n    if (options.allowOrigins.includes('*') && options.allowOrigins.length > 1) {\n      throw new Error(`Invalid \"allowOrigins\" - cannot mix \"*\" with specific origins: ${options.allowOrigins.join(',')}`);\n    }\n\n    // we use the first origin here and if there are more origins in the list, we\n    // will match against them in the response velocity template\n    const initialOrigin = options.allowOrigins[0];\n    headers['Access-Control-Allow-Origin'] = `'${initialOrigin}'`;\n\n    // the \"Vary\" header is required if we allow a specific origin\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin#CORS_and_caching\n    if (initialOrigin !== '*') {\n      headers.Vary = '\\'Origin\\'';\n    }\n\n    //\n    // Access-Control-Allow-Methods\n\n    let allowMethods = options.allowMethods || Cors.ALL_METHODS;\n\n    if (allowMethods.includes('ANY')) {\n      if (allowMethods.length > 1) {\n        throw new Error(`ANY cannot be used with any other method. Received: ${allowMethods.join(',')}`);\n      }\n\n      allowMethods = Cors.ALL_METHODS;\n    }\n\n    headers['Access-Control-Allow-Methods'] = `'${allowMethods.join(',')}'`;\n\n    //\n    // Access-Control-Allow-Credentials\n\n    if (options.allowCredentials) {\n      headers['Access-Control-Allow-Credentials'] = '\\'true\\'';\n    }\n\n    //\n    // Access-Control-Max-Age\n\n    let maxAgeSeconds;\n\n    if (options.maxAge && options.disableCache) {\n      throw new Error('The options \"maxAge\" and \"disableCache\" are mutually exclusive');\n    }\n\n    if (options.maxAge) {\n      maxAgeSeconds = options.maxAge.toSeconds();\n    }\n\n    if (options.disableCache) {\n      maxAgeSeconds = -1;\n    }\n\n    if (maxAgeSeconds) {\n      headers['Access-Control-Max-Age'] = `'${maxAgeSeconds}'`;\n    }\n\n    //\n    // Access-Control-Expose-Headers\n    //\n\n    if (options.exposeHeaders) {\n      headers['Access-Control-Expose-Headers'] = `'${options.exposeHeaders.join(',')}'`;\n    }\n\n    //\n    // statusCode\n\n    const statusCode = options.statusCode ?? 204;\n\n    //\n    // prepare responseParams\n\n    const integrationResponseParams: { [p: string]: string } = { };\n    const methodResponseParams: { [p: string]: boolean } = { };\n\n    for (const [name, value] of Object.entries(headers)) {\n      const key = `method.response.header.${name}`;\n      integrationResponseParams[key] = value;\n      methodResponseParams[key] = true;\n    }\n\n    return this.addMethod('OPTIONS', new MockIntegration({\n      requestTemplates: { 'application/json': '{ statusCode: 200 }' },\n      integrationResponses: [\n        { statusCode: `${statusCode}`, responseParameters: integrationResponseParams, responseTemplates: renderResponseTemplate() },\n      ],\n    }), {\n      methodResponses: [\n        { statusCode: `${statusCode}`, responseParameters: methodResponseParams },\n      ],\n    });\n\n    // renders the response template to match all possible origins (if we have more than one)\n    function renderResponseTemplate() {\n      const origins = options.allowOrigins.slice(1);\n\n      if (origins.length === 0) {\n        return undefined;\n      }\n\n      const template = new Array<string>();\n\n      template.push('#set($origin = $input.params().header.get(\"Origin\"))');\n      template.push('#if($origin == \"\") #set($origin = $input.params().header.get(\"origin\")) #end');\n\n      const condition = origins.map(o => `$origin.matches(\"${o}\")`).join(' || ');\n\n      template.push(`#if(${condition})`);\n      template.push('  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)');\n      template.push('#end');\n\n      return {\n        'application/json': template.join('\\n'),\n      };\n    }\n  }\n\n  public getResource(pathPart: string): IResource | undefined {\n    return this.children[pathPart];\n  }\n\n  /**\n   * @internal\n   */\n  public _trackChild(pathPart: string, resource: Resource) {\n    this.children[pathPart] = resource;\n  }\n\n  public resourceForPath(path: string): Resource {\n    if (!path) {\n      return this;\n    }\n\n    if (path.startsWith('/')) {\n      if (this.path !== '/') {\n        throw new Error(`Path may start with \"/\" only for the resource, but we are at: ${this.path}`);\n      }\n\n      // trim trailing \"/\"\n      return this.resourceForPath(path.slice(1));\n    }\n\n    const parts = path.split('/');\n    const next = parts.shift();\n    if (!next || next === '') {\n      throw new Error('resourceForPath cannot be called with an empty path');\n    }\n\n    let resource = this.getResource(next);\n    if (!resource) {\n      resource = this.addResource(next);\n    }\n\n    return resource.resourceForPath(parts.join('/'));\n  }\n\n  /**\n   * @deprecated - Throws error in some use cases that have been enabled since this deprecation notice. Use `RestApi.urlForPath()` instead.\n   */\n  public get url(): string {\n    return this.restApi.urlForPath(this.path);\n  }\n}\n\n/**\n * Attributes that can be specified when importing a Resource\n */\nexport interface ResourceAttributes {\n  /**\n   * The ID of the resource.\n   */\n  readonly resourceId: string;\n\n  /**\n   * The rest API that this resource is part of.\n   */\n  readonly restApi: IRestApi;\n\n  /**\n   * The full path of this resource.\n   */\n  readonly path: string;\n}\n\nexport class Resource extends ResourceBase {\n  /**\n   * Import an existing resource\n   */\n  public static fromResourceAttributes(scope: Construct, id: string, attrs: ResourceAttributes): IResource {\n    class Import extends ResourceBase {\n      public readonly api = attrs.restApi;\n      public readonly resourceId = attrs.resourceId;\n      public readonly path = attrs.path;\n      public readonly defaultIntegration?: Integration = undefined;\n      public readonly defaultMethodOptions?: MethodOptions = undefined;\n      public readonly defaultCorsPreflightOptions?: CorsOptions = undefined;\n\n      public get parentResource(): IResource {\n        throw new Error('parentResource is not configured for imported resource.');\n      }\n\n      public get restApi(): RestApi {\n        throw new Error('restApi is not configured for imported resource.');\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly parentResource?: IResource;\n  public readonly api: IRestApi;\n  public readonly resourceId: string;\n  public readonly path: string;\n\n  public readonly defaultIntegration?: Integration;\n  public readonly defaultMethodOptions?: MethodOptions;\n  public readonly defaultCorsPreflightOptions?: CorsOptions;\n\n  constructor(scope: Construct, id: string, props: ResourceProps) {\n    super(scope, id);\n\n    validateResourcePathPart(props.pathPart);\n\n    this.parentResource = props.parent;\n\n    if (props.parent instanceof ResourceBase) {\n      props.parent._trackChild(props.pathPart, this);\n    }\n\n    const resourceProps: CfnResourceProps = {\n      restApiId: props.parent.api.restApiId,\n      parentId: props.parent.resourceId,\n      pathPart: props.pathPart,\n    };\n    const resource = new CfnResource(this, 'Resource', resourceProps);\n\n    this.resourceId = resource.ref;\n    this.api = props.parent.api;\n\n    // render resource path (special case for root)\n    this.path = props.parent.path;\n    if (!this.path.endsWith('/')) { this.path += '/'; }\n    this.path += props.pathPart;\n\n    const deployment = props.parent.api.latestDeployment;\n    if (deployment) {\n      deployment.node.addDependency(resource);\n      deployment.addToLogicalId({ resource: resourceProps });\n    }\n\n    // setup defaults based on properties and inherit from parent. method defaults\n    // are inherited per property, so children can override piecemeal.\n    this.defaultIntegration = props.defaultIntegration || props.parent.defaultIntegration;\n    this.defaultMethodOptions = {\n      ...props.parent.defaultMethodOptions,\n      ...props.defaultMethodOptions,\n    };\n    this.defaultCorsPreflightOptions = props.defaultCorsPreflightOptions || props.parent.defaultCorsPreflightOptions;\n\n    if (this.defaultCorsPreflightOptions) {\n      this.addCorsPreflight(this.defaultCorsPreflightOptions);\n    }\n  }\n\n  /**\n   * The RestApi associated with this Resource\n   * @deprecated - Throws an error if this Resource is not associated with an instance of `RestApi`. Use `api` instead.\n   */\n  public get restApi(): RestApi {\n    if (!this.parentResource) {\n      throw new Error('parentResource was unexpectedly not defined');\n    }\n    return this.parentResource.restApi;\n  }\n}\n\nexport interface ProxyResourceOptions extends ResourceOptions {\n  /**\n   * Adds an \"ANY\" method to this resource. If set to `false`, you will have to explicitly\n   * add methods to this resource after it's created.\n   *\n   * @default true\n   */\n  readonly anyMethod?: boolean;\n}\n\nexport interface ProxyResourceProps extends ProxyResourceOptions {\n  /**\n   * The parent resource of this resource. You can either pass another\n   * `Resource` object or a `RestApi` object here.\n   */\n  readonly parent: IResource;\n}\n\n/**\n * Defines a {proxy+} greedy resource and an ANY method on a route.\n * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html\n */\nexport class ProxyResource extends Resource {\n  /**\n   * If `props.anyMethod` is `true`, this will be the reference to the 'ANY'\n   * method associated with this proxy resource.\n   */\n  public readonly anyMethod?: Method;\n\n  constructor(scope: Construct, id: string, props: ProxyResourceProps) {\n    super(scope, id, {\n      parent: props.parent,\n      pathPart: '{proxy+}',\n      defaultIntegration: props.defaultIntegration,\n      defaultMethodOptions: props.defaultMethodOptions,\n    });\n\n    const anyMethod = props.anyMethod ?? true;\n    if (anyMethod) {\n      this.anyMethod = this.addMethod('ANY');\n    }\n  }\n\n  public addMethod(httpMethod: string, integration?: Integration, options?: MethodOptions): Method {\n    // In case this proxy is mounted under the root, also add this method to\n    // the root so that empty paths are proxied as well.\n    if (this.parentResource && this.parentResource.path === '/') {\n      // skip if the root resource already has this method defined\n      if (!(this.parentResource.node.tryFindChild(httpMethod) instanceof Method)) {\n        this.parentResource.addMethod(httpMethod, integration, options);\n      }\n    }\n    return super.addMethod(httpMethod, integration, options);\n  }\n}\n\nfunction validateResourcePathPart(part: string) {\n  // strip {} which indicate this is a parameter\n  if (part.startsWith('{') && part.endsWith('}')) {\n    part = part.slice(1, -1);\n\n    // proxy resources are allowed to end with a '+'\n    if (part.endsWith('+')) {\n      part = part.slice(0, -1);\n    }\n  }\n\n  if (!/^[a-zA-Z0-9\\.\\_\\-]+$/.test(part)) {\n    throw new Error(`Resource's path part only allow [a-zA-Z0-9._-], an optional trailing '+'\n      and curly braces at the beginning and the end: ${part}`);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
