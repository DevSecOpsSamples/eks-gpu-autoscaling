{
  "version": 3,
  "sources": ["api-definition.ts"],
  "sourcesContent": ["import * as s3 from '../../aws-s3';\nimport * as s3_assets from '../../aws-s3-assets';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport * as cxapi from '../../cx-api';\nimport { Construct, Node } from 'constructs';\nimport { CfnRestApi } from './apigateway.generated';\nimport { IRestApi } from './restapi';\n\n/**\n * Represents an OpenAPI definition asset.\n */\nexport abstract class ApiDefinition {\n  /**\n   * Creates an API definition from a specification file in an S3 bucket\n   */\n  public static fromBucket(bucket: s3.IBucket, key: string, objectVersion?: string): S3ApiDefinition {\n    return new S3ApiDefinition(bucket, key, objectVersion);\n  }\n\n  /**\n   * Create an API definition from an inline object. The inline object must follow the\n   * schema of OpenAPI 2.0 or OpenAPI 3.0\n   *\n   * @example\n   *\n   *   apigateway.ApiDefinition.fromInline({\n   *     openapi: '3.0.2',\n   *     paths: {\n   *       '/pets': {\n   *         get: {\n   *           'responses': {\n   *             200: {\n   *               content: {\n   *                 'application/json': {\n   *                   schema: {\n   *                     $ref: '#/components/schemas/Empty',\n   *                   },\n   *                 },\n   *               },\n   *             },\n   *           },\n   *           'x-amazon-apigateway-integration': {\n   *             responses: {\n   *               default: {\n   *                 statusCode: '200',\n   *               },\n   *             },\n   *             requestTemplates: {\n   *               'application/json': '{\"statusCode\": 200}',\n   *             },\n   *             passthroughBehavior: 'when_no_match',\n   *             type: 'mock',\n   *           },\n   *         },\n   *       },\n   *     },\n   *     components: {\n   *       schemas: {\n   *         Empty: {\n   *           title: 'Empty Schema',\n   *           type: 'object',\n   *         },\n   *       },\n   *     },\n   *   });\n   */\n  public static fromInline(definition: any): InlineApiDefinition {\n    return new InlineApiDefinition(definition);\n  }\n\n  /**\n   * Loads the API specification from a local disk asset.\n   */\n  public static fromAsset(file: string, options?: s3_assets.AssetOptions): AssetApiDefinition {\n    return new AssetApiDefinition(file, options);\n  }\n\n  /**\n   * Called when the specification is initialized to allow this object to bind\n   * to the stack, add resources and have fun.\n   *\n   * @param scope The binding scope. Don't be smart about trying to down-cast or\n   * assume it's initialized. You may just use it as a construct scope.\n   */\n  public abstract bind(scope: Construct): ApiDefinitionConfig;\n\n  /**\n   * Called after the CFN RestApi resource has been created to allow the Api\n   * Definition to bind to it. Specifically it's required to allow assets to add\n   * metadata for tooling like SAM CLI to be able to find their origins.\n   */\n  public bindAfterCreate(_scope: Construct, _restApi: IRestApi) {\n    return;\n  }\n}\n\n/**\n * S3 location of the API definition file\n */\nexport interface ApiDefinitionS3Location {\n  /** The S3 bucket */\n  readonly bucket: string;\n  /** The S3 key */\n  readonly key: string;\n  /**\n   * An optional version\n   * @default - latest version\n   */\n  readonly version?: string;\n}\n\n/**\n * Post-Binding Configuration for a CDK construct\n */\nexport interface ApiDefinitionConfig {\n  /**\n   * The location of the specification in S3 (mutually exclusive with `inlineDefinition`).\n   *\n   * @default - API definition is not an S3 location\n   */\n  readonly s3Location?: ApiDefinitionS3Location;\n\n  /**\n   * Inline specification (mutually exclusive with `s3Location`).\n   *\n   * @default - API definition is not defined inline\n   */\n  readonly inlineDefinition?: any;\n}\n\n/**\n * OpenAPI specification from an S3 archive.\n */\nexport class S3ApiDefinition extends ApiDefinition {\n  private bucketName: string;\n\n  constructor(bucket: s3.IBucket, private key: string, private objectVersion?: string) {\n    super();\n\n    if (!bucket.bucketName) {\n      throw new Error('bucketName is undefined for the provided bucket');\n    }\n\n    this.bucketName = bucket.bucketName;\n  }\n\n  public bind(_scope: Construct): ApiDefinitionConfig {\n    return {\n      s3Location: {\n        bucket: this.bucketName,\n        key: this.key,\n        version: this.objectVersion,\n      },\n    };\n  }\n}\n\n/**\n * OpenAPI specification from an inline JSON object.\n */\nexport class InlineApiDefinition extends ApiDefinition {\n  constructor(private definition: any) {\n    super();\n\n    if (typeof(definition) !== 'object') {\n      throw new Error('definition should be of type object');\n    }\n\n    if (Object.keys(definition).length === 0) {\n      throw new Error('JSON definition cannot be empty');\n    }\n  }\n\n  public bind(_scope: Construct): ApiDefinitionConfig {\n    return {\n      inlineDefinition: this.definition,\n    };\n  }\n}\n\n/**\n * OpenAPI specification from a local file.\n */\nexport class AssetApiDefinition extends ApiDefinition {\n  private asset?: s3_assets.Asset;\n\n  constructor(private readonly path: string, private readonly options: s3_assets.AssetOptions = { }) {\n    super();\n  }\n\n  public bind(scope: Construct): ApiDefinitionConfig {\n    // If the same AssetAPIDefinition is used multiple times, retain only the first instantiation.\n    if (this.asset === undefined) {\n      this.asset = new s3_assets.Asset(scope, 'APIDefinition', {\n        path: this.path,\n        ...this.options,\n      });\n    }\n\n    if (this.asset.isZipArchive) {\n      throw new Error(`Asset cannot be a .zip file or a directory (${this.path})`);\n    }\n\n    return {\n      s3Location: {\n        bucket: this.asset.s3BucketName,\n        key: this.asset.s3ObjectKey,\n      },\n    };\n  }\n\n  public bindAfterCreate(scope: Construct, restApi: IRestApi) {\n    if (!scope.node.tryGetContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT)) {\n      return; // not enabled\n    }\n\n    if (!this.asset) {\n      throw new Error('bindToResource() must be called after bind()');\n    }\n\n    const child = Node.of(restApi).defaultChild as CfnRestApi;\n    child.addMetadata(cxapi.ASSET_RESOURCE_METADATA_PATH_KEY, this.asset.assetPath);\n    child.addMetadata(cxapi.ASSET_RESOURCE_METADATA_PROPERTY_KEY, 'BodyS3Location');\n  }\n}\n"],
  "mappings": "4SACA,UAAA,QAAA,qBAAA,EAIA,MAAA,QAAA,cAAA,EACA,aAAA,QAAA,YAAA,EAOA,MAAsB,aAAa,OAInB,YAAW,OAAoB,IAAa,cAAsB,mEACvE,GAAI,iBAAgB,OAAQ,IAAK,aAAa,QAkDzC,YAAW,WAAe,CACtC,MAAO,IAAI,qBAAoB,UAAU,QAM7B,WAAU,KAAc,QAAgC,gFAC7D,GAAI,oBAAmB,KAAM,OAAO,EAiBtC,gBAAgB,OAAmB,SAAkB,wEAhF9D,QAAA,cAAA,wHA0HA,MAAa,uBAAwB,cAAa,CAGhD,YAAY,OAA4B,IAAqB,cAAsB,CACjF,MAAK,EAEL,GAHsC,KAAA,IAAA,IAAqB,KAAA,cAAA,yEAGvD,CAAC,OAAO,WACV,KAAM,IAAI,OAAM,iDAAiD,EAGnE,KAAK,WAAa,OAAO,WAGpB,KAAK,OAAiB,CAC3B,MAAO,CACL,WAAY,CACV,OAAQ,KAAK,WACb,IAAK,KAAK,IACV,QAAS,KAAK,iBAlBtB,QAAA,gBAAA,8HA2BA,MAAa,2BAA4B,cAAa,CACpD,YAAoB,WAAe,CACjC,MAAK,EAEL,GAHkB,KAAA,WAAA,WAGd,MAAO,aAAgB,SACzB,KAAM,IAAI,OAAM,qCAAqC,EAGvD,GAAI,OAAO,KAAK,UAAU,EAAE,SAAW,EACrC,KAAM,IAAI,OAAM,iCAAiC,EAI9C,KAAK,OAAiB,CAC3B,MAAO,CACL,iBAAkB,KAAK,aAf7B,QAAA,oBAAA,0IAuBA,MAAa,0BAA2B,cAAa,CAGnD,YAA6B,KAA+B,QAAkC,CAAA,EAAG,CAC/F,MAAK,EADsB,KAAA,KAAA,KAA+B,KAAA,QAAA,gFAIrD,KAAK,MAAgB,CAS1B,GAPI,KAAK,QAAU,QACjB,MAAK,MAAQ,GAAI,WAAU,MAAM,MAAO,gBAAiB,CACvD,KAAM,KAAK,QACR,KAAK,QACT,GAGC,KAAK,MAAM,aACb,KAAM,IAAI,OAAM,+CAA+C,KAAK,OAAO,EAG7E,MAAO,CACL,WAAY,CACV,OAAQ,KAAK,MAAM,aACnB,IAAK,KAAK,MAAM,cAKf,gBAAgB,MAAkB,QAAiB,CACxD,wEAAI,CAAC,MAAM,KAAK,cAAc,MAAM,uCAAuC,EACzE,OAGF,GAAI,CAAC,KAAK,MACR,KAAM,IAAI,OAAM,8CAA8C,EAGhE,KAAM,OAAQ,aAAA,KAAK,GAAG,OAAO,EAAE,aAC/B,MAAM,YAAY,MAAM,iCAAkC,KAAK,MAAM,SAAS,EAC9E,MAAM,YAAY,MAAM,qCAAsC,gBAAgB,GAvClF,QAAA,mBAAA",
  "names": []
}
