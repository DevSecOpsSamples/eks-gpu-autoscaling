{
  "version": 3,
  "sources": ["stage.ts"],
  "sourcesContent": ["import { ArnFormat, Duration, IResource, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { AccessLogFormat, IAccessLogDestination } from './access-log';\nimport { CfnStage } from './apigateway.generated';\nimport { Deployment } from './deployment';\nimport { IRestApi, RestApiBase } from './restapi';\nimport { parseMethodOptionsPath } from './util';\n\n/**\n * Represents an APIGateway Stage.\n */\nexport interface IStage extends IResource {\n  /**\n   * Name of this stage.\n   * @attribute\n   */\n  readonly stageName: string;\n\n  /**\n   * RestApi to which this stage is associated.\n   */\n  readonly restApi: IRestApi;\n}\n\nexport interface StageOptions extends MethodDeploymentOptions {\n  /**\n   * The name of the stage, which API Gateway uses as the first path segment\n   * in the invoked Uniform Resource Identifier (URI).\n   *\n   * @default - \"prod\"\n   */\n  readonly stageName?: string;\n\n  /**\n   * The CloudWatch Logs log group.\n   *\n   * @default - No destination\n   */\n  readonly accessLogDestination?: IAccessLogDestination;\n\n  /**\n   * A single line format of access logs of data, as specified by selected $content variables.\n   * The format must include at least `AccessLogFormat.contextRequestId()`.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference\n   *\n   * @default - Common Log Format\n   */\n  readonly accessLogFormat?: AccessLogFormat;\n\n  /**\n   * Specifies whether Amazon X-Ray tracing is enabled for this method.\n   *\n   * @default false\n   */\n  readonly tracingEnabled?: boolean;\n\n  /**\n   * Indicates whether cache clustering is enabled for the stage.\n   *\n   * @default - Disabled for the stage.\n   */\n  readonly cacheClusterEnabled?: boolean;\n\n  /**\n   * The stage's cache cluster size.\n   * @default 0.5\n   */\n  readonly cacheClusterSize?: string;\n\n  /**\n   * The identifier of the client certificate that API Gateway uses to call\n   * your integration endpoints in the stage.\n   *\n   * @default - None.\n   */\n  readonly clientCertificateId?: string;\n\n  /**\n   * A description of the purpose of the stage.\n   *\n   * @default - No description.\n   */\n  readonly description?: string;\n\n  /**\n   * The version identifier of the API documentation snapshot.\n   *\n   * @default - No documentation version.\n   */\n  readonly documentationVersion?: string;\n\n  /**\n   * A map that defines the stage variables. Variable names must consist of\n   * alphanumeric characters, and the values must match the following regular\n   * expression: [A-Za-z0-9-._~:/?#&amp;=,]+.\n   *\n   * @default - No stage variables.\n   */\n  readonly variables?: { [key: string]: string };\n\n  /**\n   * Method deployment options for specific resources/methods. These will\n   * override common options defined in `StageOptions#methodOptions`.\n   *\n   * @param path is {resource_path}/{http_method} (i.e. /api/toys/GET) for an\n   * individual method override. You can use `*` for both {resource_path} and {http_method}\n   * to define options for all methods/resources.\n   *\n   * @default - Common options will be used.\n   */\n  readonly methodOptions?: { [path: string]: MethodDeploymentOptions };\n}\n\nexport interface StageProps extends StageOptions {\n  /**\n   * The deployment that this stage points to [disable-awslint:ref-via-interface].\n   */\n  readonly deployment: Deployment;\n}\n\nexport enum MethodLoggingLevel {\n  OFF = 'OFF',\n  ERROR = 'ERROR',\n  INFO = 'INFO'\n}\n\nexport interface MethodDeploymentOptions {\n  /**\n   * Specifies whether Amazon CloudWatch metrics are enabled for this method.\n   *\n   * @default false\n   */\n  readonly metricsEnabled?: boolean;\n\n  /**\n   * Specifies the logging level for this method, which effects the log\n   * entries pushed to Amazon CloudWatch Logs.\n   *\n   * @default - Off\n   */\n  readonly loggingLevel?: MethodLoggingLevel;\n\n  /**\n   * Specifies whether data trace logging is enabled for this method.\n   * When enabled, API gateway will log the full API requests and responses.\n   * This can be useful to troubleshoot APIs, but can result in logging sensitive data.\n   * We recommend that you don't enable this feature for production APIs.\n   *\n   * @default false\n   */\n  readonly dataTraceEnabled?: boolean;\n\n  /**\n   * Specifies the throttling burst limit.\n   * The total rate of all requests in your AWS account is limited to 5,000 requests.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html\n   *\n   * @default - No additional restriction.\n   */\n  readonly throttlingBurstLimit?: number;\n\n  /**\n   * Specifies the throttling rate limit.\n   * The total rate of all requests in your AWS account is limited to 10,000 requests per second (rps).\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html\n   *\n   * @default - No additional restriction.\n   */\n  readonly throttlingRateLimit?: number;\n\n  /**\n   * Specifies whether responses should be cached and returned for requests. A\n   * cache cluster must be enabled on the stage for responses to be cached.\n   *\n   * @default - Caching is Disabled.\n   */\n  readonly cachingEnabled?: boolean;\n\n  /**\n   * Specifies the time to live (TTL), in seconds, for cached responses. The\n   * higher the TTL, the longer the response will be cached.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html\n   *\n   * @default Duration.minutes(5)\n   */\n  readonly cacheTtl?: Duration;\n\n  /**\n   * Indicates whether the cached responses are encrypted.\n   *\n   * @default false\n   */\n  readonly cacheDataEncrypted?: boolean;\n}\n\nexport class Stage extends Resource implements IStage {\n  public readonly stageName: string;\n\n  public readonly restApi: IRestApi;\n  private enableCacheCluster?: boolean;\n\n  constructor(scope: Construct, id: string, props: StageProps) {\n    super(scope, id);\n\n    this.enableCacheCluster = props.cacheClusterEnabled;\n\n    const methodSettings = this.renderMethodSettings(props); // this can mutate `this.cacheClusterEnabled`\n\n    // custom access logging\n    let accessLogSetting: CfnStage.AccessLogSettingProperty | undefined;\n    const accessLogDestination = props.accessLogDestination;\n    const accessLogFormat = props.accessLogFormat;\n    if (!accessLogDestination && !accessLogFormat) {\n      accessLogSetting = undefined;\n    } else {\n      if (accessLogFormat !== undefined &&\n        !Token.isUnresolved(accessLogFormat.toString()) &&\n        !/.*\\$context.requestId.*/.test(accessLogFormat.toString())) {\n\n        throw new Error('Access log must include at least `AccessLogFormat.contextRequestId()`');\n      }\n      if (accessLogFormat !== undefined && accessLogDestination === undefined) {\n        throw new Error('Access log format is specified without a destination');\n      }\n\n      accessLogSetting = {\n        destinationArn: accessLogDestination?.bind(this).destinationArn,\n        format: accessLogFormat?.toString() ? accessLogFormat?.toString() : AccessLogFormat.clf().toString(),\n      };\n    }\n\n    // enable cache cluster if cacheClusterSize is set\n    if (props.cacheClusterSize !== undefined) {\n      if (this.enableCacheCluster === undefined) {\n        this.enableCacheCluster = true;\n      } else if (this.enableCacheCluster === false) {\n        throw new Error(`Cannot set \"cacheClusterSize\" to ${props.cacheClusterSize} and \"cacheClusterEnabled\" to \"false\"`);\n      }\n    }\n\n    const cacheClusterSize = this.enableCacheCluster ? (props.cacheClusterSize || '0.5') : undefined;\n    const resource = new CfnStage(this, 'Resource', {\n      stageName: props.stageName || 'prod',\n      accessLogSetting,\n      cacheClusterEnabled: this.enableCacheCluster,\n      cacheClusterSize,\n      clientCertificateId: props.clientCertificateId,\n      deploymentId: props.deployment.deploymentId,\n      restApiId: props.deployment.api.restApiId,\n      description: props.description,\n      documentationVersion: props.documentationVersion,\n      variables: props.variables,\n      tracingEnabled: props.tracingEnabled,\n      methodSettings,\n    });\n\n    this.stageName = resource.ref;\n    this.restApi = props.deployment.api;\n\n    if (RestApiBase._isRestApiBase(this.restApi)) {\n      this.restApi._attachStage(this);\n    }\n  }\n\n  /**\n   * Returns the invoke URL for a certain path.\n   * @param path The resource path\n   */\n  public urlForPath(path: string = '/') {\n    if (!path.startsWith('/')) {\n      throw new Error(`Path must begin with \"/\": ${path}`);\n    }\n    return `https://${this.restApi.restApiId}.execute-api.${Stack.of(this).region}.${Stack.of(this).urlSuffix}/${this.stageName}${path}`;\n  }\n\n  /**\n   * Returns the resource ARN for this stage:\n   *\n   *   arn:aws:apigateway:{region}::/restapis/{restApiId}/stages/{stageName}\n   *\n   * Note that this is separate from the execute-api ARN for methods and resources\n   * within this stage.\n   *\n   * @attribute\n   */\n  public get stageArn() {\n    return Stack.of(this).formatArn({\n      arnFormat: ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME,\n      service: 'apigateway',\n      account: '',\n      resource: 'restapis',\n      resourceName: `${this.restApi.restApiId}/stages/${this.stageName}`,\n    });\n  }\n\n  private renderMethodSettings(props: StageProps): CfnStage.MethodSettingProperty[] | undefined {\n    const settings = new Array<CfnStage.MethodSettingProperty>();\n    const self = this;\n\n    // extract common method options from the stage props\n    const commonMethodOptions: MethodDeploymentOptions = {\n      metricsEnabled: props.metricsEnabled,\n      loggingLevel: props.loggingLevel,\n      dataTraceEnabled: props.dataTraceEnabled,\n      throttlingBurstLimit: props.throttlingBurstLimit,\n      throttlingRateLimit: props.throttlingRateLimit,\n      cachingEnabled: props.cachingEnabled,\n      cacheTtl: props.cacheTtl,\n      cacheDataEncrypted: props.cacheDataEncrypted,\n    };\n\n    // if any of them are defined, add an entry for '/*/*'.\n    const hasCommonOptions = Object.keys(commonMethodOptions).map(v => (commonMethodOptions as any)[v]).filter(x => x).length > 0;\n    if (hasCommonOptions) {\n      settings.push(renderEntry('/*/*', commonMethodOptions));\n    }\n\n    if (props.methodOptions) {\n      for (const path of Object.keys(props.methodOptions)) {\n        settings.push(renderEntry(path, props.methodOptions[path]));\n      }\n    }\n\n    return settings.length === 0 ? undefined : settings;\n\n    function renderEntry(path: string, options: MethodDeploymentOptions): CfnStage.MethodSettingProperty {\n      if (options.cachingEnabled) {\n        if (self.enableCacheCluster === undefined) {\n          self.enableCacheCluster = true;\n        } else if (self.enableCacheCluster === false) {\n          throw new Error(`Cannot enable caching for method ${path} since cache cluster is disabled on stage`);\n        }\n      }\n\n      const { httpMethod, resourcePath } = parseMethodOptionsPath(path);\n\n      return {\n        httpMethod,\n        resourcePath,\n        cacheDataEncrypted: options.cacheDataEncrypted,\n        cacheTtlInSeconds: options.cacheTtl && options.cacheTtl.toSeconds(),\n        cachingEnabled: options.cachingEnabled,\n        dataTraceEnabled: options.dataTraceEnabled ?? false,\n        loggingLevel: options.loggingLevel,\n        metricsEnabled: options.metricsEnabled,\n        throttlingBurstLimit: options.throttlingBurstLimit,\n        throttlingRateLimit: options.throttlingRateLimit,\n      };\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
