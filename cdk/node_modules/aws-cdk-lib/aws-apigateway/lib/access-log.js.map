{
  "version": 3,
  "sources": ["access-log.ts"],
  "sourcesContent": ["import { ILogGroup } from '../../aws-logs';\nimport { IStage } from './stage';\n\n/**\n * Access log destination for a RestApi Stage.\n */\nexport interface IAccessLogDestination {\n  /**\n   * Binds this destination to the RestApi Stage.\n   */\n  bind(stage: IStage): AccessLogDestinationConfig\n}\n\n/**\n * Options when binding a log destination to a RestApi Stage.\n */\nexport interface AccessLogDestinationConfig {\n  /**\n   * The Amazon Resource Name (ARN) of the destination resource\n   */\n  readonly destinationArn: string;\n}\n\n/**\n * Use CloudWatch Logs as a custom access log destination for API Gateway.\n */\nexport class LogGroupLogDestination implements IAccessLogDestination {\n  constructor(private readonly logGroup: ILogGroup) {\n  }\n\n  /**\n   * Binds this destination to the CloudWatch Logs.\n   */\n  public bind(_stage: IStage): AccessLogDestinationConfig {\n    return {\n      destinationArn: this.logGroup.logGroupArn,\n    };\n  }\n}\n\n/**\n * $context variables that can be used to customize access log pattern.\n */\nexport class AccessLogField {\n  /**\n   * The API owner's AWS account ID.\n   */\n  public static contextAccountId() {\n    return '$context.identity.accountId';\n  }\n\n  /**\n   * The identifier API Gateway assigns to your API.\n   */\n  public static contextApiId() {\n    return '$context.apiId';\n  }\n\n  /**\n   * A property of the claims returned from the Amazon Cognito user pool after the method caller is successfully authenticated.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html\n   *\n   * @param property A property key of the claims.\n   */\n  public static contextAuthorizerClaims(property: string) {\n    return `$context.authorizer.claims.${property}`;\n  }\n\n  /**\n   * The principal user identification associated with the token sent by the client and returned\n   * from an API Gateway Lambda authorizer (formerly known as a custom authorizer).\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html\n   */\n  public static contextAuthorizerPrincipalId() {\n    return '$context.authorizer.principalId';\n  }\n\n  /**\n   * The stringified value of the specified key-value pair of the `context` map returned from an API Gateway Lambda authorizer function.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html\n   * @param property key of the context map.\n   */\n  public static contextAuthorizer(property: string) {\n    return `$context.authorizer.${property}`;\n  }\n\n  /**\n   * The AWS endpoint's request ID.\n   */\n  public static contextAwsEndpointRequestId() {\n    return '$context.awsEndpointRequestId';\n  }\n\n  /**\n   * The full domain name used to invoke the API. This should be the same as the incoming `Host` header.\n   */\n  public static contextDomainName() {\n    return '$context.domainName';\n  }\n\n  /**\n   * The first label of the `$context.domainName`. This is often used as a caller/customer identifier.\n   */\n  public static contextDomainPrefix() {\n    return '$context.domainPrefix';\n  }\n\n  /**\n   * A string containing an API Gateway error message.\n   */\n  public static contextErrorMessage() {\n    return '$context.error.message';\n  }\n\n  /**\n   * The quoted value of $context.error.message, namely \"$context.error.message\".\n   */\n  public static contextErrorMessageString() {\n    return '$context.error.messageString';\n  }\n\n  /**\n   * A type of GatewayResponse. This variable can only be used for simple variable substitution in a GatewayResponse body-mapping template,\n   * which is not processed by the Velocity Template Language engine, and in access logging.\n   *\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/customize-gateway-responses.html\n   */\n  public static contextErrorResponseType() {\n    return '$context.error.responseType';\n  }\n\n  /**\n   * A string containing a detailed validation error message.\n   */\n  public static contextErrorValidationErrorString() {\n    return '$context.error.validationErrorString';\n  }\n\n  /**\n   * The extended ID that API Gateway assigns to the API request, which contains more useful information for debugging/troubleshooting.\n   */\n  public static contextExtendedRequestId() {\n    return '$context.extendedRequestId';\n  }\n\n  /**\n   * The HTTP method used. Valid values include: `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, and `PUT`.\n   */\n  public static contextHttpMethod() {\n    return '$context.httpMethod';\n  }\n\n  /**\n   * The AWS account ID associated with the request.\n   */\n  public static contextIdentityAccountId() {\n    return '$context.identity.accountId';\n  }\n\n  /**\n   * For API methods that require an API key, this variable is the API key associated with the method request.\n   * For methods that don't require an API key, this variable is\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html\n   */\n  public static contextIdentityApiKey() {\n    return '$context.identity.apiKey';\n  }\n\n  /**\n   * The API key ID associated with an API request that requires an API key.\n   */\n  public static contextIdentityApiKeyId() {\n    return '$context.identity.apiKeyId';\n  }\n\n  /**\n   * The principal identifier of the caller making the request.\n   */\n  public static contextIdentityCaller() {\n    return '$context.identity.caller';\n  }\n\n  /**\n   * The Amazon Cognito authentication provider used by the caller making the request.\n   * Available only if the request was signed with Amazon Cognito credentials.\n   * @see https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\n   */\n  public static contextIdentityCognitoAuthenticationProvider() {\n    return '$context.identity.cognitoAuthenticationProvider';\n  }\n\n  /**\n   * The Amazon Cognito authentication type of the caller making the request.\n   * Available only if the request was signed with Amazon Cognito credentials.\n   */\n  public static contextIdentityCognitoAuthenticationType() {\n    return '$context.identity.cognitoAuthenticationType';\n  }\n\n  /**\n   * The Amazon Cognito identity ID of the caller making the request. Available only if the request was signed with Amazon Cognito credentials.\n   */\n  public static contextIdentityCognitoIdentityId() {\n    return '$context.identity.cognitoIdentityId';\n  }\n\n  /**\n   * The Amazon Cognito identity pool ID of the caller making the request.\n   * Available only if the request was signed with Amazon Cognito credentials.\n   */\n  public static contextIdentityCognitoIdentityPoolId() {\n    return '$context.identity.cognitoIdentityPoolId';\n  }\n\n  /**\n   * The AWS organization ID.\n   */\n  public static contextIdentityPrincipalOrgId() {\n    return '$context.identity.principalOrgId';\n  }\n\n  /**\n   * The source IP address of the TCP connection making the request to API Gateway.\n   * Warning: You should not trust this value if there is any chance that the `X-Forwarded-For` header could be forged.\n   */\n  public static contextIdentitySourceIp() {\n    return '$context.identity.sourceIp';\n  }\n\n  /**\n   * The principal identifier of the user making the request. Used in Lambda authorizers.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-output.html\n   */\n  public static contextIdentityUser() {\n    return '$context.identity.user';\n  }\n\n  /**\n   * The User-Agent header of the API caller.\n   */\n  public static contextIdentityUserAgent() {\n    return '$context.identity.userAgent';\n  }\n\n  /**\n   * The Amazon Resource Name (ARN) of the effective user identified after authentication.\n   * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html\n   */\n  public static contextIdentityUserArn() {\n    return '$context.identity.userArn';\n  }\n\n  /**\n   * The request path.\n   * For example, for a non-proxy request URL of https://{rest-api-id.execute-api.{region}.amazonaws.com/{stage}/root/child,\n   * this value is /{stage}/root/child.\n   */\n  public static contextPath() {\n    return '$context.path';\n  }\n\n  /**\n   * The request protocol, for example, HTTP/1.1.\n   */\n  public static contextProtocol() {\n    return '$context.protocol';\n  }\n\n  /**\n   * The ID that API Gateway assigns to the API request.\n   */\n  public static contextRequestId() {\n    return '$context.requestId';\n  }\n\n  /**\n   * The request header override.\n   * If this parameter is defined, it contains the headers to be used instead of the HTTP Headers that are defined in the Integration Request pane.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-override-request-response-parameters.html\n   *\n   * @param headerName\n   */\n  public static contextRequestOverrideHeader(headerName: string) {\n    return `$context.requestOverride.header.${headerName}`;\n  }\n\n  /**\n   * The request path override. If this parameter is defined,\n   * it contains the request path to be used instead of the URL Path Parameters that are defined in the Integration Request pane.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-override-request-response-parameters.html\n   *\n   * @param pathName\n   */\n  public static contextRequestOverridePath(pathName: string) {\n    return `$context.requestOverride.path.${pathName}`;\n  }\n\n  /**\n   * The request query string override.\n   * If this parameter is defined, it contains the request query strings to be used instead\n   * of the URL Query String Parameters that are defined in the Integration Request pane.\n   *\n   * @param querystringName\n   */\n  public static contextRequestOverrideQuerystring(querystringName: string) {\n    return `$context.requestOverride.querystring.${querystringName}`;\n  }\n\n  /**\n   * The response header override.\n   * If this parameter is defined, it contains the header to be returned instead of the Response header\n   * that is defined as the Default mapping in the Integration Response pane.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-override-request-response-parameters.html\n   *\n   * @param headerName\n   */\n  public static contextResponseOverrideHeader(headerName: string) {\n    return `$context.responseOverride.header.${headerName}`;\n  }\n\n  /**\n   * The response status code override.\n   * If this parameter is defined, it contains the status code to be returned instead of the Method response status\n   * that is defined as the Default mapping in the Integration Response pane.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-override-request-response-parameters.html\n   */\n  public static contextResponseOverrideStatus() {\n    return '$context.responseOverride.status';\n  }\n\n  /**\n   * The CLF-formatted request time (dd/MMM/yyyy:HH:mm:ss +-hhmm).\n   */\n  public static contextRequestTime() {\n    return '$context.requestTime';\n  }\n\n  /**\n   * The Epoch-formatted request time.\n   */\n  public static contextRequestTimeEpoch() {\n    return '$context.requestTimeEpoch';\n  }\n\n  /**\n   * The identifier that API Gateway assigns to your resource.\n   */\n  public static contextResourceId() {\n    return '$context.resourceId';\n  }\n\n  /**\n   * The path to your resource.\n   * For example, for the non-proxy request URI of `https://{rest-api-id.execute-api.{region}.amazonaws.com/{stage}/root/child`,\n   * The $context.resourcePath value is `/root/child`.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-step-by-step.html\n   */\n  public static contextResourcePath() {\n    return '$context.resourcePath';\n  }\n\n  /**\n   * The deployment stage of the API request (for example, `Beta` or `Prod`).\n   */\n  public static contextStage() {\n    return '$context.stage';\n  }\n\n  /**\n   * The response received from AWS WAF: `WAF_ALLOW` or `WAF_BLOCK`. Will not be set if the stage is not associated with a web ACL.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html\n   */\n  public static contextWafResponseCode() {\n    return '$context.wafResponseCode';\n  }\n\n  /**\n   * The complete ARN of the web ACL that is used to decide whether to allow or block the request.\n   * Will not be set if the stage is not associated with a web ACL.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html\n   */\n  public static contextWebaclArn() {\n    return '$context.webaclArn';\n  }\n\n  /**\n   * The trace ID for the X-Ray trace.\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enabling-xray.html\n   */\n  public static contextXrayTraceId() {\n    return '$context.xrayTraceId';\n  }\n\n  /**\n   * The authorizer latency in ms.\n   */\n  public static contextAuthorizerIntegrationLatency() {\n    return '$context.authorizer.integrationLatency';\n  }\n\n  /**\n   * The integration latency in ms.\n   */\n  public static contextIntegrationLatency() {\n    return '$context.integrationLatency';\n  }\n\n  /**\n   * For Lambda proxy integration, this parameter represents the status code returned from AWS Lambda,\n   * not from the backend Lambda function.\n   */\n  public static contextIntegrationStatus() {\n    return '$context.integrationStatus';\n  }\n\n  /**\n   * The response latency in ms.\n   */\n  public static contextResponseLatency() {\n    return '$context.responseLatency';\n  }\n\n  /**\n   * The response payload length.\n   */\n  public static contextResponseLength() {\n    return '$context.responseLength';\n  }\n\n  /**\n   * The method response status.\n   */\n  public static contextStatus() {\n    return '$context.status';\n  }\n}\n\n/**\n * Properties for controlling items output in JSON standard format\n */\nexport interface JsonWithStandardFieldProps {\n  /**\n   * If this flag is enabled, the source IP of request will be output to the log\n   */\n  readonly ip: boolean,\n  /**\n   * If this flag is enabled, the principal identifier of the caller will be output to the log\n   */\n  readonly caller: boolean,\n  /**\n   * If this flag is enabled, the principal identifier of the user will be output to the log\n   */\n  readonly user: boolean,\n  /**\n   * If this flag is enabled, the CLF-formatted request time((dd/MMM/yyyy:HH:mm:ss +-hhmm) will be output to the log\n   */\n  readonly requestTime: boolean,\n  /**\n   * If this flag is enabled, the http method will be output to the log\n   */\n  readonly httpMethod: boolean,\n  /**\n   * If this flag is enabled, the path to your resource will be output to the log\n   */\n  readonly resourcePath: boolean,\n  /**\n   * If this flag is enabled, the method response status will be output to the log\n   */\n  readonly status: boolean,\n  /**\n   * If this flag is enabled, the request protocol will be output to the log\n   */\n  readonly protocol: boolean,\n  /**\n   * If this flag is enabled, the response payload length will be output to the log\n   */\n  readonly responseLength: boolean\n}\n\n/**\n * factory methods for access log format.\n */\nexport class AccessLogFormat {\n  /**\n   * Custom log format.\n   * You can create any log format string. You can easily get the $ context variable by using the methods of AccessLogField.\n   * @param format\n   * @example\n   *\n   *  apigateway.AccessLogFormat.custom(JSON.stringify({\n   *      requestId: apigateway.AccessLogField.contextRequestId(),\n   *      sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n   *      method: apigateway.AccessLogField.contextHttpMethod(),\n   *      userContext: {\n   *        sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n   *        email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n   *      }\n   *   }))\n   */\n  public static custom(format: string): AccessLogFormat {\n    return new AccessLogFormat(format);\n  }\n\n  /**\n   * Generate Common Log Format.\n   */\n  public static clf(): AccessLogFormat {\n    const requester = [AccessLogField.contextIdentitySourceIp(), AccessLogField.contextIdentityCaller(), AccessLogField.contextIdentityUser()].join(' ');\n    const requestTime = AccessLogField.contextRequestTime();\n    const request = [AccessLogField.contextHttpMethod(), AccessLogField.contextResourcePath(), AccessLogField.contextProtocol()].join(' ');\n    const status = [AccessLogField.contextStatus(), AccessLogField.contextResponseLength(), AccessLogField.contextRequestId()].join(' ');\n\n    return new AccessLogFormat(`${requester} [${requestTime}] \"${request}\" ${status}`);\n  }\n\n  /**\n   * Access log will be produced in the JSON format with a set of fields most useful in the access log. All fields are turned on by default with the\n   * option to turn off specific fields.\n   */\n  public static jsonWithStandardFields(\n    fields: JsonWithStandardFieldProps = {\n      ip: true,\n      user: true,\n      caller: true,\n      requestTime: true,\n      httpMethod: true,\n      resourcePath: true,\n      status: true,\n      protocol: true,\n      responseLength: true,\n    }): AccessLogFormat {\n    return this.custom(JSON.stringify({\n      requestId: AccessLogField.contextRequestId(),\n      ip: fields.ip ? AccessLogField.contextIdentitySourceIp() : undefined,\n      user: fields.user ? AccessLogField.contextIdentityUser() : undefined,\n      caller: fields.caller ? AccessLogField.contextIdentityCaller() : undefined,\n      requestTime: fields.requestTime ? AccessLogField.contextRequestTime() : undefined,\n      httpMethod: fields.httpMethod ? AccessLogField.contextHttpMethod() : undefined,\n      resourcePath: fields.resourcePath ? AccessLogField.contextResourcePath() : undefined,\n      status: fields.status ? AccessLogField.contextStatus() : undefined,\n      protocol: fields.protocol ? AccessLogField.contextProtocol() : undefined,\n      responseLength: fields.responseLength ? AccessLogField.contextResponseLength() : undefined,\n    }));\n  }\n\n  /**\n   * A API Gateway custom access log format\n   */\n  private readonly format: string;\n\n  private constructor(format: string) {\n    this.format = format;\n  }\n\n  /**\n   * Output a format string to be used with CloudFormation.\n   */\n  public toString(): string {\n    return this.format;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
