{
  "version": 3,
  "sources": ["lambda-api.ts"],
  "sourcesContent": ["import * as lambda from '../../aws-lambda';\nimport { Construct } from 'constructs';\nimport { LambdaIntegration } from './integrations';\nimport { Method } from './method';\nimport { ProxyResource, Resource } from './resource';\nimport { RestApi, RestApiProps } from './restapi';\n\nexport interface LambdaRestApiProps extends RestApiProps {\n  /**\n   * The default Lambda function that handles all requests from this API.\n   *\n   * This handler will be used as a the default integration for all methods in\n   * this API, unless specified otherwise in `addMethod`.\n   */\n  readonly handler: lambda.IFunction;\n\n  /**\n   * If true, route all requests to the Lambda Function\n   *\n   * If set to false, you will need to explicitly define the API model using\n   * `addResource` and `addMethod` (or `addProxy`).\n   *\n   * @default true\n   */\n  readonly proxy?: boolean;\n\n  /**\n   * @deprecated the `LambdaRestApiProps` now extends `RestApiProps`, so all\n   * options are just available here. Note that the options specified in\n   * `options` will be overridden by any props specified at the root level.\n   *\n   * @default - no options.\n   */\n  readonly options?: RestApiProps;\n}\n\n/**\n * Defines an API Gateway REST API with AWS Lambda proxy integration.\n *\n * Use the `proxy` property to define a greedy proxy (\"{proxy+}\") and \"ANY\"\n * method from the specified path. If not defined, you will need to explicity\n * add resources and methods to the API.\n */\nexport class LambdaRestApi extends RestApi {\n  constructor(scope: Construct, id: string, props: LambdaRestApiProps) {\n    if ((props.options && props.options.defaultIntegration) || props.defaultIntegration) {\n      throw new Error('Cannot specify \"defaultIntegration\" since Lambda integration is automatically defined');\n    }\n\n    super(scope, id, {\n      defaultIntegration: new LambdaIntegration(props.handler),\n      ...props.options, // deprecated, but we still support\n      ...props,\n    });\n\n    if (props.proxy !== false) {\n      this.root.addProxy();\n\n      // Make sure users cannot call any other resource adding function\n      this.root.addResource = addResourceThrows;\n      this.root.addMethod = addMethodThrows;\n      this.root.addProxy = addProxyThrows;\n    }\n  }\n}\n\nfunction addResourceThrows(): Resource {\n  throw new Error('Cannot call \\'addResource\\' on a proxying LambdaRestApi; set \\'proxy\\' to false');\n}\n\nfunction addMethodThrows(): Method {\n  throw new Error('Cannot call \\'addMethod\\' on a proxying LambdaRestApi; set \\'proxy\\' to false');\n}\n\nfunction addProxyThrows(): ProxyResource {\n  throw new Error('Cannot call \\'addProxy\\' on a proxying LambdaRestApi; set \\'proxy\\' to false');\n}\n"],
  "mappings": "oNAEA,eAAA,QAAA,gBAAA,EAGA,UAAA,QAAA,WAAA,EAsCA,MAAa,qBAAsB,WAAA,OAAO,CACxC,YAAY,MAAkB,GAAY,MAAyB,CACjE,gFAAK,MAAM,SAAW,MAAM,QAAQ,oBAAuB,MAAM,mBAC/D,KAAM,IAAI,OAAM,uFAAuF,EAGzG,MAAM,MAAO,GAAI,CACf,mBAAoB,GAAI,gBAAA,kBAAkB,MAAM,OAAO,KACpD,MAAM,WACN,MACJ,EAED,AAAI,MAAM,QAAU,IAClB,MAAK,KAAK,SAAQ,EAGlB,KAAK,KAAK,YAAc,kBACxB,KAAK,KAAK,UAAY,gBACtB,KAAK,KAAK,SAAW,iBAlB3B,QAAA,cAAA,wHAuBA,4BAA0B,CACxB,KAAM,IAAI,OAAM,6EAAiF,CACnG,CAEA,0BAAwB,CACtB,KAAM,IAAI,OAAM,2EAA+E,CACjG,CAEA,yBAAuB,CACrB,KAAM,IAAI,OAAM,0EAA8E,CAChG",
  "names": []
}
