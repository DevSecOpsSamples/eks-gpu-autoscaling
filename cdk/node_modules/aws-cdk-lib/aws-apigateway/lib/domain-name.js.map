{
  "version": 3,
  "sources": ["domain-name.ts"],
  "sourcesContent": ["import * as acm from '../../aws-certificatemanager';\nimport { IBucket } from '../../aws-s3';\nimport { IResource, Names, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnDomainName } from './apigateway.generated';\nimport { BasePathMapping, BasePathMappingOptions } from './base-path-mapping';\nimport { EndpointType, IRestApi } from './restapi';\n\n/**\n * The minimum version of the SSL protocol that you want API Gateway to use for HTTPS connections.\n */\nexport enum SecurityPolicy {\n  /** Cipher suite TLS 1.0 */\n  TLS_1_0 = 'TLS_1_0',\n\n  /** Cipher suite TLS 1.2 */\n  TLS_1_2 = 'TLS_1_2',\n}\n\nexport interface DomainNameOptions {\n  /**\n   * The custom domain name for your API. Uppercase letters are not supported.\n   */\n  readonly domainName: string;\n\n  /**\n   * The reference to an AWS-managed certificate for use by the edge-optimized\n   * endpoint for the domain name. For \"EDGE\" domain names, the certificate\n   * needs to be in the US East (N. Virginia) region.\n   */\n  readonly certificate: acm.ICertificate;\n\n  /**\n   * The type of endpoint for this DomainName.\n   * @default REGIONAL\n   */\n  readonly endpointType?: EndpointType;\n\n  /**\n   * The Transport Layer Security (TLS) version + cipher suite for this domain name.\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-domainname.html\n   * @default SecurityPolicy.TLS_1_0\n   */\n  readonly securityPolicy?: SecurityPolicy;\n\n  /**\n   * The mutual TLS authentication configuration for a custom domain name.\n   * @default - mTLS is not configured.\n   */\n  readonly mtls?: MTLSConfig;\n\n  /**\n   * The base path name that callers of the API must provide in the URL after\n   * the domain name (e.g. `example.com/base-path`). If you specify this\n   * property, it can't be an empty string.\n   *\n   * @default - map requests from the domain root (e.g. `example.com`). If this\n   * is undefined, no additional mappings will be allowed on this domain name.\n   */\n  readonly basePath?: string;\n}\n\nexport interface DomainNameProps extends DomainNameOptions {\n  /**\n   * If specified, all requests to this domain will be mapped to the production\n   * deployment of this API. If you wish to map this domain to multiple APIs\n   * with different base paths, don't specify this option and use\n   * `addBasePathMapping`.\n   *\n   * @default - you will have to call `addBasePathMapping` to map this domain to\n   * API endpoints.\n   */\n  readonly mapping?: IRestApi;\n}\n\nexport interface IDomainName extends IResource {\n  /**\n   * The domain name (e.g. `example.com`)\n   *\n   * @attribute DomainName\n   */\n  readonly domainName: string;\n\n  /**\n   * The Route53 alias target to use in order to connect a record set to this domain through an alias.\n   *\n   * @attribute DistributionDomainName,RegionalDomainName\n   */\n  readonly domainNameAliasDomainName: string;\n\n  /**\n   * The Route53 hosted zone ID to use in order to connect a record set to this domain through an alias.\n   *\n   * @attribute DistributionHostedZoneId,RegionalHostedZoneId\n   */\n  readonly domainNameAliasHostedZoneId: string;\n}\n\nexport class DomainName extends Resource implements IDomainName {\n\n  /**\n   * Imports an existing domain name.\n   */\n  public static fromDomainNameAttributes(scope: Construct, id: string, attrs: DomainNameAttributes): IDomainName {\n    class Import extends Resource implements IDomainName {\n      public readonly domainName = attrs.domainName;\n      public readonly domainNameAliasDomainName = attrs.domainNameAliasTarget;\n      public readonly domainNameAliasHostedZoneId = attrs.domainNameAliasHostedZoneId;\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly domainName: string;\n  public readonly domainNameAliasDomainName: string;\n  public readonly domainNameAliasHostedZoneId: string;\n  private readonly basePaths = new Set<string | undefined>();\n\n  constructor(scope: Construct, id: string, props: DomainNameProps) {\n    super(scope, id);\n\n    const endpointType = props.endpointType || EndpointType.REGIONAL;\n    const edge = endpointType === EndpointType.EDGE;\n\n    if (!Token.isUnresolved(props.domainName) && /[A-Z]/.test(props.domainName)) {\n      throw new Error(`Domain name does not support uppercase letters. Got: ${props.domainName}`);\n    }\n\n    const mtlsConfig = this.configureMTLS(props.mtls);\n    const resource = new CfnDomainName(this, 'Resource', {\n      domainName: props.domainName,\n      certificateArn: edge ? props.certificate.certificateArn : undefined,\n      regionalCertificateArn: edge ? undefined : props.certificate.certificateArn,\n      endpointConfiguration: { types: [endpointType] },\n      mutualTlsAuthentication: mtlsConfig,\n      securityPolicy: props.securityPolicy,\n    });\n\n    this.domainName = resource.ref;\n\n    this.domainNameAliasDomainName = edge\n      ? resource.attrDistributionDomainName\n      : resource.attrRegionalDomainName;\n\n    this.domainNameAliasHostedZoneId = edge\n      ? resource.attrDistributionHostedZoneId\n      : resource.attrRegionalHostedZoneId;\n\n    if (props.mapping) {\n      this.addBasePathMapping(props.mapping, {\n        basePath: props.basePath,\n      });\n    }\n  }\n\n  /**\n   * Maps this domain to an API endpoint.\n   * @param targetApi That target API endpoint, requests will be mapped to the deployment stage.\n   * @param options Options for mapping to base path with or without a stage\n   */\n  public addBasePathMapping(targetApi: IRestApi, options: BasePathMappingOptions = { }) {\n    if (this.basePaths.has(undefined)) {\n      throw new Error('This domain name already has an empty base path. No additional base paths are allowed.');\n    }\n    this.basePaths.add(options.basePath);\n    const basePath = options.basePath || '/';\n    const id = `Map:${basePath}=>${Names.nodeUniqueId(targetApi.node)}`;\n    return new BasePathMapping(this, id, {\n      domainName: this,\n      restApi: targetApi,\n      ...options,\n    });\n  }\n\n  private configureMTLS(mtlsConfig?: MTLSConfig): CfnDomainName.MutualTlsAuthenticationProperty | undefined {\n    if (!mtlsConfig) return undefined;\n    return {\n      truststoreUri: mtlsConfig.bucket.s3UrlForObject(mtlsConfig.key),\n      truststoreVersion: mtlsConfig.version,\n    };\n  }\n}\n\nexport interface DomainNameAttributes {\n  /**\n   * The domain name (e.g. `example.com`)\n   */\n  readonly domainName: string;\n\n  /**\n   * The Route53 alias target to use in order to connect a record set to this domain through an alias.\n   */\n  readonly domainNameAliasTarget: string;\n\n  /**\n   * The Route53 hosted zone ID to use in order to connect a record set to this domain through an alias.\n   */\n  readonly domainNameAliasHostedZoneId: string;\n}\n\n/**\n * The mTLS authentication configuration for a custom domain name.\n */\nexport interface MTLSConfig {\n  /**\n   * The bucket that the trust store is hosted in.\n   */\n  readonly bucket: IBucket;\n\n  /**\n   * The key in S3 to look at for the trust store.\n   */\n  readonly key: string;\n\n  /**\n   *  The version of the S3 object that contains your truststore.\n   *  To specify a version, you must have versioning enabled for the S3 bucket.\n   *  @default - latest version\n   */\n  readonly version?: string;\n}\n"],
  "mappings": "wOAEA,OAAA,QAAA,YAAA,EAEA,uBAAA,QAAA,wBAAA,EACA,oBAAA,QAAA,qBAAA,EACA,UAAA,QAAA,WAAA,EAKA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAExB,gBAAA,QAAA,UAGA,gBAAA,QAAA,SACF,GANY,eAAA,QAAA,gBAAA,SAAA,eAAc,CAAA,EAAA,EAuF1B,MAAa,kBAAmB,QAAA,QAAQ,CAoBtC,YAAY,MAAkB,GAAY,MAAsB,CAC9D,MAAM,MAAO,EAAE,EAHA,KAAA,UAAY,GAAI,+EAK/B,KAAM,cAAe,MAAM,cAAgB,UAAA,aAAa,SAClD,KAAO,eAAiB,UAAA,aAAa,KAE3C,GAAI,CAAC,OAAA,MAAM,aAAa,MAAM,UAAU,GAAK,QAAQ,KAAK,MAAM,UAAU,EACxE,KAAM,IAAI,OAAM,wDAAwD,MAAM,YAAY,EAG5F,KAAM,YAAa,KAAK,cAAc,MAAM,IAAI,EAC1C,SAAW,GAAI,wBAAA,cAAc,KAAM,WAAY,CACnD,WAAY,MAAM,WAClB,eAAgB,KAAO,MAAM,YAAY,eAAiB,OAC1D,uBAAwB,KAAO,OAAY,MAAM,YAAY,eAC7D,sBAAuB,CAAE,MAAO,CAAC,YAAY,CAAC,EAC9C,wBAAyB,WACzB,eAAgB,MAAM,eACvB,EAED,KAAK,WAAa,SAAS,IAE3B,KAAK,0BAA4B,KAC7B,SAAS,2BACT,SAAS,uBAEb,KAAK,4BAA8B,KAC/B,SAAS,6BACT,SAAS,yBAET,MAAM,SACR,KAAK,mBAAmB,MAAM,QAAS,CACrC,SAAU,MAAM,SACjB,QAhDS,0BAAyB,MAAkB,GAAY,MAA2B,gFAC9F,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,WAAa,MAAM,WACnB,KAAA,0BAA4B,MAAM,sBAClC,KAAA,4BAA8B,MAAM,2BACtD,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,EAkDtB,mBAAmB,UAAqB,QAAkC,CAAA,EAAG,CAClF,6JAAI,KAAK,UAAU,IAAI,MAAS,EAC9B,KAAM,IAAI,OAAM,wFAAwF,EAE1G,KAAK,UAAU,IAAI,QAAQ,QAAQ,EAEnC,KAAM,IAAK,OADM,QAAQ,UAAY,QACN,OAAA,MAAM,aAAa,UAAU,IAAI,IAChE,MAAO,IAAI,qBAAA,gBAAgB,KAAM,GAAI,CACnC,WAAY,KACZ,QAAS,aACN,QACJ,EAGK,cAAc,WAAuB,CAC3C,GAAI,EAAC,WACL,MAAO,CACL,cAAe,WAAW,OAAO,eAAe,WAAW,GAAG,EAC9D,kBAAmB,WAAW,UAhFpC,QAAA,WAAA",
  "names": []
}
