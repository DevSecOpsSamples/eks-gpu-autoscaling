{
  "version": 3,
  "sources": ["integration.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { Lazy, Duration } from '../../core';\nimport { Method } from './method';\nimport { IVpcLink, VpcLink } from './vpc-link';\n\nexport interface IntegrationOptions {\n  /**\n   * A list of request parameters whose values are to be cached. It determines\n   * request parameters that will make it into the cache key.\n   */\n  readonly cacheKeyParameters?: string[];\n\n  /**\n   * An API-specific tag group of related cached parameters.\n   */\n  readonly cacheNamespace?: string;\n\n  /**\n   * Specifies how to handle request payload content type conversions.\n   *\n   * @default none if this property isn't defined, the request payload is passed\n   * through from the method request to the integration request without\n   * modification, provided that the `passthroughBehaviors` property is\n   * configured to support payload pass-through.\n   */\n  readonly contentHandling?: ContentHandling;\n\n  /**\n   * An IAM role that API Gateway assumes.\n   *\n   * Mutually exclusive with `credentialsPassThrough`.\n   *\n   * @default A role is not assumed\n   */\n  readonly credentialsRole?: iam.IRole;\n\n  /**\n   * Requires that the caller's identity be passed through from the request.\n   *\n   * @default Caller identity is not passed through\n   */\n  readonly credentialsPassthrough?: boolean;\n\n  /**\n   * Specifies the pass-through behavior for incoming requests based on the\n   * Content-Type header in the request, and the available mapping templates\n   * specified as the requestTemplates property on the Integration resource.\n   * There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and\n   * NEVER.\n   */\n  readonly passthroughBehavior?: PassthroughBehavior\n\n  /**\n   * The request parameters that API Gateway sends with the backend request.\n   * Specify request parameters as key-value pairs (string-to-string\n   * mappings), with a destination as the key and a source as the value.\n   *\n   * Specify the destination by using the following pattern\n   * integration.request.location.name, where location is querystring, path,\n   * or header, and name is a valid, unique parameter name.\n   *\n   * The source must be an existing method request parameter or a static\n   * value. You must enclose static values in single quotation marks and\n   * pre-encode these values based on their destination in the request.\n   */\n  readonly requestParameters?: { [dest: string]: string };\n\n  /**\n   * A map of Apache Velocity templates that are applied on the request\n   * payload. The template that API Gateway uses is based on the value of the\n   * Content-Type header that's sent by the client. The content type value is\n   * the key, and the template is the value (specified as a string), such as\n   * the following snippet:\n   *\n   * ```\n   *   { \"application/json\": \"{ \\\"statusCode\\\": 200 }\" }\n   * ```\n   *\n   * @see http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n   */\n  readonly requestTemplates?: { [contentType: string]: string };\n\n  /**\n   * The maximum amount of time an integration will run before it returns without a response.\n   * Must be between 50 milliseconds and 29 seconds.\n   *\n   * @default Duration.seconds(29)\n   */\n  readonly timeout?: Duration;\n\n  /**\n   * The response that API Gateway provides after a method's backend completes\n   * processing a request. API Gateway intercepts the response from the\n   * backend so that you can control how API Gateway surfaces backend\n   * responses. For example, you can map the backend status codes to codes\n   * that you define.\n   */\n  readonly integrationResponses?: IntegrationResponse[];\n\n  /**\n   * The type of network connection to the integration endpoint.\n   * @default - ConnectionType.VPC_LINK if `vpcLink` property is configured; ConnectionType.Internet otherwise.\n   */\n  readonly connectionType?: ConnectionType;\n\n  /**\n   * The VpcLink used for the integration.\n   * Required if connectionType is VPC_LINK\n   */\n  readonly vpcLink?: IVpcLink;\n}\n\nexport interface IntegrationProps {\n  /**\n   * Specifies an API method integration type.\n   */\n  readonly type: IntegrationType;\n\n  /**\n   * The Uniform Resource Identifier (URI) for the integration.\n   *\n   * - If you specify HTTP for the `type` property, specify the API endpoint URL.\n   * - If you specify MOCK for the `type` property, don't specify this property.\n   * - If you specify AWS for the `type` property, specify an AWS service that\n   *   follows this form: `arn:partition:apigateway:region:subdomain.service|service:path|action/service_api.`\n   *   For example, a Lambda function URI follows this form:\n   *   arn:partition:apigateway:region:lambda:path/path. The path is usually in the\n   *   form /2015-03-31/functions/LambdaFunctionARN/invocations.\n   *\n   * @see https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#uri\n   */\n  readonly uri?: any;\n\n  /**\n   * The integration's HTTP method type.\n   * Required unless you use a MOCK integration.\n   */\n  readonly integrationHttpMethod?: string;\n\n  /**\n   * Integration options.\n   */\n  readonly options?: IntegrationOptions;\n}\n\n/**\n * Result of binding an Integration to a Method.\n */\nexport interface IntegrationConfig {\n  /**\n   * Integration options.\n   * @default - no integration options\n   */\n  readonly options?: IntegrationOptions;\n\n  /**\n   * Specifies an API method integration type.\n   */\n  readonly type: IntegrationType;\n\n  /**\n   * The Uniform Resource Identifier (URI) for the integration.\n   * @see https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#uri\n   * @default - no URI. Usually applies to MOCK integration\n   */\n  readonly uri?: string;\n\n  /**\n   * The integration's HTTP method type.\n   * @default - no integration method specified.\n   */\n  readonly integrationHttpMethod?: string;\n\n  /**\n   * This value is included in computing the Deployment's fingerprint. When the fingerprint\n   * changes, a new deployment is triggered.\n   * This property should contain values associated with the Integration that upon changing\n   * should trigger a fresh the Deployment needs to be refreshed.\n   * @default undefined deployments are not triggered for any change to this integration.\n   */\n  readonly deploymentToken?: string;\n}\n\n/**\n * Base class for backend integrations for an API Gateway method.\n *\n * Use one of the concrete classes such as `MockIntegration`, `AwsIntegration`, `LambdaIntegration`\n * or implement on your own by specifying the set of props.\n */\nexport class Integration {\n  constructor(private readonly props: IntegrationProps) {\n    const options = this.props.options || { };\n    if (options.credentialsPassthrough !== undefined && options.credentialsRole !== undefined) {\n      throw new Error('\\'credentialsPassthrough\\' and \\'credentialsRole\\' are mutually exclusive');\n    }\n\n    if (options.connectionType === ConnectionType.VPC_LINK && options.vpcLink === undefined) {\n      throw new Error('\\'connectionType\\' of VPC_LINK requires \\'vpcLink\\' prop to be set');\n    }\n\n    if (options.connectionType === ConnectionType.INTERNET && options.vpcLink !== undefined) {\n      throw new Error('cannot set \\'vpcLink\\' where \\'connectionType\\' is INTERNET');\n    }\n\n    if (options.timeout && !options.timeout.isUnresolved() && (options.timeout.toMilliseconds() < 50 || options.timeout.toMilliseconds() > 29000)) {\n      throw new Error('Integration timeout must be between 50 milliseconds and 29 seconds.');\n    }\n  }\n\n  /**\n   * Can be overridden by subclasses to allow the integration to interact with the method\n   * being integrated, access the REST API object, method ARNs, etc.\n   */\n  public bind(_method: Method): IntegrationConfig {\n    let uri = this.props.uri;\n    const options = this.props.options;\n\n    if (options?.connectionType === ConnectionType.VPC_LINK && uri === undefined) {\n      uri = Lazy.string({\n        // needs to be a lazy since the targets can be added to the VpcLink construct after initialization.\n        produce: () => {\n          const vpcLink = options.vpcLink;\n          if (vpcLink instanceof VpcLink) {\n            const targets = vpcLink._targetDnsNames;\n            if (targets.length > 1) {\n              throw new Error(\"'uri' is required when there are more than one NLBs in the VPC Link\");\n            } else {\n              return `http://${targets[0]}`;\n            }\n          } else {\n            throw new Error(\"'uri' is required when the 'connectionType' is VPC_LINK\");\n          }\n        },\n      });\n    }\n    return {\n      options: {\n        ...options,\n        connectionType: options?.vpcLink ? ConnectionType.VPC_LINK : options?.connectionType,\n      },\n      type: this.props.type,\n      uri,\n      integrationHttpMethod: this.props.integrationHttpMethod,\n    };\n  }\n}\n\nexport enum ContentHandling {\n  /**\n   * Converts a request payload from a base64-encoded string to a binary blob.\n   */\n  CONVERT_TO_BINARY = 'CONVERT_TO_BINARY',\n\n  /**\n   * Converts a request payload from a binary blob to a base64-encoded string.\n   */\n  CONVERT_TO_TEXT = 'CONVERT_TO_TEXT'\n}\n\nexport enum IntegrationType {\n  /**\n   * For integrating the API method request with an AWS service action,\n   * including the Lambda function-invoking action. With the Lambda\n   * function-invoking action, this is referred to as the Lambda custom\n   * integration. With any other AWS service action, this is known as AWS\n   * integration.\n   */\n  AWS = 'AWS',\n\n  /**\n   * For integrating the API method request with the Lambda function-invoking\n   * action with the client request passed through as-is. This integration is\n   * also referred to as the Lambda proxy integration\n   */\n  AWS_PROXY = 'AWS_PROXY',\n\n  /**\n   * For integrating the API method request with an HTTP endpoint, including a\n   * private HTTP endpoint within a VPC. This integration is also referred to\n   * as the HTTP custom integration.\n   */\n  HTTP = 'HTTP',\n\n  /**\n   * For integrating the API method request with an HTTP endpoint, including a\n   * private HTTP endpoint within a VPC, with the client request passed\n   * through as-is. This is also referred to as the HTTP proxy integration\n   */\n  HTTP_PROXY = 'HTTP_PROXY',\n\n  /**\n   * For integrating the API method request with API Gateway as a \"loop-back\"\n   * endpoint without invoking any backend.\n   */\n  MOCK = 'MOCK'\n}\n\nexport enum PassthroughBehavior {\n  /**\n   * Passes the request body for unmapped content types through to the\n   * integration back end without transformation.\n   */\n  WHEN_NO_MATCH = 'WHEN_NO_MATCH',\n\n  /**\n   * Rejects unmapped content types with an HTTP 415 'Unsupported Media Type'\n   * response\n   */\n  NEVER = 'NEVER',\n\n  /**\n   * Allows pass-through when the integration has NO content types mapped to\n   * templates. However if there is at least one content type defined,\n   * unmapped content types will be rejected with the same 415 response.\n   */\n  WHEN_NO_TEMPLATES = 'WHEN_NO_TEMPLATES'\n}\n\nexport enum ConnectionType {\n  /**\n   * For connections through the public routable internet\n   */\n  INTERNET = 'INTERNET',\n\n  /**\n   * For private connections between API Gateway and a network load balancer in a VPC\n   */\n  VPC_LINK = 'VPC_LINK'\n}\n\nexport interface IntegrationResponse {\n  /**\n   * Specifies the regular expression (regex) pattern used to choose an integration response based on the response from\n   * the back end. For example, if the success response returns nothing and the error response returns some string, you\n   * could use the ``.+`` regex to match error response. However, make sure that the error response does not contain any\n   * newline (``\\n``) character in such cases. If the back end is an AWS Lambda function, the AWS Lambda function error\n   * header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched.\n   *\n   * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-integration-settings-integration-response.html\n   */\n  readonly selectionPattern?: string;\n\n  /**\n   * The status code that API Gateway uses to map the integration response to\n   * a MethodResponse status code.\n   */\n  readonly statusCode: string;\n\n  /**\n   * Specifies how to handle request payload content type conversions.\n   *\n   * @default none the request payload is passed through from the method\n   * request to the integration request without modification.\n   */\n  readonly contentHandling?: ContentHandling;\n\n  /**\n   * The response parameters from the backend response that API Gateway sends\n   * to the method response.\n   *\n   * Use the destination as the key and the source as the value:\n   *\n   * - The destination must be an existing response parameter in the\n   *   MethodResponse property.\n   * - The source must be an existing method request parameter or a static\n   *   value. You must enclose static values in single quotation marks and\n   *   pre-encode these values based on the destination specified in the\n   *   request.\n   *\n   * @see http://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n   */\n  readonly responseParameters?: { [destination: string]: string };\n\n  /**\n   * The templates that are used to transform the integration response body.\n   * Specify templates as key-value pairs, with a content type as the key and\n   * a template as the value.\n   *\n   * @see http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n   */\n  readonly responseTemplates?: { [contentType: string]: string };\n}\n"],
  "mappings": "qTACA,OAAA,QAAA,YAAA,EAEA,WAAA,QAAA,YAAA,EA0LA,MAAa,WAAW,CACtB,YAA6B,MAAuB,CAAvB,KAAA,MAAA,iFAC3B,KAAM,SAAU,KAAK,MAAM,SAAW,CAAA,EACtC,GAAI,QAAQ,yBAA2B,QAAa,QAAQ,kBAAoB,OAC9E,KAAM,IAAI,OAAM,uEAA2E,EAG7F,GAAI,QAAQ,iBAAmB,eAAe,UAAY,QAAQ,UAAY,OAC5E,KAAM,IAAI,OAAM,gEAAoE,EAGtF,GAAI,QAAQ,iBAAmB,eAAe,UAAY,QAAQ,UAAY,OAC5E,KAAM,IAAI,OAAM,yDAA6D,EAG/E,GAAI,QAAQ,SAAW,CAAC,QAAQ,QAAQ,aAAY,GAAO,SAAQ,QAAQ,eAAc,EAAK,IAAM,QAAQ,QAAQ,eAAc,EAAK,MACrI,KAAM,IAAI,OAAM,qEAAqE,EAQlF,KAAK,QAAe,oEACzB,GAAI,KAAM,KAAK,MAAM,IACrB,KAAM,SAAU,KAAK,MAAM,QAE3B,MAAI,UAAO,KAAA,OAAP,QAAS,kBAAmB,eAAe,UAAY,MAAQ,QACjE,KAAM,OAAA,KAAK,OAAO,CAEhB,QAAS,IAAK,CACZ,KAAM,SAAU,QAAQ,QACxB,GAAI,kBAAmB,YAAA,QAAS,CAC9B,KAAM,SAAU,QAAQ,gBACxB,GAAI,QAAQ,OAAS,EACnB,KAAM,IAAI,OAAM,qEAAqE,EAErF,MAAO,UAAU,QAAQ,SAG3B,MAAM,IAAI,OAAM,yDAAyD,CAE7E,EACD,GAEI,CACL,QAAS,IACJ,QACH,eAAgB,SAAO,MAAP,QAAS,QAAU,eAAe,SAAW,SAAO,KAAA,OAAP,QAAS,gBAExE,KAAM,KAAK,MAAM,KACjB,IACA,sBAAuB,KAAK,MAAM,wBArDxC,QAAA,YAAA,kHA0DA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAIzB,iBAAA,kBAAA,oBAKA,iBAAA,gBAAA,iBACF,GAVY,gBAAA,QAAA,iBAAA,SAAA,gBAAe,CAAA,EAAA,EAY3B,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAQzB,iBAAA,IAAA,MAOA,iBAAA,UAAA,YAOA,iBAAA,KAAA,OAOA,iBAAA,WAAA,aAMA,iBAAA,KAAA,MACF,GApCY,gBAAA,QAAA,iBAAA,SAAA,gBAAe,CAAA,EAAA,EAsC3B,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAK7B,qBAAA,cAAA,gBAMA,qBAAA,MAAA,QAOA,qBAAA,kBAAA,mBACF,GAnBY,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,CAAA,EAAA,EAqB/B,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAIxB,gBAAA,SAAA,WAKA,gBAAA,SAAA,UACF,GAVY,eAAA,QAAA,gBAAA,SAAA,eAAc,CAAA,EAAA",
  "names": []
}
