{
  "version": 3,
  "sources": ["cognito.ts"],
  "sourcesContent": ["import * as cognito from '../../../aws-cognito';\nimport { Duration, Lazy, Names, Stack } from '../../../core';\nimport { Construct } from 'constructs';\nimport { CfnAuthorizer } from '../apigateway.generated';\nimport { Authorizer, IAuthorizer } from '../authorizer';\nimport { AuthorizationType } from '../method';\nimport { IRestApi } from '../restapi';\n\n/**\n * Properties for CognitoUserPoolsAuthorizer\n */\nexport interface CognitoUserPoolsAuthorizerProps {\n  /**\n   * An optional human friendly name for the authorizer. Note that, this is not the primary identifier of the authorizer.\n   *\n   * @default - the unique construct ID\n   */\n  readonly authorizerName?: string;\n\n  /**\n   * The user pools to associate with this authorizer.\n   */\n  readonly cognitoUserPools: cognito.IUserPool[];\n\n  /**\n   * How long APIGateway should cache the results. Max 1 hour.\n   * Disable caching by setting this to 0.\n   *\n   * @default Duration.minutes(5)\n   */\n  readonly resultsCacheTtl?: Duration;\n\n  /**\n   * The request header mapping expression for the bearer token. This is typically passed as part of the header, in which case\n   * this should be `method.request.header.Authorizer` where Authorizer is the header containing the bearer token.\n   * @see https://docs.aws.amazon.com/apigateway/api-reference/link-relation/authorizer-create/#identitySource\n   * @default `IdentitySource.header('Authorization')`\n   */\n  readonly identitySource?: string;\n}\n\n/**\n * Cognito user pools based custom authorizer\n *\n * @resource AWS::ApiGateway::Authorizer\n */\nexport class CognitoUserPoolsAuthorizer extends Authorizer implements IAuthorizer {\n  /**\n   * The id of the authorizer.\n   * @attribute\n   */\n  public readonly authorizerId: string;\n\n  /**\n   * The ARN of the authorizer to be used in permission policies, such as IAM and resource-based grants.\n   * @attribute\n   */\n  public readonly authorizerArn: string;\n\n  /**\n   * The authorization type of this authorizer.\n   */\n  public readonly authorizationType?: AuthorizationType;\n\n  private restApiId?: string;\n\n  constructor(scope: Construct, id: string, props: CognitoUserPoolsAuthorizerProps) {\n    super(scope, id);\n\n    const restApiId = this.lazyRestApiId();\n    const resource = new CfnAuthorizer(this, 'Resource', {\n      name: props.authorizerName ?? Names.uniqueId(this),\n      restApiId,\n      type: 'COGNITO_USER_POOLS',\n      providerArns: props.cognitoUserPools.map(userPool => userPool.userPoolArn),\n      authorizerResultTtlInSeconds: props.resultsCacheTtl?.toSeconds(),\n      identitySource: props.identitySource || 'method.request.header.Authorization',\n    });\n\n    this.authorizerId = resource.ref;\n    this.authorizerArn = Stack.of(this).formatArn({\n      service: 'execute-api',\n      resource: restApiId,\n      resourceName: `authorizers/${this.authorizerId}`,\n    });\n    this.authorizationType = AuthorizationType.COGNITO;\n  }\n\n  /**\n   * Attaches this authorizer to a specific REST API.\n   * @internal\n   */\n  public _attachToApi(restApi: IRestApi): void {\n    if (this.restApiId && this.restApiId !== restApi.restApiId) {\n      throw new Error('Cannot attach authorizer to two different rest APIs');\n    }\n\n    this.restApiId = restApi.restApiId;\n  }\n\n  /**\n   * Returns a token that resolves to the Rest Api Id at the time of synthesis.\n   * Throws an error, during token resolution, if no RestApi is attached to this authorizer.\n   */\n  private lazyRestApiId() {\n    return Lazy.string({\n      produce: () => {\n        if (!this.restApiId) {\n          throw new Error(`Authorizer (${this.node.path}) must be attached to a RestApi`);\n        }\n        return this.restApiId;\n      },\n    });\n  }\n}\n"],
  "mappings": "oOACA,OAAA,QAAA,eAAA,EAEA,uBAAA,QAAA,yBAAA,EACA,aAAA,QAAA,eAAA,EACA,SAAA,QAAA,WAAA,EAyCA,MAAa,kCAAmC,cAAA,UAAU,CAoBxD,YAAY,MAAkB,GAAY,MAAsC,WAC9E,MAAM,MAAO,EAAE,4FAEf,KAAM,WAAY,KAAK,cAAa,EAC9B,SAAW,GAAI,wBAAA,cAAc,KAAM,WAAY,CACnD,KAAI,IAAE,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,OAAA,MAAM,SAAS,IAAI,EACjD,UACA,KAAM,qBACN,aAAc,MAAM,iBAAiB,IAAI,UAAY,SAAS,WAAW,EACzE,6BAA4B,IAAE,MAAM,mBAAe,MAAA,KAAA,OAAA,OAAA,GAAE,UAAS,EAC9D,eAAgB,MAAM,gBAAkB,sCACzC,EAED,KAAK,aAAe,SAAS,IAC7B,KAAK,cAAgB,OAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CAC5C,QAAS,cACT,SAAU,UACV,aAAc,eAAe,KAAK,eACnC,EACD,KAAK,kBAAoB,SAAA,kBAAkB,QAOtC,aAAa,QAAiB,CACnC,GAAI,KAAK,WAAa,KAAK,YAAc,QAAQ,UAC/C,KAAM,IAAI,OAAM,qDAAqD,EAGvE,KAAK,UAAY,QAAQ,UAOnB,eAAa,CACnB,MAAO,QAAA,KAAK,OAAO,CACjB,QAAS,IAAK,CACZ,GAAI,CAAC,KAAK,UACR,KAAM,IAAI,OAAM,eAAe,KAAK,KAAK,qCAAqC,EAEhF,MAAO,MAAK,SACd,EACD,GAlEL,QAAA,2BAAA",
  "names": []
}
