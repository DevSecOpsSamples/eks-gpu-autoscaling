{
  "version": 3,
  "sources": ["target-tracking-scaling-policy.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport { Duration } from '../../core';\nimport { Construct } from 'constructs';\nimport { IAutoScalingGroup } from './auto-scaling-group';\nimport { CfnScalingPolicy } from './autoscaling.generated';\n\n/**\n * Base interface for target tracking props\n *\n * Contains the attributes that are common to target tracking policies,\n * except the ones relating to the metric and to the scalable target.\n *\n * This interface is reused by more specific target tracking props objects.\n */\nexport interface BaseTargetTrackingProps {\n  /**\n   * Indicates whether scale in by the target tracking policy is disabled.\n   *\n   * If the value is true, scale in is disabled and the target tracking policy\n   * won't remove capacity from the autoscaling group. Otherwise, scale in is\n   * enabled and the target tracking policy can remove capacity from the\n   * group.\n   *\n   * @default false\n   */\n  readonly disableScaleIn?: boolean;\n\n  /**\n   * Period after a scaling completes before another scaling activity can start.\n   *\n   * @default - The default cooldown configured on the AutoScalingGroup.\n   */\n  readonly cooldown?: Duration;\n\n  /**\n   * Estimated time until a newly launched instance can send metrics to CloudWatch.\n   *\n   * @default - Same as the cooldown.\n   */\n  readonly estimatedInstanceWarmup?: Duration;\n}\n\n/**\n * Properties for a Target Tracking policy that include the metric but exclude the target\n */\nexport interface BasicTargetTrackingScalingPolicyProps extends BaseTargetTrackingProps {\n  /**\n   * The target value for the metric.\n   */\n  readonly targetValue: number;\n\n  /**\n   * A predefined metric for application autoscaling\n   *\n   * The metric must track utilization. Scaling out will happen if the metric is higher than\n   * the target value, scaling in will happen in the metric is lower than the target value.\n   *\n   * Exactly one of customMetric or predefinedMetric must be specified.\n   *\n   * @default - No predefined metric.\n   */\n  readonly predefinedMetric?: PredefinedMetric;\n\n  /**\n   * A custom metric for application autoscaling\n   *\n   * The metric must track utilization. Scaling out will happen if the metric is higher than\n   * the target value, scaling in will happen in the metric is lower than the target value.\n   *\n   * Exactly one of customMetric or predefinedMetric must be specified.\n   *\n   * @default - No custom metric.\n   */\n  readonly customMetric?: cloudwatch.IMetric;\n\n  /**\n   * The resource label associated with the predefined metric\n   *\n   * Should be supplied if the predefined metric is ALBRequestCountPerTarget, and the\n   * format should be:\n   *\n   * app/<load-balancer-name>/<load-balancer-id>/targetgroup/<target-group-name>/<target-group-id>\n   *\n   * @default - No resource label.\n   */\n  readonly resourceLabel?: string;\n}\n\n/**\n * Properties for a concrete TargetTrackingPolicy\n *\n * Adds the scalingTarget.\n */\nexport interface TargetTrackingScalingPolicyProps extends BasicTargetTrackingScalingPolicyProps {\n  /*\n   * The auto scaling group\n   */\n  readonly autoScalingGroup: IAutoScalingGroup;\n}\n\nexport class TargetTrackingScalingPolicy extends Construct {\n  /**\n   * ARN of the scaling policy\n   */\n  public readonly scalingPolicyArn: string;\n\n  /**\n   * The resource object\n   */\n  private resource: CfnScalingPolicy;\n\n  constructor(scope: Construct, id: string, props: TargetTrackingScalingPolicyProps) {\n    if ((props.customMetric === undefined) === (props.predefinedMetric === undefined)) {\n      throw new Error('Exactly one of \\'customMetric\\' or \\'predefinedMetric\\' must be specified.');\n    }\n\n    if (props.predefinedMetric === PredefinedMetric.ALB_REQUEST_COUNT_PER_TARGET && !props.resourceLabel) {\n      throw new Error('When tracking the ALBRequestCountPerTarget metric, the ALB identifier must be supplied in resourceLabel');\n    }\n\n    if (props.customMetric && !props.customMetric.toMetricConfig().metricStat) {\n      throw new Error('Only direct metrics are supported for Target Tracking. Use Step Scaling or supply a Metric object.');\n    }\n\n    super(scope, id);\n\n    this.resource = new CfnScalingPolicy(this, 'Resource', {\n      policyType: 'TargetTrackingScaling',\n      autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,\n      cooldown: props.cooldown && props.cooldown.toSeconds().toString(),\n      estimatedInstanceWarmup: props.estimatedInstanceWarmup && props.estimatedInstanceWarmup.toSeconds(),\n      targetTrackingConfiguration: {\n        customizedMetricSpecification: renderCustomMetric(props.customMetric),\n        disableScaleIn: props.disableScaleIn,\n        predefinedMetricSpecification: props.predefinedMetric !== undefined ? {\n          predefinedMetricType: props.predefinedMetric,\n          resourceLabel: props.resourceLabel,\n        } : undefined,\n        targetValue: props.targetValue,\n      },\n    });\n\n    this.scalingPolicyArn = this.resource.ref;\n  }\n}\n\nfunction renderCustomMetric(metric?: cloudwatch.IMetric): CfnScalingPolicy.CustomizedMetricSpecificationProperty | undefined {\n  if (!metric) { return undefined; }\n  const c = metric.toMetricConfig().metricStat!;\n\n  return {\n    dimensions: c.dimensions,\n    metricName: c.metricName,\n    namespace: c.namespace,\n    statistic: c.statistic,\n    unit: c.unitFilter,\n  };\n}\n\n/**\n * One of the predefined autoscaling metrics\n */\nexport enum PredefinedMetric {\n  /**\n   * Average CPU utilization of the Auto Scaling group\n   */\n  ASG_AVERAGE_CPU_UTILIZATION = 'ASGAverageCPUUtilization',\n\n  /**\n   * Average number of bytes received on all network interfaces by the Auto Scaling group\n   */\n  ASG_AVERAGE_NETWORK_IN = 'ASGAverageNetworkIn',\n\n  /**\n   * Average number of bytes sent out on all network interfaces by the Auto Scaling group\n   */\n  ASG_AVERAGE_NETWORK_OUT = 'ASGAverageNetworkOut',\n\n  /**\n   * Number of requests completed per target in an Application Load Balancer target group\n   *\n   * Specify the ALB to look at in the `resourceLabel` field.\n   */\n  ALB_REQUEST_COUNT_PER_TARGET = 'ALBRequestCountPerTarget',\n}\n"],
  "mappings": "2PAEA,aAAA,QAAA,YAAA,EAEA,wBAAA,QAAA,yBAAA,EAgGA,MAAa,mCAAoC,cAAA,SAAS,CAWxD,YAAY,MAAkB,GAAY,MAAuC,CAC/E,+FAAK,MAAM,eAAiB,QAAgB,OAAM,mBAAqB,QACrE,KAAM,IAAI,OAAM,wEAA4E,EAG9F,GAAI,MAAM,mBAAqB,iBAAiB,8BAAgC,CAAC,MAAM,cACrF,KAAM,IAAI,OAAM,yGAAyG,EAG3H,GAAI,MAAM,cAAgB,CAAC,MAAM,aAAa,eAAc,EAAG,WAC7D,KAAM,IAAI,OAAM,oGAAoG,EAGtH,MAAM,MAAO,EAAE,EAEf,KAAK,SAAW,GAAI,yBAAA,iBAAiB,KAAM,WAAY,CACrD,WAAY,wBACZ,qBAAsB,MAAM,iBAAiB,qBAC7C,SAAU,MAAM,UAAY,MAAM,SAAS,UAAS,EAAG,SAAQ,EAC/D,wBAAyB,MAAM,yBAA2B,MAAM,wBAAwB,UAAS,EACjG,4BAA6B,CAC3B,8BAA+B,mBAAmB,MAAM,YAAY,EACpE,eAAgB,MAAM,eACtB,8BAA+B,MAAM,mBAAqB,OAAY,CACpE,qBAAsB,MAAM,iBAC5B,cAAe,MAAM,eACnB,OACJ,YAAa,MAAM,aAEtB,EAED,KAAK,iBAAmB,KAAK,SAAS,KA1C1C,QAAA,4BAAA,mKA8CA,4BAA4B,OAA2B,CACrD,GAAI,CAAC,OAAU,OACf,KAAM,GAAI,OAAO,eAAc,EAAG,WAElC,MAAO,CACL,WAAY,EAAE,WACd,WAAY,EAAE,WACd,UAAW,EAAE,UACb,UAAW,EAAE,UACb,KAAM,EAAE,WAEZ,CAKA,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAI1B,kBAAA,4BAAA,2BAKA,kBAAA,uBAAA,sBAKA,kBAAA,wBAAA,uBAOA,kBAAA,6BAAA,0BACF,GAtBY,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,CAAA,EAAA",
  "names": []
}
