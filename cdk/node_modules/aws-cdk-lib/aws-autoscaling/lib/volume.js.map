{
  "version": 3,
  "sources": ["volume.ts"],
  "sourcesContent": ["// Unfortunately a mostly-literal copy from ec2/volume.ts because this feature\n// existed first in the \"autoscaling\" module before it existed in the \"ec2\"\n// module so we couldn't standardize the structs in the right way.\n\n/**\n * Block device\n */\nexport interface BlockDevice {\n  /**\n   * The device name exposed to the EC2 instance\n   *\n   * Supply a value like `/dev/sdh`, `xvdh`.\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html\n   */\n  readonly deviceName: string;\n\n  /**\n   * Defines the block device volume, to be either an Amazon EBS volume or an ephemeral instance store volume\n   *\n   * Supply a value like `BlockDeviceVolume.ebs(15)`, `BlockDeviceVolume.ephemeral(0)`.\n   */\n  readonly volume: BlockDeviceVolume;\n\n  /**\n   * If false, the device mapping will be suppressed.\n   * If set to false for the root device, the instance might fail the Amazon EC2 health check.\n   * Amazon EC2 Auto Scaling launches a replacement instance if the instance fails the health check.\n   *\n   * @default true - device mapping is left untouched\n   * @deprecated use `BlockDeviceVolume.noDevice()` as the volume to supress a mapping.\n   *\n   */\n  readonly mappingEnabled?: boolean;\n}\n\n/**\n * Base block device options for an EBS volume\n */\nexport interface EbsDeviceOptionsBase {\n  /**\n   * Indicates whether to delete the volume when the instance is terminated.\n   *\n   * @default - true for Amazon EC2 Auto Scaling, false otherwise (e.g. EBS)\n   */\n  readonly deleteOnTermination?: boolean;\n\n  /**\n   * The number of I/O operations per second (IOPS) to provision for the volume.\n   *\n   * Must only be set for {@link volumeType}: {@link EbsDeviceVolumeType.IO1}\n   *\n   * The maximum ratio of IOPS to volume size (in GiB) is 50:1, so for 5,000 provisioned IOPS,\n   * you need at least 100 GiB storage on the volume.\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\n   *\n   * @default - none, required for {@link EbsDeviceVolumeType.IO1}\n   */\n  readonly iops?: number;\n\n  /**\n   * The EBS volume type\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\n   *\n   * @default {@link EbsDeviceVolumeType.GP2}\n   */\n  readonly volumeType?: EbsDeviceVolumeType;\n}\n\n/**\n * Block device options for an EBS volume\n */\nexport interface EbsDeviceOptions extends EbsDeviceOptionsBase {\n  /**\n   * Specifies whether the EBS volume is encrypted.\n   * Encrypted EBS volumes can only be attached to instances that support Amazon EBS encryption\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\n   *\n   * @default false\n   */\n  readonly encrypted?: boolean;\n}\n\n/**\n * Block device options for an EBS volume created from a snapshot\n */\nexport interface EbsDeviceSnapshotOptions extends EbsDeviceOptionsBase {\n  /**\n   * The volume size, in Gibibytes (GiB)\n   *\n   * If you specify volumeSize, it must be equal or greater than the size of the snapshot.\n   *\n   * @default - The snapshot size\n   */\n  readonly volumeSize?: number;\n}\n\n/**\n * Properties of an EBS block device\n */\nexport interface EbsDeviceProps extends EbsDeviceSnapshotOptions {\n  /**\n   * The snapshot ID of the volume to use\n   *\n   * @default - No snapshot will be used\n   */\n  readonly snapshotId?: string;\n}\n\n/**\n * Describes a block device mapping for an EC2 instance or Auto Scaling group.\n */\nexport class BlockDeviceVolume {\n  /**\n   * @internal\n   */\n  public static _NO_DEVICE = new BlockDeviceVolume();\n\n  /**\n   * Creates a new Elastic Block Storage device\n   *\n   * @param volumeSize The volume size, in Gibibytes (GiB)\n   * @param options additional device options\n   */\n  public static ebs(volumeSize: number, options: EbsDeviceOptions = {}): BlockDeviceVolume {\n    return new this({ ...options, volumeSize });\n  }\n\n  /**\n   * Creates a new Elastic Block Storage device from an existing snapshot\n   *\n   * @param snapshotId The snapshot ID of the volume to use\n   * @param options additional device options\n   */\n  public static ebsFromSnapshot(snapshotId: string, options: EbsDeviceSnapshotOptions = {}): BlockDeviceVolume {\n    return new this({ ...options, snapshotId });\n  }\n\n  /**\n   * Creates a virtual, ephemeral device.\n   * The name will be in the form ephemeral{volumeIndex}.\n   *\n   * @param volumeIndex the volume index. Must be equal or greater than 0\n   */\n  public static ephemeral(volumeIndex: number) {\n    if (volumeIndex < 0) {\n      throw new Error(`volumeIndex must be a number starting from 0, got \"${volumeIndex}\"`);\n    }\n\n    return new this(undefined, `ephemeral${volumeIndex}`);\n  }\n\n  /**\n   * Supresses a volume mapping\n   */\n  public static noDevice() {\n    return this._NO_DEVICE;\n  }\n\n  /**\n   * @param ebsDevice EBS device info\n   * @param virtualName Virtual device name\n   */\n  protected constructor(public readonly ebsDevice?: EbsDeviceProps, public readonly virtualName?: string) {\n  }\n}\n\n/**\n * Supported EBS volume types for blockDevices\n */\nexport enum EbsDeviceVolumeType {\n  /**\n   * Magnetic\n   */\n  STANDARD = 'standard',\n\n  /**\n   *  Provisioned IOPS SSD - IO1\n   */\n  IO1 = 'io1',\n\n  /**\n   * General Purpose SSD - GP2\n   */\n  GP2 = 'gp2',\n\n  /**\n   * General Purpose SSD - GP3\n   */\n  GP3 = 'gp3',\n\n  /**\n   * Throughput Optimized HDD\n   */\n  ST1 = 'st1',\n\n  /**\n   * Cold HDD\n   */\n  SC1 = 'sc1',\n}\n"],
  "mappings": "oPAkHA,MAAa,iBAAiB,CAmD5B,YAAsC,UAA4C,YAAoB,CAAhE,KAAA,UAAA,UAA4C,KAAA,YAAA,gGAvCpE,KAAI,WAAoB,QAA4B,CAAA,EAAE,sFAC3D,GAAI,MAAK,IAAK,QAAS,UAAU,CAAE,QAS9B,iBAAgB,WAAoB,QAAoC,CAAA,EAAE,8FAC/E,GAAI,MAAK,IAAK,QAAS,UAAU,CAAE,QAS9B,WAAU,YAAmB,CACzC,GAAI,YAAc,EAChB,KAAM,IAAI,OAAM,sDAAsD,cAAc,EAGtF,MAAO,IAAI,MAAK,OAAW,YAAY,aAAa,QAMxC,WAAQ,CACpB,MAAO,MAAK,YA5ChB,QAAA,kBAAA,qIAIgB,kBAAA,WAAa,GAAI,mBAsDjC,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAI7B,qBAAA,SAAA,WAKA,qBAAA,IAAA,MAKA,qBAAA,IAAA,MAKA,qBAAA,IAAA,MAKA,qBAAA,IAAA,MAKA,qBAAA,IAAA,KACF,GA9BY,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,CAAA,EAAA",
  "names": []
}
