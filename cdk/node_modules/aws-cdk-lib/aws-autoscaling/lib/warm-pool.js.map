{
  "version": 3,
  "sources": ["warm-pool.ts"],
  "sourcesContent": ["import { Lazy, Names, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { IAutoScalingGroup } from './auto-scaling-group';\nimport { CfnWarmPool } from './autoscaling.generated';\n\n/**\n * Options for a warm pool\n */\nexport interface WarmPoolOptions {\n  /**\n   * Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in.\n   *\n   * If the value is not specified, instances in the Auto Scaling group will be terminated\n   * when the group scales in.\n   *\n   * @default false\n   */\n  readonly reuseOnScaleIn?: boolean;\n\n  /**\n   * The maximum number of instances that are allowed to be in the warm pool\n   * or in any state except Terminated for the Auto Scaling group.\n   *\n   * If the value is not specified, Amazon EC2 Auto Scaling launches and maintains\n   * the difference between the group's maximum capacity and its desired capacity.\n   *\n   * @default - max size of the Auto Scaling group\n   */\n  readonly maxGroupPreparedCapacity?: number;\n  /**\n   * The minimum number of instances to maintain in the warm pool.\n   *\n   * @default 0\n   */\n  readonly minSize?: number;\n  /**\n   * The instance state to transition to after the lifecycle actions are complete.\n   *\n   * @default PoolState.STOPPED\n   */\n  readonly poolState?: PoolState;\n}\n\n/**\n * Properties for a warm pool\n */\nexport interface WarmPoolProps extends WarmPoolOptions {\n  /**\n   * The Auto Scaling group to add the warm pool to.\n   */\n  readonly autoScalingGroup: IAutoScalingGroup;\n}\n\n/**\n * Define a warm pool\n */\nexport class WarmPool extends Resource {\n  constructor(scope: Construct, id: string, props: WarmPoolProps) {\n    super(scope, id, {\n      physicalName: Lazy.string({ produce: () => Names.uniqueId(this) }),\n    });\n\n    if (props.maxGroupPreparedCapacity && props.maxGroupPreparedCapacity < -1) {\n      throw new Error('\\'maxGroupPreparedCapacity\\' parameter should be greater than or equal to -1');\n    }\n\n    if (props.minSize && props.minSize < 0) {\n      throw new Error('\\'minSize\\' parameter should be greater than or equal to 0');\n    }\n\n    new CfnWarmPool(this, 'Resource', {\n      autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,\n      instanceReusePolicy: props.reuseOnScaleIn !== undefined ? {\n        reuseOnScaleIn: props.reuseOnScaleIn,\n      } : undefined,\n      maxGroupPreparedCapacity: props.maxGroupPreparedCapacity,\n      minSize: props.minSize,\n      poolState: props.poolState,\n    });\n  }\n}\n\n/**\n * The instance state in the warm pool\n */\nexport enum PoolState {\n  /**\n   * Hibernated\n   *\n   * To use this state, prerequisites must be in place.\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html\n   */\n  HIBERNATED = 'Hibernated',\n\n  /**\n   * Running\n   */\n  RUNNING = 'Running',\n\n  /**\n   * Stopped\n   */\n  STOPPED = 'Stopped',\n}\n"],
  "mappings": "iOAAA,OAAA,QAAA,YAAA,EAGA,wBAAA,QAAA,yBAAA,EAqDA,MAAa,gBAAiB,QAAA,QAAQ,CACpC,YAAY,MAAkB,GAAY,MAAoB,CAC5D,MAAM,MAAO,GAAI,CACf,aAAc,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,OAAA,MAAM,SAAS,IAAI,CAAC,CAAE,EAClE,EAED,4EAAI,MAAM,0BAA4B,MAAM,yBAA2B,GACrE,KAAM,IAAI,OAAM,4EAA8E,EAGhG,GAAI,MAAM,SAAW,MAAM,QAAU,EACnC,KAAM,IAAI,OAAM,0DAA4D,EAG9E,GAAI,yBAAA,YAAY,KAAM,WAAY,CAChC,qBAAsB,MAAM,iBAAiB,qBAC7C,oBAAqB,MAAM,iBAAmB,OAAY,CACxD,eAAgB,MAAM,gBACpB,OACJ,yBAA0B,MAAM,yBAChC,QAAS,MAAM,QACf,UAAW,MAAM,UAClB,GAtBL,QAAA,SAAA,0GA6BA,GAAY,WAAZ,AAAA,UAAY,WAAS,CAOnB,WAAA,WAAA,aAKA,WAAA,QAAA,UAKA,WAAA,QAAA,SACF,GAlBY,UAAA,QAAA,WAAA,SAAA,UAAS,CAAA,EAAA",
  "names": []
}
