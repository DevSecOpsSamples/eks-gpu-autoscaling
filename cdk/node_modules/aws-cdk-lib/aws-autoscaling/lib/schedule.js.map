{
  "version": 3,
  "sources": ["schedule.ts"],
  "sourcesContent": ["import { Annotations } from '../../core';\nimport { Construct } from 'constructs';\n\n/**\n * Schedule for scheduled scaling actions\n */\nexport abstract class Schedule {\n  /**\n   * Construct a schedule from a literal schedule expression\n   *\n   * @param expression The expression to use. Must be in a format that AutoScaling will recognize\n   * @see http://crontab.org/\n   */\n  public static expression(expression: string): Schedule {\n    return new LiteralSchedule(expression);\n  }\n\n  /**\n   * Create a schedule from a set of cron fields\n   */\n  public static cron(options: CronOptions): Schedule {\n    if (options.weekDay !== undefined && options.day !== undefined) {\n      throw new Error('Cannot supply both \\'day\\' and \\'weekDay\\', use at most one');\n    }\n\n    const minute = fallback(options.minute, '*');\n    const hour = fallback(options.hour, '*');\n    const month = fallback(options.month, '*');\n    const day = fallback(options.day, '*');\n    const weekDay = fallback(options.weekDay, '*');\n\n    return new class extends Schedule {\n      public readonly expressionString: string = `${minute} ${hour} ${day} ${month} ${weekDay}`;\n      public _bind(scope: Construct) {\n        if (!options.minute) {\n          Annotations.of(scope).addWarning('cron: If you don\\'t pass \\'minute\\', by default the event runs every minute. Pass \\'minute: \\'*\\'\\' if that\\'s what you intend, or \\'minute: 0\\' to run once per hour instead.');\n        }\n        return new LiteralSchedule(this.expressionString);\n      }\n    };\n  }\n\n  /**\n   * Retrieve the expression for this schedule\n   */\n  public abstract readonly expressionString: string;\n\n  protected constructor() {}\n\n  /**\n   *\n   * @internal\n   */\n  public abstract _bind(scope: Construct): void;\n}\n\n/**\n * Options to configure a cron expression\n *\n * All fields are strings so you can use complex expressions. Absence of\n * a field implies '*' or '?', whichever one is appropriate.\n *\n * @see http://crontab.org/\n */\nexport interface CronOptions {\n  /**\n   * The minute to run this rule at\n   *\n   * @default - Every minute\n   */\n  readonly minute?: string;\n\n  /**\n   * The hour to run this rule at\n   *\n   * @default - Every hour\n   */\n  readonly hour?: string;\n\n  /**\n   * The day of the month to run this rule at\n   *\n   * @default - Every day of the month\n   */\n  readonly day?: string;\n\n  /**\n   * The month to run this rule at\n   *\n   * @default - Every month\n   */\n  readonly month?: string;\n\n  /**\n   * The day of the week to run this rule at\n   *\n   * @default - Any day of the week\n   */\n  readonly weekDay?: string;\n}\n\nclass LiteralSchedule extends Schedule {\n  constructor(public readonly expressionString: string) {\n    super();\n  }\n\n  public _bind(): void {}\n}\n\nfunction fallback<T>(x: T | undefined, def: T): T {\n  return x === undefined ? def : x;\n}\n"],
  "mappings": "+MAAA,OAAA,QAAA,YAAA,EAMA,MAAsB,QAAQ,CAyC5B,aAAA,CAAA,OAlCc,YAAW,WAAkB,CACzC,MAAO,IAAI,iBAAgB,UAAU,QAMzB,MAAK,QAAoB,CACrC,4EAAI,QAAQ,UAAY,QAAa,QAAQ,MAAQ,OACnD,KAAM,IAAI,OAAM,yDAA6D,EAG/E,KAAM,QAAS,SAAS,QAAQ,OAAQ,GAAG,EACrC,KAAO,SAAS,QAAQ,KAAM,GAAG,EACjC,MAAQ,SAAS,QAAQ,MAAO,GAAG,EACnC,IAAM,SAAS,QAAQ,IAAK,GAAG,EAC/B,QAAU,SAAS,QAAQ,QAAS,GAAG,EAE7C,MAAO,IAAI,cAAc,SAAQ,CAAtB,aAAA,qBACO,KAAA,iBAA2B,GAAG,UAAU,QAAQ,OAAO,SAAS,SAOlF,CANS,MAAM,MAAgB,CAC3B,MAAK,SAAQ,QACX,OAAA,YAAY,GAAG,KAAK,EAAE,WAAW,sKAAgL,EAE5M,GAAI,iBAAgB,KAAK,gBAAgB,CAClD,IAhCN,QAAA,SAAA,0GA+FA,MAAM,uBAAwB,SAAQ,CACpC,YAA4B,iBAAwB,CAClD,MAAK,EADqB,KAAA,iBAAA,iBAIrB,OAAK,CAAA,EAGd,kBAAqB,EAAkB,IAAM,CAC3C,MAAO,KAAM,OAAY,IAAM,CACjC",
  "names": []
}
