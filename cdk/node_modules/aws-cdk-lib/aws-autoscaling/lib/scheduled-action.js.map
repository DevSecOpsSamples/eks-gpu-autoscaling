{
  "version": 3,
  "sources": ["scheduled-action.ts"],
  "sourcesContent": ["import { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { IAutoScalingGroup } from './auto-scaling-group';\nimport { CfnScheduledAction } from './autoscaling.generated';\nimport { Schedule } from './schedule';\n\n/**\n * Properties for a scheduled scaling action\n */\nexport interface BasicScheduledActionProps {\n  /**\n   * Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default.\n   *\n   * Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as Etc/GMT+9 or Pacific/Tahiti).\n   *\n   * For more information, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.\n   *\n   * @default - UTC\n   *\n   */\n  readonly timeZone?: string;\n  /**\n   * When to perform this action.\n   *\n   * Supports cron expressions.\n   *\n   * For more information about cron expressions, see https://en.wikipedia.org/wiki/Cron.\n   */\n  readonly schedule: Schedule;\n\n  /**\n   * When this scheduled action becomes active.\n   *\n   * @default - The rule is activate immediately.\n   */\n  readonly startTime?: Date\n\n  /**\n   * When this scheduled action expires.\n   *\n   * @default - The rule never expires.\n   */\n  readonly endTime?: Date;\n\n  /**\n   * The new minimum capacity.\n   *\n   * At the scheduled time, set the minimum capacity to the given capacity.\n   *\n   * At least one of maxCapacity, minCapacity, or desiredCapacity must be supplied.\n   *\n   * @default - No new minimum capacity.\n   */\n  readonly minCapacity?: number;\n\n  /**\n   * The new maximum capacity.\n   *\n   * At the scheduled time, set the maximum capacity to the given capacity.\n   *\n   * At least one of maxCapacity, minCapacity, or desiredCapacity must be supplied.\n   *\n   * @default - No new maximum capacity.\n   */\n  readonly maxCapacity?: number;\n\n  /**\n   * The new desired capacity.\n   *\n   * At the scheduled time, set the desired capacity to the given capacity.\n   *\n   * At least one of maxCapacity, minCapacity, or desiredCapacity must be supplied.\n   *\n   * @default - No new desired capacity.\n   */\n  readonly desiredCapacity?: number;\n}\n\n/**\n * Properties for a scheduled action on an AutoScalingGroup\n */\nexport interface ScheduledActionProps extends BasicScheduledActionProps {\n  /**\n   * The AutoScalingGroup to apply the scheduled actions to\n   */\n  readonly autoScalingGroup: IAutoScalingGroup;\n}\n\n/**\n * Define a scheduled scaling action\n */\nexport class ScheduledAction extends Resource {\n  constructor(scope: Construct, id: string, props: ScheduledActionProps) {\n    super(scope, id);\n\n    if (props.minCapacity === undefined && props.maxCapacity === undefined && props.desiredCapacity === undefined) {\n      throw new Error('At least one of minCapacity, maxCapacity, or desiredCapacity is required');\n    }\n\n    // add a warning on synth when minute is not defined in a cron schedule\n    props.schedule._bind(this);\n\n    new CfnScheduledAction(this, 'Resource', {\n      autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,\n      startTime: formatISO(props.startTime),\n      endTime: formatISO(props.endTime),\n      minSize: props.minCapacity,\n      maxSize: props.maxCapacity,\n      desiredCapacity: props.desiredCapacity,\n      recurrence: props.schedule.expressionString,\n      timeZone: props.timeZone,\n    });\n  }\n}\n\nfunction formatISO(date?: Date) {\n  if (!date) { return undefined; }\n\n  return date.getUTCFullYear() +\n    '-' + pad(date.getUTCMonth() + 1) +\n    '-' + pad(date.getUTCDate()) +\n    'T' + pad(date.getUTCHours()) +\n    ':' + pad(date.getUTCMinutes()) +\n    ':' + pad(date.getUTCSeconds()) +\n    'Z';\n\n  function pad(num: number) {\n    if (num < 10) {\n      return '0' + num;\n    }\n    return num;\n  }\n}"],
  "mappings": "sNAAA,OAAA,QAAA,YAAA,EAGA,wBAAA,QAAA,yBAAA,EAwFA,MAAa,uBAAwB,QAAA,QAAQ,CAC3C,YAAY,MAAkB,GAAY,MAA2B,CACnE,MAAM,MAAO,EAAE,EAEf,mFAAI,MAAM,cAAgB,QAAa,MAAM,cAAgB,QAAa,MAAM,kBAAoB,OAClG,KAAM,IAAI,OAAM,0EAA0E,EAI5F,MAAM,SAAS,MAAM,IAAI,EAEzB,GAAI,yBAAA,mBAAmB,KAAM,WAAY,CACvC,qBAAsB,MAAM,iBAAiB,qBAC7C,UAAW,UAAU,MAAM,SAAS,EACpC,QAAS,UAAU,MAAM,OAAO,EAChC,QAAS,MAAM,YACf,QAAS,MAAM,YACf,gBAAiB,MAAM,gBACvB,WAAY,MAAM,SAAS,iBAC3B,SAAU,MAAM,SACjB,GApBL,QAAA,gBAAA,+HAwBA,mBAAmB,KAAW,CAC5B,GAAI,CAAC,KAAQ,OAEb,MAAO,MAAK,eAAc,EACxB,IAAM,IAAI,KAAK,YAAW,EAAK,CAAC,EAChC,IAAM,IAAI,KAAK,WAAU,CAAE,EAC3B,IAAM,IAAI,KAAK,YAAW,CAAE,EAC5B,IAAM,IAAI,KAAK,cAAa,CAAE,EAC9B,IAAM,IAAI,KAAK,cAAa,CAAE,EAC9B,IAEF,aAAa,IAAW,CACtB,MAAI,KAAM,GACD,IAAM,IAER,GACT,CACF",
  "names": []
}
