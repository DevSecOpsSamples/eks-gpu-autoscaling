{
  "version": 3,
  "sources": ["lifecycle-hook.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { Duration, IResource, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { IAutoScalingGroup } from './auto-scaling-group';\nimport { CfnLifecycleHook } from './autoscaling.generated';\nimport { ILifecycleHookTarget } from './lifecycle-hook-target';\n\n/**\n * Basic properties for a lifecycle hook\n */\nexport interface BasicLifecycleHookProps {\n  /**\n   * Name of the lifecycle hook\n   *\n   * @default - Automatically generated name.\n   */\n  readonly lifecycleHookName?: string;\n\n  /**\n   * The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs.\n   *\n   * @default Continue\n   */\n  readonly defaultResult?: DefaultResult;\n\n  /**\n   * Maximum time between calls to RecordLifecycleActionHeartbeat for the hook\n   *\n   * If the lifecycle hook times out, perform the action in DefaultResult.\n   *\n   * @default - No heartbeat timeout.\n   */\n  readonly heartbeatTimeout?: Duration;\n\n  /**\n   * The state of the Amazon EC2 instance to which you want to attach the lifecycle hook.\n   */\n  readonly lifecycleTransition: LifecycleTransition;\n\n  /**\n   * Additional data to pass to the lifecycle hook target\n   *\n   * @default - No metadata.\n   */\n  readonly notificationMetadata?: string;\n\n  /**\n   * The target of the lifecycle hook\n   *\n   * @default - No target.\n   */\n  readonly notificationTarget?: ILifecycleHookTarget;\n\n  /**\n   * The role that allows publishing to the notification target\n   *\n   * @default - A role will be created if a target is provided. Otherwise, no role is created.\n   */\n  readonly role?: iam.IRole;\n}\n\n/**\n * Properties for a Lifecycle hook\n */\nexport interface LifecycleHookProps extends BasicLifecycleHookProps {\n  /**\n   * The AutoScalingGroup to add the lifecycle hook to\n   */\n  readonly autoScalingGroup: IAutoScalingGroup;\n}\n\n/**\n * A basic lifecycle hook object\n */\nexport interface ILifecycleHook extends IResource {\n  /**\n   * The role for the lifecycle hook to execute\n   *\n   * @default - A default role is created if 'notificationTarget' is specified.\n   * Otherwise, no role is created.\n   */\n  readonly role: iam.IRole;\n}\n\n/**\n * Define a life cycle hook\n */\nexport class LifecycleHook extends Resource implements ILifecycleHook {\n  private _role?: iam.IRole;\n\n  /**\n   * The role that allows the ASG to publish to the notification target\n   *\n   * @default - A default role is created if 'notificationTarget' is specified.\n   * Otherwise, no role is created.\n   */\n  public get role() {\n    if (!this._role) {\n      throw new Error('\\'role\\' is undefined. Please specify a \\'role\\' or specify a \\'notificationTarget\\' to have a role provided for you.');\n    }\n\n    return this._role;\n  }\n\n  /**\n   * The name of this lifecycle hook\n   * @attribute\n   */\n  public readonly lifecycleHookName: string;\n\n  constructor(scope: Construct, id: string, props: LifecycleHookProps) {\n    super(scope, id, {\n      physicalName: props.lifecycleHookName,\n    });\n\n    const targetProps = props.notificationTarget ? props.notificationTarget.bind(this, { lifecycleHook: this, role: props.role }) : undefined;\n\n    if (props.role) {\n      this._role = props.role;\n\n      if (!props.notificationTarget) {\n        throw new Error(\"'notificationTarget' parameter required when 'role' parameter is specified\");\n      }\n    } else {\n      this._role = targetProps ? targetProps.createdRole : undefined;\n    }\n\n    const l1NotificationTargetArn = targetProps ? targetProps.notificationTargetArn : undefined;\n    const l1RoleArn = this._role ? this.role.roleArn : undefined;\n\n    const resource = new CfnLifecycleHook(this, 'Resource', {\n      autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,\n      defaultResult: props.defaultResult,\n      heartbeatTimeout: props.heartbeatTimeout && props.heartbeatTimeout.toSeconds(),\n      lifecycleHookName: this.physicalName,\n      lifecycleTransition: props.lifecycleTransition,\n      notificationMetadata: props.notificationMetadata,\n      notificationTargetArn: l1NotificationTargetArn,\n      roleArn: l1RoleArn,\n    });\n\n    // A LifecycleHook resource is going to do a permissions test upon creation,\n    // so we have to make sure the role has full permissions before creating the\n    // lifecycle hook.\n    if (this._role) {\n      resource.node.addDependency(this.role);\n    }\n\n    this.lifecycleHookName = resource.ref;\n  }\n}\n\nexport enum DefaultResult {\n  CONTINUE = 'CONTINUE',\n  ABANDON = 'ABANDON',\n}\n\n/**\n * What instance transition to attach the hook to\n */\nexport enum LifecycleTransition {\n  /**\n   * Execute the hook when an instance is about to be added\n   */\n  INSTANCE_LAUNCHING = 'autoscaling:EC2_INSTANCE_LAUNCHING',\n\n  /**\n   * Execute the hook when an instance is about to be terminated\n   */\n  INSTANCE_TERMINATING = 'autoscaling:EC2_INSTANCE_TERMINATING',\n}\n"],
  "mappings": "sQACA,OAAA,QAAA,YAAA,EAGA,wBAAA,QAAA,yBAAA,EAmFA,MAAa,qBAAsB,QAAA,QAAQ,CAuBzC,YAAY,MAAkB,GAAY,MAAyB,CACjE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,kBACrB,gFAED,KAAM,aAAc,MAAM,mBAAqB,MAAM,mBAAmB,KAAK,KAAM,CAAE,cAAe,KAAM,KAAM,MAAM,IAAI,CAAE,EAAI,OAEhI,GAAI,MAAM,MAGR,GAFA,KAAK,MAAQ,MAAM,KAEf,CAAC,MAAM,mBACT,KAAM,IAAI,OAAM,4EAA4E,MAG9F,MAAK,MAAQ,YAAc,YAAY,YAAc,OAGvD,KAAM,yBAA0B,YAAc,YAAY,sBAAwB,OAC5E,UAAY,KAAK,MAAQ,KAAK,KAAK,QAAU,OAE7C,SAAW,GAAI,yBAAA,iBAAiB,KAAM,WAAY,CACtD,qBAAsB,MAAM,iBAAiB,qBAC7C,cAAe,MAAM,cACrB,iBAAkB,MAAM,kBAAoB,MAAM,iBAAiB,UAAS,EAC5E,kBAAmB,KAAK,aACxB,oBAAqB,MAAM,oBAC3B,qBAAsB,MAAM,qBAC5B,sBAAuB,wBACvB,QAAS,UACV,EAKD,AAAI,KAAK,OACP,SAAS,KAAK,cAAc,KAAK,IAAI,EAGvC,KAAK,kBAAoB,SAAS,OApDzB,OAAI,CACb,GAAI,CAAC,KAAK,MACR,KAAM,IAAI,OAAM,iHAAuH,EAGzI,MAAO,MAAK,OAdhB,QAAA,cAAA,yHAiEA,GAAY,eAAZ,AAAA,UAAY,eAAa,CACvB,eAAA,SAAA,WACA,eAAA,QAAA,SACF,GAHY,cAAA,QAAA,eAAA,SAAA,cAAa,CAAA,EAAA,EAQzB,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAI7B,qBAAA,mBAAA,qCAKA,qBAAA,qBAAA,sCACF,GAVY,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,CAAA,EAAA",
  "names": []
}
