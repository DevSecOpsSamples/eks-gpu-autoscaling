{
  "version": 3,
  "sources": ["s3-origin.ts"],
  "sourcesContent": ["import * as cloudfront from '../../aws-cloudfront';\nimport * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { HttpOrigin } from './http-origin';\n\n/**\n * Properties to use to customize an S3 Origin.\n */\nexport interface S3OriginProps extends cloudfront.OriginProps {\n  /**\n   * An optional Origin Access Identity of the origin identity cloudfront will use when calling your s3 bucket.\n   *\n   * @default - An Origin Access Identity will be created.\n   */\n  readonly originAccessIdentity?: cloudfront.IOriginAccessIdentity;\n}\n\n/**\n * An Origin that is backed by an S3 bucket.\n *\n * If the bucket is configured for website hosting, this origin will be configured to use the bucket as an\n * HTTP server origin and will use the bucket's configured website redirects and error handling. Otherwise,\n * the origin is created as a bucket origin and will use CloudFront's redirect and error handling.\n */\nexport class S3Origin implements cloudfront.IOrigin {\n  private readonly origin: cloudfront.IOrigin;\n\n  constructor(bucket: s3.IBucket, props: S3OriginProps = {}) {\n    this.origin = bucket.isWebsite ?\n      new HttpOrigin(bucket.bucketWebsiteDomainName, {\n        protocolPolicy: cloudfront.OriginProtocolPolicy.HTTP_ONLY, // S3 only supports HTTP for website buckets\n        ...props,\n      }) :\n      new S3BucketOrigin(bucket, props);\n  }\n\n  public bind(scope: Construct, options: cloudfront.OriginBindOptions): cloudfront.OriginBindConfig {\n    return this.origin.bind(scope, options);\n  }\n}\n\n/**\n * An Origin specific to a S3 bucket (not configured for website hosting).\n *\n * Contains additional logic around bucket permissions and origin access identities.\n */\nclass S3BucketOrigin extends cloudfront.OriginBase {\n  private originAccessIdentity!: cloudfront.IOriginAccessIdentity;\n\n  constructor(private readonly bucket: s3.IBucket, { originAccessIdentity, ...props }: S3OriginProps) {\n    super(bucket.bucketRegionalDomainName, props);\n    if (originAccessIdentity) {\n      this.originAccessIdentity = originAccessIdentity;\n    }\n  }\n\n  public bind(scope: Construct, options: cloudfront.OriginBindOptions): cloudfront.OriginBindConfig {\n    if (!this.originAccessIdentity) {\n      // Using a bucket from another stack creates a cyclic reference with\n      // the bucket taking a dependency on the generated S3CanonicalUserId for the grant principal,\n      // and the distribution having a dependency on the bucket's domain name.\n      // Fix this by parenting the OAI in the bucket's stack when cross-stack usage is detected.\n      const bucketStack = cdk.Stack.of(this.bucket);\n      const bucketInDifferentStack = bucketStack !== cdk.Stack.of(scope);\n      const oaiScope = bucketInDifferentStack ? bucketStack : scope;\n      const oaiId = bucketInDifferentStack ? `${cdk.Names.uniqueId(scope)}S3Origin` : 'S3Origin';\n\n      this.originAccessIdentity = new cloudfront.OriginAccessIdentity(oaiScope, oaiId, {\n        comment: `Identity for ${options.originId}`,\n      });\n    }\n    // Used rather than `grantRead` because `grantRead` will grant overly-permissive policies.\n    // Only GetObject is needed to retrieve objects for the distribution.\n    // This also excludes KMS permissions; currently, OAI only supports SSE-S3 for buckets.\n    // Source: https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/\n    this.bucket.addToResourcePolicy(new iam.PolicyStatement({\n      resources: [this.bucket.arnForObjects('*')],\n      actions: ['s3:GetObject'],\n      principals: [this.originAccessIdentity.grantPrincipal],\n    }));\n    return super.bind(scope, options);\n  }\n\n  protected renderS3OriginConfig(): cloudfront.CfnDistribution.S3OriginConfigProperty | undefined {\n    return { originAccessIdentity: `origin-access-identity/cloudfront/${this.originAccessIdentity.originAccessIdentityName}` };\n  }\n}\n"],
  "mappings": "+MAAA,WAAA,QAAA,sBAAA,EACA,IAAA,QAAA,eAAA,EAEA,IAAA,QAAA,YAAA,EAEA,cAAA,QAAA,eAAA,EAqBA,MAAa,QAAQ,CAGnB,YAAY,OAAoB,MAAuB,CAAA,EAAE,4IACvD,KAAK,OAAS,OAAO,UACnB,GAAI,eAAA,WAAW,OAAO,wBAAyB,CAC7C,eAAgB,WAAW,qBAAqB,aAC7C,MACJ,EACD,GAAI,gBAAe,OAAQ,KAAK,EAG7B,KAAK,MAAkB,QAAqC,sFAC1D,KAAK,OAAO,KAAK,MAAO,OAAO,GAb1C,QAAA,SAAA,iHAsBA,MAAM,sBAAuB,YAAW,UAAU,CAGhD,YAA6B,OAAoB,CAAE,wBAAyB,OAAsB,CAChG,MAAM,OAAO,yBAA0B,KAAK,EADjB,KAAA,OAAA,OAEvB,sBACF,MAAK,qBAAuB,sBAIzB,KAAK,MAAkB,QAAqC,CACjE,GAAI,CAAC,KAAK,qBAAsB,CAK9B,KAAM,aAAc,IAAI,MAAM,GAAG,KAAK,MAAM,EACtC,uBAAyB,cAAgB,IAAI,MAAM,GAAG,KAAK,EAC3D,SAAW,uBAAyB,YAAc,MAClD,MAAQ,uBAAyB,GAAG,IAAI,MAAM,SAAS,KAAK,YAAc,WAEhF,KAAK,qBAAuB,GAAI,YAAW,qBAAqB,SAAU,MAAO,CAC/E,QAAS,gBAAgB,QAAQ,WAClC,EAMH,YAAK,OAAO,oBAAoB,GAAI,KAAI,gBAAgB,CACtD,UAAW,CAAC,KAAK,OAAO,cAAc,GAAG,CAAC,EAC1C,QAAS,CAAC,cAAc,EACxB,WAAY,CAAC,KAAK,qBAAqB,cAAc,EACtD,CAAC,EACK,MAAM,KAAK,MAAO,OAAO,EAGxB,sBAAoB,CAC5B,MAAO,CAAE,qBAAsB,qCAAqC,KAAK,qBAAqB,0BAA0B",
  "names": []
}
