{
  "version": 3,
  "sources": ["example.ssh-into-nodes.lit.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as cdk from '../../core';\nimport * as eks from '../lib';\n\nclass EksClusterStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const cluster = new eks.Cluster(this, 'EKSCluster', {\n      vpc,\n      version: eks.KubernetesVersion.V1_21,\n    });\n\n    /// !show\n    const asg = cluster.addAutoScalingGroupCapacity('Nodes', {\n      instanceType: new ec2.InstanceType('t2.medium'),\n      vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n      keyName: 'my-key-name',\n    });\n\n    // Replace with desired IP\n    asg.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/32'), ec2.Port.tcp(22));\n    /// !hide\n  }\n}\n\nconst app = new cdk.App();\n\nnew EksClusterStack(app, 'eks-integ-test');\n\napp.synth();\n"],
  "mappings": "oEAAA,KAAA,KAAA,QAAA,eAAA,EACA,IAAA,QAAA,YAAA,EACA,IAAA,QAAA,QAAA,EAEA,MAAM,uBAAwB,KAAI,KAAK,CACrC,YAAY,MAAgB,GAAY,MAAsB,CAC5D,MAAM,MAAO,GAAI,KAAK,EAEtB,KAAM,KAAM,GAAI,KAAI,IAAI,KAAM,KAAK,EAenC,AAPY,AANI,GAAI,KAAI,QAAQ,KAAM,aAAc,CAClD,IACA,QAAS,IAAI,kBAAkB,MAChC,EAGmB,4BAA4B,QAAS,CACvD,aAAc,GAAI,KAAI,aAAa,WAAW,EAC9C,WAAY,CAAE,WAAY,IAAI,WAAW,MAAM,EAC/C,QAAS,cACV,EAGG,YAAY,UAAU,IAAI,KAAK,KAAK,YAAY,EAAG,IAAI,KAAK,IAAI,EAAE,CAAC,GAK3E,KAAM,KAAM,GAAI,KAAI,IAEpB,GAAI,iBAAgB,IAAK,gBAAgB,EAEzC,IAAI,MAAK",
  "names": []
}
