{
  "version": 3,
  "sources": ["common.ts"],
  "sourcesContent": ["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { IsCompleteResponse, OnEventResponse } from '../../../custom-resources/lib/provider-framework/types';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as aws from 'aws-sdk';\n\nexport interface EksUpdateId {\n  /**\n   * If this field is included in an event passed to \"IsComplete\", it means we\n   * initiated an EKS update that should be monitored using eks:DescribeUpdate\n   * instead of just looking at the cluster status.\n   */\n  EksUpdateId?: string\n}\n\nexport type ResourceEvent = AWSLambda.CloudFormationCustomResourceEvent & EksUpdateId;\n\nexport abstract class ResourceHandler {\n  protected readonly requestId: string;\n  protected readonly logicalResourceId: string;\n  protected readonly requestType: 'Create' | 'Update' | 'Delete';\n  protected readonly physicalResourceId?: string;\n  protected readonly event: ResourceEvent;\n\n  constructor(protected readonly eks: EksClient, event: ResourceEvent) {\n    this.requestType = event.RequestType;\n    this.requestId = event.RequestId;\n    this.logicalResourceId = event.LogicalResourceId;\n    this.physicalResourceId = (event as any).PhysicalResourceId;\n    this.event = event;\n\n    const roleToAssume = event.ResourceProperties.AssumeRoleArn;\n    if (!roleToAssume) {\n      throw new Error('AssumeRoleArn must be provided');\n    }\n\n    eks.configureAssumeRole({\n      RoleArn: roleToAssume,\n      RoleSessionName: `AWSCDK.EKSCluster.${this.requestType}.${this.requestId}`,\n    });\n  }\n\n  public onEvent() {\n    switch (this.requestType) {\n      case 'Create': return this.onCreate();\n      case 'Update': return this.onUpdate();\n      case 'Delete': return this.onDelete();\n    }\n\n    throw new Error(`Invalid request type ${this.requestType}`);\n  }\n\n  public isComplete() {\n    switch (this.requestType) {\n      case 'Create': return this.isCreateComplete();\n      case 'Update': return this.isUpdateComplete();\n      case 'Delete': return this.isDeleteComplete();\n    }\n\n    throw new Error(`Invalid request type ${this.requestType}`);\n  }\n\n  protected log(x: any) {\n    // eslint-disable-next-line no-console\n    console.log(JSON.stringify(x, undefined, 2));\n  }\n\n  protected abstract async onCreate(): Promise<OnEventResponse>;\n  protected abstract async onDelete(): Promise<OnEventResponse | void>;\n  protected abstract async onUpdate(): Promise<(OnEventResponse & EksUpdateId) | void>;\n  protected abstract async isCreateComplete(): Promise<IsCompleteResponse>;\n  protected abstract async isDeleteComplete(): Promise<IsCompleteResponse>;\n  protected abstract async isUpdateComplete(): Promise<IsCompleteResponse>;\n}\n\nexport interface EksClient {\n  configureAssumeRole(request: aws.STS.AssumeRoleRequest): void;\n  createCluster(request: aws.EKS.CreateClusterRequest): Promise<aws.EKS.CreateClusterResponse>;\n  deleteCluster(request: aws.EKS.DeleteClusterRequest): Promise<aws.EKS.DeleteClusterResponse>;\n  describeCluster(request: aws.EKS.DescribeClusterRequest): Promise<aws.EKS.DescribeClusterResponse>;\n  updateClusterConfig(request: aws.EKS.UpdateClusterConfigRequest): Promise<aws.EKS.UpdateClusterConfigResponse>;\n  updateClusterVersion(request: aws.EKS.UpdateClusterVersionRequest): Promise<aws.EKS.UpdateClusterVersionResponse>;\n  describeUpdate(req: aws.EKS.DescribeUpdateRequest): Promise<aws.EKS.DescribeUpdateResponse>;\n  createFargateProfile(request: aws.EKS.CreateFargateProfileRequest): Promise<aws.EKS.CreateFargateProfileResponse>;\n  describeFargateProfile(request: aws.EKS.DescribeFargateProfileRequest): Promise<aws.EKS.DescribeFargateProfileResponse>;\n  deleteFargateProfile(request: aws.EKS.DeleteFargateProfileRequest): Promise<aws.EKS.DeleteFargateProfileResponse>;\n}\n"],
  "mappings": "mGAiBA,MAAsB,eAAe,CAOnC,YAA+B,IAAgB,MAAoB,CAApC,KAAA,IAAA,IAC7B,KAAK,YAAc,MAAM,YACzB,KAAK,UAAY,MAAM,UACvB,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,mBAAsB,MAAc,mBACzC,KAAK,MAAQ,MAEb,KAAM,cAAe,MAAM,mBAAmB,cAC9C,GAAI,CAAC,aACH,KAAM,IAAI,OAAM,gCAAgC,EAGlD,IAAI,oBAAoB,CACtB,QAAS,aACT,gBAAiB,qBAAqB,KAAK,eAAe,KAAK,YAChE,EAGI,SAAO,CACZ,OAAQ,KAAK,iBACN,SAAU,MAAO,MAAK,SAAQ,MAC9B,SAAU,MAAO,MAAK,SAAQ,MAC9B,SAAU,MAAO,MAAK,SAAQ,EAGrC,KAAM,IAAI,OAAM,wBAAwB,KAAK,aAAa,EAGrD,YAAU,CACf,OAAQ,KAAK,iBACN,SAAU,MAAO,MAAK,iBAAgB,MACtC,SAAU,MAAO,MAAK,iBAAgB,MACtC,SAAU,MAAO,MAAK,iBAAgB,EAG7C,KAAM,IAAI,OAAM,wBAAwB,KAAK,aAAa,EAGlD,IAAI,EAAM,CAElB,QAAQ,IAAI,KAAK,UAAU,EAAG,OAAW,CAAC,CAAC,GA/C/C,QAAA,gBAAA",
  "names": []
}
