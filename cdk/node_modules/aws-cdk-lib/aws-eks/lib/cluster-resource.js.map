{
  "version": 3,
  "sources": ["cluster-resource.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as lambda from '../../aws-lambda';\nimport { ArnComponents, CustomResource, Token, Stack, Lazy } from '../../core';\nimport { Construct } from 'constructs';\nimport { CLUSTER_RESOURCE_TYPE } from './cluster-resource-handler/consts';\nimport { ClusterResourceProvider } from './cluster-resource-provider';\nimport { CfnCluster } from './eks.generated';\n\nexport interface ClusterResourceProps {\n  readonly resourcesVpcConfig: CfnCluster.ResourcesVpcConfigProperty;\n  readonly roleArn: string;\n  readonly encryptionConfig?: Array<CfnCluster.EncryptionConfigProperty>;\n  readonly kubernetesNetworkConfig?: CfnCluster.KubernetesNetworkConfigProperty;\n  readonly name: string;\n  readonly version?: string;\n  readonly endpointPrivateAccess: boolean;\n  readonly endpointPublicAccess: boolean;\n  readonly publicAccessCidrs?: string[];\n  readonly vpc: ec2.IVpc;\n  readonly environment?: { [key: string]: string };\n  readonly subnets?: ec2.ISubnet[];\n  readonly secretsEncryptionKey?: kms.IKey;\n  readonly onEventLayer?: lambda.ILayerVersion;\n  readonly clusterHandlerSecurityGroup?: ec2.ISecurityGroup;\n  readonly tags?: { [key: string]: string };\n  readonly logging?: { [key: string]: [ { [key: string]: any } ] };\n}\n\n/**\n * A low-level CFN resource Amazon EKS cluster implemented through a custom\n * resource.\n *\n * Implements EKS create/update/delete through a CloudFormation custom resource\n * in order to allow us to control the IAM role which creates the cluster. This\n * is required in order to be able to allow CloudFormation to interact with the\n * cluster via `kubectl` to enable Kubernetes management capabilities like apply\n * manifest and IAM role/user RBAC mapping.\n */\nexport class ClusterResource extends Construct {\n  public readonly attrEndpoint: string;\n  public readonly attrArn: string;\n  public readonly attrCertificateAuthorityData: string;\n  public readonly attrClusterSecurityGroupId: string;\n  public readonly attrEncryptionConfigKeyArn: string;\n  public readonly attrOpenIdConnectIssuerUrl: string;\n  public readonly attrOpenIdConnectIssuer: string;\n  public readonly ref: string;\n\n  public readonly adminRole: iam.Role;\n\n  constructor(scope: Construct, id: string, props: ClusterResourceProps) {\n    super(scope, id);\n\n    if (!props.roleArn) {\n      throw new Error('\"roleArn\" is required');\n    }\n\n    this.adminRole = this.createAdminRole(props);\n\n    const provider = ClusterResourceProvider.getOrCreate(this, {\n      adminRole: this.adminRole,\n      subnets: props.subnets,\n      vpc: props.vpc,\n      environment: props.environment,\n      onEventLayer: props.onEventLayer,\n      securityGroup: props.clusterHandlerSecurityGroup,\n    });\n\n    const resource = new CustomResource(this, 'Resource', {\n      resourceType: CLUSTER_RESOURCE_TYPE,\n      serviceToken: provider.serviceToken,\n      properties: {\n        // the structure of config needs to be that of 'aws.EKS.CreateClusterRequest' since its passed as is\n        // to the eks.createCluster sdk invocation.\n        Config: {\n          name: props.name,\n          version: props.version,\n          roleArn: props.roleArn,\n          encryptionConfig: props.encryptionConfig,\n          kubernetesNetworkConfig: props.kubernetesNetworkConfig,\n          resourcesVpcConfig: {\n            subnetIds: (props.resourcesVpcConfig as CfnCluster.ResourcesVpcConfigProperty).subnetIds,\n            securityGroupIds: (props.resourcesVpcConfig as CfnCluster.ResourcesVpcConfigProperty).securityGroupIds,\n            endpointPublicAccess: props.endpointPublicAccess,\n            endpointPrivateAccess: props.endpointPrivateAccess,\n            publicAccessCidrs: props.publicAccessCidrs,\n          },\n          tags: props.tags,\n          logging: props.logging,\n        },\n        AssumeRoleArn: this.adminRole.roleArn,\n\n        // IMPORTANT: increment this number when you add new attributes to the\n        // resource. Otherwise, CloudFormation will error with \"Vendor response\n        // doesn't contain XXX key in object\" (see #8276) by incrementing this\n        // number, you will effectively cause a \"no-op update\" to the cluster\n        // which will return the new set of attribute.\n        AttributesRevision: 2,\n      },\n    });\n\n    resource.node.addDependency(this.adminRole);\n\n    this.ref = resource.ref;\n    this.attrEndpoint = Token.asString(resource.getAtt('Endpoint'));\n    this.attrArn = Token.asString(resource.getAtt('Arn'));\n    this.attrCertificateAuthorityData = Token.asString(resource.getAtt('CertificateAuthorityData'));\n    this.attrClusterSecurityGroupId = Token.asString(resource.getAtt('ClusterSecurityGroupId'));\n    this.attrEncryptionConfigKeyArn = Token.asString(resource.getAtt('EncryptionConfigKeyArn'));\n    this.attrOpenIdConnectIssuerUrl = Token.asString(resource.getAtt('OpenIdConnectIssuerUrl'));\n    this.attrOpenIdConnectIssuer = Token.asString(resource.getAtt('OpenIdConnectIssuer'));\n  }\n\n  private createAdminRole(props: ClusterResourceProps) {\n    const stack = Stack.of(this);\n\n    // the role used to create the cluster. this becomes the administrator role\n    // of the cluster.\n    const creationRole = new iam.Role(this, 'CreationRole', {\n      assumedBy: new iam.AccountRootPrincipal(),\n    });\n\n    // the CreateCluster API will allow the cluster to assume this role, so we\n    // need to allow the lambda execution role to pass it.\n    creationRole.addToPolicy(new iam.PolicyStatement({\n      actions: ['iam:PassRole'],\n      resources: [props.roleArn],\n    }));\n\n    // if we know the cluster name, restrict the policy to only allow\n    // interacting with this specific cluster otherwise, we will have to grant\n    // this role to manage all clusters in the account. this must be lazy since\n    // `props.name` may contain a lazy value that conditionally resolves to a\n    // physical name.\n    const resourceArns = Lazy.list({\n      produce: () => {\n        const arn = stack.formatArn(clusterArnComponents(stack.resolve(props.name)));\n        return stack.resolve(props.name)\n          ? [arn, `${arn}/*`] // see https://github.com/aws/aws-cdk/issues/6060\n          : ['*'];\n      },\n    });\n\n    const fargateProfileResourceArn = Lazy.string({\n      produce: () => stack.resolve(props.name)\n        ? stack.formatArn({ service: 'eks', resource: 'fargateprofile', resourceName: stack.resolve(props.name) + '/*' })\n        : '*',\n    });\n\n    creationRole.addToPolicy(new iam.PolicyStatement({\n      actions: [\n        'eks:CreateCluster',\n        'eks:DescribeCluster',\n        'eks:DescribeUpdate',\n        'eks:DeleteCluster',\n        'eks:UpdateClusterVersion',\n        'eks:UpdateClusterConfig',\n        'eks:CreateFargateProfile',\n        'eks:TagResource',\n        'eks:UntagResource',\n      ],\n      resources: resourceArns,\n    }));\n\n    creationRole.addToPolicy(new iam.PolicyStatement({\n      actions: ['eks:DescribeFargateProfile', 'eks:DeleteFargateProfile'],\n      resources: [fargateProfileResourceArn],\n    }));\n\n    creationRole.addToPolicy(new iam.PolicyStatement({\n      actions: ['iam:GetRole', 'iam:listAttachedRolePolicies'],\n      resources: ['*'],\n    }));\n\n    creationRole.addToPolicy(new iam.PolicyStatement({\n      actions: ['iam:CreateServiceLinkedRole'],\n      resources: ['*'],\n    }));\n\n    // see https://github.com/aws/aws-cdk/issues/9027\n    // these actions are the combined 'ec2:Describe*' actions taken from the EKS SLR policies.\n    // (AWSServiceRoleForAmazonEKS, AWSServiceRoleForAmazonEKSForFargate, AWSServiceRoleForAmazonEKSNodegroup)\n    creationRole.addToPolicy(new iam.PolicyStatement({\n      actions: [\n        'ec2:DescribeInstances',\n        'ec2:DescribeNetworkInterfaces',\n        'ec2:DescribeSecurityGroups',\n        'ec2:DescribeSubnets',\n        'ec2:DescribeRouteTables',\n        'ec2:DescribeDhcpOptions',\n        'ec2:DescribeVpcs',\n      ],\n      resources: ['*'],\n    }));\n\n    // grant cluster creation role sufficient permission to access the specified key\n    // see https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html\n    if (props.secretsEncryptionKey) {\n      creationRole.addToPolicy(new iam.PolicyStatement({\n        actions: [\n          'kms:Encrypt',\n          'kms:Decrypt',\n          'kms:DescribeKey',\n          'kms:CreateGrant',\n        ],\n        resources: [props.secretsEncryptionKey.keyArn],\n      }));\n    }\n\n    return creationRole;\n  }\n}\n\nexport function clusterArnComponents(clusterName: string): ArnComponents {\n  return {\n    service: 'eks',\n    resource: 'cluster',\n    resourceName: clusterName,\n  };\n}\n"],
  "mappings": "gIACA,KAAA,KAAA,QAAA,eAAA,EAGA,OAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EACA,SAAA,QAAA,mCAAA,EACA,4BAAA,QAAA,6BAAA,EAiCA,MAAa,uBAAwB,cAAA,SAAS,CAY5C,YAAY,MAAkB,GAAY,MAA2B,CACnE,MAAM,MAAO,EAAE,EAEf,GAAI,CAAC,MAAM,QACT,KAAM,IAAI,OAAM,uBAAuB,EAGzC,KAAK,UAAY,KAAK,gBAAgB,KAAK,EAE3C,KAAM,UAAW,4BAAA,wBAAwB,YAAY,KAAM,CACzD,UAAW,KAAK,UAChB,QAAS,MAAM,QACf,IAAK,MAAM,IACX,YAAa,MAAM,YACnB,aAAc,MAAM,aACpB,cAAe,MAAM,4BACtB,EAEK,SAAW,GAAI,QAAA,eAAe,KAAM,WAAY,CACpD,aAAc,SAAA,sBACd,aAAc,SAAS,aACvB,WAAY,CAGV,OAAQ,CACN,KAAM,MAAM,KACZ,QAAS,MAAM,QACf,QAAS,MAAM,QACf,iBAAkB,MAAM,iBACxB,wBAAyB,MAAM,wBAC/B,mBAAoB,CAClB,UAAY,MAAM,mBAA6D,UAC/E,iBAAmB,MAAM,mBAA6D,iBACtF,qBAAsB,MAAM,qBAC5B,sBAAuB,MAAM,sBAC7B,kBAAmB,MAAM,mBAE3B,KAAM,MAAM,KACZ,QAAS,MAAM,SAEjB,cAAe,KAAK,UAAU,QAO9B,mBAAoB,GAEvB,EAED,SAAS,KAAK,cAAc,KAAK,SAAS,EAE1C,KAAK,IAAM,SAAS,IACpB,KAAK,aAAe,OAAA,MAAM,SAAS,SAAS,OAAO,UAAU,CAAC,EAC9D,KAAK,QAAU,OAAA,MAAM,SAAS,SAAS,OAAO,KAAK,CAAC,EACpD,KAAK,6BAA+B,OAAA,MAAM,SAAS,SAAS,OAAO,0BAA0B,CAAC,EAC9F,KAAK,2BAA6B,OAAA,MAAM,SAAS,SAAS,OAAO,wBAAwB,CAAC,EAC1F,KAAK,2BAA6B,OAAA,MAAM,SAAS,SAAS,OAAO,wBAAwB,CAAC,EAC1F,KAAK,2BAA6B,OAAA,MAAM,SAAS,SAAS,OAAO,wBAAwB,CAAC,EAC1F,KAAK,wBAA0B,OAAA,MAAM,SAAS,SAAS,OAAO,qBAAqB,CAAC,EAG9E,gBAAgB,MAA2B,CACjD,KAAM,OAAQ,OAAA,MAAM,GAAG,IAAI,EAIrB,aAAe,GAAI,KAAI,KAAK,KAAM,eAAgB,CACtD,UAAW,GAAI,KAAI,qBACpB,EAID,aAAa,YAAY,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CAAC,cAAc,EACxB,UAAW,CAAC,MAAM,OAAO,EAC1B,CAAC,EAOF,KAAM,cAAe,OAAA,KAAK,KAAK,CAC7B,QAAS,IAAK,CACZ,KAAM,KAAM,MAAM,UAAU,qBAAqB,MAAM,QAAQ,MAAM,IAAI,CAAC,CAAC,EAC3E,MAAO,OAAM,QAAQ,MAAM,IAAI,EAC3B,CAAC,IAAK,GAAG,OAAO,EAChB,CAAC,GAAG,CACV,EACD,EAEK,0BAA4B,OAAA,KAAK,OAAO,CAC5C,QAAS,IAAM,MAAM,QAAQ,MAAM,IAAI,EACnC,MAAM,UAAU,CAAE,QAAS,MAAO,SAAU,iBAAkB,aAAc,MAAM,QAAQ,MAAM,IAAI,EAAI,IAAI,CAAE,EAC9G,IACL,EAED,oBAAa,YAAY,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CACP,oBACA,sBACA,qBACA,oBACA,2BACA,0BACA,2BACA,kBACA,qBAEF,UAAW,aACZ,CAAC,EAEF,aAAa,YAAY,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CAAC,6BAA8B,0BAA0B,EAClE,UAAW,CAAC,yBAAyB,EACtC,CAAC,EAEF,aAAa,YAAY,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CAAC,cAAe,8BAA8B,EACvD,UAAW,CAAC,GAAG,EAChB,CAAC,EAEF,aAAa,YAAY,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CAAC,6BAA6B,EACvC,UAAW,CAAC,GAAG,EAChB,CAAC,EAKF,aAAa,YAAY,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CACP,wBACA,gCACA,6BACA,sBACA,0BACA,0BACA,oBAEF,UAAW,CAAC,GAAG,EAChB,CAAC,EAIE,MAAM,sBACR,aAAa,YAAY,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CACP,cACA,cACA,kBACA,mBAEF,UAAW,CAAC,MAAM,qBAAqB,MAAM,EAC9C,CAAC,EAGG,cA3KX,QAAA,gBAAA,gBA+KA,8BAAqC,YAAmB,CACtD,MAAO,CACL,QAAS,MACT,SAAU,UACV,aAAc,YAElB,CANA,QAAA,qBAAA",
  "names": []
}
