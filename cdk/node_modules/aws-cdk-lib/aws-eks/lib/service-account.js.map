{
  "version": 3,
  "sources": ["service-account.ts"],
  "sourcesContent": ["import { AddToPrincipalPolicyResult, IPrincipal, IRole, OpenIdConnectPrincipal, PolicyStatement, PrincipalPolicyFragment, Role } from '../../aws-iam';\nimport { CfnJson, Names } from '../../core';\nimport { Construct } from 'constructs';\nimport { ICluster } from './cluster';\nimport { KubernetesManifest } from './k8s-manifest';\n\n/**\n * Options for `ServiceAccount`\n */\nexport interface ServiceAccountOptions {\n  /**\n   * The name of the service account.\n   *\n   * The name of a ServiceAccount object must be a valid DNS subdomain name.\n   * https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n   * @default - If no name is given, it will use the id of the resource.\n   */\n  readonly name?: string;\n\n  /**\n   * The namespace of the service account.\n   *\n   * All namespace names must be valid RFC 1123 DNS labels.\n   * https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/#namespaces-and-dns\n   * @default \"default\"\n   */\n  readonly namespace?: string;\n}\n\n/**\n * Properties for defining service accounts\n */\nexport interface ServiceAccountProps extends ServiceAccountOptions {\n  /**\n   * The cluster to apply the patch to.\n   */\n  readonly cluster: ICluster;\n}\n\n/**\n * Service Account\n */\nexport class ServiceAccount extends Construct implements IPrincipal {\n  /**\n   * The role which is linked to the service account.\n   */\n  public readonly role: IRole;\n\n  public readonly assumeRoleAction: string;\n  public readonly grantPrincipal: IPrincipal;\n  public readonly policyFragment: PrincipalPolicyFragment;\n\n  /**\n   * The name of the service account.\n   */\n  public readonly serviceAccountName: string;\n\n  /**\n   * The namespace where the service account is located in.\n   */\n  public readonly serviceAccountNamespace: string;\n\n  constructor(scope: Construct, id: string, props: ServiceAccountProps) {\n    super(scope, id);\n\n    const { cluster } = props;\n    this.serviceAccountName = props.name ?? Names.uniqueId(this).toLowerCase();\n    this.serviceAccountNamespace = props.namespace ?? 'default';\n\n    // From K8s docs: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n    if (!this.isValidDnsSubdomainName(this.serviceAccountName)) {\n      throw RangeError('The name of a ServiceAccount object must be a valid DNS subdomain name.');\n    }\n\n    // From K8s docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/#namespaces-and-dns\n    if (!this.isValidDnsLabelName(this.serviceAccountNamespace)) {\n      throw RangeError('All namespace names must be valid RFC 1123 DNS labels.');\n    }\n\n    /* Add conditions to the role to improve security. This prevents other pods in the same namespace to assume the role.\n    * See documentation: https://docs.aws.amazon.com/eks/latest/userguide/create-service-account-iam-policy-and-role.html\n    */\n    const conditions = new CfnJson(this, 'ConditionJson', {\n      value: {\n        [`${cluster.openIdConnectProvider.openIdConnectProviderIssuer}:aud`]: 'sts.amazonaws.com',\n        [`${cluster.openIdConnectProvider.openIdConnectProviderIssuer}:sub`]: `system:serviceaccount:${this.serviceAccountNamespace}:${this.serviceAccountName}`,\n      },\n    });\n    const principal = new OpenIdConnectPrincipal(cluster.openIdConnectProvider).withConditions({\n      StringEquals: conditions,\n    });\n    this.role = new Role(this, 'Role', { assumedBy: principal });\n\n    this.assumeRoleAction = this.role.assumeRoleAction;\n    this.grantPrincipal = this.role.grantPrincipal;\n    this.policyFragment = this.role.policyFragment;\n\n    // Note that we cannot use `cluster.addManifest` here because that would create the manifest\n    // constrct in the scope of the cluster stack, which might be a different stack than this one.\n    // This means that the cluster stack would depend on this stack because of the role,\n    // and since this stack inherintely depends on the cluster stack, we will have a circular dependency.\n    new KubernetesManifest(this, `manifest-${id}ServiceAccountResource`, {\n      cluster,\n      manifest: [{\n        apiVersion: 'v1',\n        kind: 'ServiceAccount',\n        metadata: {\n          name: this.serviceAccountName,\n          namespace: this.serviceAccountNamespace,\n          labels: {\n            'app.kubernetes.io/name': this.serviceAccountName,\n          },\n          annotations: {\n            'eks.amazonaws.com/role-arn': this.role.roleArn,\n          },\n        },\n      }],\n    });\n\n  }\n\n  /**\n   * @deprecated use `addToPrincipalPolicy()`\n   */\n  public addToPolicy(statement: PolicyStatement): boolean {\n    return this.addToPrincipalPolicy(statement).statementAdded;\n  }\n\n  public addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n    return this.role.addToPrincipalPolicy(statement);\n  }\n\n  /**\n   * If the value is a DNS subdomain name as defined in RFC 1123, from K8s docs.\n   *\n   * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names\n   */\n  private isValidDnsSubdomainName(value: string): boolean {\n    return value.length <= 253 && /^[a-z0-9]+[a-z0-9-.]*[a-z0-9]+$/.test(value);\n  }\n\n  /**\n   * If the value follows DNS label standard as defined in RFC 1123, from K8s docs.\n   *\n   * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names\n   */\n  private isValidDnsLabelName(value: string): boolean {\n    return value.length <= 63 && /^[a-z0-9]+[a-z0-9-]*[a-z0-9]+$/.test(value);\n  }\n}\n"],
  "mappings": "qNAAA,UAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EAEA,eAAA,QAAA,gBAAA,EAsCA,MAAa,sBAAuB,cAAA,SAAS,CAoB3C,YAAY,MAAkB,GAAY,MAA0B,WAClE,MAAM,MAAO,EAAE,yEAEf,KAAM,CAAE,SAAY,MAKpB,GAJA,KAAK,mBAAkB,IAAG,MAAM,QAAI,MAAA,KAAA,OAAA,GAAI,OAAA,MAAM,SAAS,IAAI,EAAE,YAAW,EACxE,KAAK,wBAAuB,IAAG,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,UAG9C,CAAC,KAAK,wBAAwB,KAAK,kBAAkB,EACvD,KAAM,YAAW,yEAAyE,EAI5F,GAAI,CAAC,KAAK,oBAAoB,KAAK,uBAAuB,EACxD,KAAM,YAAW,wDAAwD,EAM3E,KAAM,YAAa,GAAI,QAAA,QAAQ,KAAM,gBAAiB,CACpD,MAAO,EACJ,GAAG,QAAQ,sBAAsB,mCAAoC,qBACrE,GAAG,QAAQ,sBAAsB,mCAAoC,yBAAyB,KAAK,2BAA2B,KAAK,sBAEvI,EACK,UAAY,GAAI,WAAA,uBAAuB,QAAQ,qBAAqB,EAAE,eAAe,CACzF,aAAc,WACf,EACD,KAAK,KAAO,GAAI,WAAA,KAAK,KAAM,OAAQ,CAAE,UAAW,SAAS,CAAE,EAE3D,KAAK,iBAAmB,KAAK,KAAK,iBAClC,KAAK,eAAiB,KAAK,KAAK,eAChC,KAAK,eAAiB,KAAK,KAAK,eAMhC,GAAI,gBAAA,mBAAmB,KAAM,YAAY,2BAA4B,CACnE,QACA,SAAU,CAAC,CACT,WAAY,KACZ,KAAM,iBACN,SAAU,CACR,KAAM,KAAK,mBACX,UAAW,KAAK,wBAChB,OAAQ,CACN,yBAA0B,KAAK,oBAEjC,YAAa,CACX,6BAA8B,KAAK,KAAK,UAG7C,EACF,EAOI,YAAY,UAA0B,CAC3C,MAAO,MAAK,qBAAqB,SAAS,EAAE,eAGvC,qBAAqB,UAA0B,+EAC7C,KAAK,KAAK,qBAAqB,SAAS,EAQzC,wBAAwB,MAAa,CAC3C,MAAO,OAAM,QAAU,KAAO,kCAAkC,KAAK,KAAK,EAQpE,oBAAoB,MAAa,CACvC,MAAO,OAAM,QAAU,IAAM,iCAAiC,KAAK,KAAK,GAzG5E,QAAA,eAAA",
  "names": []
}
