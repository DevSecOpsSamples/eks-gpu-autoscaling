{
  "version": 3,
  "sources": ["alb-controller.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport { Construct, Node } from 'constructs';\nimport { Cluster } from './cluster';\nimport { HelmChart } from './helm-chart';\nimport { ServiceAccount } from './service-account';\n\n// v2 - keep this import as a separate section to reduce merge conflict when forward merging with the v2 branch.\n// eslint-disable-next-line\nimport { Duration, Names, Stack } from '../../core';\n\n/**\n * Controller version.\n *\n * Corresponds to the image tag of 'amazon/aws-load-balancer-controller' image.\n */\nexport class AlbControllerVersion {\n\n  /**\n   * v2.0.0\n   */\n  public static readonly V2_0_0 = new AlbControllerVersion('v2.0.0', false);\n\n  /**\n   * v2.0.1\n   */\n  public static readonly V2_0_1 = new AlbControllerVersion('v2.0.1', false);\n\n  /**\n   * v2.1.0\n   */\n  public static readonly V2_1_0 = new AlbControllerVersion('v2.1.0', false);\n\n  /**\n   * v2.1.1\n   */\n  public static readonly V2_1_1 = new AlbControllerVersion('v2.1.1', false);\n\n  /**\n   * v2.1.2\n   */\n  public static readonly V2_1_2 = new AlbControllerVersion('v2.1.2', false);\n\n  /**\n   * v2.1.3\n   */\n  public static readonly V2_1_3 = new AlbControllerVersion('v2.1.3', false);\n\n  /**\n   * v2.0.0\n   */\n  public static readonly V2_2_0 = new AlbControllerVersion('v2.2.0', false);\n\n  /**\n   * v2.2.1\n   */\n  public static readonly V2_2_1 = new AlbControllerVersion('v2.2.1', false);\n\n  /**\n   * v2.2.2\n   */\n  public static readonly V2_2_2 = new AlbControllerVersion('v2.2.2', false);\n\n  /**\n   * v2.2.3\n   */\n  public static readonly V2_2_3 = new AlbControllerVersion('v2.2.3', false);\n\n  /**\n   * v2.2.4\n   */\n  public static readonly V2_2_4 = new AlbControllerVersion('v2.2.4', false);\n\n  /**\n   * v2.3.0\n   */\n  public static readonly V2_3_0 = new AlbControllerVersion('v2.3.0', false);\n\n  /**\n   * v2.3.1\n   */\n  public static readonly V2_3_1 = new AlbControllerVersion('v2.3.1', false);\n\n  /**\n   * v2.4.1\n   */\n  public static readonly V2_4_1 = new AlbControllerVersion('v2.4.1', false);\n\n  /**\n   * Specify a custom version.\n   * Use this if the version you need is not available in one of the predefined versions.\n   * Note that in this case, you will also need to provide an IAM policy in the controller options.\n   *\n   * @param version The version number.\n   */\n  public static of(version: string) {\n    return new AlbControllerVersion(version, true);\n  }\n\n  private constructor(\n    /**\n     * The version string.\n     */\n    public readonly version: string,\n    /**\n     * Whether or not its a custom version.\n     */\n    public readonly custom: boolean) { }\n}\n\n/**\n * ALB Scheme.\n *\n * @see https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.3/guide/ingress/annotations/#scheme\n */\nexport enum AlbScheme {\n\n  /**\n   * The nodes of an internal load balancer have only private IP addresses.\n   * The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes.\n   * Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer.\n   */\n  INTERNAL = 'internal',\n\n  /**\n   * An internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the internet\n   * to the EC2 instances that are registered with the load balancer.\n   */\n  INTERNET_FACING = 'internet-facing'\n}\n\n/**\n * Options for `AlbController`.\n */\nexport interface AlbControllerOptions {\n\n  /**\n   * Version of the controller.\n   */\n  readonly version: AlbControllerVersion;\n\n  /**\n   * The repository to pull the controller image from.\n   *\n   * Note that the default repository works for most regions, but not all.\n   * If the repository is not applicable to your region, use a custom repository\n   * according to the information here: https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases.\n   *\n   * @default '602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-load-balancer-controller'\n   */\n  readonly repository?: string;\n\n  /**\n   * The IAM policy to apply to the service account.\n   *\n   * If you're using one of the built-in versions, this is not required since\n   * CDK ships with the appropriate policies for those versions.\n   *\n   * However, if you are using a custom version, this is required (and validated).\n   *\n   * @default - Corresponds to the predefined version.\n   */\n  readonly policy?: any;\n\n}\n\n/**\n * Properties for `AlbController`.\n */\nexport interface AlbControllerProps extends AlbControllerOptions {\n\n  /**\n   * [disable-awslint:ref-via-interface]\n   * Cluster to install the controller onto.\n   */\n  readonly cluster: Cluster;\n}\n\n/**\n * Construct for installing the AWS ALB Contoller on EKS clusters.\n *\n * Use the factory functions `get` and `getOrCreate` to obtain/create instances of this controller.\n *\n * @see https://kubernetes-sigs.github.io/aws-load-balancer-controller\n *\n */\nexport class AlbController extends Construct {\n\n  /**\n   * Create the controller construct associated with this cluster and scope.\n   *\n   * Singleton per stack/cluster.\n   */\n  public static create(scope: Construct, props: AlbControllerProps) {\n    const stack = Stack.of(scope);\n    const uid = AlbController.uid(props.cluster);\n    return new AlbController(stack, uid, props);\n  }\n\n  private static uid(cluster: Cluster) {\n    return `${Names.nodeUniqueId(cluster.node)}-AlbController`;\n  }\n\n  public constructor(scope: Construct, id: string, props: AlbControllerProps) {\n    super(scope, id);\n\n    const namespace = 'kube-system';\n    const serviceAccount = new ServiceAccount(this, 'alb-sa', { namespace, name: 'aws-load-balancer-controller', cluster: props.cluster });\n\n    if (props.version.custom && !props.policy) {\n      throw new Error(\"'albControllerOptions.policy' is required when using a custom controller version\");\n    }\n\n    // https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/deploy/installation/#iam-permissions\n    const policy: any = props.policy ?? JSON.parse(fs.readFileSync(path.join(__dirname, 'addons', `alb-iam_policy-${props.version.version}.json`), 'utf8'));\n\n    for (const statement of policy.Statement) {\n      serviceAccount.addToPrincipalPolicy(iam.PolicyStatement.fromJson(statement));\n    }\n\n    // https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/deploy/installation/#add-controller-to-cluster\n    const chart = new HelmChart(this, 'Resource', {\n      cluster: props.cluster,\n      chart: 'aws-load-balancer-controller',\n      repository: 'https://aws.github.io/eks-charts',\n      namespace,\n      release: 'aws-load-balancer-controller',\n\n      // latest at the time of writing. We intentionally don't\n      // want to expose this since helm here is just an implementation detail\n      // for installing a specific version of the controller itself.\n      // https://github.com/aws/eks-charts/blob/v0.0.65/stable/aws-load-balancer-controller/Chart.yaml\n      version: '1.2.7',\n\n      wait: true,\n      timeout: Duration.minutes(15),\n      values: {\n        clusterName: props.cluster.clusterName,\n        serviceAccount: {\n          create: false,\n          name: serviceAccount.serviceAccountName,\n        },\n        region: Stack.of(this).region,\n        vpcId: props.cluster.vpc.vpcId,\n        image: {\n          repository: props.repository ?? '602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-load-balancer-controller',\n          tag: props.version.version,\n        },\n      },\n    });\n\n    // the controller relies on permissions deployed using these resources.\n    Node.of(chart).addDependency(serviceAccount);\n    Node.of(chart).addDependency(props.cluster.openIdConnectProvider);\n    Node.of(chart).addDependency(props.cluster.awsAuth);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
