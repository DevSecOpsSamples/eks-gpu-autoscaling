{
  "version": 3,
  "sources": ["k8s-patch.ts"],
  "sourcesContent": ["import { CustomResource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { ICluster } from './cluster';\nimport { KubectlProvider } from './kubectl-provider';\n\n/**\n * Properties for KubernetesPatch\n */\nexport interface KubernetesPatchProps {\n  /**\n   * The cluster to apply the patch to.\n   * [disable-awslint:ref-via-interface]\n   */\n  readonly cluster: ICluster;\n\n  /**\n   * The JSON object to pass to `kubectl patch` when the resource is created/updated.\n   */\n  readonly applyPatch: { [key: string]: any };\n\n  /**\n   * The JSON object to pass to `kubectl patch` when the resource is removed.\n   */\n  readonly restorePatch: { [key: string]: any };\n\n  /**\n   * The full name of the resource to patch (e.g. `deployment/coredns`).\n   */\n  readonly resourceName: string;\n\n  /**\n   * The kubernetes API namespace\n   *\n   * @default \"default\"\n   */\n  readonly resourceNamespace?: string;\n\n  /**\n   * The patch type to pass to `kubectl patch`.\n   * The default type used by `kubectl patch` is \"strategic\".\n   *\n   * @default PatchType.STRATEGIC\n   */\n  readonly patchType?: PatchType;\n}\n\n/**\n * Values for `kubectl patch` --type argument\n */\nexport enum PatchType {\n  /**\n   * JSON Patch, RFC 6902\n   */\n  JSON = 'json',\n  /**\n   * JSON Merge patch\n   */\n  MERGE = 'merge',\n  /**\n   * Strategic merge patch\n   */\n  STRATEGIC = 'strategic'\n}\n\n/**\n * A CloudFormation resource which applies/restores a JSON patch into a\n * Kubernetes resource.\n * @see https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/\n */\nexport class KubernetesPatch extends Construct {\n  constructor(scope: Construct, id: string, props: KubernetesPatchProps) {\n    super(scope, id);\n\n    const stack = Stack.of(this);\n    const provider = KubectlProvider.getOrCreate(this, props.cluster);\n\n    new CustomResource(this, 'Resource', {\n      serviceToken: provider.serviceToken,\n      resourceType: 'Custom::AWSCDK-EKS-KubernetesPatch',\n      properties: {\n        ResourceName: props.resourceName,\n        ResourceNamespace: props.resourceNamespace ?? 'default',\n        ApplyPatchJson: stack.toJsonString(props.applyPatch),\n        RestorePatchJson: stack.toJsonString(props.restorePatch),\n        ClusterName: props.cluster.clusterName,\n        RoleArn: provider.roleArn, // TODO: bake into provider's environment\n        PatchType: props.patchType ?? PatchType.STRATEGIC,\n      },\n    });\n  }\n}\n"],
  "mappings": "wOAAA,OAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EAEA,mBAAA,QAAA,oBAAA,EA8CA,GAAY,WAAZ,AAAA,UAAY,WAAS,CAInB,WAAA,KAAA,OAIA,WAAA,MAAA,QAIA,WAAA,UAAA,WACF,GAbY,UAAA,QAAA,WAAA,SAAA,UAAS,CAAA,EAAA,EAoBrB,MAAa,uBAAwB,cAAA,SAAS,CAC5C,YAAY,MAAkB,GAAY,MAA2B,WACnE,MAAM,MAAO,EAAE,0EAEf,KAAM,OAAQ,OAAA,MAAM,GAAG,IAAI,EACrB,SAAW,mBAAA,gBAAgB,YAAY,KAAM,MAAM,OAAO,EAEhE,GAAI,QAAA,eAAe,KAAM,WAAY,CACnC,aAAc,SAAS,aACvB,aAAc,qCACd,WAAY,CACV,aAAc,MAAM,aACpB,kBAAiB,IAAE,MAAM,qBAAiB,MAAA,KAAA,OAAA,GAAI,UAC9C,eAAgB,MAAM,aAAa,MAAM,UAAU,EACnD,iBAAkB,MAAM,aAAa,MAAM,YAAY,EACvD,YAAa,MAAM,QAAQ,YAC3B,QAAS,SAAS,QAClB,UAAS,IAAE,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,UAAU,WAE3C,GAnBL,QAAA,gBAAA",
  "names": []
}
