{
  "version": 3,
  "sources": ["fargate-profile.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport { Annotations, CustomResource, ITaggable, Lazy, TagManager, TagType } from '../../core';\nimport { Construct } from 'constructs';\nimport { Cluster } from './cluster';\nimport { FARGATE_PROFILE_RESOURCE_TYPE } from './cluster-resource-handler/consts';\nimport { ClusterResourceProvider } from './cluster-resource-provider';\n\n/**\n * Options for defining EKS Fargate Profiles.\n */\nexport interface FargateProfileOptions {\n  /**\n   * The name of the Fargate profile.\n   * @default - generated\n   */\n  readonly fargateProfileName?: string;\n\n  /**\n   * The pod execution role to use for pods that match the selectors in the\n   * Fargate profile. The pod execution role allows Fargate infrastructure to\n   * register with your cluster as a node, and it provides read access to Amazon\n   * ECR image repositories.\n   *\n   * @see https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html\n   * @default - a role will be automatically created\n   */\n  readonly podExecutionRole?: iam.IRole;\n\n  /**\n   * The selectors to match for pods to use this Fargate profile. Each selector\n   * must have an associated namespace. Optionally, you can also specify labels\n   * for a namespace.\n   *\n   * At least one selector is required and you may specify up to five selectors.\n   */\n  readonly selectors: Selector[];\n\n  /**\n   * The VPC from which to select subnets to launch your pods into.\n   *\n   * By default, all private subnets are selected. You can customize this using\n   * `subnetSelection`.\n   *\n   * @default - all private subnets used by the EKS cluster\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * Select which subnets to launch your pods into. At this time, pods running\n   * on Fargate are not assigned public IP addresses, so only private subnets\n   * (with no direct route to an Internet Gateway) are allowed.\n   *\n   * You must specify the VPC to customize the subnet selection\n   *\n   * @default - all private subnets of the VPC are selected.\n   */\n  readonly subnetSelection?: ec2.SubnetSelection;\n}\n\n/**\n * Configuration props for EKS Fargate Profiles.\n */\nexport interface FargateProfileProps extends FargateProfileOptions {\n  /**\n   * The EKS cluster to apply the Fargate profile to.\n   * [disable-awslint:ref-via-interface]\n   */\n  readonly cluster: Cluster;\n}\n\n/**\n * Fargate profile selector.\n */\nexport interface Selector {\n  /**\n   * The Kubernetes namespace that the selector should match.\n   *\n   * You must specify a namespace for a selector. The selector only matches pods\n   * that are created in this namespace, but you can create multiple selectors\n   * to target multiple namespaces.\n   */\n  readonly namespace: string;\n\n  /**\n   * The Kubernetes labels that the selector should match. A pod must contain\n   * all of the labels that are specified in the selector for it to be\n   * considered a match.\n   *\n   * @default - all pods within the namespace will be selected.\n   */\n  readonly labels?: { [key: string]: string };\n}\n\n/**\n * Fargate profiles allows an administrator to declare which pods run on\n * Fargate. This declaration is done through the profile\u2019s selectors. Each\n * profile can have up to five selectors that contain a namespace and optional\n * labels. You must define a namespace for every selector. The label field\n * consists of multiple optional key-value pairs. Pods that match a selector (by\n * matching a namespace for the selector and all of the labels specified in the\n * selector) are scheduled on Fargate. If a namespace selector is defined\n * without any labels, Amazon EKS will attempt to schedule all pods that run in\n * that namespace onto Fargate using the profile. If a to-be-scheduled pod\n * matches any of the selectors in the Fargate profile, then that pod is\n * scheduled on Fargate.\n *\n * If a pod matches multiple Fargate profiles, Amazon EKS picks one of the\n * matches at random. In this case, you can specify which profile a pod should\n * use by adding the following Kubernetes label to the pod specification:\n * eks.amazonaws.com/fargate-profile: profile_name. However, the pod must still\n * match a selector in that profile in order to be scheduled onto Fargate.\n */\nexport class FargateProfile extends Construct implements ITaggable {\n\n  /**\n   * The full Amazon Resource Name (ARN) of the Fargate profile.\n   *\n   * @attribute\n   */\n  public readonly fargateProfileArn: string;\n\n  /**\n   * The name of the Fargate profile.\n   *\n   * @attribute\n   */\n  public readonly fargateProfileName: string;\n\n  /**\n   * Resource tags.\n   */\n  public readonly tags: TagManager;\n\n  /**\n   * The pod execution role to use for pods that match the selectors in the\n   * Fargate profile. The pod execution role allows Fargate infrastructure to\n   * register with your cluster as a node, and it provides read access to Amazon\n   * ECR image repositories.\n   */\n  public readonly podExecutionRole: iam.IRole;\n\n  constructor(scope: Construct, id: string, props: FargateProfileProps) {\n    super(scope, id);\n\n    const provider = ClusterResourceProvider.getOrCreate(this, {\n      adminRole: props.cluster.adminRole,\n      onEventLayer: props.cluster.onEventLayer,\n    });\n\n    this.podExecutionRole = props.podExecutionRole ?? new iam.Role(this, 'PodExecutionRole', {\n      assumedBy: new iam.ServicePrincipal('eks-fargate-pods.amazonaws.com'),\n      managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonEKSFargatePodExecutionRolePolicy')],\n    });\n\n    this.podExecutionRole.grantPassRole(props.cluster.adminRole);\n\n    if (props.subnetSelection && !props.vpc) {\n      Annotations.of(this).addWarning('Vpc must be defined to use a custom subnet selection. All private subnets belonging to the EKS cluster will be used by default');\n    }\n\n    let subnets: string[] | undefined;\n    if (props.vpc) {\n      const selection: ec2.SubnetSelection = props.subnetSelection ?? { subnetType: ec2.SubnetType.PRIVATE };\n      subnets = props.vpc.selectSubnets(selection).subnetIds;\n    }\n\n    if (props.selectors.length < 1) {\n      throw new Error('Fargate profile requires at least one selector');\n    }\n\n    if (props.selectors.length > 5) {\n      throw new Error('Fargate profile supports up to five selectors');\n    }\n\n    this.tags = new TagManager(TagType.MAP, 'AWS::EKS::FargateProfile');\n\n    const resource = new CustomResource(this, 'Resource', {\n      serviceToken: provider.serviceToken,\n      resourceType: FARGATE_PROFILE_RESOURCE_TYPE,\n      properties: {\n        AssumeRoleArn: props.cluster.adminRole.roleArn,\n        Config: {\n          clusterName: props.cluster.clusterName,\n          fargateProfileName: props.fargateProfileName,\n          podExecutionRoleArn: this.podExecutionRole.roleArn,\n          selectors: props.selectors,\n          subnets,\n          tags: Lazy.any({ produce: () => this.tags.renderTags() }),\n        },\n      },\n    });\n\n    this.fargateProfileArn = resource.getAttString('fargateProfileArn');\n    this.fargateProfileName = resource.ref;\n\n    // Fargate profiles must be created sequentially. If other profile(s) already\n    // exist on the same cluster, create a dependency to force sequential creation.\n    const clusterFargateProfiles = props.cluster._attachFargateProfile(this);\n    if (clusterFargateProfiles.length > 1) {\n      const previousProfile = clusterFargateProfiles[clusterFargateProfiles.length - 2];\n      resource.node.addDependency(previousProfile);\n    }\n\n    // map the fargate pod execution role to the relevant groups in rbac\n    // see https://github.com/aws/aws-cdk/issues/7981\n    props.cluster.awsAuth.addRoleMapping(this.podExecutionRole, {\n      username: 'system:node:{{SessionName}}',\n      groups: [\n        'system:bootstrappers',\n        'system:nodes',\n        'system:node-proxier',\n      ],\n    });\n  }\n}\n"],
  "mappings": "qNAAA,IAAA,QAAA,eAAA,EACA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EAEA,SAAA,QAAA,mCAAA,EACA,4BAAA,QAAA,6BAAA,EA2GA,MAAa,sBAAuB,cAAA,SAAS,CA6B3C,YAAY,MAAkB,GAAY,MAA0B,WAClE,MAAM,MAAO,EAAE,yEAEf,KAAM,UAAW,4BAAA,wBAAwB,YAAY,KAAM,CACzD,UAAW,MAAM,QAAQ,UACzB,aAAc,MAAM,QAAQ,aAC7B,EAED,KAAK,iBAAgB,IAAG,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAAI,GAAI,KAAI,KAAK,KAAM,mBAAoB,CACvF,UAAW,GAAI,KAAI,iBAAiB,gCAAgC,EACpE,gBAAiB,CAAC,IAAI,cAAc,yBAAyB,wCAAwC,CAAC,EACvG,EAED,KAAK,iBAAiB,cAAc,MAAM,QAAQ,SAAS,EAEvD,MAAM,iBAAmB,CAAC,MAAM,KAClC,OAAA,YAAY,GAAG,IAAI,EAAE,WAAW,gIAAgI,EAGlK,GAAI,SACJ,GAAI,MAAM,IAAK,CACb,KAAM,WAAS,IAAwB,MAAM,mBAAe,MAAA,KAAA,OAAA,GAAI,CAAE,WAAY,IAAI,WAAW,OAAO,EACpG,QAAU,MAAM,IAAI,cAAc,SAAS,EAAE,UAG/C,GAAI,MAAM,UAAU,OAAS,EAC3B,KAAM,IAAI,OAAM,gDAAgD,EAGlE,GAAI,MAAM,UAAU,OAAS,EAC3B,KAAM,IAAI,OAAM,+CAA+C,EAGjE,KAAK,KAAO,GAAI,QAAA,WAAW,OAAA,QAAQ,IAAK,0BAA0B,EAElE,KAAM,UAAW,GAAI,QAAA,eAAe,KAAM,WAAY,CACpD,aAAc,SAAS,aACvB,aAAc,SAAA,8BACd,WAAY,CACV,cAAe,MAAM,QAAQ,UAAU,QACvC,OAAQ,CACN,YAAa,MAAM,QAAQ,YAC3B,mBAAoB,MAAM,mBAC1B,oBAAqB,KAAK,iBAAiB,QAC3C,UAAW,MAAM,UACjB,QACA,KAAM,OAAA,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,KAAK,WAAU,CAAE,CAAE,IAG7D,EAED,KAAK,kBAAoB,SAAS,aAAa,mBAAmB,EAClE,KAAK,mBAAqB,SAAS,IAInC,KAAM,wBAAyB,MAAM,QAAQ,sBAAsB,IAAI,EACvE,GAAI,uBAAuB,OAAS,EAAG,CACrC,KAAM,iBAAkB,uBAAuB,uBAAuB,OAAS,GAC/E,SAAS,KAAK,cAAc,eAAe,EAK7C,MAAM,QAAQ,QAAQ,eAAe,KAAK,iBAAkB,CAC1D,SAAU,8BACV,OAAQ,CACN,uBACA,eACA,uBAEH,GApGL,QAAA,eAAA",
  "names": []
}
