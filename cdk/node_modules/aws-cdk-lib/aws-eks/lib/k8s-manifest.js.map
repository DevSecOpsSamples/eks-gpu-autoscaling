{
  "version": 3,
  "sources": ["k8s-manifest.ts"],
  "sourcesContent": ["import { CustomResource, Stack } from '../../core';\nimport { Construct, Node } from 'constructs';\nimport { AlbScheme } from './alb-controller';\nimport { ICluster } from './cluster';\nimport { KubectlProvider } from './kubectl-provider';\n\nconst PRUNE_LABEL_PREFIX = 'aws.cdk.eks/prune-';\n\n/**\n * Options for `KubernetesManifest`.\n */\nexport interface KubernetesManifestOptions {\n  /**\n   * When a resource is removed from a Kubernetes manifest, it no longer appears\n   * in the manifest, and there is no way to know that this resource needs to be\n   * deleted. To address this, `kubectl apply` has a `--prune` option which will\n   * query the cluster for all resources with a specific label and will remove\n   * all the labeld resources that are not part of the applied manifest. If this\n   * option is disabled and a resource is removed, it will become \"orphaned\" and\n   * will not be deleted from the cluster.\n   *\n   * When this option is enabled (default), the construct will inject a label to\n   * all Kubernetes resources included in this manifest which will be used to\n   * prune resources when the manifest changes via `kubectl apply --prune`.\n   *\n   * The label name will be `aws.cdk.eks/prune-<ADDR>` where `<ADDR>` is the\n   * 42-char unique address of this construct in the construct tree. Value is\n   * empty.\n   *\n   * @see\n   * https://kubernetes.io/docs/tasks/manage-kubernetes-objects/declarative-config/#alternative-kubectl-apply-f-directory-prune-l-your-label\n   *\n   * @default - based on the prune option of the cluster, which is `true` unless\n   * otherwise specified.\n   */\n  readonly prune?: boolean;\n\n  /**\n   * A flag to signify if the manifest validation should be skipped\n   *\n   * @default false\n   */\n  readonly skipValidation?: boolean;\n\n  /**\n   * Automatically detect `Ingress` resources in the manifest and annotate them so they\n   * are picked up by an ALB Ingress Controller.\n   *\n   * @default false\n   */\n  readonly ingressAlb?: boolean;\n\n  /**\n   * Specify the ALB scheme that should be applied to `Ingress` resources.\n   * Only applicable if `ingressAlb` is set to `true`.\n   *\n   * @default AlbScheme.INTERNAL\n   */\n  readonly ingressAlbScheme?: AlbScheme;\n\n}\n\n/**\n * Properties for KubernetesManifest\n */\nexport interface KubernetesManifestProps extends KubernetesManifestOptions {\n  /**\n   * The EKS cluster to apply this manifest to.\n   *\n   * [disable-awslint:ref-via-interface]\n   */\n  readonly cluster: ICluster;\n\n  /**\n   * The manifest to apply.\n   *\n   * Consists of any number of child resources.\n   *\n   * When the resources are created/updated, this manifest will be applied to the\n   * cluster through `kubectl apply` and when the resources or the stack is\n   * deleted, the resources in the manifest will be deleted through `kubectl delete`.\n   *\n   * @example\n   *\n   * [{\n   *   apiVersion: 'v1',\n   *   kind: 'Pod',\n   *   metadata: { name: 'mypod' },\n   *   spec: {\n   *     containers: [ { name: 'hello', image: 'paulbouwer/hello-kubernetes:1.5', ports: [ { containerPort: 8080 } ] } ]\n   *   }\n   * }]\n   *\n   */\n  readonly manifest: Record<string, any>[];\n\n  /**\n   * Overwrite any existing resources.\n   *\n   * If this is set, we will use `kubectl apply` instead of `kubectl create`\n   * when the resource is created. Otherwise, if there is already a resource\n   * in the cluster with the same name, the operation will fail.\n   *\n   * @default false\n   */\n  readonly overwrite?: boolean;\n}\n\n/**\n * Represents a manifest within the Kubernetes system.\n *\n * Alternatively, you can use `cluster.addManifest(resource[, resource, ...])`\n * to define resources on this cluster.\n *\n * Applies/deletes the manifest using `kubectl`.\n */\nexport class KubernetesManifest extends Construct {\n  /**\n   * The CloudFormation reosurce type.\n   */\n  public static readonly RESOURCE_TYPE = 'Custom::AWSCDK-EKS-KubernetesResource';\n\n  constructor(scope: Construct, id: string, props: KubernetesManifestProps) {\n    super(scope, id);\n\n    const stack = Stack.of(this);\n    const provider = KubectlProvider.getOrCreate(this, props.cluster);\n\n    const prune = props.prune ?? props.cluster.prune;\n    const pruneLabel = prune\n      ? this.injectPruneLabel(props.manifest)\n      : undefined;\n\n    if (props.ingressAlb ?? false) {\n      this.injectIngressAlbAnnotations(props.manifest, props.ingressAlbScheme ?? AlbScheme.INTERNAL);\n    }\n\n    const customResource = new CustomResource(this, 'Resource', {\n      serviceToken: provider.serviceToken,\n      resourceType: KubernetesManifest.RESOURCE_TYPE,\n      properties: {\n        // `toJsonString` enables embedding CDK tokens in the manifest and will\n        // render a CloudFormation-compatible JSON string (similar to\n        // StepFunctions, CloudWatch Dashboards etc).\n        Manifest: stack.toJsonString(props.manifest),\n        ClusterName: props.cluster.clusterName,\n        RoleArn: provider.roleArn, // TODO: bake into provider's environment\n        PruneLabel: pruneLabel,\n        Overwrite: props.overwrite,\n        SkipValidation: props.skipValidation,\n      },\n    });\n\n    this.node.defaultChild = customResource.node.defaultChild;\n  }\n\n  /**\n   * Injects a generated prune label to all resources in this manifest. The\n   * label name will be `awscdk.eks/manifest-ADDR` where `ADDR` is the address\n   * of the construct in the construct tree.\n   *\n   * @returns the label name\n   */\n  private injectPruneLabel(manifest: Record<string, any>[]): string {\n    // max label name is 64 chars and addrs is always 42.\n    const pruneLabel = PRUNE_LABEL_PREFIX + Node.of(this).addr;\n\n    for (const resource of manifest) {\n      // skip resource if it's not an object or if it does not have a \"kind\"\n      if (typeof(resource) !== 'object' || !resource.kind) {\n        continue;\n      }\n\n      if (!resource.metadata) {\n        resource.metadata = {};\n      }\n\n      if (!resource.metadata.labels) {\n        resource.metadata.labels = {};\n      }\n\n      resource.metadata.labels = {\n        [pruneLabel]: '',\n        ...resource.metadata.labels,\n      };\n    }\n\n    return pruneLabel;\n  }\n\n  /**\n   * Inject the necessary ingress annontations if possible (and requested).\n   *\n   * @see https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/ingress/annotations/\n   */\n  private injectIngressAlbAnnotations(manifest: Record<string, any>[], scheme: AlbScheme) {\n\n    for (const resource of manifest) {\n\n      // skip resource if it's not an object or if it does not have a \"kind\"\n      if (typeof(resource) !== 'object' || !resource.kind) {\n        continue;\n      }\n\n      if (resource.kind === 'Ingress') {\n        resource.metadata.annotations = {\n          'kubernetes.io/ingress.class': 'alb',\n          'alb.ingress.kubernetes.io/scheme': scheme,\n          ...resource.metadata.annotations,\n        };\n      }\n    }\n\n  }\n}\n"],
  "mappings": "yNAAA,OAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EACA,iBAAA,QAAA,kBAAA,EAEA,mBAAA,QAAA,oBAAA,EAEM,mBAAqB,qBA8G3B,MAAa,0BAA2B,cAAA,SAAS,CAM/C,YAAY,MAAkB,GAAY,MAA8B,cACtE,MAAM,MAAO,EAAE,6EAEf,KAAM,OAAQ,OAAA,MAAM,GAAG,IAAI,EACrB,SAAW,mBAAA,gBAAgB,YAAY,KAAM,MAAM,OAAO,EAG1D,WAAa,AADR,KAAG,MAAM,SAAK,MAAA,KAAA,OAAA,GAAI,MAAM,QAAQ,OAEvC,KAAK,iBAAiB,MAAM,QAAQ,EACpC,OAEJ,AAAA,IAAI,MAAM,cAAU,MAAA,KAAA,QAAA,IAClB,KAAK,4BAA4B,MAAM,SAAQ,IAAE,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAAI,iBAAA,UAAU,QAAQ,EAG/F,KAAM,gBAAiB,GAAI,QAAA,eAAe,KAAM,WAAY,CAC1D,aAAc,SAAS,aACvB,aAAc,mBAAmB,cACjC,WAAY,CAIV,SAAU,MAAM,aAAa,MAAM,QAAQ,EAC3C,YAAa,MAAM,QAAQ,YAC3B,QAAS,SAAS,QAClB,WAAY,WACZ,UAAW,MAAM,UACjB,eAAgB,MAAM,gBAEzB,EAED,KAAK,KAAK,aAAe,eAAe,KAAK,aAUvC,iBAAiB,SAA+B,CAEtD,KAAM,YAAa,mBAAqB,aAAA,KAAK,GAAG,IAAI,EAAE,KAEtD,SAAW,YAAY,UAErB,AAAI,MAAO,WAAc,UAAY,CAAC,SAAS,MAI1C,UAAS,UACZ,UAAS,SAAW,CAAA,GAGjB,SAAS,SAAS,QACrB,UAAS,SAAS,OAAS,CAAA,GAG7B,SAAS,SAAS,OAAS,EACxB,YAAa,MACX,SAAS,SAAS,SAIzB,MAAO,YAQD,4BAA4B,SAAiC,OAAiB,CAEpF,SAAW,YAAY,UAGrB,AAAI,MAAO,WAAc,UAAY,CAAC,SAAS,MAI3C,SAAS,OAAS,WACpB,UAAS,SAAS,YAAc,CAC9B,8BAA+B,MAC/B,mCAAoC,UACjC,SAAS,SAAS,eA5F/B,QAAA,mBAAA,gIAIyB,mBAAA,cAAgB",
  "names": []
}
