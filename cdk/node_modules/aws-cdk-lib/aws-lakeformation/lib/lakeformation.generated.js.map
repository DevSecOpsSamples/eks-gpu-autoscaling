{
  "version": 3,
  "sources": ["lakeformation.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-04-07T10:53:57.164Z\",\"fingerprint\":\"6JsF471h19VHEObOYZUCKtvzHhhzJ49E6KX5+KSNT6A=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n/**\n * Properties for defining a `CfnDataLakeSettings`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datalakesettings.html\n */\nexport interface CfnDataLakeSettingsProps {\n\n    /**\n     * A list of AWS Lake Formation principals.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datalakesettings.html#cfn-lakeformation-datalakesettings-admins\n     */\n    readonly admins?: Array<CfnDataLakeSettings.DataLakePrincipalProperty | cdk.IResolvable> | cdk.IResolvable | cdk.IResolvable;\n\n    /**\n     * `AWS::LakeFormation::DataLakeSettings.TrustedResourceOwners`\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datalakesettings.html#cfn-lakeformation-datalakesettings-trustedresourceowners\n     */\n    readonly trustedResourceOwners?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDataLakeSettingsProps`\n *\n * @param properties - the TypeScript properties of a `CfnDataLakeSettingsProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataLakeSettingsPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('admins', cdk.listValidator(CfnDataLakeSettings_DataLakePrincipalPropertyValidator))(properties.admins));\n    errors.collect(cdk.propertyValidator('trustedResourceOwners', cdk.listValidator(cdk.validateString))(properties.trustedResourceOwners));\n    return errors.wrap('supplied properties not correct for \"CfnDataLakeSettingsProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::DataLakeSettings` resource\n *\n * @param properties - the TypeScript properties of a `CfnDataLakeSettingsProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::DataLakeSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataLakeSettingsPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataLakeSettingsPropsValidator(properties).assertSuccess();\n    return {\n        Admins: cdk.listMapper(cfnDataLakeSettingsDataLakePrincipalPropertyToCloudFormation)(properties.admins),\n        TrustedResourceOwners: cdk.listMapper(cdk.stringToCloudFormation)(properties.trustedResourceOwners),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataLakeSettingsPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataLakeSettingsProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataLakeSettingsProps>();\n    ret.addPropertyResult('admins', 'Admins', properties.Admins != null ? cfn_parse.FromCloudFormation.getArray(CfnDataLakeSettingsDataLakePrincipalPropertyFromCloudFormation)(properties.Admins) : undefined);\n    ret.addPropertyResult('trustedResourceOwners', 'TrustedResourceOwners', properties.TrustedResourceOwners != null ? cfn_parse.FromCloudFormation.getStringArray(properties.TrustedResourceOwners) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::LakeFormation::DataLakeSettings`\n *\n * The `AWS::LakeFormation::DataLakeSettings` resource is an AWS Lake Formation resource type that manages the data lake settings for your account. Note that the CloudFormation template only supports updating the `Admins` list. It does not support updating the [CreateDatabaseDefaultPermissions](https://docs.aws.amazon.com/lake-formation/latest/dg/aws-lake-formation-api-aws-lake-formation-api-settings.html#aws-lake-formation-api-aws-lake-formation-api-settings-DataLakeSettings) or [CreateTableDefaultPermissions](https://docs.aws.amazon.com/lake-formation/latest/dg/aws-lake-formation-api-aws-lake-formation-api-settings.html#aws-lake-formation-api-aws-lake-formation-api-settings-DataLakeSettings) . Those permissions can only be edited in the DataLakeSettings resource via the API.\n *\n * @cloudformationResource AWS::LakeFormation::DataLakeSettings\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datalakesettings.html\n */\nexport class CfnDataLakeSettings extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::LakeFormation::DataLakeSettings\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDataLakeSettings {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDataLakeSettingsPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDataLakeSettings(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * A list of AWS Lake Formation principals.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datalakesettings.html#cfn-lakeformation-datalakesettings-admins\n     */\n    public admins: Array<CfnDataLakeSettings.DataLakePrincipalProperty | cdk.IResolvable> | cdk.IResolvable | cdk.IResolvable | undefined;\n\n    /**\n     * `AWS::LakeFormation::DataLakeSettings.TrustedResourceOwners`\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datalakesettings.html#cfn-lakeformation-datalakesettings-trustedresourceowners\n     */\n    public trustedResourceOwners: string[] | undefined;\n\n    /**\n     * Create a new `AWS::LakeFormation::DataLakeSettings`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnDataLakeSettingsProps = {}) {\n        super(scope, id, { type: CfnDataLakeSettings.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.admins = props.admins;\n        this.trustedResourceOwners = props.trustedResourceOwners;\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDataLakeSettings.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            admins: this.admins,\n            trustedResourceOwners: this.trustedResourceOwners,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDataLakeSettingsPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDataLakeSettings {\n    /**\n     * The Lake Formation principal.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-datalakesettings-datalakeprincipal.html\n     */\n    export interface DataLakePrincipalProperty {\n        /**\n         * An identifier for the Lake Formation principal.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-datalakesettings-datalakeprincipal.html#cfn-lakeformation-datalakesettings-datalakeprincipal-datalakeprincipalidentifier\n         */\n        readonly dataLakePrincipalIdentifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataLakePrincipalProperty`\n *\n * @param properties - the TypeScript properties of a `DataLakePrincipalProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataLakeSettings_DataLakePrincipalPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataLakePrincipalIdentifier', cdk.validateString)(properties.dataLakePrincipalIdentifier));\n    return errors.wrap('supplied properties not correct for \"DataLakePrincipalProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::DataLakeSettings.DataLakePrincipal` resource\n *\n * @param properties - the TypeScript properties of a `DataLakePrincipalProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::DataLakeSettings.DataLakePrincipal` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataLakeSettingsDataLakePrincipalPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataLakeSettings_DataLakePrincipalPropertyValidator(properties).assertSuccess();\n    return {\n        DataLakePrincipalIdentifier: cdk.stringToCloudFormation(properties.dataLakePrincipalIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataLakeSettingsDataLakePrincipalPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataLakeSettings.DataLakePrincipalProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataLakeSettings.DataLakePrincipalProperty>();\n    ret.addPropertyResult('dataLakePrincipalIdentifier', 'DataLakePrincipalIdentifier', properties.DataLakePrincipalIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.DataLakePrincipalIdentifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * Properties for defining a `CfnPermissions`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html\n */\nexport interface CfnPermissionsProps {\n\n    /**\n     * The AWS Lake Formation principal.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-datalakeprincipal\n     */\n    readonly dataLakePrincipal: CfnPermissions.DataLakePrincipalProperty | cdk.IResolvable;\n\n    /**\n     * A structure for the resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-resource\n     */\n    readonly resource: CfnPermissions.ResourceProperty | cdk.IResolvable;\n\n    /**\n     * The permissions granted or revoked.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-permissions\n     */\n    readonly permissions?: string[];\n\n    /**\n     * Indicates whether to grant the ability to grant permissions (as a subset of permissions granted).\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-permissionswithgrantoption\n     */\n    readonly permissionsWithGrantOption?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPermissionsProps`\n *\n * @param properties - the TypeScript properties of a `CfnPermissionsProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissionsPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataLakePrincipal', cdk.requiredValidator)(properties.dataLakePrincipal));\n    errors.collect(cdk.propertyValidator('dataLakePrincipal', CfnPermissions_DataLakePrincipalPropertyValidator)(properties.dataLakePrincipal));\n    errors.collect(cdk.propertyValidator('permissions', cdk.listValidator(cdk.validateString))(properties.permissions));\n    errors.collect(cdk.propertyValidator('permissionsWithGrantOption', cdk.listValidator(cdk.validateString))(properties.permissionsWithGrantOption));\n    errors.collect(cdk.propertyValidator('resource', cdk.requiredValidator)(properties.resource));\n    errors.collect(cdk.propertyValidator('resource', CfnPermissions_ResourcePropertyValidator)(properties.resource));\n    return errors.wrap('supplied properties not correct for \"CfnPermissionsProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions` resource\n *\n * @param properties - the TypeScript properties of a `CfnPermissionsProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionsPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissionsPropsValidator(properties).assertSuccess();\n    return {\n        DataLakePrincipal: cfnPermissionsDataLakePrincipalPropertyToCloudFormation(properties.dataLakePrincipal),\n        Resource: cfnPermissionsResourcePropertyToCloudFormation(properties.resource),\n        Permissions: cdk.listMapper(cdk.stringToCloudFormation)(properties.permissions),\n        PermissionsWithGrantOption: cdk.listMapper(cdk.stringToCloudFormation)(properties.permissionsWithGrantOption),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionsPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissionsProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissionsProps>();\n    ret.addPropertyResult('dataLakePrincipal', 'DataLakePrincipal', CfnPermissionsDataLakePrincipalPropertyFromCloudFormation(properties.DataLakePrincipal));\n    ret.addPropertyResult('resource', 'Resource', CfnPermissionsResourcePropertyFromCloudFormation(properties.Resource));\n    ret.addPropertyResult('permissions', 'Permissions', properties.Permissions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Permissions) : undefined);\n    ret.addPropertyResult('permissionsWithGrantOption', 'PermissionsWithGrantOption', properties.PermissionsWithGrantOption != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PermissionsWithGrantOption) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::LakeFormation::Permissions`\n *\n * The `AWS::LakeFormation::Permissions` resource represents the permissions that a principal has on an AWS Glue Data Catalog resource (such as AWS Glue database or AWS Glue tables). When you upload a permissions stack, the permissions are granted to the principal and when you remove the stack, the permissions are revoked from the principal. If you remove a stack, and the principal does not have the permissions referenced in the stack then AWS Lake Formation will throw an error because you can\u2019t call revoke on non-existing permissions. To successfully remove the stack, you\u2019ll need to regrant those permissions and then remove the stack.\n *\n * @cloudformationResource AWS::LakeFormation::Permissions\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html\n */\nexport class CfnPermissions extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::LakeFormation::Permissions\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPermissions {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPermissionsPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPermissions(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * The AWS Lake Formation principal.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-datalakeprincipal\n     */\n    public dataLakePrincipal: CfnPermissions.DataLakePrincipalProperty | cdk.IResolvable;\n\n    /**\n     * A structure for the resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-resource\n     */\n    public resource: CfnPermissions.ResourceProperty | cdk.IResolvable;\n\n    /**\n     * The permissions granted or revoked.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-permissions\n     */\n    public permissions: string[] | undefined;\n\n    /**\n     * Indicates whether to grant the ability to grant permissions (as a subset of permissions granted).\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html#cfn-lakeformation-permissions-permissionswithgrantoption\n     */\n    public permissionsWithGrantOption: string[] | undefined;\n\n    /**\n     * Create a new `AWS::LakeFormation::Permissions`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnPermissionsProps) {\n        super(scope, id, { type: CfnPermissions.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'dataLakePrincipal', this);\n        cdk.requireProperty(props, 'resource', this);\n\n        this.dataLakePrincipal = props.dataLakePrincipal;\n        this.resource = props.resource;\n        this.permissions = props.permissions;\n        this.permissionsWithGrantOption = props.permissionsWithGrantOption;\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPermissions.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            dataLakePrincipal: this.dataLakePrincipal,\n            resource: this.resource,\n            permissions: this.permissions,\n            permissionsWithGrantOption: this.permissionsWithGrantOption,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPermissionsPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPermissions {\n    /**\n     * A wildcard object, consisting of an optional list of excluded column names or indexes.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-columnwildcard.html\n     */\n    export interface ColumnWildcardProperty {\n        /**\n         * Excludes column names. Any column with this name will be excluded.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-columnwildcard.html#cfn-lakeformation-permissions-columnwildcard-excludedcolumnnames\n         */\n        readonly excludedColumnNames?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ColumnWildcardProperty`\n *\n * @param properties - the TypeScript properties of a `ColumnWildcardProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissions_ColumnWildcardPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('excludedColumnNames', cdk.listValidator(cdk.validateString))(properties.excludedColumnNames));\n    return errors.wrap('supplied properties not correct for \"ColumnWildcardProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.ColumnWildcard` resource\n *\n * @param properties - the TypeScript properties of a `ColumnWildcardProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.ColumnWildcard` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionsColumnWildcardPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissions_ColumnWildcardPropertyValidator(properties).assertSuccess();\n    return {\n        ExcludedColumnNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.excludedColumnNames),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionsColumnWildcardPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissions.ColumnWildcardProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissions.ColumnWildcardProperty>();\n    ret.addPropertyResult('excludedColumnNames', 'ExcludedColumnNames', properties.ExcludedColumnNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExcludedColumnNames) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPermissions {\n    /**\n     * The Lake Formation principal.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-datalakeprincipal.html\n     */\n    export interface DataLakePrincipalProperty {\n        /**\n         * An identifier for the Lake Formation principal.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-datalakeprincipal.html#cfn-lakeformation-permissions-datalakeprincipal-datalakeprincipalidentifier\n         */\n        readonly dataLakePrincipalIdentifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataLakePrincipalProperty`\n *\n * @param properties - the TypeScript properties of a `DataLakePrincipalProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissions_DataLakePrincipalPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataLakePrincipalIdentifier', cdk.validateString)(properties.dataLakePrincipalIdentifier));\n    return errors.wrap('supplied properties not correct for \"DataLakePrincipalProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.DataLakePrincipal` resource\n *\n * @param properties - the TypeScript properties of a `DataLakePrincipalProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.DataLakePrincipal` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionsDataLakePrincipalPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissions_DataLakePrincipalPropertyValidator(properties).assertSuccess();\n    return {\n        DataLakePrincipalIdentifier: cdk.stringToCloudFormation(properties.dataLakePrincipalIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionsDataLakePrincipalPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissions.DataLakePrincipalProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissions.DataLakePrincipalProperty>();\n    ret.addPropertyResult('dataLakePrincipalIdentifier', 'DataLakePrincipalIdentifier', properties.DataLakePrincipalIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.DataLakePrincipalIdentifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPermissions {\n    /**\n     * A structure for a data location object where permissions are granted or revoked.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-datalocationresource.html\n     */\n    export interface DataLocationResourceProperty {\n        /**\n         * `CfnPermissions.DataLocationResourceProperty.CatalogId`\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-datalocationresource.html#cfn-lakeformation-permissions-datalocationresource-catalogid\n         */\n        readonly catalogId?: string;\n        /**\n         * Currently not supported by AWS CloudFormation .\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-datalocationresource.html#cfn-lakeformation-permissions-datalocationresource-s3resource\n         */\n        readonly s3Resource?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataLocationResourceProperty`\n *\n * @param properties - the TypeScript properties of a `DataLocationResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissions_DataLocationResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('s3Resource', cdk.validateString)(properties.s3Resource));\n    return errors.wrap('supplied properties not correct for \"DataLocationResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.DataLocationResource` resource\n *\n * @param properties - the TypeScript properties of a `DataLocationResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.DataLocationResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionsDataLocationResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissions_DataLocationResourcePropertyValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        S3Resource: cdk.stringToCloudFormation(properties.s3Resource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionsDataLocationResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissions.DataLocationResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissions.DataLocationResourceProperty>();\n    ret.addPropertyResult('catalogId', 'CatalogId', properties.CatalogId != null ? cfn_parse.FromCloudFormation.getString(properties.CatalogId) : undefined);\n    ret.addPropertyResult('s3Resource', 'S3Resource', properties.S3Resource != null ? cfn_parse.FromCloudFormation.getString(properties.S3Resource) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPermissions {\n    /**\n     * A structure for the database object.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-databaseresource.html\n     */\n    export interface DatabaseResourceProperty {\n        /**\n         * `CfnPermissions.DatabaseResourceProperty.CatalogId`\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-databaseresource.html#cfn-lakeformation-permissions-databaseresource-catalogid\n         */\n        readonly catalogId?: string;\n        /**\n         * The name of the database resource. Unique to the Data Catalog.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-databaseresource.html#cfn-lakeformation-permissions-databaseresource-name\n         */\n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DatabaseResourceProperty`\n *\n * @param properties - the TypeScript properties of a `DatabaseResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissions_DatabaseResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"DatabaseResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.DatabaseResource` resource\n *\n * @param properties - the TypeScript properties of a `DatabaseResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.DatabaseResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionsDatabaseResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissions_DatabaseResourcePropertyValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionsDatabaseResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissions.DatabaseResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissions.DatabaseResourceProperty>();\n    ret.addPropertyResult('catalogId', 'CatalogId', properties.CatalogId != null ? cfn_parse.FromCloudFormation.getString(properties.CatalogId) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPermissions {\n    /**\n     * A structure for the resource.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-resource.html\n     */\n    export interface ResourceProperty {\n        /**\n         * A structure for a data location object where permissions are granted or revoked.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-resource.html#cfn-lakeformation-permissions-resource-datalocationresource\n         */\n        readonly dataLocationResource?: CfnPermissions.DataLocationResourceProperty | cdk.IResolvable;\n        /**\n         * A structure for the database object.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-resource.html#cfn-lakeformation-permissions-resource-databaseresource\n         */\n        readonly databaseResource?: CfnPermissions.DatabaseResourceProperty | cdk.IResolvable;\n        /**\n         * A structure for the table object. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-resource.html#cfn-lakeformation-permissions-resource-tableresource\n         */\n        readonly tableResource?: CfnPermissions.TableResourceProperty | cdk.IResolvable;\n        /**\n         * Currently not supported by AWS CloudFormation .\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-resource.html#cfn-lakeformation-permissions-resource-tablewithcolumnsresource\n         */\n        readonly tableWithColumnsResource?: CfnPermissions.TableWithColumnsResourceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissions_ResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataLocationResource', CfnPermissions_DataLocationResourcePropertyValidator)(properties.dataLocationResource));\n    errors.collect(cdk.propertyValidator('databaseResource', CfnPermissions_DatabaseResourcePropertyValidator)(properties.databaseResource));\n    errors.collect(cdk.propertyValidator('tableResource', CfnPermissions_TableResourcePropertyValidator)(properties.tableResource));\n    errors.collect(cdk.propertyValidator('tableWithColumnsResource', CfnPermissions_TableWithColumnsResourcePropertyValidator)(properties.tableWithColumnsResource));\n    return errors.wrap('supplied properties not correct for \"ResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.Resource` resource\n *\n * @param properties - the TypeScript properties of a `ResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.Resource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionsResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissions_ResourcePropertyValidator(properties).assertSuccess();\n    return {\n        DataLocationResource: cfnPermissionsDataLocationResourcePropertyToCloudFormation(properties.dataLocationResource),\n        DatabaseResource: cfnPermissionsDatabaseResourcePropertyToCloudFormation(properties.databaseResource),\n        TableResource: cfnPermissionsTableResourcePropertyToCloudFormation(properties.tableResource),\n        TableWithColumnsResource: cfnPermissionsTableWithColumnsResourcePropertyToCloudFormation(properties.tableWithColumnsResource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissions.ResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissions.ResourceProperty>();\n    ret.addPropertyResult('dataLocationResource', 'DataLocationResource', properties.DataLocationResource != null ? CfnPermissionsDataLocationResourcePropertyFromCloudFormation(properties.DataLocationResource) : undefined);\n    ret.addPropertyResult('databaseResource', 'DatabaseResource', properties.DatabaseResource != null ? CfnPermissionsDatabaseResourcePropertyFromCloudFormation(properties.DatabaseResource) : undefined);\n    ret.addPropertyResult('tableResource', 'TableResource', properties.TableResource != null ? CfnPermissionsTableResourcePropertyFromCloudFormation(properties.TableResource) : undefined);\n    ret.addPropertyResult('tableWithColumnsResource', 'TableWithColumnsResource', properties.TableWithColumnsResource != null ? CfnPermissionsTableWithColumnsResourcePropertyFromCloudFormation(properties.TableWithColumnsResource) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPermissions {\n    /**\n     * A structure for the table object. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tableresource.html\n     */\n    export interface TableResourceProperty {\n        /**\n         * `CfnPermissions.TableResourceProperty.CatalogId`\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tableresource.html#cfn-lakeformation-permissions-tableresource-catalogid\n         */\n        readonly catalogId?: string;\n        /**\n         * The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tableresource.html#cfn-lakeformation-permissions-tableresource-databasename\n         */\n        readonly databaseName?: string;\n        /**\n         * The name of the table.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tableresource.html#cfn-lakeformation-permissions-tableresource-name\n         */\n        readonly name?: string;\n        /**\n         * An empty object representing all tables under a database. If this field is specified instead of the `Name` field, all tables under `DatabaseName` will have permission changes applied.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tableresource.html#cfn-lakeformation-permissions-tableresource-tablewildcard\n         */\n        readonly tableWildcard?: CfnPermissions.TableWildcardProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TableResourceProperty`\n *\n * @param properties - the TypeScript properties of a `TableResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissions_TableResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tableWildcard', CfnPermissions_TableWildcardPropertyValidator)(properties.tableWildcard));\n    return errors.wrap('supplied properties not correct for \"TableResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.TableResource` resource\n *\n * @param properties - the TypeScript properties of a `TableResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.TableResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionsTableResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissions_TableResourcePropertyValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        Name: cdk.stringToCloudFormation(properties.name),\n        TableWildcard: cfnPermissionsTableWildcardPropertyToCloudFormation(properties.tableWildcard),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionsTableResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissions.TableResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissions.TableResourceProperty>();\n    ret.addPropertyResult('catalogId', 'CatalogId', properties.CatalogId != null ? cfn_parse.FromCloudFormation.getString(properties.CatalogId) : undefined);\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tableWildcard', 'TableWildcard', properties.TableWildcard != null ? CfnPermissionsTableWildcardPropertyFromCloudFormation(properties.TableWildcard) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPermissions {\n    /**\n     * A wildcard object representing every table under a database.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tablewildcard.html\n     */\n    export interface TableWildcardProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TableWildcardProperty`\n *\n * @param properties - the TypeScript properties of a `TableWildcardProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissions_TableWildcardPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"TableWildcardProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.TableWildcard` resource\n *\n * @param properties - the TypeScript properties of a `TableWildcardProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.TableWildcard` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionsTableWildcardPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissions_TableWildcardPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionsTableWildcardPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissions.TableWildcardProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissions.TableWildcardProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPermissions {\n    /**\n     * A structure for a table with columns object. This object is only used when granting a SELECT permission.\n     *\n     * This object must take a value for at least one of `ColumnsNames` , `ColumnsIndexes` , or `ColumnsWildcard` .\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tablewithcolumnsresource.html\n     */\n    export interface TableWithColumnsResourceProperty {\n        /**\n         * `CfnPermissions.TableWithColumnsResourceProperty.CatalogId`\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tablewithcolumnsresource.html#cfn-lakeformation-permissions-tablewithcolumnsresource-catalogid\n         */\n        readonly catalogId?: string;\n        /**\n         * The list of column names for the table. At least one of `ColumnNames` or `ColumnWildcard` is required.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tablewithcolumnsresource.html#cfn-lakeformation-permissions-tablewithcolumnsresource-columnnames\n         */\n        readonly columnNames?: string[];\n        /**\n         * A wildcard specified by a `ColumnWildcard` object. At least one of `ColumnNames` or `ColumnWildcard` is required.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tablewithcolumnsresource.html#cfn-lakeformation-permissions-tablewithcolumnsresource-columnwildcard\n         */\n        readonly columnWildcard?: CfnPermissions.ColumnWildcardProperty | cdk.IResolvable;\n        /**\n         * The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tablewithcolumnsresource.html#cfn-lakeformation-permissions-tablewithcolumnsresource-databasename\n         */\n        readonly databaseName?: string;\n        /**\n         * The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lakeformation-permissions-tablewithcolumnsresource.html#cfn-lakeformation-permissions-tablewithcolumnsresource-name\n         */\n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TableWithColumnsResourceProperty`\n *\n * @param properties - the TypeScript properties of a `TableWithColumnsResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissions_TableWithColumnsResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('columnNames', cdk.listValidator(cdk.validateString))(properties.columnNames));\n    errors.collect(cdk.propertyValidator('columnWildcard', CfnPermissions_ColumnWildcardPropertyValidator)(properties.columnWildcard));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"TableWithColumnsResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.TableWithColumnsResource` resource\n *\n * @param properties - the TypeScript properties of a `TableWithColumnsResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Permissions.TableWithColumnsResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionsTableWithColumnsResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissions_TableWithColumnsResourcePropertyValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        ColumnNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.columnNames),\n        ColumnWildcard: cfnPermissionsColumnWildcardPropertyToCloudFormation(properties.columnWildcard),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionsTableWithColumnsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissions.TableWithColumnsResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissions.TableWithColumnsResourceProperty>();\n    ret.addPropertyResult('catalogId', 'CatalogId', properties.CatalogId != null ? cfn_parse.FromCloudFormation.getString(properties.CatalogId) : undefined);\n    ret.addPropertyResult('columnNames', 'ColumnNames', properties.ColumnNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ColumnNames) : undefined);\n    ret.addPropertyResult('columnWildcard', 'ColumnWildcard', properties.ColumnWildcard != null ? CfnPermissionsColumnWildcardPropertyFromCloudFormation(properties.ColumnWildcard) : undefined);\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * Properties for defining a `CfnResource`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html\n */\nexport interface CfnResourceProps {\n\n    /**\n     * The Amazon Resource Name (ARN) of the resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-resourcearn\n     */\n    readonly resourceArn: string;\n\n    /**\n     * Designates a trusted caller, an IAM principal, by registering this caller with the Data Catalog.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-useservicelinkedrole\n     */\n    readonly useServiceLinkedRole: boolean | cdk.IResolvable;\n\n    /**\n     * The IAM role that registered a resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-rolearn\n     */\n    readonly roleArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResourceProps`\n *\n * @param properties - the TypeScript properties of a `CfnResourceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourcePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.requiredValidator)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('useServiceLinkedRole', cdk.requiredValidator)(properties.useServiceLinkedRole));\n    errors.collect(cdk.propertyValidator('useServiceLinkedRole', cdk.validateBoolean)(properties.useServiceLinkedRole));\n    return errors.wrap('supplied properties not correct for \"CfnResourceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LakeFormation::Resource` resource\n *\n * @param properties - the TypeScript properties of a `CfnResourceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LakeFormation::Resource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourcePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourcePropsValidator(properties).assertSuccess();\n    return {\n        ResourceArn: cdk.stringToCloudFormation(properties.resourceArn),\n        UseServiceLinkedRole: cdk.booleanToCloudFormation(properties.useServiceLinkedRole),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourcePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceProps>();\n    ret.addPropertyResult('resourceArn', 'ResourceArn', cfn_parse.FromCloudFormation.getString(properties.ResourceArn));\n    ret.addPropertyResult('useServiceLinkedRole', 'UseServiceLinkedRole', cfn_parse.FromCloudFormation.getBoolean(properties.UseServiceLinkedRole));\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::LakeFormation::Resource`\n *\n * The `AWS::LakeFormation::Resource` represents the data (Amazon S3 buckets and folders) that is being registered with AWS Lake Formation . When a `Resource` type CloudFormation template is uploaded, an AWS Lake Formation [`RegisterResource`](https://docs.aws.amazon.com/lake-formation/latest/dg/aws-lake-formation-api-credential-vending.html#aws-lake-formation-api-credential-vending-RegisterResource) API call is made to register the resource. When a `Resource` type CloudFormation template is removed, the AWS Lake Formation [`DeregisterResource`](https://docs.aws.amazon.com/lake-formation/latest/dg/aws-lake-formation-api-credential-vending.html#aws-lake-formation-api-credential-vending-DeregisterResource) API is called.\n *\n * @cloudformationResource AWS::LakeFormation::Resource\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html\n */\nexport class CfnResource extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::LakeFormation::Resource\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResource {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResourcePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResource(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * The Amazon Resource Name (ARN) of the resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-resourcearn\n     */\n    public resourceArn: string;\n\n    /**\n     * Designates a trusted caller, an IAM principal, by registering this caller with the Data Catalog.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-useservicelinkedrole\n     */\n    public useServiceLinkedRole: boolean | cdk.IResolvable;\n\n    /**\n     * The IAM role that registered a resource.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html#cfn-lakeformation-resource-rolearn\n     */\n    public roleArn: string | undefined;\n\n    /**\n     * Create a new `AWS::LakeFormation::Resource`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnResourceProps) {\n        super(scope, id, { type: CfnResource.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'resourceArn', this);\n        cdk.requireProperty(props, 'useServiceLinkedRole', this);\n\n        this.resourceArn = props.resourceArn;\n        this.useServiceLinkedRole = props.useServiceLinkedRole;\n        this.roleArn = props.roleArn;\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResource.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            resourceArn: this.resourceArn,\n            useServiceLinkedRole: this.useServiceLinkedRole,\n            roleArn: this.roleArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResourcePropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
