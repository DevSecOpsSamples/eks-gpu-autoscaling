{
  "version": 3,
  "sources": ["source-action.ts"],
  "sourcesContent": ["import * as codepipeline from '../../../aws-codepipeline';\nimport * as targets from '../../../aws-events-targets';\nimport * as s3 from '../../../aws-s3';\nimport { Names, Token } from '../../../core';\nimport { Action } from '../action';\nimport { sourceArtifactBounds } from '../common';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * How should the S3 Action detect changes.\n * This is the type of the {@link S3SourceAction.trigger} property.\n */\nexport enum S3Trigger {\n  /**\n   * The Action will never detect changes -\n   * the Pipeline it's part of will only begin a run when explicitly started.\n   */\n  NONE = 'None',\n\n  /**\n   * CodePipeline will poll S3 to detect changes.\n   * This is the default method of detecting changes.\n   */\n  POLL = 'Poll',\n\n  /**\n   * CodePipeline will use CloudWatch Events to be notified of changes.\n   * Note that the Bucket that the Action uses needs to be part of a CloudTrail Trail\n   * for the events to be delivered.\n   */\n  EVENTS = 'Events',\n}\n\n/**\n * The CodePipeline variables emitted by the S3 source Action.\n */\nexport interface S3SourceVariables {\n  /** The identifier of the S3 version of the object that triggered the build. */\n  readonly versionId: string;\n\n  /** The e-tag of the S3 version of the object that triggered the build. */\n  readonly eTag: string;\n}\n\n/**\n * Construction properties of the {@link S3SourceAction S3 source Action}.\n */\nexport interface S3SourceActionProps extends codepipeline.CommonAwsActionProps {\n  /**\n   *\n   */\n  readonly output: codepipeline.Artifact;\n\n  /**\n   * The key within the S3 bucket that stores the source code.\n   *\n   * @example 'path/to/file.zip'\n   */\n  readonly bucketKey: string;\n\n  /**\n   * How should CodePipeline detect source changes for this Action.\n   * Note that if this is S3Trigger.EVENTS, you need to make sure to include the source Bucket in a CloudTrail Trail,\n   * as otherwise the CloudWatch Events will not be emitted.\n   *\n   * @default S3Trigger.POLL\n   * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/log-s3-data-events.html\n   */\n  readonly trigger?: S3Trigger;\n\n  /**\n   * The Amazon S3 bucket that stores the source code.\n   *\n   * If you import an encrypted bucket in your stack, please specify\n   * the encryption key at import time by using `Bucket.fromBucketAttributes()` method.\n   */\n  readonly bucket: s3.IBucket;\n}\n\n/**\n * Source that is provided by a specific Amazon S3 object.\n *\n * Will trigger the pipeline as soon as the S3 object changes, but only if there is\n * a CloudTrail Trail in the account that captures the S3 event.\n */\nexport class S3SourceAction extends Action {\n  private readonly props: S3SourceActionProps;\n\n  constructor(props: S3SourceActionProps) {\n    super({\n      ...props,\n      resource: props.bucket,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'S3',\n      artifactBounds: sourceArtifactBounds(),\n      outputs: [props.output],\n    });\n\n    if (props.bucketKey.length === 0) {\n      throw new Error('Property bucketKey cannot be an empty string');\n    }\n\n    this.props = props;\n  }\n\n  /** The variables emitted by this action. */\n  public get variables(): S3SourceVariables {\n    return {\n      versionId: this.variableExpression('VersionId'),\n      eTag: this.variableExpression('ETag'),\n    };\n  }\n\n  protected bound(_scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    if (this.props.trigger === S3Trigger.EVENTS) {\n      const id = this.generateEventId(stage);\n      this.props.bucket.onCloudTrailWriteObject(id, {\n        target: new targets.CodePipeline(stage.pipeline),\n        paths: [this.props.bucketKey],\n      });\n    }\n\n    // we need to read from the source bucket...\n    this.props.bucket.grantRead(options.role, this.props.bucketKey);\n\n    // ...and write to the Pipeline bucket\n    options.bucket.grantWrite(options.role);\n\n    return {\n      configuration: {\n        S3Bucket: this.props.bucket.bucketName,\n        S3ObjectKey: this.props.bucketKey,\n        PollForSourceChanges: this.props.trigger && this.props.trigger === S3Trigger.POLL,\n      },\n    };\n  }\n\n  private generateEventId(stage: codepipeline.IStage): string {\n    let ret: string;\n    const baseId = Names.nodeUniqueId(stage.pipeline.node) + 'SourceEventRule';\n\n    if (Token.isUnresolved(this.props.bucketKey)) {\n      // If bucketKey is a Token, don't include it in the ID.\n      // Instead, use numbers to differentiate if multiple actions observe the same bucket\n      let candidate = baseId;\n      let counter = 0;\n      while (this.props.bucket.node.tryFindChild(candidate) !== undefined) {\n        counter += 1;\n        candidate = baseId + counter;\n      }\n      ret = candidate;\n    } else {\n      // we can't use Tokens in construct IDs,\n      // however, if bucketKey is not a Token,\n      // we want it to differentiate between multiple actions\n      // observing the same Bucket with different keys\n      ret = baseId + this.props.bucketKey;\n      if (this.props.bucket.node.tryFindChild(ret)) {\n        // this means a duplicate path for the same bucket - error out\n        throw new Error(`S3 source action with path '${this.props.bucketKey}' is already present in the pipeline for this source bucket`);\n      }\n    }\n\n    return ret;\n  }\n}\n"],
  "mappings": "0OAAA,aAAA,QAAA,2BAAA,EACA,QAAA,QAAA,6BAAA,EAEA,OAAA,QAAA,eAAA,EACA,SAAA,QAAA,WAAA,EACA,SAAA,QAAA,WAAA,EAUA,GAAY,WAAZ,AAAA,UAAY,WAAS,CAKnB,WAAA,KAAA,OAMA,WAAA,KAAA,OAOA,WAAA,OAAA,QACF,GAnBY,UAAA,QAAA,WAAA,SAAA,UAAS,CAAA,EAAA,EAyErB,MAAa,sBAAuB,UAAA,MAAM,CAGxC,YAAY,MAA0B,CACpC,MAAM,IACD,MACH,SAAU,MAAM,OAChB,SAAU,aAAa,eAAe,OACtC,SAAU,KACV,eAAgB,SAAA,qBAAoB,EACpC,QAAS,CAAC,MAAM,MAAM,EACvB,EAED,2FAAI,MAAM,UAAU,SAAW,EAC7B,KAAM,IAAI,OAAM,8CAA8C,EAGhE,KAAK,MAAQ,SAIJ,YAAS,CAClB,MAAO,CACL,UAAW,KAAK,mBAAmB,WAAW,EAC9C,KAAM,KAAK,mBAAmB,MAAM,GAI9B,MAAM,OAAmB,MAA4B,QAAuC,CAEpG,sJAAI,KAAK,MAAM,UAAY,UAAU,OAAQ,CAC3C,KAAM,IAAK,KAAK,gBAAgB,KAAK,EACrC,KAAK,MAAM,OAAO,wBAAwB,GAAI,CAC5C,OAAQ,GAAI,SAAQ,aAAa,MAAM,QAAQ,EAC/C,MAAO,CAAC,KAAK,MAAM,SAAS,EAC7B,EAIH,YAAK,MAAM,OAAO,UAAU,QAAQ,KAAM,KAAK,MAAM,SAAS,EAG9D,QAAQ,OAAO,WAAW,QAAQ,IAAI,EAE/B,CACL,cAAe,CACb,SAAU,KAAK,MAAM,OAAO,WAC5B,YAAa,KAAK,MAAM,UACxB,qBAAsB,KAAK,MAAM,SAAW,KAAK,MAAM,UAAY,UAAU,OAK3E,gBAAgB,MAA0B,CAChD,GAAI,KACJ,KAAM,QAAS,OAAA,MAAM,aAAa,MAAM,SAAS,IAAI,EAAI,kBAEzD,GAAI,OAAA,MAAM,aAAa,KAAK,MAAM,SAAS,EAAG,CAG5C,GAAI,WAAY,OACZ,QAAU,EACd,KAAO,KAAK,MAAM,OAAO,KAAK,aAAa,SAAS,IAAM,QACxD,SAAW,EACX,UAAY,OAAS,QAEvB,IAAM,kBAMN,IAAM,OAAS,KAAK,MAAM,UACtB,KAAK,MAAM,OAAO,KAAK,aAAa,GAAG,EAEzC,KAAM,IAAI,OAAM,+BAA+B,KAAK,MAAM,sEAAsE,EAIpI,MAAO,MA/EX,QAAA,eAAA",
  "names": []
}
