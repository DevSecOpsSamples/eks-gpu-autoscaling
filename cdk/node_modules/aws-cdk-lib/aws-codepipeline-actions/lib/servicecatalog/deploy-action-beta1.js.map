{
  "version": 3,
  "sources": ["deploy-action-beta1.ts"],
  "sourcesContent": ["import * as codepipeline from '../../../aws-codepipeline';\nimport * as iam from '../../../aws-iam';\nimport { Action } from '../action';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Construction properties of the {@link ServiceCatalogDeployActionBeta1 ServiceCatalog deploy CodePipeline Action}.\n */\nexport interface ServiceCatalogDeployActionBeta1Props extends codepipeline.CommonAwsActionProps {\n  /**\n   * The path to the cloudformation artifact.\n   */\n  readonly templatePath: codepipeline.ArtifactPath;\n\n  /**\n   * The name of the version of the Service Catalog product to be deployed.\n   */\n  readonly productVersionName: string;\n\n  /**\n   * The optional description of this version of the Service Catalog product.\n   * @default ''\n   */\n  readonly productVersionDescription?: string;\n\n  /**\n   * The identifier of the product in the Service Catalog. This product must already exist.\n   */\n  readonly productId: string;\n}\n\n/**\n * CodePipeline action to connect to an existing ServiceCatalog product.\n *\n * **Note**: this class is still experimental, and may have breaking changes in the future!\n */\nexport class ServiceCatalogDeployActionBeta1 extends Action {\n  private readonly templatePath: string;\n  private readonly productVersionName: string;\n  private readonly productVersionDescription?: string;\n  private readonly productId: string;\n  private readonly productType: string;\n\n  constructor(props: ServiceCatalogDeployActionBeta1Props) {\n    super({\n      ...props,\n      provider: 'ServiceCatalog',\n      category: codepipeline.ActionCategory.DEPLOY,\n      artifactBounds: {\n        minInputs: 1,\n        maxInputs: 1,\n        minOutputs: 0,\n        maxOutputs: 0,\n      },\n      inputs: [props.templatePath.artifact],\n    });\n    this.templatePath = props.templatePath.fileName;\n    this.productVersionName = props.productVersionName;\n    this.productVersionDescription = props.productVersionDescription;\n    this.productId = props.productId;\n    this.productType = 'CLOUD_FORMATION_TEMPLATE';\n  }\n\n  protected bound(_scope: Construct, _stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n\n    options.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AWSServiceCatalogAdminFullAccess'));\n\n    // Attempt at least privilege; using this alone fails with \"invalid template\".\n    // Should construct ARN: 'arn:aws:catalog:<region>:<accountID>:product/' + this.scProductId\n    // options.role.addToPolicy(new PolicyStatement({\n    //   resources: ['*'],\n    //   actions: ['servicecatalog:UpdateProduct', 'servicecatalog:ListProvisioningArtifacts', 'servicecatalog:CreateProvisioningArtifact'],\n    // }));\n\n    // the Action's Role needs to read from the Bucket to get artifacts\n    options.bucket.grantRead(options.role);\n\n    return {\n      configuration: {\n        TemplateFilePath: this.templatePath,\n        ProductVersionName: this.productVersionName,\n        ProductVersionDescription: this.productVersionDescription,\n        ProductType: this.productType,\n        ProductId: this.productId,\n      },\n    };\n  }\n}\n"],
  "mappings": "yOAAA,aAAA,QAAA,2BAAA,EACA,IAAA,QAAA,kBAAA,EACA,SAAA,QAAA,WAAA,EAqCA,MAAa,uCAAwC,UAAA,MAAM,CAOzD,YAAY,MAA2C,CACrD,MAAM,IACD,MACH,SAAU,iBACV,SAAU,aAAa,eAAe,OACtC,eAAgB,CACd,UAAW,EACX,UAAW,EACX,WAAY,EACZ,WAAY,GAEd,OAAQ,CAAC,MAAM,aAAa,QAAQ,EACrC,2GACD,KAAK,aAAe,MAAM,aAAa,SACvC,KAAK,mBAAqB,MAAM,mBAChC,KAAK,0BAA4B,MAAM,0BACvC,KAAK,UAAY,MAAM,UACvB,KAAK,YAAc,2BAGX,MAAM,OAAmB,OAA6B,QAAuC,4JAGrG,QAAQ,KAAK,iBAAiB,IAAI,cAAc,yBAAyB,kCAAkC,CAAC,EAU5G,QAAQ,OAAO,UAAU,QAAQ,IAAI,EAE9B,CACL,cAAe,CACb,iBAAkB,KAAK,aACvB,mBAAoB,KAAK,mBACzB,0BAA2B,KAAK,0BAChC,YAAa,KAAK,YAClB,UAAW,KAAK,aAhDxB,QAAA,gCAAA",
  "names": []
}
