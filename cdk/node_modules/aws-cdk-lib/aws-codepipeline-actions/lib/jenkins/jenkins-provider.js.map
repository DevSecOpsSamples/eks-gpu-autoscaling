{
  "version": 3,
  "sources": ["jenkins-provider.ts"],
  "sourcesContent": ["import * as codepipeline from '../../../aws-codepipeline';\nimport { Construct, IConstruct } from 'constructs';\n\n/**\n * A Jenkins provider.\n *\n * If you want to create a new Jenkins provider managed alongside your CDK code,\n * instantiate the {@link JenkinsProvider} class directly.\n *\n * If you want to reference an already registered provider,\n * use the {@link JenkinsProvider#fromJenkinsProviderAttributes} method.\n */\nexport interface IJenkinsProvider extends IConstruct {\n  readonly providerName: string;\n  readonly serverUrl: string;\n  readonly version: string;\n\n  /**\n   * Registers a Jenkins Provider for the build category.\n   * This method will be automatically called when creating\n   * a {@link JenkinsAction},\n   * so you should never need to call it explicitly.\n   *\n   * @internal\n   */\n  _registerBuildProvider(): void;\n\n  /**\n   * Registers a Jenkins Provider for the test category.\n   * This method will be automatically called when creating\n   * a {@link JenkinsTestAction},\n   * so you should never need to call it explicitly.\n   *\n   * @internal\n   */\n  _registerTestProvider(): void;\n}\n\n/**\n * Properties for importing an existing Jenkins provider.\n */\nexport interface JenkinsProviderAttributes {\n  /**\n   * The name of the Jenkins provider that you set in the AWS CodePipeline plugin configuration of your Jenkins project.\n   *\n   * @example 'MyJenkinsProvider'\n   */\n  readonly providerName: string;\n\n  /**\n   * The base URL of your Jenkins server.\n   *\n   * @example 'http://myjenkins.com:8080'\n   */\n  readonly serverUrl: string;\n\n  /**\n   * The version of your provider.\n   *\n   * @default '1'\n   */\n  readonly version?: string;\n}\n\nexport interface JenkinsProviderProps {\n  /**\n   * The name of the Jenkins provider that you set in the AWS CodePipeline plugin configuration of your Jenkins project.\n   *\n   * @example 'MyJenkinsProvider'\n   */\n  readonly providerName: string;\n\n  /**\n   * The base URL of your Jenkins server.\n   *\n   * @example 'http://myjenkins.com:8080'\n   */\n  readonly serverUrl: string;\n\n  /**\n   * The version of your provider.\n   *\n   * @default '1'\n   */\n  readonly version?: string;\n\n  /**\n   * Whether to immediately register a Jenkins Provider for the build category.\n   * The Provider will always be registered if you create a {@link JenkinsAction}.\n   *\n   * @default false\n   */\n  readonly forBuild?: boolean;\n\n  /**\n   * Whether to immediately register a Jenkins Provider for the test category.\n   * The Provider will always be registered if you create a {@link JenkinsTestAction}.\n   *\n   * @default false\n   */\n  readonly forTest?: boolean;\n}\n\nexport abstract class BaseJenkinsProvider extends Construct implements IJenkinsProvider {\n  public abstract readonly providerName: string;\n  public abstract readonly serverUrl: string;\n  public readonly version: string;\n\n  protected constructor(scope: Construct, id: string, version?: string) {\n    super(scope, id);\n\n    this.version = version || '1';\n  }\n\n  /**\n   * @internal\n   */\n  public abstract _registerBuildProvider(): void;\n\n  /**\n   * @internal\n   */\n  public abstract _registerTestProvider(): void;\n}\n\n/**\n * A class representing Jenkins providers.\n *\n * @see #import\n */\nexport class JenkinsProvider extends BaseJenkinsProvider {\n  /**\n   * Import a Jenkins provider registered either outside the CDK,\n   * or in a different CDK Stack.\n   *\n   * @param scope the parent Construct for the new provider\n   * @param id the identifier of the new provider Construct\n   * @param attrs the properties used to identify the existing provider\n   * @returns a new Construct representing a reference to an existing Jenkins provider\n   */\n  public static fromJenkinsProviderAttributes(scope: Construct, id: string, attrs: JenkinsProviderAttributes): IJenkinsProvider {\n    return new ImportedJenkinsProvider(scope, id, attrs);\n  }\n\n  public readonly providerName: string;\n  public readonly serverUrl: string;\n  private buildIncluded = false;\n  private testIncluded = false;\n\n  constructor(scope: Construct, id: string, props: JenkinsProviderProps) {\n    super(scope, id, props.version);\n\n    this.providerName = props.providerName;\n    this.serverUrl = props.serverUrl;\n\n    if (props.forBuild === true) {\n      this._registerBuildProvider();\n    }\n    if (props.forTest === true) {\n      this._registerTestProvider();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public _registerBuildProvider(): void {\n    if (this.buildIncluded) {\n      return;\n    }\n    this.buildIncluded = true;\n    this.registerJenkinsCustomAction('JenkinsBuildProviderResource', codepipeline.ActionCategory.BUILD);\n  }\n\n  /**\n   * @internal\n   */\n  public _registerTestProvider(): void {\n    if (this.testIncluded) {\n      return;\n    }\n    this.testIncluded = true;\n    this.registerJenkinsCustomAction('JenkinsTestProviderResource', codepipeline.ActionCategory.TEST);\n  }\n\n  private registerJenkinsCustomAction(id: string, category: codepipeline.ActionCategory) {\n    new codepipeline.CustomActionRegistration(this, id, {\n      category,\n      artifactBounds: jenkinsArtifactsBounds,\n      provider: this.providerName,\n      version: this.version,\n      entityUrl: appendToUrl(this.serverUrl, 'job/{Config:ProjectName}'),\n      executionUrl: appendToUrl(this.serverUrl, 'job/{Config:ProjectName}/{ExternalExecutionId}'),\n      actionProperties: [\n        {\n          name: 'ProjectName',\n          required: true,\n          key: true,\n          queryable: true,\n        },\n      ],\n    });\n  }\n}\n\nclass ImportedJenkinsProvider extends BaseJenkinsProvider {\n  public readonly providerName: string;\n  public readonly serverUrl: string;\n\n  constructor(scope: Construct, id: string, props: JenkinsProviderAttributes) {\n    super(scope, id, props.version);\n\n    this.providerName = props.providerName;\n    this.serverUrl = props.serverUrl;\n  }\n\n  public _registerBuildProvider(): void {\n    // do nothing\n  }\n\n  public _registerTestProvider(): void {\n    // do nothing\n  }\n}\n\nfunction appendToUrl(baseUrl: string, path: string): string {\n  return baseUrl.endsWith('/') ? baseUrl + path : `${baseUrl}/${path}`;\n}\n\nexport const jenkinsArtifactsBounds: codepipeline.ActionArtifactBounds = {\n  minInputs: 0,\n  maxInputs: 5,\n  minOutputs: 0,\n  maxOutputs: 5,\n};\n"],
  "mappings": "uRAAA,aAAA,QAAA,2BAAA,EACA,aAAA,QAAA,YAAA,EAsGA,MAAsB,2BAA4B,cAAA,SAAS,CAKzD,YAAsB,MAAkB,GAAY,QAAgB,CAClE,MAAM,MAAO,EAAE,EAEf,KAAK,QAAU,SAAW,KAR9B,QAAA,oBAAA,oJA2BA,MAAa,uBAAwB,oBAAmB,CAmBtD,YAAY,MAAkB,GAAY,MAA2B,CACnE,MAAM,MAAO,GAAI,MAAM,OAAO,EAJxB,KAAA,cAAgB,GAChB,KAAA,aAAe,4FAKrB,KAAK,aAAe,MAAM,aAC1B,KAAK,UAAY,MAAM,UAEnB,MAAM,WAAa,IACrB,KAAK,uBAAsB,EAEzB,MAAM,UAAY,IACpB,KAAK,sBAAqB,QAnBhB,+BAA8B,MAAkB,GAAY,MAAgC,sGACjG,GAAI,yBAAwB,MAAO,GAAI,KAAK,EAyB9C,wBAAsB,CAC3B,AAAI,KAAK,eAGT,MAAK,cAAgB,GACrB,KAAK,4BAA4B,+BAAgC,aAAa,eAAe,KAAK,GAM7F,uBAAqB,CAC1B,AAAI,KAAK,cAGT,MAAK,aAAe,GACpB,KAAK,4BAA4B,8BAA+B,aAAa,eAAe,IAAI,GAG1F,4BAA4B,GAAY,SAAqC,CACnF,GAAI,cAAa,yBAAyB,KAAM,GAAI,CAClD,SACA,eAAgB,QAAA,uBAChB,SAAU,KAAK,aACf,QAAS,KAAK,QACd,UAAW,YAAY,KAAK,UAAW,0BAA0B,EACjE,aAAc,YAAY,KAAK,UAAW,gDAAgD,EAC1F,iBAAkB,CAChB,CACE,KAAM,cACN,SAAU,GACV,IAAK,GACL,UAAW,KAGhB,GAvEL,QAAA,gBAAA,wIA2EA,MAAM,+BAAgC,oBAAmB,CAIvD,YAAY,MAAkB,GAAY,MAAgC,CACxE,MAAM,MAAO,GAAI,MAAM,OAAO,EAE9B,KAAK,aAAe,MAAM,aAC1B,KAAK,UAAY,MAAM,UAGlB,wBAAsB,EAItB,uBAAqB,GAK9B,qBAAqB,QAAiB,KAAY,CAChD,MAAO,SAAQ,SAAS,GAAG,EAAI,QAAU,KAAO,GAAG,WAAW,MAChE,CAEa,QAAA,uBAA4D,CACvE,UAAW,EACX,UAAW,EACX,WAAY,EACZ,WAAY",
  "names": []
}
