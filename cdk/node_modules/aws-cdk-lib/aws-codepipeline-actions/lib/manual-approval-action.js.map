{
  "version": 3,
  "sources": ["manual-approval-action.ts"],
  "sourcesContent": ["import * as codepipeline from '../../aws-codepipeline';\nimport * as iam from '../../aws-iam';\nimport * as sns from '../../aws-sns';\nimport * as subs from '../../aws-sns-subscriptions';\nimport { Construct } from 'constructs';\nimport { Action } from './action';\n\n/**\n * Construction properties of the {@link ManualApprovalAction}.\n */\nexport interface ManualApprovalActionProps extends codepipeline.CommonAwsActionProps {\n  /**\n   * Optional SNS topic to send notifications to when an approval is pending.\n   */\n  readonly notificationTopic?: sns.ITopic;\n\n  /**\n   * A list of email addresses to subscribe to notifications when this Action is pending approval.\n   * If this has been provided, but not `notificationTopic`,\n   * a new Topic will be created.\n   */\n  readonly notifyEmails?: string[];\n\n  /**\n   * Any additional information that you want to include in the notification email message.\n   */\n  readonly additionalInformation?: string;\n\n  /**\n   * URL you want to provide to the reviewer as part of the approval request.\n   *\n   * @default - the approval request will not have an external link\n   */\n  readonly externalEntityLink?: string;\n}\n\n/**\n * Manual approval action.\n */\nexport class ManualApprovalAction extends Action {\n  /**\n   * The SNS Topic passed when constructing the Action.\n   * If no Topic was passed, but `notifyEmails` were provided,\n   * a new Topic will be created.\n   */\n  private _notificationTopic?: sns.ITopic;\n  private readonly props: ManualApprovalActionProps;\n  private stage?: codepipeline.IStage;\n\n  constructor(props: ManualApprovalActionProps) {\n    super({\n      ...props,\n      category: codepipeline.ActionCategory.APPROVAL,\n      provider: 'Manual',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 0, maxOutputs: 0 },\n    });\n\n    this.props = props;\n  }\n\n  public get notificationTopic(): sns.ITopic | undefined {\n    return this._notificationTopic;\n  }\n\n  /**\n   * grant the provided principal the permissions to approve or reject this manual approval action\n   *\n   * For more info see:\n   * https://docs.aws.amazon.com/codepipeline/latest/userguide/approvals-iam-permissions.html\n   *\n   * @param grantable the grantable to attach the permissions to\n   */\n  public grantManualApproval(grantable: iam.IGrantable): void {\n    if (!this.stage) {\n      throw new Error('Cannot grant permissions before binding action to a stage');\n    }\n    grantable.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n      actions: ['codepipeline:ListPipelines'],\n      resources: ['*'],\n    }));\n    grantable.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n      actions: ['codepipeline:GetPipeline', 'codepipeline:GetPipelineState', 'codepipeline:GetPipelineExecution'],\n      resources: [this.stage.pipeline.pipelineArn],\n    }));\n    grantable.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n      actions: ['codepipeline:PutApprovalResult'],\n      resources: [`${this.stage.pipeline.pipelineArn}/${this.stage.stageName}/${this.props.actionName}`],\n    }));\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions): codepipeline.ActionConfig {\n    if (this.props.notificationTopic) {\n      this._notificationTopic = this.props.notificationTopic;\n    } else if ((this.props.notifyEmails || []).length > 0) {\n      this._notificationTopic = new sns.Topic(scope, 'TopicResource');\n    }\n\n    if (this._notificationTopic) {\n      this._notificationTopic.grantPublish(options.role);\n      for (const notifyEmail of this.props.notifyEmails || []) {\n        this._notificationTopic.addSubscription(new subs.EmailSubscription(notifyEmail));\n      }\n    }\n\n    this.stage = stage;\n\n    return {\n      configuration: undefinedIfAllValuesAreEmpty({\n        NotificationArn: this._notificationTopic?.topicArn,\n        CustomData: this.props.additionalInformation,\n        ExternalEntityLink: this.props.externalEntityLink,\n      }),\n    };\n  }\n\n}\n\nfunction undefinedIfAllValuesAreEmpty(object: object): object | undefined {\n  return Object.values(object).some(v => v !== undefined) ? object : undefined;\n}\n"],
  "mappings": "2NAAA,aAAA,QAAA,wBAAA,EACA,IAAA,QAAA,eAAA,EACA,IAAA,QAAA,eAAA,EACA,KAAA,QAAA,6BAAA,EAEA,SAAA,QAAA,UAAA,EAkCA,MAAa,4BAA6B,UAAA,MAAM,CAU9C,YAAY,MAAgC,CAC1C,MAAM,IACD,MACH,SAAU,aAAa,eAAe,SACtC,SAAU,SACV,eAAgB,CAAE,UAAW,EAAG,UAAW,EAAG,WAAY,EAAG,WAAY,CAAC,EAC3E,gGAED,KAAK,MAAQ,SAGJ,oBAAiB,CAC1B,MAAO,MAAK,mBAWP,oBAAoB,UAAyB,CAClD,qEAAI,CAAC,KAAK,MACR,KAAM,IAAI,OAAM,2DAA2D,EAE7E,UAAU,eAAe,qBAAqB,GAAI,KAAI,gBAAgB,CACpE,QAAS,CAAC,4BAA4B,EACtC,UAAW,CAAC,GAAG,EAChB,CAAC,EACF,UAAU,eAAe,qBAAqB,GAAI,KAAI,gBAAgB,CACpE,QAAS,CAAC,2BAA4B,gCAAiC,mCAAmC,EAC1G,UAAW,CAAC,KAAK,MAAM,SAAS,WAAW,EAC5C,CAAC,EACF,UAAU,eAAe,qBAAqB,GAAI,KAAI,gBAAgB,CACpE,QAAS,CAAC,gCAAgC,EAC1C,UAAW,CAAC,GAAG,KAAK,MAAM,SAAS,eAAe,KAAK,MAAM,aAAa,KAAK,MAAM,YAAY,EAClG,CAAC,EAGM,MAAM,MAAkB,MAA4B,QAAuC,QAOnG,sJANA,AAAI,KAAK,MAAM,kBACb,KAAK,mBAAqB,KAAK,MAAM,kBAC3B,MAAK,MAAM,cAAgB,CAAA,GAAI,OAAS,GAClD,MAAK,mBAAqB,GAAI,KAAI,MAAM,MAAO,eAAe,GAG5D,KAAK,mBAAoB,CAC3B,KAAK,mBAAmB,aAAa,QAAQ,IAAI,EACjD,SAAW,eAAe,MAAK,MAAM,cAAgB,CAAA,EACnD,KAAK,mBAAmB,gBAAgB,GAAI,MAAK,kBAAkB,WAAW,CAAC,EAInF,YAAK,MAAQ,MAEN,CACL,cAAe,6BAA6B,CAC1C,gBAAe,IAAE,KAAK,sBAAkB,MAAA,KAAA,OAAA,OAAA,GAAE,SAC1C,WAAY,KAAK,MAAM,sBACvB,mBAAoB,KAAK,MAAM,mBAChC,IAxEP,QAAA,qBAAA,uJA8EA,sCAAsC,OAAc,CAClD,MAAO,QAAO,OAAO,MAAM,EAAE,KAAK,GAAK,IAAM,MAAS,EAAI,OAAS,MACrE",
  "names": []
}
