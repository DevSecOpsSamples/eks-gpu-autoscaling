{
  "version": 3,
  "sources": ["build-action.ts"],
  "sourcesContent": ["import * as codebuild from '../../../aws-codebuild';\nimport * as codepipeline from '../../../aws-codepipeline';\nimport * as iam from '../../../aws-iam';\nimport * as cdk from '../../../core';\nimport { CodeStarConnectionsSourceAction } from '..';\nimport { Construct } from 'constructs';\nimport { Action } from '../action';\nimport { CodeCommitSourceAction } from '../codecommit/source-action';\n\n/**\n * The type of the CodeBuild action that determines its CodePipeline Category -\n * Build, or Test.\n * The default is Build.\n */\nexport enum CodeBuildActionType {\n  /**\n   * The action will have the Build Category.\n   * This is the default.\n   */\n  BUILD,\n\n  /**\n   * The action will have the Test Category.\n   */\n  TEST\n}\n\n/**\n * Construction properties of the {@link CodeBuildAction CodeBuild build CodePipeline action}.\n */\nexport interface CodeBuildActionProps extends codepipeline.CommonAwsActionProps {\n  /**\n   * The source to use as input for this action.\n   */\n  readonly input: codepipeline.Artifact;\n\n  /**\n   * The list of additional input Artifacts for this action.\n   *\n   * The directories the additional inputs will be available at are available\n   * during the project's build in the CODEBUILD_SRC_DIR_<artifact-name> environment variables.\n   * The project's build always starts in the directory with the primary input artifact checked out,\n   * the one pointed to by the {@link input} property.\n   * For more information,\n   * see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-multi-in-out.html .\n   */\n  readonly extraInputs?: codepipeline.Artifact[];\n\n  /**\n   * The list of output Artifacts for this action.\n   * **Note**: if you specify more than one output Artifact here,\n   * you cannot use the primary 'artifacts' section of the buildspec;\n   * you have to use the 'secondary-artifacts' section instead.\n   * See https://docs.aws.amazon.com/codebuild/latest/userguide/sample-multi-in-out.html\n   * for details.\n   *\n   * @default the action will not have any outputs\n   */\n  readonly outputs?: codepipeline.Artifact[];\n\n  /**\n   * The action's Project.\n   */\n  readonly project: codebuild.IProject;\n\n  /**\n   * The type of the action that determines its CodePipeline Category -\n   * Build, or Test.\n   *\n   * @default CodeBuildActionType.BUILD\n   */\n  readonly type?: CodeBuildActionType;\n\n  /**\n   * The environment variables to pass to the CodeBuild project when this action executes.\n   * If a variable with the same name was set both on the project level, and here,\n   * this value will take precedence.\n   *\n   * @default - No additional environment variables are specified.\n   */\n  readonly environmentVariables?: { [name: string]: codebuild.BuildEnvironmentVariable };\n\n  /**\n   * Whether to check for the presence of any secrets in the environment variables of the default type, BuildEnvironmentVariableType.PLAINTEXT.\n   * Since using a secret for the value of that kind of variable would result in it being displayed in plain text in the AWS Console,\n   * the construct will throw an exception if it detects a secret was passed there.\n   * Pass this property as false if you want to skip this validation,\n   * and keep using a secret in a plain text environment variable.\n   *\n   * @default true\n   */\n  readonly checkSecretsInPlainTextEnvVariables?: boolean;\n\n  /**\n   * Trigger a batch build.\n   *\n   * Enabling this will enable batch builds on the CodeBuild project.\n   *\n   * @default false\n   */\n  readonly executeBatchBuild?: boolean;\n\n  /**\n   * Combine the build artifacts for a batch builds.\n   *\n   * Enabling this will combine the build artifacts into the same location for batch builds.\n   * If `executeBatchBuild` is not set to `true`, this property is ignored.\n   *\n   * @default false\n   */\n  readonly combineBatchBuildArtifacts?: boolean;\n}\n\n/**\n * CodePipeline build action that uses AWS CodeBuild.\n */\nexport class CodeBuildAction extends Action {\n  private readonly props: CodeBuildActionProps;\n\n  constructor(props: CodeBuildActionProps) {\n    super({\n      ...props,\n      category: props.type === CodeBuildActionType.TEST\n        ? codepipeline.ActionCategory.TEST\n        : codepipeline.ActionCategory.BUILD,\n      provider: 'CodeBuild',\n      artifactBounds: { minInputs: 1, maxInputs: 5, minOutputs: 0, maxOutputs: 5 },\n      inputs: [props.input, ...props.extraInputs || []],\n      resource: props.project,\n    });\n\n    this.props = props;\n  }\n\n  /**\n   * Reference a CodePipeline variable defined by the CodeBuild project this action points to.\n   * Variables in CodeBuild actions are defined using the 'exported-variables' subsection of the 'env'\n   * section of the buildspec.\n   *\n   * @param variableName the name of the variable to reference.\n   *   A variable by this name must be present in the 'exported-variables' section of the buildspec\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html#build-spec-ref-syntax\n   */\n  public variable(variableName: string): string {\n    return this.variableExpression(variableName);\n  }\n\n  protected bound(scope: Construct, _stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    // check for a cross-account action if there are any outputs\n    if ((this.actionProperties.outputs || []).length > 0) {\n      const pipelineStack = cdk.Stack.of(scope);\n      const projectStack = cdk.Stack.of(this.props.project);\n      if (pipelineStack.account !== projectStack.account) {\n        throw new Error('A cross-account CodeBuild action cannot have outputs. ' +\n          'This is a known CodeBuild limitation. ' +\n          'See https://github.com/aws/aws-cdk/issues/4169 for details');\n      }\n    }\n\n    // grant the Pipeline role the required permissions to this Project\n    options.role.addToPolicy(new iam.PolicyStatement({\n      resources: [this.props.project.projectArn],\n      actions: [\n        `codebuild:${this.props.executeBatchBuild ? 'BatchGetBuildBatches' : 'BatchGetBuilds'}`,\n        `codebuild:${this.props.executeBatchBuild ? 'StartBuildBatch' : 'StartBuild'}`,\n        `codebuild:${this.props.executeBatchBuild ? 'StopBuildBatch' : 'StopBuild'}`,\n      ],\n    }));\n\n    // allow the Project access to the Pipeline's artifact Bucket\n    // but only if the project is not imported\n    // (ie., has a role) - otherwise, the IAM library throws an error\n    if (this.props.project.role) {\n      if ((this.actionProperties.outputs || []).length > 0) {\n        options.bucket.grantReadWrite(this.props.project);\n      } else {\n        options.bucket.grantRead(this.props.project);\n      }\n    }\n\n    if (this.props.project instanceof codebuild.Project) {\n      this.props.project.bindToCodePipeline(scope, {\n        artifactBucket: options.bucket,\n      });\n    }\n\n    for (const inputArtifact of this.actionProperties.inputs || []) {\n      // if any of the inputs come from the CodeStarConnectionsSourceAction\n      // with codeBuildCloneOutput=true,\n      // grant the Project's Role to use the connection\n      const connectionArn = inputArtifact.getMetadata(CodeStarConnectionsSourceAction._CONNECTION_ARN_PROPERTY);\n      if (connectionArn) {\n        this.props.project.addToRolePolicy(new iam.PolicyStatement({\n          actions: ['codestar-connections:UseConnection'],\n          resources: [connectionArn],\n        }));\n      }\n\n      // if any of the inputs come from the CodeCommitSourceAction\n      // with codeBuildCloneOutput=true,\n      // grant the Project's Role git pull access to the repository\n      const codecommitRepositoryArn = inputArtifact.getMetadata(CodeCommitSourceAction._FULL_CLONE_ARN_PROPERTY);\n      if (codecommitRepositoryArn) {\n        this.props.project.addToRolePolicy(new iam.PolicyStatement({\n          actions: ['codecommit:GitPull'],\n          resources: [codecommitRepositoryArn],\n        }));\n      }\n    }\n\n    const configuration: any = {\n      ProjectName: this.props.project.projectName,\n      EnvironmentVariables: this.props.environmentVariables &&\n        cdk.Stack.of(scope).toJsonString(codebuild.Project.serializeEnvVariables(this.props.environmentVariables,\n          this.props.checkSecretsInPlainTextEnvVariables ?? true, this.props.project)),\n    };\n    if ((this.actionProperties.inputs || []).length > 1) {\n      // lazy, because the Artifact name might be generated lazily\n      configuration.PrimarySource = cdk.Lazy.string({ produce: () => this.props.input.artifactName });\n    }\n    if (this.props.executeBatchBuild) {\n      configuration.BatchEnabled = 'true';\n      this.props.project.enableBatchBuilds();\n\n      if (this.props.combineBatchBuildArtifacts) {\n        configuration.CombineArtifacts = 'true';\n      }\n    }\n    return {\n      configuration,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
