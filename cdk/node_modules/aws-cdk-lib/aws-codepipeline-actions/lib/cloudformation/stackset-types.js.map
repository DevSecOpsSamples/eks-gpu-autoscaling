{
  "version": 3,
  "sources": ["stackset-types.ts"],
  "sourcesContent": ["import * as codepipeline from '../../../aws-codepipeline';\nimport * as iam from '../../../aws-iam';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\n\n/**\n * Options in common between both StackSet actions\n */\nexport interface CommonCloudFormationStackSetOptions {\n\n  /**\n   * The percentage of accounts per Region for which this stack operation can fail before AWS CloudFormation stops the operation in that Region. If\n   * the operation is stopped in a Region, AWS CloudFormation doesn't attempt the operation in subsequent Regions. When calculating the number\n   * of accounts based on the specified percentage, AWS CloudFormation rounds down to the next whole number.\n   *\n   * @default 0%\n   */\n  readonly failureTolerancePercentage?: number;\n\n  /**\n   * The maximum percentage of accounts in which to perform this operation at one time. When calculating the number of accounts based on the specified\n   * percentage, AWS CloudFormation rounds down to the next whole number. If rounding down would result in zero, AWS CloudFormation sets the number as\n   * one instead. Although you use this setting to specify the maximum, for large deployments the actual number of accounts acted upon concurrently\n   * may be lower due to service throttling.\n   *\n   * @default 1%\n   */\n  readonly maxAccountConcurrencyPercentage?: number;\n\n  /**\n   * The AWS Region the StackSet is in.\n   *\n   * Note that a cross-region Pipeline requires replication buckets to function correctly.\n   * You can provide their names with the `PipelineProps.crossRegionReplicationBuckets` property.\n   * If you don't, the CodePipeline Construct will create new Stacks in your CDK app containing those buckets,\n   * that you will need to `cdk deploy` before deploying the main, Pipeline-containing Stack.\n   *\n   * @default - same region as the Pipeline\n   */\n  readonly stackSetRegion?: string;\n}\n\n/**\n * The source of a StackSet template\n */\nexport abstract class StackSetTemplate {\n  /**\n   * Use a file in an artifact as Stack Template.\n   */\n  public static fromArtifactPath(artifactPath: codepipeline.ArtifactPath): StackSetTemplate {\n    return new class extends StackSetTemplate {\n      public readonly _artifactsReferenced?: codepipeline.Artifact[] | undefined = [artifactPath.artifact];\n\n      public _render() {\n        return artifactPath.location;\n      }\n    }();\n  }\n\n  /**\n   * Which artifacts are referenced by this template\n   *\n   * Does not need to be called by app builders.\n   *\n   * @internal\n   */\n  public abstract readonly _artifactsReferenced?: codepipeline.Artifact[] | undefined;\n\n  /**\n   * Render the template to the pipeline\n   *\n   * Does not need to be called by app builders.\n   *\n   * @internal\n   */\n  public abstract _render(): any;\n}\n\n/**\n * Where Stack Instances will be created from the StackSet\n */\nexport abstract class StackInstances {\n  /**\n   * Create stack instances in a set of accounts and regions passed as literal lists\n   *\n   * Stack Instances will be created in every combination of region and account.\n   *\n   * > NOTE: `StackInstances.inAccounts()` and `StackInstances.inOrganizationalUnits()`\n   * > have exactly the same behavior, and you can use them interchangeably if you want.\n   * > The only difference between them is that your code clearly indicates what entity\n   * > it's working with.\n   */\n  public static inAccounts(accounts: string[], regions: string[]): StackInstances {\n    return StackInstances.fromList(accounts, regions);\n  }\n\n  /**\n   * Create stack instances in all accounts in a set of Organizational Units (OUs) and regions passed as literal lists\n   *\n   * If you want to deploy to Organization Units, you must choose have created the StackSet\n   * with `deploymentModel: DeploymentModel.organizations()`.\n   *\n   * Stack Instances will be created in every combination of region and account.\n   *\n   * > NOTE: `StackInstances.inAccounts()` and `StackInstances.inOrganizationalUnits()`\n   * > have exactly the same behavior, and you can use them interchangeably if you want.\n   * > The only difference between them is that your code clearly indicates what entity\n   * > it's working with.\n   */\n  public static inOrganizationalUnits(ous: string[], regions: string[]): StackInstances {\n    return StackInstances.fromList(ous, regions);\n  }\n\n  /**\n   * Create stack instances in a set of accounts or organizational units taken from the pipeline artifacts, and a set of regions\n   *\n   * The file must be a JSON file containing a list of strings. For example:\n   *\n   * ```json\n   * [\n   *   \"111111111111\",\n   *   \"222222222222\",\n   *   \"333333333333\"\n   * ]\n   * ```\n   *\n   * Stack Instances will be created in every combination of region and account, or region and\n   * Organizational Units (OUs).\n   *\n   * If this is set of Organizational Units, you must have selected `StackSetDeploymentModel.organizations()`\n   * as deployment model.\n   */\n  public static fromArtifactPath(artifactPath: codepipeline.ArtifactPath, regions: string[]): StackInstances {\n    if (regions.length === 0) {\n      throw new Error(\"'regions' may not be an empty list\");\n    }\n\n    return new class extends StackInstances {\n      public readonly _artifactsReferenced?: codepipeline.Artifact[] | undefined = [artifactPath.artifact];\n      public _bind(_scope: Construct): StackInstancesBindResult {\n        return {\n          stackSetConfiguration: {\n            DeploymentTargets: artifactPath.location,\n            Regions: regions.join(','),\n          },\n        };\n      }\n    }();\n  }\n\n  /**\n   * Create stack instances in a literal set of accounts or organizational units, and a set of regions\n   *\n   * Stack Instances will be created in every combination of region and account, or region and\n   * Organizational Units (OUs).\n   *\n   * If this is set of Organizational Units, you must have selected `StackSetDeploymentModel.organizations()`\n   * as deployment model.\n   */\n  private static fromList(targets: string[], regions: string[]): StackInstances {\n    if (targets.length === 0) {\n      throw new Error(\"'targets' may not be an empty list\");\n    }\n\n    if (regions.length === 0) {\n      throw new Error(\"'regions' may not be an empty list\");\n    }\n\n    return new class extends StackInstances {\n      public _bind(_scope: Construct): StackInstancesBindResult {\n        return {\n          stackSetConfiguration: {\n            DeploymentTargets: targets.join(','),\n            Regions: regions.join(','),\n          },\n        };\n      }\n    }();\n  }\n\n\n  /**\n   * The artifacts referenced by the properties of this deployment target\n   *\n   * Does not need to be called by app builders.\n   *\n   * @internal\n   */\n  readonly _artifactsReferenced?: codepipeline.Artifact[];\n\n  /**\n   * Called to attach the stack set instances to a stackset action\n   *\n   * Does not need to be called by app builders.\n   *\n   * @internal\n   */\n  public abstract _bind(scope: Construct): StackInstancesBindResult;\n}\n\n/**\n * Returned by the StackInstances.bind() function\n *\n * Does not need to be used by app builders.\n *\n * @internal\n */\nexport interface StackInstancesBindResult {\n  /**\n   * Properties to mix into the Action configuration\n   */\n  readonly stackSetConfiguration: any;\n}\n\n/**\n * Base parameters for the StackSet\n */\nexport abstract class StackSetParameters {\n  /**\n   * A list of template parameters for your stack set.\n   *\n   * You must specify all template parameters. Parameters you don't specify will revert\n   * to their `Default` values as specified in the template.\n   *\n   * Specify the names of parameters you want to retain their existing values,\n   * without specifying what those values are, in an array in the second\n   * argument to this function. Use of this feature is discouraged. CDK is for\n   * specifying desired-state infrastructure, and use of this feature makes the\n   * parameter values unmanaged.\n   *\n   * @example\n   *\n   * const parameters = codepipeline_actions.StackSetParameters.fromLiteral({\n   *  BucketName: 'my-bucket',\n   *  Asset1: 'true',\n   * });\n   */\n  public static fromLiteral(parameters: Record<string, string>, usePreviousValues?: string[]): StackSetParameters {\n    return new class extends StackSetParameters {\n      public readonly _artifactsReferenced: codepipeline.Artifact[] = [];\n\n      _render(): string {\n        return [\n          ...Object.entries(parameters).map(([key, value]) =>\n            `ParameterKey=${key},ParameterValue=${value}`),\n          ...(usePreviousValues ?? []).map((key) =>\n            `ParameterKey=${key},UsePreviousValue=true`),\n        ].join(' ');\n      }\n    }();\n  }\n\n  /**\n   * Read the parameters from a JSON file from one of the pipeline's artifacts\n   *\n   * The file needs to contain a list of `{ ParameterKey, ParameterValue, UsePreviousValue }` objects, like\n   * this:\n   *\n   * ```\n   * [\n   *     {\n   *         \"ParameterKey\": \"BucketName\",\n   *         \"ParameterValue\": \"my-bucket\"\n   *     },\n   *     {\n   *         \"ParameterKey\": \"Asset1\",\n   *         \"ParameterValue\": \"true\"\n   *     },\n   *     {\n   *         \"ParameterKey\": \"Asset2\",\n   *         \"UsePreviousValue\": true\n   *     }\n   * ]\n   * ```\n   *\n   * You must specify all template parameters. Parameters you don't specify will revert\n   * to their `Default` values as specified in the template.\n   *\n   * For of parameters you want to retain their existing values\n   * without specifying what those values are, set `UsePreviousValue: true`.\n   * Use of this feature is discouraged. CDK is for\n   * specifying desired-state infrastructure, and use of this feature makes the\n   * parameter values unmanaged.\n   */\n  public static fromArtifactPath(artifactPath: codepipeline.ArtifactPath): StackSetParameters {\n    return new class extends StackSetParameters {\n      public _artifactsReferenced: codepipeline.Artifact[] = [artifactPath.artifact];\n\n      public _render(): string {\n        return artifactPath.location;\n      }\n    }();\n  }\n\n  /**\n   * Artifacts referenced by this parameter set\n   *\n   * @internal\n   */\n  public abstract readonly _artifactsReferenced: codepipeline.Artifact[];\n\n  /**\n   * Converts Parameters to a string.\n   *\n   * @internal\n   */\n  public abstract _render(): string;\n}\n\n/**\n * Determines how IAM roles are created and managed.\n */\nexport abstract class StackSetDeploymentModel {\n  /**\n   * Deploy to AWS Organizations accounts.\n   *\n   * AWS CloudFormation StackSets automatically creates the IAM roles required\n   * to deploy to accounts managed by AWS Organizations. This requires an\n   * account to be a member of an Organization.\n   *\n   * Using this deployment model, you can specify either AWS Account Ids or\n   * Organization Unit Ids in the `stackInstances` parameter.\n   */\n  public static organizations(props: OrganizationsDeploymentProps = {}): StackSetDeploymentModel {\n    return new class extends StackSetDeploymentModel {\n      _bind() {\n        return {\n          stackSetConfiguration: {\n            PermissionModel: 'SERVICE_MANAGED',\n            OrganizationsAutoDeployment: props.autoDeployment,\n          },\n        };\n      }\n    }();\n  }\n\n  /**\n   * Deploy to AWS Accounts not managed by AWS Organizations\n   *\n   * You are responsible for creating Execution Roles in every account you will\n   * be deploying to in advance to create the actual stack instances. Unless you\n   * specify overrides, StackSets expects the execution roles you create to have\n   * the default name `AWSCloudFormationStackSetExecutionRole`. See the [Grant\n   * self-managed\n   * permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html)\n   * section of the CloudFormation documentation.\n   *\n   * The CDK will automatically create the central Administration Role in the\n   * Pipeline account which will be used to assume the Execution Role in each of\n   * the target accounts.\n   *\n   * If you wish to use a pre-created Administration Role, use `Role.fromRoleName()`\n   * or `Role.fromRoleArn()` to import it, and pass it to this function:\n   *\n   * ```ts\n   * const existingAdminRole = iam.Role.fromRoleName(this, 'AdminRole', 'AWSCloudFormationStackSetAdministrationRole');\n   *\n   * const deploymentModel = codepipeline_actions.StackSetDeploymentModel.selfManaged({\n   *   // Use an existing Role. Leave this out to create a new Role.\n   *   administrationRole: existingAdminRole,\n   * });\n   * ```\n   *\n   * Using this deployment model, you can only specify AWS Account Ids in the\n   * `stackInstances` parameter.\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\n   */\n  public static selfManaged(props: SelfManagedDeploymentProps = {}): StackSetDeploymentModel {\n    return new class extends StackSetDeploymentModel {\n      _bind(scope: Construct) {\n        let administrationRole = props.administrationRole;\n        if (!administrationRole) {\n          administrationRole = new iam.Role(scope, 'StackSetAdministrationRole', {\n            assumedBy: new iam.ServicePrincipal('cloudformation.amazonaws.com', {\n              conditions: {\n                // Confused deputy protection\n                StringLike: {\n                  'aws:SourceArn': `arn:${cdk.Aws.PARTITION}:cloudformation:*:${cdk.Aws.ACCOUNT_ID}:stackset/*`,\n                },\n              },\n            }),\n          });\n          administrationRole.addToPrincipalPolicy(new iam.PolicyStatement({\n            actions: ['sts:AssumeRole'],\n            resources: [`arn:${cdk.Aws.PARTITION}:iam::*:role/${props.executionRoleName ?? 'AWSCloudFormationStackSetExecutionRole'}`],\n          }));\n        }\n\n        return {\n          stackSetConfiguration: {\n            PermissionModel: 'SELF_MANAGED',\n            AdministrationRoleArn: administrationRole.roleArn,\n            ExecutionRoleName: props.executionRoleName,\n          },\n          passedRoles: [administrationRole],\n        } as StackSetDeploymentModelBindResult;\n      }\n    }();\n  }\n\n  /**\n   * Bind to the Stack Set action and return the Action configuration\n   *\n   * Does not need to be called by app builders.\n   *\n   * @internal\n   */\n  public abstract _bind(scope: Construct): StackSetDeploymentModelBindResult;\n}\n\n/**\n * Returned by the StackSetDeploymentModel.bind() function\n *\n * Does not need to be used by app builders.\n *\n * @internal\n */\nexport interface StackSetDeploymentModelBindResult {\n  /**\n   * Properties to mix into the Action configuration\n   */\n  readonly stackSetConfiguration: any;\n\n  /**\n   * Roles that need to be passed by the pipeline action\n   *\n   * @default - No roles\n   */\n  readonly passedRoles?: iam.IRole[];\n}\n\n/**\n * Properties for configuring service-managed (Organizations) permissions\n */\nexport interface OrganizationsDeploymentProps {\n  /**\n   * Automatically deploy to new accounts added to Organizational Units\n   *\n   * Whether AWS CloudFormation StackSets automatically deploys to AWS\n   * Organizations accounts that are added to a target organization or\n   * organizational unit (OU).\n   *\n   * @default Disabled\n   */\n  readonly autoDeployment?: StackSetOrganizationsAutoDeployment;\n}\n\n/**\n * Describes whether AWS CloudFormation StackSets automatically deploys to AWS Organizations accounts that are added to a target organization or\n * organizational unit (OU).\n */\nexport enum StackSetOrganizationsAutoDeployment {\n  /**\n   * StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or\n   * organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, AWS CloudFormation StackSets\n   * deletes stack instances from the account in the specified Regions.\n   */\n  ENABLED = 'Enabled',\n\n  /**\n   * StackSets does not automatically deploy additional stack instances to AWS Organizations accounts that are added to a target organization or\n   * organizational unit (OU) in the specified Regions.\n   */\n  DISABLED = 'Disabled',\n\n  /**\n   * Stack resources are retained when an account is removed from a target organization or OU.\n   */\n  ENABLED_WITH_STACK_RETENTION = 'EnabledWithStackRetention'\n}\n\n\n/**\n * Properties for configuring self-managed permissions\n */\nexport interface SelfManagedDeploymentProps {\n  /**\n   * The IAM role in the administrator account used to assume execution roles in the target accounts\n   *\n   * You must create this role before using the StackSet action.\n   *\n   * The role needs to be assumable by CloudFormation, and it needs to be able\n   * to `sts:AssumeRole` each of the execution roles (whose names are specified\n   * in the `executionRoleName` parameter) in each of the target accounts.\n   *\n   * If you do not specify the role, we assume you have created a role named\n   * `AWSCloudFormationStackSetAdministrationRole`.\n   *\n   * @default - Assume an existing role named `AWSCloudFormationStackSetAdministrationRole` in the same account as the pipeline.\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\n   */\n  readonly administrationRole?: iam.IRole;\n\n  /**\n   * The name of the IAM role in the target accounts used to perform stack set operations.\n   *\n   * You must create these roles in each of the target accounts before using the\n   * StackSet action.\n   *\n   * The roles need to be assumable by by the `administrationRole`, and need to\n   * have the permissions necessary to successfully create and modify the\n   * resources that the subsequent CloudFormation deployments need.\n   * Administrator permissions would be commonly granted to these, but if you can\n   * scope the permissions down frome there you would be safer.\n   *\n   * @default AWSCloudFormationStackSetExecutionRole\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\n   */\n  readonly executionRoleName?: string;\n}\n"],
  "mappings": "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",
  "names": []
}
