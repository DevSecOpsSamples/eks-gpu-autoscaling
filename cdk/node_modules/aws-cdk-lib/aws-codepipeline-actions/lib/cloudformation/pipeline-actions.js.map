{
  "version": 3,
  "sources": ["pipeline-actions.ts"],
  "sourcesContent": ["import * as cloudformation from '../../../aws-cloudformation';\nimport * as codepipeline from '../../../aws-codepipeline';\nimport * as iam from '../../../aws-iam';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { Action } from '../action';\nimport { parseCapabilities, SingletonPolicy } from './private/singleton-policy';\n\n/**\n * Properties common to all CloudFormation actions\n */\ninterface CloudFormationActionProps extends codepipeline.CommonAwsActionProps {\n  /**\n   * The name of the stack to apply this action to\n   */\n  readonly stackName: string;\n\n  /**\n   * A name for the filename in the output artifact to store the AWS CloudFormation call's result.\n   *\n   * The file will contain the result of the call to AWS CloudFormation (for example\n   * the call to UpdateStack or CreateChangeSet).\n   *\n   * AWS CodePipeline adds the file to the output artifact after performing\n   * the specified action.\n   *\n   * @default No output artifact generated\n   */\n  readonly outputFileName?: string;\n\n  /**\n   * The name of the output artifact to generate\n   *\n   * Only applied if `outputFileName` is set as well.\n   *\n   * @default Automatically generated artifact name.\n   */\n  readonly output?: codepipeline.Artifact;\n\n  /**\n   * The AWS region the given Action resides in.\n   * Note that a cross-region Pipeline requires replication buckets to function correctly.\n   * You can provide their names with the {@link PipelineProps#crossRegionReplicationBuckets} property.\n   * If you don't, the CodePipeline Construct will create new Stacks in your CDK app containing those buckets,\n   * that you will need to `cdk deploy` before deploying the main, Pipeline-containing Stack.\n   *\n   * @default the Action resides in the same region as the Pipeline\n   */\n  readonly region?: string;\n\n  /**\n   * The AWS account this Action is supposed to operate in.\n   * **Note**: if you specify the `role` property,\n   * this is ignored - the action will operate in the same region the passed role does.\n   *\n   * @default - action resides in the same account as the pipeline\n   */\n  readonly account?: string;\n}\n\n/**\n * Base class for Actions that execute CloudFormation\n */\nabstract class CloudFormationAction extends Action {\n  private readonly props: CloudFormationActionProps;\n\n  constructor(props: CloudFormationActionProps, inputs: codepipeline.Artifact[] | undefined) {\n    super({\n      ...props,\n      provider: 'CloudFormation',\n      category: codepipeline.ActionCategory.DEPLOY,\n      artifactBounds: {\n        minInputs: 0,\n        maxInputs: 10,\n        minOutputs: 0,\n        maxOutputs: 1,\n      },\n      inputs,\n      outputs: props.outputFileName\n        ? [props.output || new codepipeline.Artifact(`${props.actionName}_${props.stackName}_Artifact`)]\n        : undefined,\n    });\n\n    this.props = props;\n  }\n\n  protected bound(_scope: Construct, _stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    const singletonPolicy = SingletonPolicy.forRole(options.role);\n\n    if ((this.actionProperties.outputs || []).length > 0) {\n      options.bucket.grantReadWrite(singletonPolicy);\n    } else if ((this.actionProperties.inputs || []).length > 0) {\n      options.bucket.grantRead(singletonPolicy);\n    }\n\n    return {\n      configuration: {\n        StackName: this.props.stackName,\n        OutputFileName: this.props.outputFileName,\n      },\n    };\n  }\n}\n\n/**\n * Properties for the CloudFormationExecuteChangeSetAction.\n */\nexport interface CloudFormationExecuteChangeSetActionProps extends CloudFormationActionProps {\n  /**\n   * Name of the change set to execute.\n   */\n  readonly changeSetName: string;\n}\n\n/**\n * CodePipeline action to execute a prepared change set.\n */\nexport class CloudFormationExecuteChangeSetAction extends CloudFormationAction {\n  private readonly props2: CloudFormationExecuteChangeSetActionProps;\n\n  constructor(props: CloudFormationExecuteChangeSetActionProps) {\n    super(props, undefined);\n\n    this.props2 = props;\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    SingletonPolicy.forRole(options.role).grantExecuteChangeSet(this.props2);\n\n    const actionConfig = super.bound(scope, stage, options);\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        ActionMode: 'CHANGE_SET_EXECUTE',\n        ChangeSetName: this.props2.changeSetName,\n      },\n    };\n  }\n}\n\n/**\n * Properties common to CloudFormation actions that stage deployments\n */\ninterface CloudFormationDeployActionProps extends CloudFormationActionProps {\n  /**\n   * IAM role to assume when deploying changes.\n   *\n   * If not specified, a fresh role is created. The role is created with zero\n   * permissions unless `adminPermissions` is true, in which case the role will have\n   * full permissions.\n   *\n   * @default A fresh role with full or no permissions (depending on the value of `adminPermissions`).\n   */\n  readonly deploymentRole?: iam.IRole;\n\n  /**\n   * Acknowledge certain changes made as part of deployment\n   *\n   * For stacks that contain certain resources, explicit acknowledgement that AWS CloudFormation\n   * might create or update those resources. For example, you must specify `AnonymousIAM` or `NamedIAM`\n   * if your stack template contains AWS Identity and Access Management (IAM) resources. For more\n   * information see the link below.\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities\n   * @default None, unless `adminPermissions` is true\n   * @deprecated use {@link cfnCapabilities} instead\n   */\n  readonly capabilities?: cloudformation.CloudFormationCapabilities[];\n\n  /**\n   * Acknowledge certain changes made as part of deployment.\n   *\n   * For stacks that contain certain resources,\n   * explicit acknowledgement is required that AWS CloudFormation might create or update those resources.\n   * For example, you must specify `ANONYMOUS_IAM` or `NAMED_IAM` if your stack template contains AWS\n   * Identity and Access Management (IAM) resources.\n   * For more information, see the link below.\n   *\n   * @default None, unless `adminPermissions` is true\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities\n   */\n  readonly cfnCapabilities?: cdk.CfnCapabilities[];\n\n  /**\n   * Whether to grant full permissions to CloudFormation while deploying this template.\n   *\n   * Setting this to `true` affects the defaults for `role` and `capabilities`, if you\n   * don't specify any alternatives.\n   *\n   * The default role that will be created for you will have full (i.e., `*`)\n   * permissions on all resources, and the deployment will have named IAM\n   * capabilities (i.e., able to create all IAM resources).\n   *\n   * This is a shorthand that you can use if you fully trust the templates that\n   * are deployed in this pipeline. If you want more fine-grained permissions,\n   * use `addToRolePolicy` and `capabilities` to control what the CloudFormation\n   * deployment is allowed to do.\n   */\n  readonly adminPermissions: boolean;\n\n  /**\n   * Input artifact to use for template parameters values and stack policy.\n   *\n   * The template configuration file should contain a JSON object that should look like this:\n   * `{ \"Parameters\": {...}, \"Tags\": {...}, \"StackPolicy\": {... }}`. For more information,\n   * see [AWS CloudFormation Artifacts](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-cfn-artifacts.html).\n   *\n   * Note that if you include sensitive information, such as passwords, restrict access to this\n   * file.\n   *\n   * @default No template configuration based on input artifacts\n   */\n  readonly templateConfiguration?: codepipeline.ArtifactPath;\n\n  /**\n   * Additional template parameters.\n   *\n   * Template parameters specified here take precedence over template parameters\n   * found in the artifact specified by the `templateConfiguration` property.\n   *\n   * We recommend that you use the template configuration file to specify\n   * most of your parameter values. Use parameter overrides to specify only\n   * dynamic parameter values (values that are unknown until you run the\n   * pipeline).\n   *\n   * All parameter names must be present in the stack template.\n   *\n   * Note: the entire object cannot be more than 1kB.\n   *\n   * @default No overrides\n   */\n  readonly parameterOverrides?: { [name: string]: any };\n\n  /**\n   * The list of additional input Artifacts for this Action.\n   * This is especially useful when used in conjunction with the `parameterOverrides` property.\n   * For example, if you have:\n   *\n   *   parameterOverrides: {\n   *     'Param1': action1.outputArtifact.bucketName,\n   *     'Param2': action2.outputArtifact.objectKey,\n   *   }\n   *\n   * , if the output Artifacts of `action1` and `action2` were not used to\n   * set either the `templateConfiguration` or the `templatePath` properties,\n   * you need to make sure to include them in the `extraInputs` -\n   * otherwise, you'll get an \"unrecognized Artifact\" error during your Pipeline's execution.\n   */\n  readonly extraInputs?: codepipeline.Artifact[];\n}\n\n/**\n * Base class for all CloudFormation actions that execute or stage deployments.\n */\nabstract class CloudFormationDeployAction extends CloudFormationAction {\n  private _deploymentRole?: iam.IRole;\n  private readonly props2: CloudFormationDeployActionProps;\n\n  constructor(props: CloudFormationDeployActionProps, inputs: codepipeline.Artifact[] | undefined) {\n    super(props, (props.extraInputs || []).concat(inputs || []));\n\n    this.props2 = props;\n  }\n\n  /**\n   * Add statement to the service role assumed by CloudFormation while executing this action.\n   */\n  public addToDeploymentRolePolicy(statement: iam.PolicyStatement) {\n    return this.getDeploymentRole('method addToRolePolicy()').addToPolicy(statement);\n  }\n\n  public get deploymentRole(): iam.IRole {\n    return this.getDeploymentRole('property role()');\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    if (this.props2.deploymentRole) {\n      this._deploymentRole = this.props2.deploymentRole;\n    } else {\n      const roleStack = cdk.Stack.of(options.role);\n      const pipelineStack = cdk.Stack.of(scope);\n      if (roleStack.account !== pipelineStack.account) {\n        // pass role is not allowed for cross-account access - so,\n        // create the deployment Role in the other account!\n        this._deploymentRole = new iam.Role(roleStack,\n          `${cdk.Names.nodeUniqueId(stage.pipeline.node)}-${stage.stageName}-${this.actionProperties.actionName}-DeploymentRole`, {\n            assumedBy: new iam.ServicePrincipal('cloudformation.amazonaws.com'),\n            roleName: cdk.PhysicalName.GENERATE_IF_NEEDED,\n          });\n      } else {\n        this._deploymentRole = new iam.Role(scope, 'Role', {\n          assumedBy: new iam.ServicePrincipal('cloudformation.amazonaws.com'),\n        });\n      }\n\n      // the deployment role might need read access to the pipeline's bucket\n      // (for example, if it's deploying a Lambda function),\n      // and even if it has admin permissions, it won't be enough,\n      // as it needs to be added to the key's resource policy\n      // (and the bucket's, if the access is cross-account)\n      options.bucket.grantRead(this._deploymentRole);\n\n      if (this.props2.adminPermissions) {\n        this._deploymentRole.addToPolicy(new iam.PolicyStatement({\n          actions: ['*'],\n          resources: ['*'],\n        }));\n      }\n    }\n\n    SingletonPolicy.forRole(options.role).grantPassRole(this._deploymentRole);\n\n    const providedCapabilities = this.props2.cfnCapabilities ??\n      this.props2.capabilities?.map(c => {\n        switch (c) {\n          case cloudformation.CloudFormationCapabilities.NONE: return cdk.CfnCapabilities.NONE;\n          case cloudformation.CloudFormationCapabilities.ANONYMOUS_IAM: return cdk.CfnCapabilities.ANONYMOUS_IAM;\n          case cloudformation.CloudFormationCapabilities.NAMED_IAM: return cdk.CfnCapabilities.NAMED_IAM;\n          case cloudformation.CloudFormationCapabilities.AUTO_EXPAND: return cdk.CfnCapabilities.AUTO_EXPAND;\n        }\n      });\n    const capabilities = this.props2.adminPermissions && providedCapabilities === undefined\n      ? [cdk.CfnCapabilities.NAMED_IAM]\n      : providedCapabilities;\n\n    const actionConfig = super.bound(scope, stage, options);\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        // None evaluates to empty string which is falsey and results in undefined\n        Capabilities: parseCapabilities(capabilities),\n        RoleArn: this.deploymentRole.roleArn,\n        ParameterOverrides: cdk.Stack.of(scope).toJsonString(this.props2.parameterOverrides),\n        TemplateConfiguration: this.props2.templateConfiguration\n          ? this.props2.templateConfiguration.location\n          : undefined,\n        StackName: this.props2.stackName,\n      },\n    };\n  }\n\n  private getDeploymentRole(member: string): iam.IRole {\n    if (this._deploymentRole) {\n      return this._deploymentRole;\n    } else {\n      throw new Error(`Cannot use the ${member} before the Action has been added to a Pipeline`);\n    }\n  }\n}\n\n/**\n * Properties for the CloudFormationCreateReplaceChangeSetAction.\n */\nexport interface CloudFormationCreateReplaceChangeSetActionProps extends CloudFormationDeployActionProps {\n  /**\n   * Name of the change set to create or update.\n   */\n  readonly changeSetName: string;\n\n  /**\n   * Input artifact with the ChangeSet's CloudFormation template\n   */\n  readonly templatePath: codepipeline.ArtifactPath;\n}\n\n/**\n * CodePipeline action to prepare a change set.\n *\n * Creates the change set if it doesn't exist based on the stack name and template that you submit.\n * If the change set exists, AWS CloudFormation deletes it, and then creates a new one.\n */\nexport class CloudFormationCreateReplaceChangeSetAction extends CloudFormationDeployAction {\n  private readonly props3: CloudFormationCreateReplaceChangeSetActionProps;\n\n  constructor(props: CloudFormationCreateReplaceChangeSetActionProps) {\n    super(props, props.templateConfiguration\n      ? [props.templatePath.artifact, props.templateConfiguration.artifact]\n      : [props.templatePath.artifact]);\n\n    this.props3 = props;\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    // the super call order is to preserve the existing order of statements in policies\n    const actionConfig = super.bound(scope, stage, options);\n\n    SingletonPolicy.forRole(options.role).grantCreateReplaceChangeSet(this.props3);\n\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        ActionMode: 'CHANGE_SET_REPLACE',\n        ChangeSetName: this.props3.changeSetName,\n        TemplatePath: this.props3.templatePath.location,\n      },\n    };\n  }\n}\n\n/**\n * Properties for the CloudFormationCreateUpdateStackAction.\n */\nexport interface CloudFormationCreateUpdateStackActionProps extends CloudFormationDeployActionProps {\n  /**\n   * Input artifact with the CloudFormation template to deploy\n   */\n  readonly templatePath: codepipeline.ArtifactPath;\n\n  /**\n   * Replace the stack if it's in a failed state.\n   *\n   * If this is set to true and the stack is in a failed state (one of\n   * ROLLBACK_COMPLETE, ROLLBACK_FAILED, CREATE_FAILED, DELETE_FAILED, or\n   * UPDATE_ROLLBACK_FAILED), AWS CloudFormation deletes the stack and then\n   * creates a new stack.\n   *\n   * If this is not set to true and the stack is in a failed state,\n   * the deployment fails.\n   *\n   * @default false\n   */\n  readonly replaceOnFailure?: boolean;\n}\n\n/**\n * CodePipeline action to deploy a stack.\n *\n * Creates the stack if the specified stack doesn't exist. If the stack exists,\n * AWS CloudFormation updates the stack. Use this action to update existing\n * stacks.\n *\n * AWS CodePipeline won't replace the stack, and will fail deployment if the\n * stack is in a failed state. Use `ReplaceOnFailure` for an action that\n * will delete and recreate the stack to try and recover from failed states.\n *\n * Use this action to automatically replace failed stacks without recovering or\n * troubleshooting them. You would typically choose this mode for testing.\n */\nexport class CloudFormationCreateUpdateStackAction extends CloudFormationDeployAction {\n  private readonly props3: CloudFormationCreateUpdateStackActionProps;\n\n  constructor(props: CloudFormationCreateUpdateStackActionProps) {\n    super(props, props.templateConfiguration\n      ? [props.templatePath.artifact, props.templateConfiguration.artifact]\n      : [props.templatePath.artifact]);\n\n    this.props3 = props;\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    // the super call order is to preserve the existing order of statements in policies\n    const actionConfig = super.bound(scope, stage, options);\n\n    SingletonPolicy.forRole(options.role).grantCreateUpdateStack(this.props3);\n\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        ActionMode: this.props3.replaceOnFailure ? 'REPLACE_ON_FAILURE' : 'CREATE_UPDATE',\n        TemplatePath: this.props3.templatePath.location,\n      },\n    };\n  }\n}\n\n/**\n * Properties for the CloudFormationDeleteStackAction.\n */\nexport interface CloudFormationDeleteStackActionProps extends CloudFormationDeployActionProps {\n}\n\n/**\n * CodePipeline action to delete a stack.\n *\n * Deletes a stack. If you specify a stack that doesn't exist, the action completes successfully\n * without deleting a stack.\n */\nexport class CloudFormationDeleteStackAction extends CloudFormationDeployAction {\n  private readonly props3: CloudFormationDeleteStackActionProps;\n\n  constructor(props: CloudFormationDeleteStackActionProps) {\n    super(props, undefined);\n\n    this.props3 = props;\n  }\n\n  protected bound(scope: Construct, stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    // the super call order is to preserve the existing order of statements in policies\n    const actionConfig = super.bound(scope, stage, options);\n\n    SingletonPolicy.forRole(options.role).grantDeleteStack(this.props3);\n\n    return {\n      ...actionConfig,\n      configuration: {\n        ...actionConfig.configuration,\n        ActionMode: 'DELETE_ONLY',\n      },\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
