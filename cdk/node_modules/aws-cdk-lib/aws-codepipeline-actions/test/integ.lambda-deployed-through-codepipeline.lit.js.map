{
  "version": 3,
  "sources": ["integ.lambda-deployed-through-codepipeline.lit.ts"],
  "sourcesContent": ["/// !cdk-integ PipelineStack\nimport * as codebuild from '../../aws-codebuild';\nimport * as codecommit from '../../aws-codecommit';\nimport * as codepipeline from '../../aws-codepipeline';\nimport * as lambda from '../../aws-lambda';\nimport * as cdk from '../../core';\nimport * as codepipeline_actions from '../lib';\n\nconst app = new cdk.App();\n\n/// !show\nconst lambdaStack = new cdk.Stack(app, 'LambdaStack');\nconst lambdaCode = lambda.Code.fromCfnParameters();\nnew lambda.Function(lambdaStack, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_14_X,\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nconst pipelineStack = new cdk.Stack(app, 'PipelineStack');\nconst pipeline = new codepipeline.Pipeline(pipelineStack, 'Pipeline');\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nconst cdkSourceOutput = new codepipeline.Artifact();\nconst cdkSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'CdkCodeRepo', {\n    repositoryName: 'CdkCodeRepo',\n  }),\n  actionName: 'CdkCode_Source',\n  output: cdkSourceOutput,\n});\nconst lambdaSourceOutput = new codepipeline.Artifact();\nconst lambdaSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'LambdaCodeRepo', {\n    repositoryName: 'LambdaCodeRepo',\n  }),\n  actionName: 'LambdaCode_Source',\n  output: lambdaSourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [cdkSourceAction, lambdaSourceAction],\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nconst cdkBuildProject = new codebuild.Project(pipelineStack, 'CdkBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: [\n          'npm run build',\n          'npm run cdk synth LambdaStack -- -o .',\n        ],\n      },\n    },\n    artifacts: {\n      files: 'LambdaStack.template.yaml',\n    },\n  }),\n});\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst cdkBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CDK_Build',\n  project: cdkBuildProject,\n  input: cdkSourceOutput,\n  outputs: [cdkBuildOutput],\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nconst lambdaBuildProject = new codebuild.Project(pipelineStack, 'LambdaBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: 'npm run build',\n      },\n    },\n    artifacts: {\n      files: [\n        'index.js',\n        'node_modules/**/*',\n      ],\n    },\n  }),\n});\nconst lambdaBuildOutput = new codepipeline.Artifact();\nconst lambdaBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Lambda_Build',\n  project: lambdaBuildProject,\n  input: lambdaSourceOutput,\n  outputs: [lambdaBuildOutput],\n});\n\npipeline.addStage({\n  stageName: 'Build',\n  actions: [cdkBuildAction, lambdaBuildAction],\n});\n\n// finally, deploy your Lambda Stack\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n      actionName: 'Lambda_CFN_Deploy',\n      templatePath: cdkBuildOutput.atPath('LambdaStack.template.yaml'),\n      stackName: 'LambdaStackDeployedName',\n      adminPermissions: true,\n      parameterOverrides: lambdaCode.assign(lambdaBuildOutput.s3Location),\n      extraInputs: [\n        lambdaBuildOutput,\n      ],\n    }),\n  ],\n});\n"],
  "mappings": "oEACA,KAAA,WAAA,QAAA,qBAAA,EACA,WAAA,QAAA,sBAAA,EACA,aAAA,QAAA,wBAAA,EACA,OAAA,QAAA,kBAAA,EACA,IAAA,QAAA,YAAA,EACA,qBAAA,QAAA,QAAA,EAEM,IAAM,GAAI,KAAI,IAGd,YAAc,GAAI,KAAI,MAAM,IAAK,aAAa,EAC9C,WAAa,OAAO,KAAK,kBAAiB,EAChD,GAAI,QAAO,SAAS,YAAa,SAAU,CACzC,KAAM,WACN,QAAS,gBACT,QAAS,OAAO,QAAQ,YACzB,EAGD,KAAM,eAAgB,GAAI,KAAI,MAAM,IAAK,eAAe,EAClD,SAAW,GAAI,cAAa,SAAS,cAAe,UAAU,EAI9D,gBAAkB,GAAI,cAAa,SACnC,gBAAkB,GAAI,sBAAqB,uBAAuB,CACtE,WAAY,GAAI,YAAW,WAAW,cAAe,cAAe,CAClE,eAAgB,cACjB,EACD,WAAY,iBACZ,OAAQ,gBACT,EACK,mBAAqB,GAAI,cAAa,SACtC,mBAAqB,GAAI,sBAAqB,uBAAuB,CACzE,WAAY,GAAI,YAAW,WAAW,cAAe,iBAAkB,CACrE,eAAgB,iBACjB,EACD,WAAY,oBACZ,OAAQ,mBACT,EACD,SAAS,SAAS,CAChB,UAAW,SACX,QAAS,CAAC,gBAAiB,kBAAkB,EAC9C,EAKD,KAAM,iBAAkB,GAAI,WAAU,QAAQ,cAAe,kBAAmB,CAC9E,YAAa,CACX,WAAY,UAAU,gBAAgB,4BAExC,UAAW,UAAU,UAAU,WAAW,CACxC,QAAS,MACT,OAAQ,CACN,QAAS,CACP,SAAU,eAEZ,MAAO,CACL,SAAU,CACR,gBACA,2CAIN,UAAW,CACT,MAAO,6BAEV,EACF,EACK,eAAiB,GAAI,cAAa,SAClC,eAAiB,GAAI,sBAAqB,gBAAgB,CAC9D,WAAY,YACZ,QAAS,gBACT,MAAO,gBACP,QAAS,CAAC,cAAc,EACzB,EAKK,mBAAqB,GAAI,WAAU,QAAQ,cAAe,qBAAsB,CACpF,YAAa,CACX,WAAY,UAAU,gBAAgB,4BAExC,UAAW,UAAU,UAAU,WAAW,CACxC,QAAS,MACT,OAAQ,CACN,QAAS,CACP,SAAU,eAEZ,MAAO,CACL,SAAU,kBAGd,UAAW,CACT,MAAO,CACL,WACA,sBAGL,EACF,EACK,kBAAoB,GAAI,cAAa,SACrC,kBAAoB,GAAI,sBAAqB,gBAAgB,CACjE,WAAY,eACZ,QAAS,mBACT,MAAO,mBACP,QAAS,CAAC,iBAAiB,EAC5B,EAED,SAAS,SAAS,CAChB,UAAW,QACX,QAAS,CAAC,eAAgB,iBAAiB,EAC5C,EAGD,SAAS,SAAS,CAChB,UAAW,SACX,QAAS,CACP,GAAI,sBAAqB,sCAAsC,CAC7D,WAAY,oBACZ,aAAc,eAAe,OAAO,2BAA2B,EAC/D,UAAW,0BACX,iBAAkB,GAClB,mBAAoB,WAAW,OAAO,kBAAkB,UAAU,EAClE,YAAa,CACX,mBAEH,GAEJ",
  "names": []
}
