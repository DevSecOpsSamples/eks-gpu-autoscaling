{
  "version": 3,
  "sources": ["secret-rotation.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as lambda from '../../aws-lambda';\nimport * as serverless from '../../aws-sam';\nimport { Duration, Names, Stack, Token, CfnMapping, Aws } from '../../core';\nimport { Construct } from 'constructs';\nimport { ISecret } from './secret';\n\n/**\n * Options for a SecretRotationApplication\n */\nexport interface SecretRotationApplicationOptions {\n  /**\n   * Whether the rotation application uses the mutli user scheme\n   *\n   * @default false\n   */\n  readonly isMultiUser?: boolean;\n}\n\n/**\n * A secret rotation serverless application.\n */\nexport class SecretRotationApplication {\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS MariaDB using the single user rotation scheme\n   */\n  public static readonly MARIADB_ROTATION_SINGLE_USER = new SecretRotationApplication('SecretsManagerRDSMariaDBRotationSingleUser', '1.1.225');\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS MariaDB using the multi user rotation scheme\n   */\n  public static readonly MARIADB_ROTATION_MULTI_USER = new SecretRotationApplication('SecretsManagerRDSMariaDBRotationMultiUser', '1.1.225', {\n    isMultiUser: true,\n  });\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS MySQL using the single user rotation scheme\n   */\n  public static readonly MYSQL_ROTATION_SINGLE_USER = new SecretRotationApplication('SecretsManagerRDSMySQLRotationSingleUser', '1.1.225');\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS MySQL using the multi user rotation scheme\n   */\n  public static readonly MYSQL_ROTATION_MULTI_USER = new SecretRotationApplication('SecretsManagerRDSMySQLRotationMultiUser', '1.1.225', {\n    isMultiUser: true,\n  });\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS Oracle using the single user rotation scheme\n   */\n  public static readonly ORACLE_ROTATION_SINGLE_USER = new SecretRotationApplication('SecretsManagerRDSOracleRotationSingleUser', '1.1.225');\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS Oracle using the multi user rotation scheme\n   */\n  public static readonly ORACLE_ROTATION_MULTI_USER = new SecretRotationApplication('SecretsManagerRDSOracleRotationMultiUser', '1.1.225', {\n    isMultiUser: true,\n  });\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS PostgreSQL using the single user rotation scheme\n   */\n  public static readonly POSTGRES_ROTATION_SINGLE_USER = new SecretRotationApplication('SecretsManagerRDSPostgreSQLRotationSingleUser', '1.1.225');\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS PostgreSQL using the multi user rotation scheme\n   */\n  public static readonly POSTGRES_ROTATION_MULTI_USER = new SecretRotationApplication('SecretsManagerRDSPostgreSQLRotationMultiUser', '1.1.225', {\n    isMultiUser: true,\n  });\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS SQL Server using the single user rotation scheme\n   */\n  public static readonly SQLSERVER_ROTATION_SINGLE_USER = new SecretRotationApplication('SecretsManagerRDSSQLServerRotationSingleUser', '1.1.225');\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for RDS SQL Server using the multi user rotation scheme\n   */\n  public static readonly SQLSERVER_ROTATION_MULTI_USER = new SecretRotationApplication('SecretsManagerRDSSQLServerRotationMultiUser', '1.1.225', {\n    isMultiUser: true,\n  });\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for Amazon Redshift using the single user rotation scheme\n   */\n  public static readonly REDSHIFT_ROTATION_SINGLE_USER = new SecretRotationApplication('SecretsManagerRedshiftRotationSingleUser', '1.1.225');\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for Amazon Redshift using the multi user rotation scheme\n   */\n  public static readonly REDSHIFT_ROTATION_MULTI_USER = new SecretRotationApplication('SecretsManagerRedshiftRotationMultiUser', '1.1.225', {\n    isMultiUser: true,\n  });\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for MongoDB using the single user rotation scheme\n   */\n  public static readonly MONGODB_ROTATION_SINGLE_USER = new SecretRotationApplication('SecretsManagerMongoDBRotationSingleUser', '1.1.225');\n\n  /**\n   * Conducts an AWS SecretsManager secret rotation for MongoDB using the multi user rotation scheme\n   */\n  public static readonly MONGODB_ROTATION_MULTI_USER = new SecretRotationApplication('SecretsManagerMongoDBRotationMultiUser', '1.1.225', {\n    isMultiUser: true,\n  });\n\n  /**\n   * The application identifier of the rotation application\n   *\n   * @deprecated only valid when deploying to the 'aws' partition. Use `applicationArnForPartition` instead.\n   */\n  public readonly applicationId: string;\n\n  /**\n   * The semantic version of the rotation application\n   *\n   * @deprecated only valid when deploying to the 'aws' partition. Use `semanticVersionForPartition` instead.\n   */\n  public readonly semanticVersion: string;\n\n  /**\n   * Whether the rotation application uses the mutli user scheme\n   */\n  public readonly isMultiUser?: boolean;\n\n  /**\n   * The application name of the rotation application\n   */\n  private readonly applicationName: string;\n\n  constructor(applicationId: string, semanticVersion: string, options?: SecretRotationApplicationOptions) {\n    this.applicationId = `arn:aws:serverlessrepo:us-east-1:297356227824:applications/${applicationId}`;\n    this.semanticVersion = semanticVersion;\n    this.applicationName = applicationId;\n    this.isMultiUser = options && options.isMultiUser;\n  }\n\n  /**\n   * Returns the application ARN for the current partition.\n   * Can be used in combination with a `CfnMapping` to automatically select the correct ARN based on the current partition.\n   */\n  public applicationArnForPartition(partition: string) {\n    if (partition === 'aws') {\n      return this.applicationId;\n    } else if (partition === 'aws-cn') {\n      return `arn:aws-cn:serverlessrepo:cn-north-1:193023089310:applications/${this.applicationName}`;\n    } else if (partition === 'aws-us-gov') {\n      return `arn:aws-us-gov:serverlessrepo:us-gov-west-1:023102451235:applications/${this.applicationName}`;\n    } else {\n      throw new Error(`unsupported partition: ${partition}`);\n    }\n  }\n\n  /**\n   * The semantic version of the app for the current partition.\n   * Can be used in combination with a `CfnMapping` to automatically select the correct version based on the current partition.\n   */\n  public semanticVersionForPartition(partition: string) {\n    if (partition === 'aws') {\n      return this.semanticVersion;\n    } else if (partition === 'aws-cn') {\n      return '1.1.37';\n    } else if (partition === 'aws-us-gov') {\n      return '1.1.93';\n    } else {\n      throw new Error(`unsupported partition: ${partition}`);\n    }\n  }\n}\n\n/**\n * Construction properties for a SecretRotation.\n */\nexport interface SecretRotationProps {\n  /**\n   * The secret to rotate. It must be a JSON string with the following format:\n   *\n   * ```\n   * {\n   *   \"engine\": <required: database engine>,\n   *   \"host\": <required: instance host name>,\n   *   \"username\": <required: username>,\n   *   \"password\": <required: password>,\n   *   \"dbname\": <optional: database name>,\n   *   \"port\": <optional: if not specified, default port will be used>,\n   *   \"masterarn\": <required for multi user rotation: the arn of the master secret which will be used to create users/change passwords>\n   * }\n   * ```\n   *\n   * This is typically the case for a secret referenced from an `AWS::SecretsManager::SecretTargetAttachment`\n   * or an `ISecret` returned by the `attach()` method of `Secret`.\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-secretsmanager-secrettargetattachment.html\n   */\n  readonly secret: ISecret;\n\n  /**\n   * The master secret for a multi user rotation scheme\n   *\n   * @default - single user rotation scheme\n   */\n  readonly masterSecret?: ISecret;\n\n  /**\n   * Specifies the number of days after the previous rotation before\n   * Secrets Manager triggers the next automatic rotation.\n   *\n   * @default Duration.days(30)\n   */\n  readonly automaticallyAfter?: Duration;\n\n  /**\n   * The serverless application for the rotation.\n   */\n  readonly application: SecretRotationApplication;\n\n  /**\n   * The VPC where the Lambda rotation function will run.\n   */\n  readonly vpc: ec2.IVpc;\n\n  /**\n   * The type of subnets in the VPC where the Lambda rotation function will run.\n   *\n   * @default - the Vpc default strategy if not specified.\n   */\n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n  /**\n   * The target service or database\n   */\n  readonly target: ec2.IConnectable;\n\n  /**\n   * The security group for the Lambda rotation function\n   *\n   * @default - a new security group is created\n   */\n  readonly securityGroup?: ec2.ISecurityGroup;\n\n  /**\n   * Characters which should not appear in the generated password\n   *\n   * @default - no additional characters are explicitly excluded\n   */\n  readonly excludeCharacters?: string;\n\n  /**\n   * The VPC interface endpoint to use for the Secrets Manager API\n   *\n   * If you enable private DNS hostnames for your VPC private endpoint (the default), you don't\n   * need to specify an endpoint. The standard Secrets Manager DNS hostname the Secrets Manager\n   * CLI and SDKs use by default (https://secretsmanager.<region>.amazonaws.com) automatically\n   * resolves to your VPC endpoint.\n   *\n   * @default https://secretsmanager.<region>.amazonaws.com\n   */\n  readonly endpoint?: ec2.IInterfaceVpcEndpoint;\n}\n\n/**\n * Secret rotation for a service or database\n */\nexport class SecretRotation extends Construct {\n  constructor(scope: Construct, id: string, props: SecretRotationProps) {\n    super(scope, id);\n\n    if (!props.target.connections.defaultPort) {\n      throw new Error('The `target` connections must have a default port range.');\n    }\n\n    if (props.application.isMultiUser && !props.masterSecret) {\n      throw new Error('The `masterSecret` must be specified for application using the multi user scheme.');\n    }\n\n    // Max length of 64 chars, get the last 64 chars\n    const uniqueId = Names.uniqueId(this);\n    const rotationFunctionName = uniqueId.substring(Math.max(uniqueId.length - 64, 0), uniqueId.length);\n\n    const securityGroup = props.securityGroup || new ec2.SecurityGroup(this, 'SecurityGroup', {\n      vpc: props.vpc,\n    });\n    props.target.connections.allowDefaultPortFrom(securityGroup);\n\n    const parameters: { [key: string]: string } = {\n      endpoint: `https://${props.endpoint ? `${props.endpoint.vpcEndpointId}.` : ''}secretsmanager.${Stack.of(this).region}.${Stack.of(this).urlSuffix}`,\n      functionName: rotationFunctionName,\n      vpcSubnetIds: props.vpc.selectSubnets(props.vpcSubnets).subnetIds.join(','),\n      vpcSecurityGroupIds: securityGroup.securityGroupId,\n    };\n\n    if (props.excludeCharacters !== undefined) {\n      parameters.excludeCharacters = props.excludeCharacters;\n    }\n\n    if (props.secret.encryptionKey) {\n      parameters.kmsKeyArn = props.secret.encryptionKey.keyArn;\n    }\n\n    if (props.masterSecret) {\n      parameters.masterSecretArn = props.masterSecret.secretArn;\n\n      if (props.masterSecret.encryptionKey) {\n        parameters.masterSecretKmsKeyArn = props.masterSecret.encryptionKey.keyArn;\n      }\n    }\n\n    const sarMapping = new CfnMapping(this, 'SARMapping', {\n      mapping: {\n        'aws': {\n          applicationId: props.application.applicationArnForPartition('aws'),\n          semanticVersion: props.application.semanticVersionForPartition('aws'),\n        },\n        'aws-cn': {\n          applicationId: props.application.applicationArnForPartition('aws-cn'),\n          semanticVersion: props.application.semanticVersionForPartition('aws-cn'),\n        },\n        'aws-us-gov': {\n          applicationId: props.application.applicationArnForPartition('aws-us-gov'),\n          semanticVersion: props.application.semanticVersionForPartition('aws-us-gov'),\n        },\n      },\n    });\n    const application = new serverless.CfnApplication(this, 'Resource', {\n      location: {\n        applicationId: sarMapping.findInMap(Aws.PARTITION, 'applicationId'),\n        semanticVersion: sarMapping.findInMap(Aws.PARTITION, 'semanticVersion'),\n      },\n      parameters,\n    });\n\n    // This creates a CF a dependency between the rotation schedule and the\n    // serverless application. This is needed because it's the application\n    // that creates the Lambda permission to invoke the function.\n    // See https://docs.aws.amazon.com/secretsmanager/latest/userguide/integrating_cloudformation.html\n    const rotationLambda = lambda.Function.fromFunctionArn(this, 'RotationLambda', Token.asString(application.getAtt('Outputs.RotationLambdaARN')));\n\n    props.secret.addRotationSchedule('RotationSchedule', {\n      rotationLambda,\n      automaticallyAfter: props.automaticallyAfter,\n    });\n\n    // Prevent master secret deletion when rotation is in place\n    if (props.masterSecret) {\n      props.masterSecret.denyAccountRootDelete();\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
