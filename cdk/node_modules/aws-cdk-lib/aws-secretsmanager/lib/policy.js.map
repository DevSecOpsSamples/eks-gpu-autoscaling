{
  "version": 3,
  "sources": ["policy.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { ISecret } from './secret';\nimport { CfnResourcePolicy } from './secretsmanager.generated';\n\n/**\n * Construction properties for a ResourcePolicy\n */\nexport interface ResourcePolicyProps {\n  /**\n   * The secret to attach a resource-based permissions policy\n   */\n  readonly secret: ISecret;\n}\n\n/**\n * Resource Policy for SecretsManager Secrets\n *\n * Policies define the operations that are allowed on this resource.\n *\n * You almost never need to define this construct directly.\n *\n * All AWS resources that support resource policies have a method called\n * `addToResourcePolicy()`, which will automatically create a new resource\n * policy if one doesn't exist yet, otherwise it will add to the existing\n * policy.\n *\n * Prefer to use `addToResourcePolicy()` instead.\n */\nexport class ResourcePolicy extends Resource {\n  /**\n   * The IAM policy document for this policy.\n   */\n  public readonly document = new iam.PolicyDocument();\n\n  constructor(scope: Construct, id: string, props: ResourcePolicyProps) {\n    super(scope, id);\n\n    new CfnResourcePolicy(this, 'Resource', {\n      resourcePolicy: this.document,\n      secretId: props.secret.secretArn,\n    });\n  }\n}\n"],
  "mappings": "qNAAA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EAGA,2BAAA,QAAA,4BAAA,EA0BA,MAAa,sBAAuB,QAAA,QAAQ,CAM1C,YAAY,MAAkB,GAAY,MAA0B,CAClE,MAAM,MAAO,EAAE,EAHD,KAAA,SAAW,GAAI,KAAI,iGAKjC,GAAI,4BAAA,kBAAkB,KAAM,WAAY,CACtC,eAAgB,KAAK,SACrB,SAAU,MAAM,OAAO,UACxB,GAZL,QAAA,eAAA",
  "names": []
}
