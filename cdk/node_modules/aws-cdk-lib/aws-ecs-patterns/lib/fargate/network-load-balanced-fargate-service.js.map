{
  "version": 3,
  "sources": ["network-load-balanced-fargate-service.ts"],
  "sourcesContent": ["import { SubnetSelection } from '../../../aws-ec2';\nimport { FargatePlatformVersion, FargateService, FargateTaskDefinition } from '../../../aws-ecs';\nimport { FeatureFlags } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { NetworkLoadBalancedServiceBase, NetworkLoadBalancedServiceBaseProps } from '../base/network-load-balanced-service-base';\n\n/**\n * The properties for the NetworkLoadBalancedFargateService service.\n */\nexport interface NetworkLoadBalancedFargateServiceProps extends NetworkLoadBalancedServiceBaseProps {\n  /**\n   * The task definition to use for tasks in the service. TaskDefinition or TaskImageOptions must be specified, but not both.\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - none\n   */\n  readonly taskDefinition?: FargateTaskDefinition;\n\n  /**\n   * The number of cpu units used by the task.\n   *\n   * Valid values, which determines your range of valid values for the memory parameter:\n   *\n   * 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n   *\n   * 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n   *\n   * 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n   *\n   * 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n   *\n   * 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n   *\n   * This default is set in the underlying FargateTaskDefinition construct.\n   *\n   * @default 256\n   */\n  readonly cpu?: number;\n\n  /**\n   * The amount (in MiB) of memory used by the task.\n   *\n   * This field is required and you must use one of the following values, which determines your range of valid values\n   * for the cpu parameter:\n   *\n   * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)\n   *\n   * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)\n   *\n   * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)\n   *\n   * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)\n   *\n   * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)\n   *\n   * This default is set in the underlying FargateTaskDefinition construct.\n   *\n   * @default 512\n   */\n  readonly memoryLimitMiB?: number;\n\n  /**\n   * Determines whether the service will be assigned a public IP address.\n   *\n   * @default false\n   */\n  readonly assignPublicIp?: boolean;\n\n  /**\n   * The subnets to associate with the service.\n   *\n   * @default - Public subnets if `assignPublicIp` is set, otherwise the first available one of Private, Isolated, Public, in that order.\n   */\n  readonly taskSubnets?: SubnetSelection;\n\n  /**\n   * The platform version on which to run your service.\n   *\n   * If one is not specified, the LATEST platform version is used by default. For more information, see\n   * [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\n   * in the Amazon Elastic Container Service Developer Guide.\n   *\n   * @default Latest\n   */\n  readonly platformVersion?: FargatePlatformVersion;\n}\n\n/**\n * A Fargate service running on an ECS cluster fronted by a network load balancer.\n */\nexport class NetworkLoadBalancedFargateService extends NetworkLoadBalancedServiceBase {\n\n  public readonly assignPublicIp: boolean;\n  /**\n   * The Fargate service in this construct.\n   */\n  public readonly service: FargateService;\n  /**\n   * The Fargate task definition in this construct.\n   */\n  public readonly taskDefinition: FargateTaskDefinition;\n\n  /**\n   * Constructs a new instance of the NetworkLoadBalancedFargateService class.\n   */\n  constructor(scope: Construct, id: string, props: NetworkLoadBalancedFargateServiceProps = {}) {\n    super(scope, id, props);\n\n    this.assignPublicIp = props.assignPublicIp ?? false;\n\n    if (props.taskDefinition && props.taskImageOptions) {\n      throw new Error('You must specify either a taskDefinition or an image, not both.');\n    } else if (props.taskDefinition) {\n      this.taskDefinition = props.taskDefinition;\n    } else if (props.taskImageOptions) {\n      const taskImageOptions = props.taskImageOptions;\n      this.taskDefinition = new FargateTaskDefinition(this, 'TaskDef', {\n        memoryLimitMiB: props.memoryLimitMiB,\n        cpu: props.cpu,\n        executionRole: taskImageOptions.executionRole,\n        taskRole: taskImageOptions.taskRole,\n        family: taskImageOptions.family,\n      });\n\n      // Create log driver if logging is enabled\n      const enableLogging = taskImageOptions.enableLogging ?? true;\n      const logDriver = taskImageOptions.logDriver ?? (enableLogging ? this.createAWSLogDriver(this.node.id) : undefined);\n\n      const containerName = taskImageOptions.containerName ?? 'web';\n      const container = this.taskDefinition.addContainer(containerName, {\n        image: taskImageOptions.image,\n        logging: logDriver,\n        environment: taskImageOptions.environment,\n        secrets: taskImageOptions.secrets,\n        dockerLabels: taskImageOptions.dockerLabels,\n      });\n      container.addPortMappings({\n        containerPort: taskImageOptions.containerPort || 80,\n      });\n    } else {\n      throw new Error('You must specify one of: taskDefinition or image');\n    }\n\n    const desiredCount = FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT) ? this.internalDesiredCount : this.desiredCount;\n\n    this.service = new FargateService(this, 'Service', {\n      cluster: this.cluster,\n      desiredCount: desiredCount,\n      taskDefinition: this.taskDefinition,\n      assignPublicIp: this.assignPublicIp,\n      serviceName: props.serviceName,\n      healthCheckGracePeriod: props.healthCheckGracePeriod,\n      minHealthyPercent: props.minHealthyPercent,\n      maxHealthyPercent: props.maxHealthyPercent,\n      propagateTags: props.propagateTags,\n      enableECSManagedTags: props.enableECSManagedTags,\n      cloudMapOptions: props.cloudMapOptions,\n      platformVersion: props.platformVersion,\n      deploymentController: props.deploymentController,\n      circuitBreaker: props.circuitBreaker,\n      vpcSubnets: props.taskSubnets,\n    });\n    this.addServiceAsTarget(this.service);\n  }\n}\n"],
  "mappings": "2OACA,UAAA,QAAA,kBAAA,EACA,OAAA,QAAA,eAAA,EACA,MAAA,QAAA,iBAAA,EAEA,qCAAA,QAAA,4CAAA,EAuFA,MAAa,yCAA0C,sCAAA,8BAA8B,CAenF,YAAY,MAAkB,GAAY,MAAgD,CAAA,EAAE,iBAC1F,MAAM,MAAO,GAAI,KAAK,EAItB,sGAFA,KAAK,eAAc,IAAG,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,GAE1C,MAAM,gBAAkB,MAAM,iBAChC,KAAM,IAAI,OAAM,iEAAiE,EAC5E,GAAI,MAAM,eACf,KAAK,eAAiB,MAAM,uBACnB,MAAM,iBAAkB,CACjC,KAAM,kBAAmB,MAAM,iBAC/B,KAAK,eAAiB,GAAI,WAAA,sBAAsB,KAAM,UAAW,CAC/D,eAAgB,MAAM,eACtB,IAAK,MAAM,IACX,cAAe,iBAAiB,cAChC,SAAU,iBAAiB,SAC3B,OAAQ,iBAAiB,OAC1B,EAGD,KAAM,eAAa,IAAG,iBAAiB,iBAAa,MAAA,KAAA,OAAA,GAAI,GAClD,UAAS,IAAG,iBAAiB,aAAS,MAAA,KAAA,OAAA,GAAK,cAAgB,KAAK,mBAAmB,KAAK,KAAK,EAAE,EAAI,OAEnG,cAAa,IAAG,iBAAiB,iBAAa,MAAA,KAAA,OAAA,GAAI,MAQxD,AAPkB,KAAK,eAAe,aAAa,cAAe,CAChE,MAAO,iBAAiB,MACxB,QAAS,UACT,YAAa,iBAAiB,YAC9B,QAAS,iBAAiB,QAC1B,aAAc,iBAAiB,aAChC,EACS,gBAAgB,CACxB,cAAe,iBAAiB,eAAiB,GAClD,MAED,MAAM,IAAI,OAAM,kDAAkD,EAGpE,KAAM,cAAe,OAAA,aAAa,GAAG,IAAI,EAAE,UAAU,MAAM,gCAAgC,EAAI,KAAK,qBAAuB,KAAK,aAEhI,KAAK,QAAU,GAAI,WAAA,eAAe,KAAM,UAAW,CACjD,QAAS,KAAK,QACd,aACA,eAAgB,KAAK,eACrB,eAAgB,KAAK,eACrB,YAAa,MAAM,YACnB,uBAAwB,MAAM,uBAC9B,kBAAmB,MAAM,kBACzB,kBAAmB,MAAM,kBACzB,cAAe,MAAM,cACrB,qBAAsB,MAAM,qBAC5B,gBAAiB,MAAM,gBACvB,gBAAiB,MAAM,gBACvB,qBAAsB,MAAM,qBAC5B,eAAgB,MAAM,eACtB,WAAY,MAAM,YACnB,EACD,KAAK,mBAAmB,KAAK,OAAO,GAxExC,QAAA,kCAAA",
  "names": []
}
