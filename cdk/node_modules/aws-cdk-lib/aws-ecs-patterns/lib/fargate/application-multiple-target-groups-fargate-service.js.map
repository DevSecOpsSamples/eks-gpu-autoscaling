{
  "version": 3,
  "sources": ["application-multiple-target-groups-fargate-service.ts"],
  "sourcesContent": ["import { FargatePlatformVersion, FargateService, FargateTaskDefinition } from '../../../aws-ecs';\nimport { ApplicationTargetGroup } from '../../../aws-elasticloadbalancingv2';\nimport { FeatureFlags } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport {\n  ApplicationMultipleTargetGroupsServiceBase,\n  ApplicationMultipleTargetGroupsServiceBaseProps,\n} from '../base/application-multiple-target-groups-service-base';\n\n/**\n * The properties for the ApplicationMultipleTargetGroupsFargateService service.\n */\nexport interface ApplicationMultipleTargetGroupsFargateServiceProps extends ApplicationMultipleTargetGroupsServiceBaseProps {\n\n  /**\n   * The task definition to use for tasks in the service. Only one of TaskDefinition or TaskImageOptions must be specified.\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - none\n   */\n  readonly taskDefinition?: FargateTaskDefinition;\n\n  /**\n   * The number of cpu units used by the task.\n   *\n   * Valid values, which determines your range of valid values for the memory parameter:\n   *\n   * 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n   *\n   * 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n   *\n   * 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n   *\n   * 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n   *\n   * 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n   *\n   * This default is set in the underlying FargateTaskDefinition construct.\n   *\n   * @default 256\n   */\n  readonly cpu?: number;\n\n  /**\n   * The amount (in MiB) of memory used by the task.\n   *\n   * This field is required and you must use one of the following values, which determines your range of valid values\n   * for the cpu parameter:\n   *\n   * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)\n   *\n   * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)\n   *\n   * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)\n   *\n   * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)\n   *\n   * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)\n   *\n   * This default is set in the underlying FargateTaskDefinition construct.\n   *\n   * @default 512\n   */\n  readonly memoryLimitMiB?: number;\n\n  /**\n   * Determines whether the service will be assigned a public IP address.\n   *\n   * @default false\n   */\n  readonly assignPublicIp?: boolean;\n\n  /**\n   * The platform version on which to run your service.\n   *\n   * If one is not specified, the LATEST platform version is used by default. For more information, see\n   * [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\n   * in the Amazon Elastic Container Service Developer Guide.\n   *\n   * @default Latest\n   */\n  readonly platformVersion?: FargatePlatformVersion;\n}\n\n/**\n * A Fargate service running on an ECS cluster fronted by an application load balancer.\n */\nexport class ApplicationMultipleTargetGroupsFargateService extends ApplicationMultipleTargetGroupsServiceBase {\n\n  /**\n   * Determines whether the service will be assigned a public IP address.\n   */\n  public readonly assignPublicIp: boolean;\n\n  /**\n   * The Fargate service in this construct.\n   */\n  public readonly service: FargateService;\n\n  /**\n   * The Fargate task definition in this construct.\n   */\n  public readonly taskDefinition: FargateTaskDefinition;\n\n  /**\n   * The default target group for the service.\n   */\n  public readonly targetGroup: ApplicationTargetGroup;\n\n  /**\n   * Constructs a new instance of the ApplicationMultipleTargetGroupsFargateService class.\n   */\n  constructor(scope: Construct, id: string, props: ApplicationMultipleTargetGroupsFargateServiceProps = {}) {\n    super(scope, id, props);\n\n    this.assignPublicIp = props.assignPublicIp ?? false;\n\n    if (props.taskDefinition && props.taskImageOptions) {\n      throw new Error('You must specify only one of TaskDefinition or TaskImageOptions.');\n    } else if (props.taskDefinition) {\n      this.taskDefinition = props.taskDefinition;\n    } else if (props.taskImageOptions) {\n      const taskImageOptions = props.taskImageOptions;\n      this.taskDefinition = new FargateTaskDefinition(this, 'TaskDef', {\n        memoryLimitMiB: props.memoryLimitMiB,\n        cpu: props.cpu,\n        executionRole: taskImageOptions.executionRole,\n        taskRole: taskImageOptions.taskRole,\n        family: taskImageOptions.family,\n      });\n\n      const containerName = taskImageOptions.containerName ?? 'web';\n      const container = this.taskDefinition.addContainer(containerName, {\n        image: taskImageOptions.image,\n        logging: this.logDriver,\n        environment: taskImageOptions.environment,\n        secrets: taskImageOptions.secrets,\n        dockerLabels: taskImageOptions.dockerLabels,\n      });\n      if (taskImageOptions.containerPorts) {\n        for (const containerPort of taskImageOptions.containerPorts) {\n          container.addPortMappings({\n            containerPort,\n          });\n        }\n      }\n    } else {\n      throw new Error('You must specify one of: taskDefinition or image');\n    }\n    if (!this.taskDefinition.defaultContainer) {\n      throw new Error('At least one essential container must be specified');\n    }\n    if (this.taskDefinition.defaultContainer.portMappings.length === 0) {\n      this.taskDefinition.defaultContainer.addPortMappings({\n        containerPort: 80,\n      });\n    }\n\n    this.service = this.createFargateService(props);\n    if (props.targetGroups) {\n      this.addPortMappingForTargets(this.taskDefinition.defaultContainer, props.targetGroups);\n      this.targetGroup = this.registerECSTargets(this.service, this.taskDefinition.defaultContainer, props.targetGroups);\n    } else {\n      this.targetGroup = this.listener.addTargets('ECS', {\n        targets: [this.service],\n        port: this.taskDefinition.defaultContainer.portMappings[0].containerPort,\n      });\n    }\n  }\n\n  private createFargateService(props: ApplicationMultipleTargetGroupsFargateServiceProps): FargateService {\n    const desiredCount = FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT) ? this.internalDesiredCount : this.desiredCount;\n\n    return new FargateService(this, 'Service', {\n      cluster: this.cluster,\n      desiredCount: desiredCount,\n      taskDefinition: this.taskDefinition,\n      assignPublicIp: this.assignPublicIp,\n      serviceName: props.serviceName,\n      healthCheckGracePeriod: props.healthCheckGracePeriod,\n      propagateTags: props.propagateTags,\n      enableECSManagedTags: props.enableECSManagedTags,\n      cloudMapOptions: props.cloudMapOptions,\n      platformVersion: props.platformVersion,\n    });\n  }\n}\n"],
  "mappings": "uPAAA,UAAA,QAAA,kBAAA,EAEA,OAAA,QAAA,eAAA,EACA,MAAA,QAAA,iBAAA,EAEA,kDAAA,QAAA,yDAAA,EAoFA,MAAa,qDAAsD,mDAAA,0CAA0C,CAyB3G,YAAY,MAAkB,GAAY,MAA4D,CAAA,EAAE,WACtG,MAAM,MAAO,GAAI,KAAK,EAItB,kHAFA,KAAK,eAAc,IAAG,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,GAE1C,MAAM,gBAAkB,MAAM,iBAChC,KAAM,IAAI,OAAM,kEAAkE,EAC7E,GAAI,MAAM,eACf,KAAK,eAAiB,MAAM,uBACnB,MAAM,iBAAkB,CACjC,KAAM,kBAAmB,MAAM,iBAC/B,KAAK,eAAiB,GAAI,WAAA,sBAAsB,KAAM,UAAW,CAC/D,eAAgB,MAAM,eACtB,IAAK,MAAM,IACX,cAAe,iBAAiB,cAChC,SAAU,iBAAiB,SAC3B,OAAQ,iBAAiB,OAC1B,EAED,KAAM,eAAa,IAAG,iBAAiB,iBAAa,MAAA,KAAA,OAAA,GAAI,MAClD,UAAY,KAAK,eAAe,aAAa,cAAe,CAChE,MAAO,iBAAiB,MACxB,QAAS,KAAK,UACd,YAAa,iBAAiB,YAC9B,QAAS,iBAAiB,QAC1B,aAAc,iBAAiB,aAChC,EACD,GAAI,iBAAiB,eACnB,SAAW,iBAAiB,kBAAiB,eAC3C,UAAU,gBAAgB,CACxB,cACD,MAIL,MAAM,IAAI,OAAM,kDAAkD,EAEpE,GAAI,CAAC,KAAK,eAAe,iBACvB,KAAM,IAAI,OAAM,oDAAoD,EAEtE,AAAI,KAAK,eAAe,iBAAiB,aAAa,SAAW,GAC/D,KAAK,eAAe,iBAAiB,gBAAgB,CACnD,cAAe,GAChB,EAGH,KAAK,QAAU,KAAK,qBAAqB,KAAK,EAC9C,AAAI,MAAM,aACR,MAAK,yBAAyB,KAAK,eAAe,iBAAkB,MAAM,YAAY,EACtF,KAAK,YAAc,KAAK,mBAAmB,KAAK,QAAS,KAAK,eAAe,iBAAkB,MAAM,YAAY,GAEjH,KAAK,YAAc,KAAK,SAAS,WAAW,MAAO,CACjD,QAAS,CAAC,KAAK,OAAO,EACtB,KAAM,KAAK,eAAe,iBAAiB,aAAa,GAAG,cAC5D,EAIG,qBAAqB,MAAyD,CACpF,KAAM,cAAe,OAAA,aAAa,GAAG,IAAI,EAAE,UAAU,MAAM,gCAAgC,EAAI,KAAK,qBAAuB,KAAK,aAEhI,MAAO,IAAI,WAAA,eAAe,KAAM,UAAW,CACzC,QAAS,KAAK,QACd,aACA,eAAgB,KAAK,eACrB,eAAgB,KAAK,eACrB,YAAa,MAAM,YACnB,uBAAwB,MAAM,uBAC9B,cAAe,MAAM,cACrB,qBAAsB,MAAM,qBAC5B,gBAAiB,MAAM,gBACvB,gBAAiB,MAAM,gBACxB,GAjGL,QAAA,8CAAA",
  "names": []
}
