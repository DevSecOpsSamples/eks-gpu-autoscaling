{
  "version": 3,
  "sources": ["scheduled-fargate-task.ts"],
  "sourcesContent": ["import { FargateTaskDefinition, FargatePlatformVersion } from '../../../aws-ecs';\nimport { EcsTask } from '../../../aws-events-targets';\nimport { Construct } from 'constructs';\nimport { ScheduledTaskBase, ScheduledTaskBaseProps, ScheduledTaskImageProps } from '../base/scheduled-task-base';\n\n/**\n * The properties for the ScheduledFargateTask task.\n */\nexport interface ScheduledFargateTaskProps extends ScheduledTaskBaseProps {\n  /**\n   * The properties to define if using an existing TaskDefinition in this construct.\n   * ScheduledFargateTaskDefinitionOptions or ScheduledFargateTaskImageOptions must be defined, but not both.\n   *\n   * @default none\n   */\n  readonly scheduledFargateTaskDefinitionOptions?: ScheduledFargateTaskDefinitionOptions;\n\n  /**\n   * The properties to define if the construct is to create a TaskDefinition.\n   * ScheduledFargateTaskDefinitionOptions or ScheduledFargateTaskImageOptions must be defined, but not both.\n   *\n   * @default none\n   */\n  readonly scheduledFargateTaskImageOptions?: ScheduledFargateTaskImageOptions;\n\n  /**\n   * The platform version on which to run your service.\n   *\n   * If one is not specified, the LATEST platform version is used by default. For more information, see\n   * [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\n   * in the Amazon Elastic Container Service Developer Guide.\n   *\n   * @default Latest\n   */\n  readonly platformVersion?: FargatePlatformVersion;\n}\n\n/**\n * The properties for the ScheduledFargateTask using an image.\n */\nexport interface ScheduledFargateTaskImageOptions extends ScheduledTaskImageProps {\n  /**\n   * The number of cpu units used by the task.\n   *\n   * Valid values, which determines your range of valid values for the memory parameter:\n   *\n   * 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n   *\n   * 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n   *\n   * 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n   *\n   * 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n   *\n   * 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n   *\n   * This default is set in the underlying FargateTaskDefinition construct.\n   *\n   * @default 256\n   */\n  readonly cpu?: number;\n\n  /**\n   * The hard limit (in MiB) of memory to present to the container.\n   *\n   * If your container attempts to exceed the allocated memory, the container\n   * is terminated.\n   *\n   * @default 512\n   */\n  readonly memoryLimitMiB?: number;\n}\n\n/**\n * The properties for the ScheduledFargateTask using a task definition.\n */\nexport interface ScheduledFargateTaskDefinitionOptions {\n  /**\n   * The task definition to use for tasks in the service. Image or taskDefinition must be specified, but not both.\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - none\n   */\n  readonly taskDefinition: FargateTaskDefinition;\n}\n\n/**\n * A scheduled Fargate task that will be initiated off of CloudWatch Events.\n */\nexport class ScheduledFargateTask extends ScheduledTaskBase {\n  /**\n   * The Fargate task definition in this construct.\n   */\n  public readonly taskDefinition: FargateTaskDefinition;\n\n  /**\n   * The ECS task in this construct.\n   */\n  public readonly task: EcsTask;\n\n  /**\n   * Constructs a new instance of the ScheduledFargateTask class.\n   */\n  constructor(scope: Construct, id: string, props: ScheduledFargateTaskProps) {\n    super(scope, id, props);\n\n    if (props.scheduledFargateTaskDefinitionOptions && props.scheduledFargateTaskImageOptions) {\n      throw new Error('You must specify either a scheduledFargateTaskDefinitionOptions or scheduledFargateTaskOptions, not both.');\n    } else if (props.scheduledFargateTaskDefinitionOptions) {\n      this.taskDefinition = props.scheduledFargateTaskDefinitionOptions.taskDefinition;\n    } else if (props.scheduledFargateTaskImageOptions) {\n      const taskImageOptions = props.scheduledFargateTaskImageOptions;\n      this.taskDefinition = new FargateTaskDefinition(this, 'ScheduledTaskDef', {\n        memoryLimitMiB: taskImageOptions.memoryLimitMiB || 512,\n        cpu: taskImageOptions.cpu || 256,\n      });\n      this.taskDefinition.addContainer('ScheduledContainer', {\n        image: taskImageOptions.image,\n        command: taskImageOptions.command,\n        environment: taskImageOptions.environment,\n        secrets: taskImageOptions.secrets,\n        logging: taskImageOptions.logDriver ?? this.createAWSLogDriver(this.node.id),\n      });\n    } else {\n      throw new Error('You must specify one of: taskDefinition or image');\n    }\n\n    // Use the EcsTask as the target of the EventRule\n    this.task = new EcsTask( {\n      cluster: this.cluster,\n      taskDefinition: this.taskDefinition,\n      taskCount: this.desiredTaskCount,\n      subnetSelection: this.subnetSelection,\n      platformVersion: props.platformVersion,\n      securityGroups: props.securityGroups,\n    });\n\n    this.addTaskAsTarget(this.task);\n  }\n}\n"],
  "mappings": "8NAAA,UAAA,QAAA,kBAAA,EACA,qBAAA,QAAA,6BAAA,EAEA,sBAAA,QAAA,6BAAA,EAuFA,MAAa,4BAA6B,uBAAA,iBAAiB,CAczD,YAAY,MAAkB,GAAY,MAAgC,QACxE,MAAM,MAAO,GAAI,KAAK,EAEtB,yFAAI,MAAM,uCAAyC,MAAM,iCACvD,KAAM,IAAI,OAAM,2GAA2G,EACtH,GAAI,MAAM,sCACf,KAAK,eAAiB,MAAM,sCAAsC,uBACzD,MAAM,iCAAkC,CACjD,KAAM,kBAAmB,MAAM,iCAC/B,KAAK,eAAiB,GAAI,WAAA,sBAAsB,KAAM,mBAAoB,CACxE,eAAgB,iBAAiB,gBAAkB,IACnD,IAAK,iBAAiB,KAAO,IAC9B,EACD,KAAK,eAAe,aAAa,qBAAsB,CACrD,MAAO,iBAAiB,MACxB,QAAS,iBAAiB,QAC1B,YAAa,iBAAiB,YAC9B,QAAS,iBAAiB,QAC1B,QAAO,IAAE,iBAAiB,aAAS,MAAA,KAAA,OAAA,GAAI,KAAK,mBAAmB,KAAK,KAAK,EAAE,EAC5E,MAED,MAAM,IAAI,OAAM,kDAAkD,EAIpE,KAAK,KAAO,GAAI,sBAAA,QAAS,CACvB,QAAS,KAAK,QACd,eAAgB,KAAK,eACrB,UAAW,KAAK,iBAChB,gBAAiB,KAAK,gBACtB,gBAAiB,MAAM,gBACvB,eAAgB,MAAM,eACvB,EAED,KAAK,gBAAgB,KAAK,IAAI,GAhDlC,QAAA,qBAAA",
  "names": []
}
