{
  "version": 3,
  "sources": ["queue-processing-fargate-service.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport { FargatePlatformVersion, FargateService, FargateTaskDefinition, HealthCheck } from '../../../aws-ecs';\nimport { FeatureFlags } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { QueueProcessingServiceBase, QueueProcessingServiceBaseProps } from '../base/queue-processing-service-base';\n\n/**\n * The properties for the QueueProcessingFargateService service.\n */\nexport interface QueueProcessingFargateServiceProps extends QueueProcessingServiceBaseProps {\n  /**\n   * The number of cpu units used by the task.\n   *\n   * Valid values, which determines your range of valid values for the memory parameter:\n   *\n   * 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n   *\n   * 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n   *\n   * 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n   *\n   * 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n   *\n   * 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n   *\n   * This default is set in the underlying FargateTaskDefinition construct.\n   *\n   * @default 256\n   */\n  readonly cpu?: number;\n\n  /**\n   * The amount (in MiB) of memory used by the task.\n   *\n   * This field is required and you must use one of the following values, which determines your range of valid values\n   * for the cpu parameter:\n   *\n   * 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)\n   *\n   * 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)\n   *\n   * 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)\n   *\n   * Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)\n   *\n   * Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)\n   *\n   * This default is set in the underlying FargateTaskDefinition construct.\n   *\n   * @default 512\n   */\n  readonly memoryLimitMiB?: number;\n\n  /**\n   * The platform version on which to run your service.\n   *\n   * If one is not specified, the LATEST platform version is used by default. For more information, see\n   * [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\n   * in the Amazon Elastic Container Service Developer Guide.\n   *\n   * @default Latest\n   */\n  readonly platformVersion?: FargatePlatformVersion;\n\n  /**\n   * Optional name for the container added\n   *\n   * @default - QueueProcessingContainer\n   */\n  readonly containerName?: string;\n\n  /**\n   * The health check command and associated configuration parameters for the container.\n   *\n   * @default - Health check configuration from container.\n   */\n  readonly healthCheck?: HealthCheck;\n\n  /**\n   * The subnets to associate with the service.\n   *\n   * @default - Public subnets if `assignPublicIp` is set, otherwise the first available one of Private, Isolated, Public, in that order.\n   */\n  readonly taskSubnets?: ec2.SubnetSelection;\n\n  /**\n   * The security groups to associate with the service. If you do not specify a security group, a new security group is created.\n   *\n   * @default - A new security group is created.\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n  /**\n   * Specifies whether the task's elastic network interface receives a public IP address.\n   *\n   * If true, each task will receive a public IP address.\n   *\n   * @default false\n   */\n  readonly assignPublicIp?: boolean;\n}\n\n/**\n * Class to create a queue processing Fargate service\n */\nexport class QueueProcessingFargateService extends QueueProcessingServiceBase {\n  /**\n   * The Fargate service in this construct.\n   */\n  public readonly service: FargateService;\n  /**\n   * The Fargate task definition in this construct.\n   */\n  public readonly taskDefinition: FargateTaskDefinition;\n\n  /**\n   * Constructs a new instance of the QueueProcessingFargateService class.\n   */\n  constructor(scope: Construct, id: string, props: QueueProcessingFargateServiceProps) {\n    super(scope, id, props);\n\n    // Create a Task Definition for the container to start\n    this.taskDefinition = new FargateTaskDefinition(this, 'QueueProcessingTaskDef', {\n      memoryLimitMiB: props.memoryLimitMiB || 512,\n      cpu: props.cpu || 256,\n      family: props.family,\n    });\n\n    const containerName = props.containerName ?? 'QueueProcessingContainer';\n\n    this.taskDefinition.addContainer(containerName, {\n      image: props.image,\n      command: props.command,\n      environment: this.environment,\n      secrets: this.secrets,\n      logging: this.logDriver,\n      healthCheck: props.healthCheck,\n    });\n\n    // The desiredCount should be removed from the fargate service when the feature flag is removed.\n    const desiredCount = FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT) ? undefined : this.desiredCount;\n\n    // Create a Fargate service with the previously defined Task Definition and configure\n    // autoscaling based on cpu utilization and number of messages visible in the SQS queue.\n    this.service = new FargateService(this, 'QueueProcessingFargateService', {\n      cluster: this.cluster,\n      desiredCount: desiredCount,\n      taskDefinition: this.taskDefinition,\n      serviceName: props.serviceName,\n      minHealthyPercent: props.minHealthyPercent,\n      maxHealthyPercent: props.maxHealthyPercent,\n      propagateTags: props.propagateTags,\n      enableECSManagedTags: props.enableECSManagedTags,\n      platformVersion: props.platformVersion,\n      deploymentController: props.deploymentController,\n      securityGroups: props.securityGroups,\n      vpcSubnets: props.taskSubnets,\n      assignPublicIp: props.assignPublicIp,\n      circuitBreaker: props.circuitBreaker,\n      capacityProviderStrategies: props.capacityProviderStrategies,\n    });\n\n    this.configureAutoscalingForService(this.service);\n    this.grantPermissionsToService(this.service);\n  }\n}\n"],
  "mappings": "uOACA,UAAA,QAAA,kBAAA,EACA,OAAA,QAAA,eAAA,EACA,MAAA,QAAA,iBAAA,EAEA,gCAAA,QAAA,uCAAA,EAqGA,MAAa,qCAAsC,iCAAA,0BAA0B,CAa3E,YAAY,MAAkB,GAAY,MAAyC,QACjF,MAAM,MAAO,GAAI,KAAK,iGAGtB,KAAK,eAAiB,GAAI,WAAA,sBAAsB,KAAM,yBAA0B,CAC9E,eAAgB,MAAM,gBAAkB,IACxC,IAAK,MAAM,KAAO,IAClB,OAAQ,MAAM,OACf,EAED,KAAM,eAAa,IAAG,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,2BAE7C,KAAK,eAAe,aAAa,cAAe,CAC9C,MAAO,MAAM,MACb,QAAS,MAAM,QACf,YAAa,KAAK,YAClB,QAAS,KAAK,QACd,QAAS,KAAK,UACd,YAAa,MAAM,YACpB,EAGD,KAAM,cAAe,OAAA,aAAa,GAAG,IAAI,EAAE,UAAU,MAAM,gCAAgC,EAAI,OAAY,KAAK,aAIhH,KAAK,QAAU,GAAI,WAAA,eAAe,KAAM,gCAAiC,CACvE,QAAS,KAAK,QACd,aACA,eAAgB,KAAK,eACrB,YAAa,MAAM,YACnB,kBAAmB,MAAM,kBACzB,kBAAmB,MAAM,kBACzB,cAAe,MAAM,cACrB,qBAAsB,MAAM,qBAC5B,gBAAiB,MAAM,gBACvB,qBAAsB,MAAM,qBAC5B,eAAgB,MAAM,eACtB,WAAY,MAAM,YAClB,eAAgB,MAAM,eACtB,eAAgB,MAAM,eACtB,2BAA4B,MAAM,2BACnC,EAED,KAAK,+BAA+B,KAAK,OAAO,EAChD,KAAK,0BAA0B,KAAK,OAAO,GA1D/C,QAAA,8BAAA",
  "names": []
}
