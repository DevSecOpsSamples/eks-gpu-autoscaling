"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.QueueProcessingServiceBase=void 0;const jsiiDeprecationWarnings=require("../../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),aws_ecs_1=require("../../../aws-ecs"),aws_sqs_1=require("../../../aws-sqs"),core_1=require("../../../core"),cxapi=require("../../../cx-api"),constructs_1=require("constructs");class QueueProcessingServiceBase extends constructs_1.Construct{constructor(scope,id,props){var _b,_c,_d,_e,_f,_g,_h;super(scope,id);if(jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_patterns_QueueProcessingServiceBaseProps(props),props.cluster&&props.vpc)throw new Error("You can only specify either vpc or cluster. Alternatively, you can leave both blank");this.cluster=props.cluster||this.getDefaultCluster(this,props.vpc),props.queue?this.sqsQueue=props.queue:(this.deadLetterQueue=new aws_sqs_1.Queue(this,"EcsProcessingDeadLetterQueue",{retentionPeriod:props.retentionPeriod||core_1.Duration.days(14)}),this.sqsQueue=new aws_sqs_1.Queue(this,"EcsProcessingQueue",{visibilityTimeout:props.visibilityTimeout,deadLetterQueue:{queue:this.deadLetterQueue,maxReceiveCount:props.maxReceiveCount||3}}),new core_1.CfnOutput(this,"SQSDeadLetterQueue",{value:this.deadLetterQueue.queueName}),new core_1.CfnOutput(this,"SQSDeadLetterQueueArn",{value:this.deadLetterQueue.queueArn}));const defaultScalingSteps=[{upper:0,change:-1},{lower:100,change:1},{lower:500,change:5}];this.scalingSteps=(_b=props.scalingSteps)!==null&&_b!==void 0?_b:defaultScalingSteps;const enableLogging=(_c=props.enableLogging)!==null&&_c!==void 0?_c:!0;if(this.logDriver=(_d=props.logDriver)!==null&&_d!==void 0?_d:enableLogging?this.createAWSLogDriver(this.node.id):void 0,this.environment={...props.environment||{},QUEUE_NAME:this.sqsQueue.queueName},this.secrets=props.secrets,this.desiredCount=(_e=props.desiredTaskCount)!==null&&_e!==void 0?_e:1,core_1.FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT)?props.desiredTaskCount!=null?(this.minCapacity=(_g=props.minScalingCapacity)!==null&&_g!==void 0?_g:this.desiredCount,this.maxCapacity=props.maxScalingCapacity||2*this.desiredCount):(this.minCapacity=(_h=props.minScalingCapacity)!==null&&_h!==void 0?_h:1,this.maxCapacity=props.maxScalingCapacity||2):(this.minCapacity=(_f=props.minScalingCapacity)!==null&&_f!==void 0?_f:this.desiredCount,this.maxCapacity=props.maxScalingCapacity||2*this.desiredCount),!this.desiredCount&&!this.maxCapacity)throw new Error("maxScalingCapacity must be set and greater than 0 if desiredCount is 0");new core_1.CfnOutput(this,"SQSQueue",{value:this.sqsQueue.queueName}),new core_1.CfnOutput(this,"SQSQueueArn",{value:this.sqsQueue.queueArn})}configureAutoscalingForService(service){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_BaseService(service);const scalingTarget=service.autoScaleTaskCount({maxCapacity:this.maxCapacity,minCapacity:this.minCapacity});scalingTarget.scaleOnCpuUtilization("CpuScaling",{targetUtilizationPercent:50}),scalingTarget.scaleOnMetric("QueueMessagesVisibleScaling",{metric:this.sqsQueue.metricApproximateNumberOfMessagesVisible(),scalingSteps:this.scalingSteps})}grantPermissionsToService(service){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_BaseService(service),this.sqsQueue.grantConsumeMessages(service.taskDefinition.taskRole)}getDefaultCluster(scope,vpc){jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_IVpc(vpc);const DEFAULT_CLUSTER_ID=`EcsDefaultClusterMnL3mNNYN${vpc?vpc.node.id:""}`,stack=core_1.Stack.of(scope);return stack.node.tryFindChild(DEFAULT_CLUSTER_ID)||new aws_ecs_1.Cluster(stack,DEFAULT_CLUSTER_ID,{vpc})}createAWSLogDriver(prefix){return new aws_ecs_1.AwsLogDriver({streamPrefix:prefix})}}exports.QueueProcessingServiceBase=QueueProcessingServiceBase,_a=JSII_RTTI_SYMBOL_1,QueueProcessingServiceBase[_a]={fqn:"aws-cdk-lib.aws_ecs_patterns.QueueProcessingServiceBase",version:"2.20.0"};
//# sourceMappingURL=queue-processing-service-base.js.map
