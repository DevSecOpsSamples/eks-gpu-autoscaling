{
  "version": 3,
  "sources": ["application-multiple-target-groups-service-base.ts"],
  "sourcesContent": ["import { Certificate, CertificateValidation, ICertificate } from '../../../aws-certificatemanager';\nimport { IVpc } from '../../../aws-ec2';\nimport {\n  AwsLogDriver, BaseService, CloudMapOptions, Cluster, ContainerDefinition, ContainerImage, ICluster, LogDriver, PropagatedTagSource,\n  Protocol, Secret,\n} from '../../../aws-ecs';\nimport {\n  ApplicationListener,\n  ApplicationLoadBalancer,\n  ApplicationProtocol,\n  ApplicationTargetGroup, ListenerCertificate,\n  ListenerCondition,\n  SslPolicy,\n} from '../../../aws-elasticloadbalancingv2';\nimport { IRole } from '../../../aws-iam';\nimport { ARecord, IHostedZone, RecordTarget } from '../../../aws-route53';\nimport { LoadBalancerTarget } from '../../../aws-route53-targets';\nimport { CfnOutput, Duration, Stack } from '../../../core';\nimport { Construct } from 'constructs';\n\n/**\n * The properties for the base ApplicationMultipleTargetGroupsEc2Service or ApplicationMultipleTargetGroupsFargateService service.\n */\nexport interface ApplicationMultipleTargetGroupsServiceBaseProps {\n  /**\n   * The name of the cluster that hosts the service.\n   *\n   * If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.\n   *\n   * @default - create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.\n   */\n  readonly cluster?: ICluster;\n\n  /**\n   * The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed.\n   *\n   * If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.\n   *\n   * @default - uses the VPC defined in the cluster or creates a new VPC.\n   */\n  readonly vpc?: IVpc;\n\n  /**\n   * The properties required to create a new task definition. Only one of TaskDefinition or TaskImageOptions must be specified.\n   *\n   * @default none\n   */\n  readonly taskImageOptions?: ApplicationLoadBalancedTaskImageProps;\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   *\n   * @default - If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is 1;\n   * if true, the default is 1 for all new services and uses the existing services desired count\n   * when updating an existing service.\n   */\n  readonly desiredCount?: number;\n\n  /**\n   * The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy\n   * Elastic Load Balancing target health checks after a task has first started.\n   *\n   * @default - defaults to 60 seconds if at least one load balancer is in-use and it is not already set\n   */\n  readonly healthCheckGracePeriod?: Duration;\n\n  /**\n   * The name of the service.\n   *\n   * @default - CloudFormation-generated name.\n   */\n  readonly serviceName?: string;\n\n  /**\n   * The application load balancer that will serve traffic to the service.\n   *\n   * @default - a new load balancer with a listener will be created.\n   */\n  readonly loadBalancers?: ApplicationLoadBalancerProps[];\n\n  /**\n   * Specifies whether to propagate the tags from the task definition or the service to the tasks in the service.\n   * Tags can only be propagated to the tasks within the service during service creation.\n   *\n   * @default - none\n   */\n  readonly propagateTags?: PropagatedTagSource;\n\n  /**\n   * Specifies whether to enable Amazon ECS managed tags for the tasks within the service. For more information, see\n   * [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)\n   *\n   * @default false\n   */\n  readonly enableECSManagedTags?: boolean;\n\n  /**\n   * The options for configuring an Amazon ECS service to use service discovery.\n   *\n   * @default - AWS Cloud Map service discovery is not enabled.\n   */\n  readonly cloudMapOptions?: CloudMapOptions;\n\n  /**\n   * Properties to specify ALB target groups.\n   *\n   * @default - default portMapping registered as target group and attached to the first defined listener\n   */\n  readonly targetGroups?: ApplicationTargetProps[];\n}\n\n/**\n * Options for configuring a new container.\n */\nexport interface ApplicationLoadBalancedTaskImageProps {\n  /**\n   * The image used to start a container. Image or taskDefinition must be specified, not both.\n   *\n   * @default - none\n   */\n  readonly image: ContainerImage;\n\n  /**\n   * The environment variables to pass to the container.\n   *\n   * @default - No environment variables.\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * The secrets to expose to the container as an environment variable.\n   *\n   * @default - No secret environment variables.\n   */\n  readonly secrets?: { [key: string]: Secret };\n\n  /**\n   * Flag to indicate whether to enable logging.\n   *\n   * @default true\n   */\n  readonly enableLogging?: boolean;\n\n  /**\n   * The log driver to use.\n   *\n   * @default - AwsLogDriver if enableLogging is true\n   */\n  readonly logDriver?: LogDriver;\n\n  /**\n   * The name of the task execution IAM role that grants the Amazon ECS container agent permission to call AWS APIs on your behalf.\n   *\n   * @default - No value\n   */\n  readonly executionRole?: IRole;\n\n  /**\n   * The name of the task IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   *\n   * @default - A task role is automatically created for you.\n   */\n  readonly taskRole?: IRole;\n\n  /**\n   * The container name value to be specified in the task definition.\n   *\n   * @default - web\n   */\n  readonly containerName?: string;\n\n  /**\n   * A list of port numbers on the container that is bound to the user-specified or automatically assigned host port.\n   *\n   * If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\n   * If you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\n   * your container automatically receives a host port in the ephemeral port range.\n   *\n   * Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n   *\n   * For more information, see\n   * [hostPort](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PortMapping.html#ECS-Type-PortMapping-hostPort).\n   *\n   * @default - [80]\n   */\n  readonly containerPorts?: number[];\n\n  /**\n   * The name of a family that this task definition is registered to. A family groups multiple versions of a task definition.\n   *\n   * @default - Automatically generated name.\n   */\n  readonly family?: string;\n\n  /**\n   * A key/value map of labels to add to the container.\n   *\n   * @default - No labels.\n   */\n  readonly dockerLabels?: { [key: string]: string };\n}\n\n/**\n * Properties to define an application target group.\n */\nexport interface ApplicationTargetProps {\n  /**\n   * The port number of the container. Only applicable when using application/network load balancers.\n   */\n  readonly containerPort: number;\n\n  /**\n   * The protocol used for the port mapping. Only applicable when using application load balancers.\n   *\n   * @default ecs.Protocol.TCP\n   */\n  readonly protocol?: Protocol;\n\n  /**\n   * Name of the listener the target group attached to.\n   *\n   * @default - default listener (first added listener)\n   */\n  readonly listener?: string;\n\n  /**\n   * Priority of this target group.\n   *\n   * The rule with the lowest priority will be used for every request.\n   * If priority is not given, these target groups will be added as\n   * defaults, and must not have conditions.\n   *\n   * Priorities must be unique.\n   *\n   * @default Target groups are used as defaults\n   */\n  readonly priority?: number;\n\n  /**\n   * Rule applies if the requested host matches the indicated host.\n   *\n   * May contain up to three '*' wildcards.\n   *\n   * Requires that priority is set.\n   *\n   * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#host-conditions\n   *\n   * @default No host condition\n   */\n  readonly hostHeader?: string;\n\n  /**\n   * Rule applies if the requested path matches the given path pattern.\n   *\n   * May contain up to three '*' wildcards.\n   *\n   * Requires that priority is set.\n   *\n   * @see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#path-conditions\n   *\n   * @default No path condition\n   */\n  readonly pathPattern?: string;\n}\n\n/**\n * Properties to define an application load balancer.\n */\nexport interface ApplicationLoadBalancerProps {\n  /**\n   * Name of the load balancer.\n   */\n  readonly name: string;\n\n  /**\n   * Listeners (at least one listener) attached to this load balancer.\n   */\n  readonly listeners: ApplicationListenerProps[];\n\n  /**\n   * Determines whether the Load Balancer will be internet-facing.\n   *\n   * @default true\n   */\n  readonly publicLoadBalancer?: boolean;\n\n  /**\n   * The domain name for the service, e.g. \"api.example.com.\"\n   *\n   * @default - No domain name.\n   */\n  readonly domainName?: string;\n\n  /**\n   * The Route53 hosted zone for the domain, e.g. \"example.com.\"\n   *\n   * @default - No Route53 hosted domain zone.\n   */\n  readonly domainZone?: IHostedZone;\n}\n\n/**\n * Properties to define an application listener.\n */\nexport interface ApplicationListenerProps {\n  /**\n   * Name of the listener.\n   */\n  readonly name: string;\n\n  /**\n   * The protocol for connections from clients to the load balancer.\n   * The load balancer port is determined from the protocol (port 80 for\n   * HTTP, port 443 for HTTPS).  A domain name and zone must be also be\n   * specified if using HTTPS.\n   *\n   * @default ApplicationProtocol.HTTP. If a certificate is specified, the protocol will be\n   * set by default to ApplicationProtocol.HTTPS.\n   */\n  readonly protocol?: ApplicationProtocol;\n\n  /**\n   * The port on which the listener listens for requests.\n   *\n   * @default - Determined from protocol if known.\n   */\n  readonly port?: number;\n\n  /**\n   * Certificate Manager certificate to associate with the load balancer.\n   * Setting this option will set the load balancer protocol to HTTPS.\n   *\n   * @default - No certificate associated with the load balancer, if using\n   * the HTTP protocol. For HTTPS, a DNS-validated certificate will be\n   * created for the load balancer's specified domain name.\n   */\n  readonly certificate?: ICertificate;\n\n  /**\n   * The security policy that defines which ciphers and protocols are supported by the ALB Listener.\n   *\n   * @default - The recommended elastic load balancing security policy\n   */\n  readonly sslPolicy?: SslPolicy;\n}\n\n/**\n * The base class for ApplicationMultipleTargetGroupsEc2Service and ApplicationMultipleTargetGroupsFargateService classes.\n */\nexport abstract class ApplicationMultipleTargetGroupsServiceBase extends Construct {\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * @deprecated - Use `internalDesiredCount` instead.\n   */\n  public readonly desiredCount: number;\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * The default is 1 for all new services and uses the existing services desired count\n   * when updating an existing service, if one is not provided.\n   */\n  public readonly internalDesiredCount?: number;\n\n  /**\n   * The default Application Load Balancer for the service (first added load balancer).\n   */\n  public readonly loadBalancer: ApplicationLoadBalancer;\n\n  /**\n   * The default listener for the service (first added listener).\n   */\n  public readonly listener: ApplicationListener;\n\n  /**\n   * The cluster that hosts the service.\n   */\n  public readonly cluster: ICluster;\n\n  protected logDriver?: LogDriver;\n  protected listeners = new Array<ApplicationListener>();\n  protected targetGroups = new Array<ApplicationTargetGroup>();\n\n  private loadBalancers = new Array<ApplicationLoadBalancer>();\n\n  /**\n   * Constructs a new instance of the ApplicationMultipleTargetGroupsServiceBase class.\n   */\n  constructor(scope: Construct, id: string, props: ApplicationMultipleTargetGroupsServiceBaseProps = {}) {\n    super(scope, id);\n\n    this.validateInput(props);\n\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n\n    this.desiredCount = props.desiredCount || 1;\n    this.internalDesiredCount = props.desiredCount;\n\n    if (props.taskImageOptions) {\n      this.logDriver = this.createLogDriver(props.taskImageOptions.enableLogging, props.taskImageOptions.logDriver);\n    }\n\n    if (props.loadBalancers) {\n      for (const lbProps of props.loadBalancers) {\n        const lb = this.createLoadBalancer(lbProps.name, lbProps.publicLoadBalancer);\n        this.loadBalancers.push(lb);\n        const protocolType = new Set<ApplicationProtocol>();\n        for (const listenerProps of lbProps.listeners) {\n          const protocol = this.createListenerProtocol(listenerProps.protocol, listenerProps.certificate);\n          if (listenerProps.certificate !== undefined && protocol !== undefined && protocol !== ApplicationProtocol.HTTPS) {\n            throw new Error('The HTTPS protocol must be used when a certificate is given');\n          }\n          protocolType.add(protocol);\n          const listener = this.configListener(protocol, {\n            certificate: listenerProps.certificate,\n            domainName: lbProps.domainName,\n            domainZone: lbProps.domainZone,\n            listenerName: listenerProps.name,\n            loadBalancer: lb,\n            port: listenerProps.port,\n            sslPolicy: listenerProps.sslPolicy,\n          });\n          this.listeners.push(listener);\n        }\n        const domainName = this.createDomainName(lb, lbProps.domainName, lbProps.domainZone);\n        new CfnOutput(this, `LoadBalancerDNS${lb.node.id}`, { value: lb.loadBalancerDnsName });\n        for (const protocol of protocolType) {\n          new CfnOutput(this, `ServiceURL${lb.node.id}${protocol.toLowerCase()}`, { value: protocol.toLowerCase() + '://' + domainName });\n        }\n      }\n      // set up default load balancer and listener.\n      this.loadBalancer = this.loadBalancers[0];\n      this.listener = this.listeners[0];\n    } else {\n      this.loadBalancer = this.createLoadBalancer('LB');\n      const protocol = this.createListenerProtocol();\n      this.listener = this.configListener(protocol, {\n        listenerName: 'PublicListener',\n        loadBalancer: this.loadBalancer,\n      });\n      const domainName = this.createDomainName(this.loadBalancer);\n\n      new CfnOutput(this, 'LoadBalancerDNS', { value: this.loadBalancer.loadBalancerDnsName });\n      new CfnOutput(this, 'ServiceURL', { value: protocol.toLowerCase() + '://' + domainName });\n    }\n  }\n\n  /**\n   * Returns the default cluster.\n   */\n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs.\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n  protected createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n\n  protected findListener(name?: string): ApplicationListener {\n    if (!name) {\n      return this.listener;\n    }\n    for (const listener of this.listeners) {\n      if (listener.node.id === name) {\n        return listener;\n      }\n    }\n    throw new Error(`Listener ${name} is not defined. Did you define listener with name ${name}?`);\n  }\n\n  protected registerECSTargets(service: BaseService, container: ContainerDefinition, targets: ApplicationTargetProps[]): ApplicationTargetGroup {\n    for (const targetProps of targets) {\n      const conditions: Array<ListenerCondition> = [];\n      if (targetProps.hostHeader) {\n        conditions.push(ListenerCondition.hostHeaders([targetProps.hostHeader]));\n      }\n      if (targetProps.pathPattern) {\n        conditions.push(ListenerCondition.pathPatterns([targetProps.pathPattern]));\n      }\n\n      const targetGroup = this.findListener(targetProps.listener).addTargets(`ECSTargetGroup${container.containerName}${targetProps.containerPort}`, {\n        port: 80,\n        targets: [\n          service.loadBalancerTarget({\n            containerName: container.containerName,\n            containerPort: targetProps.containerPort,\n            protocol: targetProps.protocol,\n          }),\n        ],\n        conditions,\n        priority: targetProps.priority,\n      });\n      this.targetGroups.push(targetGroup);\n    }\n    if (this.targetGroups.length === 0) {\n      throw new Error('At least one target group should be specified.');\n    }\n    return this.targetGroups[0];\n  }\n\n  protected addPortMappingForTargets(container: ContainerDefinition, targets: ApplicationTargetProps[]) {\n    for (const target of targets) {\n      if (!container.findPortMapping(target.containerPort, target.protocol || Protocol.TCP)) {\n        container.addPortMappings({\n          containerPort: target.containerPort,\n          protocol: target.protocol,\n        });\n      }\n    }\n  }\n\n  /**\n   * Create log driver if logging is enabled.\n   */\n  private createLogDriver(enableLoggingProp?: boolean, logDriverProp?: LogDriver): LogDriver | undefined {\n    const enableLogging = enableLoggingProp ?? true;\n    const logDriver = logDriverProp ?? (enableLogging ? this.createAWSLogDriver(this.node.id) : undefined);\n    return logDriver;\n  }\n\n  private configListener(protocol: ApplicationProtocol, props: ListenerConfig): ApplicationListener {\n    const listener = this.createListener(props, protocol);\n    let certificate;\n    if (protocol === ApplicationProtocol.HTTPS) {\n      certificate = this.createListenerCertificate(props.listenerName, props.certificate, props.domainName, props.domainZone);\n    } else {\n      certificate = undefined;\n    }\n    if (certificate !== undefined) {\n      listener.addCertificates(`Arns${props.listenerName}`, [ListenerCertificate.fromArn(certificate.certificateArn)]);\n    }\n\n    return listener;\n  }\n\n  private validateInput(props: ApplicationMultipleTargetGroupsServiceBaseProps) {\n    if (props.cluster && props.vpc) {\n      throw new Error('You can only specify either vpc or cluster. Alternatively, you can leave both blank');\n    }\n\n    if (props.desiredCount !== undefined && props.desiredCount < 1) {\n      throw new Error('You must specify a desiredCount greater than 0');\n    }\n\n    if (props.loadBalancers) {\n      if (props.loadBalancers.length === 0) {\n        throw new Error('At least one load balancer must be specified');\n      }\n      for (const lbProps of props.loadBalancers) {\n        if (lbProps.listeners.length === 0) {\n          throw new Error('At least one listener must be specified');\n        }\n      }\n    }\n  }\n\n  private createLoadBalancer(name: string, publicLoadBalancer?: boolean): ApplicationLoadBalancer {\n    const internetFacing = publicLoadBalancer ?? true;\n    const lbProps = {\n      vpc: this.cluster.vpc,\n      internetFacing,\n    };\n\n    return new ApplicationLoadBalancer(this, name, lbProps);\n  }\n\n  private createListenerProtocol(listenerProtocol?: ApplicationProtocol, certificate?: ICertificate): ApplicationProtocol {\n    return listenerProtocol ?? (certificate ? ApplicationProtocol.HTTPS : ApplicationProtocol.HTTP);\n  }\n\n  private createListenerCertificate(listenerName: string, certificate?: ICertificate, domainName?: string, domainZone?: IHostedZone): ICertificate {\n    if (typeof domainName === 'undefined' || typeof domainZone === 'undefined') {\n      throw new Error('A domain name and zone is required when using the HTTPS protocol');\n    }\n\n    if (certificate !== undefined) {\n      return certificate;\n    } else {\n      return new Certificate(this, `Certificate${listenerName}`, {\n        domainName,\n        validation: CertificateValidation.fromDns(domainZone),\n      });\n    }\n  }\n\n  private createListener({ loadBalancer, listenerName, port, sslPolicy }: ListenerConfig, protocol?: ApplicationProtocol): ApplicationListener {\n    return loadBalancer.addListener(listenerName, {\n      protocol,\n      open: true,\n      port,\n      sslPolicy,\n    });\n  }\n\n  private createDomainName(loadBalancer: ApplicationLoadBalancer, name?: string, zone?: IHostedZone): string {\n    let domainName = loadBalancer.loadBalancerDnsName;\n    if (typeof name !== 'undefined') {\n      if (typeof zone === 'undefined') {\n        throw new Error('A Route53 hosted domain zone name is required to configure the specified domain name');\n      }\n\n      const record = new ARecord(this, `DNS${loadBalancer.node.id}`, {\n        zone,\n        recordName: name,\n        target: RecordTarget.fromAlias(new LoadBalancerTarget(loadBalancer)),\n      });\n\n      domainName = record.domainName;\n    }\n    return domainName;\n  }\n}\n\n/**\n * Properties to configure a listener.\n */\ninterface ListenerConfig {\n  /**\n   * Name of the listener\n   */\n  readonly listenerName: string;\n\n  /**\n   * Load balancer the listener attached to\n   */\n  readonly loadBalancer: ApplicationLoadBalancer;\n\n  /**\n   * The port on which the listener listens for requests.\n   *\n   * @default - Determined from protocol if known.\n   */\n  readonly port?: number;\n\n  /**\n   * Certificate for the listener\n   *\n   * @default none\n   */\n  readonly certificate?: ICertificate;\n\n  /**\n   * SSL Policy for the listener\n   *\n   * @default null\n   */\n  readonly sslPolicy?: SslPolicy;\n\n  /**\n   * The domain name for the service, e.g. \"api.example.com.\"\n   *\n   * @default - No domain name.\n   */\n  readonly domainName?: string;\n\n  /**\n   * The Route53 hosted zone for the domain, e.g. \"example.com.\"\n   *\n   * @default - No Route53 hosted domain zone.\n   */\n  readonly domainZone?: IHostedZone;\n}\n"],
  "mappings": "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",
  "names": []
}
