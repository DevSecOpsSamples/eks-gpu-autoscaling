{
  "version": 3,
  "sources": ["network-load-balanced-service-base.ts"],
  "sourcesContent": ["import { IVpc } from '../../../aws-ec2';\nimport {\n  AwsLogDriver, BaseService, CloudMapOptions, Cluster, ContainerImage, DeploymentController, DeploymentCircuitBreaker,\n  ICluster, LogDriver, PropagatedTagSource, Secret,\n} from '../../../aws-ecs';\nimport { INetworkLoadBalancer, NetworkListener, NetworkLoadBalancer, NetworkTargetGroup } from '../../../aws-elasticloadbalancingv2';\nimport { IRole } from '../../../aws-iam';\nimport { ARecord, CnameRecord, IHostedZone, RecordTarget } from '../../../aws-route53';\nimport { LoadBalancerTarget } from '../../../aws-route53-targets';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\n\n/**\n * Describes the type of DNS record the service should create\n */\nexport enum NetworkLoadBalancedServiceRecordType {\n  /**\n   * Create Route53 A Alias record\n   */\n  ALIAS,\n  /**\n   * Create a CNAME record\n   */\n  CNAME,\n  /**\n   * Do not create any DNS records\n   */\n  NONE\n}\n\n/**\n * The properties for the base NetworkLoadBalancedEc2Service or NetworkLoadBalancedFargateService service.\n */\nexport interface NetworkLoadBalancedServiceBaseProps {\n  /**\n   * The name of the cluster that hosts the service.\n   *\n   * If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.\n   * @default - create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.\n   */\n  readonly cluster?: ICluster;\n\n  /**\n   * The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed.\n   *\n   * If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.\n   * @default - uses the VPC defined in the cluster or creates a new VPC.\n   */\n  readonly vpc?: IVpc;\n\n  /**\n   * The properties required to create a new task definition. One of taskImageOptions or taskDefinition must be specified.\n   *\n   * @default - none\n   */\n  readonly taskImageOptions?: NetworkLoadBalancedTaskImageOptions;\n\n  /**\n   * Determines whether the Load Balancer will be internet-facing.\n   *\n   * @default true\n   */\n  readonly publicLoadBalancer?: boolean;\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * The minimum value is 1\n   *\n   * @default - If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is 1;\n   * if true, the default is 1 for all new services and uses the existing services desired count\n   * when updating an existing service.\n   */\n  readonly desiredCount?: number;\n\n  /**\n   * The domain name for the service, e.g. \"api.example.com.\"\n   *\n   * @default - No domain name.\n   */\n  readonly domainName?: string;\n\n  /**\n   * The Route53 hosted zone for the domain, e.g. \"example.com.\"\n   *\n   * @default - No Route53 hosted domain zone.\n   */\n  readonly domainZone?: IHostedZone;\n\n  /**\n   * The name of the service.\n   *\n   * @default - CloudFormation-generated name.\n   */\n  readonly serviceName?: string;\n\n  /**\n   * The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy\n   * Elastic Load Balancing target health checks after a task has first started.\n   *\n   * @default - defaults to 60 seconds if at least one load balancer is in-use and it is not already set\n   */\n  readonly healthCheckGracePeriod?: cdk.Duration;\n\n  /**\n   * The maximum number of tasks, specified as a percentage of the Amazon ECS\n   * service's DesiredCount value, that can run in a service during a\n   * deployment.\n   *\n   * @default - 100 if daemon, otherwise 200\n   */\n  readonly maxHealthyPercent?: number;\n\n  /**\n   * The minimum number of tasks, specified as a percentage of\n   * the Amazon ECS service's DesiredCount value, that must\n   * continue to run and remain healthy during a deployment.\n   *\n   * @default - 0 if daemon, otherwise 50\n   */\n  readonly minHealthyPercent?: number;\n\n  /**\n   * The network load balancer that will serve traffic to the service.\n   * If the load balancer has been imported, the vpc attribute must be specified\n   * in the call to fromNetworkLoadBalancerAttributes().\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - a new load balancer will be created.\n   */\n  readonly loadBalancer?: INetworkLoadBalancer;\n\n  /**\n   * Listener port of the network load balancer that will serve traffic to the service.\n   *\n   * @default 80\n   */\n  readonly listenerPort?: number;\n\n  /**\n   * Specifies whether to propagate the tags from the task definition or the service to the tasks in the service.\n   * Tags can only be propagated to the tasks within the service during service creation.\n   *\n   * @default - none\n   */\n  readonly propagateTags?: PropagatedTagSource;\n\n  /**\n   * Specifies whether to enable Amazon ECS managed tags for the tasks within the service. For more information, see\n   * [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)\n   *\n   * @default false\n   */\n  readonly enableECSManagedTags?: boolean;\n\n  /**\n   * The options for configuring an Amazon ECS service to use service discovery.\n   *\n   * @default - AWS Cloud Map service discovery is not enabled.\n   */\n  readonly cloudMapOptions?: CloudMapOptions;\n\n  /**\n   * Specifies whether the Route53 record should be a CNAME, an A record using the Alias feature or no record at all.\n   * This is useful if you need to work with DNS systems that do not support alias records.\n   *\n   * @default NetworkLoadBalancedServiceRecordType.ALIAS\n   */\n  readonly recordType?: NetworkLoadBalancedServiceRecordType;\n\n  /**\n * Specifies which deployment controller to use for the service. For more information, see\n * [Amazon ECS Deployment Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)\n *\n * @default - Rolling update (ECS)\n */\n  readonly deploymentController?: DeploymentController;\n\n  /**\n   * Whether to enable the deployment circuit breaker. If this property is defined, circuit breaker will be implicitly\n   * enabled.\n   * @default - disabled\n   */\n  readonly circuitBreaker?: DeploymentCircuitBreaker;\n}\n\nexport interface NetworkLoadBalancedTaskImageOptions {\n  /**\n   * The image used to start a container. Image or taskDefinition must be specified, but not both.\n   *\n   * @default - none\n   */\n  readonly image: ContainerImage;\n\n  /**\n   * The environment variables to pass to the container.\n   *\n   * @default - No environment variables.\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * The secret to expose to the container as an environment variable.\n   *\n   * @default - No secret environment variables.\n   */\n  readonly secrets?: { [key: string]: Secret };\n\n  /**\n   * Flag to indicate whether to enable logging.\n   *\n   * @default true\n   */\n  readonly enableLogging?: boolean;\n\n  /**\n   * The log driver to use.\n   *\n   * @default - AwsLogDriver if enableLogging is true\n   */\n  readonly logDriver?: LogDriver;\n\n  /**\n   * The name of the task execution IAM role that grants the Amazon ECS container agent permission to call AWS APIs on your behalf.\n   *\n   * @default - No value\n   */\n  readonly executionRole?: IRole;\n\n  /**\n   * The name of the task IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   *\n   * @default - A task role is automatically created for you.\n   */\n  readonly taskRole?: IRole;\n\n  /**\n   * The container name value to be specified in the task definition.\n   *\n   * @default - none\n   */\n  readonly containerName?: string;\n\n  /**\n   * The port number on the container that is bound to the user-specified or automatically assigned host port.\n   *\n   * If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\n   * If you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\n   * your container automatically receives a host port in the ephemeral port range.\n   *\n   * Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n   *\n   * For more information, see\n   * [hostPort](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PortMapping.html#ECS-Type-PortMapping-hostPort).\n   *\n   * @default 80\n   */\n  readonly containerPort?: number;\n\n  /**\n   * The name of a family that this task definition is registered to. A family groups multiple versions of a task definition.\n   *\n   * @default - Automatically generated name.\n   */\n  readonly family?: string;\n\n  /**\n   * A key/value map of labels to add to the container.\n   *\n   * @default - No labels.\n   */\n  readonly dockerLabels?: { [key: string]: string };\n}\n\n/**\n * The base class for NetworkLoadBalancedEc2Service and NetworkLoadBalancedFargateService services.\n */\nexport abstract class NetworkLoadBalancedServiceBase extends Construct {\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * @deprecated - Use `internalDesiredCount` instead.\n   */\n  public readonly desiredCount: number;\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * The default is 1 for all new services and uses the existing services desired count\n   * when updating an existing service, if one is not provided.\n   */\n  public readonly internalDesiredCount?: number;\n\n  /**\n   * The Network Load Balancer for the service.\n   */\n  public get loadBalancer(): NetworkLoadBalancer {\n    if (!this._networkLoadBalancer) {\n      throw new Error('.loadBalancer can only be accessed if the class was constructed with an owned, not imported, load balancer');\n    }\n    return this._networkLoadBalancer;\n  }\n\n  /**\n   * The listener for the service.\n   */\n  public readonly listener: NetworkListener;\n\n  /**\n   * The target group for the service.\n   */\n  public readonly targetGroup: NetworkTargetGroup;\n\n  /**\n   * The cluster that hosts the service.\n   */\n  public readonly cluster: ICluster;\n\n  private readonly _networkLoadBalancer?: NetworkLoadBalancer;\n  /**\n   * Constructs a new instance of the NetworkLoadBalancedServiceBase class.\n   */\n  constructor(scope: Construct, id: string, props: NetworkLoadBalancedServiceBaseProps = {}) {\n    super(scope, id);\n\n    if (props.cluster && props.vpc) {\n      throw new Error('You can only specify either vpc or cluster. Alternatively, you can leave both blank');\n    }\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n\n    if (props.desiredCount !== undefined && props.desiredCount < 1) {\n      throw new Error('You must specify a desiredCount greater than 0');\n    }\n\n    this.desiredCount = props.desiredCount || 1;\n    this.internalDesiredCount = props.desiredCount;\n\n    const internetFacing = props.publicLoadBalancer ?? true;\n\n    const lbProps = {\n      vpc: this.cluster.vpc,\n      internetFacing,\n    };\n\n    const loadBalancer = props.loadBalancer ?? new NetworkLoadBalancer(this, 'LB', lbProps);\n    const listenerPort = props.listenerPort ?? 80;\n    const targetProps = {\n      port: props.taskImageOptions?.containerPort ?? 80,\n    };\n\n    this.listener = loadBalancer.addListener('PublicListener', { port: listenerPort });\n    this.targetGroup = this.listener.addTargets('ECS', targetProps);\n\n    if (typeof props.domainName !== 'undefined') {\n      if (typeof props.domainZone === 'undefined') {\n        throw new Error('A Route53 hosted domain zone name is required to configure the specified domain name');\n      }\n\n      switch (props.recordType ?? NetworkLoadBalancedServiceRecordType.ALIAS) {\n        case NetworkLoadBalancedServiceRecordType.ALIAS:\n          new ARecord(this, 'DNS', {\n            zone: props.domainZone,\n            recordName: props.domainName,\n            target: RecordTarget.fromAlias(new LoadBalancerTarget(loadBalancer)),\n          });\n          break;\n        case NetworkLoadBalancedServiceRecordType.CNAME:\n          new CnameRecord(this, 'DNS', {\n            zone: props.domainZone,\n            recordName: props.domainName,\n            domainName: loadBalancer.loadBalancerDnsName,\n          });\n          break;\n        case NetworkLoadBalancedServiceRecordType.NONE:\n          // Do not create a DNS record\n          break;\n      }\n    }\n\n    if (loadBalancer instanceof NetworkLoadBalancer) {\n      this._networkLoadBalancer = loadBalancer;\n    }\n\n    if (props.loadBalancer === undefined) {\n      new cdk.CfnOutput(this, 'LoadBalancerDNS', { value: this.loadBalancer.loadBalancerDnsName });\n    }\n  }\n\n  /**\n   * Returns the default cluster.\n   */\n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = cdk.Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n  /**\n   * Adds service as a target of the target group.\n   */\n  protected addServiceAsTarget(service: BaseService) {\n    this.targetGroup.addTarget(service);\n  }\n\n  protected createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n}\n"],
  "mappings": "qRACA,UAAA,QAAA,kBAAA,EAIA,6BAAA,QAAA,qCAAA,EAEA,cAAA,QAAA,sBAAA,EACA,sBAAA,QAAA,8BAAA,EACA,IAAA,QAAA,eAAA,EACA,aAAA,QAAA,YAAA,EAKA,GAAY,sCAAZ,AAAA,UAAY,sCAAoC,CAI9C,sCAAA,sCAAA,MAAA,GAAA,QAIA,sCAAA,sCAAA,MAAA,GAAA,QAIA,sCAAA,sCAAA,KAAA,GAAA,MACF,GAbY,qCAAA,QAAA,sCAAA,SAAA,qCAAoC,CAAA,EAAA,EAsQhD,MAAsB,sCAAuC,cAAA,SAAS,CA2CpE,YAAY,MAAkB,GAAY,MAA6C,CAAA,EAAE,uBACvF,MAAM,MAAO,EAAE,EAEf,mGAAI,MAAM,SAAW,MAAM,IACzB,KAAM,IAAI,OAAM,qFAAqF,EAIvG,GAFA,KAAK,QAAU,MAAM,SAAW,KAAK,kBAAkB,KAAM,MAAM,GAAG,EAElE,MAAM,eAAiB,QAAa,MAAM,aAAe,EAC3D,KAAM,IAAI,OAAM,gDAAgD,EAGlE,KAAK,aAAe,MAAM,cAAgB,EAC1C,KAAK,qBAAuB,MAAM,aAElC,KAAM,gBAAc,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,GAE7C,QAAU,CACd,IAAK,KAAK,QAAQ,IAClB,gBAGI,aAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,GAAI,8BAAA,oBAAoB,KAAM,KAAM,OAAO,EAChF,aAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,GACrC,YAAc,CAClB,KAAI,IAAA,IAAE,MAAM,oBAAgB,MAAA,KAAA,OAAA,OAAA,GAAE,iBAAa,MAAA,KAAA,OAAA,GAAI,IAMjD,GAHA,KAAK,SAAW,aAAa,YAAY,iBAAkB,CAAE,KAAM,YAAY,CAAE,EACjF,KAAK,YAAc,KAAK,SAAS,WAAW,MAAO,WAAW,EAE1D,MAAO,OAAM,YAAe,YAAa,CAC3C,GAAI,MAAO,OAAM,YAAe,YAC9B,KAAM,IAAI,OAAM,sFAAsF,EAGxG,OAAA,IAAQ,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,qCAAqC,WAC1D,sCAAqC,MACxC,GAAI,eAAA,QAAQ,KAAM,MAAO,CACvB,KAAM,MAAM,WACZ,WAAY,MAAM,WAClB,OAAQ,cAAA,aAAa,UAAU,GAAI,uBAAA,mBAAmB,YAAY,CAAC,EACpE,EACD,UACG,sCAAqC,MACxC,GAAI,eAAA,YAAY,KAAM,MAAO,CAC3B,KAAM,MAAM,WACZ,WAAY,MAAM,WAClB,WAAY,aAAa,oBAC1B,EACD,UACG,sCAAqC,KAExC,OAIN,AAAI,uBAAwB,8BAAA,qBAC1B,MAAK,qBAAuB,cAG1B,MAAM,eAAiB,QACzB,GAAI,KAAI,UAAU,KAAM,kBAAmB,CAAE,MAAO,KAAK,aAAa,mBAAmB,CAAE,KAxFpF,eAAY,CACrB,GAAI,CAAC,KAAK,qBACR,KAAM,IAAI,OAAM,4GAA4G,EAE9H,MAAO,MAAK,qBA2FJ,kBAAkB,MAAkB,IAAU,uDAEtD,KAAM,oBAAqB,6BAA6B,IAAM,IAAI,KAAK,GAAK,KACtE,MAAQ,IAAI,MAAM,GAAG,KAAK,EAChC,MAAO,OAAM,KAAK,aAAa,kBAAkB,GAAgB,GAAI,WAAA,QAAQ,MAAO,mBAAoB,CAAE,GAAG,CAAE,EAMvG,mBAAmB,QAAoB,kEAC/C,KAAK,YAAY,UAAU,OAAO,EAG1B,mBAAmB,OAAc,CACzC,MAAO,IAAI,WAAA,aAAa,CAAE,aAAc,MAAM,CAAE,GA/HpD,QAAA,+BAAA",
  "names": []
}
