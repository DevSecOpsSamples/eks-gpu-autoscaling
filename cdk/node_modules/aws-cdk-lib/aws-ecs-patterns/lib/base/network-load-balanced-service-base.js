"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.NetworkLoadBalancedServiceBase=exports.NetworkLoadBalancedServiceRecordType=void 0;const jsiiDeprecationWarnings=require("../../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),aws_ecs_1=require("../../../aws-ecs"),aws_elasticloadbalancingv2_1=require("../../../aws-elasticloadbalancingv2"),aws_route53_1=require("../../../aws-route53"),aws_route53_targets_1=require("../../../aws-route53-targets"),cdk=require("../../../core"),constructs_1=require("constructs");var NetworkLoadBalancedServiceRecordType;(function(NetworkLoadBalancedServiceRecordType2){NetworkLoadBalancedServiceRecordType2[NetworkLoadBalancedServiceRecordType2.ALIAS=0]="ALIAS",NetworkLoadBalancedServiceRecordType2[NetworkLoadBalancedServiceRecordType2.CNAME=1]="CNAME",NetworkLoadBalancedServiceRecordType2[NetworkLoadBalancedServiceRecordType2.NONE=2]="NONE"})(NetworkLoadBalancedServiceRecordType=exports.NetworkLoadBalancedServiceRecordType||(exports.NetworkLoadBalancedServiceRecordType={}));class NetworkLoadBalancedServiceBase extends constructs_1.Construct{constructor(scope,id,props={}){var _b,_c,_d,_e,_f,_g;super(scope,id);if(jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_patterns_NetworkLoadBalancedServiceBaseProps(props),props.cluster&&props.vpc)throw new Error("You can only specify either vpc or cluster. Alternatively, you can leave both blank");if(this.cluster=props.cluster||this.getDefaultCluster(this,props.vpc),props.desiredCount!==void 0&&props.desiredCount<1)throw new Error("You must specify a desiredCount greater than 0");this.desiredCount=props.desiredCount||1,this.internalDesiredCount=props.desiredCount;const internetFacing=(_b=props.publicLoadBalancer)!==null&&_b!==void 0?_b:!0,lbProps={vpc:this.cluster.vpc,internetFacing},loadBalancer=(_c=props.loadBalancer)!==null&&_c!==void 0?_c:new aws_elasticloadbalancingv2_1.NetworkLoadBalancer(this,"LB",lbProps),listenerPort=(_d=props.listenerPort)!==null&&_d!==void 0?_d:80,targetProps={port:(_f=(_e=props.taskImageOptions)===null||_e===void 0?void 0:_e.containerPort)!==null&&_f!==void 0?_f:80};if(this.listener=loadBalancer.addListener("PublicListener",{port:listenerPort}),this.targetGroup=this.listener.addTargets("ECS",targetProps),typeof props.domainName!="undefined"){if(typeof props.domainZone=="undefined")throw new Error("A Route53 hosted domain zone name is required to configure the specified domain name");switch((_g=props.recordType)!==null&&_g!==void 0?_g:NetworkLoadBalancedServiceRecordType.ALIAS){case NetworkLoadBalancedServiceRecordType.ALIAS:new aws_route53_1.ARecord(this,"DNS",{zone:props.domainZone,recordName:props.domainName,target:aws_route53_1.RecordTarget.fromAlias(new aws_route53_targets_1.LoadBalancerTarget(loadBalancer))});break;case NetworkLoadBalancedServiceRecordType.CNAME:new aws_route53_1.CnameRecord(this,"DNS",{zone:props.domainZone,recordName:props.domainName,domainName:loadBalancer.loadBalancerDnsName});break;case NetworkLoadBalancedServiceRecordType.NONE:break}}loadBalancer instanceof aws_elasticloadbalancingv2_1.NetworkLoadBalancer&&(this._networkLoadBalancer=loadBalancer),props.loadBalancer===void 0&&new cdk.CfnOutput(this,"LoadBalancerDNS",{value:this.loadBalancer.loadBalancerDnsName})}get loadBalancer(){if(!this._networkLoadBalancer)throw new Error(".loadBalancer can only be accessed if the class was constructed with an owned, not imported, load balancer");return this._networkLoadBalancer}getDefaultCluster(scope,vpc){jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_IVpc(vpc);const DEFAULT_CLUSTER_ID=`EcsDefaultClusterMnL3mNNYN${vpc?vpc.node.id:""}`,stack=cdk.Stack.of(scope);return stack.node.tryFindChild(DEFAULT_CLUSTER_ID)||new aws_ecs_1.Cluster(stack,DEFAULT_CLUSTER_ID,{vpc})}addServiceAsTarget(service){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_BaseService(service),this.targetGroup.addTarget(service)}createAWSLogDriver(prefix){return new aws_ecs_1.AwsLogDriver({streamPrefix:prefix})}}exports.NetworkLoadBalancedServiceBase=NetworkLoadBalancedServiceBase,_a=JSII_RTTI_SYMBOL_1,NetworkLoadBalancedServiceBase[_a]={fqn:"aws-cdk-lib.aws_ecs_patterns.NetworkLoadBalancedServiceBase",version:"2.20.0"};
//# sourceMappingURL=network-load-balanced-service-base.js.map
