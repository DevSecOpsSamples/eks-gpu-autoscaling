{
  "version": 3,
  "sources": ["application-load-balanced-service-base.ts"],
  "sourcesContent": ["import { Certificate, CertificateValidation, ICertificate } from '../../../aws-certificatemanager';\nimport { IVpc } from '../../../aws-ec2';\nimport {\n  AwsLogDriver, BaseService, CloudMapOptions, Cluster, ContainerImage, DeploymentController, DeploymentCircuitBreaker,\n  ICluster, LogDriver, PropagatedTagSource, Secret,\n} from '../../../aws-ecs';\nimport {\n  ApplicationListener, ApplicationLoadBalancer, ApplicationProtocol, ApplicationProtocolVersion, ApplicationTargetGroup,\n  IApplicationLoadBalancer, ListenerCertificate, ListenerAction, AddApplicationTargetsProps, SslPolicy,\n} from '../../../aws-elasticloadbalancingv2';\nimport { IRole } from '../../../aws-iam';\nimport { ARecord, IHostedZone, RecordTarget, CnameRecord } from '../../../aws-route53';\nimport { LoadBalancerTarget } from '../../../aws-route53-targets';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\n\n/**\n * Describes the type of DNS record the service should create\n */\nexport enum ApplicationLoadBalancedServiceRecordType {\n  /**\n   * Create Route53 A Alias record\n   */\n  ALIAS,\n  /**\n   * Create a CNAME record\n   */\n  CNAME,\n  /**\n   * Do not create any DNS records\n   */\n  NONE\n}\n\n/**\n * The properties for the base ApplicationLoadBalancedEc2Service or ApplicationLoadBalancedFargateService service.\n */\nexport interface ApplicationLoadBalancedServiceBaseProps {\n  /**\n   * The name of the cluster that hosts the service.\n   *\n   * If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.\n   * @default - create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.\n   */\n  readonly cluster?: ICluster;\n\n  /**\n   * The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed.\n   *\n   * If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.\n   * @default - uses the VPC defined in the cluster or creates a new VPC.\n   */\n  readonly vpc?: IVpc;\n\n  /**\n   * The properties required to create a new task definition. TaskDefinition or TaskImageOptions must be specified, but not both.\n   *\n   * @default none\n   */\n  readonly taskImageOptions?: ApplicationLoadBalancedTaskImageOptions;\n\n  /**\n   * Determines whether the Load Balancer will be internet-facing.\n   *\n   * @default true\n   */\n  readonly publicLoadBalancer?: boolean;\n\n  /**\n   * Determines whether or not the Security Group for the Load Balancer's Listener will be open to all traffic by default.\n   *\n   * @default true -- The security group allows ingress from all IP addresses.\n   */\n  readonly openListener?: boolean;\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * The minimum value is 1\n   *\n   * @default - If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is 1;\n   * if true, the default is 1 for all new services and uses the existing services desired count\n   * when updating an existing service.\n   */\n  readonly desiredCount?: number;\n\n  /**\n   * Certificate Manager certificate to associate with the load balancer.\n   * Setting this option will set the load balancer protocol to HTTPS.\n   *\n   * @default - No certificate associated with the load balancer, if using\n   * the HTTP protocol. For HTTPS, a DNS-validated certificate will be\n   * created for the load balancer's specified domain name.\n   */\n  readonly certificate?: ICertificate;\n\n  /**\n   * The protocol for connections from the load balancer to the ECS tasks.\n   * The default target port is determined from the protocol (port 80 for\n   * HTTP, port 443 for HTTPS).\n   *\n   * @default HTTP.\n   */\n  readonly targetProtocol?: ApplicationProtocol;\n\n  /**\n   * The protocol for connections from clients to the load balancer.\n   * The load balancer port is determined from the protocol (port 80 for\n   * HTTP, port 443 for HTTPS).  A domain name and zone must be also be\n   * specified if using HTTPS.\n   *\n   * @default HTTP. If a certificate is specified, the protocol will be\n   * set by default to HTTPS.\n   */\n  readonly protocol?: ApplicationProtocol;\n\n  /**\n   * The protocol version to use\n   *\n   * @default ApplicationProtocolVersion.HTTP1\n   */\n  readonly protocolVersion?: ApplicationProtocolVersion;\n\n  /**\n   * The domain name for the service, e.g. \"api.example.com.\"\n   *\n   * @default - No domain name.\n   */\n  readonly domainName?: string;\n\n  /**\n   * The Route53 hosted zone for the domain, e.g. \"example.com.\"\n   *\n   * @default - No Route53 hosted domain zone.\n   */\n  readonly domainZone?: IHostedZone;\n\n  /**\n   * The name of the service.\n   *\n   * @default - CloudFormation-generated name.\n   */\n  readonly serviceName?: string;\n\n  /**\n   * The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy\n   * Elastic Load Balancing target health checks after a task has first started.\n   *\n   * @default - defaults to 60 seconds if at least one load balancer is in-use and it is not already set\n   */\n  readonly healthCheckGracePeriod?: cdk.Duration;\n\n  /**\n   * The maximum number of tasks, specified as a percentage of the Amazon ECS\n   * service's DesiredCount value, that can run in a service during a\n   * deployment.\n   *\n   * @default - 100 if daemon, otherwise 200\n   */\n  readonly maxHealthyPercent?: number;\n\n  /**\n   * The minimum number of tasks, specified as a percentage of\n   * the Amazon ECS service's DesiredCount value, that must\n   * continue to run and remain healthy during a deployment.\n   *\n   * @default - 0 if daemon, otherwise 50\n   */\n  readonly minHealthyPercent?: number;\n\n  /**\n   * The application load balancer that will serve traffic to the service.\n   * The VPC attribute of a load balancer must be specified for it to be used\n   * to create a new service with this pattern.\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - a new load balancer will be created.\n   */\n  readonly loadBalancer?: IApplicationLoadBalancer;\n\n  /**\n   * Listener port of the application load balancer that will serve traffic to the service.\n   *\n   * @default - The default listener port is determined from the protocol (port 80 for HTTP,\n   * port 443 for HTTPS). A domain name and zone must be also be specified if using HTTPS.\n   */\n  readonly listenerPort?: number;\n\n  /**\n   * The security policy that defines which ciphers and protocols are supported by the ALB Listener.\n   *\n   * @default - The recommended elastic load balancing security policy\n   */\n  readonly sslPolicy?: SslPolicy;\n\n  /**\n   * Specifies whether to propagate the tags from the task definition or the service to the tasks in the service.\n   * Tags can only be propagated to the tasks within the service during service creation.\n   *\n   * @default - none\n   */\n  readonly propagateTags?: PropagatedTagSource;\n\n  /**\n   * Specifies whether to enable Amazon ECS managed tags for the tasks within the service. For more information, see\n   * [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)\n   *\n   * @default false\n   */\n  readonly enableECSManagedTags?: boolean;\n\n  /**\n   * The options for configuring an Amazon ECS service to use service discovery.\n   *\n   * @default - AWS Cloud Map service discovery is not enabled.\n   */\n  readonly cloudMapOptions?: CloudMapOptions;\n\n  /**\n   * Specifies whether the load balancer should redirect traffic on port 80 to port 443 to support HTTP->HTTPS redirects\n   * This is only valid if the protocol of the ALB is HTTPS\n   *\n   * @default false\n   */\n  readonly redirectHTTP?: boolean;\n\n  /**\n   * Specifies whether the Route53 record should be a CNAME, an A record using the Alias feature or no record at all.\n   * This is useful if you need to work with DNS systems that do not support alias records.\n   *\n   * @default ApplicationLoadBalancedServiceRecordType.ALIAS\n   */\n  readonly recordType?: ApplicationLoadBalancedServiceRecordType;\n\n  /**\n   * Specifies which deployment controller to use for the service. For more information, see\n   * [Amazon ECS Deployment Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)\n   *\n   * @default - Rolling update (ECS)\n   */\n  readonly deploymentController?: DeploymentController;\n\n  /**\n   * Whether to enable the deployment circuit breaker. If this property is defined, circuit breaker will be implicitly\n   * enabled.\n   * @default - disabled\n   */\n  readonly circuitBreaker?: DeploymentCircuitBreaker;\n\n  /**\n   * Name of the load balancer\n   *\n   * @default - Automatically generated name.\n   */\n  readonly loadBalancerName?: string;\n\n}\n\nexport interface ApplicationLoadBalancedTaskImageOptions {\n  /**\n   * The image used to start a container. Image or taskDefinition must be specified, not both.\n   *\n   * @default - none\n   */\n  readonly image: ContainerImage;\n\n  /**\n   * The environment variables to pass to the container.\n   *\n   * @default - No environment variables.\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * The secret to expose to the container as an environment variable.\n   *\n   * @default - No secret environment variables.\n   */\n  readonly secrets?: { [key: string]: Secret };\n\n  /**\n   * Flag to indicate whether to enable logging.\n   *\n   * @default true\n   */\n  readonly enableLogging?: boolean;\n\n  /**\n   * The log driver to use.\n   *\n   * @default - AwsLogDriver if enableLogging is true\n   */\n  readonly logDriver?: LogDriver;\n\n  /**\n   * The name of the task execution IAM role that grants the Amazon ECS container agent permission to call AWS APIs on your behalf.\n   *\n   * @default - No value\n   */\n  readonly executionRole?: IRole;\n\n  /**\n   * The name of the task IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   *\n   * @default - A task role is automatically created for you.\n   */\n  readonly taskRole?: IRole;\n\n  /**\n   * The container name value to be specified in the task definition.\n   *\n   * @default - none\n   */\n  readonly containerName?: string;\n\n  /**\n   * The port number on the container that is bound to the user-specified or automatically assigned host port.\n   *\n   * If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\n   * If you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\n   * your container automatically receives a host port in the ephemeral port range.\n   *\n   * Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n   *\n   * For more information, see\n   * [hostPort](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PortMapping.html#ECS-Type-PortMapping-hostPort).\n   *\n   * @default 80\n   */\n  readonly containerPort?: number;\n\n  /**\n   * The name of a family that this task definition is registered to. A family groups multiple versions of a task definition.\n   *\n   * @default - Automatically generated name.\n   */\n  readonly family?: string;\n\n  /**\n   * A key/value map of labels to add to the container.\n   *\n   * @default - No labels.\n   */\n  readonly dockerLabels?: { [key: string]: string };\n}\n\n/**\n * The base class for ApplicationLoadBalancedEc2Service and ApplicationLoadBalancedFargateService services.\n */\nexport abstract class ApplicationLoadBalancedServiceBase extends Construct {\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * @deprecated - Use `internalDesiredCount` instead.\n   */\n  public readonly desiredCount: number;\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * The default is 1 for all new services and uses the existing services desired count\n   * when updating an existing service if one is not provided.\n   */\n  public readonly internalDesiredCount?: number;\n\n  /**\n   * The Application Load Balancer for the service.\n   */\n  public get loadBalancer(): ApplicationLoadBalancer {\n    if (!this._applicationLoadBalancer) {\n      throw new Error('.loadBalancer can only be accessed if the class was constructed with an owned, not imported, load balancer');\n    }\n    return this._applicationLoadBalancer;\n  }\n\n  /**\n   * The listener for the service.\n   */\n  public readonly listener: ApplicationListener;\n\n  /**\n   * The redirect listener for the service if redirectHTTP is enabled.\n   */\n  public readonly redirectListener?: ApplicationListener;\n\n  /**\n   * The target group for the service.\n   */\n  public readonly targetGroup: ApplicationTargetGroup;\n\n  /**\n   * Certificate Manager certificate to associate with the load balancer.\n   */\n  public readonly certificate?: ICertificate;\n\n  /**\n   * The cluster that hosts the service.\n   */\n  public readonly cluster: ICluster;\n\n  private readonly _applicationLoadBalancer?: ApplicationLoadBalancer;\n\n  /**\n   * Constructs a new instance of the ApplicationLoadBalancedServiceBase class.\n   */\n  constructor(scope: Construct, id: string, props: ApplicationLoadBalancedServiceBaseProps = {}) {\n    super(scope, id);\n\n    if (props.cluster && props.vpc) {\n      throw new Error('You can only specify either vpc or cluster. Alternatively, you can leave both blank');\n    }\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n\n    if (props.desiredCount !== undefined && !cdk.Token.isUnresolved(props.desiredCount) && props.desiredCount < 1) {\n      throw new Error('You must specify a desiredCount greater than 0');\n    }\n\n    this.desiredCount = props.desiredCount || 1;\n    this.internalDesiredCount = props.desiredCount;\n\n    const internetFacing = props.publicLoadBalancer ?? true;\n\n    const lbProps = {\n      vpc: this.cluster.vpc,\n      loadBalancerName: props.loadBalancerName,\n      internetFacing,\n    };\n\n    const loadBalancer = props.loadBalancer ?? new ApplicationLoadBalancer(this, 'LB', lbProps);\n\n    if (props.certificate !== undefined && props.protocol !== undefined && props.protocol !== ApplicationProtocol.HTTPS) {\n      throw new Error('The HTTPS protocol must be used when a certificate is given');\n    }\n    const protocol = props.protocol ?? (props.certificate ? ApplicationProtocol.HTTPS : ApplicationProtocol.HTTP);\n\n    if (protocol !== ApplicationProtocol.HTTPS && props.redirectHTTP === true) {\n      throw new Error('The HTTPS protocol must be used when redirecting HTTP traffic');\n    }\n\n    const targetProps: AddApplicationTargetsProps = {\n      protocol: props.targetProtocol ?? ApplicationProtocol.HTTP,\n      protocolVersion: props.protocolVersion,\n    };\n\n    this.listener = loadBalancer.addListener('PublicListener', {\n      protocol,\n      port: props.listenerPort,\n      open: props.openListener ?? true,\n      sslPolicy: props.sslPolicy,\n    });\n    this.targetGroup = this.listener.addTargets('ECS', targetProps);\n\n    if (protocol === ApplicationProtocol.HTTPS) {\n\n      if (props.certificate !== undefined) {\n        this.certificate = props.certificate;\n      } else {\n        if (typeof props.domainName === 'undefined' || typeof props.domainZone === 'undefined') {\n          throw new Error('A domain name and zone is required when using the HTTPS protocol');\n        }\n\n        this.certificate = new Certificate(this, 'Certificate', {\n          domainName: props.domainName,\n          validation: CertificateValidation.fromDns(props.domainZone),\n        });\n      }\n    }\n    if (this.certificate !== undefined) {\n      this.listener.addCertificates('Arns', [ListenerCertificate.fromCertificateManager(this.certificate)]);\n    }\n    if (props.redirectHTTP) {\n      this.redirectListener = loadBalancer.addListener('PublicRedirectListener', {\n        protocol: ApplicationProtocol.HTTP,\n        port: 80,\n        open: props.openListener ?? true,\n        defaultAction: ListenerAction.redirect({\n          port: props.listenerPort?.toString() || '443',\n          protocol: ApplicationProtocol.HTTPS,\n          permanent: true,\n        }),\n      });\n    }\n\n    let domainName = loadBalancer.loadBalancerDnsName;\n    if (typeof props.domainName !== 'undefined') {\n      if (typeof props.domainZone === 'undefined') {\n        throw new Error('A Route53 hosted domain zone name is required to configure the specified domain name');\n      }\n\n      switch (props.recordType ?? ApplicationLoadBalancedServiceRecordType.ALIAS) {\n        case ApplicationLoadBalancedServiceRecordType.ALIAS:\n          let aliasRecord = new ARecord(this, 'DNS', {\n            zone: props.domainZone,\n            recordName: props.domainName,\n            target: RecordTarget.fromAlias(new LoadBalancerTarget(loadBalancer)),\n          });\n          domainName = aliasRecord.domainName;\n          break;\n        case ApplicationLoadBalancedServiceRecordType.CNAME:\n          let cnameRecord = new CnameRecord(this, 'DNS', {\n            zone: props.domainZone,\n            recordName: props.domainName,\n            domainName: loadBalancer.loadBalancerDnsName,\n          });\n          domainName = cnameRecord.domainName;\n          break;\n        case ApplicationLoadBalancedServiceRecordType.NONE:\n          // Do not create a DNS record\n          break;\n      }\n    }\n\n    if (loadBalancer instanceof ApplicationLoadBalancer) {\n      this._applicationLoadBalancer = loadBalancer;\n    }\n\n    new cdk.CfnOutput(this, 'LoadBalancerDNS', { value: loadBalancer.loadBalancerDnsName });\n    new cdk.CfnOutput(this, 'ServiceURL', { value: protocol.toLowerCase() + '://' + domainName });\n  }\n\n  /**\n   * Returns the default cluster.\n   */\n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = cdk.Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n  /**\n   * Adds service as a target of the target group.\n   */\n  protected addServiceAsTarget(service: BaseService) {\n    this.targetGroup.addTarget(service);\n  }\n\n  protected createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
