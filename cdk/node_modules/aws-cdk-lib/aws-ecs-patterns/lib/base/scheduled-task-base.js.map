{
  "version": 3,
  "sources": ["scheduled-task-base.ts"],
  "sourcesContent": ["import { Schedule } from '../../../aws-applicationautoscaling';\nimport { ISecurityGroup, IVpc, SubnetSelection, SubnetType } from '../../../aws-ec2';\nimport { AwsLogDriver, Cluster, ContainerImage, ICluster, LogDriver, Secret, TaskDefinition } from '../../../aws-ecs';\nimport { Rule } from '../../../aws-events';\nimport { EcsTask } from '../../../aws-events-targets';\nimport { Stack } from '../../../core';\nimport { Construct } from 'constructs';\n\n/**\n * The properties for the base ScheduledEc2Task or ScheduledFargateTask task.\n */\nexport interface ScheduledTaskBaseProps {\n  /**\n   * The name of the cluster that hosts the service.\n   *\n   * If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.\n   * @default - create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.\n   */\n  readonly cluster?: ICluster;\n\n  /**\n   * The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed.\n   *\n   * If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.\n   * @default - uses the VPC defined in the cluster or creates a new VPC.\n   */\n  readonly vpc?: IVpc;\n\n  /**\n   * The schedule or rate (frequency) that determines when CloudWatch Events\n   * runs the rule. For more information, see\n   * [Schedule Expression Syntax for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html)\n   * in the Amazon CloudWatch User Guide.\n   */\n  readonly schedule: Schedule;\n\n  /**\n   * Indicates whether the rule is enabled.\n   *\n   * @default true\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * A name for the rule.\n   *\n   * @default - AWS CloudFormation generates a unique physical ID and uses that ID\n   * for the rule name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).\n   */\n  readonly ruleName?: string;\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   *\n   * @default 1\n   */\n  readonly desiredTaskCount?: number;\n\n  /**\n   * In what subnets to place the task's ENIs\n   *\n   * (Only applicable in case the TaskDefinition is configured for AwsVpc networking)\n   *\n   * @default Private subnets\n   */\n  readonly subnetSelection?: SubnetSelection;\n\n  /**\n   * Existing security groups to use for your service.\n   *\n   * @default - a new security group will be created.\n   */\n  readonly securityGroups?: ISecurityGroup[]\n}\n\nexport interface ScheduledTaskImageProps {\n  /**\n   * The image used to start a container. Image or taskDefinition must be specified, but not both.\n   *\n   * @default - none\n   */\n  readonly image: ContainerImage;\n\n  /**\n   * The command that is passed to the container.\n   *\n   * If you provide a shell command as a single string, you have to quote command-line arguments.\n   *\n   * @default - CMD value built into container image.\n   */\n  readonly command?: string[];\n\n  /**\n   * The environment variables to pass to the container.\n   *\n   * @default none\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * The secret to expose to the container as an environment variable.\n   *\n   * @default - No secret environment variables.\n   */\n  readonly secrets?: { [key: string]: Secret };\n\n  /**\n   * The log driver to use.\n   *\n   * @default - AwsLogDriver if enableLogging is true\n   */\n  readonly logDriver?: LogDriver;\n}\n\n/**\n * The base class for ScheduledEc2Task and ScheduledFargateTask tasks.\n */\nexport abstract class ScheduledTaskBase extends Construct {\n  /**\n   * The name of the cluster that hosts the service.\n   */\n  public readonly cluster: ICluster;\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   *\n   * The minimum value is 1\n   */\n  public readonly desiredTaskCount: number;\n\n  /**\n   * In what subnets to place the task's ENIs\n   *\n   * (Only applicable in case the TaskDefinition is configured for AwsVpc networking)\n   *\n   * @default Private subnets\n   */\n  public readonly subnetSelection: SubnetSelection;\n\n  /**\n   * The CloudWatch Events rule for the service.\n   */\n  public readonly eventRule: Rule;\n\n  /**\n   * The security group to use for the ECS Task.\n   */\n  private readonly _securityGroups?: ISecurityGroup[];\n\n  /**\n   * Constructs a new instance of the ScheduledTaskBase class.\n   */\n  constructor(scope: Construct, id: string, props: ScheduledTaskBaseProps) {\n    super(scope, id);\n\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n    if (props.desiredTaskCount !== undefined && props.desiredTaskCount < 1) {\n      throw new Error('You must specify a desiredTaskCount greater than 0');\n    }\n    this.desiredTaskCount = props.desiredTaskCount || 1;\n    this.subnetSelection = props.subnetSelection || { subnetType: SubnetType.PRIVATE };\n    this._securityGroups = props.securityGroups;\n\n    // An EventRule that describes the event trigger (in this case a scheduled run)\n    this.eventRule = new Rule(this, 'ScheduledEventRule', {\n      schedule: props.schedule,\n      ruleName: props.ruleName,\n      enabled: props.enabled,\n    });\n\n    // add a warning on synth when minute is not defined in a cron schedule\n    props.schedule._bind(scope);\n  }\n\n  /**\n   * Create an ECS task using the task definition provided and add it to the scheduled event rule.\n   *\n   * @param taskDefinition the TaskDefinition to add to the event rule\n   */\n  protected addTaskDefinitionToEventTarget(taskDefinition: TaskDefinition): EcsTask {\n    // Use the EcsTask as the target of the EventRule\n    const eventRuleTarget = new EcsTask( {\n      cluster: this.cluster,\n      taskDefinition,\n      taskCount: this.desiredTaskCount,\n      subnetSelection: this.subnetSelection,\n      securityGroups: this._securityGroups,\n    });\n\n    this.addTaskAsTarget(eventRuleTarget);\n\n    return eventRuleTarget;\n  }\n\n  /**\n   * Adds task as a target of the scheduled event rule.\n   *\n   * @param ecsTaskTarget the EcsTask to add to the event rule\n   */\n  protected addTaskAsTarget(ecsTaskTarget: EcsTask) {\n    this.eventRule.addTarget(ecsTaskTarget);\n  }\n\n  /**\n   * Returns the default cluster.\n   */\n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n  /**\n   * Create an AWS Log Driver with the provided streamPrefix\n   *\n   * @param prefix the Cloudwatch logging prefix\n   */\n  protected createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n}\n"],
  "mappings": "2NACA,UAAA,QAAA,kBAAA,EACA,UAAA,QAAA,kBAAA,EACA,aAAA,QAAA,qBAAA,EACA,qBAAA,QAAA,6BAAA,EACA,OAAA,QAAA,eAAA,EACA,aAAA,QAAA,YAAA,EA+GA,MAAsB,yBAA0B,cAAA,SAAS,CAkCvD,YAAY,MAAkB,GAAY,MAA6B,CACrE,MAAM,MAAO,EAAE,EAGf,sFADA,KAAK,QAAU,MAAM,SAAW,KAAK,kBAAkB,KAAM,MAAM,GAAG,EAClE,MAAM,mBAAqB,QAAa,MAAM,iBAAmB,EACnE,KAAM,IAAI,OAAM,oDAAoD,EAEtE,KAAK,iBAAmB,MAAM,kBAAoB,EAClD,KAAK,gBAAkB,MAAM,iBAAmB,CAAE,WAAY,UAAA,WAAW,OAAO,EAChF,KAAK,gBAAkB,MAAM,eAG7B,KAAK,UAAY,GAAI,cAAA,KAAK,KAAM,qBAAsB,CACpD,SAAU,MAAM,SAChB,SAAU,MAAM,SAChB,QAAS,MAAM,QAChB,EAGD,MAAM,SAAS,MAAM,KAAK,EAQlB,+BAA+B,eAA8B,4EAErE,KAAM,iBAAkB,GAAI,sBAAA,QAAS,CACnC,QAAS,KAAK,QACd,eACA,UAAW,KAAK,iBAChB,gBAAiB,KAAK,gBACtB,eAAgB,KAAK,gBACtB,EAED,YAAK,gBAAgB,eAAe,EAE7B,gBAQC,gBAAgB,cAAsB,+EAC9C,KAAK,UAAU,UAAU,aAAa,EAM9B,kBAAkB,MAAkB,IAAU,uDAEtD,KAAM,oBAAqB,6BAA6B,IAAM,IAAI,KAAK,GAAK,KACtE,MAAQ,OAAA,MAAM,GAAG,KAAK,EAC5B,MAAO,OAAM,KAAK,aAAa,kBAAkB,GAAgB,GAAI,WAAA,QAAQ,MAAO,mBAAoB,CAAE,GAAG,CAAE,EAQvG,mBAAmB,OAAc,CACzC,MAAO,IAAI,WAAA,aAAa,CAAE,aAAc,MAAM,CAAE,GArGpD,QAAA,kBAAA",
  "names": []
}
