{
  "version": 3,
  "sources": ["network-multiple-target-groups-service-base.ts"],
  "sourcesContent": ["import { IVpc } from '../../../aws-ec2';\nimport {\n  AwsLogDriver, BaseService, CloudMapOptions, Cluster, ContainerDefinition, ContainerImage, ICluster, LogDriver,\n  PropagatedTagSource, Protocol, Secret,\n} from '../../../aws-ecs';\nimport { NetworkListener, NetworkLoadBalancer, NetworkTargetGroup } from '../../../aws-elasticloadbalancingv2';\nimport { IRole } from '../../../aws-iam';\nimport { ARecord, IHostedZone, RecordTarget } from '../../../aws-route53';\nimport { LoadBalancerTarget } from '../../../aws-route53-targets';\nimport { CfnOutput, Duration, Stack } from '../../../core';\nimport { Construct } from 'constructs';\n\n/**\n * The properties for the base NetworkMultipleTargetGroupsEc2Service or NetworkMultipleTargetGroupsFargateService service.\n */\nexport interface NetworkMultipleTargetGroupsServiceBaseProps {\n  /**\n   * The name of the cluster that hosts the service.\n   *\n   * If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.\n   * @default - create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.\n   */\n  readonly cluster?: ICluster;\n\n  /**\n   * The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed.\n   *\n   * If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.\n   * @default - uses the VPC defined in the cluster or creates a new VPC.\n   */\n  readonly vpc?: IVpc;\n\n  /**\n   * The properties required to create a new task definition. Only one of TaskDefinition or TaskImageOptions must be specified.\n   *\n   * @default - none\n   */\n  readonly taskImageOptions?: NetworkLoadBalancedTaskImageProps;\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * The minimum value is 1\n   *\n   * @default - If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is 1;\n   * if true, the default is 1 for all new services and uses the existing services desired count\n   * when updating an existing service.\n   */\n  readonly desiredCount?: number;\n\n  /**\n   * Name of the service.\n   *\n   * @default - CloudFormation-generated name.\n   */\n  readonly serviceName?: string;\n\n  /**\n   * The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy\n   * Elastic Load Balancing target health checks after a task has first started.\n   *\n   * @default - defaults to 60 seconds if at least one load balancer is in-use and it is not already set\n   */\n  readonly healthCheckGracePeriod?: Duration;\n\n  /**\n   * The network load balancer that will serve traffic to the service.\n   *\n   * @default - a new load balancer with a listener will be created.\n   */\n  readonly loadBalancers?: NetworkLoadBalancerProps[];\n\n  /**\n   * Specifies whether to propagate the tags from the task definition or the service to the tasks in the service.\n   * Tags can only be propagated to the tasks within the service during service creation.\n   *\n   * @default - none\n   */\n  readonly propagateTags?: PropagatedTagSource;\n\n  /**\n   * Specifies whether to enable Amazon ECS managed tags for the tasks within the service. For more information, see\n   * [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)\n   *\n   * @default false\n   */\n  readonly enableECSManagedTags?: boolean;\n\n  /**\n   * The options for configuring an Amazon ECS service to use service discovery.\n   *\n   * @default - AWS Cloud Map service discovery is not enabled.\n   */\n  readonly cloudMapOptions?: CloudMapOptions;\n\n  /**\n   * Properties to specify NLB target groups.\n   *\n   * @default - default portMapping registered as target group and attached to the first defined listener\n   */\n  readonly targetGroups?: NetworkTargetProps[];\n}\n\n/**\n * Options for configuring a new container.\n */\nexport interface NetworkLoadBalancedTaskImageProps {\n  /**\n   * The image used to start a container. Image or taskDefinition must be specified, but not both.\n   *\n   * @default - none\n   */\n  readonly image: ContainerImage;\n\n  /**\n   * The environment variables to pass to the container.\n   *\n   * @default - No environment variables.\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * The secrets to expose to the container as an environment variable.\n   *\n   * @default - No secret environment variables.\n   */\n  readonly secrets?: { [key: string]: Secret };\n\n  /**\n   * Flag to indicate whether to enable logging.\n   *\n   * @default true\n   */\n  readonly enableLogging?: boolean;\n\n  /**\n   * The log driver to use.\n   *\n   * @default - AwsLogDriver if enableLogging is true\n   */\n  readonly logDriver?: LogDriver;\n\n  /**\n   * The name of the task execution IAM role that grants the Amazon ECS container agent permission to call AWS APIs on your behalf.\n   *\n   * @default - No value\n   */\n  readonly executionRole?: IRole;\n\n  /**\n   * The name of the task IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   *\n   * @default - A task role is automatically created for you.\n   */\n  readonly taskRole?: IRole;\n\n  /**\n   * The container name value to be specified in the task definition.\n   *\n   * @default - none\n   */\n  readonly containerName?: string;\n\n  /**\n   * A list of port numbers on the container that is bound to the user-specified or automatically assigned host port.\n   *\n   * If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\n   * If you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\n   * your container automatically receives a host port in the ephemeral port range.\n   *\n   * Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n   *\n   * For more information, see\n   * [hostPort](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PortMapping.html#ECS-Type-PortMapping-hostPort).\n   *\n   * @default - [80]\n   */\n  readonly containerPorts?: number[];\n\n  /**\n   * The name of a family that this task definition is registered to. A family groups multiple versions of a task definition.\n   *\n   * @default - Automatically generated name.\n   */\n  readonly family?: string;\n\n  /**\n   * A key/value map of labels to add to the container.\n   *\n   * @default - No labels.\n   */\n  readonly dockerLabels?: { [key: string]: string };\n}\n\n/**\n * Properties to define an network load balancer.\n */\nexport interface NetworkLoadBalancerProps {\n  /**\n   * Name of the load balancer.\n   */\n  readonly name: string;\n\n  /**\n   * Listeners (at least one listener) attached to this load balancer.\n   *\n   * @default - none\n   */\n  readonly listeners: NetworkListenerProps[];\n\n  /**\n   * Determines whether the Load Balancer will be internet-facing.\n   *\n   * @default true\n   */\n  readonly publicLoadBalancer?: boolean;\n\n  /**\n   * The domain name for the service, e.g. \"api.example.com.\"\n   *\n   * @default - No domain name.\n   */\n  readonly domainName?: string;\n\n  /**\n   * The Route53 hosted zone for the domain, e.g. \"example.com.\"\n   *\n   * @default - No Route53 hosted domain zone.\n   */\n  readonly domainZone?: IHostedZone;\n}\n\n/**\n * Properties to define an network listener.\n */\nexport interface NetworkListenerProps {\n  /**\n   * Name of the listener.\n   */\n  readonly name: string;\n\n  /**\n   * The port on which the listener listens for requests.\n   *\n   * @default 80\n   */\n  readonly port?: number;\n}\n\n/**\n * Properties to define a network load balancer target group.\n */\nexport interface NetworkTargetProps {\n  /**\n   * The port number of the container. Only applicable when using application/network load balancers.\n   */\n  readonly containerPort: number;\n\n  /**\n   * Name of the listener the target group attached to.\n   *\n   * @default - default listener (first added listener)\n   */\n  readonly listener?: string;\n}\n\n/**\n * The base class for NetworkMultipleTargetGroupsEc2Service and NetworkMultipleTargetGroupsFargateService classes.\n */\nexport abstract class NetworkMultipleTargetGroupsServiceBase extends Construct {\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * @deprecated - Use `internalDesiredCount` instead.\n   */\n  public readonly desiredCount: number;\n\n  /**\n   * The desired number of instantiations of the task definition to keep running on the service.\n   * The default is 1 for all new services and uses the existing services desired count\n   * when updating an existing service, if one is not provided.\n   */\n  public readonly internalDesiredCount?: number;\n\n  /**\n   * The Network Load Balancer for the service.\n   */\n  public readonly loadBalancer: NetworkLoadBalancer;\n\n  /**\n   * The listener for the service.\n   */\n  public readonly listener: NetworkListener;\n\n  /**\n   * The cluster that hosts the service.\n   */\n  public readonly cluster: ICluster;\n\n  protected logDriver?: LogDriver;\n  protected listeners = new Array<NetworkListener>();\n  protected targetGroups = new Array<NetworkTargetGroup>();\n\n  private loadBalancers = new Array<NetworkLoadBalancer>();\n\n  /**\n   * Constructs a new instance of the NetworkMultipleTargetGroupsServiceBase class.\n   */\n  constructor(scope: Construct, id: string, props: NetworkMultipleTargetGroupsServiceBaseProps = {}) {\n    super(scope, id);\n\n    this.validateInput(props);\n\n    this.cluster = props.cluster || this.getDefaultCluster(this, props.vpc);\n\n    this.desiredCount = props.desiredCount || 1;\n    this.internalDesiredCount = props.desiredCount;\n\n    if (props.taskImageOptions) {\n      this.logDriver = this.createLogDriver(props.taskImageOptions.enableLogging, props.taskImageOptions.logDriver);\n    }\n\n    if (props.loadBalancers) {\n      for (const lbProps of props.loadBalancers) {\n        const lb = this.createLoadBalancer(lbProps.name, lbProps.publicLoadBalancer);\n        this.loadBalancers.push(lb);\n        for (const listenerProps of lbProps.listeners) {\n          const listener = this.createListener(listenerProps.name, lb, listenerProps.port || 80);\n          this.listeners.push(listener);\n        }\n        this.createDomainName(lb, lbProps.domainName, lbProps.domainZone);\n        new CfnOutput(this, `LoadBalancerDNS${lb.node.id}`, { value: lb.loadBalancerDnsName });\n      }\n      // set up default load balancer and listener.\n      this.loadBalancer = this.loadBalancers[0];\n      this.listener = this.listeners[0];\n    } else {\n      this.loadBalancer = this.createLoadBalancer('LB');\n      this.listener = this.createListener('PublicListener', this.loadBalancer, 80);\n      this.createDomainName(this.loadBalancer);\n\n      new CfnOutput(this, 'LoadBalancerDNS', { value: this.loadBalancer.loadBalancerDnsName });\n    }\n  }\n\n  /**\n   * Returns the default cluster.\n   */\n  protected getDefaultCluster(scope: Construct, vpc?: IVpc): Cluster {\n    // magic string to avoid collision with user-defined constructs.\n    const DEFAULT_CLUSTER_ID = `EcsDefaultClusterMnL3mNNYN${vpc ? vpc.node.id : ''}`;\n    const stack = Stack.of(scope);\n    return stack.node.tryFindChild(DEFAULT_CLUSTER_ID) as Cluster || new Cluster(stack, DEFAULT_CLUSTER_ID, { vpc });\n  }\n\n  protected createAWSLogDriver(prefix: string): AwsLogDriver {\n    return new AwsLogDriver({ streamPrefix: prefix });\n  }\n\n  protected findListener(name?: string): NetworkListener {\n    if (!name) {\n      return this.listener;\n    }\n    for (const listener of this.listeners) {\n      if (listener.node.id === name) {\n        return listener;\n      }\n    }\n    throw new Error(`Listener ${name} is not defined. Did you define listener with name ${name}?`);\n  }\n\n  protected registerECSTargets(service: BaseService, container: ContainerDefinition, targets: NetworkTargetProps[]): NetworkTargetGroup {\n    for (const targetProps of targets) {\n      const targetGroup = this.findListener(targetProps.listener).addTargets(`ECSTargetGroup${container.containerName}${targetProps.containerPort}`, {\n        port: targetProps.containerPort ?? 80,\n        targets: [\n          service.loadBalancerTarget({\n            containerName: container.containerName,\n            containerPort: targetProps.containerPort,\n          }),\n        ],\n      });\n      this.targetGroups.push(targetGroup);\n    }\n    if (this.targetGroups.length === 0) {\n      throw new Error('At least one target group should be specified.');\n    }\n    return this.targetGroups[0];\n  }\n\n  protected addPortMappingForTargets(container: ContainerDefinition, targets: NetworkTargetProps[]) {\n    for (const target of targets) {\n      if (!container.findPortMapping(target.containerPort, Protocol.TCP)) {\n        container.addPortMappings({\n          containerPort: target.containerPort,\n        });\n      }\n    }\n  }\n\n  /**\n   * Create log driver if logging is enabled.\n   */\n  private createLogDriver(enableLoggingProp?: boolean, logDriverProp?: LogDriver): LogDriver | undefined {\n    const enableLogging = enableLoggingProp ?? true;\n    const logDriver = logDriverProp ?? (enableLogging ? this.createAWSLogDriver(this.node.id) : undefined);\n    return logDriver;\n  }\n\n  private validateInput(props: NetworkMultipleTargetGroupsServiceBaseProps) {\n    if (props.cluster && props.vpc) {\n      throw new Error('You can only specify either vpc or cluster. Alternatively, you can leave both blank');\n    }\n\n    if (props.desiredCount !== undefined && props.desiredCount < 1) {\n      throw new Error('You must specify a desiredCount greater than 0');\n    }\n\n    if (props.loadBalancers) {\n      if (props.loadBalancers.length === 0) {\n        throw new Error('At least one load balancer must be specified');\n      }\n      for (const lbProps of props.loadBalancers) {\n        if (lbProps.listeners.length === 0) {\n          throw new Error('At least one listener must be specified');\n        }\n      }\n    }\n  }\n\n  private createLoadBalancer(name: string, publicLoadBalancer?: boolean): NetworkLoadBalancer {\n    const internetFacing = publicLoadBalancer ?? true;\n    const lbProps = {\n      vpc: this.cluster.vpc,\n      internetFacing,\n    };\n\n    return new NetworkLoadBalancer(this, name, lbProps);\n  }\n\n  private createListener(name: string, lb: NetworkLoadBalancer, port: number): NetworkListener {\n    return lb.addListener(name, {\n      port,\n    });\n  }\n\n  private createDomainName(loadBalancer: NetworkLoadBalancer, name?: string, zone?: IHostedZone) {\n    if (typeof name !== 'undefined') {\n      if (typeof zone === 'undefined') {\n        throw new Error('A Route53 hosted domain zone name is required to configure the specified domain name');\n      }\n\n      new ARecord(this, `DNS${loadBalancer.node.id}`, {\n        zone,\n        recordName: name,\n        target: RecordTarget.fromAlias(new LoadBalancerTarget(loadBalancer)),\n      });\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
