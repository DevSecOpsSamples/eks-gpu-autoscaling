{
  "version": 3,
  "sources": ["scheduled-ecs-task.ts"],
  "sourcesContent": ["import { Ec2TaskDefinition } from '../../../aws-ecs';\nimport { EcsTask } from '../../../aws-events-targets';\nimport { Construct } from 'constructs';\nimport { ScheduledTaskBase, ScheduledTaskBaseProps, ScheduledTaskImageProps } from '../base/scheduled-task-base';\n\n/**\n * The properties for the ScheduledEc2Task task.\n */\nexport interface ScheduledEc2TaskProps extends ScheduledTaskBaseProps {\n  /**\n   * The properties to define if using an existing TaskDefinition in this construct.\n   * ScheduledEc2TaskDefinitionOptions or ScheduledEc2TaskImageOptions must be defined, but not both.\n   *\n   * @default none\n   */\n  readonly scheduledEc2TaskDefinitionOptions?: ScheduledEc2TaskDefinitionOptions;\n\n  /**\n   * The properties to define if the construct is to create a TaskDefinition.\n   * ScheduledEc2TaskDefinitionOptions or ScheduledEc2TaskImageOptions must be defined, but not both.\n   *\n   * @default none\n   */\n  readonly scheduledEc2TaskImageOptions?: ScheduledEc2TaskImageOptions;\n}\n\n/**\n * The properties for the ScheduledEc2Task using an image.\n */\nexport interface ScheduledEc2TaskImageOptions extends ScheduledTaskImageProps {\n  /**\n   * The minimum number of CPU units to reserve for the container.\n   *\n   * @default none\n   */\n  readonly cpu?: number;\n\n  /**\n   * The hard limit (in MiB) of memory to present to the container.\n   *\n   * If your container attempts to exceed the allocated memory, the container\n   * is terminated.\n   *\n   * At least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.\n   *\n   * @default - No memory limit.\n   */\n  readonly memoryLimitMiB?: number;\n\n  /**\n   * The soft limit (in MiB) of memory to reserve for the container.\n   *\n   * When system memory is under contention, Docker attempts to keep the\n   * container memory within the limit. If the container requires more memory,\n   * it can consume up to the value specified by the Memory property or all of\n   * the available memory on the container instance\u2014whichever comes first.\n   *\n   * At least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.\n   *\n   * @default - No memory reserved.\n   */\n  readonly memoryReservationMiB?: number;\n}\n\n/**\n * The properties for the ScheduledEc2Task using a task definition.\n */\nexport interface ScheduledEc2TaskDefinitionOptions {\n  /**\n   * The task definition to use for tasks in the service. One of image or taskDefinition must be specified.\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - none\n   */\n  readonly taskDefinition: Ec2TaskDefinition;\n}\n\n/**\n * A scheduled EC2 task that will be initiated off of CloudWatch Events.\n */\nexport class ScheduledEc2Task extends ScheduledTaskBase {\n\n  /**\n   * The EC2 task definition in this construct.\n   */\n  public readonly taskDefinition: Ec2TaskDefinition;\n\n  /**\n   * The ECS task in this construct.\n   */\n  public readonly task: EcsTask;\n\n  /**\n   * Constructs a new instance of the ScheduledEc2Task class.\n   */\n  constructor(scope: Construct, id: string, props: ScheduledEc2TaskProps) {\n    super(scope, id, props);\n\n    if (props.scheduledEc2TaskDefinitionOptions && props.scheduledEc2TaskImageOptions) {\n      throw new Error('You must specify either a scheduledEc2TaskDefinitionOptions or scheduledEc2TaskOptions, not both.');\n    } else if (props.scheduledEc2TaskDefinitionOptions) {\n      this.taskDefinition = props.scheduledEc2TaskDefinitionOptions.taskDefinition;\n    } else if (props.scheduledEc2TaskImageOptions) {\n      const taskImageOptions = props.scheduledEc2TaskImageOptions;\n      // Create a Task Definition for the container to start, also creates a log driver\n      this.taskDefinition = new Ec2TaskDefinition(this, 'ScheduledTaskDef');\n      this.taskDefinition.addContainer('ScheduledContainer', {\n        image: taskImageOptions.image,\n        memoryLimitMiB: taskImageOptions.memoryLimitMiB,\n        memoryReservationMiB: taskImageOptions.memoryReservationMiB,\n        cpu: taskImageOptions.cpu,\n        command: taskImageOptions.command,\n        environment: taskImageOptions.environment,\n        secrets: taskImageOptions.secrets,\n        logging: taskImageOptions.logDriver ?? this.createAWSLogDriver(this.node.id),\n      });\n    } else {\n      throw new Error('You must specify a taskDefinition or image');\n    }\n\n    this.task = this.addTaskDefinitionToEventTarget(this.taskDefinition);\n  }\n}\n"],
  "mappings": "0NAAA,UAAA,QAAA,kBAAA,EAGA,sBAAA,QAAA,6BAAA,EA8EA,MAAa,wBAAyB,uBAAA,iBAAiB,CAerD,YAAY,MAAkB,GAAY,MAA4B,QACpE,MAAM,MAAO,GAAI,KAAK,EAEtB,qFAAI,MAAM,mCAAqC,MAAM,6BACnD,KAAM,IAAI,OAAM,mGAAmG,EAC9G,GAAI,MAAM,kCACf,KAAK,eAAiB,MAAM,kCAAkC,uBACrD,MAAM,6BAA8B,CAC7C,KAAM,kBAAmB,MAAM,6BAE/B,KAAK,eAAiB,GAAI,WAAA,kBAAkB,KAAM,kBAAkB,EACpE,KAAK,eAAe,aAAa,qBAAsB,CACrD,MAAO,iBAAiB,MACxB,eAAgB,iBAAiB,eACjC,qBAAsB,iBAAiB,qBACvC,IAAK,iBAAiB,IACtB,QAAS,iBAAiB,QAC1B,YAAa,iBAAiB,YAC9B,QAAS,iBAAiB,QAC1B,QAAO,IAAE,iBAAiB,aAAS,MAAA,KAAA,OAAA,GAAI,KAAK,mBAAmB,KAAK,KAAK,EAAE,EAC5E,MAED,MAAM,IAAI,OAAM,4CAA4C,EAG9D,KAAK,KAAO,KAAK,+BAA+B,KAAK,cAAc,GAxCvE,QAAA,iBAAA",
  "names": []
}
