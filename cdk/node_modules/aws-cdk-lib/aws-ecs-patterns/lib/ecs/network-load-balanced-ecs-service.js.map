{
  "version": 3,
  "sources": ["network-load-balanced-ecs-service.ts"],
  "sourcesContent": ["import { Ec2Service, Ec2TaskDefinition, PlacementConstraint, PlacementStrategy } from '../../../aws-ecs';\nimport { FeatureFlags } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { NetworkLoadBalancedServiceBase, NetworkLoadBalancedServiceBaseProps } from '../base/network-load-balanced-service-base';\n\n/**\n * The properties for the NetworkLoadBalancedEc2Service service.\n */\nexport interface NetworkLoadBalancedEc2ServiceProps extends NetworkLoadBalancedServiceBaseProps {\n  /**\n   * The task definition to use for tasks in the service. TaskDefinition or TaskImageOptions must be specified, but not both..\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - none\n   */\n  readonly taskDefinition?: Ec2TaskDefinition;\n\n  /**\n   * The number of cpu units used by the task.\n   *\n   * Valid values, which determines your range of valid values for the memory parameter:\n   *\n   * 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n   *\n   * 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n   *\n   * 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n   *\n   * 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n   *\n   * 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n   *\n   * This default is set in the underlying FargateTaskDefinition construct.\n   *\n   * @default none\n   */\n  readonly cpu?: number;\n  /**\n   * The hard limit (in MiB) of memory to present to the container.\n   *\n   * If your container attempts to exceed the allocated memory, the container\n   * is terminated.\n   *\n   * At least one of memoryLimitMiB and memoryReservationMiB is required.\n   *\n   * @default - No memory limit.\n   */\n  readonly memoryLimitMiB?: number;\n\n  /**\n   * The soft limit (in MiB) of memory to reserve for the container.\n   *\n   * When system memory is under contention, Docker attempts to keep the\n   * container memory within the limit. If the container requires more memory,\n   * it can consume up to the value specified by the Memory property or all of\n   * the available memory on the container instance\u2014whichever comes first.\n   *\n   * At least one of memoryLimitMiB and memoryReservationMiB is required.\n   *\n   * @default - No memory reserved.\n   */\n  readonly memoryReservationMiB?: number;\n\n  /**\n   * The placement constraints to use for tasks in the service. For more information, see\n   * [Amazon ECS Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html).\n   *\n   * @default - No constraints.\n   */\n  readonly placementConstraints?: PlacementConstraint[];\n\n  /**\n   * The placement strategies to use for tasks in the service. For more information, see\n   * [Amazon ECS Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).\n   *\n   * @default - No strategies.\n  */\n  readonly placementStrategies?: PlacementStrategy[];\n}\n\n/**\n * An EC2 service running on an ECS cluster fronted by a network load balancer.\n */\nexport class NetworkLoadBalancedEc2Service extends NetworkLoadBalancedServiceBase {\n\n  /**\n   * The ECS service in this construct.\n   */\n  public readonly service: Ec2Service;\n  /**\n   * The EC2 Task Definition in this construct.\n   */\n  public readonly taskDefinition: Ec2TaskDefinition;\n\n  /**\n   * Constructs a new instance of the NetworkLoadBalancedEc2Service class.\n   */\n  constructor(scope: Construct, id: string, props: NetworkLoadBalancedEc2ServiceProps = {}) {\n    super(scope, id, props);\n\n    if (props.taskDefinition && props.taskImageOptions) {\n      throw new Error('You must specify either a taskDefinition or an image, not both.');\n    } else if (props.taskDefinition) {\n      this.taskDefinition = props.taskDefinition;\n    } else if (props.taskImageOptions) {\n      const taskImageOptions = props.taskImageOptions;\n      this.taskDefinition = new Ec2TaskDefinition(this, 'TaskDef', {\n        executionRole: taskImageOptions.executionRole,\n        taskRole: taskImageOptions.taskRole,\n        family: taskImageOptions.family,\n      });\n\n      // Create log driver if logging is enabled\n      const enableLogging = taskImageOptions.enableLogging ?? true;\n      const logDriver = taskImageOptions.logDriver ?? (enableLogging ? this.createAWSLogDriver(this.node.id) : undefined);\n\n      const containerName = taskImageOptions.containerName ?? 'web';\n      const container = this.taskDefinition.addContainer(containerName, {\n        image: taskImageOptions.image,\n        cpu: props.cpu,\n        memoryLimitMiB: props.memoryLimitMiB,\n        memoryReservationMiB: props.memoryReservationMiB,\n        environment: taskImageOptions.environment,\n        secrets: taskImageOptions.secrets,\n        logging: logDriver,\n        dockerLabels: taskImageOptions.dockerLabels,\n      });\n      container.addPortMappings({\n        containerPort: taskImageOptions.containerPort || 80,\n      });\n    } else {\n      throw new Error('You must specify one of: taskDefinition or image');\n    }\n\n    const desiredCount = FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT) ? this.internalDesiredCount : this.desiredCount;\n\n    this.service = new Ec2Service(this, 'Service', {\n      cluster: this.cluster,\n      desiredCount: desiredCount,\n      taskDefinition: this.taskDefinition,\n      assignPublicIp: false,\n      serviceName: props.serviceName,\n      healthCheckGracePeriod: props.healthCheckGracePeriod,\n      minHealthyPercent: props.minHealthyPercent,\n      maxHealthyPercent: props.maxHealthyPercent,\n      propagateTags: props.propagateTags,\n      enableECSManagedTags: props.enableECSManagedTags,\n      cloudMapOptions: props.cloudMapOptions,\n      deploymentController: props.deploymentController,\n      circuitBreaker: props.circuitBreaker,\n      placementConstraints: props.placementConstraints,\n      placementStrategies: props.placementStrategies,\n    });\n    this.addServiceAsTarget(this.service);\n  }\n}\n"],
  "mappings": "uOAAA,UAAA,QAAA,kBAAA,EACA,OAAA,QAAA,eAAA,EACA,MAAA,QAAA,iBAAA,EAEA,qCAAA,QAAA,4CAAA,EAiFA,MAAa,qCAAsC,sCAAA,8BAA8B,CAc/E,YAAY,MAAkB,GAAY,MAA4C,CAAA,EAAE,cACtF,MAAM,MAAO,GAAI,KAAK,EAEtB,kGAAI,MAAM,gBAAkB,MAAM,iBAChC,KAAM,IAAI,OAAM,iEAAiE,EAC5E,GAAI,MAAM,eACf,KAAK,eAAiB,MAAM,uBACnB,MAAM,iBAAkB,CACjC,KAAM,kBAAmB,MAAM,iBAC/B,KAAK,eAAiB,GAAI,WAAA,kBAAkB,KAAM,UAAW,CAC3D,cAAe,iBAAiB,cAChC,SAAU,iBAAiB,SAC3B,OAAQ,iBAAiB,OAC1B,EAGD,KAAM,eAAa,IAAG,iBAAiB,iBAAa,MAAA,KAAA,OAAA,GAAI,GAClD,UAAS,IAAG,iBAAiB,aAAS,MAAA,KAAA,OAAA,GAAK,cAAgB,KAAK,mBAAmB,KAAK,KAAK,EAAE,EAAI,OAEnG,cAAa,IAAG,iBAAiB,iBAAa,MAAA,KAAA,OAAA,GAAI,MAWxD,AAVkB,KAAK,eAAe,aAAa,cAAe,CAChE,MAAO,iBAAiB,MACxB,IAAK,MAAM,IACX,eAAgB,MAAM,eACtB,qBAAsB,MAAM,qBAC5B,YAAa,iBAAiB,YAC9B,QAAS,iBAAiB,QAC1B,QAAS,UACT,aAAc,iBAAiB,aAChC,EACS,gBAAgB,CACxB,cAAe,iBAAiB,eAAiB,GAClD,MAED,MAAM,IAAI,OAAM,kDAAkD,EAGpE,KAAM,cAAe,OAAA,aAAa,GAAG,IAAI,EAAE,UAAU,MAAM,gCAAgC,EAAI,KAAK,qBAAuB,KAAK,aAEhI,KAAK,QAAU,GAAI,WAAA,WAAW,KAAM,UAAW,CAC7C,QAAS,KAAK,QACd,aACA,eAAgB,KAAK,eACrB,eAAgB,GAChB,YAAa,MAAM,YACnB,uBAAwB,MAAM,uBAC9B,kBAAmB,MAAM,kBACzB,kBAAmB,MAAM,kBACzB,cAAe,MAAM,cACrB,qBAAsB,MAAM,qBAC5B,gBAAiB,MAAM,gBACvB,qBAAsB,MAAM,qBAC5B,eAAgB,MAAM,eACtB,qBAAsB,MAAM,qBAC5B,oBAAqB,MAAM,oBAC5B,EACD,KAAK,mBAAmB,KAAK,OAAO,GAtExC,QAAA,8BAAA",
  "names": []
}
