{
  "version": 3,
  "sources": ["application-multiple-target-groups-ecs-service.ts"],
  "sourcesContent": ["import { Ec2Service, Ec2TaskDefinition, PlacementConstraint, PlacementStrategy } from '../../../aws-ecs';\nimport { ApplicationTargetGroup } from '../../../aws-elasticloadbalancingv2';\nimport { FeatureFlags } from '../../../core';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport {\n  ApplicationMultipleTargetGroupsServiceBase,\n  ApplicationMultipleTargetGroupsServiceBaseProps,\n} from '../base/application-multiple-target-groups-service-base';\n\n/**\n * The properties for the ApplicationMultipleTargetGroupsEc2Service service.\n */\nexport interface ApplicationMultipleTargetGroupsEc2ServiceProps extends ApplicationMultipleTargetGroupsServiceBaseProps {\n\n  /**\n   * The task definition to use for tasks in the service. Only one of TaskDefinition or TaskImageOptions must be specified.\n   *\n   * [disable-awslint:ref-via-interface]\n   *\n   * @default - none\n   */\n  readonly taskDefinition?: Ec2TaskDefinition;\n\n  /**\n   * The minimum number of CPU units to reserve for the container.\n   *\n   * Valid values, which determines your range of valid values for the memory parameter:\n   *\n   * @default - No minimum CPU units reserved.\n   */\n  readonly cpu?: number;\n\n  /**\n   * The amount (in MiB) of memory to present to the container.\n   *\n   * If your container attempts to exceed the allocated memory, the container\n   * is terminated.\n   *\n   * At least one of memoryLimitMiB and memoryReservationMiB is required.\n   *\n   * @default - No memory limit.\n   */\n  readonly memoryLimitMiB?: number;\n\n  /**\n   * The soft limit (in MiB) of memory to reserve for the container.\n   *\n   * When system memory is under heavy contention, Docker attempts to keep the\n   * container memory to this soft limit. However, your container can consume more\n   * memory when it needs to, up to either the hard limit specified with the memory\n   * parameter (if applicable), or all of the available memory on the container\n   * instance, whichever comes first.\n   *\n   * At least one of memoryLimitMiB and memoryReservationMiB is required.\n   *\n   * Note that this setting will be ignored if TaskImagesOptions is specified\n   *\n   * @default - No memory reserved.\n   */\n  readonly memoryReservationMiB?: number;\n\n  /**\n   * The placement constraints to use for tasks in the service. For more information, see\n   * [Amazon ECS Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html).\n   *\n   * @default - No constraints.\n   */\n  readonly placementConstraints?: PlacementConstraint[];\n\n  /**\n   * The placement strategies to use for tasks in the service. For more information, see\n   * [Amazon ECS Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).\n   *\n   * @default - No strategies.\n  */\n  readonly placementStrategies?: PlacementStrategy[];\n}\n\n/**\n * An EC2 service running on an ECS cluster fronted by an application load balancer.\n */\nexport class ApplicationMultipleTargetGroupsEc2Service extends ApplicationMultipleTargetGroupsServiceBase {\n\n  /**\n   * The EC2 service in this construct.\n   */\n  public readonly service: Ec2Service;\n  /**\n   * The EC2 Task Definition in this construct.\n   */\n  public readonly taskDefinition: Ec2TaskDefinition;\n  /**\n   * The default target group for the service.\n   */\n  public readonly targetGroup: ApplicationTargetGroup;\n\n  /**\n   * Constructs a new instance of the ApplicationMultipleTargetGroupsEc2Service class.\n   */\n  constructor(scope: Construct, id: string, props: ApplicationMultipleTargetGroupsEc2ServiceProps = {}) {\n    super(scope, id, props);\n\n    if (props.taskDefinition && props.taskImageOptions) {\n      throw new Error('You must specify only one of TaskDefinition or TaskImageOptions.');\n    } else if (props.taskDefinition) {\n      this.taskDefinition = props.taskDefinition;\n    } else if (props.taskImageOptions) {\n      const taskImageOptions = props.taskImageOptions;\n      this.taskDefinition = new Ec2TaskDefinition(this, 'TaskDef', {\n        executionRole: taskImageOptions.executionRole,\n        taskRole: taskImageOptions.taskRole,\n      });\n\n      const containerName = taskImageOptions.containerName ?? 'web';\n      const container = this.taskDefinition.addContainer(containerName, {\n        image: taskImageOptions.image,\n        cpu: props.cpu,\n        memoryLimitMiB: props.memoryLimitMiB,\n        memoryReservationMiB: props.memoryReservationMiB,\n        environment: taskImageOptions.environment,\n        secrets: taskImageOptions.secrets,\n        logging: this.logDriver,\n        dockerLabels: taskImageOptions.dockerLabels,\n      });\n      if (taskImageOptions.containerPorts) {\n        for (const containerPort of taskImageOptions.containerPorts) {\n          container.addPortMappings({\n            containerPort,\n          });\n        }\n      }\n    } else {\n      throw new Error('You must specify one of: taskDefinition or image');\n    }\n    if (!this.taskDefinition.defaultContainer) {\n      throw new Error('At least one essential container must be specified');\n    }\n    if (this.taskDefinition.defaultContainer.portMappings.length === 0) {\n      this.taskDefinition.defaultContainer.addPortMappings({\n        containerPort: 80,\n      });\n    }\n\n    this.service = this.createEc2Service(props);\n    if (props.targetGroups) {\n      this.addPortMappingForTargets(this.taskDefinition.defaultContainer, props.targetGroups);\n      this.targetGroup = this.registerECSTargets(this.service, this.taskDefinition.defaultContainer, props.targetGroups);\n    } else {\n      this.targetGroup = this.listener.addTargets('ECS', {\n        targets: [this.service],\n        port: this.taskDefinition.defaultContainer.portMappings[0].containerPort,\n      });\n    }\n  }\n\n  private createEc2Service(props: ApplicationMultipleTargetGroupsEc2ServiceProps): Ec2Service {\n    const desiredCount = FeatureFlags.of(this).isEnabled(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT) ? this.internalDesiredCount : this.desiredCount;\n\n    return new Ec2Service(this, 'Service', {\n      cluster: this.cluster,\n      desiredCount: desiredCount,\n      taskDefinition: this.taskDefinition,\n      assignPublicIp: false,\n      serviceName: props.serviceName,\n      healthCheckGracePeriod: props.healthCheckGracePeriod,\n      propagateTags: props.propagateTags,\n      enableECSManagedTags: props.enableECSManagedTags,\n      cloudMapOptions: props.cloudMapOptions,\n      placementConstraints: props.placementConstraints,\n      placementStrategies: props.placementStrategies,\n    });\n  }\n}\n"],
  "mappings": "mPAAA,UAAA,QAAA,kBAAA,EAEA,OAAA,QAAA,eAAA,EACA,MAAA,QAAA,iBAAA,EAEA,kDAAA,QAAA,yDAAA,EA6EA,MAAa,iDAAkD,mDAAA,0CAA0C,CAkBvG,YAAY,MAAkB,GAAY,MAAwD,CAAA,EAAE,QAClG,MAAM,MAAO,GAAI,KAAK,EAEtB,8GAAI,MAAM,gBAAkB,MAAM,iBAChC,KAAM,IAAI,OAAM,kEAAkE,EAC7E,GAAI,MAAM,eACf,KAAK,eAAiB,MAAM,uBACnB,MAAM,iBAAkB,CACjC,KAAM,kBAAmB,MAAM,iBAC/B,KAAK,eAAiB,GAAI,WAAA,kBAAkB,KAAM,UAAW,CAC3D,cAAe,iBAAiB,cAChC,SAAU,iBAAiB,SAC5B,EAED,KAAM,eAAa,IAAG,iBAAiB,iBAAa,MAAA,KAAA,OAAA,GAAI,MAClD,UAAY,KAAK,eAAe,aAAa,cAAe,CAChE,MAAO,iBAAiB,MACxB,IAAK,MAAM,IACX,eAAgB,MAAM,eACtB,qBAAsB,MAAM,qBAC5B,YAAa,iBAAiB,YAC9B,QAAS,iBAAiB,QAC1B,QAAS,KAAK,UACd,aAAc,iBAAiB,aAChC,EACD,GAAI,iBAAiB,eACnB,SAAW,iBAAiB,kBAAiB,eAC3C,UAAU,gBAAgB,CACxB,cACD,MAIL,MAAM,IAAI,OAAM,kDAAkD,EAEpE,GAAI,CAAC,KAAK,eAAe,iBACvB,KAAM,IAAI,OAAM,oDAAoD,EAEtE,AAAI,KAAK,eAAe,iBAAiB,aAAa,SAAW,GAC/D,KAAK,eAAe,iBAAiB,gBAAgB,CACnD,cAAe,GAChB,EAGH,KAAK,QAAU,KAAK,iBAAiB,KAAK,EAC1C,AAAI,MAAM,aACR,MAAK,yBAAyB,KAAK,eAAe,iBAAkB,MAAM,YAAY,EACtF,KAAK,YAAc,KAAK,mBAAmB,KAAK,QAAS,KAAK,eAAe,iBAAkB,MAAM,YAAY,GAEjH,KAAK,YAAc,KAAK,SAAS,WAAW,MAAO,CACjD,QAAS,CAAC,KAAK,OAAO,EACtB,KAAM,KAAK,eAAe,iBAAiB,aAAa,GAAG,cAC5D,EAIG,iBAAiB,MAAqD,CAC5E,KAAM,cAAe,OAAA,aAAa,GAAG,IAAI,EAAE,UAAU,MAAM,gCAAgC,EAAI,KAAK,qBAAuB,KAAK,aAEhI,MAAO,IAAI,WAAA,WAAW,KAAM,UAAW,CACrC,QAAS,KAAK,QACd,aACA,eAAgB,KAAK,eACrB,eAAgB,GAChB,YAAa,MAAM,YACnB,uBAAwB,MAAM,uBAC9B,cAAe,MAAM,cACrB,qBAAsB,MAAM,qBAC5B,gBAAiB,MAAM,gBACvB,qBAAsB,MAAM,qBAC5B,oBAAqB,MAAM,oBAC5B,GAzFL,QAAA,0CAAA",
  "names": []
}
