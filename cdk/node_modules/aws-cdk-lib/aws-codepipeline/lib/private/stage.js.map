{
  "version": 3,
  "sources": ["stage.ts"],
  "sourcesContent": ["import * as events from '../../../aws-events';\nimport * as cdk from '../../../core';\nimport { Token } from '../../../core';\nimport { Construct, Node } from 'constructs';\nimport { IAction, IPipeline, IStage } from '../action';\nimport { Artifact } from '../artifact';\nimport { CfnPipeline } from '../codepipeline.generated';\nimport { Pipeline, StageProps } from '../pipeline';\nimport { FullActionDescriptor } from './full-action-descriptor';\nimport * as validation from './validation';\n\n/**\n * A Stage in a Pipeline.\n *\n * Stages are added to a Pipeline by calling {@link Pipeline#addStage},\n * which returns an instance of {@link codepipeline.IStage}.\n *\n * This class is private to the CodePipeline module.\n */\nexport class Stage implements IStage {\n  /**\n   * The Pipeline this Stage is a part of.\n   */\n  public readonly stageName: string;\n  private readonly scope: Construct;\n  private readonly _pipeline: Pipeline;\n  private readonly _actions = new Array<FullActionDescriptor>();\n\n  /**\n   * Create a new Stage.\n   */\n  constructor(props: StageProps, pipeline: Pipeline) {\n    validation.validateName('Stage', props.stageName);\n\n    this.stageName = props.stageName;\n    this._pipeline = pipeline;\n    this.scope = new Construct(pipeline, this.stageName);\n\n    for (const action of props.actions || []) {\n      this.addAction(action);\n    }\n  }\n\n  /**\n   * Get a duplicate of this stage's list of actions.\n   */\n  public get actionDescriptors(): FullActionDescriptor[] {\n    return this._actions.slice();\n  }\n\n  public get actions(): IAction[] {\n    return this._actions.map(actionDescriptor => actionDescriptor.action);\n  }\n\n  public get pipeline(): IPipeline {\n    return this._pipeline;\n  }\n\n  public render(): CfnPipeline.StageDeclarationProperty {\n    // first, assign names to output Artifacts who don't have one\n    for (const action of this._actions) {\n      const outputArtifacts = action.outputs;\n\n      const unnamedOutputs = outputArtifacts.filter(o => !o.artifactName);\n\n      for (const outputArtifact of outputArtifacts) {\n        if (!outputArtifact.artifactName) {\n          const unsanitizedArtifactName = `Artifact_${this.stageName}_${action.actionName}` + (unnamedOutputs.length === 1\n            ? ''\n            : '_' + (unnamedOutputs.indexOf(outputArtifact) + 1));\n          const artifactName = sanitizeArtifactName(unsanitizedArtifactName);\n          (outputArtifact as any)._setName(artifactName);\n        }\n      }\n    }\n\n    return {\n      name: this.stageName,\n      actions: this._actions.map(action => this.renderAction(action)),\n    };\n  }\n\n  public addAction(action: IAction): void {\n    const actionName = action.actionProperties.actionName;\n    // validate the name\n    validation.validateName('Action', actionName);\n\n    // check for duplicate Actions and names\n    if (this._actions.find(a => a.actionName === actionName)) {\n      throw new Error(`Stage ${this.stageName} already contains an action with name '${actionName}'`);\n    }\n\n    this._actions.push(this.attachActionToPipeline(action));\n  }\n\n  public onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule {\n    const rule = new events.Rule(this.scope, name, options);\n    rule.addTarget(target);\n    rule.addEventPattern({\n      detailType: ['CodePipeline Stage Execution State Change'],\n      source: ['aws.codepipeline'],\n      resources: [this.pipeline.pipelineArn],\n      detail: {\n        stage: [this.stageName],\n      },\n    });\n    return rule;\n  }\n\n  public validate(): string[] {\n    return [\n      ...this.validateHasActions(),\n      ...this.validateActions(),\n    ];\n  }\n\n  private validateHasActions(): string[] {\n    if (this._actions.length === 0) {\n      return [`Stage '${this.stageName}' must have at least one action`];\n    }\n    return [];\n  }\n\n  private validateActions(): string[] {\n    const ret = new Array<string>();\n    for (const action of this.actionDescriptors) {\n      ret.push(...this.validateAction(action));\n    }\n    return ret;\n  }\n\n  private validateAction(action: FullActionDescriptor): string[] {\n    return validation.validateArtifactBounds('input', action.inputs, action.artifactBounds.minInputs,\n      action.artifactBounds.maxInputs, action.category, action.provider)\n      .concat(validation.validateArtifactBounds('output', action.outputs, action.artifactBounds.minOutputs,\n        action.artifactBounds.maxOutputs, action.category, action.provider),\n      );\n  }\n\n  private attachActionToPipeline(action: IAction): FullActionDescriptor {\n    // notify the Pipeline of the new Action\n    //\n    // It may be that a construct already exists with the given action name (CDK Pipelines\n    // may do this to maintain construct tree compatibility between versions).\n    //\n    // If so, we simply reuse it.\n    let actionScope = Node.of(this.scope).tryFindChild(action.actionProperties.actionName) as Construct | undefined;\n    if (!actionScope) {\n      let id = action.actionProperties.actionName;\n      if (Token.isUnresolved(id)) {\n        id = findUniqueConstructId(this.scope, action.actionProperties.provider);\n      }\n      actionScope = new Construct(this.scope, id);\n    }\n    return this._pipeline._attachActionToPipeline(this, action, actionScope);\n  }\n\n  private renderAction(action: FullActionDescriptor): CfnPipeline.ActionDeclarationProperty {\n    const outputArtifacts = cdk.Lazy.any({ produce: () => this.renderArtifacts(action.outputs) }, { omitEmptyArray: true });\n    const inputArtifacts = cdk.Lazy.any({ produce: () => this.renderArtifacts(action.inputs) }, { omitEmptyArray: true });\n    return {\n      name: action.actionName,\n      inputArtifacts,\n      outputArtifacts,\n      actionTypeId: {\n        category: action.category.toString(),\n        version: action.version,\n        owner: action.owner,\n        provider: action.provider,\n      },\n      configuration: action.configuration,\n      runOrder: action.runOrder,\n      roleArn: action.role ? action.role.roleArn : undefined,\n      region: action.region,\n      namespace: action.namespace,\n    };\n  }\n\n  private renderArtifacts(artifacts: Artifact[]): CfnPipeline.InputArtifactProperty[] {\n    return artifacts\n      .filter(a => a.artifactName)\n      .map(a => ({ name: a.artifactName! }));\n  }\n}\n\nfunction sanitizeArtifactName(artifactName: string): string {\n  // strip out some characters that are legal in Stage and Action names,\n  // but not in Artifact names\n  return artifactName.replace(/[@.]/g, '');\n}\n\nfunction findUniqueConstructId(scope: Construct, prefix: string) {\n  let current = prefix;\n  let ctr = 1;\n  while (Node.of(scope).tryFindChild(current) !== undefined) {\n    current = `${prefix}${++ctr}`;\n  }\n  return current;\n}\n"],
  "mappings": "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",
  "names": []
}
