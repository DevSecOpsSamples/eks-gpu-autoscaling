{
  "version": 3,
  "sources": ["full-action-descriptor.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport { ActionArtifactBounds, ActionCategory, ActionConfig, IAction } from '../action';\nimport { Artifact } from '../artifact';\n\nexport interface FullActionDescriptorProps {\n  readonly action: IAction;\n  readonly actionConfig: ActionConfig;\n  readonly actionRole: iam.IRole | undefined;\n  readonly actionRegion: string | undefined;\n}\n\n/**\n * This class is private to the aws-codepipeline package.\n */\nexport class FullActionDescriptor {\n  public readonly action: IAction;\n  public readonly actionName: string;\n  public readonly category: ActionCategory;\n  public readonly owner: string;\n  public readonly provider: string;\n  public readonly version: string;\n  public readonly runOrder: number;\n  public readonly artifactBounds: ActionArtifactBounds;\n  public readonly namespace?: string;\n  public readonly inputs: Artifact[];\n  public readonly outputs: Artifact[];\n  public readonly region?: string;\n  public readonly role?: iam.IRole;\n  public readonly configuration: any;\n\n  constructor(props: FullActionDescriptorProps) {\n    this.action = props.action;\n    const actionProperties = props.action.actionProperties;\n    this.actionName = actionProperties.actionName;\n    this.category = actionProperties.category;\n    this.owner = actionProperties.owner || 'AWS';\n    this.provider = actionProperties.provider;\n    this.version = actionProperties.version || '1';\n    this.runOrder = actionProperties.runOrder ?? 1;\n    this.artifactBounds = actionProperties.artifactBounds;\n    this.namespace = actionProperties.variablesNamespace;\n    this.inputs = deduplicateArtifacts(actionProperties.inputs);\n    this.outputs = deduplicateArtifacts(actionProperties.outputs);\n    this.region = props.actionRegion || actionProperties.region;\n    this.role = actionProperties.role ?? props.actionRole;\n\n    this.configuration = props.actionConfig.configuration;\n  }\n}\n\nfunction deduplicateArtifacts(artifacts?: Artifact[]): Artifact[] {\n  const ret = new Array<Artifact>();\n  for (const artifact of artifacts || []) {\n    if (artifact.artifactName) {\n      if (ret.find(a => a.artifactName === artifact.artifactName)) {\n        continue;\n      }\n    } else {\n      if (ret.find(a => a === artifact)) {\n        continue;\n      }\n    }\n\n    ret.push(artifact);\n  }\n  return ret;\n}\n"],
  "mappings": "wGAcA,MAAa,oBAAoB,CAgB/B,YAAY,MAAgC,WAC1C,KAAK,OAAS,MAAM,OACpB,KAAM,kBAAmB,MAAM,OAAO,iBACtC,KAAK,WAAa,iBAAiB,WACnC,KAAK,SAAW,iBAAiB,SACjC,KAAK,MAAQ,iBAAiB,OAAS,MACvC,KAAK,SAAW,iBAAiB,SACjC,KAAK,QAAU,iBAAiB,SAAW,IAC3C,KAAK,SAAQ,IAAG,iBAAiB,YAAQ,MAAA,KAAA,OAAA,GAAI,EAC7C,KAAK,eAAiB,iBAAiB,eACvC,KAAK,UAAY,iBAAiB,mBAClC,KAAK,OAAS,qBAAqB,iBAAiB,MAAM,EAC1D,KAAK,QAAU,qBAAqB,iBAAiB,OAAO,EAC5D,KAAK,OAAS,MAAM,cAAgB,iBAAiB,OACrD,KAAK,KAAI,IAAG,iBAAiB,QAAI,MAAA,KAAA,OAAA,GAAI,MAAM,WAE3C,KAAK,cAAgB,MAAM,aAAa,eAhC5C,QAAA,qBAAA,qBAoCA,8BAA8B,UAAsB,CAClD,KAAM,KAAM,GAAI,OAChB,SAAW,YAAY,YAAa,CAAA,EAAI,CACtC,GAAI,SAAS,cACX,GAAI,IAAI,KAAK,GAAK,EAAE,eAAiB,SAAS,YAAY,EACxD,iBAGE,IAAI,KAAK,GAAK,IAAM,QAAQ,EAC9B,SAIJ,IAAI,KAAK,QAAQ,EAEnB,MAAO,IACT",
  "names": []
}
