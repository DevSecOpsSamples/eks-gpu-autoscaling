{
  "version": 3,
  "sources": ["validation.ts"],
  "sourcesContent": ["import * as cdk from '../../../core';\nimport { ActionCategory } from '../action';\nimport { Artifact } from '../artifact';\n\n/**\n * Validation function that checks if the number of artifacts is within the given bounds\n */\nexport function validateArtifactBounds(\n  type: string, artifacts: Artifact[],\n  min: number, max: number,\n  category: string, provider: string): string[] {\n  const ret: string[] = [];\n\n  if (artifacts.length < min) {\n    ret.push(`${category}/${provider} must have at least ${min} ${type} artifacts`);\n  }\n\n  if (artifacts.length > max) {\n    ret.push(`${category}/${provider} cannot have more than ${max} ${type} artifacts`);\n  }\n\n  return ret;\n}\n\n/**\n * Validation function that guarantees that an action is or is not a source action. This is useful because Source actions can only be\n * in the first stage of a pipeline, and the first stage can only contain source actions.\n */\nexport function validateSourceAction(mustBeSource: boolean, category: string, actionName: string, stageName: string): string[] {\n  if (mustBeSource !== (category === ActionCategory.SOURCE)) {\n    return [`Action ${actionName} in stage ${stageName}: ` + (mustBeSource ? 'first stage may only contain Source actions'\n      : 'Source actions may only occur in first stage')];\n  }\n  return [];\n}\n\n/**\n * Regex to validate Pipeline, Stage, Action names\n *\n * https://docs.aws.amazon.com/codepipeline/latest/userguide/limits.html\n */\nconst VALID_IDENTIFIER_REGEX = /^[a-zA-Z0-9.@_-]{1,100}$/;\n\n/**\n * Validate the given name of a pipeline component. Pipeline component names all have the same restrictions.\n * This can be used to validate the name of all components of a pipeline.\n */\nexport function validateName(thing: string, name: string | undefined): void {\n  validateAgainstRegex(VALID_IDENTIFIER_REGEX, thing, name);\n}\n\nexport function validateArtifactName(artifactName: string | undefined): void {\n  // https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_Artifact.html#CodePipeline-Type-Artifact-name\n  validateAgainstRegex(/^[a-zA-Z0-9_-]{1,100}$/, 'Artifact', artifactName);\n}\n\nexport function validateNamespaceName(namespaceName: string | undefined): void {\n  validateAgainstRegex(/^[A-Za-z0-9@_-]{1,100}$/, 'Namespace', namespaceName);\n}\n\nfunction validateAgainstRegex(regex: RegExp, thing: string, name: string | undefined) {\n  // name could be a Token - in that case, skip validation altogether\n  if (cdk.Token.isUnresolved(name)) {\n    return;\n  }\n\n  if (name !== undefined && !regex.test(name)) {\n    throw new Error(`${thing} name must match regular expression: ${regex.toString()}, got '${name}'`);\n  }\n}\n"],
  "mappings": "uNAAA,KAAA,KAAA,QAAA,eAAA,EACA,SAAA,QAAA,WAAA,EAMA,gCACE,KAAc,UACd,IAAa,IACb,SAAkB,SAAgB,CAClC,KAAM,KAAgB,CAAA,EAEtB,MAAI,WAAU,OAAS,KACrB,IAAI,KAAK,GAAG,YAAY,+BAA+B,OAAO,gBAAgB,EAG5E,UAAU,OAAS,KACrB,IAAI,KAAK,GAAG,YAAY,kCAAkC,OAAO,gBAAgB,EAG5E,GACT,CAfA,QAAA,uBAAA,uBAqBA,8BAAqC,aAAuB,SAAkB,WAAoB,UAAiB,CACjH,MAAI,gBAAkB,YAAa,SAAA,eAAe,QACzC,CAAC,UAAU,uBAAuB,cAAiB,cAAe,8CACrE,+CAA+C,EAE9C,CAAA,CACT,CANA,QAAA,qBAAA,qBAaA,KAAM,wBAAyB,2BAM/B,sBAA6B,MAAe,KAAwB,CAClE,qBAAqB,uBAAwB,MAAO,IAAI,CAC1D,CAFA,QAAA,aAAA,aAIA,8BAAqC,aAAgC,CAEnE,qBAAqB,yBAA0B,WAAY,YAAY,CACzE,CAHA,QAAA,qBAAA,qBAKA,+BAAsC,cAAiC,CACrE,qBAAqB,0BAA2B,YAAa,aAAa,CAC5E,CAFA,QAAA,sBAAA,sBAIA,8BAA8B,MAAe,MAAe,KAAwB,CAElF,GAAI,KAAI,MAAM,aAAa,IAAI,GAI3B,OAAS,QAAa,CAAC,MAAM,KAAK,IAAI,EACxC,KAAM,IAAI,OAAM,GAAG,6CAA6C,MAAM,SAAQ,WAAY,OAAO,CAErG",
  "names": []
}
