{
  "version": 3,
  "sources": ["artifact.ts"],
  "sourcesContent": ["import * as s3 from '../../aws-s3';\nimport { Lazy, Token } from '../../core';\nimport * as validation from './private/validation';\n\n/**\n * An output artifact of an action. Artifacts can be used as input by some actions.\n */\nexport class Artifact {\n  /**\n   * A static factory method used to create instances of the Artifact class.\n   * Mainly meant to be used from `decdk`.\n   *\n   * @param name the (required) name of the Artifact\n   */\n  public static artifact(name: string): Artifact {\n    return new Artifact(name);\n  }\n\n  private _artifactName?: string;\n  private readonly metadata: { [key: string]: any } = {};\n\n  constructor(artifactName?: string) {\n    validation.validateArtifactName(artifactName);\n\n    this._artifactName = artifactName;\n  }\n\n  public get artifactName(): string | undefined {\n    return this._artifactName;\n  }\n\n  /**\n   * Returns an ArtifactPath for a file within this artifact.\n   * CfnOutput is in the form \"<artifact-name>::<file-name>\"\n   * @param fileName The name of the file\n   */\n  public atPath(fileName: string): ArtifactPath {\n    return new ArtifactPath(this, fileName);\n  }\n\n  /**\n   * The artifact attribute for the name of the S3 bucket where the artifact is stored.\n   */\n  public get bucketName() {\n    return artifactAttribute(this, 'BucketName');\n  }\n\n  /**\n   * The artifact attribute for The name of the .zip file that contains the artifact that is\n   * generated by AWS CodePipeline, such as 1ABCyZZ.zip.\n   */\n  public get objectKey() {\n    return artifactAttribute(this, 'ObjectKey');\n  }\n\n  /**\n   * The artifact attribute of the Amazon Simple Storage Service (Amazon S3) URL of the artifact,\n   * such as https://s3-us-west-2.amazonaws.com/artifactstorebucket-yivczw8jma0c/test/TemplateSo/1ABCyZZ.zip.\n   */\n  public get url() {\n    return artifactAttribute(this, 'URL');\n  }\n\n  /**\n   * Returns a token for a value inside a JSON file within this artifact.\n   * @param jsonFile The JSON file name.\n   * @param keyName The hash key.\n   */\n  public getParam(jsonFile: string, keyName: string) {\n    return artifactGetParam(this, jsonFile, keyName);\n  }\n\n  /**\n   * Returns the location of the .zip file in S3 that this Artifact represents.\n   * Used by Lambda's `CfnParametersCode` when being deployed in a CodePipeline.\n   */\n  public get s3Location(): s3.Location {\n    return {\n      bucketName: this.bucketName,\n      objectKey: this.objectKey,\n    };\n  }\n\n  /**\n   * Add arbitrary extra payload to the artifact under a given key.\n   * This can be used by CodePipeline actions to communicate data between themselves.\n   * If metadata was already present under the given key,\n   * it will be overwritten with the new value.\n   */\n  public setMetadata(key: string, value: any): void {\n    this.metadata[key] = value;\n  }\n\n  /**\n   * Retrieve the metadata stored in this artifact under the given key.\n   * If there is no metadata stored under the given key,\n   * null will be returned.\n   */\n  public getMetadata(key: string): any {\n    return this.metadata[key];\n  }\n\n  public toString() {\n    return this.artifactName;\n  }\n\n  /** @internal */\n  protected _setName(name: string) {\n    if (this._artifactName) {\n      throw new Error(`Artifact already has name '${this._artifactName}', cannot override it`);\n    } else {\n      this._artifactName = name;\n    }\n  }\n}\n\n/**\n * A specific file within an output artifact.\n *\n * The most common use case for this is specifying the template file\n * for a CloudFormation action.\n */\nexport class ArtifactPath {\n  public static artifactPath(artifactName: string, fileName: string): ArtifactPath {\n    return new ArtifactPath(Artifact.artifact(artifactName), fileName);\n  }\n\n  constructor(readonly artifact: Artifact, readonly fileName: string) {\n\n  }\n\n  public get location() {\n    const artifactName = this.artifact.artifactName\n      ? this.artifact.artifactName\n      : Lazy.string({ produce: () => this.artifact.artifactName });\n    return `${artifactName}::${this.fileName}`;\n  }\n}\n\nfunction artifactAttribute(artifact: Artifact, attributeName: string) {\n  const lazyArtifactName = Lazy.string({ produce: () => artifact.artifactName });\n  return Token.asString({ 'Fn::GetArtifactAtt': [lazyArtifactName, attributeName] });\n}\n\nfunction artifactGetParam(artifact: Artifact, jsonFile: string, keyName: string) {\n  const lazyArtifactName = Lazy.string({ produce: () => artifact.artifactName });\n  return Token.asString({ 'Fn::GetParam': [lazyArtifactName, jsonFile, keyName] });\n}\n"],
  "mappings": "uOACA,OAAA,QAAA,YAAA,EACA,WAAA,QAAA,sBAAA,EAKA,MAAa,QAAQ,CAcnB,YAAY,aAAqB,CAFhB,KAAA,SAAmC,CAAA,EAGlD,WAAW,qBAAqB,YAAY,EAE5C,KAAK,cAAgB,mBAVT,UAAS,KAAY,CACjC,MAAO,IAAI,UAAS,IAAI,KAYf,eAAY,CACrB,MAAO,MAAK,cAQP,OAAO,SAAgB,CAC5B,MAAO,IAAI,cAAa,KAAM,QAAQ,KAM7B,aAAU,CACnB,MAAO,mBAAkB,KAAM,YAAY,KAOlC,YAAS,CAClB,MAAO,mBAAkB,KAAM,WAAW,KAOjC,MAAG,CACZ,MAAO,mBAAkB,KAAM,KAAK,EAQ/B,SAAS,SAAkB,QAAe,CAC/C,MAAO,kBAAiB,KAAM,SAAU,OAAO,KAOtC,aAAU,CACnB,MAAO,CACL,WAAY,KAAK,WACjB,UAAW,KAAK,WAUb,YAAY,IAAa,MAAU,CACxC,KAAK,SAAS,KAAO,MAQhB,YAAY,IAAW,CAC5B,MAAO,MAAK,SAAS,KAGhB,UAAQ,CACb,MAAO,MAAK,aAIJ,SAAS,KAAY,CAC7B,GAAI,KAAK,cACP,KAAM,IAAI,OAAM,8BAA8B,KAAK,oCAAoC,EAEvF,KAAK,cAAgB,MAxG3B,QAAA,SAAA,2GAmHA,MAAa,YAAY,CAKvB,YAAqB,SAA6B,SAAgB,CAA7C,KAAA,SAAA,SAA6B,KAAA,SAAA,uFAJpC,cAAa,aAAsB,SAAgB,CAC/D,MAAO,IAAI,cAAa,SAAS,SAAS,YAAY,EAAG,QAAQ,KAOxD,WAAQ,CAIjB,MAAO,GAHc,KAAK,SAAS,aAC/B,KAAK,SAAS,aACd,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,SAAS,YAAY,CAAE,MAClC,KAAK,YAbpC,QAAA,aAAA,uHAiBA,2BAA2B,SAAoB,cAAqB,CAClE,KAAM,kBAAmB,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,SAAS,YAAY,CAAE,EAC7E,MAAO,QAAA,MAAM,SAAS,CAAE,qBAAsB,CAAC,iBAAkB,aAAa,CAAC,CAAE,CACnF,CAEA,0BAA0B,SAAoB,SAAkB,QAAe,CAC7E,KAAM,kBAAmB,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,SAAS,YAAY,CAAE,EAC7E,MAAO,QAAA,MAAM,SAAS,CAAE,eAAgB,CAAC,iBAAkB,SAAU,OAAO,CAAC,CAAE,CACjF",
  "names": []
}
