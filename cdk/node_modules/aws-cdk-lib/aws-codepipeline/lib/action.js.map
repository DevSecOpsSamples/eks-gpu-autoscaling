{
  "version": 3,
  "sources": ["action.ts"],
  "sourcesContent": ["import * as notifications from '../../aws-codestarnotifications';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport { IResource, Lazy } from '../../core';\nimport { Artifact } from './artifact';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\nexport enum ActionCategory {\n  SOURCE = 'Source',\n  BUILD = 'Build',\n  TEST = 'Test',\n  APPROVAL = 'Approval',\n  DEPLOY = 'Deploy',\n  INVOKE = 'Invoke'\n}\n\n/**\n * Specifies the constraints on the number of input and output\n * artifacts an action can have.\n *\n * The constraints for each action type are documented on the\n * {@link https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html Pipeline Structure Reference} page.\n */\nexport interface ActionArtifactBounds {\n  readonly minInputs: number;\n  readonly maxInputs: number;\n  readonly minOutputs: number;\n  readonly maxOutputs: number;\n}\n\n/**\n * The CodePipeline variables that are global,\n * not bound to a specific action.\n * This class defines a bunch of static fields that represent the different variables.\n * These can be used can be used in any action configuration.\n */\nexport class GlobalVariables {\n  /** The identifier of the current pipeline execution. */\n  public static readonly executionId = '#{codepipeline.PipelineExecutionId}';\n}\n\nexport interface ActionProperties {\n  readonly actionName: string;\n  readonly role?: iam.IRole;\n\n  /**\n   * The AWS region the given Action resides in.\n   * Note that a cross-region Pipeline requires replication buckets to function correctly.\n   * You can provide their names with the {@link PipelineProps#crossRegionReplicationBuckets} property.\n   * If you don't, the CodePipeline Construct will create new Stacks in your CDK app containing those buckets,\n   * that you will need to `cdk deploy` before deploying the main, Pipeline-containing Stack.\n   *\n   * @default the Action resides in the same region as the Pipeline\n   */\n  readonly region?: string;\n\n  /**\n   * The account the Action is supposed to live in.\n   * For Actions backed by resources,\n   * this is inferred from the Stack {@link resource} is part of.\n   * However, some Actions, like the CloudFormation ones,\n   * are not backed by any resource, and they still might want to be cross-account.\n   * In general, a concrete Action class should specify either {@link resource},\n   * or {@link account} - but not both.\n   */\n  readonly account?: string;\n\n  /**\n   * The optional resource that is backing this Action.\n   * This is used for automatically handling Actions backed by\n   * resources from a different account and/or region.\n   */\n  readonly resource?: IResource;\n\n  /**\n   * The category of the action.\n   * The category defines which action type the owner\n   * (the entity that performs the action) performs.\n   */\n  readonly category: ActionCategory;\n\n  /**\n   * The service provider that the action calls.\n   */\n  readonly provider: string;\n  readonly owner?: string;\n  readonly version?: string;\n\n  /**\n   * The order in which AWS CodePipeline runs this action.\n   * For more information, see the AWS CodePipeline User Guide.\n   *\n   * https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements\n   */\n  readonly runOrder?: number;\n  readonly artifactBounds: ActionArtifactBounds;\n  readonly inputs?: Artifact[];\n  readonly outputs?: Artifact[];\n\n  /**\n   * The name of the namespace to use for variables emitted by this action.\n   *\n   * @default - a name will be generated, based on the stage and action names\n   */\n  readonly variablesNamespace?: string;\n}\n\nexport interface ActionBindOptions {\n  readonly role: iam.IRole;\n\n  readonly bucket: s3.IBucket;\n}\n\nexport interface ActionConfig {\n  readonly configuration?: any;\n}\n\n/**\n * Additional options to pass to the notification rule.\n */\nexport interface PipelineNotifyOnOptions extends notifications.NotificationRuleOptions {\n  /**\n   * A list of event types associated with this notification rule for CodePipeline Pipeline.\n   * For a complete list of event types and IDs, see Notification concepts in the Developer Tools Console User Guide.\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#concepts-api\n   */\n  readonly events: PipelineNotificationEvents[];\n}\n\n/**\n * A Pipeline Action.\n * If you want to implement this interface,\n * consider extending the {@link Action} class,\n * which contains some common logic.\n */\nexport interface IAction {\n  /**\n   * The simple properties of the Action,\n   * like its Owner, name, etc.\n   * Note that this accessor will be called before the {@link bind} callback.\n   */\n  readonly actionProperties: ActionProperties;\n\n  /**\n   * The callback invoked when this Action is added to a Pipeline.\n   *\n   * @param scope the Construct tree scope the Action can use if it needs to create any resources\n   * @param stage the {@link IStage} this Action is being added to\n   * @param options additional options the Action can use,\n   *   like the artifact Bucket of the pipeline it's being added to\n   */\n  bind(scope: Construct, stage: IStage, options: ActionBindOptions): ActionConfig;\n\n  /**\n   * Creates an Event that will be triggered whenever the state of this Action changes.\n   *\n   * @param name the name to use for the new Event\n   * @param target the optional target for the Event\n   * @param options additional options that can be used to customize the created Event\n   */\n  onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule;\n}\n\n/**\n * The abstract view of an AWS CodePipeline as required and used by Actions.\n * It extends {@link events.IRuleTarget},\n * so this interface can be used as a Target for CloudWatch Events.\n */\nexport interface IPipeline extends IResource, notifications.INotificationRuleSource {\n  /**\n   * The name of the Pipeline.\n   *\n   * @attribute\n   */\n  readonly pipelineName: string;\n\n  /**\n   * The ARN of the Pipeline.\n   *\n   * @attribute\n   */\n  readonly pipelineArn: string;\n\n  /**\n   * Define an event rule triggered by this CodePipeline.\n   *\n   * @param id Identifier for this event handler.\n   * @param options Additional options to pass to the event rule.\n   */\n  onEvent(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Define an event rule triggered by the \"CodePipeline Pipeline Execution\n   * State Change\" event emitted from this pipeline.\n   *\n   * @param id Identifier for this event handler.\n   * @param options Additional options to pass to the event rule.\n   */\n  onStateChange(id: string, options?: events.OnEventOptions): events.Rule;\n\n  /**\n   * Defines a CodeStar notification rule triggered when the pipeline\n   * events emitted by you specified, it very similar to `onEvent` API.\n   *\n   * You can also use the methods `notifyOnExecutionStateChange`, `notifyOnAnyStageStateChange`,\n   * `notifyOnAnyActionStateChange` and `notifyOnAnyManualApprovalStateChange`\n   * to define rules for these specific event emitted.\n   *\n   * @param id The id of the CodeStar notification rule\n   * @param target The target to register for the CodeStar Notifications destination.\n   * @param options Customization options for CodeStar notification rule\n   * @returns CodeStar notification rule associated with this build project.\n   */\n  notifyOn(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options: PipelineNotifyOnOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Define an notification rule triggered by the set of the \"Pipeline execution\" events emitted from this pipeline.\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-pipeline\n   *\n   * @param id Identifier for this notification handler.\n   * @param target The target to register for the CodeStar Notifications destination.\n   * @param options Additional options to pass to the notification rule.\n   */\n  notifyOnExecutionStateChange(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Define an notification rule triggered by the set of the \"Stage execution\" events emitted from this pipeline.\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-pipeline\n   *\n   * @param id Identifier for this notification handler.\n   * @param target The target to register for the CodeStar Notifications destination.\n   * @param options Additional options to pass to the notification rule.\n   */\n  notifyOnAnyStageStateChange(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Define an notification rule triggered by the set of the \"Action execution\" events emitted from this pipeline.\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-pipeline\n   *\n   * @param id Identifier for this notification handler.\n   * @param target The target to register for the CodeStar Notifications destination.\n   * @param options Additional options to pass to the notification rule.\n   */\n  notifyOnAnyActionStateChange(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n\n  /**\n   * Define an notification rule triggered by the set of the \"Manual approval\" events emitted from this pipeline.\n   * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-pipeline\n   *\n   * @param id Identifier for this notification handler.\n   * @param target The target to register for the CodeStar Notifications destination.\n   * @param options Additional options to pass to the notification rule.\n   */\n  notifyOnAnyManualApprovalStateChange(\n    id: string,\n    target: notifications.INotificationRuleTarget,\n    options?: notifications.NotificationRuleOptions,\n  ): notifications.INotificationRule;\n}\n\n/**\n * The abstract interface of a Pipeline Stage that is used by Actions.\n */\nexport interface IStage {\n  /**\n   * The physical, human-readable name of this Pipeline Stage.\n   */\n  readonly stageName: string;\n\n  readonly pipeline: IPipeline;\n\n  /**\n   * The actions belonging to this stage.\n   */\n  readonly actions: IAction[];\n\n  addAction(action: IAction): void;\n\n  onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps): events.Rule;\n}\n\n/**\n * Common properties shared by all Actions.\n */\nexport interface CommonActionProps {\n  /**\n   * The physical, human-readable name of the Action.\n   * Note that Action names must be unique within a single Stage.\n   */\n  readonly actionName: string;\n\n  /**\n   * The runOrder property for this Action.\n   * RunOrder determines the relative order in which multiple Actions in the same Stage execute.\n   *\n   * @default 1\n   * @see https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html\n   */\n  readonly runOrder?: number;\n\n  /**\n   * The name of the namespace to use for variables emitted by this action.\n   *\n   * @default - a name will be generated, based on the stage and action names,\n   *   if any of the action's variables were referenced - otherwise,\n   *   no namespace will be set\n   */\n  readonly variablesNamespace?: string;\n}\n\n/**\n * Common properties shared by all Actions whose {@link ActionProperties.owner} field is 'AWS'\n * (or unset, as 'AWS' is the default).\n */\nexport interface CommonAwsActionProps extends CommonActionProps {\n  /**\n   * The Role in which context's this Action will be executing in.\n   * The Pipeline's Role will assume this Role\n   * (the required permissions for that will be granted automatically)\n   * right before executing this Action.\n   * This Action will be passed into your {@link IAction.bind}\n   * method in the {@link ActionBindOptions.role} property.\n   *\n   * @default a new Role will be generated\n   */\n  readonly role?: iam.IRole;\n}\n\n/**\n * Low-level class for generic CodePipeline Actions implementing the {@link IAction} interface.\n * Contains some common logic that can be re-used by all {@link IAction} implementations.\n * If you're writing your own Action class,\n * feel free to extend this class.\n */\nexport abstract class Action implements IAction {\n  /**\n   * This is a renamed version of the {@link IAction.actionProperties} property.\n   */\n  protected abstract readonly providedActionProperties: ActionProperties;\n\n  private __actionProperties?: ActionProperties;\n  private __pipeline?: IPipeline;\n  private __stage?: IStage;\n  private __scope?: Construct;\n  private readonly _namespaceToken: string;\n  private _customerProvidedNamespace?: string;\n  private _actualNamespace?: string;\n\n  private _variableReferenced = false;\n\n  protected constructor() {\n    this._namespaceToken = Lazy.string({\n      produce: () => {\n        // make sure the action was bound (= added to a pipeline)\n        if (this._actualNamespace === undefined) {\n          throw new Error(`Cannot reference variables of action '${this.actionProperties.actionName}', ` +\n            'as that action was never added to a pipeline');\n        } else {\n          return this._customerProvidedNamespace !== undefined\n            // if a customer passed a namespace explicitly, always use that\n            ? this._customerProvidedNamespace\n            // otherwise, only return a namespace if any variable was referenced\n            : (this._variableReferenced ? this._actualNamespace : undefined);\n        }\n      },\n    });\n  }\n\n  public get actionProperties(): ActionProperties {\n    if (this.__actionProperties === undefined) {\n      const actionProperties = this.providedActionProperties;\n      this._customerProvidedNamespace = actionProperties.variablesNamespace;\n      this.__actionProperties = {\n        ...actionProperties,\n        variablesNamespace: this._customerProvidedNamespace === undefined\n          ? this._namespaceToken\n          : this._customerProvidedNamespace,\n      };\n    }\n    return this.__actionProperties;\n  }\n\n  public bind(scope: Construct, stage: IStage, options: ActionBindOptions): ActionConfig {\n    this.__pipeline = stage.pipeline;\n    this.__stage = stage;\n    this.__scope = scope;\n\n    this._actualNamespace = this._customerProvidedNamespace === undefined\n      // default a namespace name, based on the stage and action names\n      ? `${stage.stageName}_${this.actionProperties.actionName}_NS`\n      : this._customerProvidedNamespace;\n\n    return this.bound(scope, stage, options);\n  }\n\n  public onStateChange(name: string, target?: events.IRuleTarget, options?: events.RuleProps) {\n    const rule = new events.Rule(this._scope, name, options);\n    rule.addTarget(target);\n    rule.addEventPattern({\n      detailType: ['CodePipeline Action Execution State Change'],\n      source: ['aws.codepipeline'],\n      resources: [this._pipeline.pipelineArn],\n      detail: {\n        stage: [this._stage.stageName],\n        action: [this.actionProperties.actionName],\n      },\n    });\n    return rule;\n  }\n\n  protected variableExpression(variableName: string): string {\n    this._variableReferenced = true;\n    return `#{${this._namespaceToken}.${variableName}}`;\n  }\n\n  /**\n   * This is a renamed version of the {@link IAction.bind} method.\n   */\n  protected abstract bound(scope: Construct, stage: IStage, options: ActionBindOptions): ActionConfig;\n\n  private get _pipeline(): IPipeline {\n    if (this.__pipeline) {\n      return this.__pipeline;\n    } else {\n      throw new Error('Action must be added to a stage that is part of a pipeline before using onStateChange');\n    }\n  }\n\n  private get _stage(): IStage {\n    if (this.__stage) {\n      return this.__stage;\n    } else {\n      throw new Error('Action must be added to a stage that is part of a pipeline before using onStateChange');\n    }\n  }\n\n  /**\n   * Retrieves the Construct scope of this Action.\n   * Only available after the Action has been added to a Stage,\n   * and that Stage to a Pipeline.\n   */\n  private get _scope(): Construct {\n    if (this.__scope) {\n      return this.__scope;\n    } else {\n      throw new Error('Action must be added to a stage that is part of a pipeline first');\n    }\n  }\n}\n\n/**\n * The list of event types for AWS Codepipeline Pipeline\n * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/concepts.html#events-ref-pipeline\n */\nexport enum PipelineNotificationEvents {\n  /**\n   * Trigger notification when pipeline execution failed\n   */\n  PIPELINE_EXECUTION_FAILED = 'codepipeline-pipeline-pipeline-execution-failed',\n\n  /**\n   * Trigger notification when pipeline execution canceled\n   */\n  PIPELINE_EXECUTION_CANCELED = 'codepipeline-pipeline-pipeline-execution-canceled',\n\n  /**\n   * Trigger notification when pipeline execution started\n   */\n  PIPELINE_EXECUTION_STARTED = 'codepipeline-pipeline-pipeline-execution-started',\n\n  /**\n   * Trigger notification when pipeline execution resumed\n   */\n  PIPELINE_EXECUTION_RESUMED = 'codepipeline-pipeline-pipeline-execution-resumed',\n\n  /**\n   * Trigger notification when pipeline execution succeeded\n   */\n  PIPELINE_EXECUTION_SUCCEEDED = 'codepipeline-pipeline-pipeline-execution-succeeded',\n\n  /**\n   * Trigger notification when pipeline execution superseded\n   */\n  PIPELINE_EXECUTION_SUPERSEDED = 'codepipeline-pipeline-pipeline-execution-superseded',\n\n  /**\n   * Trigger notification when pipeline stage execution started\n   */\n  STAGE_EXECUTION_STARTED = 'codepipeline-pipeline-stage-execution-started',\n\n  /**\n  * Trigger notification when pipeline stage execution succeeded\n  */\n  STAGE_EXECUTION_SUCCEEDED = 'codepipeline-pipeline-stage-execution-succeeded',\n\n  /**\n  * Trigger notification when pipeline stage execution resumed\n  */\n  STAGE_EXECUTION_RESUMED = 'codepipeline-pipeline-stage-execution-resumed',\n\n  /**\n  * Trigger notification when pipeline stage execution canceled\n  */\n  STAGE_EXECUTION_CANCELED = 'codepipeline-pipeline-stage-execution-canceled',\n\n  /**\n  * Trigger notification when pipeline stage execution failed\n  */\n  STAGE_EXECUTION_FAILED = 'codepipeline-pipeline-stage-execution-failed',\n\n  /**\n   * Trigger notification when pipeline action execution succeeded\n   */\n  ACTION_EXECUTION_SUCCEEDED = 'codepipeline-pipeline-action-execution-succeeded',\n\n  /**\n   * Trigger notification when pipeline action execution failed\n   */\n  ACTION_EXECUTION_FAILED = 'codepipeline-pipeline-action-execution-failed',\n\n  /**\n   * Trigger notification when pipeline action execution canceled\n   */\n  ACTION_EXECUTION_CANCELED = 'codepipeline-pipeline-action-execution-canceled',\n\n  /**\n   * Trigger notification when pipeline action execution started\n   */\n  ACTION_EXECUTION_STARTED = 'codepipeline-pipeline-action-execution-started',\n\n  /**\n   * Trigger notification when pipeline manual approval failed\n   */\n  MANUAL_APPROVAL_FAILED = 'codepipeline-pipeline-manual-approval-failed',\n\n  /**\n   * Trigger notification when pipeline manual approval needed\n   */\n  MANUAL_APPROVAL_NEEDED = 'codepipeline-pipeline-manual-approval-needed',\n\n  /**\n   * Trigger notification when pipeline manual approval succeeded\n   */\n  MANUAL_APPROVAL_SUCCEEDED = 'codepipeline-pipeline-manual-approval-succeeded',\n}\n"],
  "mappings": "kSACA,OAAA,QAAA,kBAAA,EAGA,OAAA,QAAA,YAAA,EAOA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CACxB,gBAAA,OAAA,SACA,gBAAA,MAAA,QACA,gBAAA,KAAA,OACA,gBAAA,SAAA,WACA,gBAAA,OAAA,SACA,gBAAA,OAAA,QACF,GAPY,eAAA,QAAA,gBAAA,SAAA,eAAc,CAAA,EAAA,EA6B1B,MAAa,eAAe,EAA5B,QAAA,gBAAA,gIAEyB,gBAAA,YAAc,sCAwTvC,MAAsB,MAAM,CAgB1B,aAAA,CAFQ,KAAA,oBAAsB,GAG5B,KAAK,gBAAkB,OAAA,KAAK,OAAO,CACjC,QAAS,IAAK,CAEZ,GAAI,KAAK,mBAAqB,OAC5B,KAAM,IAAI,OAAM,yCAAyC,KAAK,iBAAiB,2DAC/B,EAEhD,MAAO,MAAK,6BAA+B,OAEvC,KAAK,2BAEJ,KAAK,oBAAsB,KAAK,iBAAmB,MAE5D,EACD,KAGQ,mBAAgB,CACzB,GAAI,KAAK,qBAAuB,OAAW,CACzC,KAAM,kBAAmB,KAAK,yBAC9B,KAAK,2BAA6B,iBAAiB,mBACnD,KAAK,mBAAqB,IACrB,iBACH,mBAAoB,KAAK,6BAA+B,OACpD,KAAK,gBACL,KAAK,4BAGb,MAAO,MAAK,mBAGP,KAAK,MAAkB,MAAe,QAA0B,2JACrE,KAAK,WAAa,MAAM,SACxB,KAAK,QAAU,MACf,KAAK,QAAU,MAEf,KAAK,iBAAmB,KAAK,6BAA+B,OAExD,GAAG,MAAM,aAAa,KAAK,iBAAiB,gBAC5C,KAAK,2BAEF,KAAK,MAAM,MAAO,MAAO,OAAO,EAGlC,cAAc,KAAc,OAA6B,QAA0B,sIACxF,KAAM,MAAO,GAAI,QAAO,KAAK,KAAK,OAAQ,KAAM,OAAO,EACvD,YAAK,UAAU,MAAM,EACrB,KAAK,gBAAgB,CACnB,WAAY,CAAC,4CAA4C,EACzD,OAAQ,CAAC,kBAAkB,EAC3B,UAAW,CAAC,KAAK,UAAU,WAAW,EACtC,OAAQ,CACN,MAAO,CAAC,KAAK,OAAO,SAAS,EAC7B,OAAQ,CAAC,KAAK,iBAAiB,UAAU,GAE5C,EACM,KAGC,mBAAmB,aAAoB,CAC/C,YAAK,oBAAsB,GACpB,KAAK,KAAK,mBAAmB,mBAQ1B,YAAS,CACnB,GAAI,KAAK,WACP,MAAO,MAAK,WAEZ,KAAM,IAAI,OAAM,uFAAuF,KAI/F,SAAM,CAChB,GAAI,KAAK,QACP,MAAO,MAAK,QAEZ,KAAM,IAAI,OAAM,uFAAuF,KAS/F,SAAM,CAChB,GAAI,KAAK,QACP,MAAO,MAAK,QAEZ,KAAM,IAAI,OAAM,kEAAkE,GA/GxF,QAAA,OAAA,qGAwHA,GAAY,4BAAZ,AAAA,UAAY,4BAA0B,CAIpC,4BAAA,0BAAA,kDAKA,4BAAA,4BAAA,oDAKA,4BAAA,2BAAA,mDAKA,4BAAA,2BAAA,mDAKA,4BAAA,6BAAA,qDAKA,4BAAA,8BAAA,sDAKA,4BAAA,wBAAA,gDAKA,4BAAA,0BAAA,kDAKA,4BAAA,wBAAA,gDAKA,4BAAA,yBAAA,iDAKA,4BAAA,uBAAA,+CAKA,4BAAA,2BAAA,mDAKA,4BAAA,wBAAA,gDAKA,4BAAA,0BAAA,kDAKA,4BAAA,yBAAA,iDAKA,4BAAA,uBAAA,+CAKA,4BAAA,uBAAA,+CAKA,4BAAA,0BAAA,iDACF,GA1FY,2BAAA,QAAA,4BAAA,SAAA,2BAA0B,CAAA,EAAA",
  "names": []
}
