{
  "version": 3,
  "sources": ["verify-stripped-exp.ts"],
  "sourcesContent": ["// +------------------------------------------------------------------------------------------------\n// | this script is executed post packaging to verify that experimental modules in aws-cdk-lib includes **only**  L1 autogenerated files.\n// | The purpose is to avoid publishing L2 of experimental modules with aws-cdk-lib\n// |\nimport { spawnSync } from 'child_process';\nimport * as console from 'console';\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as fs from 'fs-extra';\n\nasync function main(tempDir: string) {\n  console.log('\uD83E\uDDD0 Verifying all experimental modules includes only L1s files...');\n  const cwd = process.cwd();\n  const awsCdkModulesRepoPath = path.join(findWorkspacePath(), 'packages', '@aws-cdk');\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  const version = require('./../package.json').version;\n  const tarFullPath = path.join(cwd, 'dist', 'js', `aws-cdk-lib@${version}.jsii.tgz`);\n\n  const invalidCfnModules = new Map<string, Array<String>>();\n  const invalidModules = new Array<string>();\n\n  // install the tarball in a temp directory\n  console.log(`installing aws-cdk-lib from dist/js into ${tempDir}`);\n  exec('npm', ['install', '--prefix', tempDir, tarFullPath]);\n  const installedAwsCdkLibPath = path.join(tempDir, 'node_modules', 'aws-cdk-lib', 'lib');\n\n  for (const module of fs.readdirSync(awsCdkModulesRepoPath)) {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const pkgJson = require(path.join(awsCdkModulesRepoPath, module, 'package.json'));\n    if (pkgJson.stability !== 'experimental') {\n      continue;\n    }\n    if (pkgJson['cdk-build']?.cloudformation) {\n      // if a cfn module, verify only the allowed files exists\n      const files = await listAllFiles(path.join(installedAwsCdkLibPath, module));\n      const invalidFiles = new Array();\n      files.forEach(file => {\n        if (!isAllowedFile(file)) {\n          invalidFiles.push(file);\n        }\n      });\n      if (invalidFiles.length > 0) {\n        invalidCfnModules.set(module, invalidFiles);\n      }\n    } else {\n      // not a cfn module, verify it was entirely removed\n      if (fs.existsSync(path.join(installedAwsCdkLibPath, module))) {\n        invalidModules.push(module);\n      }\n    }\n  }\n\n  if (invalidCfnModules.size > 0 || invalidModules.length > 0) {\n    if (invalidCfnModules.size > 0 ) {\n      console.log('cfn module with invalid files:');\n      for (let [module, files] of invalidCfnModules.entries()) {\n        console.log(`${module}:`);\n        files.forEach(file => console.log(`\\t ${file}`));\n      }\n    }\n    console.log('---------------------------------------------');\n    if (invalidModules.length > 0) {\n      console.log('non-cfn experimental modules:');\n      invalidModules.forEach(m => console.log(`\\t ${m}`));\n    }\n    throw new Error('Verification Error');\n  }\n}\n\nconst tempDir = fs.mkdtempSync(os.tmpdir());\n\nmain(tempDir).then(\n  () => {\n    fs.removeSync(tempDir);\n    console.log('\u2705 All experimental modules includes only L1s files!');\n    process.exit(0);\n  },\n  (err) => {\n    process.stderr.write(`${err}\\n`);\n    process.stderr.write(`\u274C Verification failed, Some experimental modules includes non L1 files, see details above. Inspect working directory: '${tempDir}'`);\n    process.exit(1);\n  },\n);\n\n\n/**\n * Spawn sync with error handling\n */\nfunction exec(cmd: string, args: string[]) {\n  const proc = spawnSync(cmd, args);\n\n  if (proc.error) {\n    throw proc.error;\n  }\n\n  if (proc.status !== 0) {\n    if (proc.stdout || proc.stderr) {\n      throw new Error(`${cmd} exited with status ${proc.status}; stdout: ${proc.stdout?.toString().trim()}\\n\\n\\nstderr: ${proc.stderr?.toString().trim()}`);\n    }\n    throw new Error(`${cmd} exited with status ${proc.status}`);\n  }\n\n  return proc;\n}\n\nconst GENERATED_SUFFIX_REGEX = new RegExp(/generated\\.(js|d\\.ts)$/);\nconst ALLOWED_FILES = ['.jsiirc.json', 'index.ts', 'index.js', 'index.d.ts'];\n\n/**\n * Recursively collect all files in dir\n */\nasync function listAllFiles(dir: string) {\n  const ret = new Array();\n\n  async function recurse(part: string) {\n    const files = await fs.readdir(part);\n    for (const file of files) {\n      const fullPath = path.join(part, file);\n      if ((await fs.stat(fullPath)).isDirectory()) {\n        await recurse(fullPath);\n      } else {\n        ret.push(file);\n      }\n    }\n  }\n  await recurse(dir);\n  return ret;\n}\n\n/**\n * Find the workspace root path. Walk up the directory tree until you find lerna.json\n */\nfunction findWorkspacePath() {\n\n  return _findRootPath(process.cwd());\n\n  function _findRootPath(part: string): string {\n    if (part === path.resolve(part, '..')) {\n      throw new Error('couldn\\'t find a \\'lerna.json\\' file when walking up the directory tree, are you in a aws-cdk project?');\n    }\n\n    if (fs.existsSync(path.resolve(part, 'lerna.json'))) {\n      return part;\n    }\n    return _findRootPath(path.resolve(part, '..'));\n  }\n}\n\n/**\n * @param file\n * @returns true if the file allowed in an L1 only modules, otherwise false\n */\nfunction isAllowedFile(file: string) {\n  if (GENERATED_SUFFIX_REGEX.test(file)) {\n    return true;\n  }\n  return ALLOWED_FILES.includes(file);\n}"],
  "mappings": "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",
  "names": []
}
