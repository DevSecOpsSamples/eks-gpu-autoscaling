{
  "version": 3,
  "sources": ["origin-access-identity.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnCloudFrontOriginAccessIdentity } from './cloudfront.generated';\n\n/**\n * Properties of CloudFront OriginAccessIdentity\n */\nexport interface OriginAccessIdentityProps {\n  /**\n   * Any comments you want to include about the origin access identity.\n   *\n   * @default \"Allows CloudFront to reach the bucket\"\n   */\n  readonly comment?: string;\n}\n\n/**\n * Interface for CloudFront OriginAccessIdentity\n */\nexport interface IOriginAccessIdentity extends cdk.IResource, iam.IGrantable {\n  /**\n   * The Origin Access Identity Name\n   */\n  readonly originAccessIdentityName: string;\n}\n\nabstract class OriginAccessIdentityBase extends cdk.Resource {\n  /**\n   * The Origin Access Identity Name (physical id)\n   */\n  public abstract readonly originAccessIdentityName: string;\n  /**\n   * Derived principal value for bucket access\n   */\n  public abstract readonly grantPrincipal: iam.IPrincipal;\n\n  /**\n   * The ARN to include in S3 bucket policy to allow CloudFront access\n   */\n  protected arn(): string {\n    return cdk.Stack.of(this).formatArn(\n      {\n        service: 'iam',\n        region: '', // global\n        account: 'cloudfront',\n        resource: 'user',\n        resourceName: `CloudFront Origin Access Identity ${this.originAccessIdentityName}`,\n      },\n    );\n  }\n}\n\n/**\n * An origin access identity is a special CloudFront user that you can\n * associate with Amazon S3 origins, so that you can secure all or just some of\n * your Amazon S3 content.\n *\n * @resource AWS::CloudFront::CloudFrontOriginAccessIdentity\n */\nexport class OriginAccessIdentity extends OriginAccessIdentityBase implements IOriginAccessIdentity {\n  /**\n   * Creates a OriginAccessIdentity by providing the OriginAccessIdentityName\n   */\n  public static fromOriginAccessIdentityName(\n    scope: Construct,\n    id: string,\n    originAccessIdentityName: string): IOriginAccessIdentity {\n\n    class Import extends OriginAccessIdentityBase {\n      public readonly originAccessIdentityName = originAccessIdentityName;\n      public readonly grantPrincipal = new iam.ArnPrincipal(this.arn());\n      constructor(s: Construct, i: string) {\n        super(s, i, { physicalName: originAccessIdentityName });\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The Amazon S3 canonical user ID for the origin access identity, used when\n   * giving the origin access identity read permission to an object in Amazon\n   * S3.\n   *\n   * @attribute\n   */\n  public readonly cloudFrontOriginAccessIdentityS3CanonicalUserId: string;\n\n  /**\n   * Derived principal value for bucket access\n   */\n  public readonly grantPrincipal: iam.IPrincipal;\n\n  /**\n   * The Origin Access Identity Name (physical id)\n   *\n   * @attribute\n   */\n  public readonly originAccessIdentityName: string;\n\n  /**\n   * CDK L1 resource\n   */\n  private readonly resource: CfnCloudFrontOriginAccessIdentity;\n\n  constructor(scope: Construct, id: string, props?: OriginAccessIdentityProps) {\n    super(scope, id);\n\n    // Comment has a max length of 128.\n    const comment = (props?.comment ?? 'Allows CloudFront to reach the bucket').slice(0, 128);\n    this.resource = new CfnCloudFrontOriginAccessIdentity(this, 'Resource', {\n      cloudFrontOriginAccessIdentityConfig: { comment },\n    });\n    // physical id - OAI name\n    this.originAccessIdentityName = this.getResourceNameAttribute(this.resource.ref);\n\n    // Canonical user to grant access to in the S3 Bucket Policy\n    this.cloudFrontOriginAccessIdentityS3CanonicalUserId = this.resource.attrS3CanonicalUserId;\n    // The principal for must be either the canonical user or a special ARN\n    // with the CloudFront Origin Access Id (see `arn()` method). For\n    // import/export the OAI is anyway required so the principal is constructed\n    // with it. But for the normal case the S3 Canonical User as a nicer\n    // interface and does not require constructing the ARN.\n    this.grantPrincipal = new iam.CanonicalUserPrincipal(this.cloudFrontOriginAccessIdentityS3CanonicalUserId);\n  }\n}\n"],
  "mappings": "2NAAA,IAAA,QAAA,eAAA,EACA,IAAA,QAAA,YAAA,EAEA,uBAAA,QAAA,wBAAA,EAwBA,MAAe,gCAAiC,KAAI,QAAQ,CAahD,KAAG,CACX,MAAO,KAAI,MAAM,GAAG,IAAI,EAAE,UACxB,CACE,QAAS,MACT,OAAQ,GACR,QAAS,aACT,SAAU,OACV,aAAc,qCAAqC,KAAK,2BACzD,GAYP,MAAa,4BAA6B,yBAAwB,CA8ChE,YAAY,MAAkB,GAAY,MAAiC,QACzE,MAAM,MAAO,EAAE,sFAGf,KAAM,SAAU,KAAC,OAAK,KAAA,OAAL,MAAO,WAAO,MAAA,KAAA,OAAA,GAAI,yCAAyC,MAAM,EAAG,GAAG,EACxF,KAAK,SAAW,GAAI,wBAAA,kCAAkC,KAAM,WAAY,CACtE,qCAAsC,CAAE,OAAO,EAChD,EAED,KAAK,yBAA2B,KAAK,yBAAyB,KAAK,SAAS,GAAG,EAG/E,KAAK,gDAAkD,KAAK,SAAS,sBAMrE,KAAK,eAAiB,GAAI,KAAI,uBAAuB,KAAK,+CAA+C,QA5D7F,8BACZ,MACA,GACA,yBAAgC,CAEhC,MAAM,cAAe,yBAAwB,CAG3C,YAAY,EAAc,EAAS,CACjC,MAAM,EAAG,EAAG,CAAE,aAAc,wBAAwB,CAAE,EAHxC,KAAA,yBAA2B,yBAC3B,KAAA,eAAiB,GAAI,KAAI,aAAa,KAAK,IAAG,CAAE,CAGhE,EAGF,MAAO,IAAI,QAAO,MAAO,EAAE,GAjB/B,QAAA,qBAAA",
  "names": []
}
