{
  "version": 3,
  "sources": ["public-key.ts"],
  "sourcesContent": ["import { IResource, Names, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnPublicKey } from './cloudfront.generated';\n\n/**\n * Represents a Public Key\n */\nexport interface IPublicKey extends IResource {\n  /**\n   * The ID of the key group.\n   * @attribute\n   */\n  readonly publicKeyId: string;\n}\n\n/**\n * Properties for creating a Public Key\n */\nexport interface PublicKeyProps {\n  /**\n   * A name to identify the public key.\n   * @default - generated from the `id`\n   */\n  readonly publicKeyName?: string;\n\n  /**\n   * A comment to describe the public key.\n   * @default - no comment\n   */\n  readonly comment?: string;\n\n  /**\n   * The public key that you can use with signed URLs and signed cookies, or with field-level encryption.\n   * The `encodedKey` parameter must include `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----` lines.\n   * @see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\n   * @see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html\n   */\n  readonly encodedKey: string;\n}\n\n/**\n * A Public Key Configuration\n *\n * @resource AWS::CloudFront::PublicKey\n */\nexport class PublicKey extends Resource implements IPublicKey {\n\n  /** Imports a Public Key from its id. */\n  public static fromPublicKeyId(scope: Construct, id: string, publicKeyId: string): IPublicKey {\n    return new class extends Resource implements IPublicKey {\n      public readonly publicKeyId = publicKeyId;\n    }(scope, id);\n  }\n\n  public readonly publicKeyId: string;\n\n  constructor(scope: Construct, id: string, props: PublicKeyProps) {\n    super(scope, id);\n\n    if (!Token.isUnresolved(props.encodedKey) && !/^-----BEGIN PUBLIC KEY-----/.test(props.encodedKey)) {\n      throw new Error(`Public key must be in PEM format (with the BEGIN/END PUBLIC KEY lines); got ${props.encodedKey}`);\n    }\n\n    const resource = new CfnPublicKey(this, 'Resource', {\n      publicKeyConfig: {\n        name: props.publicKeyName ?? this.generateName(),\n        callerReference: this.node.addr,\n        encodedKey: props.encodedKey,\n        comment: props.comment,\n      },\n    });\n\n    this.publicKeyId = resource.ref;\n  }\n\n  private generateName(): string {\n    const name = Names.uniqueId(this);\n    if (name.length > 80) {\n      return name.substring(0, 40) + name.substring(name.length - 40);\n    }\n    return name;\n  }\n}"],
  "mappings": "gNAAA,OAAA,QAAA,YAAA,EAEA,uBAAA,QAAA,wBAAA,EA2CA,MAAa,iBAAkB,QAAA,QAAQ,CAWrC,YAAY,MAAkB,GAAY,MAAqB,QAC7D,MAAM,MAAO,EAAE,EAEf,4EAAI,CAAC,OAAA,MAAM,aAAa,MAAM,UAAU,GAAK,CAAC,8BAA8B,KAAK,MAAM,UAAU,EAC/F,KAAM,IAAI,OAAM,+EAA+E,MAAM,YAAY,EAGnH,KAAM,UAAW,GAAI,wBAAA,aAAa,KAAM,WAAY,CAClD,gBAAiB,CACf,KAAI,IAAE,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,KAAK,aAAY,EAC9C,gBAAiB,KAAK,KAAK,KAC3B,WAAY,MAAM,WAClB,QAAS,MAAM,SAElB,EAED,KAAK,YAAc,SAAS,UAxBhB,iBAAgB,MAAkB,GAAY,YAAmB,CAC7E,MAAO,IAAI,cAAc,QAAA,QAAQ,CAAtB,aAAA,qBACO,KAAA,YAAc,WAChC,GAAE,MAAO,EAAE,EAwBL,cAAY,CAClB,KAAM,MAAO,OAAA,MAAM,SAAS,IAAI,EAChC,MAAI,MAAK,OAAS,GACT,KAAK,UAAU,EAAG,EAAE,EAAI,KAAK,UAAU,KAAK,OAAS,EAAE,EAEzD,MAnCX,QAAA,UAAA",
  "names": []
}
