{
  "version": 3,
  "sources": ["origin-request-policy.ts"],
  "sourcesContent": ["import { Names, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnOriginRequestPolicy } from './cloudfront.generated';\n\n/**\n * Represents a Origin Request Policy\n */\nexport interface IOriginRequestPolicy {\n  /**\n   * The ID of the origin request policy\n   * @attribute\n   */\n  readonly originRequestPolicyId: string;\n}\n\n/**\n * Properties for creating a Origin Request Policy\n */\nexport interface OriginRequestPolicyProps {\n  /**\n   * A unique name to identify the origin request policy.\n   * The name must only include '-', '_', or alphanumeric characters.\n   * @default - generated from the `id`\n   */\n  readonly originRequestPolicyName?: string;\n\n  /**\n   * A comment to describe the origin request policy.\n   * @default - no comment\n   */\n  readonly comment?: string;\n\n  /**\n   * The cookies from viewer requests to include in origin requests.\n   * @default OriginRequestCookieBehavior.none()\n   */\n  readonly cookieBehavior?: OriginRequestCookieBehavior;\n\n  /**\n   * The HTTP headers to include in origin requests. These can include headers from viewer requests and additional headers added by CloudFront.\n   * @default OriginRequestHeaderBehavior.none()\n   */\n  readonly headerBehavior?: OriginRequestHeaderBehavior;\n\n  /**\n   * The URL query strings from viewer requests to include in origin requests.\n   * @default OriginRequestQueryStringBehavior.none()\n   */\n  readonly queryStringBehavior?: OriginRequestQueryStringBehavior;\n}\n\n/**\n * A Origin Request Policy configuration.\n *\n * @resource AWS::CloudFront::OriginRequestPolicy\n */\nexport class OriginRequestPolicy extends Resource implements IOriginRequestPolicy {\n\n  /** This policy includes only the User-Agent and Referer headers. It doesn\u2019t include any query strings or cookies. */\n  public static readonly USER_AGENT_REFERER_HEADERS = OriginRequestPolicy.fromManagedOriginRequestPolicy('acba4595-bd28-49b8-b9fe-13317c0390fa');\n  /** This policy includes the header that enables cross-origin resource sharing (CORS) requests when the origin is a custom origin. */\n  public static readonly CORS_CUSTOM_ORIGIN = OriginRequestPolicy.fromManagedOriginRequestPolicy('59781a5b-3903-41f3-afcb-af62929ccde1');\n  /** This policy includes the headers that enable cross-origin resource sharing (CORS) requests when the origin is an Amazon S3 bucket. */\n  public static readonly CORS_S3_ORIGIN = OriginRequestPolicy.fromManagedOriginRequestPolicy('88a5eaf4-2fd4-4709-b370-b4c650ea3fcf');\n  /** This policy includes all values (query strings, headers, and cookies) in the viewer request. */\n  public static readonly ALL_VIEWER = OriginRequestPolicy.fromManagedOriginRequestPolicy('216adef6-5c7f-47e4-b989-5492eafa07d3');\n  /** This policy is designed for use with an origin that is an AWS Elemental MediaTailor endpoint. */\n  public static readonly ELEMENTAL_MEDIA_TAILOR = OriginRequestPolicy.fromManagedOriginRequestPolicy('775133bc-15f2-49f9-abea-afb2e0bf67d2');\n\n  /** Imports a Origin Request Policy from its id. */\n  public static fromOriginRequestPolicyId(scope: Construct, id: string, originRequestPolicyId: string): IOriginRequestPolicy {\n    return new class extends Resource implements IOriginRequestPolicy {\n      public readonly originRequestPolicyId = originRequestPolicyId;\n    }(scope, id);\n  }\n\n  /** Use an existing managed origin request policy. */\n  private static fromManagedOriginRequestPolicy(managedOriginRequestPolicyId: string): IOriginRequestPolicy {\n    return new class implements IOriginRequestPolicy {\n      public readonly originRequestPolicyId = managedOriginRequestPolicyId;\n    }();\n  }\n\n  public readonly originRequestPolicyId: string;\n\n  constructor(scope: Construct, id: string, props: OriginRequestPolicyProps = {}) {\n    super(scope, id, {\n      physicalName: props.originRequestPolicyName,\n    });\n\n    const originRequestPolicyName = props.originRequestPolicyName ?? Names.uniqueId(this);\n    if (!Token.isUnresolved(originRequestPolicyName) && !originRequestPolicyName.match(/^[\\w-]+$/i)) {\n      throw new Error(`'originRequestPolicyName' can only include '-', '_', and alphanumeric characters, got: '${props.originRequestPolicyName}'`);\n    }\n\n    const cookies = props.cookieBehavior ?? OriginRequestCookieBehavior.none();\n    const headers = props.headerBehavior ?? OriginRequestHeaderBehavior.none();\n    const queryStrings = props.queryStringBehavior ?? OriginRequestQueryStringBehavior.none();\n\n    const resource = new CfnOriginRequestPolicy(this, 'Resource', {\n      originRequestPolicyConfig: {\n        name: originRequestPolicyName,\n        comment: props.comment,\n        cookiesConfig: {\n          cookieBehavior: cookies.behavior,\n          cookies: cookies.cookies,\n        },\n        headersConfig: {\n          headerBehavior: headers.behavior,\n          headers: headers.headers,\n        },\n        queryStringsConfig: {\n          queryStringBehavior: queryStrings.behavior,\n          queryStrings: queryStrings.queryStrings,\n        },\n      },\n    });\n\n    this.originRequestPolicyId = resource.ref;\n  }\n}\n\n/**\n * Determines whether any cookies in viewer requests (and if so, which cookies)\n * are included in requests that CloudFront sends to the origin.\n */\nexport class OriginRequestCookieBehavior {\n  /**\n   * Cookies in viewer requests are not included in requests that CloudFront sends to the origin.\n   * Any cookies that are listed in a CachePolicy are still included in origin requests.\n   */\n  public static none() { return new OriginRequestCookieBehavior('none'); }\n\n  /** All cookies in viewer requests are included in requests that CloudFront sends to the origin. */\n  public static all() { return new OriginRequestCookieBehavior('all'); }\n\n  /** Only the provided `cookies` are included in requests that CloudFront sends to the origin. */\n  public static allowList(...cookies: string[]) {\n    if (cookies.length === 0) {\n      throw new Error('At least one cookie to allow must be provided');\n    }\n    return new OriginRequestCookieBehavior('whitelist', cookies);\n  }\n\n  /** The behavior of cookies: allow all, none or an allow list. */\n  public readonly behavior: string;\n  /** The cookies to allow, if the behavior is an allow list. */\n  public readonly cookies?: string[];\n\n  private constructor(behavior: string, cookies?: string[]) {\n    this.behavior = behavior;\n    this.cookies = cookies;\n  }\n}\n\n/**\n * Determines whether any HTTP headers (and if so, which headers) are included in requests that CloudFront sends to the origin.\n */\nexport class OriginRequestHeaderBehavior {\n  /**\n   * HTTP headers are not included in requests that CloudFront sends to the origin.\n   * Any headers that are listed in a CachePolicy are still included in origin requests.\n   */\n  public static none() { return new OriginRequestHeaderBehavior('none'); }\n\n  /**\n   * All HTTP headers in viewer requests are included in requests that CloudFront sends to the origin.\n   * Additionally, any additional CloudFront headers provided are included; the additional headers are added by CloudFront.\n   * @see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-cloudfront-headers.html\n   */\n  public static all(...cloudfrontHeaders: string[]) {\n    if (cloudfrontHeaders.length > 0) {\n      if (!cloudfrontHeaders.every(header => header.startsWith('CloudFront-'))) {\n        throw new Error('additional CloudFront headers passed to `OriginRequestHeaderBehavior.all()` must begin with \\'CloudFront-\\'');\n      }\n      return new OriginRequestHeaderBehavior('allViewerAndWhitelistCloudFront', cloudfrontHeaders);\n    } else {\n      return new OriginRequestHeaderBehavior('allViewer');\n    }\n  }\n\n  /** Listed headers are included in requests that CloudFront sends to the origin. */\n  public static allowList(...headers: string[]) {\n    if (headers.length === 0) {\n      throw new Error('At least one header to allow must be provided');\n    }\n    if (headers.map(header => header.toLowerCase()).some(header => ['authorization', 'accept-encoding'].includes(header))) {\n      throw new Error('you cannot pass `Authorization` or `Accept-Encoding` as header values; use a CachePolicy to forward these headers instead');\n    }\n    return new OriginRequestHeaderBehavior('whitelist', headers);\n  }\n\n  /** The behavior of headers: allow all, none or an allow list. */\n  public readonly behavior: string;\n  /** The headers for the allow list or the included CloudFront headers, if applicable. */\n  public readonly headers?: string[];\n\n  private constructor(behavior: string, headers?: string[]) {\n    this.behavior = behavior;\n    this.headers = headers;\n  }\n}\n\n/**\n * Determines whether any URL query strings in viewer requests (and if so, which query strings)\n * are included in requests that CloudFront sends to the origin.\n */\nexport class OriginRequestQueryStringBehavior {\n  /**\n   * Query strings in viewer requests are not included in requests that CloudFront sends to the origin.\n   * Any query strings that are listed in a CachePolicy are still included in origin requests.\n   */\n  public static none() { return new OriginRequestQueryStringBehavior('none'); }\n\n  /** All query strings in viewer requests are included in requests that CloudFront sends to the origin. */\n  public static all() { return new OriginRequestQueryStringBehavior('all'); }\n\n  /** Only the provided `queryStrings` are included in requests that CloudFront sends to the origin. */\n  public static allowList(...queryStrings: string[]) {\n    if (queryStrings.length === 0) {\n      throw new Error('At least one query string to allow must be provided');\n    }\n    return new OriginRequestQueryStringBehavior('whitelist', queryStrings);\n  }\n\n  /** The behavior of query strings -- allow all, none, or only an allow list. */\n  public readonly behavior: string;\n  /** The query strings to allow, if the behavior is an allow list. */\n  public readonly queryStrings?: string[];\n\n  private constructor(behavior: string, queryStrings?: string[]) {\n    this.behavior = behavior;\n    this.queryStrings = queryStrings;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
