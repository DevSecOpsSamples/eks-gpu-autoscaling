{
  "version": 3,
  "sources": ["distribution.ts"],
  "sourcesContent": ["import * as acm from '../../aws-certificatemanager';\nimport * as lambda from '../../aws-lambda';\nimport * as s3 from '../../aws-s3';\nimport { ArnFormat, IResource, Lazy, Resource, Stack, Token, Duration, Names, FeatureFlags } from '../../core';\nimport { CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021 } from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { ICachePolicy } from './cache-policy';\nimport { CfnDistribution } from './cloudfront.generated';\nimport { FunctionAssociation } from './function';\nimport { GeoRestriction } from './geo-restriction';\nimport { IKeyGroup } from './key-group';\nimport { IOrigin, OriginBindConfig, OriginBindOptions } from './origin';\nimport { IOriginRequestPolicy } from './origin-request-policy';\nimport { CacheBehavior } from './private/cache-behavior';\nimport { IResponseHeadersPolicy } from './response-headers-policy';\n\n/**\n * Interface for CloudFront distributions\n */\nexport interface IDistribution extends IResource {\n  /**\n   * The domain name of the Distribution, such as d111111abcdef8.cloudfront.net.\n   *\n   * @attribute\n   * @deprecated - Use `distributionDomainName` instead.\n   */\n  readonly domainName: string;\n\n  /**\n   * The domain name of the Distribution, such as d111111abcdef8.cloudfront.net.\n   *\n   * @attribute\n   */\n  readonly distributionDomainName: string;\n\n  /**\n   * The distribution ID for this distribution.\n   *\n   * @attribute\n   */\n  readonly distributionId: string;\n}\n\n/**\n * Attributes used to import a Distribution.\n */\nexport interface DistributionAttributes {\n  /**\n   * The generated domain name of the Distribution, such as d111111abcdef8.cloudfront.net.\n   *\n   * @attribute\n   */\n  readonly domainName: string;\n\n  /**\n   * The distribution ID for this distribution.\n   *\n   * @attribute\n   */\n  readonly distributionId: string;\n}\n\ninterface BoundOrigin extends OriginBindOptions, OriginBindConfig {\n  readonly origin: IOrigin;\n  readonly originGroupId?: string;\n}\n\n/**\n * Properties for a Distribution\n */\nexport interface DistributionProps {\n  /**\n   * The default behavior for the distribution.\n   */\n  readonly defaultBehavior: BehaviorOptions;\n\n  /**\n   * Additional behaviors for the distribution, mapped by the pathPattern that specifies which requests to apply the behavior to.\n   *\n   * @default - no additional behaviors are added.\n   */\n  readonly additionalBehaviors?: Record<string, BehaviorOptions>;\n\n  /**\n   * A certificate to associate with the distribution. The certificate must be located in N. Virginia (us-east-1).\n   *\n   * @default - the CloudFront wildcard certificate (*.cloudfront.net) will be used.\n   */\n  readonly certificate?: acm.ICertificate;\n\n  /**\n   * Any comments you want to include about the distribution.\n   *\n   * @default - no comment\n   */\n  readonly comment?: string;\n\n  /**\n   * The object that you want CloudFront to request from your origin (for example, index.html)\n   * when a viewer requests the root URL for your distribution. If no default object is set, the\n   * request goes to the origin's root (e.g., example.com/).\n   *\n   * @default - no default root object\n   */\n  readonly defaultRootObject?: string;\n\n  /**\n   * Alternative domain names for this distribution.\n   *\n   * If you want to use your own domain name, such as www.example.com, instead of the cloudfront.net domain name,\n   * you can add an alternate domain name to your distribution. If you attach a certificate to the distribution,\n   * you must add (at least one of) the domain names of the certificate to this list.\n   *\n   * @default - The distribution will only support the default generated name (e.g., d111111abcdef8.cloudfront.net)\n   */\n  readonly domainNames?: string[];\n\n  /**\n   * Enable or disable the distribution.\n   *\n   * @default true\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * Whether CloudFront will respond to IPv6 DNS requests with an IPv6 address.\n   *\n   * If you specify false, CloudFront responds to IPv6 DNS requests with the DNS response code NOERROR and with no IP addresses.\n   * This allows viewers to submit a second request, for an IPv4 address for your distribution.\n   *\n   * @default true\n   */\n  readonly enableIpv6?: boolean;\n\n  /**\n   * Enable access logging for the distribution.\n   *\n   * @default - false, unless `logBucket` is specified.\n   */\n  readonly enableLogging?: boolean;\n\n  /**\n   * Controls the countries in which your content is distributed.\n   *\n   * @default - No geographic restrictions\n   */\n  readonly geoRestriction?: GeoRestriction;\n\n  /**\n   * Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront.\n   *\n   * For viewers and CloudFront to use HTTP/2, viewers must support TLS 1.2 or later, and must support server name identification (SNI).\n   *\n   * @default HttpVersion.HTTP2\n   */\n  readonly httpVersion?: HttpVersion;\n\n  /**\n   * The Amazon S3 bucket to store the access logs in.\n   *\n   * @default - A bucket is created if `enableLogging` is true\n   */\n  readonly logBucket?: s3.IBucket;\n\n  /**\n   * Specifies whether you want CloudFront to include cookies in access logs\n   *\n   * @default false\n   */\n  readonly logIncludesCookies?: boolean;\n\n  /**\n   * An optional string that you want CloudFront to prefix to the access log filenames for this distribution.\n   *\n   * @default - no prefix\n   */\n  readonly logFilePrefix?: string;\n\n  /**\n   * The price class that corresponds with the maximum price that you want to pay for CloudFront service.\n   * If you specify PriceClass_All, CloudFront responds to requests for your objects from all CloudFront edge locations.\n   * If you specify a price class other than PriceClass_All, CloudFront serves your objects from the CloudFront edge location\n   * that has the lowest latency among the edge locations in your price class.\n   *\n   * @default PriceClass.PRICE_CLASS_ALL\n   */\n  readonly priceClass?: PriceClass;\n\n  /**\n   * Unique identifier that specifies the AWS WAF web ACL to associate with this CloudFront distribution.\n   *\n   * To specify a web ACL created using the latest version of AWS WAF, use the ACL ARN, for example\n   * `arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a`.\n   * To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example `473e64fd-f30b-4765-81a0-62ad96dd167a`.\n   *\n   * @see https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html\n   * @see https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html#API_CreateDistribution_RequestParameters.\n   *\n   * @default - No AWS Web Application Firewall web access control list (web ACL).\n   */\n  readonly webAclId?: string;\n\n  /**\n   * How CloudFront should handle requests that are not successful (e.g., PageNotFound).\n   *\n   * @default - No custom error responses.\n   */\n  readonly errorResponses?: ErrorResponse[];\n\n  /**\n    * The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections.\n    *\n    * CloudFront serves your objects only to browsers or devices that support at\n    * least the SSL version that you specify.\n    *\n    * @default - SecurityPolicyProtocol.TLS_V1_2_2021 if the '@aws-cdk/aws-cloudfront:defaultSecurityPolicyTLSv1.2_2021' feature flag is set; otherwise, SecurityPolicyProtocol.TLS_V1_2_2019.\n    */\n  readonly minimumProtocolVersion?: SecurityPolicyProtocol;\n}\n\n/**\n * A CloudFront distribution with associated origin(s) and caching behavior(s).\n */\nexport class Distribution extends Resource implements IDistribution {\n\n  /**\n   * Creates a Distribution construct that represents an external (imported) distribution.\n   */\n  public static fromDistributionAttributes(scope: Construct, id: string, attrs: DistributionAttributes): IDistribution {\n    return new class extends Resource implements IDistribution {\n      public readonly domainName: string;\n      public readonly distributionDomainName: string;\n      public readonly distributionId: string;\n\n      constructor() {\n        super(scope, id);\n        this.domainName = attrs.domainName;\n        this.distributionDomainName = attrs.domainName;\n        this.distributionId = attrs.distributionId;\n      }\n    }();\n  }\n\n  public readonly domainName: string;\n  public readonly distributionDomainName: string;\n  public readonly distributionId: string;\n\n  private readonly defaultBehavior: CacheBehavior;\n  private readonly additionalBehaviors: CacheBehavior[] = [];\n  private readonly boundOrigins: BoundOrigin[] = [];\n  private readonly originGroups: CfnDistribution.OriginGroupProperty[] = [];\n\n  private readonly errorResponses: ErrorResponse[];\n  private readonly certificate?: acm.ICertificate;\n\n  constructor(scope: Construct, id: string, props: DistributionProps) {\n    super(scope, id);\n\n    if (props.certificate) {\n      const certificateRegion = Stack.of(this).splitArn(props.certificate.certificateArn, ArnFormat.SLASH_RESOURCE_NAME).region;\n      if (!Token.isUnresolved(certificateRegion) && certificateRegion !== 'us-east-1') {\n        throw new Error(`Distribution certificates must be in the us-east-1 region and the certificate you provided is in ${certificateRegion}.`);\n      }\n\n      if ((props.domainNames ?? []).length === 0) {\n        throw new Error('Must specify at least one domain name to use a certificate with a distribution');\n      }\n    }\n\n    const originId = this.addOrigin(props.defaultBehavior.origin);\n    this.defaultBehavior = new CacheBehavior(originId, { pathPattern: '*', ...props.defaultBehavior });\n    if (props.additionalBehaviors) {\n      Object.entries(props.additionalBehaviors).forEach(([pathPattern, behaviorOptions]) => {\n        this.addBehavior(pathPattern, behaviorOptions.origin, behaviorOptions);\n      });\n    }\n\n    this.certificate = props.certificate;\n    this.errorResponses = props.errorResponses ?? [];\n\n    // Comments have an undocumented limit of 128 characters\n    const trimmedComment =\n      props.comment && props.comment.length > 128\n        ? `${props.comment.slice(0, 128 - 3)}...`\n        : props.comment;\n\n    const distribution = new CfnDistribution(this, 'Resource', {\n      distributionConfig: {\n        enabled: props.enabled ?? true,\n        origins: Lazy.any({ produce: () => this.renderOrigins() }),\n        originGroups: Lazy.any({ produce: () => this.renderOriginGroups() }),\n        defaultCacheBehavior: this.defaultBehavior._renderBehavior(),\n        aliases: props.domainNames,\n        cacheBehaviors: Lazy.any({ produce: () => this.renderCacheBehaviors() }),\n        comment: trimmedComment,\n        customErrorResponses: this.renderErrorResponses(),\n        defaultRootObject: props.defaultRootObject,\n        httpVersion: props.httpVersion ?? HttpVersion.HTTP2,\n        ipv6Enabled: props.enableIpv6 ?? true,\n        logging: this.renderLogging(props),\n        priceClass: props.priceClass ?? undefined,\n        restrictions: this.renderRestrictions(props.geoRestriction),\n        viewerCertificate: this.certificate ? this.renderViewerCertificate(this.certificate, props.minimumProtocolVersion) : undefined,\n        webAclId: props.webAclId,\n      },\n    });\n\n    this.domainName = distribution.attrDomainName;\n    this.distributionDomainName = distribution.attrDomainName;\n    this.distributionId = distribution.ref;\n  }\n\n  /**\n   * Adds a new behavior to this distribution for the given pathPattern.\n   *\n   * @param pathPattern the path pattern (e.g., 'images/*') that specifies which requests to apply the behavior to.\n   * @param origin the origin to use for this behavior\n   * @param behaviorOptions the options for the behavior at this path.\n   */\n  public addBehavior(pathPattern: string, origin: IOrigin, behaviorOptions: AddBehaviorOptions = {}) {\n    if (pathPattern === '*') {\n      throw new Error('Only the default behavior can have a path pattern of \\'*\\'');\n    }\n    const originId = this.addOrigin(origin);\n    this.additionalBehaviors.push(new CacheBehavior(originId, { pathPattern, ...behaviorOptions }));\n  }\n\n  private addOrigin(origin: IOrigin, isFailoverOrigin: boolean = false): string {\n    const ORIGIN_ID_MAX_LENGTH = 128;\n\n    const existingOrigin = this.boundOrigins.find(boundOrigin => boundOrigin.origin === origin);\n    if (existingOrigin) {\n      return existingOrigin.originGroupId ?? existingOrigin.originId;\n    } else {\n      const originIndex = this.boundOrigins.length + 1;\n      const scope = new Construct(this, `Origin${originIndex}`);\n      const originId = Names.uniqueId(scope).slice(-ORIGIN_ID_MAX_LENGTH);\n      const originBindConfig = origin.bind(scope, { originId });\n      if (!originBindConfig.failoverConfig) {\n        this.boundOrigins.push({ origin, originId, ...originBindConfig });\n      } else {\n        if (isFailoverOrigin) {\n          throw new Error('An Origin cannot use an Origin with its own failover configuration as its fallback origin!');\n        }\n        const groupIndex = this.originGroups.length + 1;\n        const originGroupId = Names.uniqueId(new Construct(this, `OriginGroup${groupIndex}`)).slice(-ORIGIN_ID_MAX_LENGTH);\n        this.boundOrigins.push({ origin, originId, originGroupId, ...originBindConfig });\n\n        const failoverOriginId = this.addOrigin(originBindConfig.failoverConfig.failoverOrigin, true);\n        this.addOriginGroup(originGroupId, originBindConfig.failoverConfig.statusCodes, originId, failoverOriginId);\n        return originGroupId;\n      }\n      return originId;\n    }\n  }\n\n  private addOriginGroup(originGroupId: string, statusCodes: number[] | undefined, originId: string, failoverOriginId: string): void {\n    statusCodes = statusCodes ?? [500, 502, 503, 504];\n    if (statusCodes.length === 0) {\n      throw new Error('fallbackStatusCodes cannot be empty');\n    }\n    this.originGroups.push({\n      failoverCriteria: {\n        statusCodes: {\n          items: statusCodes,\n          quantity: statusCodes.length,\n        },\n      },\n      id: originGroupId,\n      members: {\n        items: [\n          { originId },\n          { originId: failoverOriginId },\n        ],\n        quantity: 2,\n      },\n    });\n  }\n\n  private renderOrigins(): CfnDistribution.OriginProperty[] {\n    const renderedOrigins: CfnDistribution.OriginProperty[] = [];\n    this.boundOrigins.forEach(boundOrigin => {\n      if (boundOrigin.originProperty) {\n        renderedOrigins.push(boundOrigin.originProperty);\n      }\n    });\n    return renderedOrigins;\n  }\n\n  private renderOriginGroups(): CfnDistribution.OriginGroupsProperty | undefined {\n    return this.originGroups.length === 0\n      ? undefined\n      : {\n        items: this.originGroups,\n        quantity: this.originGroups.length,\n      };\n  }\n\n  private renderCacheBehaviors(): CfnDistribution.CacheBehaviorProperty[] | undefined {\n    if (this.additionalBehaviors.length === 0) { return undefined; }\n    return this.additionalBehaviors.map(behavior => behavior._renderBehavior());\n  }\n\n  private renderErrorResponses(): CfnDistribution.CustomErrorResponseProperty[] | undefined {\n    if (this.errorResponses.length === 0) { return undefined; }\n\n    return this.errorResponses.map(errorConfig => {\n      if (!errorConfig.responseHttpStatus && !errorConfig.ttl && !errorConfig.responsePagePath) {\n        throw new Error('A custom error response without either a \\'responseHttpStatus\\', \\'ttl\\' or \\'responsePagePath\\' is not valid.');\n      }\n\n      return {\n        errorCachingMinTtl: errorConfig.ttl?.toSeconds(),\n        errorCode: errorConfig.httpStatus,\n        responseCode: errorConfig.responsePagePath\n          ? errorConfig.responseHttpStatus ?? errorConfig.httpStatus\n          : errorConfig.responseHttpStatus,\n        responsePagePath: errorConfig.responsePagePath,\n      };\n    });\n  }\n\n  private renderLogging(props: DistributionProps): CfnDistribution.LoggingProperty | undefined {\n    if (!props.enableLogging && !props.logBucket) { return undefined; }\n    if (props.enableLogging === false && props.logBucket) {\n      throw new Error('Explicitly disabled logging but provided a logging bucket.');\n    }\n\n    const bucket = props.logBucket ?? new s3.Bucket(this, 'LoggingBucket', {\n      encryption: s3.BucketEncryption.S3_MANAGED,\n    });\n    return {\n      bucket: bucket.bucketRegionalDomainName,\n      includeCookies: props.logIncludesCookies,\n      prefix: props.logFilePrefix,\n    };\n  }\n\n  private renderRestrictions(geoRestriction?: GeoRestriction) {\n    return geoRestriction ? {\n      geoRestriction: {\n        restrictionType: geoRestriction.restrictionType,\n        locations: geoRestriction.locations,\n      },\n    } : undefined;\n  }\n\n  private renderViewerCertificate(certificate: acm.ICertificate,\n    minimumProtocolVersionProp?: SecurityPolicyProtocol): CfnDistribution.ViewerCertificateProperty {\n\n    const defaultVersion = FeatureFlags.of(this).isEnabled(CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021)\n      ? SecurityPolicyProtocol.TLS_V1_2_2021 : SecurityPolicyProtocol.TLS_V1_2_2019;\n    const minimumProtocolVersion = minimumProtocolVersionProp ?? defaultVersion;\n\n    return {\n      acmCertificateArn: certificate.certificateArn,\n      sslSupportMethod: SSLMethod.SNI,\n      minimumProtocolVersion: minimumProtocolVersion,\n    };\n  }\n}\n\n/** Maximum HTTP version to support */\nexport enum HttpVersion {\n  /** HTTP 1.1 */\n  HTTP1_1 = 'http1.1',\n  /** HTTP 2 */\n  HTTP2 = 'http2'\n}\n\n/**\n * The price class determines how many edge locations CloudFront will use for your distribution.\n * See https://aws.amazon.com/cloudfront/pricing/ for full list of supported regions.\n */\nexport enum PriceClass {\n  /** USA, Canada, Europe, & Israel */\n  PRICE_CLASS_100 = 'PriceClass_100',\n  /** PRICE_CLASS_100 + South Africa, Kenya, Middle East, Japan, Singapore, South Korea, Taiwan, Hong Kong, & Philippines */\n  PRICE_CLASS_200 = 'PriceClass_200',\n  /** All locations */\n  PRICE_CLASS_ALL = 'PriceClass_All'\n}\n\n/**\n * How HTTPs should be handled with your distribution.\n */\nexport enum ViewerProtocolPolicy {\n  /** HTTPS only */\n  HTTPS_ONLY = 'https-only',\n  /** Will redirect HTTP requests to HTTPS */\n  REDIRECT_TO_HTTPS = 'redirect-to-https',\n  /** Both HTTP and HTTPS supported */\n  ALLOW_ALL = 'allow-all'\n}\n\n/**\n * Defines what protocols CloudFront will use to connect to an origin.\n */\nexport enum OriginProtocolPolicy {\n  /** Connect on HTTP only */\n  HTTP_ONLY = 'http-only',\n  /** Connect with the same protocol as the viewer */\n  MATCH_VIEWER = 'match-viewer',\n  /** Connect on HTTPS only */\n  HTTPS_ONLY = 'https-only',\n}\n\n/**\n * The SSL method CloudFront will use for your distribution.\n *\n * Server Name Indication (SNI) - is an extension to the TLS computer networking protocol by which a client indicates\n *  which hostname it is attempting to connect to at the start of the handshaking process. This allows a server to present\n *  multiple certificates on the same IP address and TCP port number and hence allows multiple secure (HTTPS) websites\n * (or any other service over TLS) to be served by the same IP address without requiring all those sites to use the same certificate.\n *\n * CloudFront can use SNI to host multiple distributions on the same IP - which a large majority of clients will support.\n *\n * If your clients cannot support SNI however - CloudFront can use dedicated IPs for your distribution - but there is a prorated monthly charge for\n * using this feature. By default, we use SNI - but you can optionally enable dedicated IPs (VIP).\n *\n * See the CloudFront SSL for more details about pricing : https://aws.amazon.com/cloudfront/custom-ssl-domains/\n *\n */\nexport enum SSLMethod {\n  SNI = 'sni-only',\n  VIP = 'vip'\n}\n\n/**\n * The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections.\n * CloudFront serves your objects only to browsers or devices that support at least the SSL version that you specify.\n */\nexport enum SecurityPolicyProtocol {\n  SSL_V3 = 'SSLv3',\n  TLS_V1 = 'TLSv1',\n  TLS_V1_2016 = 'TLSv1_2016',\n  TLS_V1_1_2016 = 'TLSv1.1_2016',\n  TLS_V1_2_2018 = 'TLSv1.2_2018',\n  TLS_V1_2_2019 = 'TLSv1.2_2019',\n  TLS_V1_2_2021 = 'TLSv1.2_2021'\n}\n\n/**\n * The HTTP methods that the Behavior will accept requests on.\n */\nexport class AllowedMethods {\n  /** HEAD and GET */\n  public static readonly ALLOW_GET_HEAD = new AllowedMethods(['GET', 'HEAD']);\n  /** HEAD, GET, and OPTIONS */\n  public static readonly ALLOW_GET_HEAD_OPTIONS = new AllowedMethods(['GET', 'HEAD', 'OPTIONS']);\n  /** All supported HTTP methods */\n  public static readonly ALLOW_ALL = new AllowedMethods(['GET', 'HEAD', 'OPTIONS', 'PUT', 'PATCH', 'POST', 'DELETE']);\n\n  /** HTTP methods supported */\n  public readonly methods: string[];\n\n  private constructor(methods: string[]) { this.methods = methods; }\n}\n\n/**\n * The HTTP methods that the Behavior will cache requests on.\n */\nexport class CachedMethods {\n  /** HEAD and GET */\n  public static readonly CACHE_GET_HEAD = new CachedMethods(['GET', 'HEAD']);\n  /** HEAD, GET, and OPTIONS */\n  public static readonly CACHE_GET_HEAD_OPTIONS = new CachedMethods(['GET', 'HEAD', 'OPTIONS']);\n\n  /** HTTP methods supported */\n  public readonly methods: string[];\n\n  private constructor(methods: string[]) { this.methods = methods; }\n}\n\n/**\n * Options for configuring custom error responses.\n */\nexport interface ErrorResponse {\n  /**\n   * The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ErrorCode.\n   *\n   * @default - the default caching TTL behavior applies\n   */\n  readonly ttl?: Duration;\n  /**\n   * The HTTP status code for which you want to specify a custom error page and/or a caching duration.\n   */\n  readonly httpStatus: number;\n  /**\n   * The HTTP status code that you want CloudFront to return to the viewer along with the custom error page.\n   *\n   * If you specify a value for `responseHttpStatus`, you must also specify a value for `responsePagePath`.\n   *\n   * @default - the error code will be returned as the response code.\n   */\n  readonly responseHttpStatus?: number;\n  /**\n   * The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the\n   * `httpStatus`, for example, /4xx-errors/403-forbidden.html\n   *\n   * @default - the default CloudFront response is shown.\n   */\n  readonly responsePagePath?: string;\n}\n\n/**\n * The type of events that a Lambda@Edge function can be invoked in response to.\n */\nexport enum LambdaEdgeEventType {\n  /**\n   * The origin-request specifies the request to the\n   * origin location (e.g. S3)\n   */\n  ORIGIN_REQUEST = 'origin-request',\n\n  /**\n   * The origin-response specifies the response from the\n   * origin location (e.g. S3)\n   */\n  ORIGIN_RESPONSE = 'origin-response',\n\n  /**\n   * The viewer-request specifies the incoming request\n   */\n  VIEWER_REQUEST = 'viewer-request',\n\n  /**\n   * The viewer-response specifies the outgoing response\n   */\n  VIEWER_RESPONSE = 'viewer-response',\n}\n\n/**\n * Represents a Lambda function version and event type when using Lambda@Edge.\n * The type of the {@link AddBehaviorOptions.edgeLambdas} property.\n */\nexport interface EdgeLambda {\n  /**\n   * The version of the Lambda function that will be invoked.\n   *\n   * **Note**: it's not possible to use the '$LATEST' function version for Lambda@Edge!\n   */\n  readonly functionVersion: lambda.IVersion;\n\n  /** The type of event in response to which should the function be invoked. */\n  readonly eventType: LambdaEdgeEventType;\n\n  /**\n   * Allows a Lambda function to have read access to the body content.\n   * Only valid for \"request\" event types (`ORIGIN_REQUEST` or `VIEWER_REQUEST`).\n   * See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html\n   *\n   * @default false\n   */\n  readonly includeBody?: boolean;\n}\n\n/**\n * Options for adding a new behavior to a Distribution.\n */\nexport interface AddBehaviorOptions {\n  /**\n   * HTTP methods to allow for this behavior.\n   *\n   * @default AllowedMethods.ALLOW_GET_HEAD\n   */\n  readonly allowedMethods?: AllowedMethods;\n\n  /**\n   * HTTP methods to cache for this behavior.\n   *\n   * @default CachedMethods.CACHE_GET_HEAD\n   */\n  readonly cachedMethods?: CachedMethods;\n\n  /**\n   * The cache policy for this behavior. The cache policy determines what values are included in the cache key,\n   * and the time-to-live (TTL) values for the cache.\n   *\n   * @see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html.\n   * @default CachePolicy.CACHING_OPTIMIZED\n   */\n  readonly cachePolicy?: ICachePolicy;\n\n  /**\n   * Whether you want CloudFront to automatically compress certain files for this cache behavior.\n   * See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html#compressed-content-cloudfront-file-types\n   * for file types CloudFront will compress.\n   *\n   * @default true\n   */\n  readonly compress?: boolean;\n\n  /**\n   * The origin request policy for this behavior. The origin request policy determines which values (e.g., headers, cookies)\n   * are included in requests that CloudFront sends to the origin.\n   *\n   * @default - none\n   */\n  readonly originRequestPolicy?: IOriginRequestPolicy;\n\n  /**\n   * The response headers policy for this behavior. The response headers policy determines which headers are included in responses\n   *\n   * @default - none\n   */\n  readonly responseHeadersPolicy?: IResponseHeadersPolicy;\n\n  /**\n   * Set this to true to indicate you want to distribute media files in the Microsoft Smooth Streaming format using this behavior.\n   *\n   * @default false\n   */\n  readonly smoothStreaming?: boolean;\n\n  /**\n   * The protocol that viewers can use to access the files controlled by this behavior.\n   *\n   * @default ViewerProtocolPolicy.ALLOW_ALL\n   */\n  readonly viewerProtocolPolicy?: ViewerProtocolPolicy;\n\n  /**\n   * The CloudFront functions to invoke before serving the contents.\n   *\n   * @default - no functions will be invoked\n   */\n  readonly functionAssociations?: FunctionAssociation[];\n\n  /**\n   * The Lambda@Edge functions to invoke before serving the contents.\n   *\n   * @default - no Lambda functions will be invoked\n   * @see https://aws.amazon.com/lambda/edge\n   */\n  readonly edgeLambdas?: EdgeLambda[];\n\n  /**\n   * A list of Key Groups that CloudFront can use to validate signed URLs or signed cookies.\n   *\n   * @default - no KeyGroups are associated with cache behavior\n   * @see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\n   */\n  readonly trustedKeyGroups?: IKeyGroup[];\n}\n\n/**\n * Options for creating a new behavior.\n */\nexport interface BehaviorOptions extends AddBehaviorOptions {\n  /**\n   * The origin that you want CloudFront to route requests to when they match this behavior.\n   */\n  readonly origin: IOrigin;\n}\n"],
  "mappings": "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",
  "names": []
}
