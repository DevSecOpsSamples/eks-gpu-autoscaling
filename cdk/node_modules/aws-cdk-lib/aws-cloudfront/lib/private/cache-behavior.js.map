{
  "version": 3,
  "sources": ["cache-behavior.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport { CachePolicy } from '../cache-policy';\nimport { CfnDistribution } from '../cloudfront.generated';\nimport { AddBehaviorOptions, EdgeLambda, LambdaEdgeEventType, ViewerProtocolPolicy } from '../distribution';\n\n/**\n * Properties for specifying custom behaviors for origins.\n */\nexport interface CacheBehaviorProps extends AddBehaviorOptions {\n  /**\n   * The pattern (e.g., `images/*.jpg`) that specifies which requests to apply the behavior to.\n   * There must be exactly one behavior associated with each `Distribution` that has a path pattern\n   * of '*', which acts as the catch-all default behavior.\n   */\n  readonly pathPattern: string;\n}\n\n/**\n * Allows configuring a variety of CloudFront functionality for a given URL path pattern.\n *\n * Note: This really should simply by called 'Behavior', but this name is already taken by the legacy\n * CloudFrontWebDistribution implementation.\n */\nexport class CacheBehavior {\n  private readonly originId: string;\n\n  constructor(originId: string, private readonly props: CacheBehaviorProps) {\n    this.originId = originId;\n\n    this.validateEdgeLambdas(props.edgeLambdas);\n    this.grantEdgeLambdaFunctionExecutionRole(props.edgeLambdas);\n  }\n\n  /**\n   * Creates and returns the CloudFormation representation of this behavior.\n   * This renders as a \"CacheBehaviorProperty\" regardless of if this is a default\n   * cache behavior or not, as the two are identical except that the pathPattern\n   * is omitted for the default cache behavior.\n   *\n   * @internal\n   */\n  public _renderBehavior(): CfnDistribution.CacheBehaviorProperty {\n    return {\n      pathPattern: this.props.pathPattern,\n      targetOriginId: this.originId,\n      allowedMethods: this.props.allowedMethods?.methods,\n      cachedMethods: this.props.cachedMethods?.methods,\n      cachePolicyId: (this.props.cachePolicy ?? CachePolicy.CACHING_OPTIMIZED).cachePolicyId,\n      compress: this.props.compress ?? true,\n      originRequestPolicyId: this.props.originRequestPolicy?.originRequestPolicyId,\n      responseHeadersPolicyId: this.props.responseHeadersPolicy?.responseHeadersPolicyId,\n      smoothStreaming: this.props.smoothStreaming,\n      viewerProtocolPolicy: this.props.viewerProtocolPolicy ?? ViewerProtocolPolicy.ALLOW_ALL,\n      functionAssociations: this.props.functionAssociations?.map(association => ({\n        functionArn: association.function.functionArn,\n        eventType: association.eventType.toString(),\n      })),\n      lambdaFunctionAssociations: this.props.edgeLambdas?.map(edgeLambda => ({\n        lambdaFunctionArn: edgeLambda.functionVersion.edgeArn,\n        eventType: edgeLambda.eventType.toString(),\n        includeBody: edgeLambda.includeBody,\n      })),\n      trustedKeyGroups: this.props.trustedKeyGroups?.map(keyGroup => keyGroup.keyGroupId),\n    };\n  }\n\n  private validateEdgeLambdas(edgeLambdas?: EdgeLambda[]) {\n    const includeBodyEventTypes = [LambdaEdgeEventType.ORIGIN_REQUEST, LambdaEdgeEventType.VIEWER_REQUEST];\n    if (edgeLambdas && edgeLambdas.some(lambda => lambda.includeBody && !includeBodyEventTypes.includes(lambda.eventType))) {\n      throw new Error('\\'includeBody\\' can only be true for ORIGIN_REQUEST or VIEWER_REQUEST event types.');\n    }\n  }\n\n  private grantEdgeLambdaFunctionExecutionRole(edgeLambdas?: EdgeLambda[]) {\n    if (!edgeLambdas || edgeLambdas.length === 0) { return; }\n    edgeLambdas.forEach((edgeLambda) => {\n      const role = edgeLambda.functionVersion.role;\n      if (role && role instanceof iam.Role && role.assumeRolePolicy) {\n        role.assumeRolePolicy.addStatements(new iam.PolicyStatement({\n          actions: ['sts:AssumeRole'],\n          principals: [new iam.ServicePrincipal('edgelambda.amazonaws.com')],\n        }));\n      }\n    });\n  }\n}\n"],
  "mappings": "iGAAA,KAAA,KAAA,QAAA,kBAAA,EACA,eAAA,QAAA,iBAAA,EAEA,eAAA,QAAA,iBAAA,EAoBA,MAAa,aAAa,CAGxB,YAAY,SAAmC,MAAyB,CAAzB,KAAA,MAAA,MAC7C,KAAK,SAAW,SAEhB,KAAK,oBAAoB,MAAM,WAAW,EAC1C,KAAK,qCAAqC,MAAM,WAAW,EAWtD,iBAAe,mCACpB,MAAO,CACL,YAAa,KAAK,MAAM,YACxB,eAAgB,KAAK,SACrB,eAAc,IAAE,KAAK,MAAM,kBAAc,MAAA,KAAA,OAAA,OAAA,GAAE,QAC3C,cAAa,IAAE,KAAK,MAAM,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,QACzC,cAAe,KAAC,KAAK,MAAM,eAAW,MAAA,KAAA,OAAA,GAAI,eAAA,YAAY,mBAAmB,cACzE,SAAQ,IAAE,KAAK,MAAM,YAAQ,MAAA,KAAA,OAAA,GAAI,GACjC,sBAAqB,IAAE,KAAK,MAAM,uBAAmB,MAAA,KAAA,OAAA,OAAA,GAAE,sBACvD,wBAAuB,IAAE,KAAK,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,wBAC3D,gBAAiB,KAAK,MAAM,gBAC5B,qBAAoB,IAAE,KAAK,MAAM,wBAAoB,MAAA,KAAA,OAAA,GAAI,eAAA,qBAAqB,UAC9E,qBAAoB,IAAE,KAAK,MAAM,wBAAoB,MAAA,KAAA,OAAA,OAAA,GAAE,IAAI,aAAgB,EACzE,YAAa,YAAY,SAAS,YAClC,UAAW,YAAY,UAAU,SAAQ,GACzC,EACF,2BAA0B,IAAE,KAAK,MAAM,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,IAAI,YAAe,EACrE,kBAAmB,WAAW,gBAAgB,QAC9C,UAAW,WAAW,UAAU,SAAQ,EACxC,YAAa,WAAW,aACxB,EACF,iBAAgB,IAAE,KAAK,MAAM,oBAAgB,MAAA,KAAA,OAAA,OAAA,GAAE,IAAI,UAAY,SAAS,UAAU,GAI9E,oBAAoB,YAA0B,CACpD,KAAM,uBAAwB,CAAC,eAAA,oBAAoB,eAAgB,eAAA,oBAAoB,cAAc,EACrG,GAAI,aAAe,YAAY,KAAK,QAAU,OAAO,aAAe,CAAC,sBAAsB,SAAS,OAAO,SAAS,CAAC,EACnH,KAAM,IAAI,OAAM,kFAAoF,EAIhG,qCAAqC,YAA0B,CACrE,AAAI,CAAC,aAAe,YAAY,SAAW,GAC3C,YAAY,QAAQ,AAAC,YAAc,CACjC,KAAM,MAAO,WAAW,gBAAgB,KACxC,AAAI,MAAQ,eAAgB,KAAI,MAAQ,KAAK,kBAC3C,KAAK,iBAAiB,cAAc,GAAI,KAAI,gBAAgB,CAC1D,QAAS,CAAC,gBAAgB,EAC1B,WAAY,CAAC,GAAI,KAAI,iBAAiB,0BAA0B,CAAC,EAClE,CAAC,CAEN,CAAC,GA5DL,QAAA,cAAA",
  "names": []
}
