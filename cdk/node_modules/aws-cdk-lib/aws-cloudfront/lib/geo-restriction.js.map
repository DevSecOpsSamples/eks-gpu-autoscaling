{
  "version": 3,
  "sources": ["geo-restriction.ts"],
  "sourcesContent": ["/**\n * Controls the countries in which content is distributed.\n */\nexport class GeoRestriction {\n\n  /**\n   * Allow specific countries which you want CloudFront to distribute your content.\n   *\n   * @param locations Two-letter, uppercase country code for a country\n   * that you want to allow. Include one element for each country.\n   * See ISO 3166-1-alpha-2 code on the *International Organization for Standardization* website\n   */\n  public static allowlist(...locations: string[]) {\n    return new GeoRestriction('whitelist', GeoRestriction.validateLocations(locations));\n  }\n\n  /**\n   * Deny specific countries which you don't want CloudFront to distribute your content.\n   *\n   * @param locations Two-letter, uppercase country code for a country\n   * that you want to deny. Include one element for each country.\n   * See ISO 3166-1-alpha-2 code on the *International Organization for Standardization* website\n   */\n  public static denylist(...locations: string[]) {\n    return new GeoRestriction('blacklist', GeoRestriction.validateLocations(locations));\n  }\n\n  /**\n   * DEPRECATED\n   * @deprecated use `allowlist`\n   */\n  public static whitelist(...locations: string[]) {\n    return GeoRestriction.allowlist(...locations);\n  }\n\n  /**\n   * DEPRECATED\n   * @deprecated use `denylist`\n   */\n  public static blacklist(...locations: string[]) {\n    return GeoRestriction.denylist(...locations);\n  }\n\n  private static LOCATION_REGEX = /^[A-Z]{2}$/;\n\n  private static validateLocations(locations: string[]) {\n    if (locations.length === 0) {\n      throw new Error('Should provide at least 1 location');\n    }\n    locations.forEach(location => {\n      if (!GeoRestriction.LOCATION_REGEX.test(location)) {\n        // eslint-disable-next-line max-len\n        throw new Error(`Invalid location format for location: ${location}, location should be two-letter and uppercase country ISO 3166-1-alpha-2 code`);\n      }\n    });\n    return locations;\n  }\n\n  /**\n   * Creates an instance of GeoRestriction for internal use\n   *\n   * @param restrictionType Specifies the restriction type to impose\n   * @param locations Two-letter, uppercase country code for a country\n   * that you want to allow/deny. Include one element for each country.\n   * See ISO 3166-1-alpha-2 code on the *International Organization for Standardization* website\n   */\n  private constructor(readonly restrictionType: 'whitelist' | 'blacklist', readonly locations: string[]) {}\n}\n"],
  "mappings": "0JAGA,MAAa,cAAc,CA+DzB,YAA6B,gBAAqD,UAAmB,CAAxE,KAAA,gBAAA,gBAAqD,KAAA,UAAA,gBAtDpE,cAAa,UAAmB,CAC5C,MAAO,IAAI,gBAAe,YAAa,eAAe,kBAAkB,SAAS,CAAC,QAUtE,aAAY,UAAmB,CAC3C,MAAO,IAAI,gBAAe,YAAa,eAAe,kBAAkB,SAAS,CAAC,QAOtE,cAAa,UAAmB,CAC5C,MAAO,gBAAe,UAAU,GAAG,SAAS,QAOhC,cAAa,UAAmB,CAC5C,MAAO,gBAAe,SAAS,GAAG,SAAS,QAK9B,mBAAkB,UAAmB,CAClD,GAAI,UAAU,SAAW,EACvB,KAAM,IAAI,OAAM,oCAAoC,EAEtD,iBAAU,QAAQ,UAAW,CAC3B,GAAI,CAAC,eAAe,eAAe,KAAK,QAAQ,EAE9C,KAAM,IAAI,OAAM,yCAAyC,uFAAuF,CAEpJ,CAAC,EACM,WApDX,QAAA,eAAA,2HAwCiB,eAAA,eAAiB",
  "names": []
}
