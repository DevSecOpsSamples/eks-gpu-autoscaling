{
  "version": 3,
  "sources": ["cache-policy.ts"],
  "sourcesContent": ["import { Duration, Names, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnCachePolicy } from './cloudfront.generated';\n\n/**\n * Represents a Cache Policy\n */\nexport interface ICachePolicy {\n  /**\n   * The ID of the cache policy\n   * @attribute\n   */\n  readonly cachePolicyId: string;\n}\n\n/**\n * Properties for creating a Cache Policy\n */\nexport interface CachePolicyProps {\n  /**\n   * A unique name to identify the cache policy.\n   * The name must only include '-', '_', or alphanumeric characters.\n   * @default - generated from the `id`\n   */\n  readonly cachePolicyName?: string;\n\n  /**\n   * A comment to describe the cache policy.\n   * @default - no comment\n   */\n  readonly comment?: string;\n\n  /**\n   * The default amount of time for objects to stay in the CloudFront cache.\n   * Only used when the origin does not send Cache-Control or Expires headers with the object.\n   * @default - The greater of 1 day and ``minTtl``\n   */\n  readonly defaultTtl?: Duration;\n\n  /**\n   * The minimum amount of time for objects to stay in the CloudFront cache.\n   * @default Duration.seconds(0)\n   */\n  readonly minTtl?: Duration;\n\n  /**\n   * The maximum amount of time for objects to stay in the CloudFront cache.\n   * CloudFront uses this value only when the origin sends Cache-Control or Expires headers with the object.\n   * @default - The greater of 1 year and ``defaultTtl``\n   */\n  readonly maxTtl?: Duration;\n\n  /**\n   * Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin.\n   * @default CacheCookieBehavior.none()\n   */\n  readonly cookieBehavior?: CacheCookieBehavior;\n\n  /**\n   * Determines whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin.\n   * @default CacheHeaderBehavior.none()\n   */\n  readonly headerBehavior?: CacheHeaderBehavior;\n\n  /**\n   * Determines whether any query strings are included in the cache key and automatically included in requests that CloudFront sends to the origin.\n   * @default CacheQueryStringBehavior.none()\n   */\n  readonly queryStringBehavior?: CacheQueryStringBehavior;\n\n  /**\n   * Whether to normalize and include the `Accept-Encoding` header in the cache key when the `Accept-Encoding` header is 'gzip'.\n   * @default false\n   */\n  readonly enableAcceptEncodingGzip?: boolean;\n\n  /**\n   * Whether to normalize and include the `Accept-Encoding` header in the cache key when the `Accept-Encoding` header is 'br'.\n   * @default false\n   */\n  readonly enableAcceptEncodingBrotli?: boolean;\n}\n\n/**\n * A Cache Policy configuration.\n *\n * @resource AWS::CloudFront::CachePolicy\n * @link https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html\n */\nexport class CachePolicy extends Resource implements ICachePolicy {\n  /**\n   * This policy is designed for use with an origin that is an AWS Amplify web app.\n   */\n  public static readonly AMPLIFY = CachePolicy.fromManagedCachePolicy('2e54312d-136d-493c-8eb9-b001f22f67d2');\n  /**\n   * Optimize cache efficiency by minimizing the values that CloudFront includes in the cache key.\n   * Query strings and cookies are not included in the cache key, and only the normalized 'Accept-Encoding' header is included.\n   */\n  public static readonly CACHING_OPTIMIZED = CachePolicy.fromManagedCachePolicy('658327ea-f89d-4fab-a63d-7e88639e58f6');\n  /**\n   * Optimize cache efficiency by minimizing the values that CloudFront includes in the cache key.\n   * Query strings and cookies are not included in the cache key, and only the normalized 'Accept-Encoding' header is included.\n   * Disables cache compression.\n   */\n  public static readonly CACHING_OPTIMIZED_FOR_UNCOMPRESSED_OBJECTS = CachePolicy.fromManagedCachePolicy('b2884449-e4de-46a7-ac36-70bc7f1ddd6d');\n  /** Disables caching. This policy is useful for dynamic content and for requests that are not cacheable. */\n  public static readonly CACHING_DISABLED = CachePolicy.fromManagedCachePolicy('4135ea2d-6df8-44a3-9df3-4b5a84be39ad');\n  /** Designed for use with an origin that is an AWS Elemental MediaPackage endpoint. */\n  public static readonly ELEMENTAL_MEDIA_PACKAGE = CachePolicy.fromManagedCachePolicy('08627262-05a9-4f76-9ded-b50ca2e3a84f');\n\n  /** Imports a Cache Policy from its id. */\n  public static fromCachePolicyId(scope: Construct, id: string, cachePolicyId: string): ICachePolicy {\n    return new class extends Resource implements ICachePolicy {\n      public readonly cachePolicyId = cachePolicyId;\n    }(scope, id);\n  }\n\n  /** Use an existing managed cache policy. */\n  private static fromManagedCachePolicy(managedCachePolicyId: string): ICachePolicy {\n    return new class implements ICachePolicy {\n      public readonly cachePolicyId = managedCachePolicyId;\n    }();\n  }\n\n  public readonly cachePolicyId: string;\n\n  constructor(scope: Construct, id: string, props: CachePolicyProps = {}) {\n    super(scope, id, {\n      physicalName: props.cachePolicyName,\n    });\n\n    const cachePolicyName = props.cachePolicyName ?? `${Names.uniqueId(this).slice(0, 110)}-${Stack.of(this).region}`;\n\n    if (!Token.isUnresolved(cachePolicyName) && !cachePolicyName.match(/^[\\w-]+$/i)) {\n      throw new Error(`'cachePolicyName' can only include '-', '_', and alphanumeric characters, got: '${cachePolicyName}'`);\n    }\n\n    if (cachePolicyName.length > 128) {\n      throw new Error(`'cachePolicyName' cannot be longer than 128 characters, got: '${cachePolicyName.length}'`);\n    }\n\n    const minTtl = (props.minTtl ?? Duration.seconds(0)).toSeconds();\n    const defaultTtl = Math.max((props.defaultTtl ?? Duration.days(1)).toSeconds(), minTtl);\n    const maxTtl = Math.max((props.maxTtl ?? Duration.days(365)).toSeconds(), defaultTtl);\n\n    const resource = new CfnCachePolicy(this, 'Resource', {\n      cachePolicyConfig: {\n        name: cachePolicyName,\n        comment: props.comment,\n        minTtl,\n        maxTtl,\n        defaultTtl,\n        parametersInCacheKeyAndForwardedToOrigin: this.renderCacheKey(props),\n      },\n    });\n\n    this.cachePolicyId = resource.ref;\n  }\n\n  private renderCacheKey(props: CachePolicyProps): CfnCachePolicy.ParametersInCacheKeyAndForwardedToOriginProperty {\n    const cookies = props.cookieBehavior ?? CacheCookieBehavior.none();\n    const headers = props.headerBehavior ?? CacheHeaderBehavior.none();\n    const queryStrings = props.queryStringBehavior ?? CacheQueryStringBehavior.none();\n\n    return {\n      cookiesConfig: {\n        cookieBehavior: cookies.behavior,\n        cookies: cookies.cookies,\n      },\n      headersConfig: {\n        headerBehavior: headers.behavior,\n        headers: headers.headers,\n      },\n      enableAcceptEncodingGzip: props.enableAcceptEncodingGzip ?? false,\n      enableAcceptEncodingBrotli: props.enableAcceptEncodingBrotli ?? false,\n      queryStringsConfig: {\n        queryStringBehavior: queryStrings.behavior,\n        queryStrings: queryStrings.queryStrings,\n      },\n    };\n  }\n}\n\n/**\n * Determines whether any cookies in viewer requests are included in the cache key and\n * automatically included in requests that CloudFront sends to the origin.\n */\nexport class CacheCookieBehavior {\n  /**\n   * Cookies in viewer requests are not included in the cache key and\n   * are not automatically included in requests that CloudFront sends to the origin.\n   */\n  public static none() { return new CacheCookieBehavior('none'); }\n\n  /**\n   * All cookies in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.\n   */\n  public static all() { return new CacheCookieBehavior('all'); }\n\n  /**\n   * Only the provided `cookies` are included in the cache key and automatically included in requests that CloudFront sends to the origin.\n   */\n  public static allowList(...cookies: string[]) {\n    if (cookies.length === 0) {\n      throw new Error('At least one cookie to allow must be provided');\n    }\n    return new CacheCookieBehavior('whitelist', cookies);\n  }\n\n  /**\n   * All cookies except the provided `cookies` are included in the cache key and\n   * automatically included in requests that CloudFront sends to the origin.\n   */\n  public static denyList(...cookies: string[]) {\n    if (cookies.length === 0) {\n      throw new Error('At least one cookie to deny must be provided');\n    }\n    return new CacheCookieBehavior('allExcept', cookies);\n  }\n\n  /** The behavior of cookies: allow all, none, an allow list, or a deny list. */\n  public readonly behavior: string;\n  /** The cookies to allow or deny, if the behavior is an allow or deny list. */\n  public readonly cookies?: string[];\n\n  private constructor(behavior: string, cookies?: string[]) {\n    this.behavior = behavior;\n    this.cookies = cookies;\n  }\n}\n\n/**\n * Determines whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin.\n */\nexport class CacheHeaderBehavior {\n  /** HTTP headers are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin. */\n  public static none() { return new CacheHeaderBehavior('none'); }\n  /** Listed headers are included in the cache key and are automatically included in requests that CloudFront sends to the origin. */\n  public static allowList(...headers: string[]) {\n    if (headers.length === 0) {\n      throw new Error('At least one header to allow must be provided');\n    }\n    return new CacheHeaderBehavior('whitelist', headers);\n  }\n\n  /** If no headers will be passed, or an allow list of headers. */\n  public readonly behavior: string;\n  /** The headers for the allow/deny list, if applicable. */\n  public readonly headers?: string[];\n\n  private constructor(behavior: string, headers?: string[]) {\n    this.behavior = behavior;\n    this.headers = headers;\n  }\n}\n\n/**\n * Determines whether any URL query strings in viewer requests are included in the cache key\n * and automatically included in requests that CloudFront sends to the origin.\n */\nexport class CacheQueryStringBehavior {\n  /**\n   * Query strings in viewer requests are not included in the cache key and\n   * are not automatically included in requests that CloudFront sends to the origin.\n   */\n  public static none() { return new CacheQueryStringBehavior('none'); }\n\n  /**\n   * All query strings in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.\n   */\n  public static all() { return new CacheQueryStringBehavior('all'); }\n\n  /**\n   * Only the provided `queryStrings` are included in the cache key and automatically included in requests that CloudFront sends to the origin.\n   */\n  public static allowList(...queryStrings: string[]) {\n    if (queryStrings.length === 0) {\n      throw new Error('At least one query string to allow must be provided');\n    }\n    return new CacheQueryStringBehavior('whitelist', queryStrings);\n  }\n\n  /**\n   * All query strings except the provided `queryStrings` are included in the cache key and\n   * automatically included in requests that CloudFront sends to the origin.\n   */\n  public static denyList(...queryStrings: string[]) {\n    if (queryStrings.length === 0) {\n      throw new Error('At least one query string to deny must be provided');\n    }\n    return new CacheQueryStringBehavior('allExcept', queryStrings);\n  }\n\n  /** The behavior of query strings -- allow all, none, only an allow list, or a deny list. */\n  public readonly behavior: string;\n  /** The query strings to allow or deny, if the behavior is an allow or deny list. */\n  public readonly queryStrings?: string[];\n\n  private constructor(behavior: string, queryStrings?: string[]) {\n    this.behavior = behavior;\n    this.queryStrings = queryStrings;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
