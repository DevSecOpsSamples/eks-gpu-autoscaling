{
  "version": 3,
  "sources": ["function.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport { IResource, Names, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnFunction } from './cloudfront.generated';\n\n/**\n * Represents the function's source code\n */\nexport abstract class FunctionCode {\n\n  /**\n   * Inline code for function\n   * @returns code object with inline code.\n   * @param code The actual function code\n   */\n  public static fromInline(code: string): FunctionCode {\n    return new InlineCode(code);\n  }\n\n  /**\n   * Code from external file for function\n   * @returns code object with contents from file.\n   * @param options the options for the external file\n   */\n  public static fromFile(options: FileCodeOptions): FunctionCode {\n    return new FileCode(options);\n  }\n\n  /**\n   * renders the function code\n   */\n  public abstract render(): string;\n}\n\n/**\n * Options when reading the function's code from an external file\n */\nexport interface FileCodeOptions {\n  /**\n   * The path of the file to read the code from\n   */\n  readonly filePath: string;\n}\n\n/**\n * Represents the function's source code as inline code\n */\nclass InlineCode extends FunctionCode {\n\n  constructor(private code: string) {\n    super();\n  }\n\n  public render(): string {\n    return this.code;\n  }\n}\n\n\n/**\n * Represents the function's source code loaded from an external file\n */\nclass FileCode extends FunctionCode {\n\n  constructor(private options: FileCodeOptions) {\n    super();\n  }\n\n  public render(): string {\n    return fs.readFileSync(this.options.filePath, { encoding: 'utf-8' });\n  }\n}\n\n/**\n * Represents a CloudFront Function\n */\nexport interface IFunction extends IResource {\n  /**\n   * The name of the function.\n   * @attribute\n   */\n  readonly functionName: string;\n\n  /**\n   * The ARN of the function.\n   * @attribute\n   */\n  readonly functionArn: string;\n}\n\n/**\n * Attributes of an existing CloudFront Function to import it\n */\nexport interface FunctionAttributes {\n  /**\n   * The name of the function.\n   */\n  readonly functionName: string;\n\n  /**\n   * The ARN of the function.\n   */\n  readonly functionArn: string;\n}\n\n/**\n * Properties for creating a CloudFront Function\n */\nexport interface FunctionProps {\n  /**\n   * A name to identify the function.\n   * @default - generated from the `id`\n   */\n  readonly functionName?: string;\n\n  /**\n   * A comment to describe the function.\n   * @default - same as `functionName`\n   */\n  readonly comment?: string;\n\n  /**\n   * The source code of the function.\n   */\n  readonly code: FunctionCode;\n}\n\n/**\n * A CloudFront Function\n *\n * @resource AWS::CloudFront::Function\n */\nexport class Function extends Resource implements IFunction {\n\n  /** Imports a function by its name and ARN */\n  public static fromFunctionAttributes(scope: Construct, id: string, attrs: FunctionAttributes): IFunction {\n    return new class extends Resource implements IFunction {\n      public readonly functionName = attrs.functionName;\n      public readonly functionArn = attrs.functionArn;\n    }(scope, id);\n  }\n\n  /**\n   * the name of the CloudFront function\n   * @attribute\n   */\n  public readonly functionName: string;\n  /**\n   * the ARN of the CloudFront function\n   * @attribute\n   */\n  public readonly functionArn: string;\n  /**\n   * the deployment stage of the CloudFront function\n   * @attribute\n   */\n  public readonly functionStage: string;\n\n  constructor(scope: Construct, id: string, props: FunctionProps) {\n    super(scope, id);\n\n    this.functionName = props.functionName ?? this.generateName();\n\n    const resource = new CfnFunction(this, 'Resource', {\n      autoPublish: true,\n      functionCode: props.code.render(),\n      functionConfig: {\n        comment: props.comment ?? this.functionName,\n        runtime: 'cloudfront-js-1.0',\n      },\n      name: this.functionName,\n    });\n\n    this.functionArn = resource.attrFunctionArn;\n    this.functionStage = resource.attrStage;\n  }\n\n  private generateName(): string {\n    const name = Stack.of(this).region + Names.uniqueId(this);\n    if (name.length > 64) {\n      return name.substring(0, 32) + name.substring(name.length - 32);\n    }\n    return name;\n  }\n}\n\n/**\n * The type of events that a CloudFront function can be invoked in response to.\n */\nexport enum FunctionEventType {\n\n  /**\n   * The viewer-request specifies the incoming request\n   */\n  VIEWER_REQUEST = 'viewer-request',\n\n  /**\n   * The viewer-response specifies the outgoing response\n   */\n  VIEWER_RESPONSE = 'viewer-response',\n}\n\n/**\n * Represents a CloudFront function and event type when using CF Functions.\n * The type of the {@link AddBehaviorOptions.functionAssociations} property.\n */\nexport interface FunctionAssociation {\n  /**\n   * The CloudFront function that will be invoked.\n   */\n  readonly function: IFunction;\n\n  /** The type of event which should invoke the function. */\n  readonly eventType: FunctionEventType;\n}\n"],
  "mappings": "iQAAA,GAAA,QAAA,IAAA,EACA,OAAA,QAAA,YAAA,EAEA,uBAAA,QAAA,wBAAA,EAKA,MAAsB,YAAY,OAOlB,YAAW,KAAY,CACnC,MAAO,IAAI,YAAW,IAAI,QAQd,UAAS,QAAwB,oFACtC,GAAI,UAAS,OAAO,GAjB/B,QAAA,aAAA,qHAuCA,MAAM,kBAAmB,aAAY,CAEnC,YAAoB,KAAY,CAC9B,MAAK,EADa,KAAA,KAAA,KAIb,QAAM,CACX,MAAO,MAAK,MAQhB,MAAM,gBAAiB,aAAY,CAEjC,YAAoB,QAAwB,CAC1C,MAAK,EADa,KAAA,QAAA,QAIb,QAAM,CACX,MAAO,IAAG,aAAa,KAAK,QAAQ,SAAU,CAAE,SAAU,OAAO,CAAE,GA+DvE,MAAa,gBAAiB,QAAA,QAAQ,CA0BpC,YAAY,MAAkB,GAAY,MAAoB,WAC5D,MAAM,MAAO,EAAE,0EAEf,KAAK,aAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,KAAK,aAAY,EAE3D,KAAM,UAAW,GAAI,wBAAA,YAAY,KAAM,WAAY,CACjD,YAAa,GACb,aAAc,MAAM,KAAK,OAAM,EAC/B,eAAgB,CACd,QAAO,IAAE,MAAM,WAAO,MAAA,KAAA,OAAA,GAAI,KAAK,aAC/B,QAAS,qBAEX,KAAM,KAAK,aACZ,EAED,KAAK,YAAc,SAAS,gBAC5B,KAAK,cAAgB,SAAS,gBAvClB,wBAAuB,MAAkB,GAAY,MAAyB,qFACnF,GAAI,cAAc,QAAA,QAAQ,CAAtB,aAAA,qBACO,KAAA,aAAe,MAAM,aACrB,KAAA,YAAc,MAAM,WACtC,GAAE,MAAO,EAAE,EAsCL,cAAY,CAClB,KAAM,MAAO,OAAA,MAAM,GAAG,IAAI,EAAE,OAAS,OAAA,MAAM,SAAS,IAAI,EACxD,MAAI,MAAK,OAAS,GACT,KAAK,UAAU,EAAG,EAAE,EAAI,KAAK,UAAU,KAAK,OAAS,EAAE,EAEzD,MAlDX,QAAA,SAAA,yGAyDA,GAAY,mBAAZ,AAAA,UAAY,mBAAiB,CAK3B,mBAAA,eAAA,iBAKA,mBAAA,gBAAA,iBACF,GAXY,kBAAA,QAAA,mBAAA,SAAA,kBAAiB,CAAA,EAAA",
  "names": []
}
