{
  "version": 3,
  "sources": ["web-distribution.ts"],
  "sourcesContent": ["import * as certificatemanager from '../../aws-certificatemanager';\nimport * as iam from '../../aws-iam';\nimport * as lambda from '../../aws-lambda';\nimport * as s3 from '../../aws-s3';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnDistribution } from './cloudfront.generated';\nimport { HttpVersion, IDistribution, LambdaEdgeEventType, OriginProtocolPolicy, PriceClass, ViewerProtocolPolicy, SSLMethod, SecurityPolicyProtocol } from './distribution';\nimport { FunctionAssociation } from './function';\nimport { GeoRestriction } from './geo-restriction';\nimport { IKeyGroup } from './key-group';\nimport { IOriginAccessIdentity } from './origin-access-identity';\n\n/**\n * HTTP status code to failover to second origin\n */\nexport enum FailoverStatusCode {\n  /**\n   * Forbidden (403)\n   */\n  FORBIDDEN = 403,\n\n  /**\n   * Not found (404)\n   */\n  NOT_FOUND = 404,\n\n  /**\n   * Internal Server Error (500)\n   */\n  INTERNAL_SERVER_ERROR = 500,\n\n  /**\n   * Bad Gateway (502)\n   */\n  BAD_GATEWAY = 502,\n\n  /**\n   * Service Unavailable (503)\n   */\n  SERVICE_UNAVAILABLE = 503,\n\n  /**\n   * Gateway Timeout (504)\n   */\n  GATEWAY_TIMEOUT = 504,\n}\n\n/**\n * Configuration for custom domain names\n *\n * CloudFront can use a custom domain that you provide instead of a\n * \"cloudfront.net\" domain. To use this feature you must provide the list of\n * additional domains, and the ACM Certificate that CloudFront should use for\n * these additional domains.\n * @deprecated see {@link CloudFrontWebDistributionProps#viewerCertificate} with {@link ViewerCertificate#acmCertificate}\n */\nexport interface AliasConfiguration {\n  /**\n   * ARN of an AWS Certificate Manager (ACM) certificate.\n   */\n  readonly acmCertRef: string;\n\n  /**\n   * Domain names on the certificate\n   *\n   * Both main domain name and Subject Alternative Names.\n   */\n  readonly names: string[];\n\n  /**\n   * How CloudFront should serve HTTPS requests.\n   *\n   * See the notes on SSLMethod if you wish to use other SSL termination types.\n   *\n   * @default SSLMethod.SNI\n   * @see https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_ViewerCertificate.html\n   */\n  readonly sslMethod?: SSLMethod;\n\n  /**\n   * The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections.\n   *\n   * CloudFront serves your objects only to browsers or devices that support at\n   * least the SSL version that you specify.\n   *\n   * @default - SSLv3 if sslMethod VIP, TLSv1 if sslMethod SNI\n   */\n  readonly securityPolicy?: SecurityPolicyProtocol;\n}\n\n/**\n * Logging configuration for incoming requests\n */\nexport interface LoggingConfiguration {\n  /**\n   * Bucket to log requests to\n   *\n   * @default - A logging bucket is automatically created.\n   */\n  readonly bucket?: s3.IBucket,\n\n  /**\n   * Whether to include the cookies in the logs\n   *\n   * @default false\n   */\n  readonly includeCookies?: boolean,\n\n  /**\n   * Where in the bucket to store logs\n   *\n   * @default - No prefix.\n   */\n  readonly prefix?: string\n}\n\n// Subset of SourceConfiguration for rendering properties internally\ninterface SourceConfigurationRender {\n  readonly connectionAttempts?: number;\n  readonly connectionTimeout?: cdk.Duration;\n  readonly s3OriginSource?: S3OriginConfig;\n  readonly customOriginSource?: CustomOriginConfig;\n  readonly originPath?: string;\n  readonly originHeaders?: { [key: string]: string };\n  readonly originShieldRegion?: string\n}\n\n/**\n * A source configuration is a wrapper for CloudFront origins and behaviors.\n * An origin is what CloudFront will \"be in front of\" - that is, CloudFront will pull it's assets from an origin.\n *\n * If you're using s3 as a source - pass the `s3Origin` property, otherwise, pass the `customOriginSource` property.\n *\n * One or the other must be passed, and it is invalid to pass both in the same SourceConfiguration.\n */\nexport interface SourceConfiguration {\n  /**\n   * The number of times that CloudFront attempts to connect to the origin.\n   * You can specify 1, 2, or 3 as the number of attempts.\n   *\n   * @default 3\n   */\n  readonly connectionAttempts?: number;\n\n  /**\n   * The number of seconds that CloudFront waits when trying to establish a connection to the origin.\n   * You can specify a number of seconds between 1 and 10 (inclusive).\n   *\n   * @default cdk.Duration.seconds(10)\n   */\n  readonly connectionTimeout?: cdk.Duration;\n\n  /**\n   * An s3 origin source - if you're using s3 for your assets\n   */\n  readonly s3OriginSource?: S3OriginConfig;\n\n  /**\n   * A custom origin source - for all non-s3 sources.\n   */\n  readonly customOriginSource?: CustomOriginConfig;\n\n  /**\n   * An s3 origin source for failover in case the s3OriginSource returns invalid status code\n   *\n   * @default - no failover configuration\n   */\n  readonly failoverS3OriginSource?: S3OriginConfig;\n\n  /**\n   * A custom origin source for failover in case the s3OriginSource returns invalid status code\n   *\n   * @default - no failover configuration\n   */\n  readonly failoverCustomOriginSource?: CustomOriginConfig;\n\n  /**\n   * HTTP status code to failover to second origin\n   *\n   * @default [500, 502, 503, 504]\n   */\n  readonly failoverCriteriaStatusCodes?: FailoverStatusCode[];\n\n  /**\n   * The behaviors associated with this source.\n   * At least one (default) behavior must be included.\n   */\n  readonly behaviors: Behavior[];\n\n  /**\n   * The relative path to the origin root to use for sources.\n   *\n   * @default /\n   * @deprecated Use originPath on s3OriginSource or customOriginSource\n   */\n  readonly originPath?: string;\n\n  /**\n   * Any additional headers to pass to the origin\n   *\n   * @default - No additional headers are passed.\n   * @deprecated Use originHeaders on s3OriginSource or customOriginSource\n   */\n  readonly originHeaders?: { [key: string]: string };\n\n  /**\n   * When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance\n   *\n   * @see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html\n   *\n   * @default - origin shield not enabled\n   */\n  readonly originShieldRegion?: string;\n}\n\n/**\n * A custom origin configuration\n */\nexport interface CustomOriginConfig {\n  /**\n   * The domain name of the custom origin. Should not include the path - that should be in the parent SourceConfiguration\n   */\n  readonly domainName: string,\n\n  /**\n   * The origin HTTP port\n   *\n   * @default 80\n   */\n  readonly httpPort?: number,\n\n  /**\n   * The origin HTTPS port\n   *\n   * @default 443\n   */\n  readonly httpsPort?: number,\n\n  /**\n   * The keep alive timeout when making calls in seconds.\n   *\n   * @default Duration.seconds(5)\n   */\n  readonly originKeepaliveTimeout?: cdk.Duration,\n\n  /**\n   * The protocol (http or https) policy to use when interacting with the origin.\n   *\n   * @default OriginProtocolPolicy.HttpsOnly\n   */\n  readonly originProtocolPolicy?: OriginProtocolPolicy,\n\n  /**\n   * The read timeout when calling the origin in seconds\n   *\n   * @default Duration.seconds(30)\n   */\n  readonly originReadTimeout?: cdk.Duration\n\n  /**\n   * The SSL versions to use when interacting with the origin.\n   *\n   * @default OriginSslPolicy.TLS_V1_2\n   */\n  readonly allowedOriginSSLVersions?: OriginSslPolicy[];\n\n  /**\n   * The relative path to the origin root to use for sources.\n   *\n   * @default /\n   */\n  readonly originPath?: string;\n\n  /**\n   * Any additional headers to pass to the origin\n   *\n   * @default - No additional headers are passed.\n   */\n  readonly originHeaders?: { [key: string]: string };\n\n  /**\n   * When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance\n   *\n   * @default - origin shield not enabled\n   */\n  readonly originShieldRegion?: string;\n}\n\nexport enum OriginSslPolicy {\n  SSL_V3 = 'SSLv3',\n  TLS_V1 = 'TLSv1',\n  TLS_V1_1 = 'TLSv1.1',\n  TLS_V1_2 = 'TLSv1.2',\n}\n\n/**\n * S3 origin configuration for CloudFront\n */\nexport interface S3OriginConfig {\n  /**\n   * The source bucket to serve content from\n   */\n  readonly s3BucketSource: s3.IBucket;\n\n  /**\n   * The optional Origin Access Identity of the origin identity cloudfront will use when calling your s3 bucket.\n   *\n   * @default No Origin Access Identity which requires the S3 bucket to be public accessible\n   */\n  readonly originAccessIdentity?: IOriginAccessIdentity;\n\n  /**\n   * The relative path to the origin root to use for sources.\n   *\n   * @default /\n   */\n  readonly originPath?: string;\n\n  /**\n   * Any additional headers to pass to the origin\n   *\n   * @default - No additional headers are passed.\n   */\n  readonly originHeaders?: { [key: string]: string };\n\n  /**\n   * When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance\n   *\n   * @default - origin shield not enabled\n   */\n  readonly originShieldRegion?: string;\n}\n\n/**\n * An enum for the supported methods to a CloudFront distribution.\n */\nexport enum CloudFrontAllowedMethods {\n  GET_HEAD = 'GH',\n  GET_HEAD_OPTIONS = 'GHO',\n  ALL = 'ALL'\n}\n\n/**\n * Enums for the methods CloudFront can cache.\n */\nexport enum CloudFrontAllowedCachedMethods {\n  GET_HEAD = 'GH',\n  GET_HEAD_OPTIONS = 'GHO',\n}\n\n/**\n * A CloudFront behavior wrapper.\n */\nexport interface Behavior {\n\n  /**\n   * If CloudFront should automatically compress some content types.\n   *\n   * @default true\n   */\n  readonly compress?: boolean;\n\n  /**\n   * If this behavior is the default behavior for the distribution.\n   *\n   * You must specify exactly one default distribution per CloudFront distribution.\n   * The default behavior is allowed to omit the \"path\" property.\n   */\n  readonly isDefaultBehavior?: boolean;\n\n  /**\n   * Trusted signers is how CloudFront allows you to serve private content.\n   * The signers are the account IDs that are allowed to sign cookies/presigned URLs for this distribution.\n   *\n   * If you pass a non empty value, all requests for this behavior must be signed (no public access will be allowed)\n   * @deprecated - We recommend using trustedKeyGroups instead of trustedSigners.\n   */\n  readonly trustedSigners?: string[];\n\n  /**\n   * A list of Key Groups that CloudFront can use to validate signed URLs or signed cookies.\n   *\n   * @default - no KeyGroups are associated with cache behavior\n   * @see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\n   */\n  readonly trustedKeyGroups?: IKeyGroup[];\n\n  /**\n   *\n   * The default amount of time CloudFront will cache an object.\n   *\n   * This value applies only when your custom origin does not add HTTP headers,\n   * such as Cache-Control max-age, Cache-Control s-maxage, and Expires to objects.\n   * @default 86400 (1 day)\n   *\n   */\n  readonly defaultTtl?: cdk.Duration;\n\n  /**\n   * The method this CloudFront distribution responds do.\n   *\n   * @default GET_HEAD\n   */\n  readonly allowedMethods?: CloudFrontAllowedMethods;\n\n  /**\n   * The path this behavior responds to.\n   * Required for all non-default behaviors. (The default behavior implicitly has \"*\" as the path pattern. )\n   *\n   */\n  readonly pathPattern?: string;\n\n  /**\n   * Which methods are cached by CloudFront by default.\n   *\n   * @default GET_HEAD\n   */\n  readonly cachedMethods?: CloudFrontAllowedCachedMethods;\n\n  /**\n   * The values CloudFront will forward to the origin when making a request.\n   *\n   * @default none (no cookies - no headers)\n   *\n   */\n  readonly forwardedValues?: CfnDistribution.ForwardedValuesProperty;\n\n  /**\n   * The minimum amount of time that you want objects to stay in the cache\n   * before CloudFront queries your origin.\n   */\n  readonly minTtl?: cdk.Duration;\n\n  /**\n   * The max amount of time you want objects to stay in the cache\n   * before CloudFront queries your origin.\n   *\n   * @default Duration.seconds(31536000) (one year)\n   */\n  readonly maxTtl?: cdk.Duration;\n\n  /**\n   * Declares associated lambda@edge functions for this distribution behaviour.\n   *\n   * @default No lambda function associated\n   */\n  readonly lambdaFunctionAssociations?: LambdaFunctionAssociation[];\n\n  /**\n   * The CloudFront functions to invoke before serving the contents.\n   *\n   * @default - no functions will be invoked\n   */\n  readonly functionAssociations?: FunctionAssociation[];\n\n  /**\n   * The viewer policy for this behavior.\n   *\n   * @default - the distribution wide viewer protocol policy will be used\n   */\n  readonly viewerProtocolPolicy?: ViewerProtocolPolicy;\n}\n\nexport interface LambdaFunctionAssociation {\n\n  /**\n   * The lambda event type defines at which event the lambda\n   * is called during the request lifecycle\n   */\n  readonly eventType: LambdaEdgeEventType;\n\n  /**\n   * A version of the lambda to associate\n   */\n  readonly lambdaFunction: lambda.IVersion;\n\n  /**\n   * Allows a Lambda function to have read access to the body content.\n   * Only valid for \"request\" event types (`ORIGIN_REQUEST` or `VIEWER_REQUEST`).\n   * See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html\n   *\n   * @default false\n   */\n  readonly includeBody?: boolean;\n}\n\nexport interface ViewerCertificateOptions {\n  /**\n   * How CloudFront should serve HTTPS requests.\n   *\n   * See the notes on SSLMethod if you wish to use other SSL termination types.\n   *\n   * @default SSLMethod.SNI\n   * @see https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_ViewerCertificate.html\n   */\n  readonly sslMethod?: SSLMethod;\n\n  /**\n   * The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections.\n   *\n   * CloudFront serves your objects only to browsers or devices that support at\n   * least the SSL version that you specify.\n   *\n   * @default - SSLv3 if sslMethod VIP, TLSv1 if sslMethod SNI\n   */\n  readonly securityPolicy?: SecurityPolicyProtocol;\n\n  /**\n   * Domain names on the certificate (both main domain name and Subject Alternative names)\n   */\n  readonly aliases?: string[];\n}\n\n/**\n * Viewer certificate configuration class\n */\nexport class ViewerCertificate {\n  /**\n   * Generate an AWS Certificate Manager (ACM) viewer certificate configuration\n   *\n   * @param certificate AWS Certificate Manager (ACM) certificate.\n   *                    Your certificate must be located in the us-east-1 (US East (N. Virginia)) region to be accessed by CloudFront\n   * @param options certificate configuration options\n   */\n  public static fromAcmCertificate(certificate: certificatemanager.ICertificate, options: ViewerCertificateOptions = {}) {\n    const {\n      sslMethod: sslSupportMethod = SSLMethod.SNI,\n      securityPolicy: minimumProtocolVersion,\n      aliases,\n    } = options;\n\n    return new ViewerCertificate({\n      acmCertificateArn: certificate.certificateArn, sslSupportMethod, minimumProtocolVersion,\n    }, aliases);\n  }\n\n  /**\n   * Generate an IAM viewer certificate configuration\n   *\n   * @param iamCertificateId Identifier of the IAM certificate\n   * @param options certificate configuration options\n   */\n  public static fromIamCertificate(iamCertificateId: string, options: ViewerCertificateOptions = {}) {\n    const {\n      sslMethod: sslSupportMethod = SSLMethod.SNI,\n      securityPolicy: minimumProtocolVersion,\n      aliases,\n    } = options;\n\n    return new ViewerCertificate({\n      iamCertificateId, sslSupportMethod, minimumProtocolVersion,\n    }, aliases);\n  }\n\n  /**\n   * Generate a viewer certifcate configuration using\n   * the CloudFront default certificate (e.g. d111111abcdef8.cloudfront.net)\n   * and a {@link SecurityPolicyProtocol.TLS_V1} security policy.\n   *\n   * @param aliases Alternative CNAME aliases\n   *                You also must create a CNAME record with your DNS service to route queries\n   */\n  public static fromCloudFrontDefaultCertificate(...aliases: string[]) {\n    return new ViewerCertificate({ cloudFrontDefaultCertificate: true }, aliases);\n  }\n\n  private constructor(\n    public readonly props: CfnDistribution.ViewerCertificateProperty,\n    public readonly aliases: string[] = []) { }\n}\n\nexport interface CloudFrontWebDistributionProps {\n\n  /**\n   * AliasConfiguration is used to configured CloudFront to respond to requests on custom domain names.\n   *\n   * @default - None.\n   * @deprecated see {@link CloudFrontWebDistributionProps#viewerCertificate} with {@link ViewerCertificate#acmCertificate}\n   */\n  readonly aliasConfiguration?: AliasConfiguration;\n\n  /**\n   * A comment for this distribution in the CloudFront console.\n   *\n   * @default - No comment is added to distribution.\n   */\n  readonly comment?: string;\n\n  /**\n   * Enable or disable the distribution.\n   *\n   * @default true\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * The default object to serve.\n   *\n   * @default - \"index.html\" is served.\n   */\n  readonly defaultRootObject?: string;\n\n  /**\n   * If your distribution should have IPv6 enabled.\n   *\n   * @default true\n   */\n  readonly enableIpV6?: boolean;\n\n  /**\n   * The max supported HTTP Versions.\n   *\n   * @default HttpVersion.HTTP2\n   */\n  readonly httpVersion?: HttpVersion;\n\n  /**\n   * The price class for the distribution (this impacts how many locations CloudFront uses for your distribution, and billing)\n   *\n   * @default PriceClass.PRICE_CLASS_100 the cheapest option for CloudFront is picked by default.\n   */\n  readonly priceClass?: PriceClass;\n\n  /**\n   * The default viewer policy for incoming clients.\n   *\n   * @default RedirectToHTTPs\n   */\n  readonly viewerProtocolPolicy?: ViewerProtocolPolicy;\n\n  /**\n   * The origin configurations for this distribution. Behaviors are a part of the origin.\n   */\n  readonly originConfigs: SourceConfiguration[];\n\n  /**\n   * Optional - if we should enable logging.\n   * You can pass an empty object ({}) to have us auto create a bucket for logging.\n   * Omission of this property indicates no logging is to be enabled.\n   *\n   * @default - no logging is enabled by default.\n   */\n  readonly loggingConfig?: LoggingConfiguration;\n\n  /**\n   * How CloudFront should handle requests that are not successful (eg PageNotFound)\n   *\n   * By default, CloudFront does not replace HTTP status codes in the 4xx and 5xx range\n   * with custom error messages. CloudFront does not cache HTTP status codes.\n   *\n   * @default - No custom error configuration.\n   */\n  readonly errorConfigurations?: CfnDistribution.CustomErrorResponseProperty[];\n\n  /**\n   * Unique identifier that specifies the AWS WAF web ACL to associate with this CloudFront distribution.\n   *\n   * To specify a web ACL created using the latest version of AWS WAF, use the ACL ARN, for example\n   * `arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a`.\n   *\n   * To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example `473e64fd-f30b-4765-81a0-62ad96dd167a`.\n   *\n   * @see https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html\n   * @see https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html#API_CreateDistribution_RequestParameters.\n   *\n   * @default - No AWS Web Application Firewall web access control list (web ACL).\n   */\n  readonly webACLId?: string;\n\n  /**\n   * Specifies whether you want viewers to use HTTP or HTTPS to request your objects,\n   * whether you're using an alternate domain name with HTTPS, and if so,\n   * if you're using AWS Certificate Manager (ACM) or a third-party certificate authority.\n   *\n   * @default ViewerCertificate.fromCloudFrontDefaultCertificate()\n   *\n   * @see https://aws.amazon.com/premiumsupport/knowledge-center/custom-ssl-certificate-cloudfront/\n   */\n  readonly viewerCertificate?: ViewerCertificate;\n\n  /**\n   * Controls the countries in which your content is distributed.\n   *\n   * @default No geo restriction\n   */\n  readonly geoRestriction?: GeoRestriction;\n}\n\n/**\n * Internal only - just adds the originId string to the Behavior\n */\ninterface BehaviorWithOrigin extends Behavior {\n  readonly targetOriginId: string;\n}\n\n/**\n * Attributes used to import a Distribution.\n */\nexport interface CloudFrontWebDistributionAttributes {\n  /**\n   * The generated domain name of the Distribution, such as d111111abcdef8.cloudfront.net.\n   *\n   * @attribute\n   */\n  readonly domainName: string;\n\n  /**\n   * The distribution ID for this distribution.\n   *\n   * @attribute\n   */\n  readonly distributionId: string;\n}\n\n/**\n * Amazon CloudFront is a global content delivery network (CDN) service that securely delivers data, videos,\n * applications, and APIs to your viewers with low latency and high transfer speeds.\n * CloudFront fronts user provided content and caches it at edge locations across the world.\n *\n * Here's how you can use this construct:\n *\n * ```ts\n * const sourceBucket = new s3.Bucket(this, 'Bucket');\n *\n * const distribution = new cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n *   originConfigs: [\n *     {\n *       s3OriginSource: {\n *       s3BucketSource: sourceBucket,\n *       },\n *       behaviors : [ {isDefaultBehavior: true}],\n *     },\n *   ],\n * });\n * ```\n *\n * This will create a CloudFront distribution that uses your S3Bucket as it's origin.\n *\n * You can customize the distribution using additional properties from the CloudFrontWebDistributionProps interface.\n *\n * @resource AWS::CloudFront::Distribution\n */\nexport class CloudFrontWebDistribution extends cdk.Resource implements IDistribution {\n\n  /**\n   * Creates a construct that represents an external (imported) distribution.\n   */\n  public static fromDistributionAttributes(scope: Construct, id: string, attrs: CloudFrontWebDistributionAttributes): IDistribution {\n    return new class extends cdk.Resource implements IDistribution {\n      public readonly domainName: string;\n      public readonly distributionDomainName: string;\n      public readonly distributionId: string;\n\n      constructor() {\n        super(scope, id);\n        this.domainName = attrs.domainName;\n        this.distributionDomainName = attrs.domainName;\n        this.distributionId = attrs.distributionId;\n      }\n    }();\n  }\n\n  /**\n   * The logging bucket for this CloudFront distribution.\n   * If logging is not enabled for this distribution - this property will be undefined.\n   */\n  public readonly loggingBucket?: s3.IBucket;\n\n  /**\n   * The domain name created by CloudFront for this distribution.\n   * If you are using aliases for your distribution, this is the domainName your DNS records should point to.\n   * (In Route53, you could create an ALIAS record to this value, for example.)\n   *\n   * @deprecated - Use `distributionDomainName` instead.\n   */\n  public readonly domainName: string;\n\n  /**\n   * The domain name created by CloudFront for this distribution.\n   * If you are using aliases for your distribution, this is the domainName your DNS records should point to.\n   * (In Route53, you could create an ALIAS record to this value, for example.)\n   */\n  public readonly distributionDomainName: string;\n\n  /**\n   * The distribution ID for this distribution.\n   */\n  public readonly distributionId: string;\n\n  /**\n   * Maps our methods to the string arrays they are\n   */\n  private readonly METHOD_LOOKUP_MAP = {\n    GH: ['GET', 'HEAD'],\n    GHO: ['GET', 'HEAD', 'OPTIONS'],\n    ALL: ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT'],\n  };\n\n  /**\n   * Maps for which SecurityPolicyProtocol are available to which SSLMethods\n   */\n  private readonly VALID_SSL_PROTOCOLS: { [method in SSLMethod]: string[] } = {\n    [SSLMethod.SNI]: [\n      SecurityPolicyProtocol.TLS_V1, SecurityPolicyProtocol.TLS_V1_1_2016,\n      SecurityPolicyProtocol.TLS_V1_2016, SecurityPolicyProtocol.TLS_V1_2_2018,\n      SecurityPolicyProtocol.TLS_V1_2_2019, SecurityPolicyProtocol.TLS_V1_2_2021,\n    ],\n    [SSLMethod.VIP]: [SecurityPolicyProtocol.SSL_V3, SecurityPolicyProtocol.TLS_V1],\n  };\n\n  constructor(scope: Construct, id: string, props: CloudFrontWebDistributionProps) {\n    super(scope, id);\n\n    // Comments have an undocumented limit of 128 characters\n    const trimmedComment =\n      props.comment && props.comment.length > 128\n        ? `${props.comment.slice(0, 128 - 3)}...`\n        : props.comment;\n\n    let distributionConfig: CfnDistribution.DistributionConfigProperty = {\n      comment: trimmedComment,\n      enabled: props.enabled ?? true,\n      defaultRootObject: props.defaultRootObject ?? 'index.html',\n      httpVersion: props.httpVersion || HttpVersion.HTTP2,\n      priceClass: props.priceClass || PriceClass.PRICE_CLASS_100,\n      ipv6Enabled: props.enableIpV6 ?? true,\n      // eslint-disable-next-line max-len\n      customErrorResponses: props.errorConfigurations, // TODO: validation : https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-customerrorresponse.html#cfn-cloudfront-distribution-customerrorresponse-errorcachingminttl\n      webAclId: props.webACLId,\n    };\n\n    const behaviors: BehaviorWithOrigin[] = [];\n\n    const origins: CfnDistribution.OriginProperty[] = [];\n\n    const originGroups: CfnDistribution.OriginGroupProperty[] = [];\n\n    let originIndex = 1;\n    for (const originConfig of props.originConfigs) {\n      let originId = `origin${originIndex}`;\n      const originProperty = this.toOriginProperty(originConfig, originId);\n\n      if (originConfig.failoverCustomOriginSource || originConfig.failoverS3OriginSource) {\n        const originSecondaryId = `originSecondary${originIndex}`;\n        const originSecondaryProperty = this.toOriginProperty(\n          {\n            s3OriginSource: originConfig.failoverS3OriginSource,\n            customOriginSource: originConfig.failoverCustomOriginSource,\n            originPath: originConfig.originPath,\n            originHeaders: originConfig.originHeaders,\n            originShieldRegion: originConfig.originShieldRegion,\n          },\n          originSecondaryId,\n        );\n        const originGroupsId = `OriginGroup${originIndex}`;\n        const failoverCodes = originConfig.failoverCriteriaStatusCodes ?? [500, 502, 503, 504];\n        originGroups.push({\n          id: originGroupsId,\n          members: {\n            items: [{ originId }, { originId: originSecondaryId }],\n            quantity: 2,\n          },\n          failoverCriteria: {\n            statusCodes: {\n              items: failoverCodes,\n              quantity: failoverCodes.length,\n            },\n          },\n        });\n        originId = originGroupsId;\n        origins.push(originSecondaryProperty);\n      }\n\n      for (const behavior of originConfig.behaviors) {\n        behaviors.push({ ...behavior, targetOriginId: originId });\n      }\n\n      origins.push(originProperty);\n      originIndex++;\n    }\n\n    origins.forEach(origin => {\n      if (!origin.s3OriginConfig && !origin.customOriginConfig) {\n        throw new Error(`Origin ${origin.domainName} is missing either S3OriginConfig or CustomOriginConfig. At least 1 must be specified.`);\n      }\n    });\n    const originGroupsDistConfig =\n      originGroups.length > 0\n        ? {\n          items: originGroups,\n          quantity: originGroups.length,\n        }\n        : undefined;\n    distributionConfig = {\n      ...distributionConfig,\n      origins,\n      originGroups: originGroupsDistConfig,\n    };\n\n    const defaultBehaviors = behaviors.filter(behavior => behavior.isDefaultBehavior);\n    if (defaultBehaviors.length !== 1) {\n      throw new Error('There can only be one default behavior across all sources. [ One default behavior per distribution ].');\n    }\n\n    distributionConfig = { ...distributionConfig, defaultCacheBehavior: this.toBehavior(defaultBehaviors[0], props.viewerProtocolPolicy) };\n\n    const otherBehaviors: CfnDistribution.CacheBehaviorProperty[] = [];\n    for (const behavior of behaviors.filter(b => !b.isDefaultBehavior)) {\n      if (!behavior.pathPattern) {\n        throw new Error('pathPattern is required for all non-default behaviors');\n      }\n      otherBehaviors.push(this.toBehavior(behavior, props.viewerProtocolPolicy) as CfnDistribution.CacheBehaviorProperty);\n    }\n\n    distributionConfig = { ...distributionConfig, cacheBehaviors: otherBehaviors.length > 0 ? otherBehaviors : undefined };\n\n    if (props.aliasConfiguration && props.viewerCertificate) {\n      throw new Error([\n        'You cannot set both aliasConfiguration and viewerCertificate properties.',\n        'Please only use viewerCertificate, as aliasConfiguration is deprecated.',\n      ].join(' '));\n    }\n\n    let _viewerCertificate = props.viewerCertificate;\n    if (props.aliasConfiguration) {\n      const { acmCertRef, securityPolicy, sslMethod, names: aliases } = props.aliasConfiguration;\n\n      _viewerCertificate = ViewerCertificate.fromAcmCertificate(\n        certificatemanager.Certificate.fromCertificateArn(this, 'AliasConfigurationCert', acmCertRef),\n        { securityPolicy, sslMethod, aliases },\n      );\n    }\n\n    if (_viewerCertificate) {\n      const { props: viewerCertificate, aliases } = _viewerCertificate;\n      Object.assign(distributionConfig, { aliases, viewerCertificate });\n\n      const { minimumProtocolVersion, sslSupportMethod } = viewerCertificate;\n\n      if (minimumProtocolVersion != null && sslSupportMethod != null) {\n        const validProtocols = this.VALID_SSL_PROTOCOLS[sslSupportMethod as SSLMethod];\n\n        if (validProtocols.indexOf(minimumProtocolVersion.toString()) === -1) {\n          // eslint-disable-next-line max-len\n          throw new Error(`${minimumProtocolVersion} is not compabtible with sslMethod ${sslSupportMethod}.\\n\\tValid Protocols are: ${validProtocols.join(', ')}`);\n        }\n      }\n    } else {\n      distributionConfig = {\n        ...distributionConfig,\n        viewerCertificate: { cloudFrontDefaultCertificate: true },\n      };\n    }\n\n    if (props.loggingConfig) {\n      this.loggingBucket = props.loggingConfig.bucket || new s3.Bucket(this, 'LoggingBucket', {\n        encryption: s3.BucketEncryption.S3_MANAGED,\n      });\n      distributionConfig = {\n        ...distributionConfig,\n        logging: {\n          bucket: this.loggingBucket.bucketRegionalDomainName,\n          includeCookies: props.loggingConfig.includeCookies || false,\n          prefix: props.loggingConfig.prefix,\n        },\n      };\n    }\n\n    if (props.geoRestriction) {\n      distributionConfig = {\n        ...distributionConfig,\n        restrictions: {\n          geoRestriction: {\n            restrictionType: props.geoRestriction.restrictionType,\n            locations: props.geoRestriction.locations,\n          },\n        },\n      };\n    }\n\n    const distribution = new CfnDistribution(this, 'CFDistribution', { distributionConfig });\n    this.node.defaultChild = distribution;\n    this.domainName = distribution.attrDomainName;\n    this.distributionDomainName = distribution.attrDomainName;\n    this.distributionId = distribution.ref;\n  }\n\n  private toBehavior(input: BehaviorWithOrigin, protoPolicy?: ViewerProtocolPolicy) {\n    let toReturn = {\n      allowedMethods: this.METHOD_LOOKUP_MAP[input.allowedMethods || CloudFrontAllowedMethods.GET_HEAD],\n      cachedMethods: this.METHOD_LOOKUP_MAP[input.cachedMethods || CloudFrontAllowedCachedMethods.GET_HEAD],\n      compress: input.compress !== false,\n      defaultTtl: input.defaultTtl && input.defaultTtl.toSeconds(),\n      forwardedValues: input.forwardedValues || { queryString: false, cookies: { forward: 'none' } },\n      maxTtl: input.maxTtl && input.maxTtl.toSeconds(),\n      minTtl: input.minTtl && input.minTtl.toSeconds(),\n      trustedKeyGroups: input.trustedKeyGroups?.map(key => key.keyGroupId),\n      trustedSigners: input.trustedSigners,\n      targetOriginId: input.targetOriginId,\n      viewerProtocolPolicy: input.viewerProtocolPolicy || protoPolicy || ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n    };\n    if (!input.isDefaultBehavior) {\n      toReturn = Object.assign(toReturn, { pathPattern: input.pathPattern });\n    }\n    if (input.functionAssociations) {\n      toReturn = Object.assign(toReturn, {\n        functionAssociations: input.functionAssociations.map(association => ({\n          functionArn: association.function.functionArn,\n          eventType: association.eventType.toString(),\n        })),\n      });\n    }\n    if (input.lambdaFunctionAssociations) {\n      const includeBodyEventTypes = [LambdaEdgeEventType.ORIGIN_REQUEST, LambdaEdgeEventType.VIEWER_REQUEST];\n      if (input.lambdaFunctionAssociations.some(fna => fna.includeBody && !includeBodyEventTypes.includes(fna.eventType))) {\n        throw new Error('\\'includeBody\\' can only be true for ORIGIN_REQUEST or VIEWER_REQUEST event types.');\n      }\n\n      toReturn = Object.assign(toReturn, {\n        lambdaFunctionAssociations: input.lambdaFunctionAssociations\n          .map(fna => ({\n            eventType: fna.eventType,\n            lambdaFunctionArn: fna.lambdaFunction && fna.lambdaFunction.edgeArn,\n            includeBody: fna.includeBody,\n          })),\n      });\n\n      // allow edgelambda.amazonaws.com to assume the functions' execution role.\n      for (const a of input.lambdaFunctionAssociations) {\n        if (a.lambdaFunction.role && a.lambdaFunction.role instanceof iam.Role && a.lambdaFunction.role.assumeRolePolicy) {\n          a.lambdaFunction.role.assumeRolePolicy.addStatements(new iam.PolicyStatement({\n            actions: ['sts:AssumeRole'],\n            principals: [new iam.ServicePrincipal('edgelambda.amazonaws.com')],\n          }));\n        }\n      }\n    }\n    return toReturn;\n  }\n\n  private toOriginProperty(originConfig: SourceConfigurationRender, originId: string): CfnDistribution.OriginProperty {\n    if (\n      !originConfig.s3OriginSource &&\n      !originConfig.customOriginSource\n    ) {\n      throw new Error(\n        'There must be at least one origin source - either an s3OriginSource, a customOriginSource',\n      );\n    }\n    if (originConfig.customOriginSource && originConfig.s3OriginSource) {\n      throw new Error(\n        'There cannot be both an s3OriginSource and a customOriginSource in the same SourceConfiguration.',\n      );\n    }\n\n    if ([\n      originConfig.originHeaders,\n      originConfig.s3OriginSource?.originHeaders,\n      originConfig.customOriginSource?.originHeaders,\n    ].filter(x => x).length > 1) {\n      throw new Error('Only one originHeaders field allowed across origin and failover origins');\n    }\n\n    if ([\n      originConfig.originPath,\n      originConfig.s3OriginSource?.originPath,\n      originConfig.customOriginSource?.originPath,\n    ].filter(x => x).length > 1) {\n      throw new Error('Only one originPath field allowed across origin and failover origins');\n    }\n\n    if ([\n      originConfig.originShieldRegion,\n      originConfig.s3OriginSource?.originShieldRegion,\n      originConfig.customOriginSource?.originShieldRegion,\n    ].filter(x => x).length > 1) {\n      throw new Error('Only one originShieldRegion field allowed across origin and failover origins');\n    }\n\n    const headers = originConfig.originHeaders ?? originConfig.s3OriginSource?.originHeaders ?? originConfig.customOriginSource?.originHeaders;\n\n    const originHeaders: CfnDistribution.OriginCustomHeaderProperty[] = [];\n    if (headers) {\n      Object.keys(headers).forEach((key) => {\n        const oHeader: CfnDistribution.OriginCustomHeaderProperty = {\n          headerName: key,\n          headerValue: headers[key],\n        };\n        originHeaders.push(oHeader);\n      });\n    }\n\n    let s3OriginConfig: CfnDistribution.S3OriginConfigProperty | undefined;\n    if (originConfig.s3OriginSource) {\n      // first case for backwards compatibility\n      if (originConfig.s3OriginSource.originAccessIdentity) {\n        // grant CloudFront OriginAccessIdentity read access to S3 bucket\n        // Used rather than `grantRead` because `grantRead` will grant overly-permissive policies.\n        // Only GetObject is needed to retrieve objects for the distribution.\n        // This also excludes KMS permissions; currently, OAI only supports SSE-S3 for buckets.\n        // Source: https://aws.amazon.com/blogs/networking-and-content-delivery/serving-sse-kms-encrypted-content-from-s3-using-cloudfront/\n        originConfig.s3OriginSource.s3BucketSource.addToResourcePolicy(new iam.PolicyStatement({\n          resources: [originConfig.s3OriginSource.s3BucketSource.arnForObjects('*')],\n          actions: ['s3:GetObject'],\n          principals: [originConfig.s3OriginSource.originAccessIdentity.grantPrincipal],\n        }));\n\n        s3OriginConfig = {\n          originAccessIdentity: `origin-access-identity/cloudfront/${originConfig.s3OriginSource.originAccessIdentity.originAccessIdentityName}`,\n        };\n      } else {\n        s3OriginConfig = {};\n      }\n    }\n\n    const connectionAttempts = originConfig.connectionAttempts ?? 3;\n    if (connectionAttempts < 1 || 3 < connectionAttempts || !Number.isInteger(connectionAttempts)) {\n      throw new Error('connectionAttempts: You can specify 1, 2, or 3 as the number of attempts.');\n    }\n\n    const connectionTimeout = (originConfig.connectionTimeout || cdk.Duration.seconds(10)).toSeconds();\n    if (connectionTimeout < 1 || 10 < connectionTimeout || !Number.isInteger(connectionTimeout)) {\n      throw new Error('connectionTimeout: You can specify a number of seconds between 1 and 10 (inclusive).');\n    }\n\n    const originProperty: CfnDistribution.OriginProperty = {\n      id: originId,\n      domainName: originConfig.s3OriginSource\n        ? originConfig.s3OriginSource.s3BucketSource.bucketRegionalDomainName\n        : originConfig.customOriginSource!.domainName,\n      originPath: originConfig.originPath ?? originConfig.customOriginSource?.originPath ?? originConfig.s3OriginSource?.originPath,\n      originCustomHeaders:\n        originHeaders.length > 0 ? originHeaders : undefined,\n      s3OriginConfig,\n      originShield: this.toOriginShieldProperty(originConfig),\n      customOriginConfig: originConfig.customOriginSource\n        ? {\n          httpPort: originConfig.customOriginSource.httpPort || 80,\n          httpsPort: originConfig.customOriginSource.httpsPort || 443,\n          originKeepaliveTimeout:\n            (originConfig.customOriginSource.originKeepaliveTimeout &&\n              originConfig.customOriginSource.originKeepaliveTimeout.toSeconds()) ||\n            5,\n          originReadTimeout:\n            (originConfig.customOriginSource.originReadTimeout &&\n              originConfig.customOriginSource.originReadTimeout.toSeconds()) ||\n            30,\n          originProtocolPolicy:\n            originConfig.customOriginSource.originProtocolPolicy ||\n            OriginProtocolPolicy.HTTPS_ONLY,\n          originSslProtocols: originConfig.customOriginSource\n            .allowedOriginSSLVersions || [OriginSslPolicy.TLS_V1_2],\n        }\n        : undefined,\n      connectionAttempts,\n      connectionTimeout,\n    };\n\n    return originProperty;\n  }\n\n  /**\n   * Takes origin shield region from props and converts to CfnDistribution.OriginShieldProperty\n   */\n  private toOriginShieldProperty(originConfig:SourceConfigurationRender): CfnDistribution.OriginShieldProperty | undefined {\n    const originShieldRegion = originConfig.originShieldRegion ??\n    originConfig.customOriginSource?.originShieldRegion ??\n    originConfig.s3OriginSource?.originShieldRegion;\n    return originShieldRegion\n      ? { enabled: true, originShieldRegion }\n      : undefined;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
