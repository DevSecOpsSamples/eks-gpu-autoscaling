{
  "version": 3,
  "sources": ["s3.ts"],
  "sourcesContent": ["import * as lambda from '../../aws-lambda';\nimport * as s3 from '../../aws-s3';\nimport * as notifs from '../../aws-s3-notifications';\n\nexport interface S3EventSourceProps {\n  /**\n   * The s3 event types that will trigger the notification.\n   */\n  readonly events: s3.EventType[];\n\n  /**\n   * S3 object key filter rules to determine which objects trigger this event.\n   * Each filter must include a `prefix` and/or `suffix` that will be matched\n   * against the s3 object key. Refer to the S3 Developer Guide for details\n   * about allowed filter rules.\n   */\n  readonly filters?: s3.NotificationKeyFilter[];\n}\n\n/**\n * Use S3 bucket notifications as an event source for AWS Lambda.\n */\nexport class S3EventSource implements lambda.IEventSource {\n  constructor(readonly bucket: s3.Bucket, private readonly props: S3EventSourceProps) {\n\n  }\n\n  public bind(target: lambda.IFunction) {\n    const filters = this.props.filters || [];\n    for (const event of this.props.events) {\n      this.bucket.addEventNotification(event, new notifs.LambdaDestination(target), ...filters);\n    }\n  }\n}\n"],
  "mappings": "oNAEA,OAAA,QAAA,4BAAA,EAoBA,MAAa,aAAa,CACxB,YAAqB,OAAoC,MAAyB,CAA7D,KAAA,OAAA,OAAoC,KAAA,MAAA,uJAIlD,KAAK,OAAwB,kEAClC,KAAM,SAAU,KAAK,MAAM,SAAW,CAAA,EACtC,SAAW,SAAS,MAAK,MAAM,OAC7B,KAAK,OAAO,qBAAqB,MAAO,GAAI,QAAO,kBAAkB,MAAM,EAAG,GAAG,OAAO,GAR9F,QAAA,cAAA",
  "names": []
}
