{
  "version": 3,
  "sources": ["kafka.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\nimport { ISecurityGroup, IVpc, SubnetSelection } from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport * as lambda from '../../aws-lambda';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport { Stack, Names } from '../../core';\nimport { StreamEventSource, BaseStreamEventSourceProps } from './stream';\nimport { Construct } from 'constructs';\n\n/**\n * Properties for a Kafka event source\n */\nexport interface KafkaEventSourceProps extends BaseStreamEventSourceProps{\n  /**\n   * The Kafka topic to subscribe to\n   */\n  readonly topic: string,\n  /**\n   * The secret with the Kafka credentials, see https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html for details\n   * This field is required if your Kafka brokers are accessed over the Internet\n   *\n   * @default none\n   */\n  readonly secret?: secretsmanager.ISecret\n}\n\n/**\n * Properties for a MSK event source\n */\nexport interface ManagedKafkaEventSourceProps extends KafkaEventSourceProps {\n  /**\n   * An MSK cluster construct\n   */\n  readonly clusterArn: string;\n}\n\n/**\n * The authentication method to use with SelfManagedKafkaEventSource\n */\nexport enum AuthenticationMethod {\n  /**\n   * SASL_SCRAM_512_AUTH authentication method for your Kafka cluster\n   */\n  SASL_SCRAM_512_AUTH = 'SASL_SCRAM_512_AUTH',\n  /**\n   * SASL_SCRAM_256_AUTH authentication method for your Kafka cluster\n   */\n  SASL_SCRAM_256_AUTH = 'SASL_SCRAM_256_AUTH',\n  /**\n   * BASIC_AUTH (SASL/PLAIN) authentication method for your Kafka cluster\n   */\n  BASIC_AUTH = 'BASIC_AUTH',\n  /**\n   * CLIENT_CERTIFICATE_TLS_AUTH (mTLS) authentication method for your Kafka cluster\n   */\n  CLIENT_CERTIFICATE_TLS_AUTH = 'CLIENT_CERTIFICATE_TLS_AUTH',\n}\n\n/**\n * Properties for a self managed Kafka cluster event source.\n * If your Kafka cluster is only reachable via VPC make sure to configure it.\n */\nexport interface SelfManagedKafkaEventSourceProps extends KafkaEventSourceProps {\n  /**\n   * The list of host and port pairs that are the addresses of the Kafka brokers in a \"bootstrap\" Kafka cluster that\n   * a Kafka client connects to initially to bootstrap itself. They are in the format `abc.xyz.com:xxxx`.\n   */\n  readonly bootstrapServers: string[]\n\n  /**\n   * If your Kafka brokers are only reachable via VPC provide the VPC here\n   *\n   * @default none\n   */\n  readonly vpc?: IVpc;\n\n  /**\n   * If your Kafka brokers are only reachable via VPC, provide the subnets selection here\n   *\n   * @default - none, required if setting vpc\n   */\n  readonly vpcSubnets?: SubnetSelection,\n\n  /**\n   * If your Kafka brokers are only reachable via VPC, provide the security group here\n   *\n   * @default - none, required if setting vpc\n   */\n  readonly securityGroup?: ISecurityGroup\n\n  /**\n   * The authentication method for your Kafka cluster\n   *\n   * @default AuthenticationMethod.SASL_SCRAM_512_AUTH\n   */\n  readonly authenticationMethod?: AuthenticationMethod\n}\n\n/**\n * Use a MSK cluster as a streaming source for AWS Lambda\n */\nexport class ManagedKafkaEventSource extends StreamEventSource {\n  // This is to work around JSII inheritance problems\n  private innerProps: ManagedKafkaEventSourceProps;\n  private _eventSourceMappingId?: string = undefined;\n\n  constructor(props: ManagedKafkaEventSourceProps) {\n    super(props);\n    this.innerProps = props;\n  }\n\n  public bind(target: lambda.IFunction) {\n    const eventSourceMapping = target.addEventSourceMapping(\n      `KafkaEventSource:${Names.nodeUniqueId(target.node)}${this.innerProps.topic}`,\n      this.enrichMappingOptions({\n        eventSourceArn: this.innerProps.clusterArn,\n        startingPosition: this.innerProps.startingPosition,\n        sourceAccessConfigurations: this.sourceAccessConfigurations(),\n        kafkaTopic: this.innerProps.topic,\n      }),\n    );\n\n    this._eventSourceMappingId = eventSourceMapping.eventSourceMappingId;\n\n    if (this.innerProps.secret !== undefined) {\n      this.innerProps.secret.grantRead(target);\n    }\n\n    target.addToRolePolicy(new iam.PolicyStatement(\n      {\n        actions: ['kafka:DescribeCluster', 'kafka:GetBootstrapBrokers', 'kafka:ListScramSecrets'],\n        resources: [this.innerProps.clusterArn],\n      },\n    ));\n\n    target.role?.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaMSKExecutionRole'));\n  }\n\n  private sourceAccessConfigurations() {\n    const sourceAccessConfigurations = [];\n    if (this.innerProps.secret !== undefined) {\n      // \"Amazon MSK only supports SCRAM-SHA-512 authentication.\" from https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html#msk-password-limitations\n      sourceAccessConfigurations.push({\n        type: lambda.SourceAccessConfigurationType.SASL_SCRAM_512_AUTH,\n        uri: this.innerProps.secret.secretArn,\n      });\n    }\n\n    return sourceAccessConfigurations.length === 0\n      ? undefined\n      : sourceAccessConfigurations;\n  }\n\n  /**\n  * The identifier for this EventSourceMapping\n  */\n  public get eventSourceMappingId(): string {\n    if (!this._eventSourceMappingId) {\n      throw new Error('KafkaEventSource is not yet bound to an event source mapping');\n    }\n    return this._eventSourceMappingId;\n  }\n}\n\n/**\n * Use a self hosted Kafka installation as a streaming source for AWS Lambda.\n */\nexport class SelfManagedKafkaEventSource extends StreamEventSource {\n  // This is to work around JSII inheritance problems\n  private innerProps: SelfManagedKafkaEventSourceProps;\n\n  constructor(props: SelfManagedKafkaEventSourceProps) {\n    super(props);\n    if (props.vpc) {\n      if (!props.securityGroup) {\n        throw new Error('securityGroup must be set when providing vpc');\n      }\n      if (!props.vpcSubnets) {\n        throw new Error('vpcSubnets must be set when providing vpc');\n      }\n    } else if (!props.secret) {\n      throw new Error('secret must be set if Kafka brokers accessed over Internet');\n    }\n    this.innerProps = props;\n  }\n\n  public bind(target: lambda.IFunction) {\n    if (!(target instanceof Construct)) { throw new Error('Function is not a construct. Unexpected error.'); }\n    target.addEventSourceMapping(\n      this.mappingId(target),\n      this.enrichMappingOptions({\n        kafkaBootstrapServers: this.innerProps.bootstrapServers,\n        kafkaTopic: this.innerProps.topic,\n        startingPosition: this.innerProps.startingPosition,\n        sourceAccessConfigurations: this.sourceAccessConfigurations(),\n      }),\n    );\n\n    if (this.innerProps.secret !== undefined) {\n      this.innerProps.secret.grantRead(target);\n    }\n  }\n\n  private mappingId(target: lambda.IFunction) {\n    let hash = crypto.createHash('md5');\n    hash.update(JSON.stringify(Stack.of(target).resolve(this.innerProps.bootstrapServers)));\n    const idHash = hash.digest('hex');\n    return `KafkaEventSource:${idHash}:${this.innerProps.topic}`;\n  }\n\n  private sourceAccessConfigurations() {\n    let authType;\n    switch (this.innerProps.authenticationMethod) {\n      case AuthenticationMethod.BASIC_AUTH:\n        authType = lambda.SourceAccessConfigurationType.BASIC_AUTH;\n        break;\n      case AuthenticationMethod.CLIENT_CERTIFICATE_TLS_AUTH:\n        authType = lambda.SourceAccessConfigurationType.CLIENT_CERTIFICATE_TLS_AUTH;\n        break;\n      case AuthenticationMethod.SASL_SCRAM_256_AUTH:\n        authType = lambda.SourceAccessConfigurationType.SASL_SCRAM_256_AUTH;\n        break;\n      case AuthenticationMethod.SASL_SCRAM_512_AUTH:\n      default:\n        authType = lambda.SourceAccessConfigurationType.SASL_SCRAM_512_AUTH;\n        break;\n    }\n\n    const sourceAccessConfigurations = [];\n    if (this.innerProps.secret !== undefined) {\n      sourceAccessConfigurations.push({ type: authType, uri: this.innerProps.secret.secretArn });\n    }\n\n    if (this.innerProps.vpcSubnets !== undefined && this.innerProps.securityGroup !== undefined) {\n      sourceAccessConfigurations.push({\n        type: lambda.SourceAccessConfigurationType.VPC_SECURITY_GROUP,\n        uri: this.innerProps.securityGroup.securityGroupId,\n      },\n      );\n      this.innerProps.vpc?.selectSubnets(this.innerProps.vpcSubnets).subnetIds.forEach((id) => {\n        sourceAccessConfigurations.push({ type: lambda.SourceAccessConfigurationType.VPC_SUBNET, uri: id });\n      });\n    }\n\n    return sourceAccessConfigurations.length === 0\n      ? undefined\n      : sourceAccessConfigurations;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
