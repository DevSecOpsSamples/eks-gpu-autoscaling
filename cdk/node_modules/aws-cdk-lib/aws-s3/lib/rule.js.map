{
  "version": 3,
  "sources": ["rule.ts"],
  "sourcesContent": ["import { Duration } from '../../core';\n\n/**\n * Declaration of a Life cycle rule\n */\nexport interface LifecycleRule {\n  /**\n   * A unique identifier for this rule. The value cannot be more than 255 characters.\n   */\n  readonly id?: string;\n\n  /**\n   * Whether this rule is enabled.\n   *\n   * @default true\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * Specifies a lifecycle rule that aborts incomplete multipart uploads to an Amazon S3 bucket.\n   *\n   * The AbortIncompleteMultipartUpload property type creates a lifecycle\n   * rule that aborts incomplete multipart uploads to an Amazon S3 bucket.\n   * When Amazon S3 aborts a multipart upload, it deletes all parts\n   * associated with the multipart upload.\n   *\n   * @default Incomplete uploads are never aborted\n   */\n  readonly abortIncompleteMultipartUploadAfter?: Duration;\n\n  /**\n   * Indicates when objects are deleted from Amazon S3 and Amazon Glacier.\n   *\n   * The date value must be in ISO 8601 format. The time is always midnight UTC.\n   *\n   * If you specify an expiration and transition time, you must use the same\n   * time unit for both properties (either in days or by date). The\n   * expiration time must also be later than the transition time.\n   *\n   * @default No expiration date\n   */\n  readonly expirationDate?: Date;\n\n  /**\n   * Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon Glacier.\n   *\n   * If you specify an expiration and transition time, you must use the same\n   * time unit for both properties (either in days or by date). The\n   * expiration time must also be later than the transition time.\n   *\n   * @default No expiration timeout\n   */\n  readonly expiration?: Duration;\n\n  /**\n   * Time between when a new version of the object is uploaded to the bucket and when old versions of the object expire.\n   *\n   * For buckets with versioning enabled (or suspended), specifies the time,\n   * in days, between when a new version of the object is uploaded to the\n   * bucket and when old versions of the object expire. When object versions\n   * expire, Amazon S3 permanently deletes them. If you specify a transition\n   * and expiration time, the expiration time must be later than the\n   * transition time.\n   *\n   * @default No noncurrent version expiration\n   */\n  readonly noncurrentVersionExpiration?: Duration;\n\n  /**\n   * One or more transition rules that specify when non-current objects transition to a specified storage class.\n   *\n   * Only for for buckets with versioning enabled (or suspended).\n   *\n   * If you specify a transition and expiration time, the expiration time\n   * must be later than the transition time.\n   */\n  readonly noncurrentVersionTransitions?: NoncurrentVersionTransition[];\n\n  /**\n   * One or more transition rules that specify when an object transitions to a specified storage class.\n   *\n   * If you specify an expiration and transition time, you must use the same\n   * time unit for both properties (either in days or by date). The\n   * expiration time must also be later than the transition time.\n   *\n   * @default No transition rules\n   */\n  readonly transitions?: Transition[];\n\n  /**\n   * Object key prefix that identifies one or more objects to which this rule applies.\n   *\n   * @default Rule applies to all objects\n   */\n  readonly prefix?: string;\n\n  /**\n   * The TagFilter property type specifies tags to use to identify a subset of objects for an Amazon S3 bucket.\n   *\n   * @default Rule applies to all objects\n   */\n  readonly tagFilters?: {[tag: string]: any};\n\n  /**\n   * Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions.\n   * If set to true, the delete marker will be expired.\n   *\n   * @default false\n   */\n  readonly expiredObjectDeleteMarker?: boolean;\n}\n\n/**\n * Describes when an object transitions to a specified storage class.\n */\nexport interface Transition {\n  /**\n   * The storage class to which you want the object to transition.\n   */\n  readonly storageClass: StorageClass;\n\n  /**\n   * Indicates when objects are transitioned to the specified storage class.\n   *\n   * The date value must be in ISO 8601 format. The time is always midnight UTC.\n   *\n   * @default No transition date.\n   */\n  readonly transitionDate?: Date;\n\n  /**\n   * Indicates the number of days after creation when objects are transitioned to the specified storage class.\n   *\n   * @default No transition count.\n   */\n  readonly transitionAfter?: Duration;\n}\n\n/**\n * Describes when noncurrent versions transition to a specified storage class.\n */\nexport interface NoncurrentVersionTransition {\n  /**\n   * The storage class to which you want the object to transition.\n   */\n  readonly storageClass: StorageClass;\n\n  /**\n   * Indicates the number of days after creation when objects are transitioned to the specified storage class.\n   *\n   * @default No transition count.\n   */\n  readonly transitionAfter: Duration;\n\n  /**\n   * Indicates the number of noncurrent version objects to be retained. Can be up to 100 noncurrent versions retained.\n   *\n   * @default No noncurrent version retained.\n   */\n  readonly noncurrentVersionsToRetain?: number;\n}\n\n/**\n * Storage class to move an object to\n */\nexport class StorageClass {\n  /**\n   * Storage class for data that is accessed less frequently, but requires rapid\n   * access when needed.\n   *\n   * Has lower availability than Standard storage.\n   */\n  public static readonly INFREQUENT_ACCESS = new StorageClass('STANDARD_IA');\n\n  /**\n   * Infrequent Access that's only stored in one availability zone.\n   *\n   * Has lower availability than standard InfrequentAccess.\n   */\n  public static readonly ONE_ZONE_INFREQUENT_ACCESS = new StorageClass('ONEZONE_IA');\n\n  /**\n   * Storage class for long-term archival that can take between minutes and\n   * hours to access.\n   *\n   * Use for archives where portions of the data might need to be retrieved in\n   * minutes. Data stored in the GLACIER storage class has a minimum storage\n   * duration period of 90 days and can be accessed in as little as 1-5 minutes\n   * using expedited retrieval. If you delete an object before the 90-day\n   * minimum, you are charged for 90 days.\n   */\n  public static readonly GLACIER = new StorageClass('GLACIER');\n\n  /**\n   * Storage class for long-term archival that can be accessed in a few milliseconds.\n   *\n   * It is ideal for data that is accessed once or twice per quarter, and\n   * that requires immediate access. Data stored in the GLACIER_IR storage class\n   * has a minimum storage duration period of 90 days and can be accessed in\n   * as milliseconds. If you delete an object before the 90-day minimum,\n   * you are charged for 90 days.\n   */\n  public static readonly GLACIER_INSTANT_RETRIEVAL = new StorageClass('GLACIER_IR');\n\n  /**\n   * Use for archiving data that rarely needs to be accessed. Data stored in the\n   * DEEP_ARCHIVE storage class has a minimum storage duration period of 180\n   * days and a default retrieval time of 12 hours. If you delete an object\n   * before the 180-day minimum, you are charged for 180 days. For pricing\n   * information, see Amazon S3 Pricing.\n   */\n  public static readonly DEEP_ARCHIVE = new StorageClass('DEEP_ARCHIVE');\n\n  /**\n   * The INTELLIGENT_TIERING storage class is designed to optimize storage costs\n   * by automatically moving data to the most cost-effective storage access\n   * tier, without performance impact or operational overhead.\n   * INTELLIGENT_TIERING delivers automatic cost savings by moving data on a\n   * granular object level between two access tiers, a frequent access tier and\n   * a lower-cost infrequent access tier, when access patterns change. The\n   * INTELLIGENT_TIERING storage class is ideal if you want to optimize storage\n   * costs automatically for long-lived data when access patterns are unknown or\n   * unpredictable.\n   */\n  public static readonly INTELLIGENT_TIERING = new StorageClass('INTELLIGENT_TIERING');\n\n  constructor(public readonly value: string) { }\n\n  public toString() { return this.value; }\n}\n"],
  "mappings": "wJAqKA,MAAa,YAAY,CA6DvB,YAA4B,MAAa,CAAb,KAAA,MAAA,MAErB,UAAQ,CAAK,MAAO,MAAK,KAAM,EA/DxC,QAAA,aAAA,6GAOyB,aAAA,kBAAoB,GAAI,cAAa,aAAa,EAOlD,aAAA,2BAA6B,GAAI,cAAa,YAAY,EAY1D,aAAA,QAAU,GAAI,cAAa,SAAS,EAWpC,aAAA,0BAA4B,GAAI,cAAa,YAAY,EASzD,aAAA,aAAe,GAAI,cAAa,cAAc,EAa9C,aAAA,oBAAsB,GAAI,cAAa,qBAAqB",
  "names": []
}
