{
  "version": 3,
  "sources": ["destination.ts"],
  "sourcesContent": ["import { Construct, IDependable } from 'constructs';\nimport { IBucket } from './bucket';\n\n/**\n * Implemented by constructs that can be used as bucket notification destinations.\n */\nexport interface IBucketNotificationDestination {\n  /**\n   * Registers this resource to receive notifications for the specified\n   * bucket. This method will only be called once for each destination/bucket\n   * pair and the result will be cached, so there is no need to implement\n   * idempotency in each destination.\n   * @param bucket The bucket object to bind to\n   */\n  bind(scope: Construct, bucket: IBucket): BucketNotificationDestinationConfig;\n}\n\n/**\n * Represents the properties of a notification destination.\n */\nexport interface BucketNotificationDestinationConfig {\n  /**\n   * The notification type.\n   */\n  readonly type: BucketNotificationDestinationType;\n\n  /**\n   * The ARN of the destination (i.e. Lambda, SNS, SQS).\n   */\n  readonly arn: string;\n\n  /**\n   * Any additional dependencies that should be resolved before the bucket notification\n   * can be configured (for example, the SNS Topic Policy resource).\n   */\n  readonly dependencies?: IDependable[]\n}\n\n/**\n * Supported types of notification destinations.\n */\nexport enum BucketNotificationDestinationType {\n  LAMBDA,\n  QUEUE,\n  TOPIC\n}\n"],
  "mappings": "qHAyCA,GAAY,mCAAZ,AAAA,UAAY,mCAAiC,CAC3C,mCAAA,mCAAA,OAAA,GAAA,SACA,mCAAA,mCAAA,MAAA,GAAA,QACA,mCAAA,mCAAA,MAAA,GAAA,OACF,GAJY,kCAAA,QAAA,mCAAA,SAAA,kCAAiC,CAAA,EAAA",
  "names": []
}
