{
  "version": 3,
  "sources": ["util.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { IConstruct } from 'constructs';\nimport { BucketAttributes } from './bucket';\n\nexport function parseBucketArn(construct: IConstruct, props: BucketAttributes): string {\n\n  // if we have an explicit bucket ARN, use it.\n  if (props.bucketArn) {\n    return props.bucketArn;\n  }\n\n  if (props.bucketName) {\n    return cdk.Stack.of(construct).formatArn({\n      // S3 Bucket names are globally unique in a partition,\n      // and so their ARNs have empty region and account components\n      region: '',\n      account: '',\n      service: 's3',\n      resource: props.bucketName,\n    });\n  }\n\n  throw new Error('Cannot determine bucket ARN. At least `bucketArn` or `bucketName` is needed');\n}\n\nexport function parseBucketName(construct: IConstruct, props: BucketAttributes): string | undefined {\n\n  // if we have an explicit bucket name, use it.\n  if (props.bucketName) {\n    return props.bucketName;\n  }\n\n  // extract bucket name from bucket arn\n  if (props.bucketArn) {\n    return cdk.Stack.of(construct).splitArn(props.bucketArn, cdk.ArnFormat.SLASH_RESOURCE_NAME).resource;\n  }\n\n  // no bucket name is okay since it's optional.\n  return undefined;\n}\n"],
  "mappings": "0HAAA,KAAA,KAAA,QAAA,YAAA,EAIA,wBAA+B,UAAuB,MAAuB,CAG3E,GAAI,MAAM,UACR,MAAO,OAAM,UAGf,GAAI,MAAM,WACR,MAAO,KAAI,MAAM,GAAG,SAAS,EAAE,UAAU,CAGvC,OAAQ,GACR,QAAS,GACT,QAAS,KACT,SAAU,MAAM,WACjB,EAGH,KAAM,IAAI,OAAM,6EAA6E,CAC/F,CAnBA,QAAA,eAAA,eAqBA,yBAAgC,UAAuB,MAAuB,CAG5E,GAAI,MAAM,WACR,MAAO,OAAM,WAIf,GAAI,MAAM,UACR,MAAO,KAAI,MAAM,GAAG,SAAS,EAAE,SAAS,MAAM,UAAW,IAAI,UAAU,mBAAmB,EAAE,QAKhG,CAdA,QAAA,gBAAA",
  "names": []
}
