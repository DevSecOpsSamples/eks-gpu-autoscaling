{
  "version": 3,
  "sources": ["bucket.ts"],
  "sourcesContent": ["import { EOL } from 'os';\nimport * as path from 'path';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport {\n  Fn, IResource, Lazy, RemovalPolicy, Resource, ResourceProps, Stack, Token,\n  CustomResource, CustomResourceProvider, CustomResourceProviderRuntime, FeatureFlags, Tags, Duration,\n} from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { BucketPolicy } from './bucket-policy';\nimport { IBucketNotificationDestination } from './destination';\nimport { BucketNotifications } from './notifications-resource';\nimport * as perms from './perms';\nimport { LifecycleRule } from './rule';\nimport { CfnBucket } from './s3.generated';\nimport { parseBucketArn, parseBucketName } from './util';\n\nconst AUTO_DELETE_OBJECTS_RESOURCE_TYPE = 'Custom::S3AutoDeleteObjects';\nconst AUTO_DELETE_OBJECTS_TAG = 'aws-cdk:auto-delete-objects';\n\nexport interface IBucket extends IResource {\n  /**\n   * The ARN of the bucket.\n   * @attribute\n   */\n  readonly bucketArn: string;\n\n  /**\n   * The name of the bucket.\n   * @attribute\n   */\n  readonly bucketName: string;\n\n  /**\n   * The URL of the static website.\n   * @attribute\n   */\n  readonly bucketWebsiteUrl: string;\n\n  /**\n   * The Domain name of the static website.\n   * @attribute\n   */\n  readonly bucketWebsiteDomainName: string;\n\n  /**\n   * The IPv4 DNS name of the specified bucket.\n   * @attribute\n   */\n  readonly bucketDomainName: string;\n\n  /**\n   * The IPv6 DNS name of the specified bucket.\n   * @attribute\n   */\n  readonly bucketDualStackDomainName: string;\n\n  /**\n   * The regional domain name of the specified bucket.\n   * @attribute\n   */\n  readonly bucketRegionalDomainName: string;\n\n  /**\n   * If this bucket has been configured for static website hosting.\n   */\n  readonly isWebsite?: boolean;\n\n  /**\n   * Optional KMS encryption key associated with this bucket.\n   */\n  readonly encryptionKey?: kms.IKey;\n\n  /**\n   * The resource policy associated with this bucket.\n   *\n   * If `autoCreatePolicy` is true, a `BucketPolicy` will be created upon the\n   * first call to addToResourcePolicy(s).\n   */\n  policy?: BucketPolicy;\n\n  /**\n   * Adds a statement to the resource policy for a principal (i.e.\n   * account/role/service) to perform actions on this bucket and/or its\n   * contents. Use `bucketArn` and `arnForObjects(keys)` to obtain ARNs for\n   * this bucket or objects.\n   *\n   * Note that the policy statement may or may not be added to the policy.\n   * For example, when an `IBucket` is created from an existing bucket,\n   * it's not possible to tell whether the bucket already has a policy\n   * attached, let alone to re-use that policy to add more statements to it.\n   * So it's safest to do nothing in these cases.\n   *\n   * @param permission the policy statement to be added to the bucket's\n   * policy.\n   * @returns metadata about the execution of this method. If the policy\n   * was not added, the value of `statementAdded` will be `false`. You\n   * should always check this value to make sure that the operation was\n   * actually carried out. Otherwise, synthesis and deploy will terminate\n   * silently, which may be confusing.\n   */\n  addToResourcePolicy(permission: iam.PolicyStatement): iam.AddToResourcePolicyResult;\n\n  /**\n   * The https URL of an S3 object. For example:\n   *\n   * - `https://s3.us-west-1.amazonaws.com/onlybucket`\n   * - `https://s3.us-west-1.amazonaws.com/bucket/key`\n   * - `https://s3.cn-north-1.amazonaws.com.cn/china-bucket/mykey`\n   * @param key The S3 key of the object. If not specified, the URL of the\n   *      bucket is returned.\n   * @returns an ObjectS3Url token\n   */\n  urlForObject(key?: string): string;\n\n  /**\n   * The https Transfer Acceleration URL of an S3 object. Specify `dualStack: true` at the options\n   * for dual-stack endpoint (connect to the bucket over IPv6). For example:\n   *\n   * - `https://bucket.s3-accelerate.amazonaws.com`\n   * - `https://bucket.s3-accelerate.amazonaws.com/key`\n   *\n   * @param key The S3 key of the object. If not specified, the URL of the\n   *      bucket is returned.\n   * @param options Options for generating URL.\n   * @returns an TransferAccelerationUrl token\n   */\n  transferAccelerationUrlForObject(key?: string, options?: TransferAccelerationUrlOptions): string;\n\n  /**\n   * The virtual hosted-style URL of an S3 object. Specify `regional: false` at\n   * the options for non-regional URL. For example:\n   *\n   * - `https://only-bucket.s3.us-west-1.amazonaws.com`\n   * - `https://bucket.s3.us-west-1.amazonaws.com/key`\n   * - `https://bucket.s3.amazonaws.com/key`\n   * - `https://china-bucket.s3.cn-north-1.amazonaws.com.cn/mykey`\n   * @param key The S3 key of the object. If not specified, the URL of the\n   *      bucket is returned.\n   * @param options Options for generating URL.\n   * @returns an ObjectS3Url token\n   */\n  virtualHostedUrlForObject(key?: string, options?: VirtualHostedStyleUrlOptions): string;\n\n  /**\n   * The S3 URL of an S3 object. For example:\n   * - `s3://onlybucket`\n   * - `s3://bucket/key`\n   * @param key The S3 key of the object. If not specified, the S3 URL of the\n   *      bucket is returned.\n   * @returns an ObjectS3Url token\n   */\n  s3UrlForObject(key?: string): string;\n\n  /**\n   * Returns an ARN that represents all objects within the bucket that match\n   * the key pattern specified. To represent all keys, specify ``\"*\"``.\n   */\n  arnForObjects(keyPattern: string): string;\n\n  /**\n   * Grant read permissions for this bucket and it's contents to an IAM\n   * principal (Role/Group/User).\n   *\n   * If encryption is used, permission to use the key to decrypt the contents\n   * of the bucket will also be granted to the same principal.\n   *\n   * @param identity The principal\n   * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*')\n   */\n  grantRead(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\n  /**\n   * Grant write permissions to this bucket to an IAM principal.\n   *\n   * If encryption is used, permission to use the key to encrypt the contents\n   * of written files will also be granted to the same principal.\n   *\n   * Before CDK version 1.85.0, this method granted the `s3:PutObject*` permission that included `s3:PutObjectAcl`,\n   * which could be used to grant read/write object access to IAM principals in other accounts.\n   * If you want to get rid of that behavior, update your CDK version to 1.85.0 or later,\n   * and make sure the `@aws-cdk/aws-s3:grantWriteWithoutAcl` feature flag is set to `true`\n   * in the `context` key of your cdk.json file.\n   * If you've already updated, but still need the principal to have permissions to modify the ACLs,\n   * use the {@link grantPutAcl} method.\n   *\n   * @param identity The principal\n   * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*')\n   */\n  grantWrite(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\n  /**\n   * Grants s3:PutObject* and s3:Abort* permissions for this bucket to an IAM principal.\n   *\n   * If encryption is used, permission to use the key to encrypt the contents\n   * of written files will also be granted to the same principal.\n   * @param identity The principal\n   * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*')\n   */\n  grantPut(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\n  /**\n   * Grant the given IAM identity permissions to modify the ACLs of objects in the given Bucket.\n   *\n   * If your application has the '@aws-cdk/aws-s3:grantWriteWithoutAcl' feature flag set,\n   * calling {@link grantWrite} or {@link grantReadWrite} no longer grants permissions to modify the ACLs of the objects;\n   * in this case, if you need to modify object ACLs, call this method explicitly.\n   *\n   * @param identity The principal\n   * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*')\n   */\n  grantPutAcl(identity: iam.IGrantable, objectsKeyPattern?: string): iam.Grant;\n\n  /**\n   * Grants s3:DeleteObject* permission to an IAM principal for objects\n   * in this bucket.\n   *\n   * @param identity The principal\n   * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*')\n   */\n  grantDelete(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\n  /**\n   * Grants read/write permissions for this bucket and it's contents to an IAM\n   * principal (Role/Group/User).\n   *\n   * If an encryption key is used, permission to use the key for\n   * encrypt/decrypt will also be granted.\n   *\n   * Before CDK version 1.85.0, this method granted the `s3:PutObject*` permission that included `s3:PutObjectAcl`,\n   * which could be used to grant read/write object access to IAM principals in other accounts.\n   * If you want to get rid of that behavior, update your CDK version to 1.85.0 or later,\n   * and make sure the `@aws-cdk/aws-s3:grantWriteWithoutAcl` feature flag is set to `true`\n   * in the `context` key of your cdk.json file.\n   * If you've already updated, but still need the principal to have permissions to modify the ACLs,\n   * use the {@link grantPutAcl} method.\n   *\n   * @param identity The principal\n   * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*')\n   */\n  grantReadWrite(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\n  /**\n   * Allows unrestricted access to objects from this bucket.\n   *\n   * IMPORTANT: This permission allows anyone to perform actions on S3 objects\n   * in this bucket, which is useful for when you configure your bucket as a\n   * website and want everyone to be able to read objects in the bucket without\n   * needing to authenticate.\n   *\n   * Without arguments, this method will grant read (\"s3:GetObject\") access to\n   * all objects (\"*\") in the bucket.\n   *\n   * The method returns the `iam.Grant` object, which can then be modified\n   * as needed. For example, you can add a condition that will restrict access only\n   * to an IPv4 range like this:\n   *\n   *     const grant = bucket.grantPublicAccess();\n   *     grant.resourceStatement!.addCondition(\u2018IpAddress\u2019, { \u201Caws:SourceIp\u201D: \u201C54.240.143.0/24\u201D });\n   *\n   *\n   * @param keyPrefix the prefix of S3 object keys (e.g. `home/*`). Default is \"*\".\n   * @param allowedActions the set of S3 actions to allow. Default is \"s3:GetObject\".\n   * @returns The `iam.PolicyStatement` object, which can be used to apply e.g. conditions.\n   */\n  grantPublicAccess(keyPrefix?: string, ...allowedActions: string[]): iam.Grant;\n\n  /**\n   * Defines a CloudWatch event that triggers when something happens to this bucket\n   *\n   * Requires that there exists at least one CloudTrail Trail in your account\n   * that captures the event. This method will not create the Trail.\n   *\n   * @param id The id of the rule\n   * @param options Options for adding the rule\n   */\n  onCloudTrailEvent(id: string, options?: OnCloudTrailBucketEventOptions): events.Rule;\n\n  /**\n   * Defines an AWS CloudWatch event that triggers when an object is uploaded\n   * to the specified paths (keys) in this bucket using the PutObject API call.\n   *\n   * Note that some tools like `aws s3 cp` will automatically use either\n   * PutObject or the multipart upload API depending on the file size,\n   * so using `onCloudTrailWriteObject` may be preferable.\n   *\n   * Requires that there exists at least one CloudTrail Trail in your account\n   * that captures the event. This method will not create the Trail.\n   *\n   * @param id The id of the rule\n   * @param options Options for adding the rule\n   */\n  onCloudTrailPutObject(id: string, options?: OnCloudTrailBucketEventOptions): events.Rule;\n\n  /**\n   * Defines an AWS CloudWatch event that triggers when an object at the\n   * specified paths (keys) in this bucket are written to.  This includes\n   * the events PutObject, CopyObject, and CompleteMultipartUpload.\n   *\n   * Note that some tools like `aws s3 cp` will automatically use either\n   * PutObject or the multipart upload API depending on the file size,\n   * so using this method may be preferable to `onCloudTrailPutObject`.\n   *\n   * Requires that there exists at least one CloudTrail Trail in your account\n   * that captures the event. This method will not create the Trail.\n   *\n   * @param id The id of the rule\n   * @param options Options for adding the rule\n   */\n  onCloudTrailWriteObject(id: string, options?: OnCloudTrailBucketEventOptions): events.Rule;\n\n  /**\n   * Adds a bucket notification event destination.\n   * @param event The event to trigger the notification\n   * @param dest The notification destination (Lambda, SNS Topic or SQS Queue)\n   *\n   * @param filters S3 object key filter rules to determine which objects\n   * trigger this event. Each filter must include a `prefix` and/or `suffix`\n   * that will be matched against the s3 object key. Refer to the S3 Developer Guide\n   * for details about allowed filter rules.\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-filtering\n   *\n   * @example\n   *\n   *    declare const myLambda: lambda.Function;\n   *    const bucket = new s3.Bucket(this, 'MyBucket');\n   *    bucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'})\n   *\n   * @see\n   * https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\n   */\n  addEventNotification(event: EventType, dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]): void;\n\n  /**\n   * Subscribes a destination to receive notifications when an object is\n   * created in the bucket. This is identical to calling\n   * `onEvent(s3.EventType.OBJECT_CREATED)`.\n   *\n   * @param dest The notification destination (see onEvent)\n   * @param filters Filters (see onEvent)\n   */\n  addObjectCreatedNotification(dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]): void\n\n  /**\n   * Subscribes a destination to receive notifications when an object is\n   * removed from the bucket. This is identical to calling\n   * `onEvent(EventType.OBJECT_REMOVED)`.\n   *\n   * @param dest The notification destination (see onEvent)\n   * @param filters Filters (see onEvent)\n   */\n  addObjectRemovedNotification(dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]): void;\n}\n\n/**\n * A reference to a bucket outside this stack\n */\nexport interface BucketAttributes {\n  /**\n   * The ARN of the bucket. At least one of bucketArn or bucketName must be\n   * defined in order to initialize a bucket ref.\n   */\n  readonly bucketArn?: string;\n\n  /**\n   * The name of the bucket. If the underlying value of ARN is a string, the\n   * name will be parsed from the ARN. Otherwise, the name is optional, but\n   * some features that require the bucket name such as auto-creating a bucket\n   * policy, won't work.\n   */\n  readonly bucketName?: string;\n\n  /**\n   * The domain name of the bucket.\n   *\n   * @default Inferred from bucket name\n   */\n  readonly bucketDomainName?: string;\n\n  /**\n   * The website URL of the bucket (if static web hosting is enabled).\n   *\n   * @default Inferred from bucket name\n   */\n  readonly bucketWebsiteUrl?: string;\n\n  /**\n   * The regional domain name of the specified bucket.\n   */\n  readonly bucketRegionalDomainName?: string;\n\n  /**\n   * The IPv6 DNS name of the specified bucket.\n   */\n  readonly bucketDualStackDomainName?: string;\n\n  /**\n   * The format of the website URL of the bucket. This should be true for\n   * regions launched since 2014.\n   *\n   * @default false\n   */\n  readonly bucketWebsiteNewUrlFormat?: boolean;\n\n  readonly encryptionKey?: kms.IKey;\n\n  /**\n   * If this bucket has been configured for static website hosting.\n   *\n   * @default false\n   */\n  readonly isWebsite?: boolean;\n\n  /**\n   * The account this existing bucket belongs to.\n   *\n   * @default - it's assumed the bucket belongs to the same account as the scope it's being imported into\n   */\n  readonly account?: string;\n\n  /**\n   * The region this existing bucket is in.\n   *\n   * @default - it's assumed the bucket is in the same region as the scope it's being imported into\n   */\n  readonly region?: string;\n\n  /**\n   * The role to be used by the notifications handler\n   *\n   * @default - a new role will be created.\n   */\n  readonly notificationsHandlerRole?: iam.IRole;\n}\n\n/**\n * Represents an S3 Bucket.\n *\n * Buckets can be either defined within this stack:\n *\n *   new Bucket(this, 'MyBucket', { props });\n *\n * Or imported from an existing bucket:\n *\n *   Bucket.import(this, 'MyImportedBucket', { bucketArn: ... });\n *\n * You can also export a bucket and import it into another stack:\n *\n *   const ref = myBucket.export();\n *   Bucket.import(this, 'MyImportedBucket', ref);\n *\n */\nexport abstract class BucketBase extends Resource implements IBucket {\n  public abstract readonly bucketArn: string;\n  public abstract readonly bucketName: string;\n  public abstract readonly bucketDomainName: string;\n  public abstract readonly bucketWebsiteUrl: string;\n  public abstract readonly bucketWebsiteDomainName: string;\n  public abstract readonly bucketRegionalDomainName: string;\n  public abstract readonly bucketDualStackDomainName: string;\n\n  /**\n   * Optional KMS encryption key associated with this bucket.\n   */\n  public abstract readonly encryptionKey?: kms.IKey;\n\n  /**\n   * If this bucket has been configured for static website hosting.\n   */\n  public abstract readonly isWebsite?: boolean;\n\n  /**\n   * The resource policy associated with this bucket.\n   *\n   * If `autoCreatePolicy` is true, a `BucketPolicy` will be created upon the\n   * first call to addToResourcePolicy(s).\n   */\n  public abstract policy?: BucketPolicy;\n\n  /**\n   * Indicates if a bucket resource policy should automatically created upon\n   * the first call to `addToResourcePolicy`.\n   */\n  protected abstract autoCreatePolicy: boolean;\n\n  /**\n   * Whether to disallow public access\n   */\n  protected abstract disallowPublicAccess?: boolean;\n\n  private notifications?: BucketNotifications;\n\n  protected notificationsHandlerRole?: iam.IRole;\n\n  constructor(scope: Construct, id: string, props: ResourceProps = {}) {\n    super(scope, id, props);\n\n    this.node.addValidation({ validate: () => this.policy?.document.validateForResourcePolicy() ?? [] });\n  }\n\n  /**\n   * Define a CloudWatch event that triggers when something happens to this repository\n   *\n   * Requires that there exists at least one CloudTrail Trail in your account\n   * that captures the event. This method will not create the Trail.\n   *\n   * @param id The id of the rule\n   * @param options Options for adding the rule\n   */\n  public onCloudTrailEvent(id: string, options: OnCloudTrailBucketEventOptions = {}): events.Rule {\n    const rule = new events.Rule(this, id, options);\n    rule.addTarget(options.target);\n    rule.addEventPattern({\n      source: ['aws.s3'],\n      detailType: ['AWS API Call via CloudTrail'],\n      detail: {\n        resources: {\n          ARN: options.paths?.map(p => this.arnForObjects(p)) ?? [this.bucketArn],\n        },\n      },\n    });\n    return rule;\n  }\n\n  /**\n   * Defines an AWS CloudWatch event that triggers when an object is uploaded\n   * to the specified paths (keys) in this bucket using the PutObject API call.\n   *\n   * Note that some tools like `aws s3 cp` will automatically use either\n   * PutObject or the multipart upload API depending on the file size,\n   * so using `onCloudTrailWriteObject` may be preferable.\n   *\n   * Requires that there exists at least one CloudTrail Trail in your account\n   * that captures the event. This method will not create the Trail.\n   *\n   * @param id The id of the rule\n   * @param options Options for adding the rule\n   */\n  public onCloudTrailPutObject(id: string, options: OnCloudTrailBucketEventOptions = {}): events.Rule {\n    const rule = this.onCloudTrailEvent(id, options);\n    rule.addEventPattern({\n      detail: {\n        eventName: ['PutObject'],\n      },\n    });\n    return rule;\n  }\n\n  /**\n   * Defines an AWS CloudWatch event that triggers when an object at the\n   * specified paths (keys) in this bucket are written to.  This includes\n   * the events PutObject, CopyObject, and CompleteMultipartUpload.\n   *\n   * Note that some tools like `aws s3 cp` will automatically use either\n   * PutObject or the multipart upload API depending on the file size,\n   * so using this method may be preferable to `onCloudTrailPutObject`.\n   *\n   * Requires that there exists at least one CloudTrail Trail in your account\n   * that captures the event. This method will not create the Trail.\n   *\n   * @param id The id of the rule\n   * @param options Options for adding the rule\n   */\n  public onCloudTrailWriteObject(id: string, options: OnCloudTrailBucketEventOptions = {}): events.Rule {\n    const rule = this.onCloudTrailEvent(id, options);\n    rule.addEventPattern({\n      detail: {\n        eventName: [\n          'CompleteMultipartUpload',\n          'CopyObject',\n          'PutObject',\n        ],\n        requestParameters: {\n          bucketName: [this.bucketName],\n          key: options.paths,\n        },\n      },\n    });\n    return rule;\n  }\n\n  /**\n   * Adds a statement to the resource policy for a principal (i.e.\n   * account/role/service) to perform actions on this bucket and/or its\n   * contents. Use `bucketArn` and `arnForObjects(keys)` to obtain ARNs for\n   * this bucket or objects.\n   *\n   * Note that the policy statement may or may not be added to the policy.\n   * For example, when an `IBucket` is created from an existing bucket,\n   * it's not possible to tell whether the bucket already has a policy\n   * attached, let alone to re-use that policy to add more statements to it.\n   * So it's safest to do nothing in these cases.\n   *\n   * @param permission the policy statement to be added to the bucket's\n   * policy.\n   * @returns metadata about the execution of this method. If the policy\n   * was not added, the value of `statementAdded` will be `false`. You\n   * should always check this value to make sure that the operation was\n   * actually carried out. Otherwise, synthesis and deploy will terminate\n   * silently, which may be confusing.\n   */\n  public addToResourcePolicy(permission: iam.PolicyStatement): iam.AddToResourcePolicyResult {\n    if (!this.policy && this.autoCreatePolicy) {\n      this.policy = new BucketPolicy(this, 'Policy', { bucket: this });\n    }\n\n    if (this.policy) {\n      this.policy.document.addStatements(permission);\n      return { statementAdded: true, policyDependable: this.policy };\n    }\n\n    return { statementAdded: false };\n  }\n\n  /**\n   * The https URL of an S3 object. Specify `regional: false` at the options\n   * for non-regional URLs. For example:\n   *\n   * - `https://s3.us-west-1.amazonaws.com/onlybucket`\n   * - `https://s3.us-west-1.amazonaws.com/bucket/key`\n   * - `https://s3.cn-north-1.amazonaws.com.cn/china-bucket/mykey`\n   *\n   * @param key The S3 key of the object. If not specified, the URL of the\n   *      bucket is returned.\n   * @returns an ObjectS3Url token\n   */\n  public urlForObject(key?: string): string {\n    const stack = Stack.of(this);\n    const prefix = `https://s3.${this.env.region}.${stack.urlSuffix}/`;\n    if (typeof key !== 'string') {\n      return this.urlJoin(prefix, this.bucketName);\n    }\n    return this.urlJoin(prefix, this.bucketName, key);\n  }\n\n  /**\n   * The https Transfer Acceleration URL of an S3 object. Specify `dualStack: true` at the options\n   * for dual-stack endpoint (connect to the bucket over IPv6). For example:\n   *\n   * - `https://bucket.s3-accelerate.amazonaws.com`\n   * - `https://bucket.s3-accelerate.amazonaws.com/key`\n   *\n   * @param key The S3 key of the object. If not specified, the URL of the\n   *      bucket is returned.\n   * @param options Options for generating URL.\n   * @returns an TransferAccelerationUrl token\n   */\n  public transferAccelerationUrlForObject(key?: string, options?: TransferAccelerationUrlOptions): string {\n    const dualStack = options?.dualStack ? '.dualstack' : '';\n    const prefix = `https://${this.bucketName}.s3-accelerate${dualStack}.amazonaws.com/`;\n    if (typeof key !== 'string') {\n      return this.urlJoin(prefix);\n    }\n    return this.urlJoin(prefix, key);\n  }\n\n  /**\n   * The virtual hosted-style URL of an S3 object. Specify `regional: false` at\n   * the options for non-regional URL. For example:\n   *\n   * - `https://only-bucket.s3.us-west-1.amazonaws.com`\n   * - `https://bucket.s3.us-west-1.amazonaws.com/key`\n   * - `https://bucket.s3.amazonaws.com/key`\n   * - `https://china-bucket.s3.cn-north-1.amazonaws.com.cn/mykey`\n   *\n   * @param key The S3 key of the object. If not specified, the URL of the\n   *      bucket is returned.\n   * @param options Options for generating URL.\n   * @returns an ObjectS3Url token\n   */\n  public virtualHostedUrlForObject(key?: string, options?: VirtualHostedStyleUrlOptions): string {\n    const domainName = options?.regional ?? true ? this.bucketRegionalDomainName : this.bucketDomainName;\n    const prefix = `https://${domainName}`;\n    if (typeof key !== 'string') {\n      return prefix;\n    }\n    return this.urlJoin(prefix, key);\n  }\n\n  /**\n   * The S3 URL of an S3 object. For example:\n   *\n   * - `s3://onlybucket`\n   * - `s3://bucket/key`\n   *\n   * @param key The S3 key of the object. If not specified, the S3 URL of the\n   *      bucket is returned.\n   * @returns an ObjectS3Url token\n   */\n  public s3UrlForObject(key?: string): string {\n    const prefix = 's3://';\n    if (typeof key !== 'string') {\n      return this.urlJoin(prefix, this.bucketName);\n    }\n    return this.urlJoin(prefix, this.bucketName, key);\n  }\n\n  /**\n   * Returns an ARN that represents all objects within the bucket that match\n   * the key pattern specified. To represent all keys, specify ``\"*\"``.\n   *\n   * If you need to specify a keyPattern with multiple components, concatenate them into a single string, e.g.:\n   *\n   *   arnForObjects(`home/${team}/${user}/*`)\n   *\n   */\n  public arnForObjects(keyPattern: string): string {\n    return `${this.bucketArn}/${keyPattern}`;\n  }\n\n  /**\n   * Grant read permissions for this bucket and it's contents to an IAM\n   * principal (Role/Group/User).\n   *\n   * If encryption is used, permission to use the key to decrypt the contents\n   * of the bucket will also be granted to the same principal.\n   *\n   * @param identity The principal\n   * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*')\n   */\n  public grantRead(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    return this.grant(identity, perms.BUCKET_READ_ACTIONS, perms.KEY_READ_ACTIONS,\n      this.bucketArn,\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n  public grantWrite(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    return this.grant(identity, this.writeActions, perms.KEY_WRITE_ACTIONS,\n      this.bucketArn,\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n  /**\n   * Grants s3:PutObject* and s3:Abort* permissions for this bucket to an IAM principal.\n   *\n   * If encryption is used, permission to use the key to encrypt the contents\n   * of written files will also be granted to the same principal.\n   * @param identity The principal\n   * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*')\n   */\n  public grantPut(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    return this.grant(identity, this.putActions, perms.KEY_WRITE_ACTIONS,\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n  public grantPutAcl(identity: iam.IGrantable, objectsKeyPattern: string = '*') {\n    return this.grant(identity, perms.BUCKET_PUT_ACL_ACTIONS, [],\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n  /**\n   * Grants s3:DeleteObject* permission to an IAM principal for objects\n   * in this bucket.\n   *\n   * @param identity The principal\n   * @param objectsKeyPattern Restrict the permission to a certain key pattern (default '*')\n   */\n  public grantDelete(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    return this.grant(identity, perms.BUCKET_DELETE_ACTIONS, [],\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n  public grantReadWrite(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    const bucketActions = perms.BUCKET_READ_ACTIONS.concat(this.writeActions);\n    // we need unique permissions because some permissions are common between read and write key actions\n    const keyActions = [...new Set([...perms.KEY_READ_ACTIONS, ...perms.KEY_WRITE_ACTIONS])];\n\n    return this.grant(identity,\n      bucketActions,\n      keyActions,\n      this.bucketArn,\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n  /**\n   * Allows unrestricted access to objects from this bucket.\n   *\n   * IMPORTANT: This permission allows anyone to perform actions on S3 objects\n   * in this bucket, which is useful for when you configure your bucket as a\n   * website and want everyone to be able to read objects in the bucket without\n   * needing to authenticate.\n   *\n   * Without arguments, this method will grant read (\"s3:GetObject\") access to\n   * all objects (\"*\") in the bucket.\n   *\n   * The method returns the `iam.Grant` object, which can then be modified\n   * as needed. For example, you can add a condition that will restrict access only\n   * to an IPv4 range like this:\n   *\n   *     const grant = bucket.grantPublicAccess();\n   *     grant.resourceStatement!.addCondition(\u2018IpAddress\u2019, { \u201Caws:SourceIp\u201D: \u201C54.240.143.0/24\u201D });\n   *\n   * Note that if this `IBucket` refers to an existing bucket, possibly not\n   * managed by CloudFormation, this method will have no effect, since it's\n   * impossible to modify the policy of an existing bucket.\n   *\n   * @param keyPrefix the prefix of S3 object keys (e.g. `home/*`). Default is \"*\".\n   * @param allowedActions the set of S3 actions to allow. Default is \"s3:GetObject\".\n   */\n  public grantPublicAccess(keyPrefix = '*', ...allowedActions: string[]) {\n    if (this.disallowPublicAccess) {\n      throw new Error(\"Cannot grant public access when 'blockPublicPolicy' is enabled\");\n    }\n\n    allowedActions = allowedActions.length > 0 ? allowedActions : ['s3:GetObject'];\n\n    return iam.Grant.addToPrincipalOrResource({\n      actions: allowedActions,\n      resourceArns: [this.arnForObjects(keyPrefix)],\n      grantee: new iam.AnyPrincipal(),\n      resource: this,\n    });\n  }\n\n  /**\n   * Adds a bucket notification event destination.\n   * @param event The event to trigger the notification\n   * @param dest The notification destination (Lambda, SNS Topic or SQS Queue)\n   *\n   * @param filters S3 object key filter rules to determine which objects\n   * trigger this event. Each filter must include a `prefix` and/or `suffix`\n   * that will be matched against the s3 object key. Refer to the S3 Developer Guide\n   * for details about allowed filter rules.\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-filtering\n   *\n   * @example\n   *\n   *    declare const myLambda: lambda.Function;\n   *    const bucket = new s3.Bucket(this, 'MyBucket');\n   *    bucket.addEventNotification(s3.EventType.OBJECT_CREATED, new s3n.LambdaDestination(myLambda), {prefix: 'home/myusername/*'});\n   *\n   * @see\n   * https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\n   */\n  public addEventNotification(event: EventType, dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]) {\n    this.withNotifications(notifications => notifications.addNotification(event, dest, ...filters));\n  }\n\n  private withNotifications(cb: (notifications: BucketNotifications) => void) {\n    if (!this.notifications) {\n      this.notifications = new BucketNotifications(this, 'Notifications', {\n        bucket: this,\n        handlerRole: this.notificationsHandlerRole,\n      });\n    }\n    cb(this.notifications);\n  }\n\n  /**\n   * Subscribes a destination to receive notifications when an object is\n   * created in the bucket. This is identical to calling\n   * `onEvent(EventType.OBJECT_CREATED)`.\n   *\n   * @param dest The notification destination (see onEvent)\n   * @param filters Filters (see onEvent)\n   */\n  public addObjectCreatedNotification(dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]) {\n    return this.addEventNotification(EventType.OBJECT_CREATED, dest, ...filters);\n  }\n\n  /**\n   * Subscribes a destination to receive notifications when an object is\n   * removed from the bucket. This is identical to calling\n   * `onEvent(EventType.OBJECT_REMOVED)`.\n   *\n   * @param dest The notification destination (see onEvent)\n   * @param filters Filters (see onEvent)\n   */\n  public addObjectRemovedNotification(dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]) {\n    return this.addEventNotification(EventType.OBJECT_REMOVED, dest, ...filters);\n  }\n\n  protected enableEventBridgeNotification() {\n    this.withNotifications(notifications => notifications.enableEventBridgeNotification());\n  }\n\n  private get writeActions(): string[] {\n    return [\n      ...perms.BUCKET_DELETE_ACTIONS,\n      ...this.putActions,\n    ];\n  }\n\n  private get putActions(): string[] {\n    return FeatureFlags.of(this).isEnabled(cxapi.S3_GRANT_WRITE_WITHOUT_ACL)\n      ? perms.BUCKET_PUT_ACTIONS\n      : perms.LEGACY_BUCKET_PUT_ACTIONS;\n  }\n\n  private urlJoin(...components: string[]): string {\n    return components.reduce((result, component) => {\n      if (result.endsWith('/')) {\n        result = result.slice(0, -1);\n      }\n      if (component.startsWith('/')) {\n        component = component.slice(1);\n      }\n      return `${result}/${component}`;\n    });\n  }\n\n  private grant(\n    grantee: iam.IGrantable,\n    bucketActions: string[],\n    keyActions: string[],\n    resourceArn: string, ...otherResourceArns: string[]) {\n    const resources = [resourceArn, ...otherResourceArns];\n\n    const ret = iam.Grant.addToPrincipalOrResource({\n      grantee,\n      actions: bucketActions,\n      resourceArns: resources,\n      resource: this,\n    });\n\n    if (this.encryptionKey && keyActions && keyActions.length !== 0) {\n      this.encryptionKey.grant(grantee, ...keyActions);\n    }\n\n    return ret;\n  }\n}\n\nexport interface BlockPublicAccessOptions {\n  /**\n   * Whether to block public ACLs\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-options\n   */\n  readonly blockPublicAcls?: boolean;\n\n  /**\n   * Whether to block public policy\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-options\n   */\n  readonly blockPublicPolicy?: boolean;\n\n  /**\n   * Whether to ignore public ACLs\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-options\n   */\n  readonly ignorePublicAcls?: boolean;\n\n  /**\n   * Whether to restrict public access\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-options\n   */\n  readonly restrictPublicBuckets?: boolean;\n}\n\nexport class BlockPublicAccess {\n  public static readonly BLOCK_ALL = new BlockPublicAccess({\n    blockPublicAcls: true,\n    blockPublicPolicy: true,\n    ignorePublicAcls: true,\n    restrictPublicBuckets: true,\n  });\n\n  public static readonly BLOCK_ACLS = new BlockPublicAccess({\n    blockPublicAcls: true,\n    ignorePublicAcls: true,\n  });\n\n  public blockPublicAcls: boolean | undefined;\n  public blockPublicPolicy: boolean | undefined;\n  public ignorePublicAcls: boolean | undefined;\n  public restrictPublicBuckets: boolean | undefined;\n\n  constructor(options: BlockPublicAccessOptions) {\n    this.blockPublicAcls = options.blockPublicAcls;\n    this.blockPublicPolicy = options.blockPublicPolicy;\n    this.ignorePublicAcls = options.ignorePublicAcls;\n    this.restrictPublicBuckets = options.restrictPublicBuckets;\n  }\n}\n\n/**\n * Specifies a metrics configuration for the CloudWatch request metrics from an Amazon S3 bucket.\n */\nexport interface BucketMetrics {\n  /**\n   * The ID used to identify the metrics configuration.\n   */\n  readonly id: string;\n  /**\n   * The prefix that an object must have to be included in the metrics results.\n   */\n  readonly prefix?: string;\n  /**\n   * Specifies a list of tag filters to use as a metrics configuration filter.\n   * The metrics configuration includes only objects that meet the filter's criteria.\n   */\n  readonly tagFilters?: { [tag: string]: any };\n}\n\n/**\n * All http request methods\n */\nexport enum HttpMethods {\n  /**\n   * The GET method requests a representation of the specified resource.\n   */\n  GET = 'GET',\n  /**\n   * The PUT method replaces all current representations of the target resource with the request payload.\n   */\n  PUT = 'PUT',\n  /**\n   * The HEAD method asks for a response identical to that of a GET request, but without the response body.\n   */\n  HEAD = 'HEAD',\n  /**\n   * The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.\n   */\n  POST = 'POST',\n  /**\n   * The DELETE method deletes the specified resource.\n   */\n  DELETE = 'DELETE',\n}\n\n/**\n * Specifies a cross-origin access rule for an Amazon S3 bucket.\n */\nexport interface CorsRule {\n  /**\n   * A unique identifier for this rule.\n   *\n   * @default - No id specified.\n   */\n  readonly id?: string;\n  /**\n   * The time in seconds that your browser is to cache the preflight response for the specified resource.\n   *\n   * @default - No caching.\n   */\n  readonly maxAge?: number;\n  /**\n   * Headers that are specified in the Access-Control-Request-Headers header.\n   *\n   * @default - No headers allowed.\n   */\n  readonly allowedHeaders?: string[];\n  /**\n   * An HTTP method that you allow the origin to execute.\n   */\n  readonly allowedMethods: HttpMethods[];\n  /**\n   * One or more origins you want customers to be able to access the bucket from.\n   */\n  readonly allowedOrigins: string[];\n  /**\n   * One or more headers in the response that you want customers to be able to access from their applications.\n   *\n   * @default - No headers exposed.\n   */\n  readonly exposedHeaders?: string[];\n}\n\n/**\n * All http request methods\n */\nexport enum RedirectProtocol {\n  HTTP = 'http',\n  HTTPS = 'https',\n}\n\n/**\n * Specifies a redirect behavior of all requests to a website endpoint of a bucket.\n */\nexport interface RedirectTarget {\n  /**\n   * Name of the host where requests are redirected\n   */\n  readonly hostName: string;\n\n  /**\n   * Protocol to use when redirecting requests\n   *\n   * @default - The protocol used in the original request.\n   */\n  readonly protocol?: RedirectProtocol;\n}\n\n/**\n * All supported inventory list formats.\n */\nexport enum InventoryFormat {\n  /**\n   * Generate the inventory list as CSV.\n   */\n  CSV = 'CSV',\n  /**\n   * Generate the inventory list as Parquet.\n   */\n  PARQUET = 'Parquet',\n  /**\n   * Generate the inventory list as ORC.\n   */\n  ORC = 'ORC',\n}\n\n/**\n * All supported inventory frequencies.\n */\nexport enum InventoryFrequency {\n  /**\n   * A report is generated every day.\n   */\n  DAILY = 'Daily',\n  /**\n   * A report is generated every Sunday (UTC timezone) after the initial report.\n   */\n  WEEKLY = 'Weekly'\n}\n\n/**\n * Inventory version support.\n */\nexport enum InventoryObjectVersion {\n  /**\n   * Includes all versions of each object in the report.\n   */\n  ALL = 'All',\n  /**\n   * Includes only the current version of each object in the report.\n   */\n  CURRENT = 'Current',\n}\n\n/**\n * The destination of the inventory.\n */\nexport interface InventoryDestination {\n  /**\n   * Bucket where all inventories will be saved in.\n   */\n  readonly bucket: IBucket;\n  /**\n   * The prefix to be used when saving the inventory.\n   *\n   * @default - No prefix.\n   */\n  readonly prefix?: string;\n  /**\n   * The account ID that owns the destination S3 bucket.\n   * If no account ID is provided, the owner is not validated before exporting data.\n   * It's recommended to set an account ID to prevent problems if the destination bucket ownership changes.\n   *\n   * @default - No account ID.\n   */\n  readonly bucketOwner?: string;\n}\n\n/**\n * Specifies the inventory configuration of an S3 Bucket.\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html\n */\nexport interface Inventory {\n  /**\n   * The destination of the inventory.\n   */\n  readonly destination: InventoryDestination;\n  /**\n   * The inventory will only include objects that meet the prefix filter criteria.\n   *\n   * @default - No objects prefix\n   */\n  readonly objectsPrefix?: string;\n  /**\n   * The format of the inventory.\n   *\n   * @default InventoryFormat.CSV\n   */\n  readonly format?: InventoryFormat;\n  /**\n   * Whether the inventory is enabled or disabled.\n   *\n   * @default true\n   */\n  readonly enabled?: boolean;\n  /**\n   * The inventory configuration ID.\n   *\n   * @default - generated ID.\n   */\n  readonly inventoryId?: string;\n  /**\n   * Frequency at which the inventory should be generated.\n   *\n   * @default InventoryFrequency.WEEKLY\n   */\n  readonly frequency?: InventoryFrequency;\n  /**\n   * If the inventory should contain all the object versions or only the current one.\n   *\n   * @default InventoryObjectVersion.ALL\n   */\n  readonly includeObjectVersions?: InventoryObjectVersion;\n  /**\n   * A list of optional fields to be included in the inventory result.\n   *\n   * @default - No optional fields.\n   */\n  readonly optionalFields?: string[];\n}\n/**\n   * The ObjectOwnership of the bucket.\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/about-object-ownership.html\n   *\n   */\nexport enum ObjectOwnership {\n  /**\n   * ACLs are disabled, and the bucket owner automatically owns\n   * and has full control over every object in the bucket.\n   * ACLs no longer affect permissions to data in the S3 bucket.\n   * The bucket uses policies to define access control.\n   */\n  BUCKET_OWNER_ENFORCED = 'BucketOwnerEnforced',\n  /**\n   * Objects uploaded to the bucket change ownership to the bucket owner .\n   */\n  BUCKET_OWNER_PREFERRED = 'BucketOwnerPreferred',\n  /**\n   * The uploading account will own the object.\n   */\n  OBJECT_WRITER = 'ObjectWriter',\n}\n/**\n * The intelligent tiering configuration.\n */\nexport interface IntelligentTieringConfiguration {\n  /**\n   * Configuration name\n   */\n  readonly name: string;\n\n\n  /**\n   * Add a filter to limit the scope of this configuration to a single prefix.\n   *\n   * @default this configuration will apply to **all** objects in the bucket.\n   */\n  readonly prefix?: string;\n\n  /**\n   * You can limit the scope of this rule to the key value pairs added below.\n   *\n   * @default No filtering will be performed on tags\n   */\n  readonly tags?: Tag[];\n\n  /**\n   * When enabled, Intelligent-Tiering will automatically move objects that\n   * haven\u2019t been accessed for a minimum of 90 days to the Archive Access tier.\n   *\n   * @default Objects will not move to Glacier\n   */\n  readonly archiveAccessTierTime?: Duration;\n\n  /**\n   * When enabled, Intelligent-Tiering will automatically move objects that\n   * haven\u2019t been accessed for a minimum of 180 days to the Deep Archive Access\n   * tier.\n   *\n   * @default Objects will not move to Glacier Deep Access\n   */\n  readonly deepArchiveAccessTierTime?: Duration;\n}\n\nexport interface BucketProps {\n  /**\n   * The kind of server-side encryption to apply to this bucket.\n   *\n   * If you choose KMS, you can specify a KMS key via `encryptionKey`. If\n   * encryption key is not specified, a key will automatically be created.\n   *\n   * @default - `Kms` if `encryptionKey` is specified, or `Unencrypted` otherwise.\n   */\n  readonly encryption?: BucketEncryption;\n\n  /**\n   * External KMS key to use for bucket encryption.\n   *\n   * The 'encryption' property must be either not specified or set to \"Kms\".\n   * An error will be emitted if encryption is set to \"Unencrypted\" or\n   * \"Managed\".\n   *\n   * @default - If encryption is set to \"Kms\" and this property is undefined,\n   * a new KMS key will be created and associated with this bucket.\n   */\n  readonly encryptionKey?: kms.IKey;\n\n  /**\n  * Enforces SSL for requests. S3.5 of the AWS Foundational Security Best Practices Regarding S3.\n  * @see https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-ssl-requests-only.html\n  *\n  * @default false\n  */\n  readonly enforceSSL?: boolean;\n\n  /**\n   * Specifies whether Amazon S3 should use an S3 Bucket Key with server-side\n   * encryption using KMS (SSE-KMS) for new objects in the bucket.\n   *\n   * Only relevant, when Encryption is set to {@link BucketEncryption.KMS}\n   *\n   * @default - false\n   */\n  readonly bucketKeyEnabled?: boolean;\n\n  /**\n   * Physical name of this bucket.\n   *\n   * @default - Assigned by CloudFormation (recommended).\n   */\n  readonly bucketName?: string;\n\n  /**\n   * Policy to apply when the bucket is removed from this stack.\n   *\n   * @default - The bucket will be orphaned.\n   */\n  readonly removalPolicy?: RemovalPolicy;\n\n  /**\n   * Whether all objects should be automatically deleted when the bucket is\n   * removed from the stack or when the stack is deleted.\n   *\n   * Requires the `removalPolicy` to be set to `RemovalPolicy.DESTROY`.\n   *\n   * **Warning** if you have deployed a bucket with `autoDeleteObjects: true`,\n   * switching this to `false` in a CDK version *before* `1.126.0` will lead to\n   * all objects in the bucket being deleted. Be sure to update your bucket resources\n   * by deploying with CDK version `1.126.0` or later **before** switching this value to `false`.\n   *\n   * @default false\n   */\n  readonly autoDeleteObjects?: boolean;\n\n  /**\n   * Whether this bucket should have versioning turned on or not.\n   *\n   * @default false\n   */\n  readonly versioned?: boolean;\n\n  /**\n   * Whether this bucket should send notifications to Amazon EventBridge or not.\n   *\n   * @default false\n   */\n  readonly eventBridgeEnabled?: boolean;\n\n  /**\n   * Rules that define how Amazon S3 manages objects during their lifetime.\n   *\n   * @default - No lifecycle rules.\n   */\n  readonly lifecycleRules?: LifecycleRule[];\n\n  /**\n   * The name of the index document (e.g. \"index.html\") for the website. Enables static website\n   * hosting for this bucket.\n   *\n   * @default - No index document.\n   */\n  readonly websiteIndexDocument?: string;\n\n  /**\n   * The name of the error document (e.g. \"404.html\") for the website.\n   * `websiteIndexDocument` must also be set if this is set.\n   *\n   * @default - No error document.\n   */\n  readonly websiteErrorDocument?: string;\n\n  /**\n   * Specifies the redirect behavior of all requests to a website endpoint of a bucket.\n   *\n   * If you specify this property, you can't specify \"websiteIndexDocument\", \"websiteErrorDocument\" nor , \"websiteRoutingRules\".\n   *\n   * @default - No redirection.\n   */\n  readonly websiteRedirect?: RedirectTarget;\n\n  /**\n   * Rules that define when a redirect is applied and the redirect behavior\n   *\n   * @default - No redirection rules.\n   */\n  readonly websiteRoutingRules?: RoutingRule[];\n\n  /**\n   * Specifies a canned ACL that grants predefined permissions to the bucket.\n   *\n   * @default BucketAccessControl.PRIVATE\n   */\n  readonly accessControl?: BucketAccessControl;\n\n  /**\n   * Grants public read access to all objects in the bucket.\n   * Similar to calling `bucket.grantPublicAccess()`\n   *\n   * @default false\n   */\n  readonly publicReadAccess?: boolean;\n\n  /**\n   * The block public access configuration of this bucket.\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html\n   *\n   *\n   * @default - CloudFormation defaults will apply. New buckets and objects don't allow public access, but users can modify bucket policies or object permissions to allow public access\n   */\n  readonly blockPublicAccess?: BlockPublicAccess;\n\n  /**\n   * The metrics configuration of this bucket.\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-metricsconfiguration.html\n   *\n   * @default - No metrics configuration.\n   */\n  readonly metrics?: BucketMetrics[];\n\n  /**\n   * The CORS configuration of this bucket.\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-cors.html\n   *\n   * @default - No CORS configuration.\n   */\n  readonly cors?: CorsRule[];\n\n  /**\n   * Destination bucket for the server access logs.\n   * @default - If \"serverAccessLogsPrefix\" undefined - access logs disabled, otherwise - log to current bucket.\n   */\n  readonly serverAccessLogsBucket?: IBucket;\n\n  /**\n   * Optional log file prefix to use for the bucket's access logs.\n   * If defined without \"serverAccessLogsBucket\", enables access logs to current bucket with this prefix.\n   * @default - No log file prefix\n   */\n  readonly serverAccessLogsPrefix?: string;\n\n  /**\n   * The inventory configuration of the bucket.\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html\n   *\n   * @default - No inventory configuration\n   */\n  readonly inventories?: Inventory[];\n  /**\n   * The objectOwnership of the bucket.\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/about-object-ownership.html\n   *\n   * @default - No ObjectOwnership configuration, uploading account will own the object.\n   *\n   */\n  readonly objectOwnership?: ObjectOwnership;\n\n  /**\n   * Whether this bucket should have transfer acceleration turned on or not.\n   *\n   * @default false\n   */\n  readonly transferAcceleration?: boolean;\n\n  /**\n   * The role to be used by the notifications handler\n   *\n   * @default - a new role will be created.\n   */\n  readonly notificationsHandlerRole?: iam.IRole;\n\n  /**\n   * Inteligent Tiering Configurations\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/userguide/intelligent-tiering.html\n   *\n   * @default No Intelligent Tiiering Configurations.\n   */\n  readonly intelligentTieringConfigurations?: IntelligentTieringConfiguration[];\n}\n\n\n/**\n * Tag\n */\nexport interface Tag {\n\n  /**\n   * key to e tagged\n   */\n  readonly key: string;\n  /**\n   * additional value\n   */\n  readonly value: string;\n}\n\n/**\n * An S3 bucket with associated policy objects\n *\n * This bucket does not yet have all features that exposed by the underlying\n * BucketResource.\n */\nexport class Bucket extends BucketBase {\n\n  public static fromBucketArn(scope: Construct, id: string, bucketArn: string): IBucket {\n    return Bucket.fromBucketAttributes(scope, id, { bucketArn });\n  }\n\n  public static fromBucketName(scope: Construct, id: string, bucketName: string): IBucket {\n    return Bucket.fromBucketAttributes(scope, id, { bucketName });\n  }\n\n  /**\n   * Creates a Bucket construct that represents an external bucket.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param attrs A `BucketAttributes` object. Can be obtained from a call to\n   * `bucket.export()` or manually created.\n   */\n  public static fromBucketAttributes(scope: Construct, id: string, attrs: BucketAttributes): IBucket {\n    const stack = Stack.of(scope);\n    const region = attrs.region ?? stack.region;\n    const urlSuffix = stack.urlSuffix;\n\n    const bucketName = parseBucketName(scope, attrs);\n    if (!bucketName) {\n      throw new Error('Bucket name is required');\n    }\n    Bucket.validateBucketName(bucketName);\n\n    const newUrlFormat = attrs.bucketWebsiteNewUrlFormat === undefined\n      ? false\n      : attrs.bucketWebsiteNewUrlFormat;\n\n    const websiteDomain = newUrlFormat\n      ? `${bucketName}.s3-website.${region}.${urlSuffix}`\n      : `${bucketName}.s3-website-${region}.${urlSuffix}`;\n\n    class Import extends BucketBase {\n      public readonly bucketName = bucketName!;\n      public readonly bucketArn = parseBucketArn(scope, attrs);\n      public readonly bucketDomainName = attrs.bucketDomainName || `${bucketName}.s3.${urlSuffix}`;\n      public readonly bucketWebsiteUrl = attrs.bucketWebsiteUrl || `http://${websiteDomain}`;\n      public readonly bucketWebsiteDomainName = attrs.bucketWebsiteUrl ? Fn.select(2, Fn.split('/', attrs.bucketWebsiteUrl)) : websiteDomain;\n      public readonly bucketRegionalDomainName = attrs.bucketRegionalDomainName || `${bucketName}.s3.${region}.${urlSuffix}`;\n      public readonly bucketDualStackDomainName = attrs.bucketDualStackDomainName || `${bucketName}.s3.dualstack.${region}.${urlSuffix}`;\n      public readonly bucketWebsiteNewUrlFormat = newUrlFormat;\n      public readonly encryptionKey = attrs.encryptionKey;\n      public readonly isWebsite = attrs.isWebsite ?? false;\n      public policy?: BucketPolicy = undefined;\n      protected autoCreatePolicy = false;\n      protected disallowPublicAccess = false;\n      protected notificationsHandlerRole = attrs.notificationsHandlerRole;\n\n      /**\n       * Exports this bucket from the stack.\n       */\n      public export() {\n        return attrs;\n      }\n    }\n\n    return new Import(scope, id, {\n      account: attrs.account,\n      region: attrs.region,\n    });\n  }\n\n  /**\n   * Thrown an exception if the given bucket name is not valid.\n   *\n   * @param physicalName name of the bucket.\n   */\n  public static validateBucketName(physicalName: string): void {\n    const bucketName = physicalName;\n    if (!bucketName || Token.isUnresolved(bucketName)) {\n      // the name is a late-bound value, not a defined string,\n      // so skip validation\n      return;\n    }\n\n    const errors: string[] = [];\n\n    // Rules codified from https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n    if (bucketName.length < 3 || bucketName.length > 63) {\n      errors.push('Bucket name must be at least 3 and no more than 63 characters');\n    }\n    const charsetMatch = bucketName.match(/[^a-z0-9.-]/);\n    if (charsetMatch) {\n      errors.push('Bucket name must only contain lowercase characters and the symbols, period (.) and dash (-) '\n        + `(offset: ${charsetMatch.index})`);\n    }\n    if (!/[a-z0-9]/.test(bucketName.charAt(0))) {\n      errors.push('Bucket name must start and end with a lowercase character or number '\n        + '(offset: 0)');\n    }\n    if (!/[a-z0-9]/.test(bucketName.charAt(bucketName.length - 1))) {\n      errors.push('Bucket name must start and end with a lowercase character or number '\n        + `(offset: ${bucketName.length - 1})`);\n    }\n    const consecSymbolMatch = bucketName.match(/\\.-|-\\.|\\.\\./);\n    if (consecSymbolMatch) {\n      errors.push('Bucket name must not have dash next to period, or period next to dash, or consecutive periods '\n        + `(offset: ${consecSymbolMatch.index})`);\n    }\n    if (/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(bucketName)) {\n      errors.push('Bucket name must not resemble an IP address');\n    }\n\n    if (errors.length > 0) {\n      throw new Error(`Invalid S3 bucket name (value: ${bucketName})${EOL}${errors.join(EOL)}`);\n    }\n  }\n\n  public readonly bucketArn: string;\n  public readonly bucketName: string;\n  public readonly bucketDomainName: string;\n  public readonly bucketWebsiteUrl: string;\n  public readonly bucketWebsiteDomainName: string;\n  public readonly bucketDualStackDomainName: string;\n  public readonly bucketRegionalDomainName: string;\n\n  public readonly encryptionKey?: kms.IKey;\n  public readonly isWebsite?: boolean;\n  public policy?: BucketPolicy;\n  protected autoCreatePolicy = true;\n  protected disallowPublicAccess?: boolean;\n  private accessControl?: BucketAccessControl;\n  private readonly lifecycleRules: LifecycleRule[] = [];\n  private readonly versioned?: boolean;\n  private readonly eventBridgeEnabled?: boolean;\n  private readonly metrics: BucketMetrics[] = [];\n  private readonly cors: CorsRule[] = [];\n  private readonly inventories: Inventory[] = [];\n  private readonly _resource: CfnBucket;\n\n  constructor(scope: Construct, id: string, props: BucketProps = {}) {\n    super(scope, id, {\n      physicalName: props.bucketName,\n    });\n\n    this.notificationsHandlerRole = props.notificationsHandlerRole;\n\n    const { bucketEncryption, encryptionKey } = this.parseEncryption(props);\n\n    Bucket.validateBucketName(this.physicalName);\n\n    const websiteConfiguration = this.renderWebsiteConfiguration(props);\n    this.isWebsite = (websiteConfiguration !== undefined);\n\n    const resource = new CfnBucket(this, 'Resource', {\n      bucketName: this.physicalName,\n      bucketEncryption,\n      versioningConfiguration: props.versioned ? { status: 'Enabled' } : undefined,\n      lifecycleConfiguration: Lazy.any({ produce: () => this.parseLifecycleConfiguration() }),\n      websiteConfiguration,\n      publicAccessBlockConfiguration: props.blockPublicAccess,\n      metricsConfigurations: Lazy.any({ produce: () => this.parseMetricConfiguration() }),\n      corsConfiguration: Lazy.any({ produce: () => this.parseCorsConfiguration() }),\n      accessControl: Lazy.string({ produce: () => this.accessControl }),\n      loggingConfiguration: this.parseServerAccessLogs(props),\n      inventoryConfigurations: Lazy.any({ produce: () => this.parseInventoryConfiguration() }),\n      ownershipControls: this.parseOwnershipControls(props),\n      accelerateConfiguration: props.transferAcceleration ? { accelerationStatus: 'Enabled' } : undefined,\n      intelligentTieringConfigurations: this.parseTieringConfig(props),\n    });\n    this._resource = resource;\n\n    resource.applyRemovalPolicy(props.removalPolicy);\n\n    this.versioned = props.versioned;\n    this.encryptionKey = encryptionKey;\n    this.eventBridgeEnabled = props.eventBridgeEnabled;\n\n    this.bucketName = this.getResourceNameAttribute(resource.ref);\n    this.bucketArn = this.getResourceArnAttribute(resource.attrArn, {\n      region: '',\n      account: '',\n      service: 's3',\n      resource: this.physicalName,\n    });\n\n    this.bucketDomainName = resource.attrDomainName;\n    this.bucketWebsiteUrl = resource.attrWebsiteUrl;\n    this.bucketWebsiteDomainName = Fn.select(2, Fn.split('/', this.bucketWebsiteUrl));\n    this.bucketDualStackDomainName = resource.attrDualStackDomainName;\n    this.bucketRegionalDomainName = resource.attrRegionalDomainName;\n\n    this.disallowPublicAccess = props.blockPublicAccess && props.blockPublicAccess.blockPublicPolicy;\n    this.accessControl = props.accessControl;\n\n    // Enforce AWS Foundational Security Best Practice\n    if (props.enforceSSL) {\n      this.enforceSSLStatement();\n    }\n\n    if (props.serverAccessLogsBucket instanceof Bucket) {\n      props.serverAccessLogsBucket.allowLogDelivery();\n    }\n\n    for (const inventory of props.inventories ?? []) {\n      this.addInventory(inventory);\n    }\n\n    // Add all bucket metric configurations rules\n    (props.metrics || []).forEach(this.addMetric.bind(this));\n    // Add all cors configuration rules\n    (props.cors || []).forEach(this.addCorsRule.bind(this));\n\n    // Add all lifecycle rules\n    (props.lifecycleRules || []).forEach(this.addLifecycleRule.bind(this));\n\n    if (props.publicReadAccess) {\n      this.grantPublicAccess();\n    }\n\n    if (props.autoDeleteObjects) {\n      if (props.removalPolicy !== RemovalPolicy.DESTROY) {\n        throw new Error('Cannot use \\'autoDeleteObjects\\' property on a bucket without setting removal policy to \\'DESTROY\\'.');\n      }\n\n      this.enableAutoDeleteObjects();\n    }\n\n    if (this.eventBridgeEnabled) {\n      this.enableEventBridgeNotification();\n    }\n  }\n\n  /**\n   * Add a lifecycle rule to the bucket\n   *\n   * @param rule The rule to add\n   */\n  public addLifecycleRule(rule: LifecycleRule) {\n    if ((rule.noncurrentVersionExpiration !== undefined\n      || (rule.noncurrentVersionTransitions && rule.noncurrentVersionTransitions.length > 0))\n      && !this.versioned) {\n      throw new Error(\"Cannot use 'noncurrent' rules on a nonversioned bucket\");\n    }\n\n    this.lifecycleRules.push(rule);\n  }\n\n  /**\n   * Adds a metrics configuration for the CloudWatch request metrics from the bucket.\n   *\n   * @param metric The metric configuration to add\n   */\n  public addMetric(metric: BucketMetrics) {\n    this.metrics.push(metric);\n  }\n\n  /**\n   * Adds a cross-origin access configuration for objects in an Amazon S3 bucket\n   *\n   * @param rule The CORS configuration rule to add\n   */\n  public addCorsRule(rule: CorsRule) {\n    this.cors.push(rule);\n  }\n\n  /**\n   * Add an inventory configuration.\n   *\n   * @param inventory configuration to add\n   */\n  public addInventory(inventory: Inventory): void {\n    this.inventories.push(inventory);\n  }\n\n  /**\n   * Adds an iam statement to enforce SSL requests only.\n   */\n  private enforceSSLStatement() {\n    const statement = new iam.PolicyStatement({\n      actions: ['s3:*'],\n      conditions: {\n        Bool: { 'aws:SecureTransport': 'false' },\n      },\n      effect: iam.Effect.DENY,\n      resources: [\n        this.bucketArn,\n        this.arnForObjects('*'),\n      ],\n      principals: [new iam.AnyPrincipal()],\n    });\n    this.addToResourcePolicy(statement);\n  }\n\n  /**\n   * Set up key properties and return the Bucket encryption property from the\n   * user's configuration.\n   */\n  private parseEncryption(props: BucketProps): {\n    bucketEncryption?: CfnBucket.BucketEncryptionProperty,\n    encryptionKey?: kms.IKey\n  } {\n\n    // default based on whether encryptionKey is specified\n    let encryptionType = props.encryption;\n    if (encryptionType === undefined) {\n      encryptionType = props.encryptionKey ? BucketEncryption.KMS : BucketEncryption.UNENCRYPTED;\n    }\n\n    // if encryption key is set, encryption must be set to KMS.\n    if (encryptionType !== BucketEncryption.KMS && props.encryptionKey) {\n      throw new Error(`encryptionKey is specified, so 'encryption' must be set to KMS (value: ${encryptionType})`);\n    }\n\n    // if bucketKeyEnabled is set, encryption must be set to KMS.\n    if (props.bucketKeyEnabled && encryptionType !== BucketEncryption.KMS) {\n      throw new Error(`bucketKeyEnabled is specified, so 'encryption' must be set to KMS (value: ${encryptionType})`);\n    }\n\n    if (encryptionType === BucketEncryption.UNENCRYPTED) {\n      return { bucketEncryption: undefined, encryptionKey: undefined };\n    }\n\n    if (encryptionType === BucketEncryption.KMS) {\n      const encryptionKey = props.encryptionKey || new kms.Key(this, 'Key', {\n        description: `Created by ${this.node.path}`,\n      });\n\n      const bucketEncryption = {\n        serverSideEncryptionConfiguration: [\n          {\n            bucketKeyEnabled: props.bucketKeyEnabled,\n            serverSideEncryptionByDefault: {\n              sseAlgorithm: 'aws:kms',\n              kmsMasterKeyId: encryptionKey.keyArn,\n            },\n          },\n        ],\n      };\n      return { encryptionKey, bucketEncryption };\n    }\n\n    if (encryptionType === BucketEncryption.S3_MANAGED) {\n      const bucketEncryption = {\n        serverSideEncryptionConfiguration: [\n          { serverSideEncryptionByDefault: { sseAlgorithm: 'AES256' } },\n        ],\n      };\n\n      return { bucketEncryption };\n    }\n\n    if (encryptionType === BucketEncryption.KMS_MANAGED) {\n      const bucketEncryption = {\n        serverSideEncryptionConfiguration: [\n          { serverSideEncryptionByDefault: { sseAlgorithm: 'aws:kms' } },\n        ],\n      };\n      return { bucketEncryption };\n    }\n\n    throw new Error(`Unexpected 'encryptionType': ${encryptionType}`);\n  }\n\n  /**\n   * Parse the lifecycle configuration out of the bucket props\n   * @param props Par\n   */\n  private parseLifecycleConfiguration(): CfnBucket.LifecycleConfigurationProperty | undefined {\n    if (!this.lifecycleRules || this.lifecycleRules.length === 0) {\n      return undefined;\n    }\n\n    const self = this;\n\n    return { rules: this.lifecycleRules.map(parseLifecycleRule) };\n\n    function parseLifecycleRule(rule: LifecycleRule): CfnBucket.RuleProperty {\n      const enabled = rule.enabled ?? true;\n\n      const x: CfnBucket.RuleProperty = {\n        // eslint-disable-next-line max-len\n        abortIncompleteMultipartUpload: rule.abortIncompleteMultipartUploadAfter !== undefined ? { daysAfterInitiation: rule.abortIncompleteMultipartUploadAfter.toDays() } : undefined,\n        expirationDate: rule.expirationDate,\n        expirationInDays: rule.expiration?.toDays(),\n        id: rule.id,\n        noncurrentVersionExpirationInDays: rule.noncurrentVersionExpiration && rule.noncurrentVersionExpiration.toDays(),\n        noncurrentVersionTransitions: mapOrUndefined(rule.noncurrentVersionTransitions, t => ({\n          storageClass: t.storageClass.value,\n          transitionInDays: t.transitionAfter.toDays(),\n          newerNoncurrentVersions: t.noncurrentVersionsToRetain,\n        })),\n        prefix: rule.prefix,\n        status: enabled ? 'Enabled' : 'Disabled',\n        transitions: mapOrUndefined(rule.transitions, t => ({\n          storageClass: t.storageClass.value,\n          transitionDate: t.transitionDate,\n          transitionInDays: t.transitionAfter && t.transitionAfter.toDays(),\n        })),\n        expiredObjectDeleteMarker: rule.expiredObjectDeleteMarker,\n        tagFilters: self.parseTagFilters(rule.tagFilters),\n      };\n\n      return x;\n    }\n  }\n\n  private parseServerAccessLogs(props: BucketProps): CfnBucket.LoggingConfigurationProperty | undefined {\n    if (!props.serverAccessLogsBucket && !props.serverAccessLogsPrefix) {\n      return undefined;\n    }\n\n    return {\n      destinationBucketName: props.serverAccessLogsBucket?.bucketName,\n      logFilePrefix: props.serverAccessLogsPrefix,\n    };\n  }\n\n  private parseMetricConfiguration(): CfnBucket.MetricsConfigurationProperty[] | undefined {\n    if (!this.metrics || this.metrics.length === 0) {\n      return undefined;\n    }\n\n    const self = this;\n\n    return this.metrics.map(parseMetric);\n\n    function parseMetric(metric: BucketMetrics): CfnBucket.MetricsConfigurationProperty {\n      return {\n        id: metric.id,\n        prefix: metric.prefix,\n        tagFilters: self.parseTagFilters(metric.tagFilters),\n      };\n    }\n  }\n\n  private parseCorsConfiguration(): CfnBucket.CorsConfigurationProperty | undefined {\n    if (!this.cors || this.cors.length === 0) {\n      return undefined;\n    }\n\n    return { corsRules: this.cors.map(parseCors) };\n\n    function parseCors(rule: CorsRule): CfnBucket.CorsRuleProperty {\n      return {\n        id: rule.id,\n        maxAge: rule.maxAge,\n        allowedHeaders: rule.allowedHeaders,\n        allowedMethods: rule.allowedMethods,\n        allowedOrigins: rule.allowedOrigins,\n        exposedHeaders: rule.exposedHeaders,\n      };\n    }\n  }\n\n  private parseTagFilters(tagFilters?: { [tag: string]: any }) {\n    if (!tagFilters || tagFilters.length === 0) {\n      return undefined;\n    }\n\n    return Object.keys(tagFilters).map(tag => ({\n      key: tag,\n      value: tagFilters[tag],\n    }));\n  }\n\n  private parseOwnershipControls({ objectOwnership }: BucketProps): CfnBucket.OwnershipControlsProperty | undefined {\n    if (!objectOwnership) {\n      return undefined;\n    }\n    return {\n      rules: [{\n        objectOwnership,\n      }],\n    };\n  }\n\n  private parseTieringConfig({ intelligentTieringConfigurations }: BucketProps): CfnBucket.IntelligentTieringConfigurationProperty[] | undefined {\n    if (!intelligentTieringConfigurations) {\n      return undefined;\n    }\n\n    return intelligentTieringConfigurations.map(config => {\n      const tierings = [];\n      if (config.archiveAccessTierTime) {\n        tierings.push({\n          accessTier: 'ARCHIVE_ACCESS',\n          days: config.archiveAccessTierTime.toDays({ integral: true }),\n        });\n      }\n      if (config.deepArchiveAccessTierTime) {\n        tierings.push({\n          accessTier: 'DEEP_ARCHIVE_ACCESS',\n          days: config.deepArchiveAccessTierTime.toDays({ integral: true }),\n        });\n      }\n      return {\n        id: config.name,\n        prefix: config.prefix,\n        status: 'Enabled',\n        tagFilters: config.tags,\n        tierings: tierings,\n      };\n    });\n  }\n\n  private renderWebsiteConfiguration(props: BucketProps): CfnBucket.WebsiteConfigurationProperty | undefined {\n    if (!props.websiteErrorDocument && !props.websiteIndexDocument && !props.websiteRedirect && !props.websiteRoutingRules) {\n      return undefined;\n    }\n\n    if (props.websiteErrorDocument && !props.websiteIndexDocument) {\n      throw new Error('\"websiteIndexDocument\" is required if \"websiteErrorDocument\" is set');\n    }\n\n    if (props.websiteRedirect && (props.websiteErrorDocument || props.websiteIndexDocument || props.websiteRoutingRules)) {\n      throw new Error('\"websiteIndexDocument\", \"websiteErrorDocument\" and, \"websiteRoutingRules\" cannot be set if \"websiteRedirect\" is used');\n    }\n\n    const routingRules = props.websiteRoutingRules ? props.websiteRoutingRules.map<CfnBucket.RoutingRuleProperty>((rule) => {\n      if (rule.condition && !rule.condition.httpErrorCodeReturnedEquals && !rule.condition.keyPrefixEquals) {\n        throw new Error('The condition property cannot be an empty object');\n      }\n\n      return {\n        redirectRule: {\n          hostName: rule.hostName,\n          httpRedirectCode: rule.httpRedirectCode,\n          protocol: rule.protocol,\n          replaceKeyWith: rule.replaceKey && rule.replaceKey.withKey,\n          replaceKeyPrefixWith: rule.replaceKey && rule.replaceKey.prefixWithKey,\n        },\n        routingRuleCondition: rule.condition,\n      };\n    }) : undefined;\n\n    return {\n      indexDocument: props.websiteIndexDocument,\n      errorDocument: props.websiteErrorDocument,\n      redirectAllRequestsTo: props.websiteRedirect,\n      routingRules,\n    };\n  }\n\n  /**\n   * Allows the LogDelivery group to write, fails if ACL was set differently.\n   *\n   * @see\n   * https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl\n   */\n  private allowLogDelivery() {\n    if (this.accessControl && this.accessControl !== BucketAccessControl.LOG_DELIVERY_WRITE) {\n      throw new Error(\"Cannot enable log delivery to this bucket because the bucket's ACL has been set and can't be changed\");\n    }\n\n    this.accessControl = BucketAccessControl.LOG_DELIVERY_WRITE;\n  }\n\n  private parseInventoryConfiguration(): CfnBucket.InventoryConfigurationProperty[] | undefined {\n    if (!this.inventories || this.inventories.length === 0) {\n      return undefined;\n    }\n\n    return this.inventories.map((inventory, index) => {\n      const format = inventory.format ?? InventoryFormat.CSV;\n      const frequency = inventory.frequency ?? InventoryFrequency.WEEKLY;\n      const id = inventory.inventoryId ?? `${this.node.id}Inventory${index}`;\n\n      if (inventory.destination.bucket instanceof Bucket) {\n        inventory.destination.bucket.addToResourcePolicy(new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['s3:PutObject'],\n          resources: [\n            inventory.destination.bucket.bucketArn,\n            inventory.destination.bucket.arnForObjects(`${inventory.destination.prefix ?? ''}*`),\n          ],\n          principals: [new iam.ServicePrincipal('s3.amazonaws.com')],\n          conditions: {\n            ArnLike: {\n              'aws:SourceArn': this.bucketArn,\n            },\n          },\n        }));\n      }\n\n      return {\n        id,\n        destination: {\n          bucketArn: inventory.destination.bucket.bucketArn,\n          bucketAccountId: inventory.destination.bucketOwner,\n          prefix: inventory.destination.prefix,\n          format,\n        },\n        enabled: inventory.enabled ?? true,\n        includedObjectVersions: inventory.includeObjectVersions ?? InventoryObjectVersion.ALL,\n        scheduleFrequency: frequency,\n        optionalFields: inventory.optionalFields,\n        prefix: inventory.objectsPrefix,\n      };\n    });\n  }\n\n  private enableAutoDeleteObjects() {\n    const provider = CustomResourceProvider.getOrCreateProvider(this, AUTO_DELETE_OBJECTS_RESOURCE_TYPE, {\n      codeDirectory: path.join(__dirname, 'auto-delete-objects-handler'),\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n      description: `Lambda function for auto-deleting objects in ${this.bucketName} S3 bucket.`,\n    });\n\n    // Use a bucket policy to allow the custom resource to delete\n    // objects in the bucket\n    this.addToResourcePolicy(new iam.PolicyStatement({\n      actions: [\n        // list objects\n        ...perms.BUCKET_READ_METADATA_ACTIONS,\n        ...perms.BUCKET_DELETE_ACTIONS, // and then delete them\n      ],\n      resources: [\n        this.bucketArn,\n        this.arnForObjects('*'),\n      ],\n      principals: [new iam.ArnPrincipal(provider.roleArn)],\n    }));\n\n    const customResource = new CustomResource(this, 'AutoDeleteObjectsCustomResource', {\n      resourceType: AUTO_DELETE_OBJECTS_RESOURCE_TYPE,\n      serviceToken: provider.serviceToken,\n      properties: {\n        BucketName: this.bucketName,\n      },\n    });\n\n    // Ensure bucket policy is deleted AFTER the custom resource otherwise\n    // we don't have permissions to list and delete in the bucket.\n    // (add a `if` to make TS happy)\n    if (this.policy) {\n      customResource.node.addDependency(this.policy);\n    }\n\n    // We also tag the bucket to record the fact that we want it autodeleted.\n    // The custom resource will check this tag before actually doing the delete.\n    // Because tagging and untagging will ALWAYS happen before the CR is deleted,\n    // we can set `autoDeleteObjects: false` without the removal of the CR emptying\n    // the bucket as a side effect.\n    Tags.of(this._resource).add(AUTO_DELETE_OBJECTS_TAG, 'true');\n  }\n}\n\n/**\n * What kind of server-side encryption to apply to this bucket\n */\nexport enum BucketEncryption {\n  /**\n   * Objects in the bucket are not encrypted.\n   */\n  UNENCRYPTED = 'NONE',\n\n  /**\n   * Server-side KMS encryption with a master key managed by KMS.\n   */\n  KMS_MANAGED = 'MANAGED',\n\n  /**\n   * Server-side encryption with a master key managed by S3.\n   */\n  S3_MANAGED = 'S3MANAGED',\n\n  /**\n   * Server-side encryption with a KMS key managed by the user.\n   * If `encryptionKey` is specified, this key will be used, otherwise, one will be defined.\n   */\n  KMS = 'KMS',\n}\n\n/**\n * Notification event types.\n * @link https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-event-types-and-destinations.html#supported-notification-event-types\n */\nexport enum EventType {\n  /**\n   * Amazon S3 APIs such as PUT, POST, and COPY can create an object. Using\n   * these event types, you can enable notification when an object is created\n   * using a specific API, or you can use the s3:ObjectCreated:* event type to\n   * request notification regardless of the API that was used to create an\n   * object.\n   */\n  OBJECT_CREATED = 's3:ObjectCreated:*',\n\n  /**\n   * Amazon S3 APIs such as PUT, POST, and COPY can create an object. Using\n   * these event types, you can enable notification when an object is created\n   * using a specific API, or you can use the s3:ObjectCreated:* event type to\n   * request notification regardless of the API that was used to create an\n   * object.\n   */\n  OBJECT_CREATED_PUT = 's3:ObjectCreated:Put',\n\n  /**\n   * Amazon S3 APIs such as PUT, POST, and COPY can create an object. Using\n   * these event types, you can enable notification when an object is created\n   * using a specific API, or you can use the s3:ObjectCreated:* event type to\n   * request notification regardless of the API that was used to create an\n   * object.\n   */\n  OBJECT_CREATED_POST = 's3:ObjectCreated:Post',\n\n  /**\n   * Amazon S3 APIs such as PUT, POST, and COPY can create an object. Using\n   * these event types, you can enable notification when an object is created\n   * using a specific API, or you can use the s3:ObjectCreated:* event type to\n   * request notification regardless of the API that was used to create an\n   * object.\n   */\n  OBJECT_CREATED_COPY = 's3:ObjectCreated:Copy',\n\n  /**\n   * Amazon S3 APIs such as PUT, POST, and COPY can create an object. Using\n   * these event types, you can enable notification when an object is created\n   * using a specific API, or you can use the s3:ObjectCreated:* event type to\n   * request notification regardless of the API that was used to create an\n   * object.\n   */\n  OBJECT_CREATED_COMPLETE_MULTIPART_UPLOAD = 's3:ObjectCreated:CompleteMultipartUpload',\n\n  /**\n   * By using the ObjectRemoved event types, you can enable notification when\n   * an object or a batch of objects is removed from a bucket.\n   *\n   * You can request notification when an object is deleted or a versioned\n   * object is permanently deleted by using the s3:ObjectRemoved:Delete event\n   * type. Or you can request notification when a delete marker is created for\n   * a versioned object by using s3:ObjectRemoved:DeleteMarkerCreated. For\n   * information about deleting versioned objects, see Deleting Object\n   * Versions. You can also use a wildcard s3:ObjectRemoved:* to request\n   * notification anytime an object is deleted.\n   *\n   * You will not receive event notifications from automatic deletes from\n   * lifecycle policies or from failed operations.\n   */\n  OBJECT_REMOVED = 's3:ObjectRemoved:*',\n\n  /**\n   * By using the ObjectRemoved event types, you can enable notification when\n   * an object or a batch of objects is removed from a bucket.\n   *\n   * You can request notification when an object is deleted or a versioned\n   * object is permanently deleted by using the s3:ObjectRemoved:Delete event\n   * type. Or you can request notification when a delete marker is created for\n   * a versioned object by using s3:ObjectRemoved:DeleteMarkerCreated. For\n   * information about deleting versioned objects, see Deleting Object\n   * Versions. You can also use a wildcard s3:ObjectRemoved:* to request\n   * notification anytime an object is deleted.\n   *\n   * You will not receive event notifications from automatic deletes from\n   * lifecycle policies or from failed operations.\n   */\n  OBJECT_REMOVED_DELETE = 's3:ObjectRemoved:Delete',\n\n  /**\n   * By using the ObjectRemoved event types, you can enable notification when\n   * an object or a batch of objects is removed from a bucket.\n   *\n   * You can request notification when an object is deleted or a versioned\n   * object is permanently deleted by using the s3:ObjectRemoved:Delete event\n   * type. Or you can request notification when a delete marker is created for\n   * a versioned object by using s3:ObjectRemoved:DeleteMarkerCreated. For\n   * information about deleting versioned objects, see Deleting Object\n   * Versions. You can also use a wildcard s3:ObjectRemoved:* to request\n   * notification anytime an object is deleted.\n   *\n   * You will not receive event notifications from automatic deletes from\n   * lifecycle policies or from failed operations.\n   */\n  OBJECT_REMOVED_DELETE_MARKER_CREATED = 's3:ObjectRemoved:DeleteMarkerCreated',\n\n  /**\n   * Using restore object event types you can receive notifications for\n   * initiation and completion when restoring objects from the S3 Glacier\n   * storage class.\n   *\n   * You use s3:ObjectRestore:Post to request notification of object restoration\n   * initiation.\n   */\n  OBJECT_RESTORE_POST = 's3:ObjectRestore:Post',\n\n  /**\n   * Using restore object event types you can receive notifications for\n   * initiation and completion when restoring objects from the S3 Glacier\n   * storage class.\n   *\n   * You use s3:ObjectRestore:Completed to request notification of\n   * restoration completion.\n   */\n  OBJECT_RESTORE_COMPLETED = 's3:ObjectRestore:Completed',\n\n  /**\n   * Using restore object event types you can receive notifications for\n   * initiation and completion when restoring objects from the S3 Glacier\n   * storage class.\n   *\n   * You use s3:ObjectRestore:Delete to request notification of\n   * restoration completion.\n   */\n  OBJECT_RESTORE_DELETE = 's3:ObjectRestore:Delete',\n\n  /**\n   * You can use this event type to request Amazon S3 to send a notification\n   * message when Amazon S3 detects that an object of the RRS storage class is\n   * lost.\n   */\n  REDUCED_REDUNDANCY_LOST_OBJECT = 's3:ReducedRedundancyLostObject',\n\n  /**\n   * You receive this notification event when an object that was eligible for\n   * replication using Amazon S3 Replication Time Control failed to replicate.\n   */\n  REPLICATION_OPERATION_FAILED_REPLICATION = 's3:Replication:OperationFailedReplication',\n\n  /**\n   * You receive this notification event when an object that was eligible for\n   * replication using Amazon S3 Replication Time Control exceeded the 15-minute\n   * threshold for replication.\n   */\n  REPLICATION_OPERATION_MISSED_THRESHOLD = 's3:Replication:OperationMissedThreshold',\n\n  /**\n   * You receive this notification event for an object that was eligible for\n   * replication using the Amazon S3 Replication Time Control feature replicated\n   * after the 15-minute threshold.\n   */\n  REPLICATION_OPERATION_REPLICATED_AFTER_THRESHOLD = 's3:Replication:OperationReplicatedAfterThreshold',\n\n  /**\n   * You receive this notification event for an object that was eligible for\n   * replication using Amazon S3 Replication Time Control but is no longer tracked\n   * by replication metrics.\n   */\n  REPLICATION_OPERATION_NOT_TRACKED = 's3:Replication:OperationNotTracked',\n\n  /**\n   * By using the LifecycleExpiration event types, you can receive a notification\n   * when Amazon S3 deletes an object based on your S3 Lifecycle configuration.\n   */\n  LIFECYCLE_EXPIRATION = 's3:LifecycleExpiration:*',\n\n  /**\n   * The s3:LifecycleExpiration:Delete event type notifies you when an object\n   * in an unversioned bucket is deleted.\n   * It also notifies you when an object version is permanently deleted by an\n   * S3 Lifecycle configuration.\n   */\n  LIFECYCLE_EXPIRATION_DELETE = 's3:LifecycleExpiration:Delete',\n\n  /**\n   * The s3:LifecycleExpiration:DeleteMarkerCreated event type notifies you\n   * when S3 Lifecycle creates a delete marker when a current version of an\n   * object in versioned bucket is deleted.\n   */\n  LIFECYCLE_EXPIRATION_DELETE_MARKER_CREATED = 's3:LifecycleExpiration:DeleteMarkerCreated',\n\n  /**\n   * You receive this notification event when an object is transitioned to\n   * another Amazon S3 storage class by an S3 Lifecycle configuration.\n   */\n  LIFECYCLE_TRANSITION = 's3:LifecycleTransition',\n\n  /**\n   * You receive this notification event when an object within the\n   * S3 Intelligent-Tiering storage class moved to the Archive Access tier or\n   * Deep Archive Access tier.\n   */\n  INTELLIGENT_TIERING = 's3:IntelligentTiering',\n\n  /**\n   * By using the ObjectTagging event types, you can enable notification when\n   * an object tag is added or deleted from an object.\n   */\n  OBJECT_TAGGING = 's3:ObjectTagging:*',\n\n  /**\n   * The s3:ObjectTagging:Put event type notifies you when a tag is PUT on an\n   * object or an existing tag is updated.\n\n   */\n  OBJECT_TAGGING_PUT = 's3:ObjectTagging:Put',\n\n  /**\n   * The s3:ObjectTagging:Delete event type notifies you when a tag is removed\n   * from an object.\n   */\n  OBJECT_TAGGING_DELETE = 's3:ObjectTagging:Delete',\n\n  /**\n   * You receive this notification event when an ACL is PUT on an object or when\n   * an existing ACL is changed.\n   * An event is not generated when a request results in no change to an\n   * object\u2019s ACL.\n   */\n  OBJECT_ACL_PUT = 's3:ObjectAcl:Put',\n}\n\nexport interface NotificationKeyFilter {\n  /**\n   * S3 keys must have the specified prefix.\n   */\n  readonly prefix?: string;\n\n  /**\n   * S3 keys must have the specified suffix.\n   */\n  readonly suffix?: string;\n}\n\n/**\n * Options for the onCloudTrailPutObject method\n */\nexport interface OnCloudTrailBucketEventOptions extends events.OnEventOptions {\n  /**\n   * Only watch changes to these object paths\n   *\n   * @default - Watch changes to all objects\n   */\n  readonly paths?: string[];\n}\n\n/**\n * Default bucket access control types.\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\n */\nexport enum BucketAccessControl {\n  /**\n   * Owner gets FULL_CONTROL. No one else has access rights.\n   */\n  PRIVATE = 'Private',\n\n  /**\n   * Owner gets FULL_CONTROL. The AllUsers group gets READ access.\n   */\n  PUBLIC_READ = 'PublicRead',\n\n  /**\n   * Owner gets FULL_CONTROL. The AllUsers group gets READ and WRITE access.\n   * Granting this on a bucket is generally not recommended.\n   */\n  PUBLIC_READ_WRITE = 'PublicReadWrite',\n\n  /**\n   * Owner gets FULL_CONTROL. The AuthenticatedUsers group gets READ access.\n   */\n  AUTHENTICATED_READ = 'AuthenticatedRead',\n\n  /**\n   * The LogDelivery group gets WRITE and READ_ACP permissions on the bucket.\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerLogs.html\n   */\n  LOG_DELIVERY_WRITE = 'LogDeliveryWrite',\n\n  /**\n   * Object owner gets FULL_CONTROL. Bucket owner gets READ access.\n   * If you specify this canned ACL when creating a bucket, Amazon S3 ignores it.\n   */\n  BUCKET_OWNER_READ = 'BucketOwnerRead',\n\n  /**\n   * Both the object owner and the bucket owner get FULL_CONTROL over the object.\n   * If you specify this canned ACL when creating a bucket, Amazon S3 ignores it.\n   */\n  BUCKET_OWNER_FULL_CONTROL = 'BucketOwnerFullControl',\n\n  /**\n   * Owner gets FULL_CONTROL. Amazon EC2 gets READ access to GET an Amazon Machine Image (AMI) bundle from Amazon S3.\n   */\n  AWS_EXEC_READ = 'AwsExecRead',\n}\n\nexport interface RoutingRuleCondition {\n  /**\n   * The HTTP error code when the redirect is applied\n   *\n   * In the event of an error, if the error code equals this value, then the specified redirect is applied.\n   *\n   * If both condition properties are specified, both must be true for the redirect to be applied.\n   *\n   * @default - The HTTP error code will not be verified\n   */\n  readonly httpErrorCodeReturnedEquals?: string;\n\n  /**\n   * The object key name prefix when the redirect is applied\n   *\n   * If both condition properties are specified, both must be true for the redirect to be applied.\n   *\n   * @default - The object key name will not be verified\n   */\n  readonly keyPrefixEquals?: string;\n}\n\nexport class ReplaceKey {\n  /**\n   * The specific object key to use in the redirect request\n   */\n  public static with(keyReplacement: string) {\n    return new this(keyReplacement);\n  }\n\n  /**\n   * The object key prefix to use in the redirect request\n   */\n  public static prefixWith(keyReplacement: string) {\n    return new this(undefined, keyReplacement);\n  }\n\n  private constructor(public readonly withKey?: string, public readonly prefixWithKey?: string) {\n  }\n}\n\n/**\n * Rule that define when a redirect is applied and the redirect behavior.\n *\n * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html\n */\nexport interface RoutingRule {\n  /**\n   * The host name to use in the redirect request\n   *\n   * @default - The host name used in the original request.\n   */\n  readonly hostName?: string;\n\n  /**\n   * The HTTP redirect code to use on the response\n   *\n   * @default \"301\" - Moved Permanently\n   */\n  readonly httpRedirectCode?: string;\n\n  /**\n   * Protocol to use when redirecting requests\n   *\n   * @default - The protocol used in the original request.\n   */\n  readonly protocol?: RedirectProtocol;\n\n  /**\n   * Specifies the object key prefix to use in the redirect request\n   *\n   * @default - The key will not be replaced\n   */\n  readonly replaceKey?: ReplaceKey;\n\n  /**\n   * Specifies a condition that must be met for the specified redirect to apply.\n   *\n   * @default - No condition\n   */\n  readonly condition?: RoutingRuleCondition;\n}\n\n/**\n * Options for creating Virtual-Hosted style URL.\n */\nexport interface VirtualHostedStyleUrlOptions {\n  /**\n   * Specifies the URL includes the region.\n   *\n   * @default - true\n   */\n  readonly regional?: boolean;\n}\n\n/**\n * Options for creating a Transfer Acceleration URL.\n */\nexport interface TransferAccelerationUrlOptions {\n  /**\n   * Dual-stack support to connect to the bucket over IPv6.\n   *\n   * @default - false\n   */\n  readonly dualStack?: boolean;\n}\n\nfunction mapOrUndefined<T, U>(list: T[] | undefined, callback: (element: T) => U): U[] | undefined {\n  if (!list || list.length === 0) {\n    return undefined;\n  }\n\n  return list.map(callback);\n}\n"],
  "mappings": "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",
  "names": []
}
