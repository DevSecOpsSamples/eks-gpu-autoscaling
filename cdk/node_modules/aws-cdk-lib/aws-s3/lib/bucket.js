"use strict";var _a,_b,_c,_d;Object.defineProperty(exports,"__esModule",{value:!0}),exports.ReplaceKey=exports.BucketAccessControl=exports.EventType=exports.BucketEncryption=exports.Bucket=exports.ObjectOwnership=exports.InventoryObjectVersion=exports.InventoryFrequency=exports.InventoryFormat=exports.RedirectProtocol=exports.HttpMethods=exports.BlockPublicAccess=exports.BucketBase=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),os_1=require("os"),path=require("path"),events=require("../../aws-events"),iam=require("../../aws-iam"),kms=require("../../aws-kms"),core_1=require("../../core"),cxapi=require("../../cx-api"),bucket_policy_1=require("./bucket-policy"),notifications_resource_1=require("./notifications-resource"),perms=require("./perms"),s3_generated_1=require("./s3.generated"),util_1=require("./util"),AUTO_DELETE_OBJECTS_RESOURCE_TYPE="Custom::S3AutoDeleteObjects",AUTO_DELETE_OBJECTS_TAG="aws-cdk:auto-delete-objects";class BucketBase extends core_1.Resource{constructor(scope,id,props={}){super(scope,id,props);jsiiDeprecationWarnings.aws_cdk_lib_ResourceProps(props),this.node.addValidation({validate:()=>{var _e,_f;return(_f=(_e=this.policy)===null||_e===void 0?void 0:_e.document.validateForResourcePolicy())!==null&&_f!==void 0?_f:[]}})}onCloudTrailEvent(id,options={}){var _e,_f;jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_OnCloudTrailBucketEventOptions(options);const rule=new events.Rule(this,id,options);return rule.addTarget(options.target),rule.addEventPattern({source:["aws.s3"],detailType:["AWS API Call via CloudTrail"],detail:{resources:{ARN:(_f=(_e=options.paths)===null||_e===void 0?void 0:_e.map(p=>this.arnForObjects(p)))!==null&&_f!==void 0?_f:[this.bucketArn]}}}),rule}onCloudTrailPutObject(id,options={}){jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_OnCloudTrailBucketEventOptions(options);const rule=this.onCloudTrailEvent(id,options);return rule.addEventPattern({detail:{eventName:["PutObject"]}}),rule}onCloudTrailWriteObject(id,options={}){jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_OnCloudTrailBucketEventOptions(options);const rule=this.onCloudTrailEvent(id,options);return rule.addEventPattern({detail:{eventName:["CompleteMultipartUpload","CopyObject","PutObject"],requestParameters:{bucketName:[this.bucketName],key:options.paths}}}),rule}addToResourcePolicy(permission){return jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_PolicyStatement(permission),!this.policy&&this.autoCreatePolicy&&(this.policy=new bucket_policy_1.BucketPolicy(this,"Policy",{bucket:this})),this.policy?(this.policy.document.addStatements(permission),{statementAdded:!0,policyDependable:this.policy}):{statementAdded:!1}}urlForObject(key){const stack=core_1.Stack.of(this),prefix=`https://s3.${this.env.region}.${stack.urlSuffix}/`;return typeof key!="string"?this.urlJoin(prefix,this.bucketName):this.urlJoin(prefix,this.bucketName,key)}transferAccelerationUrlForObject(key,options){jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_TransferAccelerationUrlOptions(options);const dualStack=options!=null&&options.dualStack?".dualstack":"",prefix=`https://${this.bucketName}.s3-accelerate${dualStack}.amazonaws.com/`;return typeof key!="string"?this.urlJoin(prefix):this.urlJoin(prefix,key)}virtualHostedUrlForObject(key,options){var _e;jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_VirtualHostedStyleUrlOptions(options);const prefix=`https://${!((_e=options==null?void 0:options.regional)!==null&&_e!==void 0)||_e?this.bucketRegionalDomainName:this.bucketDomainName}`;return typeof key!="string"?prefix:this.urlJoin(prefix,key)}s3UrlForObject(key){const prefix="s3://";return typeof key!="string"?this.urlJoin(prefix,this.bucketName):this.urlJoin(prefix,this.bucketName,key)}arnForObjects(keyPattern){return`${this.bucketArn}/${keyPattern}`}grantRead(identity,objectsKeyPattern="*"){return jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IGrantable(identity),this.grant(identity,perms.BUCKET_READ_ACTIONS,perms.KEY_READ_ACTIONS,this.bucketArn,this.arnForObjects(objectsKeyPattern))}grantWrite(identity,objectsKeyPattern="*"){return jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IGrantable(identity),this.grant(identity,this.writeActions,perms.KEY_WRITE_ACTIONS,this.bucketArn,this.arnForObjects(objectsKeyPattern))}grantPut(identity,objectsKeyPattern="*"){return jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IGrantable(identity),this.grant(identity,this.putActions,perms.KEY_WRITE_ACTIONS,this.arnForObjects(objectsKeyPattern))}grantPutAcl(identity,objectsKeyPattern="*"){return jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IGrantable(identity),this.grant(identity,perms.BUCKET_PUT_ACL_ACTIONS,[],this.arnForObjects(objectsKeyPattern))}grantDelete(identity,objectsKeyPattern="*"){return jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IGrantable(identity),this.grant(identity,perms.BUCKET_DELETE_ACTIONS,[],this.arnForObjects(objectsKeyPattern))}grantReadWrite(identity,objectsKeyPattern="*"){jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_IGrantable(identity);const bucketActions=perms.BUCKET_READ_ACTIONS.concat(this.writeActions),keyActions=[...new Set([...perms.KEY_READ_ACTIONS,...perms.KEY_WRITE_ACTIONS])];return this.grant(identity,bucketActions,keyActions,this.bucketArn,this.arnForObjects(objectsKeyPattern))}grantPublicAccess(keyPrefix="*",...allowedActions){if(this.disallowPublicAccess)throw new Error("Cannot grant public access when 'blockPublicPolicy' is enabled");return allowedActions=allowedActions.length>0?allowedActions:["s3:GetObject"],iam.Grant.addToPrincipalOrResource({actions:allowedActions,resourceArns:[this.arnForObjects(keyPrefix)],grantee:new iam.AnyPrincipal,resource:this})}addEventNotification(event,dest,...filters){jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_EventType(event),jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_IBucketNotificationDestination(dest),jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_NotificationKeyFilter(filters),this.withNotifications(notifications=>notifications.addNotification(event,dest,...filters))}withNotifications(cb){this.notifications||(this.notifications=new notifications_resource_1.BucketNotifications(this,"Notifications",{bucket:this,handlerRole:this.notificationsHandlerRole})),cb(this.notifications)}addObjectCreatedNotification(dest,...filters){return jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_IBucketNotificationDestination(dest),jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_NotificationKeyFilter(filters),this.addEventNotification(EventType.OBJECT_CREATED,dest,...filters)}addObjectRemovedNotification(dest,...filters){return jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_IBucketNotificationDestination(dest),jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_NotificationKeyFilter(filters),this.addEventNotification(EventType.OBJECT_REMOVED,dest,...filters)}enableEventBridgeNotification(){this.withNotifications(notifications=>notifications.enableEventBridgeNotification())}get writeActions(){return[...perms.BUCKET_DELETE_ACTIONS,...this.putActions]}get putActions(){return core_1.FeatureFlags.of(this).isEnabled(cxapi.S3_GRANT_WRITE_WITHOUT_ACL)?perms.BUCKET_PUT_ACTIONS:perms.LEGACY_BUCKET_PUT_ACTIONS}urlJoin(...components){return components.reduce((result,component)=>(result.endsWith("/")&&(result=result.slice(0,-1)),component.startsWith("/")&&(component=component.slice(1)),`${result}/${component}`))}grant(grantee,bucketActions,keyActions,resourceArn,...otherResourceArns){const resources=[resourceArn,...otherResourceArns],ret=iam.Grant.addToPrincipalOrResource({grantee,actions:bucketActions,resourceArns:resources,resource:this});return this.encryptionKey&&keyActions&&keyActions.length!==0&&this.encryptionKey.grant(grantee,...keyActions),ret}}exports.BucketBase=BucketBase,_a=JSII_RTTI_SYMBOL_1,BucketBase[_a]={fqn:"aws-cdk-lib.aws_s3.BucketBase",version:"2.20.0"};class BlockPublicAccess{constructor(options){jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_BlockPublicAccessOptions(options),this.blockPublicAcls=options.blockPublicAcls,this.blockPublicPolicy=options.blockPublicPolicy,this.ignorePublicAcls=options.ignorePublicAcls,this.restrictPublicBuckets=options.restrictPublicBuckets}}exports.BlockPublicAccess=BlockPublicAccess,_b=JSII_RTTI_SYMBOL_1,BlockPublicAccess[_b]={fqn:"aws-cdk-lib.aws_s3.BlockPublicAccess",version:"2.20.0"},BlockPublicAccess.BLOCK_ALL=new BlockPublicAccess({blockPublicAcls:!0,blockPublicPolicy:!0,ignorePublicAcls:!0,restrictPublicBuckets:!0}),BlockPublicAccess.BLOCK_ACLS=new BlockPublicAccess({blockPublicAcls:!0,ignorePublicAcls:!0});var HttpMethods;(function(HttpMethods2){HttpMethods2.GET="GET",HttpMethods2.PUT="PUT",HttpMethods2.HEAD="HEAD",HttpMethods2.POST="POST",HttpMethods2.DELETE="DELETE"})(HttpMethods=exports.HttpMethods||(exports.HttpMethods={}));var RedirectProtocol;(function(RedirectProtocol2){RedirectProtocol2.HTTP="http",RedirectProtocol2.HTTPS="https"})(RedirectProtocol=exports.RedirectProtocol||(exports.RedirectProtocol={}));var InventoryFormat;(function(InventoryFormat2){InventoryFormat2.CSV="CSV",InventoryFormat2.PARQUET="Parquet",InventoryFormat2.ORC="ORC"})(InventoryFormat=exports.InventoryFormat||(exports.InventoryFormat={}));var InventoryFrequency;(function(InventoryFrequency2){InventoryFrequency2.DAILY="Daily",InventoryFrequency2.WEEKLY="Weekly"})(InventoryFrequency=exports.InventoryFrequency||(exports.InventoryFrequency={}));var InventoryObjectVersion;(function(InventoryObjectVersion2){InventoryObjectVersion2.ALL="All",InventoryObjectVersion2.CURRENT="Current"})(InventoryObjectVersion=exports.InventoryObjectVersion||(exports.InventoryObjectVersion={}));var ObjectOwnership;(function(ObjectOwnership2){ObjectOwnership2.BUCKET_OWNER_ENFORCED="BucketOwnerEnforced",ObjectOwnership2.BUCKET_OWNER_PREFERRED="BucketOwnerPreferred",ObjectOwnership2.OBJECT_WRITER="ObjectWriter"})(ObjectOwnership=exports.ObjectOwnership||(exports.ObjectOwnership={}));class Bucket extends BucketBase{constructor(scope,id,props={}){var _e;super(scope,id,{physicalName:props.bucketName});this.autoCreatePolicy=!0,this.lifecycleRules=[],this.metrics=[],this.cors=[],this.inventories=[],jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_BucketProps(props),this.notificationsHandlerRole=props.notificationsHandlerRole;const{bucketEncryption,encryptionKey}=this.parseEncryption(props);Bucket.validateBucketName(this.physicalName);const websiteConfiguration=this.renderWebsiteConfiguration(props);this.isWebsite=websiteConfiguration!==void 0;const resource=new s3_generated_1.CfnBucket(this,"Resource",{bucketName:this.physicalName,bucketEncryption,versioningConfiguration:props.versioned?{status:"Enabled"}:void 0,lifecycleConfiguration:core_1.Lazy.any({produce:()=>this.parseLifecycleConfiguration()}),websiteConfiguration,publicAccessBlockConfiguration:props.blockPublicAccess,metricsConfigurations:core_1.Lazy.any({produce:()=>this.parseMetricConfiguration()}),corsConfiguration:core_1.Lazy.any({produce:()=>this.parseCorsConfiguration()}),accessControl:core_1.Lazy.string({produce:()=>this.accessControl}),loggingConfiguration:this.parseServerAccessLogs(props),inventoryConfigurations:core_1.Lazy.any({produce:()=>this.parseInventoryConfiguration()}),ownershipControls:this.parseOwnershipControls(props),accelerateConfiguration:props.transferAcceleration?{accelerationStatus:"Enabled"}:void 0,intelligentTieringConfigurations:this.parseTieringConfig(props)});this._resource=resource,resource.applyRemovalPolicy(props.removalPolicy),this.versioned=props.versioned,this.encryptionKey=encryptionKey,this.eventBridgeEnabled=props.eventBridgeEnabled,this.bucketName=this.getResourceNameAttribute(resource.ref),this.bucketArn=this.getResourceArnAttribute(resource.attrArn,{region:"",account:"",service:"s3",resource:this.physicalName}),this.bucketDomainName=resource.attrDomainName,this.bucketWebsiteUrl=resource.attrWebsiteUrl,this.bucketWebsiteDomainName=core_1.Fn.select(2,core_1.Fn.split("/",this.bucketWebsiteUrl)),this.bucketDualStackDomainName=resource.attrDualStackDomainName,this.bucketRegionalDomainName=resource.attrRegionalDomainName,this.disallowPublicAccess=props.blockPublicAccess&&props.blockPublicAccess.blockPublicPolicy,this.accessControl=props.accessControl,props.enforceSSL&&this.enforceSSLStatement(),props.serverAccessLogsBucket instanceof Bucket&&props.serverAccessLogsBucket.allowLogDelivery();for(const inventory of(_e=props.inventories)!==null&&_e!==void 0?_e:[])this.addInventory(inventory);if((props.metrics||[]).forEach(this.addMetric.bind(this)),(props.cors||[]).forEach(this.addCorsRule.bind(this)),(props.lifecycleRules||[]).forEach(this.addLifecycleRule.bind(this)),props.publicReadAccess&&this.grantPublicAccess(),props.autoDeleteObjects){if(props.removalPolicy!==core_1.RemovalPolicy.DESTROY)throw new Error("Cannot use 'autoDeleteObjects' property on a bucket without setting removal policy to 'DESTROY'.");this.enableAutoDeleteObjects()}this.eventBridgeEnabled&&this.enableEventBridgeNotification()}static fromBucketArn(scope,id,bucketArn){return Bucket.fromBucketAttributes(scope,id,{bucketArn})}static fromBucketName(scope,id,bucketName){return Bucket.fromBucketAttributes(scope,id,{bucketName})}static fromBucketAttributes(scope,id,attrs){var _e;jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_BucketAttributes(attrs);const stack=core_1.Stack.of(scope),region=(_e=attrs.region)!==null&&_e!==void 0?_e:stack.region,urlSuffix=stack.urlSuffix,bucketName=util_1.parseBucketName(scope,attrs);if(!bucketName)throw new Error("Bucket name is required");Bucket.validateBucketName(bucketName);const newUrlFormat=attrs.bucketWebsiteNewUrlFormat===void 0?!1:attrs.bucketWebsiteNewUrlFormat,websiteDomain=newUrlFormat?`${bucketName}.s3-website.${region}.${urlSuffix}`:`${bucketName}.s3-website-${region}.${urlSuffix}`;class Import extends BucketBase{constructor(){var _e2;super(...arguments);this.bucketName=bucketName,this.bucketArn=util_1.parseBucketArn(scope,attrs),this.bucketDomainName=attrs.bucketDomainName||`${bucketName}.s3.${urlSuffix}`,this.bucketWebsiteUrl=attrs.bucketWebsiteUrl||`http://${websiteDomain}`,this.bucketWebsiteDomainName=attrs.bucketWebsiteUrl?core_1.Fn.select(2,core_1.Fn.split("/",attrs.bucketWebsiteUrl)):websiteDomain,this.bucketRegionalDomainName=attrs.bucketRegionalDomainName||`${bucketName}.s3.${region}.${urlSuffix}`,this.bucketDualStackDomainName=attrs.bucketDualStackDomainName||`${bucketName}.s3.dualstack.${region}.${urlSuffix}`,this.bucketWebsiteNewUrlFormat=newUrlFormat,this.encryptionKey=attrs.encryptionKey,this.isWebsite=(_e2=attrs.isWebsite)!==null&&_e2!==void 0?_e2:!1,this.policy=void 0,this.autoCreatePolicy=!1,this.disallowPublicAccess=!1,this.notificationsHandlerRole=attrs.notificationsHandlerRole}export(){return attrs}}return new Import(scope,id,{account:attrs.account,region:attrs.region})}static validateBucketName(physicalName){const bucketName=physicalName;if(!bucketName||core_1.Token.isUnresolved(bucketName))return;const errors=[];(bucketName.length<3||bucketName.length>63)&&errors.push("Bucket name must be at least 3 and no more than 63 characters");const charsetMatch=bucketName.match(/[^a-z0-9.-]/);charsetMatch&&errors.push(`Bucket name must only contain lowercase characters and the symbols, period (.) and dash (-) (offset: ${charsetMatch.index})`),/[a-z0-9]/.test(bucketName.charAt(0))||errors.push("Bucket name must start and end with a lowercase character or number (offset: 0)"),/[a-z0-9]/.test(bucketName.charAt(bucketName.length-1))||errors.push(`Bucket name must start and end with a lowercase character or number (offset: ${bucketName.length-1})`);const consecSymbolMatch=bucketName.match(/\.-|-\.|\.\./);if(consecSymbolMatch&&errors.push(`Bucket name must not have dash next to period, or period next to dash, or consecutive periods (offset: ${consecSymbolMatch.index})`),/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(bucketName)&&errors.push("Bucket name must not resemble an IP address"),errors.length>0)throw new Error(`Invalid S3 bucket name (value: ${bucketName})${os_1.EOL}${errors.join(os_1.EOL)}`)}addLifecycleRule(rule){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_LifecycleRule(rule),(rule.noncurrentVersionExpiration!==void 0||rule.noncurrentVersionTransitions&&rule.noncurrentVersionTransitions.length>0)&&!this.versioned)throw new Error("Cannot use 'noncurrent' rules on a nonversioned bucket");this.lifecycleRules.push(rule)}addMetric(metric){jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_BucketMetrics(metric),this.metrics.push(metric)}addCorsRule(rule){jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_CorsRule(rule),this.cors.push(rule)}addInventory(inventory){jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_Inventory(inventory),this.inventories.push(inventory)}enforceSSLStatement(){const statement=new iam.PolicyStatement({actions:["s3:*"],conditions:{Bool:{"aws:SecureTransport":"false"}},effect:iam.Effect.DENY,resources:[this.bucketArn,this.arnForObjects("*")],principals:[new iam.AnyPrincipal]});this.addToResourcePolicy(statement)}parseEncryption(props){let encryptionType=props.encryption;if(encryptionType===void 0&&(encryptionType=props.encryptionKey?BucketEncryption.KMS:BucketEncryption.UNENCRYPTED),encryptionType!==BucketEncryption.KMS&&props.encryptionKey)throw new Error(`encryptionKey is specified, so 'encryption' must be set to KMS (value: ${encryptionType})`);if(props.bucketKeyEnabled&&encryptionType!==BucketEncryption.KMS)throw new Error(`bucketKeyEnabled is specified, so 'encryption' must be set to KMS (value: ${encryptionType})`);if(encryptionType===BucketEncryption.UNENCRYPTED)return{bucketEncryption:void 0,encryptionKey:void 0};if(encryptionType===BucketEncryption.KMS){const encryptionKey=props.encryptionKey||new kms.Key(this,"Key",{description:`Created by ${this.node.path}`}),bucketEncryption={serverSideEncryptionConfiguration:[{bucketKeyEnabled:props.bucketKeyEnabled,serverSideEncryptionByDefault:{sseAlgorithm:"aws:kms",kmsMasterKeyId:encryptionKey.keyArn}}]};return{encryptionKey,bucketEncryption}}if(encryptionType===BucketEncryption.S3_MANAGED)return{bucketEncryption:{serverSideEncryptionConfiguration:[{serverSideEncryptionByDefault:{sseAlgorithm:"AES256"}}]}};if(encryptionType===BucketEncryption.KMS_MANAGED)return{bucketEncryption:{serverSideEncryptionConfiguration:[{serverSideEncryptionByDefault:{sseAlgorithm:"aws:kms"}}]}};throw new Error(`Unexpected 'encryptionType': ${encryptionType}`)}parseLifecycleConfiguration(){if(!this.lifecycleRules||this.lifecycleRules.length===0)return;const self=this;return{rules:this.lifecycleRules.map(parseLifecycleRule)};function parseLifecycleRule(rule){var _e,_f;const enabled=(_e=rule.enabled)!==null&&_e!==void 0?_e:!0;return{abortIncompleteMultipartUpload:rule.abortIncompleteMultipartUploadAfter!==void 0?{daysAfterInitiation:rule.abortIncompleteMultipartUploadAfter.toDays()}:void 0,expirationDate:rule.expirationDate,expirationInDays:(_f=rule.expiration)===null||_f===void 0?void 0:_f.toDays(),id:rule.id,noncurrentVersionExpirationInDays:rule.noncurrentVersionExpiration&&rule.noncurrentVersionExpiration.toDays(),noncurrentVersionTransitions:mapOrUndefined(rule.noncurrentVersionTransitions,t=>({storageClass:t.storageClass.value,transitionInDays:t.transitionAfter.toDays(),newerNoncurrentVersions:t.noncurrentVersionsToRetain})),prefix:rule.prefix,status:enabled?"Enabled":"Disabled",transitions:mapOrUndefined(rule.transitions,t=>({storageClass:t.storageClass.value,transitionDate:t.transitionDate,transitionInDays:t.transitionAfter&&t.transitionAfter.toDays()})),expiredObjectDeleteMarker:rule.expiredObjectDeleteMarker,tagFilters:self.parseTagFilters(rule.tagFilters)}}}parseServerAccessLogs(props){var _e;if(!(!props.serverAccessLogsBucket&&!props.serverAccessLogsPrefix))return{destinationBucketName:(_e=props.serverAccessLogsBucket)===null||_e===void 0?void 0:_e.bucketName,logFilePrefix:props.serverAccessLogsPrefix}}parseMetricConfiguration(){if(!this.metrics||this.metrics.length===0)return;const self=this;return this.metrics.map(parseMetric);function parseMetric(metric){return{id:metric.id,prefix:metric.prefix,tagFilters:self.parseTagFilters(metric.tagFilters)}}}parseCorsConfiguration(){if(!this.cors||this.cors.length===0)return;return{corsRules:this.cors.map(parseCors)};function parseCors(rule){return{id:rule.id,maxAge:rule.maxAge,allowedHeaders:rule.allowedHeaders,allowedMethods:rule.allowedMethods,allowedOrigins:rule.allowedOrigins,exposedHeaders:rule.exposedHeaders}}}parseTagFilters(tagFilters){if(!(!tagFilters||tagFilters.length===0))return Object.keys(tagFilters).map(tag=>({key:tag,value:tagFilters[tag]}))}parseOwnershipControls({objectOwnership}){if(!!objectOwnership)return{rules:[{objectOwnership}]}}parseTieringConfig({intelligentTieringConfigurations}){if(!!intelligentTieringConfigurations)return intelligentTieringConfigurations.map(config=>{const tierings=[];return config.archiveAccessTierTime&&tierings.push({accessTier:"ARCHIVE_ACCESS",days:config.archiveAccessTierTime.toDays({integral:!0})}),config.deepArchiveAccessTierTime&&tierings.push({accessTier:"DEEP_ARCHIVE_ACCESS",days:config.deepArchiveAccessTierTime.toDays({integral:!0})}),{id:config.name,prefix:config.prefix,status:"Enabled",tagFilters:config.tags,tierings}})}renderWebsiteConfiguration(props){if(!props.websiteErrorDocument&&!props.websiteIndexDocument&&!props.websiteRedirect&&!props.websiteRoutingRules)return;if(props.websiteErrorDocument&&!props.websiteIndexDocument)throw new Error('"websiteIndexDocument" is required if "websiteErrorDocument" is set');if(props.websiteRedirect&&(props.websiteErrorDocument||props.websiteIndexDocument||props.websiteRoutingRules))throw new Error('"websiteIndexDocument", "websiteErrorDocument" and, "websiteRoutingRules" cannot be set if "websiteRedirect" is used');const routingRules=props.websiteRoutingRules?props.websiteRoutingRules.map(rule=>{if(rule.condition&&!rule.condition.httpErrorCodeReturnedEquals&&!rule.condition.keyPrefixEquals)throw new Error("The condition property cannot be an empty object");return{redirectRule:{hostName:rule.hostName,httpRedirectCode:rule.httpRedirectCode,protocol:rule.protocol,replaceKeyWith:rule.replaceKey&&rule.replaceKey.withKey,replaceKeyPrefixWith:rule.replaceKey&&rule.replaceKey.prefixWithKey},routingRuleCondition:rule.condition}}):void 0;return{indexDocument:props.websiteIndexDocument,errorDocument:props.websiteErrorDocument,redirectAllRequestsTo:props.websiteRedirect,routingRules}}allowLogDelivery(){if(this.accessControl&&this.accessControl!==BucketAccessControl.LOG_DELIVERY_WRITE)throw new Error("Cannot enable log delivery to this bucket because the bucket's ACL has been set and can't be changed");this.accessControl=BucketAccessControl.LOG_DELIVERY_WRITE}parseInventoryConfiguration(){if(!(!this.inventories||this.inventories.length===0))return this.inventories.map((inventory,index)=>{var _e,_f,_g,_h,_j,_k;const format=(_e=inventory.format)!==null&&_e!==void 0?_e:InventoryFormat.CSV,frequency=(_f=inventory.frequency)!==null&&_f!==void 0?_f:InventoryFrequency.WEEKLY,id=(_g=inventory.inventoryId)!==null&&_g!==void 0?_g:`${this.node.id}Inventory${index}`;return inventory.destination.bucket instanceof Bucket&&inventory.destination.bucket.addToResourcePolicy(new iam.PolicyStatement({effect:iam.Effect.ALLOW,actions:["s3:PutObject"],resources:[inventory.destination.bucket.bucketArn,inventory.destination.bucket.arnForObjects(`${(_h=inventory.destination.prefix)!==null&&_h!==void 0?_h:""}*`)],principals:[new iam.ServicePrincipal("s3.amazonaws.com")],conditions:{ArnLike:{"aws:SourceArn":this.bucketArn}}})),{id,destination:{bucketArn:inventory.destination.bucket.bucketArn,bucketAccountId:inventory.destination.bucketOwner,prefix:inventory.destination.prefix,format},enabled:(_j=inventory.enabled)!==null&&_j!==void 0?_j:!0,includedObjectVersions:(_k=inventory.includeObjectVersions)!==null&&_k!==void 0?_k:InventoryObjectVersion.ALL,scheduleFrequency:frequency,optionalFields:inventory.optionalFields,prefix:inventory.objectsPrefix}})}enableAutoDeleteObjects(){const provider=core_1.CustomResourceProvider.getOrCreateProvider(this,AUTO_DELETE_OBJECTS_RESOURCE_TYPE,{codeDirectory:path.join(__dirname,"auto-delete-objects-handler"),runtime:core_1.CustomResourceProviderRuntime.NODEJS_12_X,description:`Lambda function for auto-deleting objects in ${this.bucketName} S3 bucket.`});this.addToResourcePolicy(new iam.PolicyStatement({actions:[...perms.BUCKET_READ_METADATA_ACTIONS,...perms.BUCKET_DELETE_ACTIONS],resources:[this.bucketArn,this.arnForObjects("*")],principals:[new iam.ArnPrincipal(provider.roleArn)]}));const customResource=new core_1.CustomResource(this,"AutoDeleteObjectsCustomResource",{resourceType:AUTO_DELETE_OBJECTS_RESOURCE_TYPE,serviceToken:provider.serviceToken,properties:{BucketName:this.bucketName}});this.policy&&customResource.node.addDependency(this.policy),core_1.Tags.of(this._resource).add(AUTO_DELETE_OBJECTS_TAG,"true")}}exports.Bucket=Bucket,_c=JSII_RTTI_SYMBOL_1,Bucket[_c]={fqn:"aws-cdk-lib.aws_s3.Bucket",version:"2.20.0"};var BucketEncryption;(function(BucketEncryption2){BucketEncryption2.UNENCRYPTED="NONE",BucketEncryption2.KMS_MANAGED="MANAGED",BucketEncryption2.S3_MANAGED="S3MANAGED",BucketEncryption2.KMS="KMS"})(BucketEncryption=exports.BucketEncryption||(exports.BucketEncryption={}));var EventType;(function(EventType2){EventType2.OBJECT_CREATED="s3:ObjectCreated:*",EventType2.OBJECT_CREATED_PUT="s3:ObjectCreated:Put",EventType2.OBJECT_CREATED_POST="s3:ObjectCreated:Post",EventType2.OBJECT_CREATED_COPY="s3:ObjectCreated:Copy",EventType2.OBJECT_CREATED_COMPLETE_MULTIPART_UPLOAD="s3:ObjectCreated:CompleteMultipartUpload",EventType2.OBJECT_REMOVED="s3:ObjectRemoved:*",EventType2.OBJECT_REMOVED_DELETE="s3:ObjectRemoved:Delete",EventType2.OBJECT_REMOVED_DELETE_MARKER_CREATED="s3:ObjectRemoved:DeleteMarkerCreated",EventType2.OBJECT_RESTORE_POST="s3:ObjectRestore:Post",EventType2.OBJECT_RESTORE_COMPLETED="s3:ObjectRestore:Completed",EventType2.OBJECT_RESTORE_DELETE="s3:ObjectRestore:Delete",EventType2.REDUCED_REDUNDANCY_LOST_OBJECT="s3:ReducedRedundancyLostObject",EventType2.REPLICATION_OPERATION_FAILED_REPLICATION="s3:Replication:OperationFailedReplication",EventType2.REPLICATION_OPERATION_MISSED_THRESHOLD="s3:Replication:OperationMissedThreshold",EventType2.REPLICATION_OPERATION_REPLICATED_AFTER_THRESHOLD="s3:Replication:OperationReplicatedAfterThreshold",EventType2.REPLICATION_OPERATION_NOT_TRACKED="s3:Replication:OperationNotTracked",EventType2.LIFECYCLE_EXPIRATION="s3:LifecycleExpiration:*",EventType2.LIFECYCLE_EXPIRATION_DELETE="s3:LifecycleExpiration:Delete",EventType2.LIFECYCLE_EXPIRATION_DELETE_MARKER_CREATED="s3:LifecycleExpiration:DeleteMarkerCreated",EventType2.LIFECYCLE_TRANSITION="s3:LifecycleTransition",EventType2.INTELLIGENT_TIERING="s3:IntelligentTiering",EventType2.OBJECT_TAGGING="s3:ObjectTagging:*",EventType2.OBJECT_TAGGING_PUT="s3:ObjectTagging:Put",EventType2.OBJECT_TAGGING_DELETE="s3:ObjectTagging:Delete",EventType2.OBJECT_ACL_PUT="s3:ObjectAcl:Put"})(EventType=exports.EventType||(exports.EventType={}));var BucketAccessControl;(function(BucketAccessControl2){BucketAccessControl2.PRIVATE="Private",BucketAccessControl2.PUBLIC_READ="PublicRead",BucketAccessControl2.PUBLIC_READ_WRITE="PublicReadWrite",BucketAccessControl2.AUTHENTICATED_READ="AuthenticatedRead",BucketAccessControl2.LOG_DELIVERY_WRITE="LogDeliveryWrite",BucketAccessControl2.BUCKET_OWNER_READ="BucketOwnerRead",BucketAccessControl2.BUCKET_OWNER_FULL_CONTROL="BucketOwnerFullControl",BucketAccessControl2.AWS_EXEC_READ="AwsExecRead"})(BucketAccessControl=exports.BucketAccessControl||(exports.BucketAccessControl={}));class ReplaceKey{constructor(withKey,prefixWithKey){this.withKey=withKey,this.prefixWithKey=prefixWithKey}static with(keyReplacement){return new this(keyReplacement)}static prefixWith(keyReplacement){return new this(void 0,keyReplacement)}}exports.ReplaceKey=ReplaceKey,_d=JSII_RTTI_SYMBOL_1,ReplaceKey[_d]={fqn:"aws-cdk-lib.aws_s3.ReplaceKey",version:"2.20.0"};function mapOrUndefined(list,callback){if(!(!list||list.length===0))return list.map(callback)}
//# sourceMappingURL=bucket.js.map
