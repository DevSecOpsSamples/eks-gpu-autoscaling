{
  "version": 3,
  "sources": ["custom-resource.ts"],
  "sourcesContent": ["import * as lambda from '../../aws-lambda';\nimport * as sns from '../../aws-sns';\nimport * as core from '../../core';\nimport { Construct } from 'constructs';\n\n/**\n * Collection of arbitrary properties\n *\n * @deprecated this type has been deprecated in favor of using a key-value type directly\n */\nexport type Properties = {[key: string]: any};\n\n/**\n * Configuration options for custom resource providers.\n *\n * @deprecated used in {@link ICustomResourceProvider} which is now deprecated\n */\nexport interface CustomResourceProviderConfig {\n  /**\n   * The ARN of the SNS topic or the AWS Lambda function which implements this\n   * provider.\n   */\n  readonly serviceToken: string;\n}\n\n/**\n * Represents a provider for an AWS CloudFormation custom resources.\n * @deprecated use `core.ICustomResourceProvider`\n */\nexport interface ICustomResourceProvider {\n  /**\n   * Called when this provider is used by a `CustomResource`.\n   * @param scope The resource that uses this provider.\n   * @returns provider configuration\n   */\n  bind(scope: Construct): CustomResourceProviderConfig;\n}\n\n/**\n * Represents a provider for an AWS CloudFormation custom resources.\n *\n * @deprecated use core.CustomResource instead\n */\nexport class CustomResourceProvider implements ICustomResourceProvider {\n  /**\n   * The Lambda provider that implements this custom resource.\n   *\n   * We recommend using a lambda.SingletonFunction for this.\n   */\n  public static fromLambda(handler: lambda.IFunction): CustomResourceProvider {\n    return new CustomResourceProvider(handler.functionArn);\n  }\n\n  /**\n   * The SNS Topic for the provider that implements this custom resource.\n   */\n  public static fromTopic(topic: sns.ITopic): CustomResourceProvider {\n    return new CustomResourceProvider(topic.topicArn);\n  }\n\n  /**\n   * Use AWS Lambda as a provider.\n   * @deprecated use `fromLambda`\n   */\n  public static lambda(handler: lambda.IFunction) { return this.fromLambda(handler); }\n\n  /**\n   * Use an SNS topic as the provider.\n   * @deprecated use `fromTopic`\n   */\n  public static topic(topic: sns.ITopic) { return this.fromTopic(topic); }\n\n  /**\n   * @param serviceToken the ServiceToken which contains the ARN for this provider.\n   */\n  private constructor(public readonly serviceToken: string) { }\n\n  public bind(_: Construct): CustomResourceProviderConfig {\n    return { serviceToken: this.serviceToken };\n  }\n}\n\n/**\n * Properties to provide a Lambda-backed custom resource\n * @deprecated use `core.CustomResourceProps`\n */\nexport interface CustomResourceProps {\n  /**\n   * The provider which implements the custom resource.\n   *\n   * You can implement a provider by listening to raw AWS CloudFormation events\n   * through an SNS topic or an AWS Lambda function or use the CDK's custom\n   * [resource provider framework] which makes it easier to implement robust\n   * providers.\n   *\n   * [resource provider framework]: https://docs.aws.amazon.com/cdk/api/latest/docs/custom-resources-readme.html\n   *\n   * ```ts\n   * import * as custom_resources from '@aws-cdk/custom-resources';\n   * import * as lambda from '@aws-cdk/aws-lambda';\n   * import { Stack } from '@aws-cdk/core';\n   * declare const myOnEventLambda: lambda.Function;\n   * declare const myIsCompleteLambda: lambda.Function;\n   * const stack = new Stack();\n   *\n   * const provider = new custom_resources.Provider(stack, 'myProvider', {\n   *   onEventHandler: myOnEventLambda,\n   *   isCompleteHandler: myIsCompleteLambda, // optional\n   * });\n   * ```\n   *\n   * ```ts\n   * import * as cloudformation from '@aws-cdk/aws-cloudformation';\n   * import * as lambda from '@aws-cdk/aws-lambda';\n   * declare const myFunction: lambda.Function;\n   *\n   * // invoke an AWS Lambda function when a lifecycle event occurs:\n   * const provider = cloudformation.CustomResourceProvider.fromLambda(myFunction);\n   * ```\n   *\n   * ```ts\n   * import * as cloudformation from '@aws-cdk/aws-cloudformation';\n   * import * as sns from '@aws-cdk/aws-sns';\n   * declare const myTopic: sns.Topic;\n   *\n   * // publish lifecycle events to an SNS topic:\n   * const provider = cloudformation.CustomResourceProvider.fromTopic(myTopic);\n   * ```\n   */\n  readonly provider: ICustomResourceProvider;\n\n  /**\n   * Properties to pass to the Lambda\n   *\n   * @default - No properties.\n   */\n  readonly properties?: Properties;\n\n  /**\n   * For custom resources, you can specify AWS::CloudFormation::CustomResource\n   * (the default) as the resource type, or you can specify your own resource\n   * type name. For example, you can use \"Custom::MyCustomResourceTypeName\".\n   *\n   * Custom resource type names must begin with \"Custom::\" and can include\n   * alphanumeric characters and the following characters: _@-. You can specify\n   * a custom resource type name up to a maximum length of 60 characters. You\n   * cannot change the type during an update.\n   *\n   * Using your own resource type names helps you quickly differentiate the\n   * types of custom resources in your stack. For example, if you had two custom\n   * resources that conduct two different ping tests, you could name their type\n   * as Custom::PingTester to make them easily identifiable as ping testers\n   * (instead of using AWS::CloudFormation::CustomResource).\n   *\n   * @see\n   * https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html#aws-cfn-resource-type-name\n   *\n   * @default - AWS::CloudFormation::CustomResource\n   */\n  readonly resourceType?: string;\n\n  /**\n   * The policy to apply when this resource is removed from the application.\n   *\n   * @default cdk.RemovalPolicy.Destroy\n   */\n  readonly removalPolicy?: core.RemovalPolicy;\n}\n\n/**\n * Deprecated.\n * @deprecated use `core.CustomResource`\n */\nexport class CustomResource extends core.CustomResource {\n  constructor(scope: Construct, id: string, props: CustomResourceProps) {\n    super(scope, id, {\n      pascalCaseProperties: true,\n      properties: props.properties,\n      removalPolicy: props.removalPolicy,\n      resourceType: props.resourceType,\n      serviceToken: core.Lazy.string({ produce: () => props.provider.bind(this).serviceToken }),\n    });\n  }\n}\n"],
  "mappings": "4LAEA,KAAA,QAAA,YAAA,EAyCA,MAAa,sBAAsB,CAgCjC,YAAoC,aAAoB,CAApB,KAAA,aAAA,mBA1BtB,YAAW,QAAyB,CAChD,MAAO,IAAI,wBAAuB,QAAQ,WAAW,QAMzC,WAAU,MAAiB,CACvC,MAAO,IAAI,wBAAuB,MAAM,QAAQ,QAOpC,QAAO,QAAyB,CAAI,MAAO,MAAK,WAAW,OAAO,CAAE,OAMpE,OAAM,MAAiB,CAAI,MAAO,MAAK,UAAU,KAAK,CAAE,CAO/D,KAAK,EAAY,CACtB,MAAO,CAAE,aAAc,KAAK,YAAY,GAnC5C,QAAA,uBAAA,uJAkIA,MAAa,sBAAuB,MAAK,cAAc,CACrD,YAAY,MAAkB,GAAY,MAA0B,CAClE,MAAM,MAAO,GAAI,CACf,qBAAsB,GACtB,WAAY,MAAM,WAClB,cAAe,MAAM,cACrB,aAAc,MAAM,aACpB,aAAc,KAAK,KAAK,OAAO,CAAE,QAAS,IAAM,MAAM,SAAS,KAAK,IAAI,EAAE,YAAY,CAAE,EACzF,GARL,QAAA,eAAA",
  "names": []
}
