{
  "version": 3,
  "sources": ["nested-stack.ts"],
  "sourcesContent": ["import * as sns from '../../aws-sns';\nimport * as core from '../../core';\nimport { Construct } from 'constructs';\n\n/**\n * Initialization props for the `NestedStack` construct.\n *\n * @deprecated use core.NestedStackProps instead\n */\nexport interface NestedStackProps {\n  /**\n   * The set value pairs that represent the parameters passed to CloudFormation\n   * when this nested stack is created. Each parameter has a name corresponding\n   * to a parameter defined in the embedded template and a value representing\n   * the value that you want to set for the parameter.\n   *\n   * The nested stack construct will automatically synthesize parameters in order\n   * to bind references from the parent stack(s) into the nested stack.\n   *\n   * @default - no user-defined parameters are passed to the nested stack\n   */\n  readonly parameters?: { [key: string]: string };\n\n  /**\n   * The length of time that CloudFormation waits for the nested stack to reach\n   * the CREATE_COMPLETE state.\n   *\n   * When CloudFormation detects that the nested stack has reached the\n   * CREATE_COMPLETE state, it marks the nested stack resource as\n   * CREATE_COMPLETE in the parent stack and resumes creating the parent stack.\n   * If the timeout period expires before the nested stack reaches\n   * CREATE_COMPLETE, CloudFormation marks the nested stack as failed and rolls\n   * back both the nested stack and parent stack.\n   *\n   * @default - no timeout\n   */\n  readonly timeout?: core.Duration;\n\n  /**\n   * The Simple Notification Service (SNS) topics to publish stack related\n   * events.\n   *\n   * @default - notifications are not sent for this stack.\n   */\n  readonly notifications?: sns.ITopic[];\n}\n\n/**\n * A CloudFormation nested stack.\n *\n * When you apply template changes to update a top-level stack, CloudFormation\n * updates the top-level stack and initiates an update to its nested stacks.\n * CloudFormation updates the resources of modified nested stacks, but does not\n * update the resources of unmodified nested stacks.\n *\n * Furthermore, this stack will not be treated as an independent deployment\n * artifact (won't be listed in \"cdk list\" or deployable through \"cdk deploy\"),\n * but rather only synthesized as a template and uploaded as an asset to S3.\n *\n * Cross references of resource attributes between the parent stack and the\n * nested stack will automatically be translated to stack parameters and\n * outputs.\n *\n * @deprecated use core.NestedStack instead\n */\nexport class NestedStack extends core.NestedStack {\n  constructor(scope: Construct, id: string, props: NestedStackProps = { }) {\n    super(scope, id, {\n      parameters: props.parameters,\n      timeout: props.timeout,\n      notificationArns: props.notifications?.map(n => n.topicArn),\n    });\n  }\n}\n"],
  "mappings": "uJACA,KAAA,QAAA,YAAA,EAgEA,MAAa,mBAAoB,MAAK,WAAW,CAC/C,YAAY,MAAkB,GAAY,MAA0B,CAAA,EAAG,QACrE,MAAM,MAAO,GAAI,CACf,WAAY,MAAM,WAClB,QAAS,MAAM,QACf,iBAAgB,IAAE,MAAM,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,IAAI,GAAK,EAAE,QAAQ,EAC3D,GANL,QAAA,YAAA",
  "names": []
}
