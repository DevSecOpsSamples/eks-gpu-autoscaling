{
  "version": 3,
  "sources": ["update-schema.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as semver from 'semver';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as tjs from 'typescript-json-schema';\n\nfunction log(message: string) {\n  // eslint-disable-next-line no-console\n  console.log(message);\n}\n\n/**\n * Where schemas are committed.\n */\nconst SCHEMA_DIR = path.resolve(__dirname, '../schema');\n\nconst SCHEMA_DEFINITIONS: { [schemaName: string]: { rootTypeName: string } } = {\n  'assets': { rootTypeName: 'AssetManifest' },\n  'cloud-assembly': { rootTypeName: 'AssemblyManifest' },\n  'integ': { rootTypeName: 'IntegManifest' },\n};\n\nexport const SCHEMAS = Object.keys(SCHEMA_DEFINITIONS);\n\nexport function update() {\n  for (const s of SCHEMAS) {\n    generateSchema(s);\n  }\n\n  bump();\n}\n\nexport function bump() {\n  const versionFile = path.join(SCHEMA_DIR, 'cloud-assembly.version.json');\n\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  const metadata = require(versionFile);\n\n  const oldVersion = metadata.version;\n  const newVersion = semver.inc(oldVersion, 'major');\n\n  log(`Updating schema version: ${oldVersion} -> ${newVersion}`);\n  fs.writeFileSync(versionFile, JSON.stringify({ version: newVersion }));\n}\n\n/**\n * Generates a schema from typescript types.\n * @returns JSON schema\n * @param schemaName the schema to generate\n * @param shouldBump writes a new version of the schema and bumps the major version\n */\nexport function generateSchema(schemaName: string, saveToFile: boolean = true) {\n  const spec = SCHEMA_DEFINITIONS[schemaName];\n  const out = saveToFile ? path.join(SCHEMA_DIR, `${schemaName}.schema.json`) : '';\n\n  const settings: Partial<tjs.Args> = {\n    required: true,\n    ref: true,\n    topRef: true,\n    noExtraProps: false,\n    out,\n  };\n\n  const compilerOptions = {\n    strictNullChecks: true,\n  };\n\n  const program = tjs.getProgramFromFiles([path.join(__dirname, '../lib/index.d.ts')], compilerOptions);\n  const schema = tjs.generateSchema(program, spec.rootTypeName, settings);\n\n  augmentDescription(schema);\n  addAnyMetadataEntry(schema);\n\n  if (out) {\n    log(`Generating schema to ${out}`);\n    fs.writeFileSync(out, JSON.stringify(schema, null, 4));\n  }\n\n  return schema;\n}\n\n/**\n * Remove 'default' from the schema since its generated\n * from the tsdocs, which are not necessarily actual values,\n * but rather descriptive behavior.\n *\n * To keep this inforamtion in the schema, we append it to the\n * 'description' of the property.\n */\nfunction augmentDescription(schema: any) {\n\n  function _recurse(o: any) {\n    for (const prop in o) {\n\n      if (prop === 'description' && typeof o[prop] === 'string') {\n\n        const description = o[prop];\n        const defaultValue = o.default;\n\n        if (!defaultValue) {\n          // property doesn't have a default value\n          // skip\n          continue;\n        }\n\n        const descriptionWithDefault = `${description} (Default ${defaultValue})`;\n\n        delete o.default;\n        o[prop] = descriptionWithDefault;\n\n      } else if (typeof o[prop] === 'object') {\n        _recurse(o[prop]);\n      }\n    }\n  }\n\n  _recurse(schema);\n\n}\n\n/**\n * Patch the properties of MetadataEntry to allow\n * specifying any free form data. This is needed since source\n * code doesn't allow this in order to enforce stricter jsii\n * compatibility checks.\n */\nfunction addAnyMetadataEntry(schema: any) {\n  schema.definitions.MetadataEntry?.properties.data.anyOf.push({ description: 'Free form data.' });\n}\n"],
  "mappings": "8IAAA,KAAA,IAAA,QAAA,IAAA,EACA,KAAA,QAAA,MAAA,EACA,OAAA,QAAA,QAAA,EAEA,IAAA,QAAA,wBAAA,EAEA,aAAa,QAAe,CAE1B,QAAQ,IAAI,OAAO,CACrB,CAKA,KAAM,YAAa,KAAK,QAAQ,UAAW,WAAW,EAEhD,mBAAyE,CAC7E,OAAU,CAAE,aAAc,eAAe,EACzC,iBAAkB,CAAE,aAAc,kBAAkB,EACpD,MAAS,CAAE,aAAc,eAAe,GAG7B,QAAA,QAAU,OAAO,KAAK,kBAAkB,EAErD,iBAAsB,CACpB,SAAW,KAAK,SAAA,QACd,eAAe,CAAC,EAGlB,KAAI,CACN,CANA,QAAA,OAAA,OAQA,eAAoB,CAClB,KAAM,aAAc,KAAK,KAAK,WAAY,6BAA6B,EAKjE,WAAa,AAFF,QAAQ,WAAW,EAER,QACtB,WAAa,OAAO,IAAI,WAAY,OAAO,EAEjD,IAAI,4BAA4B,iBAAiB,YAAY,EAC7D,GAAG,cAAc,YAAa,KAAK,UAAU,CAAE,QAAS,UAAU,CAAE,CAAC,CACvE,CAXA,QAAA,KAAA,KAmBA,wBAA+B,WAAoB,WAAsB,GAAI,CAC3E,KAAM,MAAO,mBAAmB,YAC1B,IAAM,WAAa,KAAK,KAAK,WAAY,GAAG,wBAAwB,EAAI,GAExE,SAA8B,CAClC,SAAU,GACV,IAAK,GACL,OAAQ,GACR,aAAc,GACd,KAGI,gBAAkB,CACtB,iBAAkB,IAGd,QAAU,IAAI,oBAAoB,CAAC,KAAK,KAAK,UAAW,mBAAmB,CAAC,EAAG,eAAe,EAC9F,OAAS,IAAI,eAAe,QAAS,KAAK,aAAc,QAAQ,EAEtE,0BAAmB,MAAM,EACzB,oBAAoB,MAAM,EAEtB,KACF,KAAI,wBAAwB,KAAK,EACjC,GAAG,cAAc,IAAK,KAAK,UAAU,OAAQ,KAAM,CAAC,CAAC,GAGhD,MACT,CA5BA,QAAA,eAAA,eAsCA,4BAA4B,OAAW,CAErC,kBAAkB,EAAM,CACtB,SAAW,QAAQ,GAEjB,GAAI,OAAS,eAAiB,MAAO,GAAE,OAAU,SAAU,CAEzD,KAAM,aAAc,EAAE,MAChB,aAAe,EAAE,QAEvB,GAAI,CAAC,aAGH,SAGF,KAAM,wBAAyB,GAAG,wBAAwB,gBAE1D,MAAO,GAAE,QACT,EAAE,MAAQ,2BAEL,AAAI,OAAO,GAAE,OAAU,UAC5B,SAAS,EAAE,KAAK,CAGtB,CAEA,SAAS,MAAM,CAEjB,CAQA,6BAA6B,OAAW,QACtC,AAAA,IAAA,OAAO,YAAY,iBAAa,MAAA,KAAA,QAAA,GAAE,WAAW,KAAK,MAAM,KAAK,CAAE,YAAa,iBAAiB,CAAE,CACjG",
  "names": []
}
