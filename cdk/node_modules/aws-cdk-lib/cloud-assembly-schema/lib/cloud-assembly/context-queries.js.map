{
  "version": 3,
  "sources": ["context-queries.ts"],
  "sourcesContent": ["import { Tag } from './metadata-schema';\n\n/**\n * Identifier for the context provider\n */\nexport enum ContextProvider {\n  /**\n   * AMI provider\n   */\n  AMI_PROVIDER = 'ami',\n\n  /**\n   * AZ provider\n   */\n  AVAILABILITY_ZONE_PROVIDER = 'availability-zones',\n\n  /**\n   * Route53 Hosted Zone provider\n   */\n  HOSTED_ZONE_PROVIDER = 'hosted-zone',\n\n  /**\n   * SSM Parameter Provider\n   */\n  SSM_PARAMETER_PROVIDER = 'ssm',\n\n  /**\n   * VPC Provider\n   */\n  VPC_PROVIDER = 'vpc-provider',\n\n  /**\n   * VPC Endpoint Service AZ Provider\n   */\n  ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER = 'endpoint-service-availability-zones',\n\n  /**\n   * Load balancer provider\n   */\n  LOAD_BALANCER_PROVIDER = 'load-balancer',\n\n  /**\n   * Load balancer listener provider\n   */\n  LOAD_BALANCER_LISTENER_PROVIDER = 'load-balancer-listener',\n\n  /**\n   * Security group provider\n   */\n  SECURITY_GROUP_PROVIDER = 'security-group',\n\n  /**\n   * KMS Key Provider\n   */\n  KEY_PROVIDER = 'key-provider',\n\n  /**\n   * A plugin provider (the actual plugin name will be in the properties)\n   */\n  PLUGIN = 'plugin',\n}\n\n/**\n * Query to AMI context provider\n */\nexport interface AmiContextQuery {\n  /**\n   * Account to query\n   */\n  readonly account: string;\n\n  /**\n   * Region to query\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n  /**\n   * Owners to DescribeImages call\n   *\n   * @default - All owners\n   */\n  readonly owners?: string[];\n\n  /**\n   * Filters to DescribeImages call\n   */\n  readonly filters: {[key: string]: string[]};\n}\n\n/**\n * Query to availability zone context provider\n */\nexport interface AvailabilityZonesContextQuery {\n  /**\n   * Query account\n   */\n  readonly account: string;\n\n  /**\n   * Query region\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n}\n\n/**\n * Query to hosted zone context provider\n */\nexport interface HostedZoneContextQuery {\n  /**\n   * Query account\n   */\n  readonly account: string;\n\n  /**\n   * Query region\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n  /**\n   * The domain name e.g. example.com to lookup\n   */\n  readonly domainName: string;\n\n  /**\n   * True if the zone you want to find is a private hosted zone\n   *\n   * @default false\n   */\n  readonly privateZone?: boolean;\n\n  /**\n   * The VPC ID to that the private zone must be associated with\n   *\n   * If you provide VPC ID and privateZone is false, this will return no results\n   * and raise an error.\n   *\n   * @default - Required if privateZone=true\n   */\n  readonly vpcId?: string;\n}\n\n/**\n * Query to SSM Parameter Context Provider\n */\nexport interface SSMParameterContextQuery {\n  /**\n   * Query account\n   */\n  readonly account: string;\n\n  /**\n   * Query region\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n  /**\n   * Parameter name to query\n   */\n  readonly parameterName: string;\n}\n\n/**\n * Query input for looking up a VPC\n */\nexport interface VpcContextQuery {\n  /**\n   * Query account\n   */\n  readonly account: string;\n\n  /**\n   * Query region\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n  /**\n   * Filters to apply to the VPC\n   *\n   * Filter parameters are the same as passed to DescribeVpcs.\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html\n   */\n  readonly filter: {[key: string]: string};\n\n  /**\n   * Whether to populate the subnetGroups field of the {@link VpcContextResponse},\n   * which contains potentially asymmetric subnet groups.\n   *\n   * @default false\n   */\n  readonly returnAsymmetricSubnets?: boolean;\n\n  /**\n   * Optional tag for subnet group name.\n   * If not provided, we'll look at the aws-cdk:subnet-name tag.\n   * If the subnet does not have the specified tag,\n   * we'll use its type as the name.\n   *\n   * @default 'aws-cdk:subnet-name'\n   */\n  readonly subnetGroupNameTag?: string;\n}\n\n/**\n * Query to endpoint service context provider\n */\nexport interface EndpointServiceAvailabilityZonesContextQuery {\n  /**\n   * Query account\n   */\n  readonly account: string;\n\n  /**\n   * Query region\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n  /**\n   * Query service name\n   */\n  readonly serviceName: string;\n}\n\n/**\n * Type of load balancer\n */\nexport enum LoadBalancerType {\n  /**\n   * Network load balancer\n   */\n  NETWORK = 'network',\n\n  /**\n   * Application load balancer\n   */\n  APPLICATION = 'application',\n}\n\n/**\n * Filters for selecting load balancers\n */\nexport interface LoadBalancerFilter {\n  /**\n   * Filter load balancers by their type\n   */\n  readonly loadBalancerType: LoadBalancerType;\n\n  /**\n   * Find by load balancer's ARN\n   * @default - does not search by load balancer arn\n   */\n  readonly loadBalancerArn?: string;\n\n  /**\n   * Match load balancer tags\n   * @default - does not match load balancers by tags\n   */\n  readonly loadBalancerTags?: Tag[];\n}\n\n/**\n * Query input for looking up a load balancer\n */\nexport interface LoadBalancerContextQuery extends LoadBalancerFilter {\n  /**\n   * Query account\n   */\n  readonly account: string;\n\n  /**\n   * Query region\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n}\n\n/**\n * The protocol for connections from clients to the load balancer\n */\nexport enum LoadBalancerListenerProtocol {\n  /**\n   * HTTP protocol\n   */\n  HTTP = 'HTTP',\n\n  /**\n   * HTTPS protocol\n   */\n  HTTPS = 'HTTPS',\n\n  /**\n   * TCP protocol\n   */\n  TCP = 'TCP',\n\n  /**\n   * TLS protocol\n   */\n  TLS = 'TLS',\n\n  /**\n   * UDP protocol\n   * */\n  UDP = 'UDP',\n\n  /**\n   * TCP and UDP protocol\n   * */\n  TCP_UDP = 'TCP_UDP',\n}\n\n/**\n * Query input for looking up a load balancer listener\n */\nexport interface LoadBalancerListenerContextQuery extends LoadBalancerFilter {\n  /**\n   * Query account\n   */\n  readonly account: string;\n\n  /**\n   * Query region\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n  /**\n   * Find by listener's arn\n   * @default - does not find by listener arn\n   */\n  readonly listenerArn?: string;\n\n  /**\n   * Filter by listener protocol\n   * @default - does not filter by listener protocol\n   */\n  readonly listenerProtocol?: LoadBalancerListenerProtocol;\n\n  /**\n   * Filter listeners by listener port\n   * @default - does not filter by a listener port\n   */\n  readonly listenerPort?: number;\n}\n\n/**\n * Query input for looking up a security group\n */\nexport interface SecurityGroupContextQuery {\n  /**\n   * Query account\n   */\n  readonly account: string;\n\n  /**\n   * Query region\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n  /**\n   * Security group id\n   *\n   * @default - None\n   */\n  readonly securityGroupId?: string;\n\n  /**\n   * Security group name\n   *\n   * @default - None\n   */\n  readonly securityGroupName?: string;\n\n  /**\n   * VPC ID\n   *\n   * @default - None\n   */\n  readonly vpcId?: string;\n}\n\n/**\n * Query input for looking up a KMS Key\n */\nexport interface KeyContextQuery {\n  /**\n   * Query account\n   */\n  readonly account: string;\n\n  /**\n   * Query region\n   */\n  readonly region: string;\n\n  /**\n   * The ARN of the role that should be used to look up the missing values\n   *\n   * @default - None\n   */\n  readonly lookupRoleArn?: string;\n\n  /**\n   * Alias name used to search the Key\n   */\n  readonly aliasName: string;\n}\n\n/**\n * Query input for plugins\n *\n * This alternate branch is necessary because it needs to be able to escape all type checking\n * we do on on the cloud assembly -- we cannot know the properties that will be used a priori.\n */\nexport interface PluginContextQuery {\n  /**\n   * The name of the plugin\n   */\n  readonly pluginName: string;\n\n  /**\n   * Arbitrary other arguments for the plugin\n   */\n  [key: string]: any;\n}\n\nexport type ContextQueryProperties = AmiContextQuery\n| AvailabilityZonesContextQuery\n| HostedZoneContextQuery\n| SSMParameterContextQuery\n| VpcContextQuery\n| EndpointServiceAvailabilityZonesContextQuery\n| LoadBalancerContextQuery\n| LoadBalancerListenerContextQuery\n| SecurityGroupContextQuery\n| KeyContextQuery\n| PluginContextQuery;\n\n"],
  "mappings": "iKAKA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAIzB,iBAAA,aAAA,MAKA,iBAAA,2BAAA,qBAKA,iBAAA,qBAAA,cAKA,iBAAA,uBAAA,MAKA,iBAAA,aAAA,eAKA,iBAAA,4CAAA,sCAKA,iBAAA,uBAAA,gBAKA,iBAAA,gCAAA,yBAKA,iBAAA,wBAAA,iBAKA,iBAAA,aAAA,eAKA,iBAAA,OAAA,QACF,GAvDY,gBAAA,QAAA,iBAAA,SAAA,gBAAe,CAAA,EAAA,EAwQ3B,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAI1B,kBAAA,QAAA,UAKA,kBAAA,YAAA,aACF,GAVY,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,CAAA,EAAA,EA2D5B,GAAY,8BAAZ,AAAA,UAAY,8BAA4B,CAItC,8BAAA,KAAA,OAKA,8BAAA,MAAA,QAKA,8BAAA,IAAA,MAKA,8BAAA,IAAA,MAKA,8BAAA,IAAA,MAKA,8BAAA,QAAA,SACF,GA9BY,6BAAA,QAAA,8BAAA,SAAA,6BAA4B,CAAA,EAAA",
  "names": []
}
