{
  "version": 3,
  "sources": ["metadata-schema.ts"],
  "sourcesContent": ["/**\n * Common properties for asset metadata.\n */\ninterface BaseAssetMetadataEntry {\n  /**\n   * Requested packaging style\n   */\n  readonly packaging: string;\n\n  /**\n   * Logical identifier for the asset\n   */\n  readonly id: string;\n\n  /**\n   * The hash of the asset source.\n   */\n  readonly sourceHash: string;\n\n  /**\n   * Path on disk to the asset\n   */\n  readonly path: string;\n}\n\n/**\n * Metadata Entry spec for files.\n */\nexport interface FileAssetMetadataEntry extends BaseAssetMetadataEntry {\n  /**\n   * Requested packaging style\n   */\n  readonly packaging: 'zip' | 'file';\n\n  /**\n   * Name of parameter where S3 bucket should be passed in\n   */\n  readonly s3BucketParameter: string;\n\n  /**\n   * Name of parameter where S3 key should be passed in\n   */\n  readonly s3KeyParameter: string;\n\n  /**\n   * The name of the parameter where the hash of the bundled asset should be passed in.\n   */\n  readonly artifactHashParameter: string;\n}\n\n/**\n * Metadata Entry spec for stack tag.\n */\nexport interface Tag {\n  /**\n   * Tag key.\n   *\n   * (In the actual file on disk this will be cased as \"Key\", and the structure is\n   * patched to match this structure upon loading:\n   * https://github.com/aws/aws-cdk/blob/4aadaa779b48f35838cccd4e25107b2338f05547/packages/%40aws-cdk/cloud-assembly-schema/lib/manifest.ts#L137)\n   */\n  readonly key: string\n\n  /**\n   * Tag value.\n   *\n   * (In the actual file on disk this will be cased as \"Value\", and the structure is\n   * patched to match this structure upon loading:\n   * https://github.com/aws/aws-cdk/blob/4aadaa779b48f35838cccd4e25107b2338f05547/packages/%40aws-cdk/cloud-assembly-schema/lib/manifest.ts#L137)\n   */\n  readonly value: string\n}\n\n/**\n * Metadata Entry spec for container images.\n */\nexport interface ContainerImageAssetMetadataEntry extends BaseAssetMetadataEntry {\n  /**\n   * Type of asset\n   */\n  readonly packaging: 'container-image';\n\n  /**\n   * ECR Repository name and repo digest (separated by \"@sha256:\") where this\n   * image is stored.\n   *\n   * @default undefined If not specified, `repositoryName` and `imageTag` are\n   * required because otherwise how will the stack know where to find the asset,\n   * ha?\n   * @deprecated specify `repositoryName` and `imageTag` instead, and then you\n   * know where the image will go.\n   */\n  readonly imageNameParameter?: string;\n\n  /**\n   * ECR repository name, if omitted a default name based on the asset's ID is\n   * used instead. Specify this property if you need to statically address the\n   * image, e.g. from a Kubernetes Pod. Note, this is only the repository name,\n   * without the registry and the tag parts.\n   *\n   * @default - this parameter is REQUIRED after 1.21.0\n   */\n  readonly repositoryName?: string;\n\n  /**\n   * The docker image tag to use for tagging pushed images. This field is\n   * required if `imageParameterName` is ommited (otherwise, the app won't be\n   * able to find the image).\n   *\n   * @default - this parameter is REQUIRED after 1.21.0\n   */\n  readonly imageTag?: string;\n\n  /**\n   * Build args to pass to the `docker build` command\n   *\n   * @default no build args are passed\n   */\n  readonly buildArgs?: { [key: string]: string };\n\n  /**\n   * Docker target to build to\n   *\n   * @default no build target\n   */\n  readonly target?: string;\n\n  /**\n   * Path to the Dockerfile (relative to the directory).\n   *\n   * @default - no file is passed\n   */\n  readonly file?: string;\n\n  /**\n   * Networking mode for the RUN commands during build.\n   *\n   * @default - no networking mode specified\n   */\n  readonly networkMode?: string;\n}\n\n/**\n * @see ArtifactMetadataEntryType.ASSET\n */\nexport type AssetMetadataEntry = FileAssetMetadataEntry | ContainerImageAssetMetadataEntry;\n\n// Type aliases for metadata entries.\n// Used simply to assign names to data types for more clarity.\n\n/**\n * @see ArtifactMetadataEntryType.INFO\n * @see ArtifactMetadataEntryType.WARN\n * @see ArtifactMetadataEntryType.ERROR\n */\nexport type LogMessageMetadataEntry = string;\n\n/**\n * @see ArtifactMetadataEntryType.LOGICAL_ID\n */\nexport type LogicalIdMetadataEntry = string;\n\n/**\n * @see ArtifactMetadataEntryType.STACK_TAGS\n */\nexport type StackTagsMetadataEntry = Tag[];\n\n/**\n * Union type for all metadata entries that might exist in the manifest.\n */\nexport type MetadataEntryData = AssetMetadataEntry | LogMessageMetadataEntry | LogicalIdMetadataEntry | StackTagsMetadataEntry;\n\n/**\n * Type of artifact metadata entry.\n */\nexport enum ArtifactMetadataEntryType {\n  /**\n   * Asset in metadata.\n   */\n  ASSET = 'aws:cdk:asset',\n\n  /**\n   * Metadata key used to print INFO-level messages by the toolkit when an app is syntheized.\n   */\n  INFO = 'aws:cdk:info',\n\n  /**\n   * Metadata key used to print WARNING-level messages by the toolkit when an app is syntheized.\n   */\n  WARN = 'aws:cdk:warning',\n\n  /**\n   * Metadata key used to print ERROR-level messages by the toolkit when an app is syntheized.\n   */\n  ERROR = 'aws:cdk:error',\n\n  /**\n   * Represents the CloudFormation logical ID of a resource at a certain path.\n   */\n  LOGICAL_ID = 'aws:cdk:logicalId',\n\n  /**\n   * Represents tags of a stack.\n   */\n  STACK_TAGS = 'aws:cdk:stack-tags'\n}\n\n/**\n * A metadata entry in a cloud assembly artifact.\n */\nexport interface MetadataEntry {\n  /**\n   * The type of the metadata entry.\n   */\n  readonly type: string;\n\n  /**\n   * The data.\n   *\n   * @default - no data.\n   */\n  readonly data?: MetadataEntryData;\n\n  /**\n   * A stack trace for when the entry was created.\n   *\n   * @default - no trace.\n   */\n  readonly trace?: string[];\n}\n"],
  "mappings": "6GA+KA,GAAY,2BAAZ,AAAA,UAAY,2BAAyB,CAInC,2BAAA,MAAA,gBAKA,2BAAA,KAAA,eAKA,2BAAA,KAAA,kBAKA,2BAAA,MAAA,gBAKA,2BAAA,WAAA,oBAKA,2BAAA,WAAA,oBACF,GA9BY,0BAAA,QAAA,2BAAA,SAAA,0BAAyB,CAAA,EAAA",
  "names": []
}
