{
  "version": 3,
  "sources": ["emrcontainers.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-04-07T10:53:55.898Z\",\"fingerprint\":\"dhNgsaacuN9mgApzFQFSdjoAm7Y9NhEp5lbPED+Ra48=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n/**\n * Properties for defining a `CfnVirtualCluster`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emrcontainers-virtualcluster.html\n */\nexport interface CfnVirtualClusterProps {\n\n    /**\n     * The container provider of the virtual cluster.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emrcontainers-virtualcluster.html#cfn-emrcontainers-virtualcluster-containerprovider\n     */\n    readonly containerProvider: CfnVirtualCluster.ContainerProviderProperty | cdk.IResolvable;\n\n    /**\n     * The name of the virtual cluster.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emrcontainers-virtualcluster.html#cfn-emrcontainers-virtualcluster-name\n     */\n    readonly name: string;\n\n    /**\n     * An array of key-value pairs to apply to this resource.\n     *\n     * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emrcontainers-virtualcluster.html#cfn-emrcontainers-virtualcluster-tags\n     */\n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVirtualClusterProps`\n *\n * @param properties - the TypeScript properties of a `CfnVirtualClusterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVirtualClusterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerProvider', cdk.requiredValidator)(properties.containerProvider));\n    errors.collect(cdk.propertyValidator('containerProvider', CfnVirtualCluster_ContainerProviderPropertyValidator)(properties.containerProvider));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnVirtualClusterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EMRContainers::VirtualCluster` resource\n *\n * @param properties - the TypeScript properties of a `CfnVirtualClusterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EMRContainers::VirtualCluster` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVirtualClusterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVirtualClusterPropsValidator(properties).assertSuccess();\n    return {\n        ContainerProvider: cfnVirtualClusterContainerProviderPropertyToCloudFormation(properties.containerProvider),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVirtualClusterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVirtualClusterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVirtualClusterProps>();\n    ret.addPropertyResult('containerProvider', 'ContainerProvider', CfnVirtualClusterContainerProviderPropertyFromCloudFormation(properties.ContainerProvider));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::EMRContainers::VirtualCluster`\n *\n * The `AWS::EMRContainers::VirtualCluster` resource specifies a virtual cluster. A virtual cluster is a managed entity on Amazon EMR on EKS. You can create, describe, list, and delete virtual clusters. They do not consume any additional resources in your system. A single virtual cluster maps to a single Kubernetes namespace. Given this relationship, you can model virtual clusters the same way you model Kubernetes namespaces to meet your requirements.\n *\n * @cloudformationResource AWS::EMRContainers::VirtualCluster\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emrcontainers-virtualcluster.html\n */\nexport class CfnVirtualCluster extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::EMRContainers::VirtualCluster\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVirtualCluster {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVirtualClusterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVirtualCluster(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * The Amazon Resource Name (ARN) of the project, such as `arn:aws:emr-containers:us-east-1:123456789012:/virtualclusters/ab4rp1abcs8xz47n3x0example` .\n     * @cloudformationAttribute Arn\n     */\n    public readonly attrArn: string;\n\n    /**\n     * The ID of the virtual cluster, such as `ab4rp1abcs8xz47n3x0example` .\n     * @cloudformationAttribute Id\n     */\n    public readonly attrId: string;\n\n    /**\n     * The container provider of the virtual cluster.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emrcontainers-virtualcluster.html#cfn-emrcontainers-virtualcluster-containerprovider\n     */\n    public containerProvider: CfnVirtualCluster.ContainerProviderProperty | cdk.IResolvable;\n\n    /**\n     * The name of the virtual cluster.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emrcontainers-virtualcluster.html#cfn-emrcontainers-virtualcluster-name\n     */\n    public name: string;\n\n    /**\n     * An array of key-value pairs to apply to this resource.\n     *\n     * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emrcontainers-virtualcluster.html#cfn-emrcontainers-virtualcluster-tags\n     */\n    public readonly tags: cdk.TagManager;\n\n    /**\n     * Create a new `AWS::EMRContainers::VirtualCluster`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnVirtualClusterProps) {\n        super(scope, id, { type: CfnVirtualCluster.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'containerProvider', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.containerProvider = props.containerProvider;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::EMRContainers::VirtualCluster\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVirtualCluster.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            containerProvider: this.containerProvider,\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVirtualClusterPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnVirtualCluster {\n    /**\n     * The information about the container used for a job run or a managed endpoint.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrcontainers-virtualcluster-containerinfo.html\n     */\n    export interface ContainerInfoProperty {\n        /**\n         * The information about the EKS cluster.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrcontainers-virtualcluster-containerinfo.html#cfn-emrcontainers-virtualcluster-containerinfo-eksinfo\n         */\n        readonly eksInfo: CfnVirtualCluster.EksInfoProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContainerInfoProperty`\n *\n * @param properties - the TypeScript properties of a `ContainerInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnVirtualCluster_ContainerInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eksInfo', cdk.requiredValidator)(properties.eksInfo));\n    errors.collect(cdk.propertyValidator('eksInfo', CfnVirtualCluster_EksInfoPropertyValidator)(properties.eksInfo));\n    return errors.wrap('supplied properties not correct for \"ContainerInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EMRContainers::VirtualCluster.ContainerInfo` resource\n *\n * @param properties - the TypeScript properties of a `ContainerInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EMRContainers::VirtualCluster.ContainerInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVirtualClusterContainerInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVirtualCluster_ContainerInfoPropertyValidator(properties).assertSuccess();\n    return {\n        EksInfo: cfnVirtualClusterEksInfoPropertyToCloudFormation(properties.eksInfo),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVirtualClusterContainerInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVirtualCluster.ContainerInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVirtualCluster.ContainerInfoProperty>();\n    ret.addPropertyResult('eksInfo', 'EksInfo', CfnVirtualClusterEksInfoPropertyFromCloudFormation(properties.EksInfo));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnVirtualCluster {\n    /**\n     * The information about the container provider.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrcontainers-virtualcluster-containerprovider.html\n     */\n    export interface ContainerProviderProperty {\n        /**\n         * The ID of the container cluster.\n         *\n         * *Minimum* : 1\n         *\n         * *Maximum* : 100\n         *\n         * *Pattern* : `^[0-9A-Za-z][A-Za-z0-9\\-_]*`\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrcontainers-virtualcluster-containerprovider.html#cfn-emrcontainers-virtualcluster-containerprovider-id\n         */\n        readonly id: string;\n        /**\n         * The information about the container cluster.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrcontainers-virtualcluster-containerprovider.html#cfn-emrcontainers-virtualcluster-containerprovider-info\n         */\n        readonly info: CfnVirtualCluster.ContainerInfoProperty | cdk.IResolvable;\n        /**\n         * The type of the container provider. EKS is the only supported type as of now.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrcontainers-virtualcluster-containerprovider.html#cfn-emrcontainers-virtualcluster-containerprovider-type\n         */\n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContainerProviderProperty`\n *\n * @param properties - the TypeScript properties of a `ContainerProviderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnVirtualCluster_ContainerProviderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('info', cdk.requiredValidator)(properties.info));\n    errors.collect(cdk.propertyValidator('info', CfnVirtualCluster_ContainerInfoPropertyValidator)(properties.info));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ContainerProviderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EMRContainers::VirtualCluster.ContainerProvider` resource\n *\n * @param properties - the TypeScript properties of a `ContainerProviderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EMRContainers::VirtualCluster.ContainerProvider` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVirtualClusterContainerProviderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVirtualCluster_ContainerProviderPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        Info: cfnVirtualClusterContainerInfoPropertyToCloudFormation(properties.info),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVirtualClusterContainerProviderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVirtualCluster.ContainerProviderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVirtualCluster.ContainerProviderProperty>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('info', 'Info', CfnVirtualClusterContainerInfoPropertyFromCloudFormation(properties.Info));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnVirtualCluster {\n    /**\n     * The information about the EKS cluster.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrcontainers-virtualcluster-eksinfo.html\n     */\n    export interface EksInfoProperty {\n        /**\n         * The namespaces of the EKS cluster.\n         *\n         * *Minimum* : 1\n         *\n         * *Maximum* : 63\n         *\n         * *Pattern* : `[a-z0-9]([-a-z0-9]*[a-z0-9])?`\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrcontainers-virtualcluster-eksinfo.html#cfn-emrcontainers-virtualcluster-eksinfo-namespace\n         */\n        readonly namespace: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EksInfoProperty`\n *\n * @param properties - the TypeScript properties of a `EksInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnVirtualCluster_EksInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('namespace', cdk.requiredValidator)(properties.namespace));\n    errors.collect(cdk.propertyValidator('namespace', cdk.validateString)(properties.namespace));\n    return errors.wrap('supplied properties not correct for \"EksInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::EMRContainers::VirtualCluster.EksInfo` resource\n *\n * @param properties - the TypeScript properties of a `EksInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::EMRContainers::VirtualCluster.EksInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVirtualClusterEksInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVirtualCluster_EksInfoPropertyValidator(properties).assertSuccess();\n    return {\n        Namespace: cdk.stringToCloudFormation(properties.namespace),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVirtualClusterEksInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVirtualCluster.EksInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVirtualCluster.EksInfoProperty>();\n    ret.addPropertyResult('namespace', 'Namespace', cfn_parse.FromCloudFormation.getString(properties.Namespace));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "wNAQA,IAAA,QAAA,YAAA,EACA,UAAA,QAAA,0BAAA,EA2CA,yCAAyC,WAAe,CACpD,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,IAAI,iBAAiB,EAAE,WAAW,iBAAiB,CAAC,EAC9G,OAAO,QAAQ,IAAI,kBAAkB,oBAAqB,oDAAoD,EAAE,WAAW,iBAAiB,CAAC,EAC7I,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,iBAAiB,EAAE,WAAW,IAAI,CAAC,EACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,EAAE,WAAW,IAAI,CAAC,EACjF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,IAAI,cAAc,CAAC,EAAE,WAAW,IAAI,CAAC,EAC7F,OAAO,KAAK,8DAA8D,CACrF,CAUA,gDAAgD,WAAe,CAC3D,MAAK,KAAI,WAAW,UAAU,EAC9B,iCAAgC,UAAU,EAAE,cAAa,EAClD,CACH,kBAAmB,2DAA2D,WAAW,iBAAiB,EAC1G,KAAM,IAAI,uBAAuB,WAAW,IAAI,EAChD,KAAM,IAAI,WAAW,IAAI,sBAAsB,EAAE,WAAW,IAAI,IAL1B,UAO9C,CAGA,kDAAkD,WAAe,CAE7D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,oBAAqB,oBAAqB,6DAA6D,WAAW,iBAAiB,CAAC,EAC1J,IAAI,kBAAkB,OAAQ,OAAQ,UAAU,mBAAmB,UAAU,WAAW,IAAI,CAAC,EAC7F,IAAI,kBAAkB,OAAQ,OAAQ,WAAW,MAAQ,KAAO,UAAU,mBAAmB,SAAS,UAAU,mBAAmB,SAAS,EAAE,WAAW,IAAI,EAAI,MAAgB,EACjL,IAAI,iCAAiC,UAAU,EACxC,GACX,CAYA,MAAa,yBAA0B,KAAI,WAAW,CAmElD,YAAY,MAA6B,GAAY,MAA6B,CAC9E,MAAM,MAAO,GAAI,CAAE,KAAM,kBAAkB,uBAAwB,WAAY,KAAK,CAAE,sFACtF,IAAI,gBAAgB,MAAO,oBAAqB,IAAI,EACpD,IAAI,gBAAgB,MAAO,OAAQ,IAAI,EACvC,KAAK,QAAU,IAAI,MAAM,SAAS,KAAK,OAAO,KAAK,CAAC,EACpD,KAAK,OAAS,IAAI,MAAM,SAAS,KAAK,OAAO,IAAI,CAAC,EAElD,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,KAAO,MAAM,KAClB,KAAK,KAAO,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,qCAAsC,MAAM,KAAM,CAAE,gBAAiB,MAAM,CAAE,QA/DxH,qBAAoB,MAA6B,GAAY,mBAAyB,QAA4C,CAC5I,mBAAqB,oBAAsB,CAAA,EAC3C,KAAM,oBAAqB,QAAQ,OAAO,WAAW,mBAAmB,UAAU,EAC5E,YAAc,yCAAyC,kBAAkB,EACzE,IAAM,GAAI,mBAAkB,MAAO,GAAI,YAAY,KAAK,EAC9D,SAAW,CAAC,QAAS,UAAY,QAAO,QAAQ,YAAY,eAAe,EACvE,IAAI,oBAAoB,QAAS,OAAO,EAE5C,eAAQ,OAAO,iBAAiB,IAAK,mBAAoB,EAAE,EACpD,IA+DJ,QAAQ,UAA4B,8DACvC,UAAU,aAAa,8BAA+B,kBAAkB,sBAAsB,EAC9F,UAAU,aAAa,+BAAgC,KAAK,aAAa,KAG/D,gBAAa,CACvB,MAAO,CACH,kBAAmB,KAAK,kBACxB,KAAM,KAAK,KACX,KAAM,KAAK,KAAK,WAAU,GAIxB,iBAAiB,MAA2B,CAClD,MAAO,wCAAuC,KAAK,GAnG3D,QAAA,kBAAA,uIAI2B,kBAAA,uBAAyB,qCA6HpD,0DAA0D,WAAe,CACrE,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,UAAW,IAAI,iBAAiB,EAAE,WAAW,OAAO,CAAC,EAC1F,OAAO,QAAQ,IAAI,kBAAkB,UAAW,0CAA0C,EAAE,WAAW,OAAO,CAAC,EACxG,OAAO,KAAK,6DAA6D,CACpF,CAUA,gEAAgE,WAAe,CAC3E,MAAK,KAAI,WAAW,UAAU,EAC9B,kDAAiD,UAAU,EAAE,cAAa,EACnE,CACH,QAAS,iDAAiD,WAAW,OAAO,IAHtC,UAK9C,CAGA,kEAAkE,WAAe,CAC7E,GAAI,IAAI,mBAAmB,UAAU,EACjC,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAG5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,UAAW,UAAW,mDAAmD,WAAW,OAAO,CAAC,EAClH,IAAI,iCAAiC,UAAU,EACxC,GACX,CA8CA,8DAA8D,WAAe,CACzE,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,KAAM,IAAI,iBAAiB,EAAE,WAAW,EAAE,CAAC,EAChF,OAAO,QAAQ,IAAI,kBAAkB,KAAM,IAAI,cAAc,EAAE,WAAW,EAAE,CAAC,EAC7E,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,iBAAiB,EAAE,WAAW,IAAI,CAAC,EACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,gDAAgD,EAAE,WAAW,IAAI,CAAC,EAC/G,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,iBAAiB,EAAE,WAAW,IAAI,CAAC,EACpF,OAAO,QAAQ,IAAI,kBAAkB,OAAQ,IAAI,cAAc,EAAE,WAAW,IAAI,CAAC,EAC1E,OAAO,KAAK,iEAAiE,CACxF,CAUA,oEAAoE,WAAe,CAC/E,MAAK,KAAI,WAAW,UAAU,EAC9B,sDAAqD,UAAU,EAAE,cAAa,EACvE,CACH,GAAI,IAAI,uBAAuB,WAAW,EAAE,EAC5C,KAAM,uDAAuD,WAAW,IAAI,EAC5E,KAAM,IAAI,uBAAuB,WAAW,IAAI,IALV,UAO9C,CAGA,sEAAsE,WAAe,CACjF,GAAI,IAAI,mBAAmB,UAAU,EACjC,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAG5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,KAAM,KAAM,UAAU,mBAAmB,UAAU,WAAW,EAAE,CAAC,EACvF,IAAI,kBAAkB,OAAQ,OAAQ,yDAAyD,WAAW,IAAI,CAAC,EAC/G,IAAI,kBAAkB,OAAQ,OAAQ,UAAU,mBAAmB,UAAU,WAAW,IAAI,CAAC,EAC7F,IAAI,iCAAiC,UAAU,EACxC,GACX,CAkCA,oDAAoD,WAAe,CAC/D,GAAI,CAAC,IAAI,WAAW,UAAU,EAAK,MAAO,KAAI,mBAC9C,KAAM,QAAS,GAAI,KAAI,kBACvB,MAAI,OAAO,aAAe,UACtB,OAAO,QAAQ,GAAI,KAAI,iBAAiB,qCAAuC,KAAK,UAAU,UAAU,CAAC,CAAC,EAE9G,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,iBAAiB,EAAE,WAAW,SAAS,CAAC,EAC9F,OAAO,QAAQ,IAAI,kBAAkB,YAAa,IAAI,cAAc,EAAE,WAAW,SAAS,CAAC,EACpF,OAAO,KAAK,uDAAuD,CAC9E,CAUA,0DAA0D,WAAe,CACrE,MAAK,KAAI,WAAW,UAAU,EAC9B,4CAA2C,UAAU,EAAE,cAAa,EAC7D,CACH,UAAW,IAAI,uBAAuB,WAAW,SAAS,IAHpB,UAK9C,CAGA,4DAA4D,WAAe,CACvE,GAAI,IAAI,mBAAmB,UAAU,EACjC,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAG5D,GADA,WAAa,YAAc,KAAO,CAAA,EAAK,WACnC,MAAO,aAAe,SACtB,MAAO,IAAI,WAAU,yBAAyB,UAAU,EAE5D,KAAM,KAAM,GAAI,WAAU,iCAC1B,WAAI,kBAAkB,YAAa,YAAa,UAAU,mBAAmB,UAAU,WAAW,SAAS,CAAC,EAC5G,IAAI,iCAAiC,UAAU,EACxC,GACX",
  "names": []
}
