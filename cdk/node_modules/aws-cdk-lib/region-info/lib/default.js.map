{
  "version": 3,
  "sources": ["default.ts"],
  "sourcesContent": ["import { before, RULE_SSM_PRINCIPALS_ARE_REGIONAL } from './aws-entities';\n\n/**\n * Provides default values for certain regional information points.\n */\nexport class Default {\n\n  /**\n   * The default value for a VPC Endpoint Service name prefix, useful if you do\n   * not have a synthesize-time region literal available (all you have is\n   * `{ \"Ref\": \"AWS::Region\" }`)\n   */\n  public static readonly VPC_ENDPOINT_SERVICE_NAME_PREFIX = 'com.amazonaws.vpce';\n\n  /**\n   * Computes a \"standard\" AWS Service principal for a given service, region and suffix. This is useful for example when\n   * you need to compute a service principal name, but you do not have a synthesize-time region literal available (so\n   * all you have is `{ \"Ref\": \"AWS::Region\" }`). This way you get the same defaulting behavior that is normally used\n   * for built-in data.\n   *\n   * @param serviceFqn the name of the service (s3, s3.amazonaws.com, ...)\n   * @param region    the region in which the service principal is needed.\n   * @param urlSuffix deprecated and ignored.\n   */\n  public static servicePrincipal(serviceFqn: string, region: string, urlSuffix: string): string {\n    const serviceName = extractSimpleName(serviceFqn);\n    if (!serviceName) {\n      // Return \"service\" if it does not look like any of the following:\n      // - s3\n      // - s3.amazonaws.com\n      // - s3.amazonaws.com.cn\n      // - s3.c2s.ic.gov\n      // - s3.sc2s.sgov.gov\n      return serviceFqn;\n    }\n\n    function determineConfiguration(service: string): (service: string, region: string, urlSuffix: string) => string {\n      function universal(s: string) { return `${s}.amazonaws.com`; }\n      function partitional(s: string, _: string, u: string) { return `${s}.${u}`; }\n      function regional(s: string, r: string) { return `${s}.${r}.amazonaws.com`; }\n      function regionalPartitional(s: string, r: string, u: string) { return `${s}.${r}.${u}`; }\n\n      // Exceptions for Service Principals in us-iso-*\n      const US_ISO_EXCEPTIONS = new Set([\n        'cloudhsm',\n        'config',\n        'states',\n        'workspaces',\n      ]);\n\n      // Account for idiosyncratic Service Principals in `us-iso-*` regions\n      if (region.startsWith('us-iso-') && US_ISO_EXCEPTIONS.has(service)) {\n        switch (service) {\n          // Services with universal principal\n          case ('states'):\n            return universal;\n\n          // Services with a partitional principal\n          default:\n            return partitional;\n        }\n      }\n\n      // Exceptions for Service Principals in us-isob-*\n      const US_ISOB_EXCEPTIONS = new Set([\n        'dms',\n        'states',\n      ]);\n\n      // Account for idiosyncratic Service Principals in `us-isob-*` regions\n      if (region.startsWith('us-isob-') && US_ISOB_EXCEPTIONS.has(service)) {\n        switch (service) {\n          // Services with universal principal\n          case ('states'):\n            return universal;\n\n          // Services with a partitional principal\n          default:\n            return partitional;\n        }\n      }\n\n      switch (service) {\n        // SSM turned from global to regional at some point\n        case 'ssm':\n          return before(region, RULE_SSM_PRINCIPALS_ARE_REGIONAL)\n            ? universal\n            : regional;\n\n        // CodeDeploy is regional+partitional in CN, only regional everywhere else\n        case 'codedeploy':\n          return region.startsWith('cn-')\n            ? regionalPartitional\n            // ...except in the isolated regions, where it's universal\n            : (region.startsWith('us-iso') ? universal : regional);\n\n        // Services with a regional AND partitional principal\n        case 'logs':\n          return regionalPartitional;\n\n        // Services with a regional principal\n        case 'states':\n          return regional;\n\n        // Services with a partitional principal\n        case 'ec2':\n          return partitional;\n\n        // Services with a universal principal across all regions/partitions (the default case)\n        default:\n          return universal;\n\n      }\n    };\n\n    const configuration = determineConfiguration(serviceName);\n    return configuration(serviceName, region, urlSuffix);\n  }\n\n  private constructor() { }\n}\n\nfunction extractSimpleName(serviceFqn: string) {\n  const matches = serviceFqn.match(/^([^.]+)(?:(?:\\.amazonaws\\.com(?:\\.cn)?)|(?:\\.c2s\\.ic\\.gov)|(?:\\.sc2s\\.sgov\\.gov))?$/);\n  return matches ? matches[1] : undefined;\n}\n"],
  "mappings": "mJAAA,eAAA,QAAA,gBAAA,EAKA,MAAa,OAAO,CAkHlB,aAAA,CAAA,OA/Fc,kBAAiB,WAAoB,OAAgB,UAAiB,CAClF,KAAM,aAAc,kBAAkB,UAAU,EAChD,GAAI,CAAC,YAOH,MAAO,YAGT,gCAAgC,QAAe,CAC7C,mBAAmB,EAAS,CAAI,MAAO,GAAG,iBAAmB,CAC7D,qBAAqB,EAAW,EAAW,EAAS,CAAI,MAAO,GAAG,KAAK,GAAK,CAC5E,kBAAkB,EAAW,EAAS,CAAI,MAAO,GAAG,KAAK,iBAAmB,CAC5E,6BAA6B,EAAW,EAAW,EAAS,CAAI,MAAO,GAAG,KAAK,KAAK,GAAK,CAGzF,KAAM,mBAAoB,GAAI,KAAI,CAChC,WACA,SACA,SACA,aACD,EAGD,GAAI,OAAO,WAAW,SAAS,GAAK,kBAAkB,IAAI,OAAO,EAC/D,OAAQ,aAEA,SACJ,MAAO,mBAIP,MAAO,aAKb,KAAM,oBAAqB,GAAI,KAAI,CACjC,MACA,SACD,EAGD,GAAI,OAAO,WAAW,UAAU,GAAK,mBAAmB,IAAI,OAAO,EACjE,OAAQ,aAEA,SACJ,MAAO,mBAIP,MAAO,aAIb,OAAQ,aAED,MACH,MAAO,gBAAA,OAAO,OAAQ,eAAA,gCAAgC,EAClD,UACA,aAGD,aACH,MAAO,QAAO,WAAW,KAAK,EAC1B,oBAEC,OAAO,WAAW,QAAQ,EAAI,UAAY,aAG5C,OACH,MAAO,yBAGJ,SACH,MAAO,cAGJ,MACH,MAAO,qBAIP,MAAO,WAGb,CAGA,MAAO,AADe,wBAAuB,WAAW,EACnC,YAAa,OAAQ,SAAS,GA/GvD,QAAA,QAAA,mGAOyB,QAAA,iCAAmC,qBA8G5D,2BAA2B,WAAkB,CAC3C,KAAM,SAAU,WAAW,MAAM,sFAAsF,EACvH,MAAO,SAAU,QAAQ,GAAK,MAChC",
  "names": []
}
