{
  "version": 3,
  "sources": ["aws-entities.ts"],
  "sourcesContent": ["/**\n * After this point, SSM only creates regional principals\n */\nexport const RULE_SSM_PRINCIPALS_ARE_REGIONAL = Symbol('SSM_PRINCIPALS_ARE_REGIONAL');\n\n/**\n * After this point, S3 website domains look like `s3-website.REGION.s3.amazonaws.com`\n *\n * Before this point, S3 website domains look like `s3-website-REGION.s3.amazonaws.com`.\n */\nexport const RULE_S3_WEBSITE_REGIONAL_SUBDOMAIN = Symbol('S3_WEBSITE_REGIONAL_SUBDOMAIN');\n\n/**\n * List of AWS region, ordered by launch date (oldest to newest)\n *\n * The significance of this is that standards and conventions change over time.\n * Generally, as rules are changed they only apply to new regions, and old\n * regions are left as-is.\n *\n * We mix the list of regions with a list of rules that were introduced over\n * time (rules are symbols).\n *\n * Therefore, if we want to know if a rule applies to a certain region, we\n * only need to check its position in the list and compare it to when a\n * rule was introduced.\n */\nexport const AWS_REGIONS_AND_RULES: readonly (string | symbol)[] = [\n  'us-east-1', // US East (N. Virginia)\n  'eu-west-1', // Europe (Ireland)\n  'us-west-1', // US West (N. California)\n  'ap-southeast-1', // Asia Pacific (Singapore)\n  'ap-northeast-1', // Asia Pacific (Tokyo)\n  'us-gov-west-1', // AWS GovCloud (US-West)\n  'us-west-2', // US West (Oregon)\n  'sa-east-1', // South America (S\u00E3o Paulo)\n  'ap-southeast-2', // Asia Pacific (Sydney)\n  RULE_S3_WEBSITE_REGIONAL_SUBDOMAIN,\n  'cn-north-1', // China (Beijing)\n  'us-iso-east-1', // AWS ISO\n  'eu-central-1', // Europe (Frankfurt)\n  'ap-northeast-2', // Asia Pacific (Seoul)\n  'ap-south-1', // Asia Pacific (Mumbai)\n  'us-east-2', // US East (Ohio)\n  'ca-central-1', // Canada (Central)\n  'eu-west-2', // Europe (London)\n  'us-isob-east-1', // AWS ISO-B\n  'cn-northwest-1', // China (Ningxia)\n  'eu-west-3', // Europe (Paris)\n  'ap-northeast-3', // Asia Pacific (Osaka)\n  'us-gov-east-1', // AWS GovCloud (US-East)\n  'eu-north-1', // Europe (Stockholm)\n  RULE_SSM_PRINCIPALS_ARE_REGIONAL,\n  'ap-east-1', // Asia Pacific (Hong Kong)\n  'me-south-1', // Middle East (Bahrain)\n  'eu-south-1', // Europe (Milan)\n  'af-south-1', // Africa (Cape Town)\n  'us-iso-west-1', // US ISO West\n  'eu-south-2', // Europe (Spain)\n  'ap-southeast-3', // Asia Pacific (Jakarta)\n];\n\n/**\n * The names of all (known) AWS regions\n *\n * Not in the list ==> no built-in data for that region.\n */\nexport const AWS_REGIONS = AWS_REGIONS_AND_RULES\n  .filter((x) => typeof x === 'string')\n  .sort() as readonly string[];\n\n/**\n * Possibly non-exaustive list of all service names, used to locate service principals.\n *\n * Not in the list ==> default service principal mappings.\n */\nexport const AWS_SERVICES: readonly string[] = [\n  'application-autoscaling',\n  'autoscaling',\n  'codedeploy',\n  'ec2',\n  'events',\n  'lambda',\n  'logs',\n  's3',\n  'ssm',\n  'sns',\n  'sqs',\n  'states',\n].sort();\n\n/**\n * Whether or not a region predates a given rule (or region).\n *\n * Unknown region => we have to assume no.\n */\nexport function before(region: string, ruleOrRegion: string | symbol) {\n  const ruleIx = AWS_REGIONS_AND_RULES.indexOf(ruleOrRegion);\n  if (ruleIx === -1) {\n    throw new Error(`Unknown rule: ${String(ruleOrRegion)}`);\n  }\n  const regionIx = AWS_REGIONS_AND_RULES.indexOf(region);\n  return regionIx === -1 ? false : regionIx < ruleIx;\n}\n\n/**\n * Return all regions before a given rule was introduced (or region)\n */\nexport function regionsBefore(ruleOrRegion: string | symbol): string[] {\n  const ruleIx = AWS_REGIONS_AND_RULES.indexOf(ruleOrRegion);\n  if (ruleIx === -1) {\n    throw new Error(`Unknown rule: ${String(ruleOrRegion)}`);\n  }\n  return AWS_REGIONS_AND_RULES.slice(0, ruleIx)\n    .filter((entry) => typeof entry === 'string')\n    .sort() as string[];\n}\n\nexport interface Region { readonly partition: string, readonly domainSuffix: string }\n\nconst PARTITION_MAP: {readonly [region: string]: Region } = {\n  'default': { partition: 'aws', domainSuffix: 'amazonaws.com' },\n  'cn-': { partition: 'aws-cn', domainSuffix: 'amazonaws.com.cn' },\n  'us-gov-': { partition: 'aws-us-gov', domainSuffix: 'amazonaws.com' },\n  'us-iso-': { partition: 'aws-iso', domainSuffix: 'c2s.ic.gov' },\n  'us-isob-': { partition: 'aws-iso-b', domainSuffix: 'sc2s.sgov.gov' },\n};\n\nexport function partitionInformation(region: string): Region {\n  for (const [prefix, info] of Object.entries(PARTITION_MAP)) {\n    if (region.startsWith(prefix)) {\n      return info;\n    }\n  }\n  return PARTITION_MAP.default;\n}\n"],
  "mappings": "wSAGa,QAAA,iCAAmC,OAAO,6BAA6B,EAOvE,QAAA,mCAAqC,OAAO,+BAA+B,EAgB3E,QAAA,sBAAsD,CACjE,YACA,YACA,YACA,iBACA,iBACA,gBACA,YACA,YACA,iBACA,QAAA,mCACA,aACA,gBACA,eACA,iBACA,aACA,YACA,eACA,YACA,iBACA,iBACA,YACA,iBACA,gBACA,aACA,QAAA,iCACA,YACA,aACA,aACA,aACA,gBACA,aACA,kBAQW,QAAA,YAAc,QAAA,sBACxB,OAAO,AAAC,GAAM,MAAO,IAAM,QAAQ,EACnC,KAAI,EAOM,QAAA,aAAkC,CAC7C,0BACA,cACA,aACA,MACA,SACA,SACA,OACA,KACA,MACA,MACA,MACA,UACA,KAAI,EAON,gBAAuB,OAAgB,aAA6B,CAClE,KAAM,QAAS,QAAA,sBAAsB,QAAQ,YAAY,EACzD,GAAI,SAAW,GACb,KAAM,IAAI,OAAM,iBAAiB,OAAO,YAAY,GAAG,EAEzD,KAAM,UAAW,QAAA,sBAAsB,QAAQ,MAAM,EACrD,MAAO,YAAa,GAAK,GAAQ,SAAW,MAC9C,CAPA,QAAA,OAAA,OAYA,uBAA8B,aAA6B,CACzD,KAAM,QAAS,QAAA,sBAAsB,QAAQ,YAAY,EACzD,GAAI,SAAW,GACb,KAAM,IAAI,OAAM,iBAAiB,OAAO,YAAY,GAAG,EAEzD,MAAO,SAAA,sBAAsB,MAAM,EAAG,MAAM,EACzC,OAAO,AAAC,OAAU,MAAO,QAAU,QAAQ,EAC3C,KAAI,CACT,CARA,QAAA,cAAA,cAYA,KAAM,eAAsD,CAC1D,QAAW,CAAE,UAAW,MAAO,aAAc,eAAe,EAC5D,MAAO,CAAE,UAAW,SAAU,aAAc,kBAAkB,EAC9D,UAAW,CAAE,UAAW,aAAc,aAAc,eAAe,EACnE,UAAW,CAAE,UAAW,UAAW,aAAc,YAAY,EAC7D,WAAY,CAAE,UAAW,YAAa,aAAc,eAAe,GAGrE,8BAAqC,OAAc,CACjD,SAAW,CAAC,OAAQ,OAAS,QAAO,QAAQ,aAAa,EACvD,GAAI,OAAO,WAAW,MAAM,EAC1B,MAAO,MAGX,MAAO,eAAc,OACvB,CAPA,QAAA,qBAAA",
  "names": []
}
