{
  "version": 3,
  "sources": ["region-info.ts"],
  "sourcesContent": ["import { partitionInformation } from './aws-entities';\nimport { Fact, FactName } from './fact';\n\n/**\n * Information pertaining to an AWS region.\n */\nexport class RegionInfo {\n  /**\n   * @returns the list of names of AWS regions for which there is at least one registered fact. This\n   *          may not be an exaustive list of all available AWS regions.\n   */\n  public static get regions(): RegionInfo[] {\n    return Fact.regions.map(RegionInfo.get);\n  }\n\n  /**\n   * Retrieves a collection of all fact values for all regions that fact is defined in.\n   *\n   * @param factName the name of the fact to retrieve values for.\n   *   For a list of common fact names, see the FactName class\n   * @returns a mapping with AWS region codes as the keys,\n   *   and the fact in the given region as the value for that key\n   */\n  public static regionMap(factName: string): { [region: string]: string } {\n    const ret: { [region: string]: string } = {};\n    for (const regionInfo of RegionInfo.regions) {\n      const fact = Fact.find(regionInfo.name, factName);\n      if (fact) {\n        ret[regionInfo.name] = fact;\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Retrieves a collection of all fact values for all regions, limited to some partitions\n   *\n   * @param factName the name of the fact to retrieve values for.\n   *   For a list of common fact names, see the FactName class\n   * @param partitions list of partitions to retrieve facts for. Defaults\n   *   to `['aws', 'aws-cn']`.\n   * @returns a mapping with AWS region codes as the keys,\n   *   and the fact in the given region as the value for that key\n   */\n  public static limitedRegionMap(factName: string, partitions: string[]): { [region: string]: string } {\n    const ret: Record<string, string> = {};\n    for (const [region, value] of Object.entries(RegionInfo.regionMap(factName))) {\n      if (partitions.includes(partitionInformation(region).partition)) {\n        ret[region] = value;\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Obtain region info for a given region name.\n   *\n   * @param name the name of the region (e.g: us-east-1)\n   */\n  public static get(name: string): RegionInfo {\n    return new RegionInfo(name);\n  }\n\n  private constructor(public readonly name: string) { }\n\n  /**\n   * Whether the `AWS::CDK::Metadata` CloudFormation Resource is available in this region or not.\n   */\n  public get cdkMetadataResourceAvailable(): boolean {\n    return Fact.find(this.name, FactName.CDK_METADATA_RESOURCE_AVAILABLE) === 'YES';\n  }\n\n  /**\n   * The domain name suffix (e.g: amazonaws.com) for this region.\n   */\n  public get domainSuffix(): string | undefined {\n    return Fact.find(this.name, FactName.DOMAIN_SUFFIX);\n  }\n\n  /**\n   * The name of the ARN partition for this region (e.g: aws).\n   */\n  public get partition(): string | undefined {\n    return Fact.find(this.name, FactName.PARTITION);\n  }\n\n  /**\n   * The endpoint used by S3 static website hosting in this region (e.g: s3-static-website-us-east-1.amazonaws.com)\n   */\n  public get s3StaticWebsiteEndpoint(): string | undefined {\n    return Fact.find(this.name, FactName.S3_STATIC_WEBSITE_ENDPOINT);\n  }\n\n  /**\n   * The hosted zone ID used by Route 53 to alias a S3 static website in this region (e.g: Z2O1EMRO9K5GLX)\n   */\n  public get s3StaticWebsiteHostedZoneId(): string | undefined {\n    return Fact.find(this.name, FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID);\n  }\n\n  /**\n  * The hosted zone ID used by Route 53 to alias a EBS environment endpoint in this region (e.g: Z2O1EMRO9K5GLX)\n  */\n  public get ebsEnvEndpointHostedZoneId(): string | undefined {\n    return Fact.find(this.name, FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID);\n  }\n\n  /**\n   * The prefix for VPC Endpoint Service names,\n   * cn.com.amazonaws.vpce for China regions,\n   * com.amazonaws.vpce otherwise.\n   */\n  public get vpcEndpointServiceNamePrefix(): string | undefined {\n    return Fact.find(this.name, FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX);\n  }\n\n  /**\n   * The name of the service principal for a given service in this region.\n   * @param service the service name (e.g: s3.amazonaws.com)\n   */\n  public servicePrincipal(service: string): string | undefined {\n    return Fact.find(this.name, FactName.servicePrincipal(service));\n  }\n\n  /**\n   * The account ID for ELBv2 in this region\n   *\n   */\n  public get elbv2Account(): string | undefined {\n    return Fact.find(this.name, FactName.ELBV2_ACCOUNT);\n  }\n\n  /**\n   * The ID of the AWS account that owns the public ECR repository containing the\n   * AWS Deep Learning Containers images in this region.\n   */\n  public get dlcRepositoryAccount(): string | undefined {\n    return Fact.find(this.name, FactName.DLC_REPOSITORY_ACCOUNT);\n  }\n\n  /**\n   * The ARN of the CloudWatch Lambda Insights extension, for the given version.\n   * @param insightsVersion the version (e.g. 1.0.98.0)\n   * @param architecture the Lambda Function architecture (e.g. 'x86_64' or 'arm64')\n   */\n  public cloudwatchLambdaInsightsArn(insightsVersion: string, architecture?: string): string | undefined {\n    return Fact.find(this.name, FactName.cloudwatchLambdaInsightsVersion(insightsVersion, architecture));\n  }\n\n  /**\n   * The ID of the AWS account that owns the public ECR repository that contains the\n   * AWS App Mesh Envoy Proxy images in a given region.\n   */\n  public get appMeshRepositoryAccount(): string | undefined {\n    return Fact.find(this.name, FactName.APPMESH_ECR_ACCOUNT);\n  }\n\n  /**\n   * The CIDR block used by Kinesis Data Firehose servers.\n   */\n  public get firehoseCidrBlock(): string | undefined {\n    return Fact.find(this.name, FactName.FIREHOSE_CIDR_BLOCK);\n  }\n}\n"],
  "mappings": "sJAAA,eAAA,QAAA,gBAAA,EACA,OAAA,QAAA,QAAA,EAKA,MAAa,UAAU,CAyDrB,YAAoC,KAAY,CAAZ,KAAA,KAAA,eApDlB,UAAO,CACvB,MAAO,QAAA,KAAK,QAAQ,IAAI,WAAW,GAAG,QAW1B,WAAU,SAAgB,CACtC,KAAM,KAAoC,CAAA,EAC1C,SAAW,cAAc,YAAW,QAAS,CAC3C,KAAM,MAAO,OAAA,KAAK,KAAK,WAAW,KAAM,QAAQ,EAChD,AAAI,MACF,KAAI,WAAW,MAAQ,MAG3B,MAAO,WAaK,kBAAiB,SAAkB,WAAoB,CACnE,KAAM,KAA8B,CAAA,EACpC,SAAW,CAAC,OAAQ,QAAU,QAAO,QAAQ,WAAW,UAAU,QAAQ,CAAC,EACzE,AAAI,WAAW,SAAS,eAAA,qBAAqB,MAAM,EAAE,SAAS,GAC5D,KAAI,QAAU,OAGlB,MAAO,WAQK,KAAI,KAAY,CAC5B,MAAO,IAAI,YAAW,IAAI,KAQjB,+BAA4B,CACrC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,+BAA+B,IAAM,SAMjE,eAAY,CACrB,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,aAAa,KAMzC,YAAS,CAClB,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,SAAS,KAMrC,0BAAuB,CAChC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,0BAA0B,KAMtD,8BAA2B,CACpC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,wCAAwC,KAMpE,6BAA0B,CACnC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,+BAA+B,KAQ3D,+BAA4B,CACrC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,gCAAgC,EAOhE,iBAAiB,QAAe,CACrC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,iBAAiB,OAAO,CAAC,KAOrD,eAAY,CACrB,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,aAAa,KAOzC,uBAAoB,CAC7B,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,sBAAsB,EAQtD,4BAA4B,gBAAyB,aAAqB,CAC/E,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,gCAAgC,gBAAiB,YAAY,CAAC,KAO1F,2BAAwB,CACjC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,mBAAmB,KAM/C,oBAAiB,CAC1B,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,mBAAmB,GA3J5D,QAAA,WAAA",
  "names": []
}
