{
  "version": 3,
  "sources": ["efs-file-system.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport { ArnFormat, FeatureFlags, IResource, RemovalPolicy, Resource, Size, Stack, Tags } from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { Construct, DependencyGroup, IDependable } from 'constructs';\nimport { AccessPoint, AccessPointOptions } from './access-point';\nimport { CfnFileSystem, CfnMountTarget } from './efs.generated';\n\n/**\n * EFS Lifecycle Policy, if a file is not accessed for given days, it will move to EFS Infrequent Access.\n *\n * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html#cfn-elasticfilesystem-filesystem-lifecyclepolicies\n */\nexport enum LifecyclePolicy {\n  /**\n   * After 7 days of not being accessed.\n   */\n  AFTER_7_DAYS = 'AFTER_7_DAYS',\n\n  /**\n   * After 14 days of not being accessed.\n   */\n  AFTER_14_DAYS = 'AFTER_14_DAYS',\n\n  /**\n   * After 30 days of not being accessed.\n   */\n  AFTER_30_DAYS = 'AFTER_30_DAYS',\n\n  /**\n   * After 60 days of not being accessed.\n   */\n  AFTER_60_DAYS = 'AFTER_60_DAYS',\n\n  /**\n   * After 90 days of not being accessed.\n   */\n  AFTER_90_DAYS = 'AFTER_90_DAYS'\n}\n\n/**\n * EFS Out Of Infrequent Access Policy, if a file is accessed given times, it will move back to primary\n * storage class.\n *\n * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-efs-filesystem-lifecyclepolicy.html#cfn-efs-filesystem-lifecyclepolicy-transitiontoprimarystorageclass\n */\nexport enum OutOfInfrequentAccessPolicy {\n  /**\n   * After 1 access\n   */\n  AFTER_1_ACCESS = 'AFTER_1_ACCESS'\n}\n\n/**\n * EFS Performance mode.\n *\n * @see https://docs.aws.amazon.com/efs/latest/ug/performance.html#performancemodes\n */\nexport enum PerformanceMode {\n  /**\n   * General Purpose is ideal for latency-sensitive use cases, like web serving\n   * environments, content management systems, home directories, and general file serving.\n   * Recommended for the majority of Amazon EFS file systems.\n   */\n  GENERAL_PURPOSE = 'generalPurpose',\n\n  /**\n   * File systems in the Max I/O mode can scale to higher levels of aggregate\n   * throughput and operations per second. This scaling is done with a tradeoff\n   * of slightly higher latencies for file metadata operations.\n   * Highly parallelized applications and workloads, such as big data analysis,\n   * media processing, and genomics analysis, can benefit from this mode.\n   */\n  MAX_IO = 'maxIO'\n}\n\n/**\n * EFS Throughput mode.\n *\n * @see https://docs.aws.amazon.com/efs/latest/ug/performance.html#throughput-modes\n */\nexport enum ThroughputMode {\n  /**\n   * This mode on Amazon EFS scales as the size of the file system in the standard storage class grows.\n   */\n  BURSTING = 'bursting',\n\n  /**\n   * This mode can instantly provision the throughput of the file system (in MiB/s) independent of the amount of data stored.\n   */\n  PROVISIONED = 'provisioned'\n}\n\n/**\n * Represents an Amazon EFS file system\n */\nexport interface IFileSystem extends ec2.IConnectable, IResource {\n  /**\n   * The ID of the file system, assigned by Amazon EFS.\n   *\n   * @attribute\n   */\n  readonly fileSystemId: string;\n\n  /**\n   * The ARN of the file system.\n   *\n   * @attribute\n   */\n  readonly fileSystemArn: string;\n\n  /**\n   * Dependable that can be depended upon to ensure the mount targets of the filesystem are ready\n   */\n  readonly mountTargetsAvailable: IDependable;\n\n  /**\n   * Grant the actions defined in actions to the given grantee\n   * on this File System resource.\n   */\n  grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;\n}\n\n/**\n * Properties of EFS FileSystem.\n */\nexport interface FileSystemProps {\n\n  /**\n   * VPC to launch the file system in.\n   */\n  readonly vpc: ec2.IVpc;\n\n  /**\n   * Security Group to assign to this file system.\n   *\n   * @default - creates new security group which allows all outbound traffic\n   */\n  readonly securityGroup?: ec2.ISecurityGroup;\n\n  /**\n   * Which subnets to place the mount target in the VPC.\n   *\n   * @default - the Vpc default strategy if not specified\n   */\n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n  /**\n   * Defines if the data at rest in the file system is encrypted or not.\n   *\n   * @default - If your application has the '@aws-cdk/aws-efs:defaultEncryptionAtRest' feature flag set, the default is true, otherwise, the default is false.\n   * @link https://docs.aws.amazon.com/cdk/latest/guide/featureflags.html\n   */\n  readonly encrypted?: boolean;\n\n  /**\n   * The file system's name.\n   *\n   * @default - CDK generated name\n   */\n  readonly fileSystemName?: string;\n\n  /**\n   * The KMS key used for encryption. This is required to encrypt the data at rest if @encrypted is set to true.\n   *\n   * @default - if 'encrypted' is true, the default key for EFS (/aws/elasticfilesystem) is used\n   */\n  readonly kmsKey?: kms.IKey;\n\n  /**\n   * A policy used by EFS lifecycle management to transition files to the Infrequent Access (IA) storage class.\n   *\n   * @default - None. EFS will not transition files to the IA storage class.\n   */\n  readonly lifecyclePolicy?: LifecyclePolicy;\n\n  /**\n   * A policy used by EFS lifecycle management to transition files from Infrequent Access (IA) storage class to\n   * primary storage class.\n   *\n   * @default - None. EFS will not transition files from IA storage to primary storage.\n   */\n  readonly outOfInfrequentAccessPolicy?: OutOfInfrequentAccessPolicy;\n  /**\n   * The performance mode that the file system will operate under.\n   * An Amazon EFS file system's performance mode can't be changed after the file system has been created.\n   * Updating this property will replace the file system.\n   *\n   * @default PerformanceMode.GENERAL_PURPOSE\n   */\n  readonly performanceMode?: PerformanceMode;\n\n  /**\n   * Enum to mention the throughput mode of the file system.\n   *\n   * @default ThroughputMode.BURSTING\n   */\n  readonly throughputMode?: ThroughputMode;\n\n  /**\n   * Provisioned throughput for the file system.\n   * This is a required property if the throughput mode is set to PROVISIONED.\n   * Must be at least 1MiB/s.\n   *\n   * @default - none, errors out\n   */\n  readonly provisionedThroughputPerSecond?: Size;\n\n  /**\n   * The removal policy to apply to the file system.\n   *\n   * @default RemovalPolicy.RETAIN\n   */\n  readonly removalPolicy?: RemovalPolicy;\n\n  /**\n   * Whether to enable automatic backups for the file system.\n   *\n   * @default false\n   */\n  readonly enableAutomaticBackups?: boolean;\n}\n\n/**\n * Properties that describe an existing EFS file system.\n */\nexport interface FileSystemAttributes {\n  /**\n   * The security group of the file system\n   */\n  readonly securityGroup: ec2.ISecurityGroup;\n\n  /**\n   * The File System's ID.\n   *\n   * @default - determined based on fileSystemArn\n   */\n  readonly fileSystemId?: string;\n\n  /**\n   * The File System's Arn.\n   *\n   * @default - determined based on fileSystemId\n   */\n  readonly fileSystemArn?: string;\n}\n\nabstract class FileSystemBase extends Resource implements IFileSystem {\n  /**\n   * The security groups/rules used to allow network connections to the file system.\n   */\n  public abstract readonly connections: ec2.Connections;\n\n  /**\n  * @attribute\n  */\n  public abstract readonly fileSystemId: string;\n  /**\n  * @attribute\n  */\n  public abstract readonly fileSystemArn: string;\n\n  /**\n   * Dependable that can be depended upon to ensure the mount targets of the filesystem are ready\n   */\n  public abstract readonly mountTargetsAvailable: IDependable;\n\n  /**\n   * Grant the actions defined in actions to the given grantee\n   * on this File System resource.\n   *\n   * @param grantee Principal to grant right to\n   * @param actions The actions to grant\n   */\n  public grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee: grantee,\n      actions: actions,\n      resourceArns: [this.fileSystemArn],\n    });\n  }\n}\n\n/**\n * The Elastic File System implementation of IFileSystem.\n * It creates a new, empty file system in Amazon Elastic File System (Amazon EFS).\n * It also creates mount target (AWS::EFS::MountTarget) implicitly to mount the\n * EFS file system on an Amazon Elastic Compute Cloud (Amazon EC2) instance or another resource.\n *\n * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html\n *\n * @resource AWS::EFS::FileSystem\n */\nexport class FileSystem extends FileSystemBase {\n  /**\n   * The default port File System listens on.\n   */\n  public static readonly DEFAULT_PORT: number = 2049;\n\n  /**\n   * Import an existing File System from the given properties.\n   */\n  public static fromFileSystemAttributes(scope: Construct, id: string, attrs: FileSystemAttributes): IFileSystem {\n    return new ImportedFileSystem(scope, id, attrs);\n  }\n\n  /**\n   * The security groups/rules used to allow network connections to the file system.\n   */\n  public readonly connections: ec2.Connections;\n\n  /**\n   * @attribute\n   */\n  public readonly fileSystemId: string;\n  /**\n   * @attribute\n   */\n  public readonly fileSystemArn: string;\n\n  public readonly mountTargetsAvailable: IDependable;\n\n  private readonly _mountTargetsAvailable = new DependencyGroup();\n\n  /**\n   * Constructor for creating a new EFS FileSystem.\n   */\n  constructor(scope: Construct, id: string, props: FileSystemProps) {\n    super(scope, id);\n\n    if (props.throughputMode === ThroughputMode.PROVISIONED && props.provisionedThroughputPerSecond === undefined) {\n      throw new Error('Property provisionedThroughputPerSecond is required when throughputMode is PROVISIONED');\n    }\n\n    // we explictly use 'undefined' to represent 'false' to maintain backwards compatibility since\n    // its considered an actual change in CloudFormations eyes, even though they have the same meaning.\n    const encrypted = props.encrypted ?? (FeatureFlags.of(this).isEnabled(\n      cxapi.EFS_DEFAULT_ENCRYPTION_AT_REST) ? true : undefined);\n\n    // LifecyclePolicies is an array of lists containing a single policy\n    let lifecyclePolicies = [];\n\n    if (props.lifecyclePolicy) {\n      lifecyclePolicies.push({ transitionToIa: props.lifecyclePolicy });\n    }\n\n    if (props.outOfInfrequentAccessPolicy) {\n      lifecyclePolicies.push({ transitionToPrimaryStorageClass: props.outOfInfrequentAccessPolicy });\n    }\n\n    const filesystem = new CfnFileSystem(this, 'Resource', {\n      encrypted: encrypted,\n      kmsKeyId: props.kmsKey?.keyArn,\n      lifecyclePolicies: lifecyclePolicies.length > 0 ? lifecyclePolicies : undefined,\n      performanceMode: props.performanceMode,\n      throughputMode: props.throughputMode,\n      provisionedThroughputInMibps: props.provisionedThroughputPerSecond?.toMebibytes(),\n      backupPolicy: props.enableAutomaticBackups ? { status: 'ENABLED' } : undefined,\n    });\n    filesystem.applyRemovalPolicy(props.removalPolicy);\n\n    this.fileSystemId = filesystem.ref;\n    this.fileSystemArn = filesystem.attrArn;\n\n    Tags.of(this).add('Name', props.fileSystemName || this.node.path);\n\n    const securityGroup = (props.securityGroup || new ec2.SecurityGroup(this, 'EfsSecurityGroup', {\n      vpc: props.vpc,\n    }));\n\n    this.connections = new ec2.Connections({\n      securityGroups: [securityGroup],\n      defaultPort: ec2.Port.tcp(FileSystem.DEFAULT_PORT),\n    });\n\n    const subnets = props.vpc.selectSubnets(props.vpcSubnets ?? { onePerAz: true });\n\n    // We now have to create the mount target for each of the mentioned subnet\n    let mountTargetCount = 0;\n    this.mountTargetsAvailable = [];\n    subnets.subnetIds.forEach((subnetId: string) => {\n      const mountTarget = new CfnMountTarget(this,\n        'EfsMountTarget' + (++mountTargetCount),\n        {\n          fileSystemId: this.fileSystemId,\n          securityGroups: Array.of(securityGroup.securityGroupId),\n          subnetId,\n        });\n      this._mountTargetsAvailable.add(mountTarget);\n    });\n    this.mountTargetsAvailable = this._mountTargetsAvailable;\n  }\n\n  /**\n   * create access point from this filesystem\n   */\n  public addAccessPoint(id: string, accessPointOptions: AccessPointOptions = {}): AccessPoint {\n    return new AccessPoint(this, id, {\n      fileSystem: this,\n      ...accessPointOptions,\n    });\n  }\n}\n\nclass ImportedFileSystem extends FileSystemBase {\n  /**\n   * The security groups/rules used to allow network connections to the file system.\n   */\n  public readonly connections: ec2.Connections;\n\n  /**\n   * @attribute\n   */\n  public readonly fileSystemId: string;\n\n  /**\n   * @attribute\n   */\n  public readonly fileSystemArn: string;\n\n  /**\n   * Dependable that can be depended upon to ensure the mount targets of the filesystem are ready\n   */\n  public readonly mountTargetsAvailable: IDependable;\n\n  constructor(scope: Construct, id: string, attrs: FileSystemAttributes) {\n    super(scope, id);\n\n    if (!!attrs.fileSystemId === !!attrs.fileSystemArn) {\n      throw new Error('One of fileSystemId or fileSystemArn, but not both, must be provided.');\n    }\n\n    this.fileSystemArn = attrs.fileSystemArn ?? Stack.of(scope).formatArn({\n      service: 'elasticfilesystem',\n      resource: 'file-system',\n      resourceName: attrs.fileSystemId,\n    });\n\n    const parsedArn = Stack.of(scope).splitArn(this.fileSystemArn, ArnFormat.SLASH_RESOURCE_NAME);\n\n    if (!parsedArn.resourceName) {\n      throw new Error(`Invalid FileSystem Arn ${this.fileSystemArn}`);\n    }\n\n    this.fileSystemId = attrs.fileSystemId ?? parsedArn.resourceName;\n\n    this.connections = new ec2.Connections({\n      securityGroups: [attrs.securityGroup],\n      defaultPort: ec2.Port.tcp(FileSystem.DEFAULT_PORT),\n    });\n\n    this.mountTargetsAvailable = new DependencyGroup();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
