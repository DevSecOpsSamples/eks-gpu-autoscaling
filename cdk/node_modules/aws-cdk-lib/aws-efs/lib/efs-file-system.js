"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.FileSystem=exports.ThroughputMode=exports.PerformanceMode=exports.OutOfInfrequentAccessPolicy=exports.LifecyclePolicy=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),ec2=require("../../aws-ec2"),iam=require("../../aws-iam"),core_1=require("../../core"),cxapi=require("../../cx-api"),constructs_1=require("constructs"),access_point_1=require("./access-point"),efs_generated_1=require("./efs.generated");var LifecyclePolicy;(function(LifecyclePolicy2){LifecyclePolicy2.AFTER_7_DAYS="AFTER_7_DAYS",LifecyclePolicy2.AFTER_14_DAYS="AFTER_14_DAYS",LifecyclePolicy2.AFTER_30_DAYS="AFTER_30_DAYS",LifecyclePolicy2.AFTER_60_DAYS="AFTER_60_DAYS",LifecyclePolicy2.AFTER_90_DAYS="AFTER_90_DAYS"})(LifecyclePolicy=exports.LifecyclePolicy||(exports.LifecyclePolicy={}));var OutOfInfrequentAccessPolicy;(function(OutOfInfrequentAccessPolicy2){OutOfInfrequentAccessPolicy2.AFTER_1_ACCESS="AFTER_1_ACCESS"})(OutOfInfrequentAccessPolicy=exports.OutOfInfrequentAccessPolicy||(exports.OutOfInfrequentAccessPolicy={}));var PerformanceMode;(function(PerformanceMode2){PerformanceMode2.GENERAL_PURPOSE="generalPurpose",PerformanceMode2.MAX_IO="maxIO"})(PerformanceMode=exports.PerformanceMode||(exports.PerformanceMode={}));var ThroughputMode;(function(ThroughputMode2){ThroughputMode2.BURSTING="bursting",ThroughputMode2.PROVISIONED="provisioned"})(ThroughputMode=exports.ThroughputMode||(exports.ThroughputMode={}));class FileSystemBase extends core_1.Resource{grant(grantee,...actions){return iam.Grant.addToPrincipal({grantee,actions,resourceArns:[this.fileSystemArn]})}}class FileSystem extends FileSystemBase{constructor(scope,id,props){var _b,_c,_d,_e;super(scope,id);if(this._mountTargetsAvailable=new constructs_1.DependencyGroup,jsiiDeprecationWarnings.aws_cdk_lib_aws_efs_FileSystemProps(props),props.throughputMode===ThroughputMode.PROVISIONED&&props.provisionedThroughputPerSecond===void 0)throw new Error("Property provisionedThroughputPerSecond is required when throughputMode is PROVISIONED");const encrypted=(_b=props.encrypted)!==null&&_b!==void 0?_b:core_1.FeatureFlags.of(this).isEnabled(cxapi.EFS_DEFAULT_ENCRYPTION_AT_REST)?!0:void 0;let lifecyclePolicies=[];props.lifecyclePolicy&&lifecyclePolicies.push({transitionToIa:props.lifecyclePolicy}),props.outOfInfrequentAccessPolicy&&lifecyclePolicies.push({transitionToPrimaryStorageClass:props.outOfInfrequentAccessPolicy});const filesystem=new efs_generated_1.CfnFileSystem(this,"Resource",{encrypted,kmsKeyId:(_c=props.kmsKey)===null||_c===void 0?void 0:_c.keyArn,lifecyclePolicies:lifecyclePolicies.length>0?lifecyclePolicies:void 0,performanceMode:props.performanceMode,throughputMode:props.throughputMode,provisionedThroughputInMibps:(_d=props.provisionedThroughputPerSecond)===null||_d===void 0?void 0:_d.toMebibytes(),backupPolicy:props.enableAutomaticBackups?{status:"ENABLED"}:void 0});filesystem.applyRemovalPolicy(props.removalPolicy),this.fileSystemId=filesystem.ref,this.fileSystemArn=filesystem.attrArn,core_1.Tags.of(this).add("Name",props.fileSystemName||this.node.path);const securityGroup=props.securityGroup||new ec2.SecurityGroup(this,"EfsSecurityGroup",{vpc:props.vpc});this.connections=new ec2.Connections({securityGroups:[securityGroup],defaultPort:ec2.Port.tcp(FileSystem.DEFAULT_PORT)});const subnets=props.vpc.selectSubnets((_e=props.vpcSubnets)!==null&&_e!==void 0?_e:{onePerAz:!0});let mountTargetCount=0;this.mountTargetsAvailable=[],subnets.subnetIds.forEach(subnetId=>{const mountTarget=new efs_generated_1.CfnMountTarget(this,"EfsMountTarget"+ ++mountTargetCount,{fileSystemId:this.fileSystemId,securityGroups:Array.of(securityGroup.securityGroupId),subnetId});this._mountTargetsAvailable.add(mountTarget)}),this.mountTargetsAvailable=this._mountTargetsAvailable}static fromFileSystemAttributes(scope,id,attrs){return jsiiDeprecationWarnings.aws_cdk_lib_aws_efs_FileSystemAttributes(attrs),new ImportedFileSystem(scope,id,attrs)}addAccessPoint(id,accessPointOptions={}){return jsiiDeprecationWarnings.aws_cdk_lib_aws_efs_AccessPointOptions(accessPointOptions),new access_point_1.AccessPoint(this,id,{fileSystem:this,...accessPointOptions})}}exports.FileSystem=FileSystem,_a=JSII_RTTI_SYMBOL_1,FileSystem[_a]={fqn:"aws-cdk-lib.aws_efs.FileSystem",version:"2.20.0"},FileSystem.DEFAULT_PORT=2049;class ImportedFileSystem extends FileSystemBase{constructor(scope,id,attrs){var _b,_c;super(scope,id);if(!!attrs.fileSystemId==!!attrs.fileSystemArn)throw new Error("One of fileSystemId or fileSystemArn, but not both, must be provided.");this.fileSystemArn=(_b=attrs.fileSystemArn)!==null&&_b!==void 0?_b:core_1.Stack.of(scope).formatArn({service:"elasticfilesystem",resource:"file-system",resourceName:attrs.fileSystemId});const parsedArn=core_1.Stack.of(scope).splitArn(this.fileSystemArn,core_1.ArnFormat.SLASH_RESOURCE_NAME);if(!parsedArn.resourceName)throw new Error(`Invalid FileSystem Arn ${this.fileSystemArn}`);this.fileSystemId=(_c=attrs.fileSystemId)!==null&&_c!==void 0?_c:parsedArn.resourceName,this.connections=new ec2.Connections({securityGroups:[attrs.securityGroup],defaultPort:ec2.Port.tcp(FileSystem.DEFAULT_PORT)}),this.mountTargetsAvailable=new constructs_1.DependencyGroup}}
//# sourceMappingURL=efs-file-system.js.map
