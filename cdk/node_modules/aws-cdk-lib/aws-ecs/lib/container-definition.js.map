{
  "version": 3,
  "sources": ["container-definition.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport * as ssm from '../../aws-ssm';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { NetworkMode, TaskDefinition } from './base/task-definition';\nimport { ContainerImage, ContainerImageConfig } from './container-image';\nimport { CfnTaskDefinition } from './ecs.generated';\nimport { EnvironmentFile, EnvironmentFileConfig } from './environment-file';\nimport { LinuxParameters } from './linux-parameters';\nimport { LogDriver, LogDriverConfig } from './log-drivers/log-driver';\n\n/**\n * Specify the secret's version id or version stage\n */\nexport interface SecretVersionInfo {\n  /**\n   * version id of the secret\n   *\n   * @default - use default version id\n   */\n  readonly versionId?: string;\n  /**\n   * version stage of the secret\n   *\n   * @default - use default version stage\n   */\n  readonly versionStage?: string;\n}\n\n/**\n * A secret environment variable.\n */\nexport abstract class Secret {\n  /**\n   * Creates an environment variable value from a parameter stored in AWS\n   * Systems Manager Parameter Store.\n   */\n  public static fromSsmParameter(parameter: ssm.IParameter): Secret {\n    return {\n      arn: parameter.parameterArn,\n      grantRead: grantee => parameter.grantRead(grantee),\n    };\n  }\n\n  /**\n   * Creates a environment variable value from a secret stored in AWS Secrets\n   * Manager.\n   *\n   * @param secret the secret stored in AWS Secrets Manager\n   * @param field the name of the field with the value that you want to set as\n   * the environment variable value. Only values in JSON format are supported.\n   * If you do not specify a JSON field, then the full content of the secret is\n   * used.\n   */\n  public static fromSecretsManager(secret: secretsmanager.ISecret, field?: string): Secret {\n    return {\n      arn: field ? `${secret.secretArn}:${field}::` : secret.secretArn,\n      hasField: !!field,\n      grantRead: grantee => secret.grantRead(grantee),\n    };\n  }\n\n  /**\n   * Creates a environment variable value from a secret stored in AWS Secrets\n   * Manager.\n   *\n   * @param secret the secret stored in AWS Secrets Manager\n   * @param versionInfo the version information to reference the secret\n   * @param field the name of the field with the value that you want to set as\n   * the environment variable value. Only values in JSON format are supported.\n   * If you do not specify a JSON field, then the full content of the secret is\n   * used.\n   */\n  public static fromSecretsManagerVersion(secret: secretsmanager.ISecret, versionInfo: SecretVersionInfo, field?: string): Secret {\n    return {\n      arn: `${secret.secretArn}:${field ?? ''}:${versionInfo.versionStage ?? ''}:${versionInfo.versionId ?? ''}`,\n      hasField: !!field,\n      grantRead: grantee => secret.grantRead(grantee),\n    };\n  }\n\n  /**\n   * The ARN of the secret\n   */\n  public abstract readonly arn: string;\n\n  /**\n   * Whether this secret uses a specific JSON field\n   */\n  public abstract readonly hasField?: boolean;\n\n  /**\n   * Grants reading the secret to a principal\n   */\n  public abstract grantRead(grantee: iam.IGrantable): iam.Grant;\n}\n\n/*\n * The options for creating a container definition.\n */\nexport interface ContainerDefinitionOptions {\n  /**\n   * The image used to start a container.\n   *\n   * This string is passed directly to the Docker daemon.\n   * Images in the Docker Hub registry are available by default.\n   * Other repositories are specified with either repository-url/image:tag or repository-url/image@digest.\n   * TODO: Update these to specify using classes of IContainerImage\n   */\n  readonly image: ContainerImage;\n\n  /**\n   * The name of the container.\n   *\n   * @default - id of node associated with ContainerDefinition.\n   */\n  readonly containerName?: string;\n\n  /**\n   * The command that is passed to the container.\n   *\n   * If you provide a shell command as a single string, you have to quote command-line arguments.\n   *\n   * @default - CMD value built into container image.\n   */\n  readonly command?: string[];\n\n  /**\n   * The minimum number of CPU units to reserve for the container.\n   *\n   * @default - No minimum CPU units reserved.\n   */\n  readonly cpu?: number;\n\n  /**\n   * Specifies whether networking is disabled within the container.\n   *\n   * When this parameter is true, networking is disabled within the container.\n   *\n   * @default false\n   */\n  readonly disableNetworking?: boolean;\n\n  /**\n   * A list of DNS search domains that are presented to the container.\n   *\n   * @default - No search domains.\n   */\n  readonly dnsSearchDomains?: string[];\n\n  /**\n   * A list of DNS servers that are presented to the container.\n   *\n   * @default - Default DNS servers.\n   */\n  readonly dnsServers?: string[];\n\n  /**\n   * A key/value map of labels to add to the container.\n   *\n   * @default - No labels.\n   */\n  readonly dockerLabels?: { [key: string]: string };\n\n  /**\n   * A list of strings to provide custom labels for SELinux and AppArmor multi-level security systems.\n   *\n   * @default - No security labels.\n   */\n  readonly dockerSecurityOptions?: string[];\n\n  /**\n   * The ENTRYPOINT value to pass to the container.\n   *\n   * @see https://docs.docker.com/engine/reference/builder/#entrypoint\n   *\n   * @default - Entry point configured in container.\n   */\n  readonly entryPoint?: string[];\n\n  /**\n   * The environment variables to pass to the container.\n   *\n   * @default - No environment variables.\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * The environment files to pass to the container.\n   *\n   * @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html\n   *\n   * @default - No environment files.\n   */\n  readonly environmentFiles?: EnvironmentFile[];\n\n  /**\n   * The secret environment variables to pass to the container.\n   *\n   * @default - No secret environment variables.\n   */\n  readonly secrets?: { [key: string]: Secret };\n\n  /**\n   * Time duration (in seconds) to wait before giving up on resolving dependencies for a container.\n   *\n   * @default - none\n   */\n  readonly startTimeout?: cdk.Duration;\n\n  /**\n   * Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.\n   *\n   * @default - none\n   */\n  readonly stopTimeout?: cdk.Duration;\n\n  /**\n   * Specifies whether the container is marked essential.\n   *\n   * If the essential parameter of a container is marked as true, and that container fails\n   * or stops for any reason, all other containers that are part of the task are stopped.\n   * If the essential parameter of a container is marked as false, then its failure does not\n   * affect the rest of the containers in a task. All tasks must have at least one essential container.\n   *\n   * If this parameter is omitted, a container is assumed to be essential.\n   *\n   * @default true\n   */\n  readonly essential?: boolean;\n\n  /**\n   * A list of hostnames and IP address mappings to append to the /etc/hosts file on the container.\n   *\n   * @default - No extra hosts.\n   */\n  readonly extraHosts?: { [name: string]: string };\n\n  /**\n   * The health check command and associated configuration parameters for the container.\n   *\n   * @default - Health check configuration from container.\n   */\n  readonly healthCheck?: HealthCheck;\n\n  /**\n   * The hostname to use for your container.\n   *\n   * @default - Automatic hostname.\n   */\n  readonly hostname?: string;\n\n  /**\n   * The amount (in MiB) of memory to present to the container.\n   *\n   * If your container attempts to exceed the allocated memory, the container\n   * is terminated.\n   *\n   * At least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.\n   *\n   * @default - No memory limit.\n   */\n  readonly memoryLimitMiB?: number;\n\n  /**\n   * The soft limit (in MiB) of memory to reserve for the container.\n   *\n   * When system memory is under heavy contention, Docker attempts to keep the\n   * container memory to this soft limit. However, your container can consume more\n   * memory when it needs to, up to either the hard limit specified with the memory\n   * parameter (if applicable), or all of the available memory on the container\n   * instance, whichever comes first.\n   *\n   * At least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.\n   *\n   * @default - No memory reserved.\n   */\n  readonly memoryReservationMiB?: number;\n\n  /**\n   * Specifies whether the container is marked as privileged.\n   * When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user).\n   *\n   * @default false\n   */\n  readonly privileged?: boolean;\n\n  /**\n   * When this parameter is true, the container is given read-only access to its root file system.\n   *\n   * @default false\n   */\n  readonly readonlyRootFilesystem?: boolean;\n\n  /**\n   * The user name to use inside the container.\n   *\n   * @default root\n   */\n  readonly user?: string;\n\n  /**\n   * The working directory in which to run commands inside the container.\n   *\n   * @default /\n   */\n  readonly workingDirectory?: string;\n\n  /**\n   * The log configuration specification for the container.\n   *\n   * @default - Containers use the same logging driver that the Docker daemon uses.\n   */\n  readonly logging?: LogDriver;\n\n  /**\n   * Linux-specific modifications that are applied to the container, such as Linux kernel capabilities.\n   * For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).\n   *\n   * @default - No Linux parameters.\n   */\n  readonly linuxParameters?: LinuxParameters;\n\n  /**\n   * The number of GPUs assigned to the container.\n   *\n   * @default - No GPUs assigned.\n   */\n  readonly gpuCount?: number;\n\n  /**\n   * The port mappings to add to the container definition.\n   * @default - No ports are mapped.\n   */\n  readonly portMappings?: PortMapping[];\n\n  /**\n   * The inference accelerators referenced by the container.\n   * @default - No inference accelerators assigned.\n   */\n  readonly inferenceAcceleratorResources?: string[];\n\n  /**\n   * A list of namespaced kernel parameters to set in the container.\n   *\n   * @default - No system controls are set.\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-systemcontrol.html\n   * @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_systemcontrols\n   */\n  readonly systemControls?: SystemControl[];\n}\n\n/**\n * The properties in a container definition.\n */\nexport interface ContainerDefinitionProps extends ContainerDefinitionOptions {\n  /**\n   * The name of the task definition that includes this container definition.\n   *\n   * [disable-awslint:ref-via-interface]\n   */\n  readonly taskDefinition: TaskDefinition;\n}\n\n/**\n * A container definition is used in a task definition to describe the containers that are launched as part of a task.\n */\nexport class ContainerDefinition extends Construct {\n  /**\n   * The Linux-specific modifications that are applied to the container, such as Linux kernel capabilities.\n   */\n  public readonly linuxParameters?: LinuxParameters;\n\n  /**\n   * The mount points for data volumes in your container.\n   */\n  public readonly mountPoints = new Array<MountPoint>();\n\n  /**\n   * The list of port mappings for the container. Port mappings allow containers to access ports\n   * on the host container instance to send or receive traffic.\n   */\n  public readonly portMappings = new Array<PortMapping>();\n\n  /**\n   * The data volumes to mount from another container in the same task definition.\n   */\n  public readonly volumesFrom = new Array<VolumeFrom>();\n\n  /**\n   * An array of ulimits to set in the container.\n   */\n  public readonly ulimits = new Array<Ulimit>();\n\n  /**\n   * An array dependencies defined for container startup and shutdown.\n   */\n  public readonly containerDependencies = new Array<ContainerDependency>();\n\n  /**\n   * Specifies whether the container will be marked essential.\n   *\n   * If the essential parameter of a container is marked as true, and that container\n   * fails or stops for any reason, all other containers that are part of the task are\n   * stopped. If the essential parameter of a container is marked as false, then its\n   * failure does not affect the rest of the containers in a task.\n   *\n   * If this parameter is omitted, a container is assumed to be essential.\n   */\n  public readonly essential: boolean;\n\n  /**\n   * The name of this container\n   */\n  public readonly containerName: string;\n\n  /**\n   * Whether there was at least one memory limit specified in this definition\n   */\n  public readonly memoryLimitSpecified: boolean;\n\n  /**\n   * The name of the task definition that includes this container definition.\n   */\n  public readonly taskDefinition: TaskDefinition;\n\n  /**\n   * The environment files for this container\n   */\n  public readonly environmentFiles?: EnvironmentFileConfig[];\n\n  /**\n   * The log configuration specification for the container.\n   */\n  public readonly logDriverConfig?: LogDriverConfig;\n\n  /**\n   * Whether this container definition references a specific JSON field of a secret\n   * stored in Secrets Manager.\n   */\n  public readonly referencesSecretJsonField?: boolean;\n\n  /**\n   * The name of the image referenced by this container.\n   */\n  public readonly imageName: string;\n\n  /**\n   * The inference accelerators referenced by this container.\n   */\n  private readonly inferenceAcceleratorResources: string[] = [];\n\n  /**\n   * The configured container links\n   */\n  private readonly links = new Array<string>();\n\n  private readonly imageConfig: ContainerImageConfig;\n\n  private readonly secrets?: CfnTaskDefinition.SecretProperty[];\n\n  private readonly environment: { [key: string]: string };\n\n  /**\n   * Constructs a new instance of the ContainerDefinition class.\n   */\n  constructor(scope: Construct, id: string, private readonly props: ContainerDefinitionProps) {\n    super(scope, id);\n    if (props.memoryLimitMiB !== undefined && props.memoryReservationMiB !== undefined) {\n      if (props.memoryLimitMiB < props.memoryReservationMiB) {\n        throw new Error('MemoryLimitMiB should not be less than MemoryReservationMiB.');\n      }\n    }\n    this.essential = props.essential ?? true;\n    this.taskDefinition = props.taskDefinition;\n    this.memoryLimitSpecified = props.memoryLimitMiB !== undefined || props.memoryReservationMiB !== undefined;\n    this.linuxParameters = props.linuxParameters;\n    this.containerName = props.containerName ?? this.node.id;\n\n    this.imageConfig = props.image.bind(this, this);\n    this.imageName = this.imageConfig.imageName;\n\n    if (props.logging) {\n      this.logDriverConfig = props.logging.bind(this, this);\n    }\n\n    if (props.secrets) {\n      this.secrets = [];\n      for (const [name, secret] of Object.entries(props.secrets)) {\n        if (secret.hasField) {\n          this.referencesSecretJsonField = true;\n        }\n        secret.grantRead(this.taskDefinition.obtainExecutionRole());\n        this.secrets.push({\n          name,\n          valueFrom: secret.arn,\n        });\n      }\n    }\n\n    if (props.environment) {\n      this.environment = { ...props.environment };\n    } else {\n      this.environment = {};\n    }\n\n    if (props.environmentFiles) {\n      this.environmentFiles = [];\n\n      for (const environmentFile of props.environmentFiles) {\n        this.environmentFiles.push(environmentFile.bind(this));\n      }\n    }\n\n    props.taskDefinition._linkContainer(this);\n\n    if (props.portMappings) {\n      this.addPortMappings(...props.portMappings);\n    }\n\n    if (props.inferenceAcceleratorResources) {\n      this.addInferenceAcceleratorResource(...props.inferenceAcceleratorResources);\n    }\n  }\n\n  /**\n   * This method adds a link which allows containers to communicate with each other without the need for port mappings.\n   *\n   * This parameter is only supported if the task definition is using the bridge network mode.\n   * Warning: The --link flag is a legacy feature of Docker. It may eventually be removed.\n   */\n  public addLink(container: ContainerDefinition, alias?: string) {\n    if (this.taskDefinition.networkMode !== NetworkMode.BRIDGE) {\n      throw new Error('You must use network mode Bridge to add container links.');\n    }\n    if (alias !== undefined) {\n      this.links.push(`${container.containerName}:${alias}`);\n    } else {\n      this.links.push(`${container.containerName}`);\n    }\n  }\n\n  /**\n   * This method adds one or more mount points for data volumes to the container.\n   */\n  public addMountPoints(...mountPoints: MountPoint[]) {\n    this.mountPoints.push(...mountPoints);\n  }\n\n  /**\n   * This method mounts temporary disk space to the container.\n   *\n   * This adds the correct container mountPoint and task definition volume.\n   */\n  public addScratch(scratch: ScratchSpace) {\n    const mountPoint = {\n      containerPath: scratch.containerPath,\n      readOnly: scratch.readOnly,\n      sourceVolume: scratch.name,\n    };\n\n    const volume = {\n      host: {\n        sourcePath: scratch.sourcePath,\n      },\n      name: scratch.name,\n    };\n\n    this.taskDefinition.addVolume(volume);\n    this.addMountPoints(mountPoint);\n  }\n\n  /**\n   * This method adds one or more port mappings to the container.\n   */\n  public addPortMappings(...portMappings: PortMapping[]) {\n    this.portMappings.push(...portMappings.map(pm => {\n      if (this.taskDefinition.networkMode === NetworkMode.AWS_VPC || this.taskDefinition.networkMode === NetworkMode.HOST) {\n        if (pm.containerPort !== pm.hostPort && pm.hostPort !== undefined) {\n          throw new Error(`Host port (${pm.hostPort}) must be left out or equal to container port ${pm.containerPort} for network mode ${this.taskDefinition.networkMode}`);\n        }\n      }\n\n      if (this.taskDefinition.networkMode === NetworkMode.BRIDGE) {\n        if (pm.hostPort === undefined) {\n          pm = {\n            ...pm,\n            hostPort: 0,\n          };\n        }\n      }\n\n      return pm;\n    }));\n  }\n\n  /**\n   * This method adds an environment variable to the container.\n   */\n  public addEnvironment(name: string, value: string) {\n    this.environment[name] = value;\n  }\n\n  /**\n   * This method adds one or more resources to the container.\n   */\n  public addInferenceAcceleratorResource(...inferenceAcceleratorResources: string[]) {\n    this.inferenceAcceleratorResources.push(...inferenceAcceleratorResources.map(resource => {\n      for (const inferenceAccelerator of this.taskDefinition.inferenceAccelerators) {\n        if (resource === inferenceAccelerator.deviceName) {\n          return resource;\n        }\n      }\n      throw new Error(`Resource value ${resource} in container definition doesn't match any inference accelerator device name in the task definition.`);\n    }));\n  }\n\n  /**\n   * This method adds one or more ulimits to the container.\n   */\n  public addUlimits(...ulimits: Ulimit[]) {\n    this.ulimits.push(...ulimits);\n  }\n\n  /**\n   * This method adds one or more container dependencies to the container.\n   */\n  public addContainerDependencies(...containerDependencies: ContainerDependency[]) {\n    this.containerDependencies.push(...containerDependencies);\n  }\n\n  /**\n   * This method adds one or more volumes to the container.\n   */\n  public addVolumesFrom(...volumesFrom: VolumeFrom[]) {\n    this.volumesFrom.push(...volumesFrom);\n  }\n\n  /**\n   * This method adds the specified statement to the IAM task execution policy in the task definition.\n   */\n  public addToExecutionPolicy(statement: iam.PolicyStatement) {\n    this.taskDefinition.addToExecutionRolePolicy(statement);\n  }\n\n  /**\n   * Returns the host port for the requested container port if it exists\n   */\n  public findPortMapping(containerPort: number, protocol: Protocol): PortMapping | undefined {\n    for (const portMapping of this.portMappings) {\n      const p = portMapping.protocol || Protocol.TCP;\n      const c = portMapping.containerPort;\n      if (c === containerPort && p === protocol) {\n        return portMapping;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * The inbound rules associated with the security group the task or service will use.\n   *\n   * This property is only used for tasks that use the awsvpc network mode.\n   */\n  public get ingressPort(): number {\n    if (this.portMappings.length === 0) {\n      throw new Error(`Container ${this.containerName} hasn't defined any ports. Call addPortMappings().`);\n    }\n    const defaultPortMapping = this.portMappings[0];\n\n    if (defaultPortMapping.hostPort !== undefined && defaultPortMapping.hostPort !== 0) {\n      return defaultPortMapping.hostPort;\n    }\n\n    if (this.taskDefinition.networkMode === NetworkMode.BRIDGE) {\n      return 0;\n    }\n    return defaultPortMapping.containerPort;\n  }\n\n  /**\n   * The port the container will listen on.\n   */\n  public get containerPort(): number {\n    if (this.portMappings.length === 0) {\n      throw new Error(`Container ${this.containerName} hasn't defined any ports. Call addPortMappings().`);\n    }\n    const defaultPortMapping = this.portMappings[0];\n    return defaultPortMapping.containerPort;\n  }\n\n  /**\n   * Render this container definition to a CloudFormation object\n   *\n   * @param _taskDefinition [disable-awslint:ref-via-interface] (unused but kept to avoid breaking change)\n   */\n  public renderContainerDefinition(_taskDefinition?: TaskDefinition): CfnTaskDefinition.ContainerDefinitionProperty {\n    return {\n      command: this.props.command,\n      cpu: this.props.cpu,\n      disableNetworking: this.props.disableNetworking,\n      dependsOn: cdk.Lazy.any({ produce: () => this.containerDependencies.map(renderContainerDependency) }, { omitEmptyArray: true }),\n      dnsSearchDomains: this.props.dnsSearchDomains,\n      dnsServers: this.props.dnsServers,\n      dockerLabels: this.props.dockerLabels,\n      dockerSecurityOptions: this.props.dockerSecurityOptions,\n      entryPoint: this.props.entryPoint,\n      essential: this.essential,\n      hostname: this.props.hostname,\n      image: this.imageConfig.imageName,\n      memory: this.props.memoryLimitMiB,\n      memoryReservation: this.props.memoryReservationMiB,\n      mountPoints: cdk.Lazy.any({ produce: () => this.mountPoints.map(renderMountPoint) }, { omitEmptyArray: true }),\n      name: this.containerName,\n      portMappings: cdk.Lazy.any({ produce: () => this.portMappings.map(renderPortMapping) }, { omitEmptyArray: true }),\n      privileged: this.props.privileged,\n      readonlyRootFilesystem: this.props.readonlyRootFilesystem,\n      repositoryCredentials: this.imageConfig.repositoryCredentials,\n      startTimeout: this.props.startTimeout && this.props.startTimeout.toSeconds(),\n      stopTimeout: this.props.stopTimeout && this.props.stopTimeout.toSeconds(),\n      ulimits: cdk.Lazy.any({ produce: () => this.ulimits.map(renderUlimit) }, { omitEmptyArray: true }),\n      user: this.props.user,\n      volumesFrom: cdk.Lazy.any({ produce: () => this.volumesFrom.map(renderVolumeFrom) }, { omitEmptyArray: true }),\n      workingDirectory: this.props.workingDirectory,\n      logConfiguration: this.logDriverConfig,\n      environment: this.environment && Object.keys(this.environment).length ? renderKV(this.environment, 'name', 'value') : undefined,\n      environmentFiles: this.environmentFiles && renderEnvironmentFiles(cdk.Stack.of(this).partition, this.environmentFiles),\n      secrets: this.secrets,\n      extraHosts: this.props.extraHosts && renderKV(this.props.extraHosts, 'hostname', 'ipAddress'),\n      healthCheck: this.props.healthCheck && renderHealthCheck(this.props.healthCheck),\n      links: cdk.Lazy.list({ produce: () => this.links }, { omitEmpty: true }),\n      linuxParameters: this.linuxParameters && this.linuxParameters.renderLinuxParameters(),\n      resourceRequirements: (!this.props.gpuCount && this.inferenceAcceleratorResources.length == 0 ) ? undefined :\n        renderResourceRequirements(this.props.gpuCount, this.inferenceAcceleratorResources),\n      systemControls: this.props.systemControls && renderSystemControls(this.props.systemControls),\n    };\n  }\n}\n\n/**\n * The health check command and associated configuration parameters for the container.\n */\nexport interface HealthCheck {\n  /**\n   * A string array representing the command that the container runs to determine if it is healthy.\n   * The string array must start with CMD to execute the command arguments directly, or\n   * CMD-SHELL to run the command with the container's default shell.\n   *\n   * For example: [ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ]\n   */\n  readonly command: string[];\n\n  /**\n   * The time period in seconds between each health check execution.\n   *\n   * You may specify between 5 and 300 seconds.\n   *\n   * @default Duration.seconds(30)\n   */\n  readonly interval?: cdk.Duration;\n\n  /**\n   * The number of times to retry a failed health check before the container is considered unhealthy.\n   *\n   * You may specify between 1 and 10 retries.\n   *\n   * @default 3\n   */\n  readonly retries?: number;\n\n  /**\n   * The optional grace period within which to provide containers time to bootstrap before\n   * failed health checks count towards the maximum number of retries.\n   *\n   * You may specify between 0 and 300 seconds.\n   *\n   * @default No start period\n   */\n  readonly startPeriod?: cdk.Duration;\n\n  /**\n   * The time period in seconds to wait for a health check to succeed before it is considered a failure.\n   *\n   * You may specify between 2 and 60 seconds.\n   *\n   * @default Duration.seconds(5)\n   */\n  readonly timeout?: cdk.Duration;\n}\n\nfunction renderKV(env: { [key: string]: string }, keyName: string, valueName: string): any[] {\n  const ret = [];\n  for (const [key, value] of Object.entries(env)) {\n    ret.push({ [keyName]: key, [valueName]: value });\n  }\n  return ret;\n}\n\nfunction renderEnvironmentFiles(partition: string, environmentFiles: EnvironmentFileConfig[]): any[] {\n  const ret = [];\n  for (const environmentFile of environmentFiles) {\n    const s3Location = environmentFile.s3Location;\n\n    if (!s3Location) {\n      throw Error('Environment file must specify an S3 location');\n    }\n\n    ret.push({\n      type: environmentFile.fileType,\n      value: `arn:${partition}:s3:::${s3Location.bucketName}/${s3Location.objectKey}`,\n    });\n  }\n  return ret;\n}\n\nfunction renderHealthCheck(hc: HealthCheck): CfnTaskDefinition.HealthCheckProperty {\n  return {\n    command: getHealthCheckCommand(hc),\n    interval: hc.interval?.toSeconds() ?? 30,\n    retries: hc.retries ?? 3,\n    startPeriod: hc.startPeriod?.toSeconds(),\n    timeout: hc.timeout?.toSeconds() ?? 5,\n  };\n}\n\nfunction getHealthCheckCommand(hc: HealthCheck): string[] {\n  const cmd = hc.command;\n  const hcCommand = new Array<string>();\n\n  if (cmd.length === 0) {\n    throw new Error('At least one argument must be supplied for health check command.');\n  }\n\n  if (cmd.length === 1) {\n    hcCommand.push('CMD-SHELL', cmd[0]);\n    return hcCommand;\n  }\n\n  if (cmd[0] !== 'CMD' && cmd[0] !== 'CMD-SHELL') {\n    hcCommand.push('CMD');\n  }\n\n  return hcCommand.concat(cmd);\n}\n\nfunction renderResourceRequirements(gpuCount: number = 0, inferenceAcceleratorResources: string[] = []):\nCfnTaskDefinition.ResourceRequirementProperty[] | undefined {\n  const ret = [];\n  for (const resource of inferenceAcceleratorResources) {\n    ret.push({\n      type: 'InferenceAccelerator',\n      value: resource,\n    });\n  }\n  if (gpuCount > 0) {\n    ret.push({\n      type: 'GPU',\n      value: gpuCount.toString(),\n    });\n  }\n  return ret;\n}\n\n/**\n * The ulimit settings to pass to the container.\n *\n * NOTE: Does not work for Windows containers.\n */\nexport interface Ulimit {\n  /**\n   * The type of the ulimit.\n   *\n   * For more information, see [UlimitName](https://docs.aws.amazon.com/cdk/api/latest/typescript/api/aws-ecs/ulimitname.html#aws_ecs_UlimitName).\n   */\n  readonly name: UlimitName,\n\n  /**\n   * The soft limit for the ulimit type.\n   */\n  readonly softLimit: number,\n\n  /**\n   * The hard limit for the ulimit type.\n   */\n  readonly hardLimit: number,\n}\n\n/**\n * Type of resource to set a limit on\n */\nexport enum UlimitName {\n  CORE = 'core',\n  CPU = 'cpu',\n  DATA = 'data',\n  FSIZE = 'fsize',\n  LOCKS = 'locks',\n  MEMLOCK = 'memlock',\n  MSGQUEUE = 'msgqueue',\n  NICE = 'nice',\n  NOFILE = 'nofile',\n  NPROC = 'nproc',\n  RSS = 'rss',\n  RTPRIO = 'rtprio',\n  RTTIME = 'rttime',\n  SIGPENDING = 'sigpending',\n  STACK = 'stack'\n}\n\nfunction renderUlimit(ulimit: Ulimit): CfnTaskDefinition.UlimitProperty {\n  return {\n    name: ulimit.name,\n    softLimit: ulimit.softLimit,\n    hardLimit: ulimit.hardLimit,\n  };\n}\n/**\n * The details of a dependency on another container in the task definition.\n *\n * @see https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDependency.html\n */\nexport interface ContainerDependency {\n  /**\n   * The container to depend on.\n   */\n  readonly container: ContainerDefinition;\n\n  /**\n   * The state the container needs to be in to satisfy the dependency and proceed with startup.\n   * Valid values are ContainerDependencyCondition.START, ContainerDependencyCondition.COMPLETE,\n   * ContainerDependencyCondition.SUCCESS and ContainerDependencyCondition.HEALTHY.\n   *\n   * @default ContainerDependencyCondition.HEALTHY\n   */\n  readonly condition?: ContainerDependencyCondition;\n}\n\nexport enum ContainerDependencyCondition {\n  /**\n   * This condition emulates the behavior of links and volumes today.\n   * It validates that a dependent container is started before permitting other containers to start.\n   */\n  START = 'START',\n\n  /**\n   * This condition validates that a dependent container runs to completion (exits) before permitting other containers to start.\n   * This can be useful for nonessential containers that run a script and then exit.\n   */\n  COMPLETE = 'COMPLETE',\n\n  /**\n   * This condition is the same as COMPLETE, but it also requires that the container exits with a zero status.\n   */\n  SUCCESS = 'SUCCESS',\n\n  /**\n   * This condition validates that the dependent container passes its Docker health check before permitting other containers to start.\n   * This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.\n   */\n  HEALTHY = 'HEALTHY',\n}\n\nfunction renderContainerDependency(containerDependency: ContainerDependency): CfnTaskDefinition.ContainerDependencyProperty {\n  return {\n    containerName: containerDependency.container.containerName,\n    condition: containerDependency.condition || ContainerDependencyCondition.HEALTHY,\n  };\n}\n\n/**\n * Port mappings allow containers to access ports on the host container instance to send or receive traffic.\n */\nexport interface PortMapping {\n  /**\n   * The port number on the container that is bound to the user-specified or automatically assigned host port.\n   *\n   * If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\n   * If you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\n   * your container automatically receives a host port in the ephemeral port range.\n   *\n   * For more information, see hostPort.\n   * Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n   */\n  readonly containerPort: number;\n\n  /**\n   * The port number on the container instance to reserve for your container.\n   *\n   * If you are using containers in a task with the awsvpc or host network mode,\n   * the hostPort can either be left blank or set to the same value as the containerPort.\n   *\n   * If you are using containers in a task with the bridge network mode,\n   * you can specify a non-reserved host port for your container port mapping, or\n   * you can omit the hostPort (or set it to 0) while specifying a containerPort and\n   * your container automatically receives a port in the ephemeral port range for\n   * your container instance operating system and Docker version.\n   */\n  readonly hostPort?: number;\n\n  /**\n   * The protocol used for the port mapping. Valid values are Protocol.TCP and Protocol.UDP.\n   *\n   * @default TCP\n   */\n  readonly protocol?: Protocol\n}\n\n/**\n * Network protocol\n */\nexport enum Protocol {\n  /**\n   * TCP\n   */\n  TCP = 'tcp',\n\n  /**\n   * UDP\n   */\n  UDP = 'udp',\n}\n\nfunction renderPortMapping(pm: PortMapping): CfnTaskDefinition.PortMappingProperty {\n  return {\n    containerPort: pm.containerPort,\n    hostPort: pm.hostPort,\n    protocol: pm.protocol || Protocol.TCP,\n  };\n}\n\n/**\n * The temporary disk space mounted to the container.\n */\nexport interface ScratchSpace {\n  /**\n   * The path on the container to mount the scratch volume at.\n   */\n  readonly containerPath: string,\n  /**\n   * Specifies whether to give the container read-only access to the scratch volume.\n   *\n   * If this value is true, the container has read-only access to the scratch volume.\n   * If this value is false, then the container can write to the scratch volume.\n   */\n  readonly readOnly: boolean,\n  readonly sourcePath: string,\n  /**\n   * The name of the scratch volume to mount. Must be a volume name referenced in the name parameter of task definition volume.\n   */\n  readonly name: string,\n}\n\n/**\n * The details of data volume mount points for a container.\n */\nexport interface MountPoint {\n  /**\n   * The path on the container to mount the host volume at.\n   */\n  readonly containerPath: string,\n  /**\n   * Specifies whether to give the container read-only access to the volume.\n   *\n   * If this value is true, the container has read-only access to the volume.\n   * If this value is false, then the container can write to the volume.\n   */\n  readonly readOnly: boolean,\n  /**\n   * The name of the volume to mount.\n   *\n   * Must be a volume name referenced in the name parameter of task definition volume.\n   */\n  readonly sourceVolume: string,\n}\n\nfunction renderMountPoint(mp: MountPoint): CfnTaskDefinition.MountPointProperty {\n  return {\n    containerPath: mp.containerPath,\n    readOnly: mp.readOnly,\n    sourceVolume: mp.sourceVolume,\n  };\n}\n\n/**\n * The details on a data volume from another container in the same task definition.\n */\nexport interface VolumeFrom {\n  /**\n   * The name of another container within the same task definition from which to mount volumes.\n   */\n  readonly sourceContainer: string,\n\n  /**\n   * Specifies whether the container has read-only access to the volume.\n   *\n   * If this value is true, the container has read-only access to the volume.\n   * If this value is false, then the container can write to the volume.\n   */\n  readonly readOnly: boolean,\n}\n\nfunction renderVolumeFrom(vf: VolumeFrom): CfnTaskDefinition.VolumeFromProperty {\n  return {\n    sourceContainer: vf.sourceContainer,\n    readOnly: vf.readOnly,\n  };\n}\n\n/**\n * Kernel parameters to set in the container\n */\nexport interface SystemControl {\n  /**\n   * The namespaced kernel parameter for which to set a value.\n   */\n  readonly namespace: string;\n\n  /**\n   * The value for the namespaced kernel parameter specified in namespace.\n   */\n  readonly value: string;\n}\n\nfunction renderSystemControls(systemControls: SystemControl[]): CfnTaskDefinition.SystemControlProperty[] {\n  return systemControls.map(sc => ({\n    namespace: sc.namespace,\n    value: sc.value,\n  }));\n}\n"],
  "mappings": "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",
  "names": []
}
