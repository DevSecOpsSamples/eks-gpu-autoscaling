"use strict";var _a,_b;Object.defineProperty(exports,"__esModule",{value:!0}),exports.Protocol=exports.ContainerDependencyCondition=exports.UlimitName=exports.ContainerDefinition=exports.Secret=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),cdk=require("../../core"),constructs_1=require("constructs"),task_definition_1=require("./base/task-definition");class Secret{static fromSsmParameter(parameter){return jsiiDeprecationWarnings.aws_cdk_lib_aws_ssm_IParameter(parameter),{arn:parameter.parameterArn,grantRead:grantee=>parameter.grantRead(grantee)}}static fromSecretsManager(secret,field){return jsiiDeprecationWarnings.aws_cdk_lib_aws_secretsmanager_ISecret(secret),{arn:field?`${secret.secretArn}:${field}::`:secret.secretArn,hasField:!!field,grantRead:grantee=>secret.grantRead(grantee)}}static fromSecretsManagerVersion(secret,versionInfo,field){var _c,_d;return jsiiDeprecationWarnings.aws_cdk_lib_aws_secretsmanager_ISecret(secret),jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_SecretVersionInfo(versionInfo),{arn:`${secret.secretArn}:${field!=null?field:""}:${(_c=versionInfo.versionStage)!==null&&_c!==void 0?_c:""}:${(_d=versionInfo.versionId)!==null&&_d!==void 0?_d:""}`,hasField:!!field,grantRead:grantee=>secret.grantRead(grantee)}}}exports.Secret=Secret,_a=JSII_RTTI_SYMBOL_1,Secret[_a]={fqn:"aws-cdk-lib.aws_ecs.Secret",version:"2.20.0"};class ContainerDefinition extends constructs_1.Construct{constructor(scope,id,props){var _c,_d;super(scope,id);if(this.props=props,this.mountPoints=new Array,this.portMappings=new Array,this.volumesFrom=new Array,this.ulimits=new Array,this.containerDependencies=new Array,this.inferenceAcceleratorResources=[],this.links=new Array,jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_ContainerDefinitionProps(props),props.memoryLimitMiB!==void 0&&props.memoryReservationMiB!==void 0&&props.memoryLimitMiB<props.memoryReservationMiB)throw new Error("MemoryLimitMiB should not be less than MemoryReservationMiB.");if(this.essential=(_c=props.essential)!==null&&_c!==void 0?_c:!0,this.taskDefinition=props.taskDefinition,this.memoryLimitSpecified=props.memoryLimitMiB!==void 0||props.memoryReservationMiB!==void 0,this.linuxParameters=props.linuxParameters,this.containerName=(_d=props.containerName)!==null&&_d!==void 0?_d:this.node.id,this.imageConfig=props.image.bind(this,this),this.imageName=this.imageConfig.imageName,props.logging&&(this.logDriverConfig=props.logging.bind(this,this)),props.secrets){this.secrets=[];for(const[name,secret]of Object.entries(props.secrets))secret.hasField&&(this.referencesSecretJsonField=!0),secret.grantRead(this.taskDefinition.obtainExecutionRole()),this.secrets.push({name,valueFrom:secret.arn})}if(props.environment?this.environment={...props.environment}:this.environment={},props.environmentFiles){this.environmentFiles=[];for(const environmentFile of props.environmentFiles)this.environmentFiles.push(environmentFile.bind(this))}props.taskDefinition._linkContainer(this),props.portMappings&&this.addPortMappings(...props.portMappings),props.inferenceAcceleratorResources&&this.addInferenceAcceleratorResource(...props.inferenceAcceleratorResources)}addLink(container,alias){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_ContainerDefinition(container),this.taskDefinition.networkMode!==task_definition_1.NetworkMode.BRIDGE)throw new Error("You must use network mode Bridge to add container links.");alias!==void 0?this.links.push(`${container.containerName}:${alias}`):this.links.push(`${container.containerName}`)}addMountPoints(...mountPoints){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_MountPoint(mountPoints),this.mountPoints.push(...mountPoints)}addScratch(scratch){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_ScratchSpace(scratch);const mountPoint={containerPath:scratch.containerPath,readOnly:scratch.readOnly,sourceVolume:scratch.name},volume={host:{sourcePath:scratch.sourcePath},name:scratch.name};this.taskDefinition.addVolume(volume),this.addMountPoints(mountPoint)}addPortMappings(...portMappings){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_PortMapping(portMappings),this.portMappings.push(...portMappings.map(pm=>{if((this.taskDefinition.networkMode===task_definition_1.NetworkMode.AWS_VPC||this.taskDefinition.networkMode===task_definition_1.NetworkMode.HOST)&&pm.containerPort!==pm.hostPort&&pm.hostPort!==void 0)throw new Error(`Host port (${pm.hostPort}) must be left out or equal to container port ${pm.containerPort} for network mode ${this.taskDefinition.networkMode}`);return this.taskDefinition.networkMode===task_definition_1.NetworkMode.BRIDGE&&pm.hostPort===void 0&&(pm={...pm,hostPort:0}),pm}))}addEnvironment(name,value){this.environment[name]=value}addInferenceAcceleratorResource(...inferenceAcceleratorResources){this.inferenceAcceleratorResources.push(...inferenceAcceleratorResources.map(resource=>{for(const inferenceAccelerator of this.taskDefinition.inferenceAccelerators)if(resource===inferenceAccelerator.deviceName)return resource;throw new Error(`Resource value ${resource} in container definition doesn't match any inference accelerator device name in the task definition.`)}))}addUlimits(...ulimits){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_Ulimit(ulimits),this.ulimits.push(...ulimits)}addContainerDependencies(...containerDependencies){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_ContainerDependency(containerDependencies),this.containerDependencies.push(...containerDependencies)}addVolumesFrom(...volumesFrom){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_VolumeFrom(volumesFrom),this.volumesFrom.push(...volumesFrom)}addToExecutionPolicy(statement){jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_PolicyStatement(statement),this.taskDefinition.addToExecutionRolePolicy(statement)}findPortMapping(containerPort,protocol){jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_Protocol(protocol);for(const portMapping of this.portMappings){const p=portMapping.protocol||Protocol.TCP;if(portMapping.containerPort===containerPort&&p===protocol)return portMapping}}get ingressPort(){if(this.portMappings.length===0)throw new Error(`Container ${this.containerName} hasn't defined any ports. Call addPortMappings().`);const defaultPortMapping=this.portMappings[0];return defaultPortMapping.hostPort!==void 0&&defaultPortMapping.hostPort!==0?defaultPortMapping.hostPort:this.taskDefinition.networkMode===task_definition_1.NetworkMode.BRIDGE?0:defaultPortMapping.containerPort}get containerPort(){if(this.portMappings.length===0)throw new Error(`Container ${this.containerName} hasn't defined any ports. Call addPortMappings().`);return this.portMappings[0].containerPort}renderContainerDefinition(_taskDefinition){return jsiiDeprecationWarnings.aws_cdk_lib_aws_ecs_TaskDefinition(_taskDefinition),{command:this.props.command,cpu:this.props.cpu,disableNetworking:this.props.disableNetworking,dependsOn:cdk.Lazy.any({produce:()=>this.containerDependencies.map(renderContainerDependency)},{omitEmptyArray:!0}),dnsSearchDomains:this.props.dnsSearchDomains,dnsServers:this.props.dnsServers,dockerLabels:this.props.dockerLabels,dockerSecurityOptions:this.props.dockerSecurityOptions,entryPoint:this.props.entryPoint,essential:this.essential,hostname:this.props.hostname,image:this.imageConfig.imageName,memory:this.props.memoryLimitMiB,memoryReservation:this.props.memoryReservationMiB,mountPoints:cdk.Lazy.any({produce:()=>this.mountPoints.map(renderMountPoint)},{omitEmptyArray:!0}),name:this.containerName,portMappings:cdk.Lazy.any({produce:()=>this.portMappings.map(renderPortMapping)},{omitEmptyArray:!0}),privileged:this.props.privileged,readonlyRootFilesystem:this.props.readonlyRootFilesystem,repositoryCredentials:this.imageConfig.repositoryCredentials,startTimeout:this.props.startTimeout&&this.props.startTimeout.toSeconds(),stopTimeout:this.props.stopTimeout&&this.props.stopTimeout.toSeconds(),ulimits:cdk.Lazy.any({produce:()=>this.ulimits.map(renderUlimit)},{omitEmptyArray:!0}),user:this.props.user,volumesFrom:cdk.Lazy.any({produce:()=>this.volumesFrom.map(renderVolumeFrom)},{omitEmptyArray:!0}),workingDirectory:this.props.workingDirectory,logConfiguration:this.logDriverConfig,environment:this.environment&&Object.keys(this.environment).length?renderKV(this.environment,"name","value"):void 0,environmentFiles:this.environmentFiles&&renderEnvironmentFiles(cdk.Stack.of(this).partition,this.environmentFiles),secrets:this.secrets,extraHosts:this.props.extraHosts&&renderKV(this.props.extraHosts,"hostname","ipAddress"),healthCheck:this.props.healthCheck&&renderHealthCheck(this.props.healthCheck),links:cdk.Lazy.list({produce:()=>this.links},{omitEmpty:!0}),linuxParameters:this.linuxParameters&&this.linuxParameters.renderLinuxParameters(),resourceRequirements:!this.props.gpuCount&&this.inferenceAcceleratorResources.length==0?void 0:renderResourceRequirements(this.props.gpuCount,this.inferenceAcceleratorResources),systemControls:this.props.systemControls&&renderSystemControls(this.props.systemControls)}}}exports.ContainerDefinition=ContainerDefinition,_b=JSII_RTTI_SYMBOL_1,ContainerDefinition[_b]={fqn:"aws-cdk-lib.aws_ecs.ContainerDefinition",version:"2.20.0"};function renderKV(env,keyName,valueName){const ret=[];for(const[key,value]of Object.entries(env))ret.push({[keyName]:key,[valueName]:value});return ret}function renderEnvironmentFiles(partition,environmentFiles){const ret=[];for(const environmentFile of environmentFiles){const s3Location=environmentFile.s3Location;if(!s3Location)throw Error("Environment file must specify an S3 location");ret.push({type:environmentFile.fileType,value:`arn:${partition}:s3:::${s3Location.bucketName}/${s3Location.objectKey}`})}return ret}function renderHealthCheck(hc){var _c,_d,_e,_f,_g,_h;return{command:getHealthCheckCommand(hc),interval:(_d=(_c=hc.interval)===null||_c===void 0?void 0:_c.toSeconds())!==null&&_d!==void 0?_d:30,retries:(_e=hc.retries)!==null&&_e!==void 0?_e:3,startPeriod:(_f=hc.startPeriod)===null||_f===void 0?void 0:_f.toSeconds(),timeout:(_h=(_g=hc.timeout)===null||_g===void 0?void 0:_g.toSeconds())!==null&&_h!==void 0?_h:5}}function getHealthCheckCommand(hc){const cmd=hc.command,hcCommand=new Array;if(cmd.length===0)throw new Error("At least one argument must be supplied for health check command.");return cmd.length===1?(hcCommand.push("CMD-SHELL",cmd[0]),hcCommand):(cmd[0]!=="CMD"&&cmd[0]!=="CMD-SHELL"&&hcCommand.push("CMD"),hcCommand.concat(cmd))}function renderResourceRequirements(gpuCount=0,inferenceAcceleratorResources=[]){const ret=[];for(const resource of inferenceAcceleratorResources)ret.push({type:"InferenceAccelerator",value:resource});return gpuCount>0&&ret.push({type:"GPU",value:gpuCount.toString()}),ret}var UlimitName;(function(UlimitName2){UlimitName2.CORE="core",UlimitName2.CPU="cpu",UlimitName2.DATA="data",UlimitName2.FSIZE="fsize",UlimitName2.LOCKS="locks",UlimitName2.MEMLOCK="memlock",UlimitName2.MSGQUEUE="msgqueue",UlimitName2.NICE="nice",UlimitName2.NOFILE="nofile",UlimitName2.NPROC="nproc",UlimitName2.RSS="rss",UlimitName2.RTPRIO="rtprio",UlimitName2.RTTIME="rttime",UlimitName2.SIGPENDING="sigpending",UlimitName2.STACK="stack"})(UlimitName=exports.UlimitName||(exports.UlimitName={}));function renderUlimit(ulimit){return{name:ulimit.name,softLimit:ulimit.softLimit,hardLimit:ulimit.hardLimit}}var ContainerDependencyCondition;(function(ContainerDependencyCondition2){ContainerDependencyCondition2.START="START",ContainerDependencyCondition2.COMPLETE="COMPLETE",ContainerDependencyCondition2.SUCCESS="SUCCESS",ContainerDependencyCondition2.HEALTHY="HEALTHY"})(ContainerDependencyCondition=exports.ContainerDependencyCondition||(exports.ContainerDependencyCondition={}));function renderContainerDependency(containerDependency){return{containerName:containerDependency.container.containerName,condition:containerDependency.condition||ContainerDependencyCondition.HEALTHY}}var Protocol;(function(Protocol2){Protocol2.TCP="tcp",Protocol2.UDP="udp"})(Protocol=exports.Protocol||(exports.Protocol={}));function renderPortMapping(pm){return{containerPort:pm.containerPort,hostPort:pm.hostPort,protocol:pm.protocol||Protocol.TCP}}function renderMountPoint(mp){return{containerPath:mp.containerPath,readOnly:mp.readOnly,sourceVolume:mp.sourceVolume}}function renderVolumeFrom(vf){return{sourceContainer:vf.sourceContainer,readOnly:vf.readOnly}}function renderSystemControls(systemControls){return systemControls.map(sc=>({namespace:sc.namespace,value:sc.value}))}
//# sourceMappingURL=container-definition.js.map
