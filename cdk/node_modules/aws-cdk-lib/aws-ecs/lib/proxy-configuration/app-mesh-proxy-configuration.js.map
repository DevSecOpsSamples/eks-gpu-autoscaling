{
  "version": 3,
  "sources": ["app-mesh-proxy-configuration.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { TaskDefinition } from '../base/task-definition';\nimport { CfnTaskDefinition } from '../ecs.generated';\nimport { ProxyConfiguration } from './proxy-configuration';\n\n/**\n * Interface for setting the properties of proxy configuration.\n */\nexport interface AppMeshProxyConfigurationProps {\n  /**\n   * The user ID (UID) of the proxy container as defined by the user parameter in a container definition.\n   * This is used to ensure the proxy ignores its own traffic. If IgnoredGID is specified, this field can be empty.\n   */\n  readonly ignoredUID?: number;\n\n  /**\n   * The group ID (GID) of the proxy container as defined by the user parameter in a container definition.\n   * This is used to ensure the proxy ignores its own traffic. If IgnoredUID is specified, this field can be empty.\n   */\n  readonly ignoredGID?: number;\n\n  /**\n   * The list of ports that the application uses.\n   * Network traffic to these ports is forwarded to the ProxyIngressPort and ProxyEgressPort.\n   */\n  readonly appPorts: number[];\n\n  /**\n   * Specifies the port that incoming traffic to the AppPorts is directed to.\n   */\n  readonly proxyIngressPort: number;\n\n  /**\n   * Specifies the port that outgoing traffic from the AppPorts is directed to.\n   */\n  readonly proxyEgressPort: number;\n\n  /**\n   * The egress traffic going to these specified ports is ignored and not redirected to the ProxyEgressPort. It can be an empty list.\n   */\n  readonly egressIgnoredPorts?: number[];\n\n  /**\n   * The egress traffic going to these specified IP addresses is ignored and not redirected to the ProxyEgressPort. It can be an empty list.\n   */\n  readonly egressIgnoredIPs?: string[];\n}\n\n/**\n * The configuration to use when setting an App Mesh proxy configuration.\n */\nexport interface AppMeshProxyConfigurationConfigProps {\n  /**\n   * The name of the container that will serve as the App Mesh proxy.\n   */\n  readonly containerName: string;\n\n  /**\n   * The set of network configuration parameters to provide the Container Network Interface (CNI) plugin.\n   */\n  readonly properties: AppMeshProxyConfigurationProps;\n}\n\n/**\n * The class for App Mesh proxy configurations.\n *\n * For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version\n * 1.26.0-1 of the ecs-init package to enable a proxy configuration. If your container instances are launched from the Amazon ECS-optimized\n * AMI version 20190301 or later, then they contain the required versions of the container agent and ecs-init.\n * For more information, see [Amazon ECS-optimized AMIs](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).\n *\n * For tasks using the Fargate launch type, the task or service requires platform version 1.3.0 or later.\n */\nexport class AppMeshProxyConfiguration extends ProxyConfiguration {\n  /**\n   * Constructs a new instance of the AppMeshProxyConfiguration class.\n   */\n  constructor(private readonly props: AppMeshProxyConfigurationConfigProps) {\n    super();\n    if (props.properties) {\n      if (!props.properties.ignoredUID && !props.properties.ignoredGID) {\n        throw new Error('At least one of ignoredUID or ignoredGID should be specified.');\n      }\n    }\n  }\n\n  /**\n   * Called when the proxy configuration is configured on a task definition.\n   */\n  public bind(_scope: Construct, _taskDefinition: TaskDefinition): CfnTaskDefinition.ProxyConfigurationProperty {\n    const configProps = this.props.properties;\n    const configType = 'APPMESH';\n    return {\n      containerName: this.props.containerName,\n      proxyConfigurationProperties: renderProperties(configProps),\n      type: configType,\n    };\n  }\n}\n\nfunction renderProperties(props: AppMeshProxyConfigurationProps): CfnTaskDefinition.KeyValuePairProperty[] {\n  const ret = new Array<CfnTaskDefinition.KeyValuePairProperty>();\n  for (const [k, v] of Object.entries(props)) {\n    const key = String(k);\n    const value = String(v);\n    if (value !== 'undefined' && value !== '') {\n      const capitalizedKey = key.charAt(0).toUpperCase() + key.slice(1);\n      ret.push({ ['name']: capitalizedKey, ['value']: value });\n    }\n  }\n  return ret;\n}"],
  "mappings": "mOAGA,sBAAA,QAAA,uBAAA,EAsEA,MAAa,iCAAkC,uBAAA,kBAAkB,CAI/D,YAA6B,MAA2C,CACtE,MAAK,EACL,GAF2B,KAAA,MAAA,8FAEvB,MAAM,YACJ,CAAC,MAAM,WAAW,YAAc,CAAC,MAAM,WAAW,WACpD,KAAM,IAAI,OAAM,+DAA+D,EAQ9E,KAAK,OAAmB,gBAA+B,6EAC5D,KAAM,aAAc,KAAK,MAAM,WACzB,WAAa,UACnB,MAAO,CACL,cAAe,KAAK,MAAM,cAC1B,6BAA8B,iBAAiB,WAAW,EAC1D,KAAM,aAtBZ,QAAA,0BAAA,qJA2BA,0BAA0B,MAAqC,CAC7D,KAAM,KAAM,GAAI,OAChB,SAAW,CAAC,EAAG,IAAM,QAAO,QAAQ,KAAK,EAAG,CAC1C,KAAM,KAAM,OAAO,CAAC,EACd,MAAQ,OAAO,CAAC,EACtB,GAAI,QAAU,aAAe,QAAU,GAAI,CACzC,KAAM,gBAAiB,IAAI,OAAO,CAAC,EAAE,YAAW,EAAK,IAAI,MAAM,CAAC,EAChE,IAAI,KAAK,CAAG,KAAS,eAAiB,KAAe,CAAE,GAG3D,MAAO,IACT",
  "names": []
}
