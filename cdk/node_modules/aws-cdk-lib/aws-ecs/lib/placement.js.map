{
  "version": 3,
  "sources": ["placement.ts"],
  "sourcesContent": ["import { BuiltInAttributes } from './ec2/ec2-service';\nimport { CfnService } from './ecs.generated';\n\n/**\n * Instance resource used for bin packing\n */\nexport enum BinPackResource {\n  /**\n   * Fill up hosts' CPU allocations first\n   */\n  CPU = 'cpu',\n\n  /**\n   * Fill up hosts' memory allocations first\n   */\n  MEMORY = 'memory',\n}\n\n/**\n * The placement strategies to use for tasks in the service. For more information, see\n * [Amazon ECS Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).\n *\n * Tasks will preferentially be placed on instances that match these rules.\n */\nexport class PlacementStrategy {\n  /**\n   * Places tasks evenly across all container instances in the cluster.\n   */\n  public static spreadAcrossInstances() {\n    return new PlacementStrategy([{ type: 'spread', field: BuiltInAttributes.INSTANCE_ID }]);\n  }\n\n  /**\n   * Places tasks evenly based on the specified value.\n   *\n   * You can use one of the built-in attributes found on `BuiltInAttributes`\n   * or supply your own custom instance attributes. If more than one attribute\n   * is supplied, spreading is done in order.\n   *\n   * @default attributes instanceId\n   */\n  public static spreadAcross(...fields: string[]) {\n    if (fields.length === 0) {\n      throw new Error('spreadAcross: give at least one field to spread by');\n    }\n    return new PlacementStrategy(fields.map(field => ({ type: 'spread', field })));\n  }\n\n  /**\n   * Places tasks on container instances with the least available amount of CPU capacity.\n   *\n   * This minimizes the number of instances in use.\n   */\n  public static packedByCpu() {\n    return PlacementStrategy.packedBy(BinPackResource.CPU);\n  }\n\n  /**\n   * Places tasks on container instances with the least available amount of memory capacity.\n   *\n   * This minimizes the number of instances in use.\n   */\n  public static packedByMemory() {\n    return PlacementStrategy.packedBy(BinPackResource.MEMORY);\n  }\n\n  /**\n   * Places tasks on the container instances with the least available capacity of the specified resource.\n   */\n  public static packedBy(resource: BinPackResource) {\n    return new PlacementStrategy([{ type: 'binpack', field: resource }]);\n  }\n\n  /**\n   * Places tasks randomly.\n   */\n  public static randomly() {\n    return new PlacementStrategy([{ type: 'random' }]);\n  }\n\n  /**\n   * Constructs a new instance of the PlacementStrategy class.\n   */\n  private constructor(private readonly json: CfnService.PlacementStrategyProperty[]) {\n  }\n\n  /**\n   * Return the placement JSON\n   */\n  public toJson(): CfnService.PlacementStrategyProperty[] {\n    return this.json;\n  }\n}\n\n/**\n * The placement constraints to use for tasks in the service. For more information, see\n * [Amazon ECS Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html).\n *\n * Tasks will only be placed on instances that match these rules.\n */\nexport class PlacementConstraint {\n  /**\n   * Use distinctInstance to ensure that each task in a particular group is running on a different container instance.\n   */\n  public static distinctInstances() {\n    return new PlacementConstraint([{ type: 'distinctInstance' }]);\n  }\n\n  /**\n   * Use memberOf to restrict the selection to a group of valid candidates specified by a query expression.\n   *\n   * Multiple expressions can be specified. For more information, see\n   * [Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).\n   *\n   * You can specify multiple expressions in one call. The tasks will only be placed on instances matching all expressions.\n   *\n   * @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html\n   */\n  public static memberOf(...expressions: string[]) {\n    return new PlacementConstraint(expressions.map(expression => ({ type: 'memberOf', expression })));\n  }\n\n  /**\n   * Constructs a new instance of the PlacementConstraint class.\n   */\n  private constructor(private readonly json: CfnService.PlacementConstraintProperty[]) {\n  }\n\n  /**\n   * Return the placement JSON\n   */\n  public toJson(): CfnService.PlacementConstraintProperty[] {\n    return this.json;\n  }\n}"],
  "mappings": "+QAAA,cAAA,QAAA,mBAAA,EAMA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CAIzB,iBAAA,IAAA,MAKA,iBAAA,OAAA,QACF,GAVY,gBAAA,QAAA,iBAAA,SAAA,gBAAe,CAAA,EAAA,EAkB3B,MAAa,iBAAiB,CA2D5B,YAAqC,KAA4C,CAA5C,KAAA,KAAA,WAvDvB,wBAAqB,CACjC,MAAO,IAAI,mBAAkB,CAAC,CAAE,KAAM,SAAU,MAAO,cAAA,kBAAkB,WAAW,CAAE,CAAC,QAY3E,iBAAgB,OAAgB,CAC5C,GAAI,OAAO,SAAW,EACpB,KAAM,IAAI,OAAM,oDAAoD,EAEtE,MAAO,IAAI,mBAAkB,OAAO,IAAI,OAAU,EAAE,KAAM,SAAU,KAAK,EAAG,CAAC,QAQjE,cAAW,CACvB,MAAO,mBAAkB,SAAS,gBAAgB,GAAG,QAQzC,iBAAc,CAC1B,MAAO,mBAAkB,SAAS,gBAAgB,MAAM,QAM5C,UAAS,SAAyB,8EACvC,GAAI,mBAAkB,CAAC,CAAE,KAAM,UAAW,MAAO,QAAQ,CAAE,CAAC,QAMvD,WAAQ,CACpB,MAAO,IAAI,mBAAkB,CAAC,CAAE,KAAM,QAAQ,CAAE,CAAC,EAY5C,QAAM,CACX,MAAO,MAAK,MAlEhB,QAAA,kBAAA,6HA4EA,MAAa,mBAAmB,CAyB9B,YAAqC,KAA8C,CAA9C,KAAA,KAAA,WArBvB,oBAAiB,CAC7B,MAAO,IAAI,qBAAoB,CAAC,CAAE,KAAM,kBAAkB,CAAE,CAAC,QAajD,aAAY,YAAqB,CAC7C,MAAO,IAAI,qBAAoB,YAAY,IAAI,YAAe,EAAE,KAAM,WAAY,UAAU,EAAG,CAAC,EAY3F,QAAM,CACX,MAAO,MAAK,MAhChB,QAAA,oBAAA",
  "names": []
}
