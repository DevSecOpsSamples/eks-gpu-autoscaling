{
  "version": 3,
  "sources": ["external-service.ts"],
  "sourcesContent": ["import * as appscaling from '../../../aws-applicationautoscaling';\nimport * as ec2 from '../../../aws-ec2';\nimport * as elbv2 from '../../../aws-elasticloadbalancingv2';\nimport * as cloudmap from '../../../aws-servicediscovery';\nimport { ArnFormat, Resource, Stack } from '../../../core';\nimport { Construct } from 'constructs';\nimport { AssociateCloudMapServiceOptions, BaseService, BaseServiceOptions, CloudMapOptions, DeploymentControllerType, EcsTarget, IBaseService, IEcsLoadBalancerTarget, IService, LaunchType, PropagatedTagSource } from '../base/base-service';\nimport { fromServiceAtrributes } from '../base/from-service-attributes';\nimport { ScalableTaskCount } from '../base/scalable-task-count';\nimport { Compatibility, LoadBalancerTargetOptions, TaskDefinition } from '../base/task-definition';\nimport { ICluster } from '../cluster';\n/**\n * The properties for defining a service using the External launch type.\n */\nexport interface ExternalServiceProps extends BaseServiceOptions {\n  /**\n   * The task definition to use for tasks in the service.\n   *\n   * [disable-awslint:ref-via-interface]\n   */\n  readonly taskDefinition: TaskDefinition;\n\n  /**\n   * The security groups to associate with the service. If you do not specify a security group, a new security group is created.\n   *\n   *\n   * @default - A new security group is created.\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n}\n\n/**\n * The interface for a service using the External launch type on an ECS cluster.\n */\nexport interface IExternalService extends IService {\n\n}\n\n/**\n * The properties to import from the service using the External launch type.\n */\nexport interface ExternalServiceAttributes {\n  /**\n   * The cluster that hosts the service.\n   */\n  readonly cluster: ICluster;\n\n  /**\n   * The service ARN.\n   *\n   * @default - either this, or {@link serviceName}, is required\n   */\n  readonly serviceArn?: string;\n\n  /**\n   * The name of the service.\n   *\n   * @default - either this, or {@link serviceArn}, is required\n   */\n  readonly serviceName?: string;\n}\n\n/**\n * This creates a service using the External launch type on an ECS cluster.\n *\n * @resource AWS::ECS::Service\n */\nexport class ExternalService extends BaseService implements IExternalService {\n\n  /**\n   * Imports from the specified service ARN.\n   */\n  public static fromExternalServiceArn(scope: Construct, id: string, externalServiceArn: string): IExternalService {\n    class Import extends Resource implements IExternalService {\n      public readonly serviceArn = externalServiceArn;\n      public readonly serviceName = Stack.of(scope).splitArn(externalServiceArn, ArnFormat.SLASH_RESOURCE_NAME).resourceName as string;\n    }\n    return new Import(scope, id);\n  }\n\n  /**\n   * Imports from the specified service attrributes.\n   */\n  public static fromExternalServiceAttributes(scope: Construct, id: string, attrs: ExternalServiceAttributes): IBaseService {\n    return fromServiceAtrributes(scope, id, attrs);\n  }\n\n  /**\n   * Constructs a new instance of the ExternalService class.\n   */\n  constructor(scope: Construct, id: string, props: ExternalServiceProps) {\n    if (props.minHealthyPercent !== undefined && props.maxHealthyPercent !== undefined && props.minHealthyPercent >= props.maxHealthyPercent) {\n      throw new Error('Minimum healthy percent must be less than maximum healthy percent.');\n    }\n\n    if (props.taskDefinition.compatibility !== Compatibility.EXTERNAL) {\n      throw new Error('Supplied TaskDefinition is not configured for compatibility with ECS Anywhere cluster');\n    }\n\n    if (props.cluster.defaultCloudMapNamespace !== undefined) {\n      throw new Error (`Cloud map integration is not supported for External service ${props.cluster.defaultCloudMapNamespace}`);\n    }\n\n    if (props.cloudMapOptions !== undefined) {\n      throw new Error ('Cloud map options are not supported for External service');\n    }\n\n    if (props.enableExecuteCommand !== undefined) {\n      throw new Error ('Enable Execute Command options are not supported for External service');\n    }\n\n    if (props.capacityProviderStrategies !== undefined) {\n      throw new Error ('Capacity Providers are not supported for External service');\n    }\n\n    const propagateTagsFromSource = props.propagateTags ?? PropagatedTagSource.NONE;\n\n    super(scope, id, {\n      ...props,\n      desiredCount: props.desiredCount,\n      maxHealthyPercent: props.maxHealthyPercent === undefined ? 100 : props.maxHealthyPercent,\n      minHealthyPercent: props.minHealthyPercent === undefined ? 0 : props.minHealthyPercent,\n      launchType: LaunchType.EXTERNAL,\n      propagateTags: propagateTagsFromSource,\n      enableECSManagedTags: props.enableECSManagedTags,\n    },\n    {\n      cluster: props.cluster.clusterName,\n      taskDefinition: props.deploymentController?.type === DeploymentControllerType.EXTERNAL ? undefined : props.taskDefinition.taskDefinitionArn,\n    }, props.taskDefinition);\n\n    this.node.addValidation({\n      validate: () => !this.taskDefinition.defaultContainer ? ['A TaskDefinition must have at least one essential container'] : [],\n    });\n\n    this.node.addValidation({\n      validate: () => this.networkConfiguration !== undefined ? ['Network configurations not supported for an external service'] : [],\n    });\n  }\n\n  /**\n   * Overriden method to throw error as `attachToApplicationTargetGroup` is not supported for external service\n   */\n  public attachToApplicationTargetGroup(_targetGroup: elbv2.IApplicationTargetGroup): elbv2.LoadBalancerTargetProps {\n    throw new Error ('Application load balancer cannot be attached to an external service');\n  }\n\n  /**\n   * Overriden method to throw error as `loadBalancerTarget` is not supported for external service\n   */\n  public loadBalancerTarget(_options: LoadBalancerTargetOptions): IEcsLoadBalancerTarget {\n    throw new Error ('External service cannot be attached as load balancer targets');\n  }\n\n  /**\n   * Overriden method to throw error as `registerLoadBalancerTargets` is not supported for external service\n   */\n  public registerLoadBalancerTargets(..._targets: EcsTarget[]) {\n    throw new Error ('External service cannot be registered as load balancer targets');\n  }\n\n  /**\n   * Overriden method to throw error as `configureAwsVpcNetworkingWithSecurityGroups` is not supported for external service\n   */\n  // eslint-disable-next-line max-len, no-unused-vars\n  protected configureAwsVpcNetworkingWithSecurityGroups(_vpc: ec2.IVpc, _assignPublicIp?: boolean, _vpcSubnets?: ec2.SubnetSelection, _securityGroups?: ec2.ISecurityGroup[]) {\n    throw new Error ('Only Bridge network mode is supported for external service');\n  }\n\n  /**\n   * Overriden method to throw error as `autoScaleTaskCount` is not supported for external service\n   */\n  public autoScaleTaskCount(_props: appscaling.EnableScalingProps): ScalableTaskCount {\n    throw new Error ('Autoscaling not supported for external service');\n  }\n\n  /**\n   * Overriden method to throw error as `enableCloudMap` is not supported for external service\n   */\n  public enableCloudMap(_options: CloudMapOptions): cloudmap.Service {\n    throw new Error ('Cloud map integration not supported for an external service');\n  }\n\n  /**\n   * Overriden method to throw error as `associateCloudMapService` is not supported for external service\n   */\n  public associateCloudMapService(_options: AssociateCloudMapServiceOptions): void {\n    throw new Error ('Cloud map service association is not supported for an external service');\n  }\n}\n"],
  "mappings": "yNAIA,OAAA,QAAA,eAAA,EAEA,eAAA,QAAA,sBAAA,EACA,0BAAA,QAAA,iCAAA,EAEA,kBAAA,QAAA,yBAAA,EA0DA,MAAa,uBAAwB,gBAAA,WAAW,CAuB9C,YAAY,MAAkB,GAAY,MAA2B,WACnE,2EAAI,MAAM,oBAAsB,QAAa,MAAM,oBAAsB,QAAa,MAAM,mBAAqB,MAAM,kBACrH,KAAM,IAAI,OAAM,oEAAoE,EAGtF,GAAI,MAAM,eAAe,gBAAkB,kBAAA,cAAc,SACvD,KAAM,IAAI,OAAM,uFAAuF,EAGzG,GAAI,MAAM,QAAQ,2BAA6B,OAC7C,KAAM,IAAI,OAAO,+DAA+D,MAAM,QAAQ,0BAA0B,EAG1H,GAAI,MAAM,kBAAoB,OAC5B,KAAM,IAAI,OAAO,0DAA0D,EAG7E,GAAI,MAAM,uBAAyB,OACjC,KAAM,IAAI,OAAO,uEAAuE,EAG1F,GAAI,MAAM,6BAA+B,OACvC,KAAM,IAAI,OAAO,2DAA2D,EAG9E,KAAM,yBAAuB,IAAG,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,eAAA,oBAAoB,KAE3E,MAAM,MAAO,GAAI,IACZ,MACH,aAAc,MAAM,aACpB,kBAAmB,MAAM,oBAAsB,OAAY,IAAM,MAAM,kBACvE,kBAAmB,MAAM,oBAAsB,OAAY,EAAI,MAAM,kBACrE,WAAY,eAAA,WAAW,SACvB,cAAe,wBACf,qBAAsB,MAAM,sBAE9B,CACE,QAAS,MAAM,QAAQ,YACvB,eAAgB,KAAA,MAAM,wBAAoB,MAAA,KAAA,OAAA,OAAA,GAAE,QAAS,eAAA,yBAAyB,SAAW,OAAY,MAAM,eAAe,mBACzH,MAAM,cAAc,EAEvB,KAAK,KAAK,cAAc,CACtB,SAAU,IAAM,AAAC,KAAK,eAAe,iBAAqF,CAAA,EAAlE,CAAC,6DAA6D,EACvH,EAED,KAAK,KAAK,cAAc,CACtB,SAAU,IAAM,KAAK,uBAAyB,OAAY,CAAC,8DAA8D,EAAI,CAAA,EAC9H,QAjEW,wBAAuB,MAAkB,GAAY,mBAA0B,CAC3F,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,WAAa,mBACb,KAAA,YAAc,OAAA,MAAM,GAAG,KAAK,EAAE,SAAS,mBAAoB,OAAA,UAAU,mBAAmB,EAAE,YAC5G,EACA,MAAO,IAAI,QAAO,MAAO,EAAE,QAMf,+BAA8B,MAAkB,GAAY,MAAgC,qFACjG,0BAAA,sBAAsB,MAAO,GAAI,KAAK,EA2DxC,+BAA+B,aAA2C,4GACzE,GAAI,OAAO,qEAAqE,EAMjF,mBAAmB,SAAmC,uFACrD,GAAI,OAAO,8DAA8D,EAM1E,+BAA+B,SAAqB,uEACnD,GAAI,OAAO,gEAAgE,EAOzE,4CAA4C,KAAgB,gBAA2B,YAAmC,gBAAsC,uIAClK,GAAI,OAAO,4DAA4D,EAMxE,mBAAmB,OAAqC,iGACvD,GAAI,OAAO,gDAAgD,EAM5D,eAAe,SAAyB,6EACvC,GAAI,OAAO,6DAA6D,EAMzE,yBAAyB,SAAyC,6FACjE,GAAI,OAAO,wEAAwE,GAxH7F,QAAA,gBAAA",
  "names": []
}
