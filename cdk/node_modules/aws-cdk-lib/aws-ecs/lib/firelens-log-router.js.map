{
  "version": 3,
  "sources": ["firelens-log-router.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as ssm from '../../aws-ssm';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { TaskDefinition } from './base/task-definition';\nimport { ContainerDefinition, ContainerDefinitionOptions, ContainerDefinitionProps } from './container-definition';\nimport { ContainerImage } from './container-image';\nimport { CfnTaskDefinition } from './ecs.generated';\nimport { LogDriverConfig } from './log-drivers/log-driver';\n\n/**\n * Firelens log router type, fluentbit or fluentd.\n * https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html\n */\nexport enum FirelensLogRouterType {\n  /**\n   * fluentbit\n   */\n  FLUENTBIT = 'fluentbit',\n\n  /**\n   * fluentd\n   */\n  FLUENTD = 'fluentd',\n}\n\n/**\n * Firelens configuration file type, s3 or file path.\n * https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-taskdef-customconfig\n */\nexport enum FirelensConfigFileType {\n  /**\n   * s3\n   */\n  S3 = 's3',\n\n  /**\n   * fluentd\n   */\n  FILE = 'file',\n}\n\n/**\n * The options for firelens log router\n * https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-taskdef-customconfig\n */\nexport interface FirelensOptions {\n  /**\n   * By default, Amazon ECS adds additional fields in your log entries that help identify the source of the logs.\n   * You can disable this action by setting enable-ecs-log-metadata to false.\n   * @default - true\n   */\n  readonly enableECSLogMetadata?: boolean;\n\n  /**\n   * Custom configuration file, s3 or file\n   * @default - determined by checking configFileValue with S3 ARN.\n   */\n  readonly configFileType?: FirelensConfigFileType;\n\n  /**\n   * Custom configuration file, S3 ARN or a file path\n   */\n  readonly configFileValue: string;\n}\n\n/**\n * Firelens Configuration\n * https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-taskdef\n */\nexport interface FirelensConfig {\n\n  /**\n   * The log router to use\n   * @default - fluentbit\n   */\n  readonly type: FirelensLogRouterType;\n\n  /**\n   * Firelens options\n   * @default - no additional options\n   */\n  readonly options?: FirelensOptions;\n}\n\n/**\n * The properties in a firelens log router.\n */\nexport interface FirelensLogRouterProps extends ContainerDefinitionProps {\n  /**\n   * Firelens configuration\n   */\n  readonly firelensConfig: FirelensConfig;\n}\n\n/**\n * The options for creating a firelens log router.\n */\nexport interface FirelensLogRouterDefinitionOptions extends ContainerDefinitionOptions {\n  /**\n   * Firelens configuration\n   */\n  readonly firelensConfig: FirelensConfig;\n}\n\n/**\n * Render to CfnTaskDefinition.FirelensConfigurationProperty from FirelensConfig\n */\nfunction renderFirelensConfig(firelensConfig: FirelensConfig): CfnTaskDefinition.FirelensConfigurationProperty {\n  if (!firelensConfig.options) {\n    return { type: firelensConfig.type };\n  } else {\n    // firelensConfig.options.configFileType has been filled with s3 or file type in constructor.\n    return {\n      type: firelensConfig.type,\n      options: {\n        'enable-ecs-log-metadata': firelensConfig.options.enableECSLogMetadata ? 'true' : 'false',\n        'config-file-type': firelensConfig.options.configFileType!,\n        'config-file-value': firelensConfig.options.configFileValue,\n      },\n    };\n  }\n\n}\n\n/**\n * SSM parameters for latest fluent bit docker image in ECR\n * https://github.com/aws/aws-for-fluent-bit#using-ssm-to-find-available-versions\n */\nconst fluentBitImageSSMPath = '/aws/service/aws-for-fluent-bit';\n\n/**\n * Obtain Fluent Bit image in Amazon ECR and setup corresponding IAM permissions.\n * ECR image pull permissions will be granted in task execution role.\n * Cloudwatch logs, Kinesis data stream or firehose permissions will be grant by check options in logDriverConfig.\n * https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-using-fluentbit\n */\nexport function obtainDefaultFluentBitECRImage(task: TaskDefinition, logDriverConfig?: LogDriverConfig, imageTag?: string): ContainerImage {\n  // grant ECR image pull permissions to executor role\n  task.addToExecutionRolePolicy(new iam.PolicyStatement({\n    actions: [\n      'ecr:GetAuthorizationToken',\n      'ecr:BatchCheckLayerAvailability',\n      'ecr:GetDownloadUrlForLayer',\n      'ecr:BatchGetImage',\n    ],\n    resources: ['*'],\n  }));\n\n  // grant cloudwatch or firehose permissions to task role\n  const logName = logDriverConfig && logDriverConfig.logDriver === 'awsfirelens'\n    && logDriverConfig.options && logDriverConfig.options.Name;\n  if (logName === 'cloudwatch') {\n    task.addToTaskRolePolicy(new iam.PolicyStatement({\n      actions: [\n        'logs:CreateLogGroup',\n        'logs:CreateLogStream',\n        'logs:DescribeLogStreams',\n        'logs:PutLogEvents',\n      ],\n      resources: ['*'],\n    }));\n  } else if (logName === 'firehose') {\n    task.addToTaskRolePolicy(new iam.PolicyStatement({\n      actions: [\n        'firehose:PutRecordBatch',\n      ],\n      resources: ['*'],\n    }));\n  } else if (logName === 'kinesis') {\n    task.addToTaskRolePolicy(new iam.PolicyStatement({\n      actions: [\n        'kinesis:PutRecords',\n      ],\n      resources: ['*'],\n    }));\n  }\n\n  const fluentBitImageTag = imageTag || 'latest';\n  const fluentBitImage = `${fluentBitImageSSMPath}/${fluentBitImageTag}`;\n\n  // Not use ContainerImage.fromEcrRepository since it's not support parsing ECR repo URI,\n  // use repo ARN might result in complex Fn:: functions in cloudformation template.\n  return ContainerImage.fromRegistry(ssm.StringParameter.valueForStringParameter(task, fluentBitImage));\n}\n\n/**\n * Firelens log router\n */\nexport class FirelensLogRouter extends ContainerDefinition {\n\n  /**\n   * Firelens configuration\n   */\n  public readonly firelensConfig: FirelensConfig;\n\n  /**\n   * Constructs a new instance of the FirelensLogRouter class.\n   */\n  constructor(scope: Construct, id: string, props: FirelensLogRouterProps) {\n    super(scope, id, props);\n    const options = props.firelensConfig.options;\n    if (options) {\n      const enableECSLogMetadata = options.enableECSLogMetadata || options.enableECSLogMetadata === undefined;\n      const configFileType = (options.configFileType === undefined || options.configFileType === FirelensConfigFileType.S3) &&\n        (cdk.Token.isUnresolved(options.configFileValue) || /arn:aws[a-zA-Z-]*:s3:::.+/.test(options.configFileValue))\n        ? FirelensConfigFileType.S3 : FirelensConfigFileType.FILE;\n      this.firelensConfig = {\n        type: props.firelensConfig.type,\n        options: {\n          enableECSLogMetadata,\n          configFileType,\n          configFileValue: options.configFileValue,\n        },\n      };\n\n      // grant s3 access permissions\n      if (configFileType === FirelensConfigFileType.S3) {\n        props.taskDefinition.addToExecutionRolePolicy(new iam.PolicyStatement({\n          actions: [\n            's3:GetObject',\n          ],\n          resources: [options.configFileValue],\n        }));\n        props.taskDefinition.addToExecutionRolePolicy(new iam.PolicyStatement({\n          actions: [\n            's3:GetBucketLocation',\n          ],\n          resources: [options.configFileValue.split('/')[0]],\n        }));\n      }\n    } else {\n      this.firelensConfig = props.firelensConfig;\n    }\n  }\n\n  /**\n   * Render this container definition to a CloudFormation object\n   */\n  public renderContainerDefinition(_taskDefinition?: TaskDefinition): CfnTaskDefinition.ContainerDefinitionProperty {\n    return {\n      ...(super.renderContainerDefinition()),\n      firelensConfiguration: this.firelensConfig && renderFirelensConfig(this.firelensConfig),\n    };\n  }\n}\n"],
  "mappings": "4TAAA,IAAA,QAAA,eAAA,EACA,IAAA,QAAA,eAAA,EACA,IAAA,QAAA,YAAA,EAGA,uBAAA,QAAA,wBAAA,EACA,kBAAA,QAAA,mBAAA,EAQA,GAAY,uBAAZ,AAAA,UAAY,uBAAqB,CAI/B,uBAAA,UAAA,YAKA,uBAAA,QAAA,SACF,GAVY,sBAAA,QAAA,uBAAA,SAAA,sBAAqB,CAAA,EAAA,EAgBjC,GAAY,wBAAZ,AAAA,UAAY,wBAAsB,CAIhC,wBAAA,GAAA,KAKA,wBAAA,KAAA,MACF,GAVY,uBAAA,QAAA,wBAAA,SAAA,uBAAsB,CAAA,EAAA,EA8ElC,8BAA8B,eAA8B,CAC1D,MAAK,gBAAe,QAIX,CACL,KAAM,eAAe,KACrB,QAAS,CACP,0BAA2B,eAAe,QAAQ,qBAAuB,OAAS,QAClF,mBAAoB,eAAe,QAAQ,eAC3C,oBAAqB,eAAe,QAAQ,kBARzC,CAAE,KAAM,eAAe,IAAI,CAatC,CAMA,KAAM,uBAAwB,kCAQ9B,wCAA+C,KAAsB,gBAAmC,SAAiB,CAEvH,KAAK,yBAAyB,GAAI,KAAI,gBAAgB,CACpD,QAAS,CACP,4BACA,kCACA,6BACA,qBAEF,UAAW,CAAC,GAAG,EAChB,CAAC,EAGF,KAAM,SAAU,iBAAmB,gBAAgB,YAAc,eAC5D,gBAAgB,SAAW,gBAAgB,QAAQ,KACxD,AAAI,UAAY,aACd,KAAK,oBAAoB,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CACP,sBACA,uBACA,0BACA,qBAEF,UAAW,CAAC,GAAG,EAChB,CAAC,EACG,AAAI,UAAY,WACrB,KAAK,oBAAoB,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CACP,2BAEF,UAAW,CAAC,GAAG,EAChB,CAAC,EACO,UAAY,WACrB,KAAK,oBAAoB,GAAI,KAAI,gBAAgB,CAC/C,QAAS,CACP,sBAEF,UAAW,CAAC,GAAG,EAChB,CAAC,EAIJ,KAAM,gBAAiB,GAAG,yBADA,UAAY,WAKtC,MAAO,mBAAA,eAAe,aAAa,IAAI,gBAAgB,wBAAwB,KAAM,cAAc,CAAC,CACtG,CA/CA,QAAA,+BAAA,+BAoDA,MAAa,yBAA0B,wBAAA,mBAAmB,CAUxD,YAAY,MAAkB,GAAY,MAA6B,CACrE,MAAM,MAAO,GAAI,KAAK,4EACtB,KAAM,SAAU,MAAM,eAAe,QACrC,GAAI,QAAS,CACX,KAAM,sBAAuB,QAAQ,sBAAwB,QAAQ,uBAAyB,OACxF,eAAkB,SAAQ,iBAAmB,QAAa,QAAQ,iBAAmB,uBAAuB,KAC/G,KAAI,MAAM,aAAa,QAAQ,eAAe,GAAK,4BAA4B,KAAK,QAAQ,eAAe,GAC1G,uBAAuB,GAAK,uBAAuB,KACvD,KAAK,eAAiB,CACpB,KAAM,MAAM,eAAe,KAC3B,QAAS,CACP,qBACA,eACA,gBAAiB,QAAQ,kBAKzB,iBAAmB,uBAAuB,IAC5C,OAAM,eAAe,yBAAyB,GAAI,KAAI,gBAAgB,CACpE,QAAS,CACP,gBAEF,UAAW,CAAC,QAAQ,eAAe,EACpC,CAAC,EACF,MAAM,eAAe,yBAAyB,GAAI,KAAI,gBAAgB,CACpE,QAAS,CACP,wBAEF,UAAW,CAAC,QAAQ,gBAAgB,MAAM,GAAG,EAAE,EAAE,EAClD,CAAC,OAGJ,MAAK,eAAiB,MAAM,eAOzB,0BAA0B,gBAAgC,oFACxD,IACD,MAAM,0BAAyB,EACnC,sBAAuB,KAAK,gBAAkB,qBAAqB,KAAK,cAAc,IArD5F,QAAA,kBAAA",
  "names": []
}
