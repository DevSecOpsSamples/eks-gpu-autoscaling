{
  "version": 3,
  "sources": ["splunk-log-driver.ts"],
  "sourcesContent": ["import { SecretValue } from '../../../core';\nimport { Construct } from 'constructs';\nimport { ContainerDefinition, Secret } from '../container-definition';\nimport { BaseLogDriverProps } from './base-log-driver';\nimport { LogDriver, LogDriverConfig } from './log-driver';\nimport { ensureInRange, renderCommonLogDriverOptions, renderLogDriverSecretOptions, stringifyOptions } from './utils';\n\n/**\n * Log Message Format\n */\nexport enum SplunkLogFormat {\n  INLINE = 'inline',\n  JSON = 'json',\n  RAW = 'raw'\n}\n\n/**\n * Specifies the splunk log driver configuration options.\n *\n * [Source](https://docs.docker.com/config/containers/logging/splunk/)\n */\nexport interface SplunkLogDriverProps extends BaseLogDriverProps {\n  /**\n   * Splunk HTTP Event Collector token.\n   *\n   * The splunk-token is added to the Options property of the Log Driver Configuration. So the secret value will be resolved and\n   * viewable in plain text in the console.\n   *\n   * Please provide at least one of `token` or `secretToken`.\n   * @deprecated Use {@link SplunkLogDriverProps.secretToken} instead.\n   * @default - token not provided.\n   */\n  readonly token?: SecretValue;\n\n  /**\n   * Splunk HTTP Event Collector token (Secret).\n   *\n   * The splunk-token is added to the SecretOptions property of the Log Driver Configuration. So the secret value will not be\n   * resolved or viewable as plain text.\n   *\n   * Please provide at least one of `token` or `secretToken`.\n   * @default - If secret token is not provided, then the value provided in `token` will be used.\n   */\n  readonly secretToken?: Secret;\n\n  /**\n   * Path to your Splunk Enterprise, self-service Splunk Cloud instance, or Splunk\n   * Cloud managed cluster (including port and scheme used by HTTP Event Collector)\n   * in one of the following formats: https://your_splunk_instance:8088 or\n   * https://input-prd-p-XXXXXXX.cloud.splunk.com:8088 or https://http-inputs-XXXXXXXX.splunkcloud.com.\n   */\n  readonly url: string;\n\n  /**\n   * Event source.\n   *\n   * @default - source not set.\n   */\n  readonly source?: string;\n\n  /**\n   * Event source type.\n   *\n   * @default - sourceType not set.\n   */\n  readonly sourceType?: string;\n\n  /**\n   * Event index.\n   *\n   * @default - index not set.\n   */\n  readonly index?: string;\n\n  /**\n   * Path to root certificate.\n   *\n   * @default - caPath not set.\n   */\n  readonly caPath?: string;\n\n  /**\n   * Name to use for validating server certificate.\n   *\n   * @default - The hostname of the splunk-url\n   */\n  readonly caName?: string;\n\n  /**\n   * Ignore server certificate validation.\n   *\n   * @default - insecureSkipVerify not set.\n   */\n  readonly insecureSkipVerify?: string;\n\n  /**\n   * Message format. Can be inline, json or raw.\n   *\n   * @default - inline\n   */\n  readonly format?: SplunkLogFormat;\n\n  /**\n   * Verify on start, that docker can connect to Splunk server.\n   *\n   * @default - true\n   */\n  readonly verifyConnection?: boolean;\n\n  /**\n   * Enable/disable gzip compression to send events to Splunk Enterprise or Splunk\n   * Cloud instance.\n   *\n   * @default - false\n   */\n  readonly gzip?: boolean;\n\n  /**\n   * Set compression level for gzip. Valid values are -1 (default), 0 (no compression),\n   * 1 (best speed) ... 9 (best compression).\n   *\n   * @default - -1 (Default Compression)\n   */\n  readonly gzipLevel?: number;\n}\n\n/**\n * A log driver that sends log information to splunk Logs.\n */\nexport class SplunkLogDriver extends LogDriver {\n  /**\n   * Constructs a new instance of the SplunkLogDriver class.\n   *\n   * @param props the splunk log driver configuration options.\n   */\n  constructor(private readonly props: SplunkLogDriverProps) {\n    super();\n\n    if (!props.token && !props.secretToken) {\n      throw new Error('Please provide either token or secretToken.');\n    }\n    if (props.gzipLevel) {\n      ensureInRange(props.gzipLevel, -1, 9);\n    }\n  }\n\n  /**\n   * Called when the log driver is configured on a container\n   */\n  public bind(_scope: Construct, _containerDefinition: ContainerDefinition): LogDriverConfig {\n    const options = stringifyOptions({\n      'splunk-token': this.props.token,\n      'splunk-url': this.props.url,\n      'splunk-source': this.props.source,\n      'splunk-sourcetype': this.props.sourceType,\n      'splunk-index': this.props.index,\n      'splunk-capath': this.props.caPath,\n      'splunk-caname': this.props.caName,\n      'splunk-insecureskipverify': this.props.insecureSkipVerify,\n      'splunk-format': this.props.format,\n      'splunk-verify-connection': this.props.verifyConnection,\n      'splunk-gzip': this.props.gzip,\n      'splunk-gzip-level': this.props.gzipLevel,\n      ...renderCommonLogDriverOptions(this.props),\n    });\n\n    return {\n      logDriver: 'splunk',\n      options,\n      secretOptions: this.props.secretToken && renderLogDriverSecretOptions({ 'splunk-token': this.props.secretToken }, _containerDefinition.taskDefinition),\n    };\n  }\n}\n"],
  "mappings": "iPAIA,aAAA,QAAA,cAAA,EACA,QAAA,QAAA,SAAA,EAKA,GAAY,iBAAZ,AAAA,UAAY,iBAAe,CACzB,iBAAA,OAAA,SACA,iBAAA,KAAA,OACA,iBAAA,IAAA,KACF,GAJY,gBAAA,QAAA,iBAAA,SAAA,gBAAe,CAAA,EAAA,EAuH3B,MAAa,uBAAwB,cAAA,SAAS,CAM5C,YAA6B,MAA2B,CACtD,MAAK,EAEL,GAH2B,KAAA,MAAA,8EAGvB,CAAC,MAAM,OAAS,CAAC,MAAM,YACzB,KAAM,IAAI,OAAM,6CAA6C,EAE/D,AAAI,MAAM,WACR,QAAA,cAAc,MAAM,UAAW,GAAI,CAAC,EAOjC,KAAK,OAAmB,qBAAyC,uFACtE,KAAM,SAAU,QAAA,iBAAiB,CAC/B,eAAgB,KAAK,MAAM,MAC3B,aAAc,KAAK,MAAM,IACzB,gBAAiB,KAAK,MAAM,OAC5B,oBAAqB,KAAK,MAAM,WAChC,eAAgB,KAAK,MAAM,MAC3B,gBAAiB,KAAK,MAAM,OAC5B,gBAAiB,KAAK,MAAM,OAC5B,4BAA6B,KAAK,MAAM,mBACxC,gBAAiB,KAAK,MAAM,OAC5B,2BAA4B,KAAK,MAAM,iBACvC,cAAe,KAAK,MAAM,KAC1B,oBAAqB,KAAK,MAAM,aAC7B,QAAA,6BAA6B,KAAK,KAAK,EAC3C,EAED,MAAO,CACL,UAAW,SACX,QACA,cAAe,KAAK,MAAM,aAAe,QAAA,6BAA6B,CAAE,eAAgB,KAAK,MAAM,WAAW,EAAI,qBAAqB,cAAc,IAxC3J,QAAA,gBAAA",
  "names": []
}
