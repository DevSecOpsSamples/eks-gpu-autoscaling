{
  "version": 3,
  "sources": ["gelf-log-driver.ts"],
  "sourcesContent": ["import { Duration } from '../../../core';\nimport { Construct } from 'constructs';\nimport { ContainerDefinition } from '../container-definition';\nimport { BaseLogDriverProps } from './base-log-driver';\nimport { LogDriver, LogDriverConfig } from './log-driver';\nimport { ensureInRange, ensurePositiveInteger, renderCommonLogDriverOptions, stringifyOptions } from './utils';\n\n/**\n * The type of compression the GELF driver uses to compress each log message.\n */\nexport enum GelfCompressionType {\n  GZIP = 'gzip',\n  ZLIB = 'zlib',\n  NONE = 'none'\n}\n\n/**\n * Specifies the journald log driver configuration options.\n *\n * [Source](https://docs.docker.com/config/containers/logging/gelf/)\n */\nexport interface GelfLogDriverProps extends BaseLogDriverProps {\n  /**\n   * The address of the GELF server. tcp and udp are the only supported URI\n   * specifier and you must specify the port.\n   */\n  readonly address: string;\n\n  /**\n   * UDP Only The type of compression the GELF driver uses to compress each\n   * log message. Allowed values are gzip, zlib and none.\n   *\n   * @default - gzip\n   */\n  readonly compressionType?: GelfCompressionType;\n\n  /**\n   * UDP Only The level of compression when gzip or zlib is the gelf-compression-type.\n   * An integer in the range of -1 to 9 (BestCompression). Higher levels provide more\n   * compression at lower speed. Either -1 or 0 disables compression.\n   *\n   * @default - 1\n   */\n  readonly compressionLevel?: number;\n\n  /**\n   * TCP Only The maximum number of reconnection attempts when the connection drop.\n   * A positive integer.\n   *\n   * @default - 3\n   */\n  readonly tcpMaxReconnect?: number;\n\n  /**\n   * TCP Only The number of seconds to wait between reconnection attempts.\n   * A positive integer.\n   *\n   * @default - 1\n   */\n  readonly tcpReconnectDelay?: Duration;\n}\n\n/**\n * A log driver that sends log information to journald Logs.\n */\nexport class GelfLogDriver extends LogDriver {\n  /**\n   * Constructs a new instance of the GelfLogDriver class.\n   *\n   * @param props the gelf log driver configuration options.\n   */\n  constructor(private readonly props: GelfLogDriverProps) {\n    super();\n\n    // Validation\n    if (props.compressionLevel) {\n      ensureInRange(props.compressionLevel, -1, 9);\n    }\n\n    if (props.tcpMaxReconnect) {\n      ensurePositiveInteger(props.tcpMaxReconnect);\n    }\n  }\n\n  /**\n   * Called when the log driver is configured on a container\n   */\n  public bind(_scope: Construct, _containerDefinition: ContainerDefinition): LogDriverConfig {\n    return {\n      logDriver: 'gelf',\n      options: stringifyOptions({\n        'gelf-address': this.props.address,\n        'gelf-compression-type': this.props.compressionType,\n        'gelf-compression-level': this.props.compressionLevel,\n        'gelf-tcp-max-reconnect': this.props.tcpMaxReconnect,\n        'gelf-tcp-reconnect-delay': this.props.tcpReconnectDelay && this.props.tcpReconnectDelay.toSeconds(),\n        ...renderCommonLogDriverOptions(this.props),\n      }),\n    };\n  }\n}\n"],
  "mappings": "mPAIA,aAAA,QAAA,cAAA,EACA,QAAA,QAAA,SAAA,EAKA,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAC7B,qBAAA,KAAA,OACA,qBAAA,KAAA,OACA,qBAAA,KAAA,MACF,GAJY,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,CAAA,EAAA,EAuD/B,MAAa,qBAAsB,cAAA,SAAS,CAM1C,YAA6B,MAAyB,CACpD,MAAK,EADsB,KAAA,MAAA,4EAIvB,MAAM,kBACR,QAAA,cAAc,MAAM,iBAAkB,GAAI,CAAC,EAGzC,MAAM,iBACR,QAAA,sBAAsB,MAAM,eAAe,EAOxC,KAAK,OAAmB,qBAAyC,8FAC/D,CACL,UAAW,OACX,QAAS,QAAA,iBAAiB,CACxB,eAAgB,KAAK,MAAM,QAC3B,wBAAyB,KAAK,MAAM,gBACpC,yBAA0B,KAAK,MAAM,iBACrC,yBAA0B,KAAK,MAAM,gBACrC,2BAA4B,KAAK,MAAM,mBAAqB,KAAK,MAAM,kBAAkB,UAAS,KAC/F,QAAA,6BAA6B,KAAK,KAAK,EAC3C,IAhCP,QAAA,cAAA",
  "names": []
}
