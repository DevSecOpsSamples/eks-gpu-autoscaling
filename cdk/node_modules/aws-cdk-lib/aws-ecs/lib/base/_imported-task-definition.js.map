{
  "version": 3,
  "sources": ["_imported-task-definition.ts"],
  "sourcesContent": ["import { IRole } from '../../../aws-iam';\nimport { Resource } from '../../../core';\nimport { Construct } from 'constructs';\nimport { IEc2TaskDefinition } from '../ec2/ec2-task-definition';\nimport { IFargateTaskDefinition } from '../fargate/fargate-task-definition';\nimport { Compatibility, NetworkMode, isEc2Compatible, isFargateCompatible, isExternalCompatible } from './task-definition';\n\n/**\n * The properties of ImportedTaskDefinition\n */\nexport interface ImportedTaskDefinitionProps {\n  /**\n   * The arn of the task definition\n   */\n  readonly taskDefinitionArn: string;\n\n  /**\n   * What launch types this task definition should be compatible with.\n   *\n   * @default Compatibility.EC2_AND_FARGATE\n   */\n  readonly compatibility?: Compatibility;\n\n  /**\n   * The networking mode to use for the containers in the task.\n   *\n   * @default Network mode cannot be provided to the imported task.\n   */\n  readonly networkMode?: NetworkMode;\n\n  /**\n   * The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   *\n   * @default Permissions cannot be granted to the imported task.\n   */\n  readonly taskRole?: IRole;\n}\n\n/**\n * Task definition reference of an imported task\n */\nexport class ImportedTaskDefinition extends Resource implements IEc2TaskDefinition, IFargateTaskDefinition {\n  /**\n   * What launch types this task definition should be compatible with.\n   */\n  readonly compatibility: Compatibility;\n\n  /**\n   * ARN of this task definition\n   */\n  readonly taskDefinitionArn: string;\n\n  /**\n   * Execution role for this task definition\n   */\n  readonly executionRole?: IRole = undefined;\n\n  /**\n   * The networking mode to use for the containers in the task.\n   */\n  readonly _networkMode?: NetworkMode;\n\n  /**\n   * The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   */\n  readonly _taskRole?: IRole;\n\n  constructor(scope: Construct, id: string, props: ImportedTaskDefinitionProps) {\n    super(scope, id);\n\n    this.compatibility = props.compatibility ?? Compatibility.EC2_AND_FARGATE;\n    this.taskDefinitionArn = props.taskDefinitionArn;\n    this._taskRole = props.taskRole;\n    this._networkMode = props.networkMode;\n  }\n\n  public get networkMode(): NetworkMode {\n    if (this._networkMode == undefined) {\n      throw new Error('This operation requires the networkMode in ImportedTaskDefinition to be defined. ' +\n        'Add the \\'networkMode\\' in ImportedTaskDefinitionProps to instantiate ImportedTaskDefinition');\n    } else {\n      return this._networkMode;\n    }\n  }\n\n  public get taskRole(): IRole {\n    if (this._taskRole == undefined) {\n      throw new Error('This operation requires the taskRole in ImportedTaskDefinition to be defined. ' +\n        'Add the \\'taskRole\\' in ImportedTaskDefinitionProps to instantiate ImportedTaskDefinition');\n    } else {\n      return this._taskRole;\n    }\n  }\n\n  /**\n   * Return true if the task definition can be run on an EC2 cluster\n   */\n  public get isEc2Compatible(): boolean {\n    return isEc2Compatible(this.compatibility);\n  }\n\n  /**\n   * Return true if the task definition can be run on a Fargate cluster\n   */\n  public get isFargateCompatible(): boolean {\n    return isFargateCompatible(this.compatibility);\n  }\n\n  /**\n   * Return true if the task definition can be run on a ECS Anywhere cluster\n   */\n  public get isExternalCompatible(): boolean {\n    return isExternalCompatible(this.compatibility);\n  }\n}\n"],
  "mappings": "0GACA,KAAA,QAAA,QAAA,eAAA,EAIA,kBAAA,QAAA,mBAAA,EAoCA,MAAa,8BAA+B,QAAA,QAAQ,CA0BlD,YAAY,MAAkB,GAAY,MAAkC,QAC1E,MAAM,MAAO,EAAE,EAbR,KAAA,cAAwB,OAe/B,KAAK,cAAa,IAAG,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,kBAAA,cAAc,gBAC1D,KAAK,kBAAoB,MAAM,kBAC/B,KAAK,UAAY,MAAM,SACvB,KAAK,aAAe,MAAM,eAGjB,cAAW,CACpB,GAAI,KAAK,cAAgB,KACvB,KAAM,IAAI,OAAM,6KACgF,EAEhG,MAAO,MAAK,gBAIL,WAAQ,CACjB,GAAI,KAAK,WAAa,KACpB,KAAM,IAAI,OAAM,uKAC6E,EAE7F,MAAO,MAAK,aAOL,kBAAe,CACxB,MAAO,mBAAA,gBAAgB,KAAK,aAAa,KAMhC,sBAAmB,CAC5B,MAAO,mBAAA,oBAAoB,KAAK,aAAa,KAMpC,uBAAoB,CAC7B,MAAO,mBAAA,qBAAqB,KAAK,aAAa,GAvElD,QAAA,uBAAA",
  "names": []
}
