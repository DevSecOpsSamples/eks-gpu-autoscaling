{
  "version": 3,
  "sources": ["task-definition.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport { IResource, Lazy, Names, PhysicalName, Resource } from '../../../core';\nimport { Construct } from 'constructs';\nimport { ContainerDefinition, ContainerDefinitionOptions, PortMapping, Protocol } from '../container-definition';\nimport { CfnTaskDefinition } from '../ecs.generated';\nimport { FirelensLogRouter, FirelensLogRouterDefinitionOptions, FirelensLogRouterType, obtainDefaultFluentBitECRImage } from '../firelens-log-router';\nimport { AwsLogDriver } from '../log-drivers/aws-log-driver';\nimport { PlacementConstraint } from '../placement';\nimport { ProxyConfiguration } from '../proxy-configuration/proxy-configuration';\nimport { RuntimePlatform } from '../runtime-platform';\nimport { ImportedTaskDefinition } from './_imported-task-definition';\n\n/**\n * The interface for all task definitions.\n */\nexport interface ITaskDefinition extends IResource {\n  /**\n   * ARN of this task definition\n   * @attribute\n   */\n  readonly taskDefinitionArn: string;\n\n  /**\n   * Execution role for this task definition\n   */\n  readonly executionRole?: iam.IRole;\n\n  /**\n   * What launch types this task definition should be compatible with.\n   */\n  readonly compatibility: Compatibility;\n\n  /**\n   * Return true if the task definition can be run on an EC2 cluster\n   */\n  readonly isEc2Compatible: boolean;\n\n  /**\n   * Return true if the task definition can be run on a Fargate cluster\n   */\n  readonly isFargateCompatible: boolean;\n\n  /**\n   * Return true if the task definition can be run on a ECS Anywhere cluster\n   */\n  readonly isExternalCompatible: boolean;\n\n\n  /**\n   * The networking mode to use for the containers in the task.\n   */\n  readonly networkMode: NetworkMode;\n\n  /**\n   * The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   */\n  readonly taskRole: iam.IRole;\n}\n\n/**\n * The common properties for all task definitions. For more information, see\n * [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html).\n */\nexport interface CommonTaskDefinitionProps {\n  /**\n   * The name of a family that this task definition is registered to. A family groups multiple versions of a task definition.\n   *\n   * @default - Automatically generated name.\n   */\n  readonly family?: string;\n\n  /**\n   * The name of the IAM task execution role that grants the ECS agent permission to call AWS APIs on your behalf.\n   *\n   * The role will be used to retrieve container images from ECR and create CloudWatch log groups.\n   *\n   * @default - An execution role will be automatically created if you use ECR images in your task definition.\n   */\n  readonly executionRole?: iam.IRole;\n\n  /**\n   * The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   *\n   * @default - A task role is automatically created for you.\n   */\n  readonly taskRole?: iam.IRole;\n\n  /**\n   * The configuration details for the App Mesh proxy.\n   *\n   * @default - No proxy configuration.\n   */\n  readonly proxyConfiguration?: ProxyConfiguration;\n\n  /**\n   * The list of volume definitions for the task. For more information, see\n   * [Task Definition Parameter Volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide//task_definition_parameters.html#volumes).\n   *\n   * @default - No volumes are passed to the Docker daemon on a container instance.\n   */\n  readonly volumes?: Volume[];\n}\n\n/**\n * The properties for task definitions.\n */\nexport interface TaskDefinitionProps extends CommonTaskDefinitionProps {\n  /**\n   * The networking mode to use for the containers in the task.\n   *\n   * On Fargate, the only supported networking mode is AwsVpc.\n   *\n   * @default - NetworkMode.Bridge for EC2 & External tasks, AwsVpc for Fargate tasks.\n   */\n  readonly networkMode?: NetworkMode;\n\n  /**\n   * The placement constraints to use for tasks in the service.\n   *\n   * You can specify a maximum of 10 constraints per task (this limit includes\n   * constraints in the task definition and those specified at run time).\n   *\n   * Not supported in Fargate.\n   *\n   * @default - No placement constraints.\n   */\n  readonly placementConstraints?: PlacementConstraint[];\n\n  /**\n   * The task launch type compatiblity requirement.\n   */\n  readonly compatibility: Compatibility;\n\n  /**\n   * The number of cpu units used by the task.\n   *\n   * If you are using the EC2 launch type, this field is optional and any value can be used.\n   * If you are using the Fargate launch type, this field is required and you must use one of the following values,\n   * which determines your range of valid values for the memory parameter:\n   *\n   * 256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)\n   *\n   * 512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)\n   *\n   * 1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)\n   *\n   * 2048 (2 vCPU) - Available memory values: Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)\n   *\n   * 4096 (4 vCPU) - Available memory values: Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)\n   *\n   * @default - CPU units are not specified.\n   */\n  readonly cpu?: string;\n\n  /**\n   * The amount (in MiB) of memory used by the task.\n   *\n   * If using the EC2 launch type, this field is optional and any value can be used.\n   * If using the Fargate launch type, this field is required and you must use one of the following values,\n   * which determines your range of valid values for the cpu parameter:\n   *\n   * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)\n   *\n   * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)\n   *\n   * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)\n   *\n   * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)\n   *\n   * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)\n   *\n   * @default - Memory used by task is not specified.\n   */\n  readonly memoryMiB?: string;\n\n  /**\n   * The IPC resource namespace to use for the containers in the task.\n   *\n   * Not supported in Fargate and Windows containers.\n   *\n   * @default - IpcMode used by the task is not specified\n   */\n  readonly ipcMode?: IpcMode;\n\n  /**\n   * The process namespace to use for the containers in the task.\n   *\n   * Not supported in Fargate and Windows containers.\n   *\n   * @default - PidMode used by the task is not specified\n   */\n  readonly pidMode?: PidMode;\n\n  /**\n   * The inference accelerators to use for the containers in the task.\n   *\n   * Not supported in Fargate.\n   *\n   * @default - No inference accelerators.\n   */\n  readonly inferenceAccelerators?: InferenceAccelerator[];\n\n  /**\n   * The amount (in GiB) of ephemeral storage to be allocated to the task.\n   *\n   * Only supported in Fargate platform version 1.4.0 or later.\n   *\n   * @default - Undefined, in which case, the task will receive 20GiB ephemeral storage.\n   */\n  readonly ephemeralStorageGiB?: number;\n\n  /**\n   * The operating system that your task definitions are running on.\n   * A runtimePlatform is supported only for tasks using the Fargate launch type.\n   *\n   *\n   * @default - Undefined.\n   */\n  readonly runtimePlatform?: RuntimePlatform;\n}\n\n/**\n * The common task definition attributes used across all types of task definitions.\n */\nexport interface CommonTaskDefinitionAttributes {\n  /**\n   * The arn of the task definition\n   */\n  readonly taskDefinitionArn: string;\n\n  /**\n   * The networking mode to use for the containers in the task.\n   *\n   * @default Network mode cannot be provided to the imported task.\n   */\n  readonly networkMode?: NetworkMode;\n\n  /**\n   * The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   *\n   * @default Permissions cannot be granted to the imported task.\n   */\n  readonly taskRole?: iam.IRole;\n}\n\n/**\n *  A reference to an existing task definition\n */\nexport interface TaskDefinitionAttributes extends CommonTaskDefinitionAttributes {\n  /**\n   * What launch types this task definition should be compatible with.\n   *\n   * @default Compatibility.EC2_AND_FARGATE\n   */\n  readonly compatibility?: Compatibility;\n}\n\nabstract class TaskDefinitionBase extends Resource implements ITaskDefinition {\n\n  public abstract readonly compatibility: Compatibility;\n  public abstract readonly networkMode: NetworkMode;\n  public abstract readonly taskDefinitionArn: string;\n  public abstract readonly taskRole: iam.IRole;\n  public abstract readonly executionRole?: iam.IRole;\n\n  /**\n   * Return true if the task definition can be run on an EC2 cluster\n   */\n  public get isEc2Compatible(): boolean {\n    return isEc2Compatible(this.compatibility);\n  }\n\n  /**\n   * Return true if the task definition can be run on a Fargate cluster\n   */\n  public get isFargateCompatible(): boolean {\n    return isFargateCompatible(this.compatibility);\n  }\n\n  /**\n   * Return true if the task definition can be run on a ECS anywhere cluster\n   */\n  public get isExternalCompatible(): boolean {\n    return isExternalCompatible(this.compatibility);\n  }\n}\n\n/**\n * The base class for all task definitions.\n */\nexport class TaskDefinition extends TaskDefinitionBase {\n\n  /**\n   * Imports a task definition from the specified task definition ARN.\n   *\n   * The task will have a compatibility of EC2+Fargate.\n   */\n  public static fromTaskDefinitionArn(scope: Construct, id: string, taskDefinitionArn: string): ITaskDefinition {\n    return new ImportedTaskDefinition(scope, id, { taskDefinitionArn: taskDefinitionArn });\n  }\n\n  /**\n   * Create a task definition from a task definition reference\n   */\n  public static fromTaskDefinitionAttributes(scope: Construct, id: string, attrs: TaskDefinitionAttributes): ITaskDefinition {\n    return new ImportedTaskDefinition(scope, id, {\n      taskDefinitionArn: attrs.taskDefinitionArn,\n      compatibility: attrs.compatibility,\n      networkMode: attrs.networkMode,\n      taskRole: attrs.taskRole,\n    });\n  }\n\n  /**\n   * The name of a family that this task definition is registered to.\n   * A family groups multiple versions of a task definition.\n   */\n  public readonly family: string;\n\n  /**\n   * The full Amazon Resource Name (ARN) of the task definition.\n   * @attribute\n   */\n  public readonly taskDefinitionArn: string;\n\n  /**\n   * The name of the IAM role that grants containers in the task permission to call AWS APIs on your behalf.\n   */\n  public readonly taskRole: iam.IRole;\n\n  /**\n   * The networking mode to use for the containers in the task.\n   */\n  public readonly networkMode: NetworkMode;\n\n  /**\n   * Default container for this task\n   *\n   * Load balancers will send traffic to this container. The first\n   * essential container that is added to this task will become the default\n   * container.\n   */\n  public defaultContainer?: ContainerDefinition;\n\n  /**\n   * The task launch type compatibility requirement.\n   */\n  public readonly compatibility: Compatibility;\n\n  /**\n   * The amount (in GiB) of ephemeral storage to be allocated to the task.\n   *\n   * Only supported in Fargate platform version 1.4.0 or later.\n   */\n  public readonly ephemeralStorageGiB?: number;\n\n  /**\n   * The container definitions.\n   */\n  protected readonly containers = new Array<ContainerDefinition>();\n\n  /**\n   * All volumes\n   */\n  private readonly volumes: Volume[] = [];\n\n  /**\n   * Placement constraints for task instances\n   */\n  private readonly placementConstraints = new Array<CfnTaskDefinition.TaskDefinitionPlacementConstraintProperty>();\n\n  /**\n   * Inference accelerators for task instances\n   */\n  private readonly _inferenceAccelerators: InferenceAccelerator[] = [];\n\n  private _executionRole?: iam.IRole;\n\n  private _referencesSecretJsonField?: boolean;\n\n  private runtimePlatform?: RuntimePlatform;\n\n  /**\n   * Constructs a new instance of the TaskDefinition class.\n   */\n  constructor(scope: Construct, id: string, props: TaskDefinitionProps) {\n    super(scope, id);\n\n    this.family = props.family || Names.uniqueId(this);\n    this.compatibility = props.compatibility;\n\n    if (props.volumes) {\n      props.volumes.forEach(v => this.addVolume(v));\n    }\n\n    this.networkMode = props.networkMode ?? (this.isFargateCompatible ? NetworkMode.AWS_VPC : NetworkMode.BRIDGE);\n    if (this.isFargateCompatible && this.networkMode !== NetworkMode.AWS_VPC) {\n      throw new Error(`Fargate tasks can only have AwsVpc network mode, got: ${this.networkMode}`);\n    }\n    if (props.proxyConfiguration && this.networkMode !== NetworkMode.AWS_VPC) {\n      throw new Error(`ProxyConfiguration can only be used with AwsVpc network mode, got: ${this.networkMode}`);\n    }\n    if (props.placementConstraints && props.placementConstraints.length > 0 && this.isFargateCompatible) {\n      throw new Error('Cannot set placement constraints on tasks that run on Fargate');\n    }\n\n    if (this.isFargateCompatible && (!props.cpu || !props.memoryMiB)) {\n      throw new Error(`Fargate-compatible tasks require both CPU (${props.cpu}) and memory (${props.memoryMiB}) specifications`);\n    }\n\n    if (props.inferenceAccelerators && props.inferenceAccelerators.length > 0 && this.isFargateCompatible) {\n      throw new Error('Cannot use inference accelerators on tasks that run on Fargate');\n    }\n\n    if (this.isExternalCompatible && this.networkMode !== NetworkMode.BRIDGE) {\n      throw new Error(`External tasks can only have Bridge network mode, got: ${this.networkMode}`);\n    }\n\n    if (!this.isFargateCompatible && props.runtimePlatform) {\n      throw new Error('Cannot specify runtimePlatform in non-Fargate compatible tasks');\n    }\n\n    this._executionRole = props.executionRole;\n\n    this.taskRole = props.taskRole || new iam.Role(this, 'TaskRole', {\n      assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),\n    });\n\n    if (props.inferenceAccelerators) {\n      props.inferenceAccelerators.forEach(ia => this.addInferenceAccelerator(ia));\n    }\n\n    this.ephemeralStorageGiB = props.ephemeralStorageGiB;\n\n    // validate the cpu and memory size for the Windows operation system family.\n    if (props.runtimePlatform?.operatingSystemFamily?._operatingSystemFamily.includes('WINDOWS')) {\n      // We know that props.cpu and props.memoryMiB are defined because an error would have been thrown previously if they were not.\n      // But, typescript is not able to figure this out, so using the `!` operator here to let the type-checker know they are defined.\n      this.checkFargateWindowsBasedTasksSize(props.cpu!, props.memoryMiB!, props.runtimePlatform!);\n    }\n\n    this.runtimePlatform = props.runtimePlatform;\n\n    const taskDef = new CfnTaskDefinition(this, 'Resource', {\n      containerDefinitions: Lazy.any({ produce: () => this.renderContainers() }, { omitEmptyArray: true }),\n      volumes: Lazy.any({ produce: () => this.renderVolumes() }, { omitEmptyArray: true }),\n      executionRoleArn: Lazy.string({ produce: () => this.executionRole && this.executionRole.roleArn }),\n      family: this.family,\n      taskRoleArn: this.taskRole.roleArn,\n      requiresCompatibilities: [\n        ...(isEc2Compatible(props.compatibility) ? ['EC2'] : []),\n        ...(isFargateCompatible(props.compatibility) ? ['FARGATE'] : []),\n        ...(isExternalCompatible(props.compatibility) ? ['EXTERNAL'] : []),\n      ],\n      networkMode: this.renderNetworkMode(this.networkMode),\n      placementConstraints: Lazy.any({\n        produce: () =>\n          !isFargateCompatible(this.compatibility) ? this.placementConstraints : undefined,\n      }, { omitEmptyArray: true }),\n      proxyConfiguration: props.proxyConfiguration ? props.proxyConfiguration.bind(this.stack, this) : undefined,\n      cpu: props.cpu,\n      memory: props.memoryMiB,\n      ipcMode: props.ipcMode,\n      pidMode: props.pidMode,\n      inferenceAccelerators: Lazy.any({\n        produce: () =>\n          !isFargateCompatible(this.compatibility) ? this.renderInferenceAccelerators() : undefined,\n      }, { omitEmptyArray: true }),\n      ephemeralStorage: this.ephemeralStorageGiB ? {\n        sizeInGiB: this.ephemeralStorageGiB,\n      } : undefined,\n      runtimePlatform: this.isFargateCompatible && this.runtimePlatform ? {\n        cpuArchitecture: this.runtimePlatform?.cpuArchitecture?._cpuArchitecture,\n        operatingSystemFamily: this.runtimePlatform?.operatingSystemFamily?._operatingSystemFamily,\n      } : undefined,\n    });\n\n    if (props.placementConstraints) {\n      props.placementConstraints.forEach(pc => this.addPlacementConstraint(pc));\n    }\n\n    this.taskDefinitionArn = taskDef.ref;\n    this.node.addValidation({ validate: () => this.validateTaskDefinition() });\n  }\n\n  public get executionRole(): iam.IRole | undefined {\n    return this._executionRole;\n  }\n\n  /**\n   * Public getter method to access list of inference accelerators attached to the instance.\n   */\n  public get inferenceAccelerators(): InferenceAccelerator[] {\n    return this._inferenceAccelerators;\n  }\n\n  private renderVolumes(): CfnTaskDefinition.VolumeProperty[] {\n    return this.volumes.map(renderVolume);\n\n    function renderVolume(spec: Volume): CfnTaskDefinition.VolumeProperty {\n      return {\n        host: spec.host,\n        name: spec.name,\n        dockerVolumeConfiguration: spec.dockerVolumeConfiguration && {\n          autoprovision: spec.dockerVolumeConfiguration.autoprovision,\n          driver: spec.dockerVolumeConfiguration.driver,\n          driverOpts: spec.dockerVolumeConfiguration.driverOpts,\n          labels: spec.dockerVolumeConfiguration.labels,\n          scope: spec.dockerVolumeConfiguration.scope,\n        },\n        efsVolumeConfiguration: spec.efsVolumeConfiguration && {\n          fileSystemId: spec.efsVolumeConfiguration.fileSystemId,\n          authorizationConfig: spec.efsVolumeConfiguration.authorizationConfig,\n          rootDirectory: spec.efsVolumeConfiguration.rootDirectory,\n          transitEncryption: spec.efsVolumeConfiguration.transitEncryption,\n          transitEncryptionPort: spec.efsVolumeConfiguration.transitEncryptionPort,\n\n        },\n      };\n    }\n  }\n\n  private renderInferenceAccelerators(): CfnTaskDefinition.InferenceAcceleratorProperty[] {\n    return this._inferenceAccelerators.map(renderInferenceAccelerator);\n\n    function renderInferenceAccelerator(inferenceAccelerator: InferenceAccelerator) : CfnTaskDefinition.InferenceAcceleratorProperty {\n      return {\n        deviceName: inferenceAccelerator.deviceName,\n        deviceType: inferenceAccelerator.deviceType,\n      };\n    }\n  }\n\n  /**\n   * Validate the existence of the input target and set default values.\n   *\n   * @internal\n   */\n  public _validateTarget(options: LoadBalancerTargetOptions): LoadBalancerTarget {\n    const targetContainer = this.findContainer(options.containerName);\n    if (targetContainer === undefined) {\n      throw new Error(`No container named '${options.containerName}'. Did you call \"addContainer()\"?`);\n    }\n    const targetProtocol = options.protocol || Protocol.TCP;\n    const targetContainerPort = options.containerPort || targetContainer.containerPort;\n    const portMapping = targetContainer.findPortMapping(targetContainerPort, targetProtocol);\n    if (portMapping === undefined) {\n      // eslint-disable-next-line max-len\n      throw new Error(`Container '${targetContainer}' has no mapping for port ${options.containerPort} and protocol ${targetProtocol}. Did you call \"container.addPortMappings()\"?`);\n    }\n    return {\n      containerName: options.containerName,\n      portMapping,\n    };\n  }\n\n  /**\n   * Returns the port range to be opened that match the provided container name and container port.\n   *\n   * @internal\n   */\n  public _portRangeFromPortMapping(portMapping: PortMapping): ec2.Port {\n    if (portMapping.hostPort !== undefined && portMapping.hostPort !== 0) {\n      return portMapping.protocol === Protocol.UDP ? ec2.Port.udp(portMapping.hostPort) : ec2.Port.tcp(portMapping.hostPort);\n    }\n    if (this.networkMode === NetworkMode.BRIDGE || this.networkMode === NetworkMode.NAT) {\n      return EPHEMERAL_PORT_RANGE;\n    }\n    return portMapping.protocol === Protocol.UDP ? ec2.Port.udp(portMapping.containerPort) : ec2.Port.tcp(portMapping.containerPort);\n  }\n\n  /**\n   * Adds a policy statement to the task IAM role.\n   */\n  public addToTaskRolePolicy(statement: iam.PolicyStatement) {\n    this.taskRole.addToPrincipalPolicy(statement);\n  }\n\n  /**\n   * Adds a policy statement to the task execution IAM role.\n   */\n  public addToExecutionRolePolicy(statement: iam.PolicyStatement) {\n    this.obtainExecutionRole().addToPrincipalPolicy(statement);\n  }\n\n  /**\n   * Adds a new container to the task definition.\n   */\n  public addContainer(id: string, props: ContainerDefinitionOptions) {\n    return new ContainerDefinition(this, id, { taskDefinition: this, ...props });\n  }\n\n  /**\n   * Adds a firelens log router to the task definition.\n   */\n  public addFirelensLogRouter(id: string, props: FirelensLogRouterDefinitionOptions) {\n    // only one firelens log router is allowed in each task.\n    if (this.containers.find(x => x instanceof FirelensLogRouter)) {\n      throw new Error('Firelens log router is already added in this task.');\n    }\n\n    return new FirelensLogRouter(this, id, { taskDefinition: this, ...props });\n  }\n\n  /**\n   * Links a container to this task definition.\n   * @internal\n   */\n  public _linkContainer(container: ContainerDefinition) {\n    this.containers.push(container);\n    if (this.defaultContainer === undefined && container.essential) {\n      this.defaultContainer = container;\n    }\n    if (container.referencesSecretJsonField) {\n      this._referencesSecretJsonField = true;\n    }\n  }\n\n  /**\n   * Adds a volume to the task definition.\n   */\n  public addVolume(volume: Volume) {\n    this.volumes.push(volume);\n  }\n\n  /**\n   * Adds the specified placement constraint to the task definition.\n   */\n  public addPlacementConstraint(constraint: PlacementConstraint) {\n    if (isFargateCompatible(this.compatibility)) {\n      throw new Error('Cannot set placement constraints on tasks that run on Fargate');\n    }\n    this.placementConstraints.push(...constraint.toJson());\n  }\n\n  /**\n   * Adds the specified extension to the task definition.\n   *\n   * Extension can be used to apply a packaged modification to\n   * a task definition.\n   */\n  public addExtension(extension: ITaskDefinitionExtension) {\n    extension.extend(this);\n  }\n\n  /**\n   * Adds an inference accelerator to the task definition.\n   */\n  public addInferenceAccelerator(inferenceAccelerator: InferenceAccelerator) {\n    if (isFargateCompatible(this.compatibility)) {\n      throw new Error('Cannot use inference accelerators on tasks that run on Fargate');\n    }\n    this._inferenceAccelerators.push(inferenceAccelerator);\n  }\n\n  /**\n   * Creates the task execution IAM role if it doesn't already exist.\n   */\n  public obtainExecutionRole(): iam.IRole {\n    if (!this._executionRole) {\n      this._executionRole = new iam.Role(this, 'ExecutionRole', {\n        assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),\n        // needed for cross-account access with TagParameterContainerImage\n        roleName: PhysicalName.GENERATE_IF_NEEDED,\n      });\n    }\n    return this._executionRole;\n  }\n\n  /**\n   * Whether this task definition has at least a container that references a\n   * specific JSON field of a secret stored in Secrets Manager.\n   */\n  public get referencesSecretJsonField(): boolean | undefined {\n    return this._referencesSecretJsonField;\n  }\n\n  /**\n   * Validates the task definition.\n   */\n  private validateTaskDefinition(): string[] {\n    const ret = new Array<string>();\n\n    if (isEc2Compatible(this.compatibility)) {\n      // EC2 mode validations\n\n      // Container sizes\n      for (const container of this.containers) {\n        if (!container.memoryLimitSpecified) {\n          ret.push(`ECS Container ${container.containerName} must have at least one of 'memoryLimitMiB' or 'memoryReservationMiB' specified`);\n        }\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Returns the container that match the provided containerName.\n   */\n  public findContainer(containerName: string): ContainerDefinition | undefined {\n    return this.containers.find(c => c.containerName === containerName);\n  }\n\n  private renderNetworkMode(networkMode: NetworkMode): string | undefined {\n    return (networkMode === NetworkMode.NAT) ? undefined : networkMode;\n  }\n\n  private renderContainers() {\n    // add firelens log router container if any application container is using firelens log driver,\n    // also check if already created log router container\n    for (const container of this.containers) {\n      if (container.logDriverConfig && container.logDriverConfig.logDriver === 'awsfirelens'\n        && !this.containers.find(x => x instanceof FirelensLogRouter)) {\n        this.addFirelensLogRouter('log-router', {\n          image: obtainDefaultFluentBitECRImage(this, container.logDriverConfig),\n          firelensConfig: {\n            type: FirelensLogRouterType.FLUENTBIT,\n          },\n          logging: new AwsLogDriver({ streamPrefix: 'firelens' }),\n          memoryReservationMiB: 50,\n        });\n\n        break;\n      }\n    }\n\n    return this.containers.map(x => x.renderContainerDefinition());\n  }\n\n  private checkFargateWindowsBasedTasksSize(cpu: string, memory: string, runtimePlatform: RuntimePlatform) {\n    if (Number(cpu) === 1024) {\n      if (Number(memory) < 1024 || Number(memory) > 8192 || (Number(memory)% 1024 !== 0)) {\n        throw new Error(`If provided cpu is ${cpu}, then memoryMiB must have a min of 1024 and a max of 8192, in 1024 increments. Provided memoryMiB was ${Number(memory)}.`);\n      }\n    } else if (Number(cpu) === 2048) {\n      if (Number(memory) < 4096 || Number(memory) > 16384 || (Number(memory) % 1024 !== 0)) {\n        throw new Error(`If provided cpu is ${cpu}, then memoryMiB must have a min of 4096 and max of 16384, in 1024 increments. Provided memoryMiB ${Number(memory)}.`);\n      }\n    } else if (Number(cpu) === 4096) {\n      if (Number(memory) < 8192 || Number(memory) > 30720 || (Number(memory) % 1024 !== 0)) {\n        throw new Error(`If provided cpu is ${ cpu }, then memoryMiB must have a min of 8192 and a max of 30720, in 1024 increments.Provided memoryMiB was ${ Number(memory) }.`);\n      }\n    } else {\n      throw new Error(`If operatingSystemFamily is ${runtimePlatform.operatingSystemFamily!._operatingSystemFamily}, then cpu must be in 1024 (1 vCPU), 2048 (2 vCPU), or 4096 (4 vCPU). Provided value was: ${cpu}`);\n    }\n  };\n}\n\n/**\n * The port range to open up for dynamic port mapping\n */\nconst EPHEMERAL_PORT_RANGE = ec2.Port.tcpRange(32768, 65535);\n\n/**\n * The networking mode to use for the containers in the task.\n */\nexport enum NetworkMode {\n  /**\n   * The task's containers do not have external connectivity and port mappings can't be specified in the container definition.\n   */\n  NONE = 'none',\n\n  /**\n   * The task utilizes Docker's built-in virtual network which runs inside each container instance.\n   */\n  BRIDGE = 'bridge',\n\n  /**\n   * The task is allocated an elastic network interface.\n   */\n  AWS_VPC = 'awsvpc',\n\n  /**\n   * The task bypasses Docker's built-in virtual network and maps container ports directly to the EC2 instance's network interface directly.\n   *\n   * In this mode, you can't run multiple instantiations of the same task on a\n   * single container instance when port mappings are used.\n   */\n  HOST = 'host',\n\n  /**\n   * The task utilizes NAT network mode required by Windows containers.\n   *\n   * This is the only supported network mode for Windows containers. For more information, see\n   * [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#network_mode).\n   */\n  NAT = 'nat'\n}\n\n/**\n * The IPC resource namespace to use for the containers in the task.\n */\nexport enum IpcMode {\n  /**\n   * If none is specified, then IPC resources within the containers of a task are private and not\n   * shared with other containers in a task or on the container instance\n   */\n  NONE = 'none',\n\n  /**\n   * If host is specified, then all containers within the tasks that specified the host IPC mode on\n   * the same container instance share the same IPC resources with the host Amazon EC2 instance.\n   */\n  HOST = 'host',\n\n  /**\n   * If task is specified, all containers within the specified task share the same IPC resources.\n   */\n  TASK = 'task',\n}\n\n/**\n * The process namespace to use for the containers in the task.\n */\nexport enum PidMode {\n  /**\n   * If host is specified, then all containers within the tasks that specified the host PID mode\n   * on the same container instance share the same process namespace with the host Amazon EC2 instance.\n   */\n  HOST = 'host',\n\n  /**\n   * If task is specified, all containers within the specified task share the same process namespace.\n   */\n  TASK = 'task',\n}\n\n/**\n * Elastic Inference Accelerator.\n * For more information, see [Elastic Inference Basics](https://docs.aws.amazon.com/elastic-inference/latest/developerguide/basics.html)\n */\nexport interface InferenceAccelerator {\n  /**\n   * The Elastic Inference accelerator device name.\n   * @default - empty\n   */\n  readonly deviceName?: string;\n\n  /**\n   * The Elastic Inference accelerator type to use. The allowed values are: eia2.medium, eia2.large and eia2.xlarge.\n   * @default - empty\n   */\n  readonly deviceType?: string;\n}\n\n/**\n * A data volume used in a task definition.\n *\n * For tasks that use a Docker volume, specify a DockerVolumeConfiguration.\n * For tasks that use a bind mount host volume, specify a host and optional sourcePath.\n *\n * For more information, see [Using Data Volumes in Tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).\n */\nexport interface Volume {\n  /**\n   * This property is specified when you are using bind mount host volumes.\n   *\n   * Bind mount host volumes are supported when you are using either the EC2 or Fargate launch types.\n   * The contents of the host parameter determine whether your bind mount host volume persists on the\n   * host container instance and where it is stored. If the host parameter is empty, then the Docker\n   * daemon assigns a host path for your data volume. However, the data is not guaranteed to persist\n   * after the containers associated with it stop running.\n   */\n  readonly host?: Host;\n\n  /**\n   * The name of the volume.\n   *\n   * Up to 255 letters (uppercase and lowercase), numbers, and hyphens are allowed.\n   * This name is referenced in the sourceVolume parameter of container definition mountPoints.\n   */\n  readonly name: string;\n\n  /**\n   * This property is specified when you are using Docker volumes.\n   *\n   * Docker volumes are only supported when you are using the EC2 launch type.\n   * Windows containers only support the use of the local driver.\n   * To use bind mounts, specify a host instead.\n   */\n  readonly dockerVolumeConfiguration?: DockerVolumeConfiguration;\n\n  /**\n   * This property is specified when you are using Amazon EFS.\n   *\n   * When specifying Amazon EFS volumes in tasks using the Fargate launch type,\n   * Fargate creates a supervisor container that is responsible for managing the Amazon EFS volume.\n   * The supervisor container uses a small amount of the task's memory.\n   * The supervisor container is visible when querying the task metadata version 4 endpoint,\n   * but is not visible in CloudWatch Container Insights.\n   *\n   * @default No Elastic FileSystem is setup\n   */\n  readonly efsVolumeConfiguration?: EfsVolumeConfiguration;\n}\n\n/**\n * The details on a container instance bind mount host volume.\n */\nexport interface Host {\n  /**\n   * Specifies the path on the host container instance that is presented to the container.\n   * If the sourcePath value does not exist on the host container instance, the Docker daemon creates it.\n   * If the location does exist, the contents of the source path folder are exported.\n   *\n   * This property is not supported for tasks that use the Fargate launch type.\n   */\n  readonly sourcePath?: string;\n}\n\n/**\n * Properties for an ECS target.\n *\n * @internal\n */\nexport interface LoadBalancerTarget {\n  /**\n   * The name of the container.\n   */\n  readonly containerName: string;\n\n  /**\n   * The port mapping of the target.\n   */\n  readonly portMapping: PortMapping\n}\n\n/**\n * Properties for defining an ECS target. The port mapping for it must already have been created through addPortMapping().\n */\nexport interface LoadBalancerTargetOptions {\n  /**\n   * The name of the container.\n   */\n  readonly containerName: string;\n\n  /**\n   * The port number of the container. Only applicable when using application/network load balancers.\n   *\n   * @default - Container port of the first added port mapping.\n   */\n  readonly containerPort?: number;\n\n  /**\n   * The protocol used for the port mapping. Only applicable when using application load balancers.\n   *\n   * @default Protocol.TCP\n   */\n  readonly protocol?: Protocol;\n}\n\n/**\n * The configuration for a Docker volume. Docker volumes are only supported when you are using the EC2 launch type.\n */\nexport interface DockerVolumeConfiguration {\n  /**\n   * Specifies whether the Docker volume should be created if it does not already exist.\n   * If true is specified, the Docker volume will be created for you.\n   *\n   * @default false\n   */\n  readonly autoprovision?: boolean;\n  /**\n   * The Docker volume driver to use.\n   */\n  readonly driver: string;\n  /**\n   * A map of Docker driver-specific options passed through.\n   *\n   * @default No options\n   */\n  readonly driverOpts?: {[key: string]: string};\n  /**\n   * Custom metadata to add to your Docker volume.\n   *\n   * @default No labels\n   */\n  readonly labels?: { [key: string]: string; }\n  /**\n   * The scope for the Docker volume that determines its lifecycle.\n   */\n  readonly scope: Scope;\n}\n\n/**\n * The authorization configuration details for the Amazon EFS file system.\n */\nexport interface AuthorizationConfig {\n  /**\n   * The access point ID to use.\n   * If an access point is specified, the root directory value will be\n   * relative to the directory set for the access point.\n   * If specified, transit encryption must be enabled in the EFSVolumeConfiguration.\n   *\n   * @default No id\n   */\n  readonly accessPointId?: string;\n  /**\n   * Whether or not to use the Amazon ECS task IAM role defined\n   * in a task definition when mounting the Amazon EFS file system.\n   * If enabled, transit encryption must be enabled in the EFSVolumeConfiguration.\n   *\n   * Valid values: ENABLED | DISABLED\n   *\n   * @default If this parameter is omitted, the default value of DISABLED is used.\n   */\n  readonly iam?: string;\n}\n\n/**\n * The configuration for an Elastic FileSystem volume.\n */\nexport interface EfsVolumeConfiguration {\n  /**\n   * The Amazon EFS file system ID to use.\n   */\n  readonly fileSystemId: string;\n  /**\n   * The directory within the Amazon EFS file system to mount as the root directory inside the host.\n   * Specifying / will have the same effect as omitting this parameter.\n   *\n   * @default The root of the Amazon EFS volume\n   */\n  readonly rootDirectory?: string;\n  /**\n   * Whether or not to enable encryption for Amazon EFS data in transit between\n   * the Amazon ECS host and the Amazon EFS server.\n   * Transit encryption must be enabled if Amazon EFS IAM authorization is used.\n   *\n   * Valid values: ENABLED | DISABLED\n   *\n   * @default DISABLED\n   */\n  readonly transitEncryption?: string;\n  /**\n   * The port to use when sending encrypted data between\n   * the Amazon ECS host and the Amazon EFS server. EFS mount helper uses.\n   *\n   * @default Port selection strategy that the Amazon EFS mount helper uses.\n   */\n  readonly transitEncryptionPort?: number;\n  /**\n   * The authorization configuration details for the Amazon EFS file system.\n   *\n   * @default No configuration.\n   */\n  readonly authorizationConfig?: AuthorizationConfig;\n}\n\n/**\n * The scope for the Docker volume that determines its lifecycle.\n * Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops.\n * Docker volumes that are scoped as shared persist after the task stops.\n */\nexport enum Scope {\n  /**\n   * Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops.\n   */\n  TASK = 'task',\n\n  /**\n   * Docker volumes that are scoped as shared persist after the task stops.\n   */\n  SHARED = 'shared'\n}\n\n/**\n * The task launch type compatibility requirement.\n */\nexport enum Compatibility {\n  /**\n   * The task should specify the EC2 launch type.\n   */\n  EC2,\n\n  /**\n   * The task should specify the Fargate launch type.\n   */\n  FARGATE,\n\n  /**\n   * The task can specify either the EC2 or Fargate launch types.\n   */\n  EC2_AND_FARGATE,\n\n  /**\n   * The task should specify the External launch type.\n   */\n  EXTERNAL\n}\n\n/**\n * An extension for Task Definitions\n *\n * Classes that want to make changes to a TaskDefinition (such as\n * adding helper containers) can implement this interface, and can\n * then be \"added\" to a TaskDefinition like so:\n *\n *    taskDefinition.addExtension(new MyExtension(\"some_parameter\"));\n */\nexport interface ITaskDefinitionExtension {\n  /**\n   * Apply the extension to the given TaskDefinition\n   *\n   * @param taskDefinition [disable-awslint:ref-via-interface]\n   */\n  extend(taskDefinition: TaskDefinition): void;\n}\n\n/**\n * Return true if the given task definition can be run on an EC2 cluster\n */\nexport function isEc2Compatible(compatibility: Compatibility): boolean {\n  return [Compatibility.EC2, Compatibility.EC2_AND_FARGATE].includes(compatibility);\n}\n\n/**\n * Return true if the given task definition can be run on a Fargate cluster\n */\nexport function isFargateCompatible(compatibility: Compatibility): boolean {\n  return [Compatibility.FARGATE, Compatibility.EC2_AND_FARGATE].includes(compatibility);\n}\n\n/**\n * Return true if the given task definition can be run on a ECS Anywhere cluster\n */\nexport function isExternalCompatible(compatibility: Compatibility): boolean {\n  return [Compatibility.EXTERNAL].includes(compatibility);\n}\n"],
  "mappings": "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",
  "names": []
}
