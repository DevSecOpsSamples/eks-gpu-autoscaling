{
  "version": 3,
  "sources": ["container-image.ts"],
  "sourcesContent": ["import * as ecr from '../../aws-ecr';\nimport { DockerImageAsset, TarballImageAsset } from '../../aws-ecr-assets';\nimport { Construct } from 'constructs';\nimport { ContainerDefinition } from './container-definition';\nimport { CfnTaskDefinition } from './ecs.generated';\n\n/**\n * Constructs for types of container images\n */\nexport abstract class ContainerImage {\n  /**\n   * Reference an image on DockerHub or another online registry\n   */\n  public static fromRegistry(name: string, props: RepositoryImageProps = {}) {\n    return new RepositoryImage(name, props);\n  }\n\n  /**\n   * Reference an image in an ECR repository\n   */\n  public static fromEcrRepository(repository: ecr.IRepository, tag: string = 'latest') {\n    return new EcrImage(repository, tag);\n  }\n\n  /**\n   * Reference an image that's constructed directly from sources on disk.\n   *\n   * If you already have a `DockerImageAsset` instance, you can use the\n   * `ContainerImage.fromDockerImageAsset` method instead.\n   *\n   * @param directory The directory containing the Dockerfile\n   */\n  public static fromAsset(directory: string, props: AssetImageProps = {}) {\n    return new AssetImage(directory, props);\n  }\n\n  /**\n   * Use an existing `DockerImageAsset` for this container image.\n   *\n   * @param asset The `DockerImageAsset` to use for this container definition.\n   */\n  public static fromDockerImageAsset(asset: DockerImageAsset): ContainerImage {\n    return {\n      bind(_scope: Construct, containerDefinition: ContainerDefinition): ContainerImageConfig {\n        asset.repository.grantPull(containerDefinition.taskDefinition.obtainExecutionRole());\n        return {\n          imageName: asset.imageUri,\n        };\n      },\n    };\n  }\n\n  /**\n   * Use an existing tarball for this container image.\n   *\n   * Use this method if the container image has already been created by another process (e.g. jib)\n   * and you want to add it as a container image asset.\n   *\n   * @param tarballFile Absolute path to the tarball. You can use language-specific idioms (such as `__dirname` in Node.js)\n   *                    to create an absolute path based on the current script running directory.\n   */\n  public static fromTarball(tarballFile: string): ContainerImage {\n    return {\n      bind(scope: Construct, containerDefinition: ContainerDefinition): ContainerImageConfig {\n\n        const asset = new TarballImageAsset(scope, 'Tarball', { tarballFile });\n        asset.repository.grantPull(containerDefinition.taskDefinition.obtainExecutionRole());\n\n        return {\n          imageName: asset.imageUri,\n        };\n      },\n    };\n  }\n\n  /**\n   * Called when the image is used by a ContainerDefinition\n   */\n  public abstract bind(scope: Construct, containerDefinition: ContainerDefinition): ContainerImageConfig;\n}\n\n/**\n * The configuration for creating a container image.\n */\nexport interface ContainerImageConfig {\n  /**\n   * Specifies the name of the container image.\n   */\n  readonly imageName: string;\n\n  /**\n   * Specifies the credentials used to access the image repository.\n   */\n  readonly repositoryCredentials?: CfnTaskDefinition.RepositoryCredentialsProperty;\n}\n\nimport { AssetImage, AssetImageProps } from './images/asset-image';\nimport { EcrImage } from './images/ecr';\nimport { RepositoryImage, RepositoryImageProps } from './images/repository';\n\n"],
  "mappings": "qNACA,iBAAA,QAAA,sBAAA,EAQA,MAAsB,cAAc,OAIpB,cAAa,KAAc,MAA8B,CAAA,EAAE,gFAChE,GAAI,cAAA,gBAAgB,KAAM,KAAK,QAM1B,mBAAkB,WAA6B,IAAc,SAAQ,4EAC1E,GAAI,OAAA,SAAS,WAAY,GAAG,QAWvB,WAAU,UAAmB,MAAyB,CAAA,EAAE,2EAC7D,GAAI,eAAA,WAAW,UAAW,KAAK,QAQ1B,sBAAqB,MAAuB,mFACjD,CACL,KAAK,OAAmB,oBAAwC,CAC9D,aAAM,WAAW,UAAU,oBAAoB,eAAe,oBAAmB,CAAE,EAC5E,CACL,UAAW,MAAM,SAErB,SAaU,aAAY,YAAmB,CAC3C,MAAO,CACL,KAAK,MAAkB,oBAAwC,CAE7D,KAAM,OAAQ,GAAI,kBAAA,kBAAkB,MAAO,UAAW,CAAE,WAAW,CAAE,EACrE,aAAM,WAAW,UAAU,oBAAoB,eAAe,oBAAmB,CAAE,EAE5E,CACL,UAAW,MAAM,SAErB,IA9DN,QAAA,eAAA,oHAuFA,KAAA,eAAA,QAAA,sBAAA,EACA,MAAA,QAAA,cAAA,EACA,aAAA,QAAA,qBAAA",
  "names": []
}
