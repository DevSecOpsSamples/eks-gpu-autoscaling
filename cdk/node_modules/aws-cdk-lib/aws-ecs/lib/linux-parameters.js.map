{
  "version": 3,
  "sources": ["linux-parameters.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnTaskDefinition } from './ecs.generated';\n\n/**\n * The properties for defining Linux-specific options that are applied to the container.\n */\nexport interface LinuxParametersProps {\n  /**\n   * Specifies whether to run an init process inside the container that forwards signals and reaps processes.\n   *\n   * @default false\n   */\n  readonly initProcessEnabled?: boolean;\n\n  /**\n   * The value for the size (in MiB) of the /dev/shm volume.\n   *\n   * @default No shared memory.\n   */\n  readonly sharedMemorySize?: number;\n}\n\n/**\n * Linux-specific options that are applied to the container.\n */\nexport class LinuxParameters extends Construct {\n  /**\n   * Whether the init process is enabled\n   */\n  private readonly initProcessEnabled?: boolean;\n\n  /**\n   * The shared memory size. Not valid for Fargate launch type\n   */\n  private readonly sharedMemorySize?: number;\n\n  /**\n   * Capabilities to be added\n   */\n  private readonly capAdd = new Array<Capability>();\n\n  /**\n   * Capabilities to be dropped\n   */\n  private readonly capDrop = new Array<Capability>();\n\n  /**\n   * Device mounts\n   */\n  private readonly devices = new Array<Device>();\n\n  /**\n   * TmpFs mounts\n   */\n  private readonly tmpfs = new Array<Tmpfs>();\n\n  /**\n   * Constructs a new instance of the LinuxParameters class.\n   */\n  constructor(scope: Construct, id: string, props: LinuxParametersProps = {}) {\n    super(scope, id);\n\n    this.sharedMemorySize = props.sharedMemorySize;\n    this.initProcessEnabled = props.initProcessEnabled;\n  }\n\n  /**\n   * Adds one or more Linux capabilities to the Docker configuration of a container.\n   *\n   * Only works with EC2 launch type.\n   */\n  public addCapabilities(...cap: Capability[]) {\n    this.capAdd.push(...cap);\n  }\n\n  /**\n   * Removes one or more Linux capabilities to the Docker configuration of a container.\n   *\n   * Only works with EC2 launch type.\n   */\n  public dropCapabilities(...cap: Capability[]) {\n    this.capDrop.push(...cap);\n  }\n\n  /**\n   * Adds one or more host devices to a container.\n   */\n  public addDevices(...device: Device[]) {\n    this.devices.push(...device);\n  }\n\n  /**\n   * Specifies the container path, mount options, and size (in MiB) of the tmpfs mount for a container.\n   *\n   * Only works with EC2 launch type.\n   */\n  public addTmpfs(...tmpfs: Tmpfs[]) {\n    this.tmpfs.push(...tmpfs);\n  }\n\n  /**\n   * Renders the Linux parameters to a CloudFormation object.\n   */\n  public renderLinuxParameters(): CfnTaskDefinition.LinuxParametersProperty {\n    return {\n      initProcessEnabled: this.initProcessEnabled,\n      sharedMemorySize: this.sharedMemorySize,\n      capabilities: {\n        add: cdk.Lazy.list({ produce: () => this.capAdd }, { omitEmpty: true }),\n        drop: cdk.Lazy.list({ produce: () => this.capDrop }, { omitEmpty: true }),\n      },\n      devices: cdk.Lazy.any({ produce: () => this.devices.map(renderDevice) }, { omitEmptyArray: true }),\n      tmpfs: cdk.Lazy.any({ produce: () => this.tmpfs.map(renderTmpfs) }, { omitEmptyArray: true }),\n    };\n  }\n}\n\n/**\n * A container instance host device.\n */\nexport interface Device {\n  /**\n   * The path inside the container at which to expose the host device.\n   *\n   * @default Same path as the host\n   */\n  readonly containerPath?: string,\n\n  /**\n   * The path for the device on the host container instance.\n   */\n  readonly hostPath: string,\n\n  /**\n   * The explicit permissions to provide to the container for the device.\n   * By default, the container has permissions for read, write, and mknod for the device.\n   *\n   * @default Readonly\n   */\n  readonly permissions?: DevicePermission[]\n}\n\nfunction renderDevice(device: Device): CfnTaskDefinition.DeviceProperty {\n  return {\n    containerPath: device.containerPath,\n    hostPath: device.hostPath,\n    permissions: device.permissions,\n  };\n}\n\n/**\n * The details of a tmpfs mount for a container.\n */\nexport interface Tmpfs {\n  /**\n   * The absolute file path where the tmpfs volume is to be mounted.\n   */\n  readonly containerPath: string,\n\n  /**\n   * The size (in MiB) of the tmpfs volume.\n   */\n  readonly size: number,\n\n  /**\n   * The list of tmpfs volume mount options. For more information, see\n   * [TmpfsMountOptions](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Tmpfs.html).\n   */\n  readonly mountOptions?: TmpfsMountOption[],\n}\n\nfunction renderTmpfs(tmpfs: Tmpfs): CfnTaskDefinition.TmpfsProperty {\n  return {\n    containerPath: tmpfs.containerPath,\n    size: tmpfs.size,\n    mountOptions: tmpfs.mountOptions,\n  };\n}\n\n/**\n * A Linux capability\n */\nexport enum Capability {\n  ALL = 'ALL',\n  AUDIT_CONTROL = 'AUDIT_CONTROL',\n  AUDIT_WRITE = 'AUDIT_WRITE',\n  BLOCK_SUSPEND = 'BLOCK_SUSPEND',\n  CHOWN = 'CHOWN',\n  DAC_OVERRIDE = 'DAC_OVERRIDE',\n  DAC_READ_SEARCH = 'DAC_READ_SEARCH',\n  FOWNER = 'FOWNER',\n  FSETID = 'FSETID',\n  IPC_LOCK = 'IPC_LOCK',\n  IPC_OWNER = 'IPC_OWNER',\n  KILL = 'KILL',\n  LEASE = 'LEASE',\n  LINUX_IMMUTABLE = 'LINUX_IMMUTABLE',\n  MAC_ADMIN = 'MAC_ADMIN',\n  MAC_OVERRIDE = 'MAC_OVERRIDE',\n  MKNOD = 'MKNOD',\n  NET_ADMIN = 'NET_ADMIN',\n  NET_BIND_SERVICE = 'NET_BIND_SERVICE',\n  NET_BROADCAST = 'NET_BROADCAST',\n  NET_RAW = 'NET_RAW',\n  SETFCAP = 'SETFCAP',\n  SETGID = 'SETGID',\n  SETPCAP = 'SETPCAP',\n  SETUID = 'SETUID',\n  SYS_ADMIN = 'SYS_ADMIN',\n  SYS_BOOT = 'SYS_BOOT',\n  SYS_CHROOT = 'SYS_CHROOT',\n  SYS_MODULE = 'SYS_MODULE',\n  SYS_NICE = 'SYS_NICE',\n  SYS_PACCT = 'SYS_PACCT',\n  SYS_PTRACE = 'SYS_PTRACE',\n  SYS_RAWIO = 'SYS_RAWIO',\n  SYS_RESOURCE = 'SYS_RESOURCE',\n  SYS_TIME = 'SYS_TIME',\n  SYS_TTY_CONFIG = 'SYS_TTY_CONFIG',\n  SYSLOG = 'SYSLOG',\n  WAKE_ALARM = 'WAKE_ALARM'\n}\n\n/**\n * Permissions for device access\n */\nexport enum DevicePermission {\n  /**\n   * Read\n   */\n  READ = 'read',\n\n  /**\n   * Write\n   */\n  WRITE = 'write',\n\n  /**\n   * Make a node\n   */\n  MKNOD = 'mknod',\n}\n\n/**\n * The supported options for a tmpfs mount for a container.\n */\nexport enum TmpfsMountOption {\n  DEFAULTS = 'defaults',\n  RO = 'ro',\n  RW = 'rw',\n  SUID = 'suid',\n  NOSUID = 'nosuid',\n  DEV = 'dev',\n  NODEV = 'nodev',\n  EXEC = 'exec',\n  NOEXEC = 'noexec',\n  SYNC = 'sync',\n  ASYNC = 'async',\n  DIRSYNC = 'dirsync',\n  REMOUNT = 'remount',\n  MAND = 'mand',\n  NOMAND = 'nomand',\n  ATIME = 'atime',\n  NOATIME = 'noatime',\n  DIRATIME = 'diratime',\n  NODIRATIME = 'nodiratime',\n  BIND = 'bind',\n  RBIND = 'rbind',\n  UNBINDABLE = 'unbindable',\n  RUNBINDABLE = 'runbindable',\n  PRIVATE = 'private',\n  RPRIVATE = 'rprivate',\n  SHARED = 'shared',\n  RSHARED = 'rshared',\n  SLAVE = 'slave',\n  RSLAVE = 'rslave',\n  RELATIME = 'relatime',\n  NORELATIME = 'norelatime',\n  STRICTATIME = 'strictatime',\n  NOSTRICTATIME = 'nostrictatime',\n  MODE = 'mode',\n  UID = 'uid',\n  GID = 'gid',\n  NR_INODES = 'nr_inodes',\n  NR_BLOCKS = 'nr_blocks',\n  MPOL = 'mpol'\n}\n"],
  "mappings": "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",
  "names": []
}
