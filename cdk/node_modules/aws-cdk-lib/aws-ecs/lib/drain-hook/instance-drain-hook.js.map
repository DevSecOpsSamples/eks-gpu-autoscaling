{
  "version": 3,
  "sources": ["instance-drain-hook.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as autoscaling from '../../../aws-autoscaling';\nimport * as hooks from '../../../aws-autoscaling-hooktargets';\nimport * as iam from '../../../aws-iam';\nimport * as kms from '../../../aws-kms';\nimport * as lambda from '../../../aws-lambda';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { ICluster } from '../cluster';\n\n// Reference for the source in this package:\n//\n// https://github.com/aws-samples/ecs-refarch-cloudformation/blob/master/infrastructure/lifecyclehook.yaml\n\n/**\n * Properties for instance draining hook\n */\nexport interface InstanceDrainHookProps {\n  /**\n   * The AutoScalingGroup to install the instance draining hook for\n   */\n  autoScalingGroup: autoscaling.IAutoScalingGroup;\n\n  /**\n   * The cluster on which tasks have been scheduled\n   */\n  cluster: ICluster;\n\n  /**\n   * How many seconds to give tasks to drain before the instance is terminated anyway\n   *\n   * Must be between 0 and 15 minutes.\n   *\n   * @default Duration.minutes(15)\n   */\n  drainTime?: cdk.Duration;\n\n  /**\n   * The InstanceDrainHook creates an SNS topic for the lifecycle hook of the ASG. If provided, then this\n   * key will be used to encrypt the contents of that SNS Topic.\n   * See [SNS Data Encryption](https://docs.aws.amazon.com/sns/latest/dg/sns-data-encryption.html) for more information.\n   *\n   * @default The SNS Topic will not be encrypted.\n   */\n  topicEncryptionKey?: kms.IKey;\n}\n\n/**\n * A hook to drain instances from ECS traffic before they're terminated\n */\nexport class InstanceDrainHook extends Construct {\n\n  /**\n   * Constructs a new instance of the InstanceDrainHook class.\n   */\n  constructor(scope: Construct, id: string, props: InstanceDrainHookProps) {\n    super(scope, id);\n\n    const drainTime = props.drainTime || cdk.Duration.minutes(5);\n\n    // Invoke Lambda via SNS Topic\n    const fn = new lambda.Function(this, 'Function', {\n      code: lambda.Code.fromInline(fs.readFileSync(path.join(__dirname, 'lambda-source', 'index.py'), { encoding: 'utf-8' })),\n      handler: 'index.lambda_handler',\n      runtime: lambda.Runtime.PYTHON_3_6,\n      // Timeout: some extra margin for additional API calls made by the Lambda,\n      // up to a maximum of 15 minutes.\n      timeout: cdk.Duration.seconds(Math.min(drainTime.toSeconds() + 10, 900)),\n      environment: {\n        CLUSTER: props.cluster.clusterName,\n      },\n    });\n\n    // Hook everything up: ASG -> Topic, Topic -> Lambda\n    props.autoScalingGroup.addLifecycleHook('DrainHook', {\n      lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_TERMINATING,\n      defaultResult: autoscaling.DefaultResult.CONTINUE,\n      notificationTarget: new hooks.FunctionHook(fn, props.topicEncryptionKey),\n      heartbeatTimeout: drainTime,\n    });\n\n    // Describe actions cannot be restricted and restrict the CompleteLifecycleAction to the ASG arn\n    // https://docs.aws.amazon.com/autoscaling/ec2/userguide/control-access-using-iam.html\n    fn.addToRolePolicy(new iam.PolicyStatement({\n      actions: [\n        'ec2:DescribeInstances',\n        'ec2:DescribeInstanceAttribute',\n        'ec2:DescribeInstanceStatus',\n        'ec2:DescribeHosts',\n      ],\n      resources: ['*'],\n    }));\n\n    // Restrict to the ASG\n    fn.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['autoscaling:CompleteLifecycleAction'],\n      resources: [props.autoScalingGroup.autoScalingGroupArn],\n    }));\n\n    fn.addToRolePolicy(new iam.PolicyStatement({\n      actions: ['ecs:DescribeContainerInstances', 'ecs:DescribeTasks'],\n      resources: ['*'],\n      conditions: {\n        ArnEquals: { 'ecs:cluster': props.cluster.clusterArn },\n      },\n    }));\n\n    // Restrict to the ECS Cluster\n    fn.addToRolePolicy(new iam.PolicyStatement({\n      actions: [\n        'ecs:ListContainerInstances',\n        'ecs:SubmitContainerStateChange',\n        'ecs:SubmitTaskStateChange',\n      ],\n      resources: [props.cluster.clusterArn],\n    }));\n\n    // Restrict the container-instance operations to the ECS Cluster\n    fn.addToRolePolicy(new iam.PolicyStatement({\n      actions: [\n        'ecs:UpdateContainerInstancesState',\n        'ecs:ListTasks',\n      ],\n      conditions: {\n        ArnEquals: { 'ecs:cluster': props.cluster.clusterArn },\n      },\n      resources: ['*'],\n    }));\n  }\n}\n"],
  "mappings": "qGAAA,KAAA,IAAA,QAAA,IAAA,EACA,KAAA,QAAA,MAAA,EACA,YAAA,QAAA,0BAAA,EACA,MAAA,QAAA,sCAAA,EACA,IAAA,QAAA,kBAAA,EAEA,OAAA,QAAA,qBAAA,EACA,IAAA,QAAA,eAAA,EACA,aAAA,QAAA,YAAA,EA2CA,MAAa,yBAA0B,cAAA,SAAS,CAK9C,YAAY,MAAkB,GAAY,MAA6B,CACrE,MAAM,MAAO,EAAE,EAEf,KAAM,WAAY,MAAM,WAAa,IAAI,SAAS,QAAQ,CAAC,EAGrD,GAAK,GAAI,QAAO,SAAS,KAAM,WAAY,CAC/C,KAAM,OAAO,KAAK,WAAW,GAAG,aAAa,KAAK,KAAK,UAAW,gBAAiB,UAAU,EAAG,CAAE,SAAU,OAAO,CAAE,CAAC,EACtH,QAAS,uBACT,QAAS,OAAO,QAAQ,WAGxB,QAAS,IAAI,SAAS,QAAQ,KAAK,IAAI,UAAU,UAAS,EAAK,GAAI,GAAG,CAAC,EACvE,YAAa,CACX,QAAS,MAAM,QAAQ,aAE1B,EAGD,MAAM,iBAAiB,iBAAiB,YAAa,CACnD,oBAAqB,YAAY,oBAAoB,qBACrD,cAAe,YAAY,cAAc,SACzC,mBAAoB,GAAI,OAAM,aAAa,GAAI,MAAM,kBAAkB,EACvE,iBAAkB,UACnB,EAID,GAAG,gBAAgB,GAAI,KAAI,gBAAgB,CACzC,QAAS,CACP,wBACA,gCACA,6BACA,qBAEF,UAAW,CAAC,GAAG,EAChB,CAAC,EAGF,GAAG,gBAAgB,GAAI,KAAI,gBAAgB,CACzC,QAAS,CAAC,qCAAqC,EAC/C,UAAW,CAAC,MAAM,iBAAiB,mBAAmB,EACvD,CAAC,EAEF,GAAG,gBAAgB,GAAI,KAAI,gBAAgB,CACzC,QAAS,CAAC,iCAAkC,mBAAmB,EAC/D,UAAW,CAAC,GAAG,EACf,WAAY,CACV,UAAW,CAAE,cAAe,MAAM,QAAQ,UAAU,GAEvD,CAAC,EAGF,GAAG,gBAAgB,GAAI,KAAI,gBAAgB,CACzC,QAAS,CACP,6BACA,iCACA,6BAEF,UAAW,CAAC,MAAM,QAAQ,UAAU,EACrC,CAAC,EAGF,GAAG,gBAAgB,GAAI,KAAI,gBAAgB,CACzC,QAAS,CACP,oCACA,iBAEF,WAAY,CACV,UAAW,CAAE,cAAe,MAAM,QAAQ,UAAU,GAEtD,UAAW,CAAC,GAAG,EAChB,CAAC,GA7EN,QAAA,kBAAA",
  "names": []
}
