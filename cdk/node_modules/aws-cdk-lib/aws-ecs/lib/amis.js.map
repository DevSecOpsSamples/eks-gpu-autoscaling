{
  "version": 3,
  "sources": ["amis.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as ssm from '../../aws-ssm';\n\n// v2 - keep this import as a separate section to reduce merge conflict when forward merging with the v2 branch.\n// eslint-disable-next-line\nimport { Construct } from 'constructs';\n\n/**\n * The ECS-optimized AMI variant to use. For more information, see\n * [Amazon ECS-optimized AMIs](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).\n */\nexport enum AmiHardwareType {\n\n  /**\n   * Use the standard Amazon ECS-optimized AMI.\n   */\n  STANDARD = 'Standard',\n\n  /**\n   * Use the Amazon ECS GPU-optimized AMI.\n   */\n  GPU = 'GPU',\n\n  /**\n   * Use the Amazon ECS-optimized Amazon Linux 2 (arm64) AMI.\n   */\n  ARM = 'ARM64',\n}\n\n\n/**\n * ECS-optimized Windows version list\n */\nexport enum WindowsOptimizedVersion {\n  SERVER_2019 = '2019',\n  SERVER_2016 = '2016',\n}\n\n/*\n * TODO:v2.0.0\n *  * remove `export` keyword\n *  * remove @deprecated\n */\n/**\n * The properties that define which ECS-optimized AMI is used.\n *\n * @deprecated see {@link EcsOptimizedImage}\n */\nexport interface EcsOptimizedAmiProps {\n  /**\n   * The Amazon Linux generation to use.\n   *\n   * @default AmazonLinuxGeneration.AmazonLinux2\n   */\n  readonly generation?: ec2.AmazonLinuxGeneration;\n\n  /**\n   * The Windows Server version to use.\n   *\n   * @default none, uses Linux generation\n   */\n  readonly windowsVersion?: WindowsOptimizedVersion;\n\n  /**\n   * The ECS-optimized AMI variant to use.\n   *\n   * @default AmiHardwareType.Standard\n   */\n  readonly hardwareType?: AmiHardwareType;\n\n  /**\n   * Whether the AMI ID is cached to be stable between deployments\n   *\n   * By default, the newest image is used on each deployment. This will cause\n   * instances to be replaced whenever a new version is released, and may cause\n   * downtime if there aren't enough running instances in the AutoScalingGroup\n   * to reschedule the tasks on.\n   *\n   * If set to true, the AMI ID will be cached in `cdk.context.json` and the\n   * same value will be used on future runs. Your instances will not be replaced\n   * but your AMI version will grow old over time. To refresh the AMI lookup,\n   * you will have to evict the value from the cache using the `cdk context`\n   * command. See https://docs.aws.amazon.com/cdk/latest/guide/context.html for\n   * more information.\n   *\n   * Can not be set to `true` in environment-agnostic stacks.\n   *\n   * @default false\n   */\n  readonly cachedInContext?: boolean;\n}\n\n/*\n * TODO:v2.0.0 remove EcsOptimizedAmi\n */\n/**\n * Construct a Linux or Windows machine image from the latest ECS Optimized AMI published in SSM\n *\n * @deprecated see {@link EcsOptimizedImage#amazonLinux}, {@link EcsOptimizedImage#amazonLinux} and {@link EcsOptimizedImage#windows}\n */\nexport class EcsOptimizedAmi implements ec2.IMachineImage {\n  private readonly generation?: ec2.AmazonLinuxGeneration;\n  private readonly windowsVersion?: WindowsOptimizedVersion;\n  private readonly hwType: AmiHardwareType;\n\n  private readonly amiParameterName: string;\n  private readonly cachedInContext: boolean;\n\n  /**\n   * Constructs a new instance of the EcsOptimizedAmi class.\n   */\n  constructor(props?: EcsOptimizedAmiProps) {\n    this.hwType = (props && props.hardwareType) || AmiHardwareType.STANDARD;\n    if (props && props.generation) { // generation defined in the props object\n      if (props.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX && this.hwType !== AmiHardwareType.STANDARD) {\n        throw new Error('Amazon Linux does not support special hardware type. Use Amazon Linux 2 instead');\n      } else if (props.windowsVersion) {\n        throw new Error('\"windowsVersion\" and Linux image \"generation\" cannot be both set');\n      } else {\n        this.generation = props.generation;\n      }\n    } else if (props && props.windowsVersion) {\n      if (this.hwType !== AmiHardwareType.STANDARD) {\n        throw new Error('Windows Server does not support special hardware type');\n      } else {\n        this.windowsVersion = props.windowsVersion;\n      }\n    } else { // generation not defined in props object\n      // always default to Amazon Linux v2 regardless of HW\n      this.generation = ec2.AmazonLinuxGeneration.AMAZON_LINUX_2;\n    }\n\n    // set the SSM parameter name\n    this.amiParameterName = '/aws/service/ecs/optimized-ami/'\n      + (this.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX ? 'amazon-linux/' : '')\n      + (this.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 ? 'amazon-linux-2/' : '')\n      + (this.windowsVersion ? `windows_server/${this.windowsVersion}/english/full/` : '')\n      + (this.hwType === AmiHardwareType.GPU ? 'gpu/' : '')\n      + (this.hwType === AmiHardwareType.ARM ? 'arm64/' : '')\n      + 'recommended/image_id';\n\n    this.cachedInContext = props?.cachedInContext ?? false;\n  }\n\n  /**\n   * Return the correct image\n   */\n  public getImage(scope: Construct): ec2.MachineImageConfig {\n    const ami = lookupImage(scope, this.cachedInContext, this.amiParameterName);\n\n    const osType = this.windowsVersion ? ec2.OperatingSystemType.WINDOWS : ec2.OperatingSystemType.LINUX;\n    return {\n      imageId: ami,\n      osType,\n      userData: ec2.UserData.forOperatingSystem(osType),\n    };\n  }\n}\n\n/**\n * Additional configuration properties for EcsOptimizedImage factory functions\n */\nexport interface EcsOptimizedImageOptions {\n  /**\n   * Whether the AMI ID is cached to be stable between deployments\n   *\n   * By default, the newest image is used on each deployment. This will cause\n   * instances to be replaced whenever a new version is released, and may cause\n   * downtime if there aren't enough running instances in the AutoScalingGroup\n   * to reschedule the tasks on.\n   *\n   * If set to true, the AMI ID will be cached in `cdk.context.json` and the\n   * same value will be used on future runs. Your instances will not be replaced\n   * but your AMI version will grow old over time. To refresh the AMI lookup,\n   * you will have to evict the value from the cache using the `cdk context`\n   * command. See https://docs.aws.amazon.com/cdk/latest/guide/context.html for\n   * more information.\n   *\n   * Can not be set to `true` in environment-agnostic stacks.\n   *\n   * @default false\n   */\n  readonly cachedInContext?: boolean;\n}\n\n/**\n * Construct a Linux or Windows machine image from the latest ECS Optimized AMI published in SSM\n */\nexport class EcsOptimizedImage implements ec2.IMachineImage {\n  /**\n   * Construct an Amazon Linux 2 image from the latest ECS Optimized AMI published in SSM\n   *\n   * @param hardwareType ECS-optimized AMI variant to use\n   */\n  public static amazonLinux2(hardwareType = AmiHardwareType.STANDARD, options: EcsOptimizedImageOptions = {}): EcsOptimizedImage {\n    return new EcsOptimizedImage({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n      hardwareType,\n      cachedInContext: options.cachedInContext,\n    });\n  }\n\n  /**\n   * Construct an Amazon Linux AMI image from the latest ECS Optimized AMI published in SSM\n   */\n  public static amazonLinux(options: EcsOptimizedImageOptions = {}): EcsOptimizedImage {\n    return new EcsOptimizedImage({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n      cachedInContext: options.cachedInContext,\n    });\n  }\n\n  /**\n   * Construct a Windows image from the latest ECS Optimized AMI published in SSM\n   *\n   * @param windowsVersion Windows Version to use\n   */\n  public static windows(windowsVersion: WindowsOptimizedVersion, options: EcsOptimizedImageOptions = {}): EcsOptimizedImage {\n    return new EcsOptimizedImage({\n      windowsVersion,\n      cachedInContext: options.cachedInContext,\n    });\n  }\n\n  private readonly generation?: ec2.AmazonLinuxGeneration;\n  private readonly windowsVersion?: WindowsOptimizedVersion;\n  private readonly hwType?: AmiHardwareType;\n\n  private readonly amiParameterName: string;\n  private readonly cachedInContext: boolean;\n\n  /**\n   * Constructs a new instance of the EcsOptimizedAmi class.\n   */\n  private constructor(props: EcsOptimizedAmiProps) {\n    this.hwType = props && props.hardwareType;\n\n    if (props.windowsVersion) {\n      this.windowsVersion = props.windowsVersion;\n    } else if (props.generation) {\n      this.generation = props.generation;\n    } else {\n      throw new Error('This error should never be thrown');\n    }\n\n    // set the SSM parameter name\n    this.amiParameterName = '/aws/service/ecs/optimized-ami/'\n      + (this.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX ? 'amazon-linux/' : '')\n      + (this.generation === ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 ? 'amazon-linux-2/' : '')\n      + (this.windowsVersion ? `windows_server/${this.windowsVersion}/english/full/` : '')\n      + (this.hwType === AmiHardwareType.GPU ? 'gpu/' : '')\n      + (this.hwType === AmiHardwareType.ARM ? 'arm64/' : '')\n      + 'recommended/image_id';\n\n    this.cachedInContext = props?.cachedInContext ?? false;\n  }\n\n  /**\n   * Return the correct image\n   */\n  public getImage(scope: Construct): ec2.MachineImageConfig {\n    const ami = lookupImage(scope, this.cachedInContext, this.amiParameterName);\n\n    const osType = this.windowsVersion ? ec2.OperatingSystemType.WINDOWS : ec2.OperatingSystemType.LINUX;\n    return {\n      imageId: ami,\n      osType,\n      userData: ec2.UserData.forOperatingSystem(osType),\n    };\n  }\n}\n\n/**\n * Amazon ECS variant\n */\nexport enum BottlerocketEcsVariant {\n  /**\n   * aws-ecs-1 variant\n   */\n  AWS_ECS_1 = 'aws-ecs-1'\n\n}\n\n/**\n * Properties for BottleRocketImage\n */\nexport interface BottleRocketImageProps {\n  /**\n   * The Amazon ECS variant to use.\n   * Only `aws-ecs-1` is currently available\n   *\n   * @default - BottlerocketEcsVariant.AWS_ECS_1\n   */\n  readonly variant?: BottlerocketEcsVariant;\n\n  /**\n   * The CPU architecture\n   *\n   * @default - x86_64\n   */\n  readonly architecture?: ec2.InstanceArchitecture;\n\n  /**\n   * Whether the AMI ID is cached to be stable between deployments\n   *\n   * By default, the newest image is used on each deployment. This will cause\n   * instances to be replaced whenever a new version is released, and may cause\n   * downtime if there aren't enough running instances in the AutoScalingGroup\n   * to reschedule the tasks on.\n   *\n   * If set to true, the AMI ID will be cached in `cdk.context.json` and the\n   * same value will be used on future runs. Your instances will not be replaced\n   * but your AMI version will grow old over time. To refresh the AMI lookup,\n   * you will have to evict the value from the cache using the `cdk context`\n   * command. See https://docs.aws.amazon.com/cdk/latest/guide/context.html for\n   * more information.\n   *\n   * Can not be set to `true` in environment-agnostic stacks.\n   *\n   * @default false\n   */\n  readonly cachedInContext?: boolean;\n}\n\n/**\n * Construct an Bottlerocket image from the latest AMI published in SSM\n */\nexport class BottleRocketImage implements ec2.IMachineImage {\n  private readonly amiParameterName: string;\n  /**\n   * Amazon ECS variant for Bottlerocket AMI\n   */\n  private readonly variant: string;\n\n  /**\n   * Instance architecture\n   */\n  private readonly architecture: ec2.InstanceArchitecture;\n\n  private readonly cachedInContext: boolean;\n\n  /**\n   * Constructs a new instance of the BottleRocketImage class.\n   */\n  public constructor(props: BottleRocketImageProps = {}) {\n    this.variant = props.variant ?? BottlerocketEcsVariant.AWS_ECS_1;\n    this.architecture = props.architecture ?? ec2.InstanceArchitecture.X86_64;\n\n    // set the SSM parameter name\n    this.amiParameterName = `/aws/service/bottlerocket/${this.variant}/${this.architecture}/latest/image_id`;\n\n    this.cachedInContext = props.cachedInContext ?? false;\n  }\n\n  /**\n   * Return the correct image\n   */\n  public getImage(scope: Construct): ec2.MachineImageConfig {\n    const ami = lookupImage(scope, this.cachedInContext, this.amiParameterName);\n\n    return {\n      imageId: ami,\n      osType: ec2.OperatingSystemType.LINUX,\n      userData: ec2.UserData.custom(''),\n    };\n  }\n}\n\nfunction lookupImage(scope: Construct, cachedInContext: boolean | undefined, parameterName: string) {\n  return cachedInContext\n    ? ssm.StringParameter.valueFromLookup(scope, parameterName)\n    : ssm.StringParameter.valueForTypedStringParameter(scope, parameterName, ssm.ParameterType.AWS_EC2_IMAGE_ID);\n}\n"],
  "mappings": "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",
  "names": []
}
