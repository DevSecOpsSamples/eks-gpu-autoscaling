{
  "version": 3,
  "sources": ["ec2-service.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport { ArnFormat, Lazy, Resource, Stack } from '../../../core';\nimport { Construct } from 'constructs';\nimport { BaseService, BaseServiceOptions, DeploymentControllerType, IBaseService, IService, LaunchType } from '../base/base-service';\nimport { fromServiceAtrributes } from '../base/from-service-attributes';\nimport { NetworkMode, TaskDefinition } from '../base/task-definition';\nimport { ICluster } from '../cluster';\nimport { CfnService } from '../ecs.generated';\nimport { PlacementConstraint, PlacementStrategy } from '../placement';\n\n/**\n * The properties for defining a service using the EC2 launch type.\n */\nexport interface Ec2ServiceProps extends BaseServiceOptions {\n  /**\n   * The task definition to use for tasks in the service.\n   *\n   * [disable-awslint:ref-via-interface]\n   */\n  readonly taskDefinition: TaskDefinition;\n\n  /**\n   * Specifies whether the task's elastic network interface receives a public IP address.\n   * If true, each task will receive a public IP address.\n   *\n   * This property is only used for tasks that use the awsvpc network mode.\n   *\n   * @default false\n   */\n  readonly assignPublicIp?: boolean;\n\n  /**\n   * The subnets to associate with the service.\n   *\n   * This property is only used for tasks that use the awsvpc network mode.\n   *\n   * @default - Public subnets if `assignPublicIp` is set, otherwise the first available one of Private, Isolated, Public, in that order.\n   */\n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n  /**\n   * The security groups to associate with the service. If you do not specify a security group, a new security group is created.\n   *\n   * This property is only used for tasks that use the awsvpc network mode.\n   *\n   * @default - A new security group is created.\n   * @deprecated use securityGroups instead.\n   */\n  readonly securityGroup?: ec2.ISecurityGroup;\n\n  /**\n   * The security groups to associate with the service. If you do not specify a security group, a new security group is created.\n   *\n   * This property is only used for tasks that use the awsvpc network mode.\n   *\n   * @default - A new security group is created.\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n  /**\n   * The placement constraints to use for tasks in the service. For more information, see\n   * [Amazon ECS Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html).\n   *\n   * @default - No constraints.\n   */\n  readonly placementConstraints?: PlacementConstraint[];\n\n  /**\n   * The placement strategies to use for tasks in the service. For more information, see\n   * [Amazon ECS Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).\n   *\n   * @default - No strategies.\n   */\n  readonly placementStrategies?: PlacementStrategy[];\n\n  /**\n   * Specifies whether the service will use the daemon scheduling strategy.\n   * If true, the service scheduler deploys exactly one task on each container instance in your cluster.\n   *\n   * When you are using this strategy, do not specify a desired number of tasks orany task placement strategies.\n   *\n   * @default false\n   */\n  readonly daemon?: boolean;\n}\n\n/**\n * The interface for a service using the EC2 launch type on an ECS cluster.\n */\nexport interface IEc2Service extends IService {\n\n}\n\n/**\n * The properties to import from the service using the EC2 launch type.\n */\nexport interface Ec2ServiceAttributes {\n  /**\n   * The cluster that hosts the service.\n   */\n  readonly cluster: ICluster;\n\n  /**\n   * The service ARN.\n   *\n   * @default - either this, or {@link serviceName}, is required\n   */\n  readonly serviceArn?: string;\n\n  /**\n   * The name of the service.\n   *\n   * @default - either this, or {@link serviceArn}, is required\n   */\n  readonly serviceName?: string;\n}\n\n/**\n * This creates a service using the EC2 launch type on an ECS cluster.\n *\n * @resource AWS::ECS::Service\n */\nexport class Ec2Service extends BaseService implements IEc2Service {\n\n  /**\n   * Imports from the specified service ARN.\n   */\n  public static fromEc2ServiceArn(scope: Construct, id: string, ec2ServiceArn: string): IEc2Service {\n    class Import extends Resource implements IEc2Service {\n      public readonly serviceArn = ec2ServiceArn;\n      public readonly serviceName = Stack.of(scope).splitArn(ec2ServiceArn, ArnFormat.SLASH_RESOURCE_NAME).resourceName as string;\n    }\n    return new Import(scope, id);\n  }\n\n  /**\n   * Imports from the specified service attrributes.\n   */\n  public static fromEc2ServiceAttributes(scope: Construct, id: string, attrs: Ec2ServiceAttributes): IBaseService {\n    return fromServiceAtrributes(scope, id, attrs);\n  }\n\n  private readonly constraints: CfnService.PlacementConstraintProperty[];\n  private readonly strategies: CfnService.PlacementStrategyProperty[];\n  private readonly daemon: boolean;\n\n  /**\n   * Constructs a new instance of the Ec2Service class.\n   */\n  constructor(scope: Construct, id: string, props: Ec2ServiceProps) {\n    if (props.daemon && props.desiredCount !== undefined) {\n      throw new Error('Daemon mode launches one task on every instance. Don\\'t supply desiredCount.');\n    }\n\n    if (props.daemon && props.maxHealthyPercent !== undefined && props.maxHealthyPercent !== 100) {\n      throw new Error('Maximum percent must be 100 for daemon mode.');\n    }\n\n    if (props.minHealthyPercent !== undefined && props.maxHealthyPercent !== undefined && props.minHealthyPercent >= props.maxHealthyPercent) {\n      throw new Error('Minimum healthy percent must be less than maximum healthy percent.');\n    }\n\n    if (!props.taskDefinition.isEc2Compatible) {\n      throw new Error('Supplied TaskDefinition is not configured for compatibility with EC2');\n    }\n\n    if (props.securityGroup !== undefined && props.securityGroups !== undefined) {\n      throw new Error('Only one of SecurityGroup or SecurityGroups can be populated.');\n    }\n\n    super(scope, id, {\n      ...props,\n      desiredCount: props.desiredCount,\n      maxHealthyPercent: props.daemon && props.maxHealthyPercent === undefined ? 100 : props.maxHealthyPercent,\n      minHealthyPercent: props.daemon && props.minHealthyPercent === undefined ? 0 : props.minHealthyPercent,\n      launchType: LaunchType.EC2,\n      enableECSManagedTags: props.enableECSManagedTags,\n    },\n    {\n      cluster: props.cluster.clusterName,\n      taskDefinition: props.deploymentController?.type === DeploymentControllerType.EXTERNAL ? undefined : props.taskDefinition.taskDefinitionArn,\n      placementConstraints: Lazy.any({ produce: () => this.constraints }, { omitEmptyArray: true }),\n      placementStrategies: Lazy.any({ produce: () => this.strategies }, { omitEmptyArray: true }),\n      schedulingStrategy: props.daemon ? 'DAEMON' : 'REPLICA',\n    }, props.taskDefinition);\n\n    this.constraints = [];\n    this.strategies = [];\n    this.daemon = props.daemon || false;\n\n    let securityGroups;\n    if (props.securityGroup !== undefined) {\n      securityGroups = [props.securityGroup];\n    } else if (props.securityGroups !== undefined) {\n      securityGroups = props.securityGroups;\n    }\n\n    if (props.taskDefinition.networkMode === NetworkMode.AWS_VPC) {\n      this.configureAwsVpcNetworkingWithSecurityGroups(props.cluster.vpc, props.assignPublicIp, props.vpcSubnets, securityGroups);\n    } else {\n      // Either None, Bridge or Host networking. Copy SecurityGroups from ASG.\n      // We have to be smart here -- by default future Security Group rules would be created\n      // in the Cluster stack. However, if the Cluster is in a different stack than us,\n      // that will lead to a cyclic reference (we point to that stack for the cluster name,\n      // but that stack will point to the ALB probably created right next to us).\n      //\n      // In that case, reference the same security groups but make sure new rules are\n      // created in the current scope (i.e., this stack)\n      validateNoNetworkingProps(props);\n      this.connections.addSecurityGroup(...securityGroupsInThisStack(this, props.cluster.connections.securityGroups));\n    }\n\n    this.addPlacementConstraints(...props.placementConstraints || []);\n    this.addPlacementStrategies(...props.placementStrategies || []);\n\n    this.node.addValidation({\n      validate: () => !this.taskDefinition.defaultContainer ? ['A TaskDefinition must have at least one essential container'] : [],\n    });\n\n    this.node.addValidation({ validate: this.validateEc2Service.bind(this) });\n  }\n\n  /**\n   * Adds one or more placement strategies to use for tasks in the service. For more information, see\n   * [Amazon ECS Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html).\n   */\n  public addPlacementStrategies(...strategies: PlacementStrategy[]) {\n    if (strategies.length > 0 && this.daemon) {\n      throw new Error(\"Can't configure placement strategies when daemon=true\");\n    }\n\n    for (const strategy of strategies) {\n      this.strategies.push(...strategy.toJson());\n    }\n  }\n\n  /**\n   * Adds one or more placement constraints to use for tasks in the service. For more information, see\n   * [Amazon ECS Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html).\n   */\n  public addPlacementConstraints(...constraints: PlacementConstraint[]) {\n    for (const constraint of constraints) {\n      this.constraints.push(...constraint.toJson());\n    }\n  }\n\n  /**\n   * Validates this Ec2Service.\n   */\n  private validateEc2Service(): string[] {\n    const ret = new Array<string>();\n    if (!this.cluster.hasEc2Capacity) {\n      ret.push('Cluster for this service needs Ec2 capacity. Call addXxxCapacity() on the cluster.');\n    }\n    return ret;\n  }\n}\n\n/**\n * Validate combinations of networking arguments.\n */\nfunction validateNoNetworkingProps(props: Ec2ServiceProps) {\n  if (props.vpcSubnets !== undefined\n    || props.securityGroup !== undefined\n    || props.securityGroups !== undefined\n    || props.assignPublicIp) {\n    throw new Error('vpcSubnets, securityGroup(s) and assignPublicIp can only be used in AwsVpc networking mode');\n  }\n}\n\n/**\n * Force security group rules to be created in this stack.\n *\n * For every security group, if the scope and the group are in different stacks, return\n * a fake \"imported\" security group instead. This will behave as the original security group,\n * but new Ingress and Egress rule resources will be added in the current stack instead of the\n * other one.\n */\nfunction securityGroupsInThisStack(scope: Construct, groups: ec2.ISecurityGroup[]): ec2.ISecurityGroup[] {\n  const thisStack = Stack.of(scope);\n\n  let i = 1;\n  return groups.map(group => {\n    if (thisStack === Stack.of(group)) { return group; } // Simple case, just return the original one\n\n    return ec2.SecurityGroup.fromSecurityGroupId(scope, `SecurityGroup${i++}`, group.securityGroupId, {\n      allowAllOutbound: group.allowAllOutbound,\n      mutable: true,\n    });\n  });\n}\n\n/**\n * The built-in container instance attributes\n */\nexport class BuiltInAttributes {\n  /**\n   * The id of the instance.\n   */\n  public static readonly INSTANCE_ID = 'instanceId';\n\n  /**\n   * The AvailabilityZone where the instance is running in.\n   */\n  public static readonly AVAILABILITY_ZONE = 'attribute:ecs.availability-zone';\n\n  /**\n   * The AMI id the instance is using.\n   */\n  public static readonly AMI_ID = 'attribute:ecs.ami-id';\n\n  /**\n   * The EC2 instance type.\n   */\n  public static readonly INSTANCE_TYPE = 'attribute:ecs.instance-type';\n\n  /**\n   * The operating system of the instance.\n   *\n   * Either 'linux' or 'windows'.\n   */\n  public static readonly OS_TYPE = 'attribute:ecs.os-type';\n}\n"],
  "mappings": "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",
  "names": []
}
