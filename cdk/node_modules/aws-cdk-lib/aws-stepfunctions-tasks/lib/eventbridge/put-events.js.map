{
  "version": 3,
  "sources": ["put-events.ts"],
  "sourcesContent": ["import * as events from '../../../aws-events';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n/**\n * An entry to be sent to EventBridge\n *\n * @see https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEventsRequestEntry.html\n */\nexport interface EventBridgePutEventsEntry {\n  /**\n   * The event body\n   *\n   * Can either be provided as an object or as a JSON-serialized string\n   * @example\n   *\n   * sfn.TaskInput.fromText('{\"instance-id\": \"i-1234567890abcdef0\", \"state\": \"terminated\"}');\n   * sfn.TaskInput.fromObject({ Message: 'Hello from Step Functions' });\n   * sfn.TaskInput.fromJsonPathAt('$.EventDetail');\n   */\n  readonly detail: sfn.TaskInput;\n\n  /**\n   * Used along with the source field to help identify the fields and values expected in the detail field\n   *\n   * For example, events by CloudTrail have detail type \"AWS API Call via CloudTrail\"\n   * @see https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events.html\n   */\n  readonly detailType: string;\n\n  /**\n   * The event bus the entry will be sent to.\n   *\n   * @default - event is sent to account's default event bus\n   */\n  readonly eventBus?: events.IEventBus;\n\n  /**\n   * The service or application that caused this event to be generated\n   *\n   * Example value: `com.example.service`\n   *\n   * @see https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events.html\n   */\n  readonly source: string;\n}\n\n/**\n * Properties for sending events with PutEvents\n */\nexport interface EventBridgePutEventsProps extends sfn.TaskStateBaseProps {\n  /**\n   * The entries that will be sent (must be at least 1)\n   */\n  readonly entries: EventBridgePutEventsEntry[];\n}\n\n/**\n * A StepFunctions Task to send events to an EventBridge event bus\n */\nexport class EventBridgePutEvents extends sfn.TaskStateBase {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  ];\n\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: EventBridgePutEventsProps) {\n    super(scope, id, props);\n\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n\n    validatePatternSupported(this.integrationPattern, EventBridgePutEvents.SUPPORTED_INTEGRATION_PATTERNS);\n\n    if (this.integrationPattern === sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN) {\n      if (!sfn.FieldUtils.containsTaskToken(props.entries.map(entry => entry.detail))) {\n        throw new Error('Task Token is required in `entries`. Use JsonPath.taskToken to set the token.');\n      }\n    }\n\n    this.validateEntries();\n\n    this.taskPolicies = [\n      new iam.PolicyStatement({\n        actions: ['events:PutEvents'],\n        resources: this.eventBusArns,\n      }),\n    ];\n  }\n\n  /**\n   * Returns an array of EventBusArn strings based on this.props.entries\n   */\n  private get eventBusArns(): string[] {\n    return this.props.entries\n      .map(entry => {\n        if (entry.eventBus) {\n          // If an eventBus is provided, use the corresponding ARN\n          return entry.eventBus.eventBusArn;\n        } else {\n          // If neither an eventBus nor eventBusName is provided,\n          // format the ARN for the default event bus in the account.\n          return cdk.Stack.of(this).formatArn({\n            resource: 'event-bus',\n            resourceName: 'default',\n            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,\n            service: 'events',\n          });\n        }\n      });\n  }\n\n  /**\n   * Provides the EventBridge put events service integration task configuration\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('events', 'putEvents', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        Entries: this.renderEntries(),\n      }),\n    };\n  }\n\n  private renderEntries(): Object[] {\n    return this.props.entries.map(entry => {\n      if (entry.source?.startsWith('aws')) {\n        throw new Error('Event source cannot start with \"aws.\"');\n      } else {\n        return {\n          Detail: entry.detail?.value,\n          DetailType: entry.detailType,\n          EventBusName: entry.eventBus?.eventBusArn,\n          Source: entry.source,\n        };\n      }\n    });\n  }\n\n  private validateEntries(): void {\n    if (this.props.entries.length <= 0) {\n      throw new Error('Value for property `entries` must be a non-empty array.');\n    }\n  }\n}"],
  "mappings": "8NACA,IAAA,QAAA,kBAAA,EACA,IAAA,QAAA,4BAAA,EACA,IAAA,QAAA,eAAA,EAEA,aAAA,QAAA,uBAAA,EA0DA,MAAa,4BAA6B,KAAI,aAAa,CAWzD,YAAY,MAAkB,GAA6B,MAAgC,QACzF,MAAM,MAAO,GAAI,KAAK,EAMtB,GAPyD,KAAA,MAAA,mGAGzD,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,mBAAmB,iBAE7E,aAAA,yBAAyB,KAAK,mBAAoB,qBAAqB,8BAA8B,EAEjG,KAAK,qBAAuB,IAAI,mBAAmB,qBACjD,CAAC,IAAI,WAAW,kBAAkB,MAAM,QAAQ,IAAI,OAAS,MAAM,MAAM,CAAC,EAC5E,KAAM,IAAI,OAAM,+EAA+E,EAInG,KAAK,gBAAe,EAEpB,KAAK,aAAe,CAClB,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,kBAAkB,EAC5B,UAAW,KAAK,aACjB,MAOO,eAAY,CACtB,MAAO,MAAK,MAAM,QACf,IAAI,OACC,MAAM,SAED,MAAM,SAAS,YAIf,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAClC,SAAU,YACV,aAAc,UACd,UAAW,IAAI,UAAU,oBACzB,QAAS,SACV,CAEJ,EAOK,aAAW,CACnB,MAAO,CACL,SAAU,aAAA,uBAAuB,SAAU,YAAa,KAAK,kBAAkB,EAC/E,WAAY,IAAI,WAAW,aAAa,CACtC,QAAS,KAAK,cAAa,EAC5B,GAIG,eAAa,CACnB,MAAO,MAAK,MAAM,QAAQ,IAAI,OAAQ,cACpC,GAAA,MAAI,MAAM,UAAM,MAAA,KAAA,SAAA,GAAE,WAAW,KAAK,EAChC,KAAM,IAAI,OAAM,uCAAuC,EAEvD,MAAO,CACL,OAAM,IAAE,MAAM,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,MACtB,WAAY,MAAM,WAClB,aAAY,IAAE,MAAM,YAAQ,MAAA,KAAA,OAAA,OAAA,GAAE,YAC9B,OAAQ,MAAM,OAGpB,CAAC,EAGK,iBAAe,CACrB,GAAI,KAAK,MAAM,QAAQ,QAAU,EAC/B,KAAM,IAAI,OAAM,yDAAyD,GAtF/E,QAAA,qBAAA,sJAC0B,qBAAA,+BAA2D,CACjF,IAAI,mBAAmB,iBACvB,IAAI,mBAAmB",
  "names": []
}
