"use strict";var _a,_b,_c;Object.defineProperty(exports,"__esModule",{value:!0}),exports.EcsRunTask=exports.EcsEc2LaunchTarget=exports.EcsFargateLaunchTarget=void 0;const jsiiDeprecationWarnings=require("../../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),ec2=require("../../../aws-ec2"),ecs=require("../../../aws-ecs"),iam=require("../../../aws-iam"),sfn=require("../../../aws-stepfunctions"),cdk=require("../../../core"),task_utils_1=require("../private/task-utils");class EcsFargateLaunchTarget{constructor(options){this.options=options,jsiiDeprecationWarnings.aws_cdk_lib_aws_stepfunctions_tasks_EcsFargateLaunchTargetOptions(options)}bind(_task,launchTargetOptions){var _d;if(jsiiDeprecationWarnings.aws_cdk_lib_aws_stepfunctions_tasks_EcsRunTask(_task),jsiiDeprecationWarnings.aws_cdk_lib_aws_stepfunctions_tasks_LaunchTargetBindOptions(launchTargetOptions),!launchTargetOptions.taskDefinition.isFargateCompatible)throw new Error("Supplied TaskDefinition is not compatible with Fargate");return{parameters:{LaunchType:"FARGATE",PlatformVersion:(_d=this.options)===null||_d===void 0?void 0:_d.platformVersion}}}}exports.EcsFargateLaunchTarget=EcsFargateLaunchTarget,_a=JSII_RTTI_SYMBOL_1,EcsFargateLaunchTarget[_a]={fqn:"aws-cdk-lib.aws_stepfunctions_tasks.EcsFargateLaunchTarget",version:"2.20.0"};class EcsEc2LaunchTarget{constructor(options){this.options=options,jsiiDeprecationWarnings.aws_cdk_lib_aws_stepfunctions_tasks_EcsEc2LaunchTargetOptions(options)}bind(_task,launchTargetOptions){var _d,_e,_f,_g,_h;if(jsiiDeprecationWarnings.aws_cdk_lib_aws_stepfunctions_tasks_EcsRunTask(_task),jsiiDeprecationWarnings.aws_cdk_lib_aws_stepfunctions_tasks_LaunchTargetBindOptions(launchTargetOptions),!launchTargetOptions.taskDefinition.isEc2Compatible)throw new Error("Supplied TaskDefinition is not compatible with EC2");if(!(!((_d=launchTargetOptions.cluster)===null||_d===void 0)&&_d.hasEc2Capacity))throw new Error("Cluster for this service needs Ec2 capacity. Call addCapacity() on the cluster.");return{parameters:{LaunchType:"EC2",PlacementConstraints:noEmpty(flatten(((_f=(_e=this.options)===null||_e===void 0?void 0:_e.placementConstraints)!==null&&_f!==void 0?_f:[]).map(c=>c.toJson().map(uppercaseKeys)))),PlacementStrategy:noEmpty(flatten(((_h=(_g=this.options)===null||_g===void 0?void 0:_g.placementStrategies)!==null&&_h!==void 0?_h:[]).map(c=>c.toJson().map(uppercaseKeys))))}};function uppercaseKeys(obj){const ret={};for(const key of Object.keys(obj))ret[key.slice(0,1).toUpperCase()+key.slice(1)]=obj[key];return ret}function flatten(xs){return Array.prototype.concat([],...xs)}function noEmpty(xs){if(xs.length!==0)return xs}}}exports.EcsEc2LaunchTarget=EcsEc2LaunchTarget,_b=JSII_RTTI_SYMBOL_1,EcsEc2LaunchTarget[_b]={fqn:"aws-cdk-lib.aws_stepfunctions_tasks.EcsEc2LaunchTarget",version:"2.20.0"};class EcsRunTask extends sfn.TaskStateBase{constructor(scope,id,props){var _d,_e,_f;super(scope,id,props);if(this.props=props,this.connections=new ec2.Connections,this.securityGroups=[],jsiiDeprecationWarnings.aws_cdk_lib_aws_stepfunctions_tasks_EcsRunTaskProps(props),this.integrationPattern=(_d=props.integrationPattern)!==null&&_d!==void 0?_d:sfn.IntegrationPattern.REQUEST_RESPONSE,task_utils_1.validatePatternSupported(this.integrationPattern,EcsRunTask.SUPPORTED_INTEGRATION_PATTERNS),this.integrationPattern===sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN&&!sfn.FieldUtils.containsTaskToken((_e=props.containerOverrides)===null||_e===void 0?void 0:_e.map(override=>override.environment)))throw new Error("Task Token is required in at least one `containerOverrides.environment` for callback. Use JsonPath.taskToken to set the token.");if(!this.props.taskDefinition.defaultContainer)throw new Error("A TaskDefinition must have at least one essential container");this.props.taskDefinition.networkMode===ecs.NetworkMode.AWS_VPC?this.configureAwsVpcNetworking():(this.validateNoNetworkingProps(),this.connections.addSecurityGroup(...this.props.cluster.connections.securityGroups));for(const override of(_f=this.props.containerOverrides)!==null&&_f!==void 0?_f:[]){const name=override.containerDefinition.containerName;if(!cdk.Token.isUnresolved(name)&&!this.props.taskDefinition.findContainer(name))throw new Error(`Overrides mention container with name '${name}', but no such container in task definition`)}this.taskPolicies=this.makePolicyStatements()}_renderTask(){return{Resource:task_utils_1.integrationResourceArn("ecs","runTask",this.integrationPattern),Parameters:sfn.FieldUtils.renderObject({Cluster:this.props.cluster.clusterArn,TaskDefinition:this.props.taskDefinition.family,NetworkConfiguration:this.networkConfiguration,Overrides:renderOverrides(this.props.containerOverrides),...this.props.launchTarget.bind(this,{taskDefinition:this.props.taskDefinition,cluster:this.props.cluster}).parameters})}}configureAwsVpcNetworking(){var _d,_e;const subnetSelection=(_d=this.props.subnets)!==null&&_d!==void 0?_d:{subnetType:this.props.assignPublicIp?ec2.SubnetType.PUBLIC:ec2.SubnetType.PRIVATE};this.networkConfiguration={AwsvpcConfiguration:{AssignPublicIp:this.props.assignPublicIp?this.props.assignPublicIp?"ENABLED":"DISABLED":void 0,Subnets:this.props.cluster.vpc.selectSubnets(subnetSelection).subnetIds,SecurityGroups:cdk.Lazy.list({produce:()=>{var _d2;return(_d2=this.securityGroups)===null||_d2===void 0?void 0:_d2.map(sg=>sg.securityGroupId)}})}},this.securityGroups=(_e=this.props.securityGroups)!==null&&_e!==void 0?_e:[new ec2.SecurityGroup(this,"SecurityGroup",{vpc:this.props.cluster.vpc})],this.connections.addSecurityGroup(...this.securityGroups)}validateNoNetworkingProps(){if(this.props.subnets!==void 0||this.props.securityGroups!==void 0)throw new Error(`Supplied TaskDefinition must have 'networkMode' of 'AWS_VPC' to use 'vpcSubnets' and 'securityGroup'. Received: ${this.props.taskDefinition.networkMode}`)}makePolicyStatements(){const stack=cdk.Stack.of(this),policyStatements=[new iam.PolicyStatement({actions:["ecs:RunTask"],resources:[this.getTaskDefinitionFamilyArn()]}),new iam.PolicyStatement({actions:["ecs:StopTask","ecs:DescribeTasks"],resources:["*"]}),new iam.PolicyStatement({actions:["iam:PassRole"],resources:this.taskExecutionRoles().map(r=>r.roleArn)})];return this.integrationPattern===sfn.IntegrationPattern.RUN_JOB&&policyStatements.push(new iam.PolicyStatement({actions:["events:PutTargets","events:PutRule","events:DescribeRule"],resources:[stack.formatArn({service:"events",resource:"rule",resourceName:"StepFunctionsGetEventsForECSTaskRule"})]})),policyStatements}getTaskDefinitionFamilyArn(){const arnComponents=cdk.Stack.of(this).splitArn(this.props.taskDefinition.taskDefinitionArn,cdk.ArnFormat.SLASH_RESOURCE_NAME);let{resourceName}=arnComponents;return resourceName&&(resourceName=resourceName.split(":")[0]),cdk.Stack.of(this).formatArn({partition:arnComponents.partition,service:arnComponents.service,account:arnComponents.account,region:arnComponents.region,resource:arnComponents.resource,arnFormat:arnComponents.arnFormat,resourceName})}taskExecutionRoles(){const ret=new Array;return ret.push(this.props.taskDefinition.taskRole),this.props.taskDefinition.executionRole&&ret.push(this.props.taskDefinition.executionRole),ret}}exports.EcsRunTask=EcsRunTask,_c=JSII_RTTI_SYMBOL_1,EcsRunTask[_c]={fqn:"aws-cdk-lib.aws_stepfunctions_tasks.EcsRunTask",version:"2.20.0"},EcsRunTask.SUPPORTED_INTEGRATION_PATTERNS=[sfn.IntegrationPattern.REQUEST_RESPONSE,sfn.IntegrationPattern.RUN_JOB,sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN];function renderOverrides(containerOverrides){var _d;if(!containerOverrides||containerOverrides.length===0)return;const ret=new Array;for(const override of containerOverrides)ret.push({Name:override.containerDefinition.containerName,Command:override.command,Cpu:override.cpu,Memory:override.memoryLimit,MemoryReservation:override.memoryReservation,Environment:(_d=override.environment)===null||_d===void 0?void 0:_d.map(e=>({Name:e.name,Value:e.value}))});return{ContainerOverrides:ret}}
//# sourceMappingURL=run-task.js.map
