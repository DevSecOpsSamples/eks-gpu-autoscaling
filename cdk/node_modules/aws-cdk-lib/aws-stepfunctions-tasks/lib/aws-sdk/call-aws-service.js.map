{
  "version": 3,
  "sources": ["call-aws-service.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Token } from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn } from '../private/task-utils';\n\n/**\n * Properties for calling an AWS service's API action from your\n * state machine.\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/supported-services-awssdk.html\n */\nexport interface CallAwsServiceProps extends sfn.TaskStateBaseProps {\n  /**\n   * The AWS service to call.\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/supported-services-awssdk.html\n   */\n  readonly service: string;\n\n  /**\n   * The API action to call.\n   *\n   * Use camelCase.\n   */\n  readonly action: string;\n\n  /**\n   * Parameters for the API action call.\n   *\n   * Use PascalCase for the parameter names.\n   *\n   * @default - no parameters\n   */\n  readonly parameters?: { [key: string]: any };\n\n  /**\n   * The resources for the IAM statement that will be added to the state\n   * machine role's policy to allow the state machine to make the API call.\n   *\n   * By default the action for this IAM statement will be `service:action`.\n   */\n  readonly iamResources: string[];\n\n  /**\n   * The action for the IAM statement that will be added to the state\n   * machine role's policy to allow the state machine to make the API call.\n   *\n   * Use in the case where the IAM action name does not match with the\n   * API service/action name, e.g. `s3:ListBuckets` requires `s3:ListAllMyBuckets`.\n   *\n   * @default - service:action\n   */\n  readonly iamAction?: string;\n}\n\n/**\n * A StepFunctions task to call an AWS service API\n */\nexport class CallAwsService extends sfn.TaskStateBase {\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  constructor(scope: Construct, id: string, private readonly props: CallAwsServiceProps) {\n    super(scope, id, props);\n\n    if (this.props.integrationPattern === sfn.IntegrationPattern.RUN_JOB) {\n      throw new Error('The RUN_JOB integration pattern is not supported for CallAwsService');\n    }\n\n    this.taskPolicies = [\n      new iam.PolicyStatement({\n        resources: props.iamResources,\n        // The prefix and the action name are case insensitive\n        // https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_action.html\n        actions: [props.iamAction ?? `${props.service}:${props.action}`],\n      }),\n    ];\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    let service = this.props.service;\n\n    if (!Token.isUnresolved(service)) {\n      service = service.toLowerCase();\n    }\n\n    return {\n      Resource: integrationResourceArn(\n        'aws-sdk',\n        `${service}:${this.props.action}`,\n        this.props.integrationPattern,\n      ),\n      Parameters: sfn.FieldUtils.renderObject(this.props.parameters) ?? {}, // Parameters is required for aws-sdk\n    };\n  }\n}\n"],
  "mappings": "wNAAA,IAAA,QAAA,kBAAA,EACA,IAAA,QAAA,4BAAA,EACA,OAAA,QAAA,eAAA,EAEA,aAAA,QAAA,uBAAA,EAuDA,MAAa,sBAAuB,KAAI,aAAa,CAInD,YAAY,MAAkB,GAA6B,MAA0B,QACnF,MAAM,MAAO,GAAI,KAAK,EAEtB,GAHyD,KAAA,MAAA,6FAGrD,KAAK,MAAM,qBAAuB,IAAI,mBAAmB,QAC3D,KAAM,IAAI,OAAM,qEAAqE,EAGvF,KAAK,aAAe,CAClB,GAAI,KAAI,gBAAgB,CACtB,UAAW,MAAM,aAGjB,QAAS,CAAA,IAAC,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,GAAG,MAAM,WAAW,MAAM,QAAQ,EAChE,GAOK,aAAW,QACnB,GAAI,SAAU,KAAK,MAAM,QAEzB,MAAK,QAAA,MAAM,aAAa,OAAO,GAC7B,SAAU,QAAQ,YAAW,GAGxB,CACL,SAAU,aAAA,uBACR,UACA,GAAG,WAAW,KAAK,MAAM,SACzB,KAAK,MAAM,kBAAkB,EAE/B,WAAU,IAAE,IAAI,WAAW,aAAa,KAAK,MAAM,UAAU,KAAC,MAAA,KAAA,OAAA,GAAI,CAAA,IArCxE,QAAA,eAAA",
  "names": []
}
