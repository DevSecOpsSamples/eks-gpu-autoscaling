{
  "version": 3,
  "sources": ["create-virtual-cluster.ts"],
  "sourcesContent": ["import * as eks from '../../../aws-eks';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Stack } from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n/**\n * Class for supported types of EMR Containers' Container Providers\n */\nenum ContainerProviderTypes {\n\n  /**\n   * Supported container provider type for a EKS Cluster\n   */\n  EKS = 'EKS'\n}\n\n/**\n * Class that supports methods which return the EKS cluster name depending on input type.\n */\nexport class EksClusterInput {\n\n  /**\n   * Specify an existing EKS Cluster as the name for this Cluster\n   */\n  static fromCluster(cluster: eks.ICluster): EksClusterInput {\n    return new EksClusterInput(cluster.clusterName);\n  }\n\n  /**\n   * Specify a Task Input as the name for this Cluster\n   */\n  static fromTaskInput(taskInput: sfn.TaskInput): EksClusterInput {\n    return new EksClusterInput(taskInput.value);\n  }\n\n  /**\n   * Initializes the clusterName\n   *\n   * @param clusterName The name of the EKS Cluster\n   */\n  private constructor(readonly clusterName: string) { }\n}\n\n/**\n * Properties to define a EMR Containers CreateVirtualCluster Task on an EKS cluster\n */\nexport interface EmrContainersCreateVirtualClusterProps extends sfn.TaskStateBaseProps {\n\n  /**\n   * EKS Cluster or task input that contains the name of the cluster\n   */\n  readonly eksCluster: EksClusterInput;\n\n  /**\n   * The namespace of an EKS cluster\n   *\n   * @default - 'default'\n   */\n  readonly eksNamespace?: string;\n\n  /**\n   * Name of the virtual cluster that will be created.\n   *\n   * @default - the name of the state machine execution that runs this task and state name\n   */\n  readonly virtualClusterName?: string;\n\n  /**\n   * The tags assigned to the virtual cluster\n   *\n   * @default {}\n   */\n  readonly tags?: { [key: string]: string };\n}\n\n/**\n * Task that creates an EMR Containers virtual cluster from an EKS cluster\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-emr-eks.html\n */\nexport class EmrContainersCreateVirtualCluster extends sfn.TaskStateBase {\n\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n  ];\n\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: EmrContainersCreateVirtualClusterProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n    validatePatternSupported(this.integrationPattern, EmrContainersCreateVirtualCluster.SUPPORTED_INTEGRATION_PATTERNS);\n\n    this.taskPolicies = this.createPolicyStatements();\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('emr-containers', 'createVirtualCluster', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        Name: this.props.virtualClusterName ?? sfn.JsonPath.stringAt('States.Format(\\'{}/{}\\', $$.Execution.Name, $$.State.Name)'),\n        ContainerProvider: {\n          Id: this.props.eksCluster.clusterName,\n          Info: {\n            EksInfo: {\n              Namespace: this.props.eksNamespace ?? 'default',\n            },\n          },\n          Type: ContainerProviderTypes.EKS,\n        },\n        Tags: this.props.tags,\n      }),\n    };\n  };\n\n  private createPolicyStatements(): iam.PolicyStatement[] {\n    return [\n      new iam.PolicyStatement({\n        resources: ['*'], // We need * permissions for creating a virtual cluster https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-iam.html\n        actions: ['emr-containers:CreateVirtualCluster'],\n      }),\n      new iam.PolicyStatement({\n        resources: [\n          Stack.of(this).formatArn({\n            service: 'iam',\n            region: '',\n            resource: 'role/aws-service-role/emr-containers.amazonaws.com',\n            resourceName: 'AWSServiceRoleForAmazonEMRContainers',\n          }),\n        ],\n        actions: ['iam:CreateServiceLinkedRole'],\n        conditions: {\n          StringLike: { 'iam:AWSServiceName': 'emr-containers.amazonaws.com' },\n        },\n      }),\n    ];\n  }\n}\n"],
  "mappings": "sQACA,IAAA,QAAA,kBAAA,EACA,IAAA,QAAA,4BAAA,EACA,OAAA,QAAA,eAAA,EAEA,aAAA,QAAA,uBAAA,EAKA,GAAK,wBAAL,AAAA,UAAK,wBAAsB,CAKzB,wBAAA,IAAA,KACF,GANK,wBAAA,wBAAsB,CAAA,EAAA,EAW3B,MAAa,eAAe,CAqB1B,YAA6B,YAAmB,CAAnB,KAAA,YAAA,kBAhBtB,aAAY,QAAqB,sEAC/B,GAAI,iBAAgB,QAAQ,WAAW,QAMzC,eAAc,UAAwB,mFACpC,GAAI,iBAAgB,UAAU,KAAK,GAb9C,QAAA,gBAAA,uIA6DA,MAAa,yCAA0C,KAAI,aAAa,CAWtE,YAAY,MAAkB,GAA6B,MAA6C,QACtG,MAAM,MAAO,GAAI,KAAK,EADmC,KAAA,MAAA,gHAEzD,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,mBAAmB,iBAC7E,aAAA,yBAAyB,KAAK,mBAAoB,kCAAkC,8BAA8B,EAElH,KAAK,aAAe,KAAK,uBAAsB,EAMvC,aAAW,WACnB,MAAO,CACL,SAAU,aAAA,uBAAuB,iBAAkB,uBAAwB,KAAK,kBAAkB,EAClG,WAAY,IAAI,WAAW,aAAa,CACtC,KAAI,IAAE,KAAK,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,SAAS,SAAS,0DAA4D,EACzH,kBAAmB,CACjB,GAAI,KAAK,MAAM,WAAW,YAC1B,KAAM,CACJ,QAAS,CACP,UAAS,IAAE,KAAK,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,YAG1C,KAAM,uBAAuB,KAE/B,KAAM,KAAK,MAAM,KAClB,GAIG,wBAAsB,CAC5B,MAAO,CACL,GAAI,KAAI,gBAAgB,CACtB,UAAW,CAAC,GAAG,EACf,QAAS,CAAC,qCAAqC,EAChD,EACD,GAAI,KAAI,gBAAgB,CACtB,UAAW,CACT,OAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CACvB,QAAS,MACT,OAAQ,GACR,SAAU,qDACV,aAAc,uCACf,GAEH,QAAS,CAAC,6BAA6B,EACvC,WAAY,CACV,WAAY,CAAE,qBAAsB,8BAA8B,GAErE,IA5DP,QAAA,kCAAA,6LAE0B,kCAAA,+BAA2D,CACjF,IAAI,mBAAmB",
  "names": []
}
