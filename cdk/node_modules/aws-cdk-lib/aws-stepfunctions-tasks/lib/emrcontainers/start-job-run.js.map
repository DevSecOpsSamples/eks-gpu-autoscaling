{
  "version": 3,
  "sources": ["start-job-run.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as iam from '../../../aws-iam';\nimport * as lambda from '../../../aws-lambda';\nimport * as logs from '../../../aws-logs';\nimport * as s3 from '../../../aws-s3';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { TaskInput } from '../../../aws-stepfunctions';\nimport * as cdk from '../../../core';\nimport * as cr from '../../../custom-resources';\nimport * as awscli from '../../../lambda-layer-awscli';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n/**\n * The props for a EMR Containers StartJobRun Task.\n */\nexport interface EmrContainersStartJobRunProps extends sfn.TaskStateBaseProps {\n  /**\n   * The ID of the virtual cluster where the job will be run\n   */\n  readonly virtualCluster: VirtualClusterInput;\n\n  /**\n   * The name of the job run.\n   *\n   * @default - No job run name\n   */\n  readonly jobName?: string;\n\n  /**\n   * The execution role for the job run.\n   *\n   * If `virtualClusterId` is from a JSON input path, an execution role must be provided.\n   * If an execution role is provided, follow the documentation to update the role trust policy.\n   * @see https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-trust-policy.html\n   *\n   * @default - Automatically generated only when the provided `virtualClusterId` is not an encoded JSON path\n   */\n  readonly executionRole?: iam.IRole;\n\n  /**\n   * The Amazon EMR release version to use for the job run.\n   */\n  readonly releaseLabel: ReleaseLabel;\n\n  /**\n   * The configurations for the application running in the job run.\n   *\n   * Maximum of 100 items\n   *\n   * @see https://docs.aws.amazon.com/emr-on-eks/latest/APIReference/API_Configuration.html\n   *\n   * @default - No application config\n   */\n  readonly applicationConfig?: ApplicationConfiguration[];\n\n  /**\n   * The job driver for the job run.\n   *\n   * @see https://docs.aws.amazon.com/emr-on-eks/latest/APIReference/API_JobDriver.html\n   */\n  readonly jobDriver: JobDriver;\n\n  /**\n   * Configuration for monitoring the job run\n   *\n   * @see https://docs.aws.amazon.com/emr-on-eks/latest/APIReference/API_MonitoringConfiguration.html\n   *\n   * @default - logging enabled and resources automatically generated if `monitoring.logging` is set to `true`\n   */\n  readonly monitoring?: Monitoring;\n\n  /**\n   * The tags assigned to job runs.\n   *\n   * @default - None\n   */\n  readonly tags?: { [key: string]: string };\n}\n\n/**\n * Starts a job run.\n *\n * A job is a unit of work that you submit to Amazon EMR on EKS for execution.\n * The work performed by the job can be defined by a Spark jar, PySpark script, or SparkSQL query.\n * A job run is an execution of the job on the virtual cluster.\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-emr-eks.html\n */\nexport class EmrContainersStartJobRun extends sfn.TaskStateBase implements iam.IGrantable {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.RUN_JOB,\n  ];\n\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  public readonly grantPrincipal: iam.IPrincipal;\n  private role: iam.IRole;\n  private readonly logGroup?: logs.ILogGroup;\n  private readonly logBucket?: s3.IBucket;\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: EmrContainersStartJobRunProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.RUN_JOB;\n    validatePatternSupported(this.integrationPattern, EmrContainersStartJobRun.SUPPORTED_INTEGRATION_PATTERNS);\n\n    if (this.props.applicationConfig) {\n      this.validateAppConfig(this.props.applicationConfig);\n    }\n\n    if (this.props.jobDriver.sparkSubmitJobDriver) {\n      this.validateSparkSubmitJobDriver(props.jobDriver.sparkSubmitJobDriver);\n    }\n\n    if (this.props.executionRole === undefined\n      && sfn.JsonPath.isEncodedJsonPath(props.virtualCluster.id)) {\n      throw new Error('Execution role cannot be undefined when the virtual cluster ID is not a concrete value. Provide an execution role with the correct trust policy');\n    }\n\n    this.logGroup = this.assignLogGroup();\n    this.logBucket = this.assignLogBucket();\n    this.role = this.props.executionRole ?? this.createJobExecutionRole();\n    this.grantPrincipal = this.role;\n\n    this.grantMonitoringPolicies();\n\n    this.taskPolicies = this.createPolicyStatements();\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('emr-containers', 'startJobRun', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        VirtualClusterId: this.props.virtualCluster.id,\n        Name: this.props.jobName,\n        ExecutionRoleArn: this.role.roleArn,\n        ReleaseLabel: this.props.releaseLabel.label,\n        JobDriver: {\n          SparkSubmitJobDriver: {\n            EntryPoint: this.props.jobDriver.sparkSubmitJobDriver?.entryPoint.value,\n            EntryPointArguments: this.props.jobDriver.sparkSubmitJobDriver?.entryPointArguments?.value,\n            SparkSubmitParameters: this.props.jobDriver.sparkSubmitJobDriver?.sparkSubmitParameters,\n          },\n        },\n        ConfigurationOverrides: {\n          ApplicationConfiguration: cdk.listMapper(this.applicationConfigPropertyToJson)(this.props.applicationConfig),\n          MonitoringConfiguration: {\n            CloudWatchMonitoringConfiguration: this.logGroup ? {\n              LogGroupName: this.logGroup.logGroupName,\n              LogStreamNamePrefix: this.props.monitoring!.logStreamNamePrefix,\n            } : undefined,\n            PersistentAppUI: (this.props.monitoring?.persistentAppUI === false)\n              ? 'DISABLED'\n              : 'ENABLED',\n            S3MonitoringConfiguration: this.logBucket ? {\n              LogUri: this.logBucket.s3UrlForObject(),\n            } : undefined,\n          },\n        },\n        Tags: this.props.tags,\n      }),\n    };\n  }\n\n  /**\n   * Render the EMR Containers ConfigurationProperty as JSON\n   */\n  private applicationConfigPropertyToJson = (property: ApplicationConfiguration) => {\n    return {\n      Classification: cdk.stringToCloudFormation(property.classification.classificationStatement),\n      Properties: property.properties ? cdk.objectToCloudFormation(property.properties) : undefined,\n      Configurations: property.nestedConfig ? cdk.listMapper(this.applicationConfigPropertyToJson)(property.nestedConfig) : undefined,\n    };\n  }\n\n  private validateAppConfigPropertiesLength(appConfig: ApplicationConfiguration) {\n    if (appConfig?.properties === undefined) {\n      return;\n    } else if (Object.keys(appConfig.properties).length > 100) {\n      throw new Error(`Application configuration properties must have 100 or fewer entries. Received ${Object.keys(appConfig.properties).length}`);\n    }\n  }\n\n  private validatePropertiesNestedAppConfigBothNotUndefined(appConfig: ApplicationConfiguration) {\n    if (appConfig?.properties === undefined && appConfig?.nestedConfig === undefined) {\n      throw new Error('Application configuration must have either properties or nested app configurations defined.');\n    }\n  }\n\n  private validateAppConfig(config?: ApplicationConfiguration[]) {\n    if (config === undefined) {\n      return;\n    } else if (config.length > 100) {\n      throw new Error(`Application configuration array must have 100 or fewer entries. Received ${config.length}`);\n    } else {\n      config.forEach(element => this.validateAppConfig(element.nestedConfig));\n      config.forEach(element => this.validateAppConfigPropertiesLength(element));\n      config.forEach(element => this.validatePropertiesNestedAppConfigBothNotUndefined(element));\n    }\n  }\n\n  private isArrayOfStrings(value: any): boolean {\n    return Array.isArray(value) && value.every(item => typeof item === 'string');\n  }\n\n  private validateEntryPointArguments (entryPointArguments:sfn.TaskInput) {\n    if (typeof entryPointArguments.value === 'string' && !sfn.JsonPath.isEncodedJsonPath(entryPointArguments.value)) {\n      throw new Error(`Entry point arguments must be a string array or encoded JSON path, but received a non JSON path string');\n      .`);\n    }\n    if (!this.isArrayOfStrings(entryPointArguments.value)) {\n      throw new Error(`Entry point arguments must be a string array or encoded JSON path but received ${typeof entryPointArguments.value}.`);\n    }\n  }\n\n  private validateEntryPointArgumentsLength (entryPointArguments:sfn.TaskInput) {\n    if (this.isArrayOfStrings(entryPointArguments.value)\n        && (entryPointArguments.value.length > 10280 || entryPointArguments.value.length < 1)) {\n      throw new Error(`Entry point arguments must be a string array between 1 and 10280 in length. Received ${entryPointArguments.value.length}.`);\n    }\n  }\n\n  private validateSparkSubmitParametersLength (sparkSubmitParameters : string) {\n    if (sparkSubmitParameters.length > 102400 || sparkSubmitParameters.length < 1) {\n      throw new Error(`Spark submit parameters must be between 1 and 102400 characters in length. Received ${sparkSubmitParameters.length}.`);\n    }\n  }\n  private validateEntryPoint (entryPoint: TaskInput) {\n    if (!sfn.JsonPath.isEncodedJsonPath(entryPoint.value) && (entryPoint.value.length > 256|| entryPoint.value.length < 1)) {\n      throw new Error(`Entry point must be between 1 and 256 characters in length. Received ${entryPoint.value.length}.`);\n    }\n  }\n\n  private validateSparkSubmitJobDriver (driver:SparkSubmitJobDriver) {\n    this.validateEntryPoint(driver.entryPoint);\n    if (driver.entryPointArguments) {\n      this.validateEntryPointArguments(driver.entryPointArguments);\n      this.validateEntryPointArgumentsLength(driver.entryPointArguments);\n    }\n    if (driver.sparkSubmitParameters) {\n      this.validateSparkSubmitParametersLength(driver.sparkSubmitParameters);\n    }\n  }\n\n  private assignLogGroup = () : any => {\n    if (this.props.monitoring?.logGroup) {\n      return (this.props.monitoring?.logGroup);\n    } else {\n      return (this.props.monitoring?.logging ? new logs.LogGroup(this, 'Monitoring Log Group') : undefined);\n    }\n  }\n\n  private assignLogBucket = () : any => {\n    if (this.props.monitoring?.logBucket) {\n      return (this.props.monitoring?.logBucket);\n    } else {\n      return (this.props.monitoring?.logging ? new s3.Bucket(this, 'Monitoring Bucket') : undefined);\n    }\n  }\n\n  // https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/creating-job-execution-role.html\n  private createJobExecutionRole(): iam.Role {\n    const jobExecutionRole = new iam.Role(this, 'Job-Execution-Role', {\n      assumedBy: new iam.CompositePrincipal(\n        new iam.ServicePrincipal('emr-containers.amazonaws.com'),\n        new iam.ServicePrincipal('states.amazonaws.com'),\n      ),\n    });\n\n    this.logBucket?.grantReadWrite(jobExecutionRole);\n    this.logGroup?.grantWrite(jobExecutionRole);\n    this.logGroup?.grant(jobExecutionRole, 'logs:DescribeLogStreams');\n\n    jobExecutionRole.addToPrincipalPolicy(\n      new iam.PolicyStatement({\n        resources: [\n          'arn:aws:logs:*:*:*',\n        ],\n        actions: [\n          'logs:DescribeLogGroups',\n        ],\n      }),\n    );\n\n    this.updateRoleTrustPolicy(jobExecutionRole);\n\n    return jobExecutionRole;\n  }\n  private grantMonitoringPolicies() {\n\n    this.logBucket?.grantReadWrite(this.role);\n    this.logGroup?.grantWrite(this.role);\n    this.logGroup?.grant(this.role, 'logs:DescribeLogStreams');\n\n    this.role.addToPrincipalPolicy(\n      new iam.PolicyStatement({\n        resources: [\n          'arn:aws:logs:*:*:*',\n        ],\n        actions: [\n          'logs:DescribeLogGroups',\n        ],\n      }),\n    );\n  }\n\n  /**\n   * If an execution role is not provided by user, the automatically generated job execution role must create a trust relationship\n   * between itself and the identity of the EMR managed service account in order to run jobs on the Kubernetes namespace.\n   *\n   * This cannot occur if the user provided virtualClusterId is within an encoded JSON path.\n   *\n   * The trust relationship can be created by updating the trust policy of the job execution role.\n   *\n   * @param role the automatically generated job execution role\n   */\n  private updateRoleTrustPolicy(role: iam.Role) {\n    const eksClusterInfo = new cr.AwsCustomResource(this, 'GetEksClusterInfo', {\n      onCreate: {\n        service: 'EMRcontainers',\n        action: 'describeVirtualCluster',\n        parameters: {\n          id: this.props.virtualCluster.id,\n        },\n        outputPaths: ['virtualCluster.containerProvider.info.eksInfo.namespace', 'virtualCluster.containerProvider.id'],\n        physicalResourceId: cr.PhysicalResourceId.of('id'),\n      },\n      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({\n        resources: cr.AwsCustomResourcePolicy.ANY_RESOURCE,\n      }),\n    });\n    /* We make use of custom resources to call update-roll-trust-policy as this command is only available through\n     * aws cli because this is only used during the initial setup and is not available through the sdk.\n     * https://awscli.amazonaws.com/v2/documentation/api/latest/reference/emr-containers/update-role-trust-policy.html\n     * Commands available through SDK: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/EMRcontainers.html\n     * Commands available through CLI: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/emr-containers/index.html\n    */\n    const cliLayer = new awscli.AwsCliLayer(this, 'awsclilayer');\n    const shellCliLambda = new lambda.SingletonFunction(this, 'Call Update-Role-Trust-Policy', {\n      uuid: '8693BB64-9689-44B6-9AAF-B0CC9EB8757C',\n      runtime: lambda.Runtime.PYTHON_3_6,\n      handler: 'index.handler',\n      code: lambda.Code.fromAsset(path.join(__dirname, 'utils/role-policy')),\n      timeout: cdk.Duration.seconds(30),\n      memorySize: 256,\n      layers: [cliLayer],\n    });\n    shellCliLambda.addToRolePolicy(\n      new iam.PolicyStatement({\n        resources: [\n          cdk.Stack.of(this).formatArn({\n            service: 'eks',\n            resource: 'cluster',\n            resourceName: eksClusterInfo.getResponseField('virtualCluster.containerProvider.id'),\n          }),\n        ],\n        actions: [\n          'eks:DescribeCluster',\n        ],\n      }),\n    );\n    shellCliLambda.addToRolePolicy(\n      new iam.PolicyStatement({\n        resources: [role.roleArn],\n        actions: [\n          'iam:GetRole',\n          'iam:UpdateAssumeRolePolicy',\n        ],\n      }),\n    );\n    const provider = new cr.Provider(this, 'CustomResourceProvider', {\n      onEventHandler: shellCliLambda,\n    });\n    new cdk.CustomResource(this, 'Custom Resource', {\n      properties: {\n        eksNamespace: eksClusterInfo.getResponseField('virtualCluster.containerProvider.info.eksInfo.namespace'),\n        eksClusterId: eksClusterInfo.getResponseField('virtualCluster.containerProvider.id'),\n        roleName: role.roleName,\n      },\n      serviceToken: provider.serviceToken,\n    });\n  }\n\n  private createPolicyStatements(): iam.PolicyStatement[] {\n    const policyStatements = [\n      new iam.PolicyStatement({\n        resources: [\n          cdk.Stack.of(this).formatArn({\n            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME,\n            service: 'emr-containers',\n            resource: 'virtualclusters',\n            resourceName: sfn.JsonPath.isEncodedJsonPath(this.props.virtualCluster.id) ? '*' : this.props.virtualCluster.id, // Need wild card for dynamic start job run https://docs.aws.amazon.com/step-functions/latest/dg/emr-eks-iam.html\n          }),\n        ],\n        actions: ['emr-containers:StartJobRun'],\n        conditions: {\n          StringEquals: {\n            'emr-containers:ExecutionRoleArn': this.role.roleArn,\n          },\n        },\n      }),\n    ];\n\n    if (this.integrationPattern === sfn.IntegrationPattern.RUN_JOB) {\n      policyStatements.push(\n        new iam.PolicyStatement({\n          resources: [\n            cdk.Stack.of(this).formatArn({\n              arnFormat: cdk.ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME,\n              service: 'emr-containers',\n              resource: 'virtualclusters',\n              resourceName: sfn.JsonPath.isEncodedJsonPath(this.props.virtualCluster.id) ? '*' : `${this.props.virtualCluster.id}/jobruns/*`, // Need wild card for dynamic start job run https://docs.aws.amazon.com/step-functions/latest/dg/emr-eks-iam.html\n            }),\n          ],\n          actions: [\n            'emr-containers:DescribeJobRun',\n            'emr-containers:CancelJobRun',\n          ],\n        }),\n      );\n    }\n\n    return policyStatements;\n  }\n}\n\n/**\n * The information about job driver for Spark submit.\n */\nexport interface SparkSubmitJobDriver {\n  /**\n   * The entry point of job application.\n   *\n   * Length Constraints: Minimum length of 1. Maximum length of 256.\n   */\n  readonly entryPoint: sfn.TaskInput;\n\n  /**\n   * The arguments for a job application in a task input object containing an array of strings\n   *\n   * Length Constraints: Minimum length of 1. Maximum length of 10280.\n   * @type sfn.TaskInput which expects payload as an array of strings\n   *\n   * @default - No arguments defined\n   */\n  readonly entryPointArguments?: sfn.TaskInput;\n\n  /**\n   * The Spark submit parameters that are used for job runs.\n   *\n   * Length Constraints: Minimum length of 1. Maximum length of 102400.\n   *\n   * @default - No spark submit parameters\n   */\n  readonly sparkSubmitParameters?: string;\n}\n\n/**\n * Specify the driver that the EMR Containers job runs on.\n * The job driver is used to provide an input for the job that will be run.\n */\nexport interface JobDriver {\n  /**\n   * The job driver parameters specified for spark submit.\n   *\n   * @see https://docs.aws.amazon.com/emr-on-eks/latest/APIReference/API_SparkSubmitJobDriver.html\n   *\n   */\n  readonly sparkSubmitJobDriver: SparkSubmitJobDriver;\n}\n\n/**\n * The classification within a EMR Containers application configuration.\n * Class can be extended to add other classifications.\n * For example, new Classification('xxx-yyy');\n */\nexport class Classification {\n  /**\n   * Sets the maximizeResourceAllocation property to true or false.\n   * When true, Amazon EMR automatically configures spark-defaults properties based on cluster hardware configuration.\n   *\n   * For more info:\n   * @see https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-spark-configure.html#emr-spark-maximizeresourceallocation\n   */\n  static readonly SPARK = new Classification('spark');\n\n  /**\n   * Sets values in the spark-defaults.conf file.\n   *\n   * For more info:\n   * @see https://spark.apache.org/docs/latest/configuration.html\n   */\n  static readonly SPARK_DEFAULTS = new Classification('spark-defaults');\n\n  /**\n   * Sets values in the spark-env.sh file.\n   *\n   * For more info:\n   * @see https://spark.apache.org/docs/latest/configuration.html#environment-variables\n   */\n  static readonly SPARK_ENV = new Classification('spark-env');\n\n  /**\n   * Sets values in the hive-site.xml for Spark.\n   */\n  static readonly SPARK_HIVE_SITE = new Classification('spark-hive-site');\n\n  /**\n   * Sets values in the log4j.properties file.\n   *\n   * For more settings and info:\n   * @see https://github.com/apache/spark/blob/master/conf/log4j.properties.template\n   */\n  static readonly SPARK_LOG4J = new Classification('spark-log4j');\n\n  /**\n   * Sets values in the metrics.properties file.\n   *\n   * For more settings and info:\n   * @see https://github.com/apache/spark/blob/master/conf/metrics.properties.template\n   */\n  static readonly SPARK_METRICS = new Classification('spark-metrics');\n\n  /**\n   * Creates a new Classification\n   *\n   * @param classificationStatement A literal string in case a new EMR classification is released, if not already defined.\n   */\n  constructor(public readonly classificationStatement: string) { }\n}\n\n/**\n * A configuration specification to be used when provisioning virtual clusters,\n * which can include configurations for applications and software bundled with Amazon EMR on EKS.\n *\n * A configuration consists of a classification, properties, and optional nested configurations.\n * A classification refers to an application-specific configuration file.\n * Properties are the settings you want to change in that file.\n * @see https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html\n */\nexport interface ApplicationConfiguration {\n  /**\n   * The classification within a configuration.\n   *\n   * Length Constraints: Minimum length of 1. Maximum length of 1024.\n   */\n  readonly classification: Classification;\n\n  /**\n   * A list of additional configurations to apply within a configuration object.\n   *\n   * Array Members: Maximum number of 100 items.\n   *\n   * @default - No other configurations\n   */\n  readonly nestedConfig?: ApplicationConfiguration[];\n\n  /**\n   * A set of properties specified within a configuration classification.\n   *\n   * Map Entries: Maximum number of 100 items.\n   *\n   * @default - No properties\n   */\n  readonly properties?: { [key: string]: string };\n}\n\n/**\n * Configuration setting for monitoring.\n */\nexport interface Monitoring {\n  /**\n   * Enable logging for this job.\n   *\n   * If set to true, will automatically create a Cloudwatch Log Group and S3 bucket.\n   * This will be set to `true` implicitly if values are provided for `logGroup` or `logBucket`.\n   *\n   * @default true - true if values are provided for `logGroup` or `logBucket`, false otherwise\n   */\n  readonly logging?: boolean\n\n  /**\n   * A log group for CloudWatch monitoring.\n   *\n   * You can configure your jobs to send log information to CloudWatch Logs.\n   *\n   * @default - if `logging` is manually set to `true` and a `logGroup` is not provided, a `logGroup` will be automatically generated`.\n   */\n  readonly logGroup?: logs.ILogGroup;\n\n  /**\n   * A log stream name prefix for Cloudwatch monitoring.\n   *\n   * @default - Log streams created in this log group have no default prefix\n   */\n  readonly logStreamNamePrefix?: string;\n\n  /**\n   * Amazon S3 Bucket for monitoring log publishing.\n   *\n   * You can configure your jobs to send log information to Amazon S3.\n   *\n   * @default - if `logging` is manually set to `true` and a `logBucket` is not provided, a `logBucket` will be automatically generated`.\n   */\n  readonly logBucket?: s3.IBucket;\n\n  /**\n   * Monitoring configurations for the persistent application UI.\n   *\n   * @default true\n   */\n  readonly persistentAppUI?: boolean;\n}\n\n/**\n * The Amazon EMR release version to use for the job run.\n *\n * Can be extended to include new EMR releases\n *\n * For example, `new ReleaseLabel('emr-x.xx.x-latest');`\n */\nexport class ReleaseLabel {\n  /**\n   * EMR Release version 5.32.0\n   */\n  static readonly EMR_5_32_0 = new ReleaseLabel('emr-5.32.0-latest');\n\n  /**\n   * EMR Release version 5.33.0\n   */\n  static readonly EMR_5_33_0 = new ReleaseLabel('emr-5.33.0-latest');\n\n  /**\n   * EMR Release version 6.2.0\n   */\n  static readonly EMR_6_2_0 = new ReleaseLabel('emr-6.2.0-latest');\n\n  /**\n   * EMR Release version 6.3.0\n   */\n  static readonly EMR_6_3_0 = new ReleaseLabel('emr-6.3.0-latest');\n\n  /**\n   * Initializes the label string.\n   *\n   * @param label A literal string that contains the release-version ex. 'emr-x.x.x-latest'\n   */\n  constructor(public readonly label: string) { }\n}\n\n/**\n * Class that returns a virtual cluster's id depending on input type\n */\nexport class VirtualClusterInput {\n  /**\n   * Input for a virtualClusterId from a Task Input\n   */\n  static fromTaskInput(taskInput: sfn.TaskInput): VirtualClusterInput {\n    return new VirtualClusterInput(taskInput.value);\n  }\n\n  /**\n   * Input for virtualClusterId from a literal string\n   */\n  static fromVirtualClusterId(virtualClusterId: string): VirtualClusterInput {\n    return new VirtualClusterInput(virtualClusterId);\n  }\n\n  /**\n   * Initializes the virtual cluster ID.\n   *\n   * @param id The VirtualCluster Id\n   */\n  private constructor(public readonly id: string) { }\n}"],
  "mappings": "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",
  "names": []
}
