{
  "version": 3,
  "sources": ["delete-virtual-cluster.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n/**\n * Properties to define a EMR Containers DeleteVirtualCluster Task\n */\nexport interface EmrContainersDeleteVirtualClusterProps extends sfn.TaskStateBaseProps {\n\n  /**\n   * The ID of the virtual cluster that will be deleted.\n   */\n  readonly virtualClusterId: sfn.TaskInput;\n}\n\n/**\n * Deletes an EMR Containers virtual cluster as a Task.\n *\n * @see https://docs.amazonaws.cn/en_us/step-functions/latest/dg/connect-emr-eks.html\n */\nexport class EmrContainersDeleteVirtualCluster extends sfn.TaskStateBase {\n\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.RUN_JOB,\n  ];\n\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: EmrContainersDeleteVirtualClusterProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n\n    validatePatternSupported(this.integrationPattern, EmrContainersDeleteVirtualCluster.SUPPORTED_INTEGRATION_PATTERNS);\n\n    this.taskPolicies = this.createPolicyStatements();\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('emr-containers', 'deleteVirtualCluster', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        Id: this.props.virtualClusterId.value,\n      }),\n    };\n  };\n\n  private createPolicyStatements(): iam.PolicyStatement[] {\n    const actions = ['emr-containers:DeleteVirtualCluster'];\n    if (this.integrationPattern === sfn.IntegrationPattern.RUN_JOB) {\n      actions.push('emr-containers:DescribeVirtualCluster');\n    }\n\n    return [new iam.PolicyStatement({\n      resources: [\n        cdk.Stack.of(this).formatArn({\n          arnFormat: cdk.ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME,\n          service: 'emr-containers',\n          resource: 'virtualclusters',\n          resourceName: sfn.JsonPath.isEncodedJsonPath(this.props.virtualClusterId.value) ? '*' : this.props.virtualClusterId.value,\n        }),\n      ],\n      actions: actions,\n    })];\n  }\n}\n"],
  "mappings": "2OAAA,IAAA,QAAA,kBAAA,EACA,IAAA,QAAA,4BAAA,EACA,IAAA,QAAA,eAAA,EAEA,aAAA,QAAA,uBAAA,EAkBA,MAAa,yCAA0C,KAAI,aAAa,CAYtE,YAAY,MAAkB,GAA6B,MAA6C,QACtG,MAAM,MAAO,GAAI,KAAK,EADmC,KAAA,MAAA,gHAEzD,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,mBAAmB,iBAE7E,aAAA,yBAAyB,KAAK,mBAAoB,kCAAkC,8BAA8B,EAElH,KAAK,aAAe,KAAK,uBAAsB,EAMvC,aAAW,CACnB,MAAO,CACL,SAAU,aAAA,uBAAuB,iBAAkB,uBAAwB,KAAK,kBAAkB,EAClG,WAAY,IAAI,WAAW,aAAa,CACtC,GAAI,KAAK,MAAM,iBAAiB,MACjC,GAIG,wBAAsB,CAC5B,KAAM,SAAU,CAAC,qCAAqC,EACtD,MAAI,MAAK,qBAAuB,IAAI,mBAAmB,SACrD,QAAQ,KAAK,uCAAuC,EAG/C,CAAC,GAAI,KAAI,gBAAgB,CAC9B,UAAW,CACT,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAC3B,UAAW,IAAI,UAAU,mCACzB,QAAS,iBACT,SAAU,kBACV,aAAc,IAAI,SAAS,kBAAkB,KAAK,MAAM,iBAAiB,KAAK,EAAI,IAAM,KAAK,MAAM,iBAAiB,MACrH,GAEH,QACD,CAAC,GAjDN,QAAA,kCAAA,6LAE0B,kCAAA,+BAA2D,CACjF,IAAI,mBAAmB,iBACvB,IAAI,mBAAmB",
  "names": []
}
