{
  "version": 3,
  "sources": ["create-transform-job.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Size, Stack, Token } from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\nimport { BatchStrategy, ModelClientOptions, S3DataType, TransformInput, TransformOutput, TransformResources } from './base-types';\nimport { renderEnvironment, renderTags } from './private/utils';\n\n/**\n * Properties for creating an Amazon SageMaker transform job task\n *\n */\nexport interface SageMakerCreateTransformJobProps extends sfn.TaskStateBaseProps {\n  /**\n   * Transform Job Name.\n   */\n  readonly transformJobName: string;\n\n  /**\n   * Role for the Transform Job.\n   *\n   * @default - A role is created with `AmazonSageMakerFullAccess` managed policy\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * Number of records to include in a mini-batch for an HTTP inference request.\n   *\n   * @default - No batch strategy\n   */\n  readonly batchStrategy?: BatchStrategy;\n\n  /**\n   * Environment variables to set in the Docker container.\n   *\n   * @default - No environment variables\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * Maximum number of parallel requests that can be sent to each instance in a transform job.\n   *\n   * @default - Amazon SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm.\n   * If the execution-parameters endpoint is not enabled, the default value is 1.\n   */\n  readonly maxConcurrentTransforms?: number;\n\n  /**\n   * Maximum allowed size of the payload, in MB.\n   *\n   * @default 6\n   */\n  readonly maxPayload?: Size;\n\n  /**\n   * Name of the model that you want to use for the transform job.\n   */\n  readonly modelName: string;\n\n  /**\n   * Configures the timeout and maximum number of retries for processing a transform job invocation.\n   *\n   * @default - 0 retries and 60 seconds of timeout\n   */\n  readonly modelClientOptions?: ModelClientOptions;\n\n  /**\n   * Tags to be applied to the train job.\n   *\n   * @default - No tags\n   */\n  readonly tags?: { [key: string]: string };\n\n  /**\n   * Dataset to be transformed and the Amazon S3 location where it is stored.\n   */\n  readonly transformInput: TransformInput;\n\n  /**\n   * S3 location where you want Amazon SageMaker to save the results from the transform job.\n   */\n  readonly transformOutput: TransformOutput;\n\n  /**\n   * ML compute instances for the transform job.\n   *\n   * @default - 1 instance of type M4.XLarge\n   */\n  readonly transformResources?: TransformResources;\n}\n\n/**\n * Class representing the SageMaker Create Transform Job task.\n *\n */\nexport class SageMakerCreateTransformJob extends sfn.TaskStateBase {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.RUN_JOB,\n  ];\n\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n\n  /**\n   * Dataset to be transformed and the Amazon S3 location where it is stored.\n   */\n  private readonly transformInput: TransformInput;\n\n  /**\n   * ML compute instances for the transform job.\n   */\n  private readonly transformResources: TransformResources;\n  private readonly integrationPattern: sfn.IntegrationPattern;\n  private _role?: iam.IRole;\n\n  constructor(scope: Construct, id: string, private readonly props: SageMakerCreateTransformJobProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern || sfn.IntegrationPattern.REQUEST_RESPONSE;\n    validatePatternSupported(this.integrationPattern, SageMakerCreateTransformJob.SUPPORTED_INTEGRATION_PATTERNS);\n\n    // set the sagemaker role or create new one\n    if (props.role) {\n      this._role = props.role;\n    }\n\n    // set the S3 Data type of the input data config objects to be 'S3Prefix' if not defined\n    this.transformInput = props.transformInput.transformDataSource.s3DataSource.s3DataType\n      ? props.transformInput\n      : Object.assign({}, props.transformInput, {\n        transformDataSource: { s3DataSource: { ...props.transformInput.transformDataSource.s3DataSource, s3DataType: S3DataType.S3_PREFIX } },\n      });\n\n    // set the default value for the transform resources\n    this.transformResources = props.transformResources || {\n      instanceCount: 1,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n    };\n\n    this.taskPolicies = this.makePolicyStatements();\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('sagemaker', 'createTransformJob', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject(this.renderParameters()),\n    };\n  }\n\n  /**\n   * The execution role for the Sagemaker transform job.\n   *\n   * Only available after task has been added to a state machine.\n   */\n  public get role(): iam.IRole {\n    if (this._role === undefined) {\n      throw new Error('role not available yet--use the object in a Task first');\n    }\n    return this._role;\n  }\n\n  private renderParameters(): { [key: string]: any } {\n    return {\n      ...(this.props.batchStrategy ? { BatchStrategy: this.props.batchStrategy } : {}),\n      ...renderEnvironment(this.props.environment),\n      ...(this.props.maxConcurrentTransforms ? { MaxConcurrentTransforms: this.props.maxConcurrentTransforms } : {}),\n      ...(this.props.maxPayload ? { MaxPayloadInMB: this.props.maxPayload.toMebibytes() } : {}),\n      ...this.props.modelClientOptions ? this.renderModelClientOptions(this.props.modelClientOptions) : {},\n      ModelName: this.props.modelName,\n      ...renderTags(this.props.tags),\n      ...this.renderTransformInput(this.transformInput),\n      TransformJobName: this.props.transformJobName,\n      ...this.renderTransformOutput(this.props.transformOutput),\n      ...this.renderTransformResources(this.transformResources),\n    };\n  }\n\n  private renderModelClientOptions(options: ModelClientOptions): { [key: string]: any } {\n    const retries = options.invocationsMaxRetries;\n    if (!Token.isUnresolved(retries) && retries? (retries < 0 || retries > 3): false) {\n      throw new Error(`invocationsMaxRetries should be between 0 and 3. Received: ${retries}.`);\n    }\n    const timeout = options.invocationsTimeout?.toSeconds();\n    if (!Token.isUnresolved(timeout) && timeout? (timeout < 1 || timeout > 3600): false) {\n      throw new Error(`invocationsTimeout should be between 1 and 3600 seconds. Received: ${timeout}.`);\n    }\n    return {\n      ModelClientConfig: {\n        InvocationsMaxRetries: retries ?? 0,\n        InvocationsTimeoutInSeconds: timeout ?? 60,\n      },\n    };\n  }\n\n  private renderTransformInput(input: TransformInput): { [key: string]: any } {\n    return {\n      TransformInput: {\n        ...(input.compressionType ? { CompressionType: input.compressionType } : {}),\n        ...(input.contentType ? { ContentType: input.contentType } : {}),\n        DataSource: {\n          S3DataSource: {\n            S3Uri: input.transformDataSource.s3DataSource.s3Uri,\n            S3DataType: input.transformDataSource.s3DataSource.s3DataType,\n          },\n        },\n        ...(input.splitType ? { SplitType: input.splitType } : {}),\n      },\n    };\n  }\n\n  private renderTransformOutput(output: TransformOutput): { [key: string]: any } {\n    return {\n      TransformOutput: {\n        S3OutputPath: output.s3OutputPath,\n        ...(output.encryptionKey ? { KmsKeyId: output.encryptionKey.keyArn } : {}),\n        ...(output.accept ? { Accept: output.accept } : {}),\n        ...(output.assembleWith ? { AssembleWith: output.assembleWith } : {}),\n      },\n    };\n  }\n\n  private renderTransformResources(resources: TransformResources): { [key: string]: any } {\n    return {\n      TransformResources: {\n        InstanceCount: resources.instanceCount,\n        InstanceType: sfn.JsonPath.isEncodedJsonPath(resources.instanceType.toString())\n          ? resources.instanceType.toString() : `ml.${resources.instanceType}`,\n        ...(resources.volumeEncryptionKey ? { VolumeKmsKeyId: resources.volumeEncryptionKey.keyArn } : {}),\n      },\n    };\n  }\n\n  private makePolicyStatements(): iam.PolicyStatement[] {\n    const stack = Stack.of(this);\n\n    // create new role if doesn't exist\n    if (this._role === undefined) {\n      this._role = new iam.Role(this, 'SagemakerTransformRole', {\n        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),\n        managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSageMakerFullAccess')],\n      });\n    }\n\n    // https://docs.aws.amazon.com/step-functions/latest/dg/sagemaker-iam.html\n    const policyStatements = [\n      new iam.PolicyStatement({\n        actions: ['sagemaker:CreateTransformJob', 'sagemaker:DescribeTransformJob', 'sagemaker:StopTransformJob'],\n        resources: [\n          stack.formatArn({\n            service: 'sagemaker',\n            resource: 'transform-job',\n            resourceName: '*',\n          }),\n        ],\n      }),\n      new iam.PolicyStatement({\n        actions: ['sagemaker:ListTags'],\n        resources: ['*'],\n      }),\n      new iam.PolicyStatement({\n        actions: ['iam:PassRole'],\n        resources: [this.role.roleArn],\n        conditions: {\n          StringEquals: { 'iam:PassedToService': 'sagemaker.amazonaws.com' },\n        },\n      }),\n    ];\n\n    if (this.integrationPattern === sfn.IntegrationPattern.RUN_JOB) {\n      policyStatements.push(\n        new iam.PolicyStatement({\n          actions: ['events:PutTargets', 'events:PutRule', 'events:DescribeRule'],\n          resources: [\n            stack.formatArn({\n              service: 'events',\n              resource: 'rule',\n              resourceName: 'StepFunctionsGetEventsForSageMakerTransformJobsRule',\n            }),\n          ],\n        }),\n      );\n    }\n\n    return policyStatements;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
