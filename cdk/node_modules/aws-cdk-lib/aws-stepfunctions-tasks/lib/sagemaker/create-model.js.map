{
  "version": 3,
  "sources": ["create-model.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\nimport { IContainerDefinition } from './base-types';\n\n/**\n * Properties for creating an Amazon SageMaker model\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-sagemaker.html\n */\nexport interface SageMakerCreateModelProps extends sfn.TaskStateBaseProps {\n  /**\n   * An execution role that you can pass in a CreateModel API request\n   *\n   * @default - a role will be created.\n   */\n  readonly role?: iam.IRole;\n  /**\n   * The name of the new model.\n   */\n  readonly modelName: string;\n  /**\n   * The definition of the primary docker image containing inference code, associated artifacts,\n   * and custom environment map that the inference code uses when the model is deployed for predictions.\n   */\n  readonly primaryContainer: IContainerDefinition;\n  /**\n   * Specifies the containers in the inference pipeline.\n   *\n   * @default - None\n   */\n  readonly containers?: IContainerDefinition[];\n\n  /**\n   * Isolates the model container. No inbound or outbound network calls can be made to or from the model container.\n   *\n   * @default false\n   */\n  readonly enableNetworkIsolation?: boolean;\n\n  /**\n   * The VPC that is accessible by the hosted model\n   *\n   * @default - None\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * The subnets of the VPC to which the hosted model is connected\n   * (Note this parameter is only used when VPC is provided)\n   *\n   * @default - Private Subnets are selected\n   */\n  readonly subnetSelection?: ec2.SubnetSelection;\n\n  /**\n   * Tags to be applied to the model.\n   *\n   * @default - No tags\n   */\n  readonly tags?: sfn.TaskInput;\n}\n\n/**\n * A Step Functions Task to create a SageMaker model\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-sagemaker.html\n */\nexport class SageMakerCreateModel extends sfn.TaskStateBase implements iam.IGrantable, ec2.IConnectable {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n  ];\n  /**\n   * Allows specify security group connections for instances of this fleet.\n   */\n  public readonly connections: ec2.Connections = new ec2.Connections();\n  /**\n   * The execution role for the Sagemaker Create Model API.\n   */\n  public readonly role: iam.IRole;\n  public readonly grantPrincipal: iam.IPrincipal;\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n  private readonly vpc?: ec2.IVpc;\n  private securityGroup?: ec2.ISecurityGroup;\n  private readonly securityGroups: ec2.ISecurityGroup[] = [];\n  private readonly subnets?: string[];\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: SageMakerCreateModelProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern || sfn.IntegrationPattern.REQUEST_RESPONSE;\n    validatePatternSupported(this.integrationPattern, SageMakerCreateModel.SUPPORTED_INTEGRATION_PATTERNS);\n\n    // add the security groups to the connections object\n    if (props.vpc) {\n      this.vpc = props.vpc;\n      this.subnets = props.subnetSelection ? this.vpc.selectSubnets(props.subnetSelection).subnetIds : this.vpc.selectSubnets().subnetIds;\n    }\n\n    this.role = this.props.role || this.createSagemakerRole();\n    this.grantPrincipal = this.role;\n    this.taskPolicies = this.makePolicyStatements();\n  }\n\n  /**\n   * Add the security group to all instances via the launch configuration\n   * security groups array.\n   *\n   * @param securityGroup: The security group to add\n   */\n  public addSecurityGroup(securityGroup: ec2.ISecurityGroup): void {\n    this.securityGroups.push(securityGroup);\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('sagemaker', 'createModel', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject(this.renderParameters()),\n    };\n  }\n\n  private renderParameters(): { [key: string]: any } {\n    return {\n      EnableNetworkIsolation: this.props.enableNetworkIsolation,\n      ExecutionRoleArn: this.role.roleArn,\n      ModelName: this.props.modelName,\n      Tags: this.props.tags?.value,\n      PrimaryContainer: this.props.primaryContainer.bind(this).parameters,\n      Containers: this.props.containers?.map(container => (container.bind(this))),\n      ...this.renderVpcConfig(),\n    };\n  }\n\n  private makePolicyStatements(): iam.PolicyStatement[] {\n    const stack = cdk.Stack.of(this);\n    return [\n      new iam.PolicyStatement({\n        actions: ['sagemaker:CreateModel'],\n        resources: [\n          stack.formatArn({\n            service: 'sagemaker',\n            resource: 'model',\n            // If the model name comes from input, we cannot target the policy to a particular ARN prefix reliably.\n            // SageMaker uses lowercase for resource name in the arn\n            resourceName: sfn.JsonPath.isEncodedJsonPath(this.props.modelName) ? '*' : `${this.props.modelName.toLowerCase()}*`,\n          }),\n        ],\n      }),\n      new iam.PolicyStatement({\n        actions: ['sagemaker:ListTags'],\n        // https://docs.aws.amazon.com/step-functions/latest/dg/sagemaker-iam.html\n        resources: ['*'],\n      }),\n      new iam.PolicyStatement({\n        actions: ['iam:PassRole'],\n        resources: [this.role.roleArn],\n        conditions: {\n          StringEquals: { 'iam:PassedToService': 'sagemaker.amazonaws.com' },\n        },\n      }),\n    ];\n  }\n\n  private createSagemakerRole() {\n    // https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html\n    const role = new iam.Role(this, 'SagemakerRole', {\n      assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),\n      inlinePolicies: {\n        CreateModel: new iam.PolicyDocument({\n          statements: [\n            new iam.PolicyStatement({\n              actions: [\n                // https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html\n                'cloudwatch:PutMetricData',\n                // https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatchlogs.html\n                'logs:CreateLogStream',\n                'logs:CreateLogGroup',\n                'logs:PutLogEvents',\n                'logs:DescribeLogStreams',\n                // https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonelasticcontainerregistry.html\n                'ecr:GetAuthorizationToken',\n              ],\n              resources: ['*'],\n            }),\n          ],\n        }),\n      },\n    });\n    if (this.props.vpc) {\n      role.addToPrincipalPolicy(\n        // https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonec2.html\n        new iam.PolicyStatement({\n          actions: [\n            'ec2:CreateNetworkInterface',\n            'ec2:CreateNetworkInterfacePermission',\n            'ec2:DeleteNetworkInterface',\n            'ec2:DeleteNetworkInterfacePermission',\n            'ec2:DescribeNetworkInterfaces',\n            'ec2:DescribeVpcs',\n            'ec2:DescribeDhcpOptions',\n            'ec2:DescribeSubnets',\n            'ec2:DescribeSecurityGroups',\n          ],\n          resources: ['*'],\n        }),\n      );\n    }\n    return role;\n  }\n\n  private renderVpcConfig(): { [key: string]: any } {\n    // create a security group if not defined\n    if (this.vpc && this.securityGroup === undefined) {\n      this.securityGroup = new ec2.SecurityGroup(this, 'ModelSecurityGroup', {\n        vpc: this.vpc,\n      });\n      this.connections.addSecurityGroup(this.securityGroup);\n      this.securityGroups.push(this.securityGroup);\n    }\n    return this.vpc\n      ? {\n        VpcConfig: {\n          SecurityGroupIds: cdk.Lazy.list({ produce: () => this.securityGroups.map((sg) => sg.securityGroupId) }),\n          Subnets: this.subnets,\n        },\n      }\n      : {};\n  }\n}"],
  "mappings": "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",
  "names": []
}
