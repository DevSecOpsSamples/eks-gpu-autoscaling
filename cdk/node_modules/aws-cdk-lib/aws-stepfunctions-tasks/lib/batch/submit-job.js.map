{
  "version": 3,
  "sources": ["submit-job.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Size, Stack, withResolved } from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n/**\n * The overrides that should be sent to a container.\n */\nexport interface BatchContainerOverrides {\n  /**\n   * The command to send to the container that overrides\n   * the default command from the Docker image or the job definition.\n   *\n   * @default - No command overrides\n   */\n  readonly command?: string[];\n\n  /**\n   * The environment variables to send to the container.\n   * You can add new environment variables, which are added to the container\n   * at launch, or you can override the existing environment variables from\n   * the Docker image or the job definition.\n   *\n   * @default - No environment overrides\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * The instance type to use for a multi-node parallel job.\n   * This parameter is not valid for single-node container jobs.\n   *\n   * @default - No instance type overrides\n   */\n  readonly instanceType?: ec2.InstanceType;\n\n  /**\n   * Memory reserved for the job.\n   *\n   * @default - No memory overrides. The memory supplied in the job definition will be used.\n   */\n  readonly memory?: Size;\n\n  /**\n   * The number of physical GPUs to reserve for the container.\n   * The number of GPUs reserved for all containers in a job\n   * should not exceed the number of available GPUs on the compute\n   * resource that the job is launched on.\n   *\n   * @default - No GPU reservation\n   */\n  readonly gpuCount?: number;\n\n  /**\n   * The number of vCPUs to reserve for the container.\n   * This value overrides the value set in the job definition.\n   *\n   * @default - No vCPUs overrides\n   */\n  readonly vcpus?: number;\n}\n\n/**\n * An object representing an AWS Batch job dependency.\n */\nexport interface BatchJobDependency {\n  /**\n   * The job ID of the AWS Batch job associated with this dependency.\n   *\n   * @default - No jobId\n   */\n  readonly jobId?: string;\n\n  /**\n   * The type of the job dependency.\n   *\n   * @default - No type\n   */\n  readonly type?: string;\n}\n\n/**\n * Properties for RunBatchJob\n *\n */\nexport interface BatchSubmitJobProps extends sfn.TaskStateBaseProps {\n  /**\n   * The arn of the job definition used by this job.\n   */\n  readonly jobDefinitionArn: string;\n\n  /**\n   * The name of the job.\n   * The first character must be alphanumeric, and up to 128 letters (uppercase and lowercase),\n   * numbers, hyphens, and underscores are allowed.\n   */\n  readonly jobName: string;\n\n  /**\n   * The arn of the job queue into which the job is submitted.\n   */\n  readonly jobQueueArn: string;\n\n  /**\n   * The array size can be between 2 and 10,000.\n   * If you specify array properties for a job, it becomes an array job.\n   * For more information, see Array Jobs in the AWS Batch User Guide.\n   *\n   * @default - No array size\n   */\n  readonly arraySize?: number;\n\n  /**\n   * A list of container overrides in JSON format that specify the name of a container\n   * in the specified job definition and the overrides it should receive.\n   *\n   * @see https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html#Batch-SubmitJob-request-containerOverrides\n   *\n   * @default - No container overrides\n   */\n  readonly containerOverrides?: BatchContainerOverrides;\n\n  /**\n   * A list of dependencies for the job.\n   * A job can depend upon a maximum of 20 jobs.\n   *\n   * @see https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html#Batch-SubmitJob-request-dependsOn\n   *\n   * @default - No dependencies\n   */\n  readonly dependsOn?: BatchJobDependency[];\n\n  /**\n   * The payload to be passed as parameters to the batch job\n   *\n   * @default - No parameters are passed\n   */\n  readonly payload?: sfn.TaskInput;\n\n  /**\n   * The number of times to move a job to the RUNNABLE status.\n   * You may specify between 1 and 10 attempts.\n   * If the value of attempts is greater than one,\n   * the job is retried on failure the same number of attempts as the value.\n   *\n   * @default 1\n   */\n  readonly attempts?: number;\n}\n\n/**\n * Task to submits an AWS Batch job from a job definition.\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-batch.html\n */\nexport class BatchSubmitJob extends sfn.TaskStateBase {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.RUN_JOB,\n  ];\n\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: BatchSubmitJobProps) {\n    super(scope, id, props);\n\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.RUN_JOB;\n    validatePatternSupported(this.integrationPattern, BatchSubmitJob.SUPPORTED_INTEGRATION_PATTERNS);\n\n    // validate arraySize limits\n    withResolved(props.arraySize, (arraySize) => {\n      if (arraySize !== undefined && (arraySize < 2 || arraySize > 10_000)) {\n        throw new Error(`arraySize must be between 2 and 10,000. Received ${arraySize}.`);\n      }\n    });\n\n    // validate dependency size\n    if (props.dependsOn && props.dependsOn.length > 20) {\n      throw new Error(`dependencies must be 20 or less. Received ${props.dependsOn.length}.`);\n    }\n\n    // validate attempts\n    withResolved(props.attempts, (attempts) => {\n      if (attempts !== undefined && (attempts < 1 || attempts > 10)) {\n        throw new Error(`attempts must be between 1 and 10. Received ${attempts}.`);\n      }\n    });\n\n    // validate timeout\n    props.timeout !== undefined && withResolved(props.timeout.toSeconds(), (timeout) => {\n      if (timeout < 60) {\n        throw new Error(`attempt duration must be greater than 60 seconds. Received ${timeout} seconds.`);\n      }\n    });\n\n    // This is required since environment variables must not start with AWS_BATCH;\n    // this naming convention is reserved for variables that are set by the AWS Batch service.\n    if (props.containerOverrides?.environment) {\n      Object.keys(props.containerOverrides.environment).forEach(key => {\n        if (key.match(/^AWS_BATCH/)) {\n          throw new Error(\n            `Invalid environment variable name: ${key}. Environment variable names starting with 'AWS_BATCH' are reserved.`,\n          );\n        }\n      });\n    }\n\n    this.taskPolicies = this.configurePolicyStatements();\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('batch', 'submitJob', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        JobDefinition: this.props.jobDefinitionArn,\n        JobName: this.props.jobName,\n        JobQueue: this.props.jobQueueArn,\n        Parameters: this.props.payload?.value,\n        ArrayProperties:\n          this.props.arraySize !== undefined\n            ? { Size: this.props.arraySize }\n            : undefined,\n\n        ContainerOverrides: this.props.containerOverrides\n          ? this.configureContainerOverrides(this.props.containerOverrides)\n          : undefined,\n\n        DependsOn: this.props.dependsOn\n          ? this.props.dependsOn.map(jobDependency => ({\n            JobId: jobDependency.jobId,\n            Type: jobDependency.type,\n          }))\n          : undefined,\n\n        RetryStrategy:\n          this.props.attempts !== undefined\n            ? { Attempts: this.props.attempts }\n            : undefined,\n\n        Timeout: this.props.timeout\n          ? { AttemptDurationSeconds: this.props.timeout.toSeconds() }\n          : undefined,\n      }),\n      TimeoutSeconds: undefined,\n    };\n  }\n\n  private configurePolicyStatements(): iam.PolicyStatement[] {\n    return [\n      // Resource level access control for job-definition requires revision which batch does not support yet\n      // Using the alternative permissions as mentioned here:\n      // https://docs.aws.amazon.com/batch/latest/userguide/batch-supported-iam-actions-resources.html\n      new iam.PolicyStatement({\n        resources: [\n          Stack.of(this).formatArn({\n            service: 'batch',\n            resource: 'job-definition',\n            resourceName: '*',\n          }),\n          this.props.jobQueueArn,\n        ],\n        actions: ['batch:SubmitJob'],\n      }),\n      new iam.PolicyStatement({\n        resources: [\n          Stack.of(this).formatArn({\n            service: 'events',\n            resource: 'rule/StepFunctionsGetEventsForBatchJobsRule',\n          }),\n        ],\n        actions: ['events:PutTargets', 'events:PutRule', 'events:DescribeRule'],\n      }),\n    ];\n  }\n\n  private configureContainerOverrides(containerOverrides: BatchContainerOverrides) {\n    let environment;\n    if (containerOverrides.environment) {\n      environment = Object.entries(containerOverrides.environment).map(\n        ([key, value]) => ({\n          Name: key,\n          Value: value,\n        }),\n      );\n    }\n\n    let resources: Array<any> = [];\n    if (containerOverrides.gpuCount) {\n      resources.push(\n        {\n          Type: 'GPU',\n          Value: `${containerOverrides.gpuCount}`,\n        },\n      );\n    }\n    if (containerOverrides.memory) {\n      resources.push(\n        {\n          Type: 'MEMORY',\n          Value: `${containerOverrides.memory.toMebibytes()}`,\n        },\n      );\n    }\n    if (containerOverrides.vcpus) {\n      resources.push(\n        {\n          Type: 'VCPU',\n          Value: `${containerOverrides.vcpus}`,\n        },\n      );\n    }\n\n    return {\n      Command: containerOverrides.command,\n      Environment: environment,\n      InstanceType: containerOverrides.instanceType?.toString(),\n      ResourceRequirements: resources.length ? resources : undefined,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
