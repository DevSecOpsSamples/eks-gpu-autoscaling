{
  "version": 3,
  "sources": ["run-batch-job.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Duration, Stack, withResolved } from '../../../core';\nimport { getResourceArn } from '../resource-arn-suffix';\n\n/**\n * The overrides that should be sent to a container.\n */\nexport interface ContainerOverrides {\n  /**\n   * The command to send to the container that overrides\n   * the default command from the Docker image or the job definition.\n   *\n   * @default - No command overrides\n   */\n  readonly command?: string[];\n\n  /**\n   * The environment variables to send to the container.\n   * You can add new environment variables, which are added to the container\n   * at launch, or you can override the existing environment variables from\n   * the Docker image or the job definition.\n   *\n   * @default - No environment overrides\n   */\n  readonly environment?: { [key: string]: string };\n\n  /**\n   * The instance type to use for a multi-node parallel job.\n   * This parameter is not valid for single-node container jobs.\n   *\n   * @default - No instance type overrides\n   */\n  readonly instanceType?: ec2.InstanceType;\n\n  /**\n   * The number of MiB of memory reserved for the job.\n   * This value overrides the value set in the job definition.\n   *\n   * @default - No memory overrides\n   */\n  readonly memory?: number;\n\n  /**\n   * The number of physical GPUs to reserve for the container.\n   * The number of GPUs reserved for all containers in a job\n   * should not exceed the number of available GPUs on the compute\n   * resource that the job is launched on.\n   *\n   * @default - No GPU reservation\n   */\n  readonly gpuCount?: number;\n\n  /**\n   * The number of vCPUs to reserve for the container.\n   * This value overrides the value set in the job definition.\n   *\n   * @default - No vCPUs overrides\n   */\n  readonly vcpus?: number;\n}\n\n/**\n * An object representing an AWS Batch job dependency.\n */\nexport interface JobDependency {\n  /**\n   * The job ID of the AWS Batch job associated with this dependency.\n   *\n   * @default - No jobId\n   */\n  readonly jobId?: string;\n\n  /**\n   * The type of the job dependency.\n   *\n   * @default - No type\n   */\n  readonly type?: string;\n}\n\n/**\n * Properties for RunBatchJob\n *\n * @deprecated use `BatchSubmitJob`\n */\nexport interface RunBatchJobProps {\n  /**\n   * The arn of the job definition used by this job.\n   */\n  readonly jobDefinitionArn: string;\n\n  /**\n   * The name of the job.\n   * The first character must be alphanumeric, and up to 128 letters (uppercase and lowercase),\n   * numbers, hyphens, and underscores are allowed.\n   */\n  readonly jobName: string;\n\n  /**\n   * The arn of the job queue into which the job is submitted.\n   */\n  readonly jobQueueArn: string;\n\n  /**\n   * The array size can be between 2 and 10,000.\n   * If you specify array properties for a job, it becomes an array job.\n   * For more information, see Array Jobs in the AWS Batch User Guide.\n   *\n   * @default - No array size\n   */\n  readonly arraySize?: number;\n\n  /**\n   * A list of container overrides in JSON format that specify the name of a container\n   * in the specified job definition and the overrides it should receive.\n   *\n   * @see https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html#Batch-SubmitJob-request-containerOverrides\n   *\n   * @default - No container overrides\n   */\n  readonly containerOverrides?: ContainerOverrides;\n\n  /**\n   * A list of dependencies for the job.\n   * A job can depend upon a maximum of 20 jobs.\n   *\n   * @see https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html#Batch-SubmitJob-request-dependsOn\n   *\n   * @default - No dependencies\n   */\n  readonly dependsOn?: JobDependency[];\n\n  /**\n   * The payload to be passed as parametrs to the batch job\n   *\n   * @default - No parameters are passed\n   */\n  readonly payload?: { [key: string]: any };\n\n  /**\n   * The number of times to move a job to the RUNNABLE status.\n   * You may specify between 1 and 10 attempts.\n   * If the value of attempts is greater than one,\n   * the job is retried on failure the same number of attempts as the value.\n   *\n   * @default - 1\n   */\n  readonly attempts?: number;\n\n  /**\n   * The timeout configuration for this SubmitJob operation.\n   * The minimum value for the timeout is 60 seconds.\n   *\n   * @see https://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html#Batch-SubmitJob-request-timeout\n   *\n   * @default - No timeout\n   */\n  readonly timeout?: Duration;\n\n  /**\n   * The service integration pattern indicates different ways to call TerminateCluster.\n   *\n   * The valid value is either FIRE_AND_FORGET or SYNC.\n   *\n   * @default SYNC\n   */\n  readonly integrationPattern?: sfn.ServiceIntegrationPattern;\n}\n\n/**\n * A Step Functions Task to run AWS Batch\n *\n * @deprecated use `BatchSubmitJob`\n */\nexport class RunBatchJob implements sfn.IStepFunctionsTask {\n  private readonly integrationPattern: sfn.ServiceIntegrationPattern;\n\n  constructor(private readonly props: RunBatchJobProps) {\n    // validate integrationPattern\n    this.integrationPattern =\n      props.integrationPattern || sfn.ServiceIntegrationPattern.SYNC;\n\n    const supportedPatterns = [\n      sfn.ServiceIntegrationPattern.FIRE_AND_FORGET,\n      sfn.ServiceIntegrationPattern.SYNC,\n    ];\n\n    if (!supportedPatterns.includes(this.integrationPattern)) {\n      throw new Error(\n        `Invalid Service Integration Pattern: ${this.integrationPattern} is not supported to call RunBatchJob.`,\n      );\n    }\n\n    // validate arraySize limits\n    withResolved(props.arraySize, (arraySize) => {\n      if (arraySize !== undefined && (arraySize < 2 || arraySize > 10_000)) {\n        throw new Error(`arraySize must be between 2 and 10,000. Received ${arraySize}.`);\n      }\n    });\n\n    // validate dependency size\n    if (props.dependsOn && props.dependsOn.length > 20) {\n      throw new Error(`dependencies must be 20 or less. Received ${props.dependsOn.length}.`);\n    }\n\n    // validate attempts\n    withResolved(props.attempts, (attempts) => {\n      if (attempts !== undefined && (attempts < 1 || attempts > 10)) {\n        throw new Error(`attempts must be between 1 and 10. Received ${attempts}.`);\n      }\n    });\n\n    // validate timeout\n    props.timeout !== undefined && withResolved(props.timeout.toSeconds(), (timeout) => {\n      if (timeout < 60) {\n        throw new Error(`timeout must be greater than 60 seconds. Received ${timeout} seconds.`);\n      }\n    });\n\n    // This is reuqired since environment variables must not start with AWS_BATCH;\n    // this naming convention is reserved for variables that are set by the AWS Batch service.\n    if (props.containerOverrides?.environment) {\n      Object.keys(props.containerOverrides.environment).forEach(key => {\n        if (key.match(/^AWS_BATCH/)) {\n          throw new Error(\n            `Invalid environment variable name: ${key}. Environment variable names starting with 'AWS_BATCH' are reserved.`,\n          );\n        }\n      });\n    }\n  }\n\n  public bind(_task: sfn.Task): sfn.StepFunctionsTaskConfig {\n    return {\n      resourceArn: getResourceArn(\n        'batch',\n        'submitJob',\n        this.integrationPattern,\n      ),\n      policyStatements: this.configurePolicyStatements(_task),\n      parameters: {\n        JobDefinition: this.props.jobDefinitionArn,\n        JobName: this.props.jobName,\n        JobQueue: this.props.jobQueueArn,\n        Parameters: this.props.payload,\n\n        ArrayProperties:\n          this.props.arraySize !== undefined\n            ? { Size: this.props.arraySize }\n            : undefined,\n\n        ContainerOverrides: this.props.containerOverrides\n          ? this.configureContainerOverrides(this.props.containerOverrides)\n          : undefined,\n\n        DependsOn: this.props.dependsOn\n          ? this.props.dependsOn.map(jobDependency => ({\n            JobId: jobDependency.jobId,\n            Type: jobDependency.type,\n          }))\n          : undefined,\n\n        RetryStrategy:\n          this.props.attempts !== undefined\n            ? { Attempts: this.props.attempts }\n            : undefined,\n\n        Timeout: this.props.timeout\n          ? { AttemptDurationSeconds: this.props.timeout.toSeconds() }\n          : undefined,\n      },\n    };\n  }\n\n  private configurePolicyStatements(task: sfn.Task): iam.PolicyStatement[] {\n    return [\n      // Resource level access control for job-definition requires revision which batch does not support yet\n      // Using the alternative permissions as mentioned here:\n      // https://docs.aws.amazon.com/batch/latest/userguide/batch-supported-iam-actions-resources.html\n      new iam.PolicyStatement({\n        resources: [\n          Stack.of(task).formatArn({\n            service: 'batch',\n            resource: 'job-definition',\n            resourceName: '*',\n          }),\n          this.props.jobQueueArn,\n        ],\n        actions: ['batch:SubmitJob'],\n      }),\n      new iam.PolicyStatement({\n        resources: [\n          Stack.of(task).formatArn({\n            service: 'events',\n            resource: 'rule/StepFunctionsGetEventsForBatchJobsRule',\n          }),\n        ],\n        actions: ['events:PutTargets', 'events:PutRule', 'events:DescribeRule'],\n      }),\n    ];\n  }\n\n  private configureContainerOverrides(containerOverrides: ContainerOverrides) {\n    let environment;\n    if (containerOverrides.environment) {\n      environment = Object.entries(containerOverrides.environment).map(\n        ([key, value]) => ({\n          Name: key,\n          Value: value,\n        }),\n      );\n    }\n\n    let resources;\n    if (containerOverrides.gpuCount) {\n      resources = [\n        {\n          Type: 'GPU',\n          Value: `${containerOverrides.gpuCount}`,\n        },\n      ];\n    }\n\n    return {\n      Command: containerOverrides.command,\n      Environment: environment,\n      InstanceType: containerOverrides.instanceType?.toString(),\n      Memory: containerOverrides.memory,\n      ResourceRequirements: resources,\n      Vcpus: containerOverrides.vcpus,\n    };\n  }\n}\n"],
  "mappings": "uJACA,IAAA,QAAA,kBAAA,EACA,IAAA,QAAA,4BAAA,EACA,OAAA,QAAA,eAAA,EACA,sBAAA,QAAA,wBAAA,EA4KA,MAAa,WAAW,CAGtB,YAA6B,MAAuB,QAUlD,GAV2B,KAAA,MAAA,MAE3B,KAAK,mBACH,MAAM,oBAAsB,IAAI,0BAA0B,KAOxD,CAAC,AALqB,CACxB,IAAI,0BAA0B,gBAC9B,IAAI,0BAA0B,MAGT,SAAS,KAAK,kBAAkB,EACrD,KAAM,IAAI,OACR,wCAAwC,KAAK,0DAA0D,EAY3G,GAPA,OAAA,aAAa,MAAM,UAAW,AAAC,WAAa,CAC1C,GAAI,YAAc,QAAc,WAAY,GAAK,UAAY,KAC3D,KAAM,IAAI,OAAM,oDAAoD,YAAY,CAEpF,CAAC,EAGG,MAAM,WAAa,MAAM,UAAU,OAAS,GAC9C,KAAM,IAAI,OAAM,6CAA6C,MAAM,UAAU,SAAS,EAIxF,OAAA,aAAa,MAAM,SAAU,AAAC,UAAY,CACxC,GAAI,WAAa,QAAc,UAAW,GAAK,SAAW,IACxD,KAAM,IAAI,OAAM,+CAA+C,WAAW,CAE9E,CAAC,EAGD,MAAM,UAAY,QAAa,OAAA,aAAa,MAAM,QAAQ,UAAS,EAAI,AAAC,SAAW,CACjF,GAAI,QAAU,GACZ,KAAM,IAAI,OAAM,qDAAqD,kBAAkB,CAE3F,CAAC,EAID,MAAI,MAAM,sBAAkB,MAAA,KAAA,SAAA,GAAE,aAC5B,OAAO,KAAK,MAAM,mBAAmB,WAAW,EAAE,QAAQ,KAAM,CAC9D,GAAI,IAAI,MAAM,YAAY,EACxB,KAAM,IAAI,OACR,sCAAsC,yEAAyE,CAGrH,CAAC,EAIE,KAAK,MAAe,CACzB,MAAO,CACL,YAAa,sBAAA,eACX,QACA,YACA,KAAK,kBAAkB,EAEzB,iBAAkB,KAAK,0BAA0B,KAAK,EACtD,WAAY,CACV,cAAe,KAAK,MAAM,iBAC1B,QAAS,KAAK,MAAM,QACpB,SAAU,KAAK,MAAM,YACrB,WAAY,KAAK,MAAM,QAEvB,gBACE,KAAK,MAAM,YAAc,OACrB,CAAE,KAAM,KAAK,MAAM,SAAS,EAC5B,OAEN,mBAAoB,KAAK,MAAM,mBAC3B,KAAK,4BAA4B,KAAK,MAAM,kBAAkB,EAC9D,OAEJ,UAAW,KAAK,MAAM,UAClB,KAAK,MAAM,UAAU,IAAI,eAAkB,EAC3C,MAAO,cAAc,MACrB,KAAM,cAAc,MACpB,EACA,OAEJ,cACE,KAAK,MAAM,WAAa,OACpB,CAAE,SAAU,KAAK,MAAM,QAAQ,EAC/B,OAEN,QAAS,KAAK,MAAM,QAChB,CAAE,uBAAwB,KAAK,MAAM,QAAQ,UAAS,CAAE,EACxD,SAKF,0BAA0B,KAAc,CAC9C,MAAO,CAIL,GAAI,KAAI,gBAAgB,CACtB,UAAW,CACT,OAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CACvB,QAAS,QACT,SAAU,iBACV,aAAc,IACf,EACD,KAAK,MAAM,aAEb,QAAS,CAAC,iBAAiB,EAC5B,EACD,GAAI,KAAI,gBAAgB,CACtB,UAAW,CACT,OAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CACvB,QAAS,SACT,SAAU,8CACX,GAEH,QAAS,CAAC,oBAAqB,iBAAkB,qBAAqB,EACvE,GAIG,4BAA4B,mBAAsC,QACxE,GAAI,aACJ,AAAI,mBAAmB,aACrB,aAAc,OAAO,QAAQ,mBAAmB,WAAW,EAAE,IAC3D,CAAC,CAAC,IAAK,SAAY,EACjB,KAAM,IACN,MAAO,OACP,GAIN,GAAI,WACJ,MAAI,oBAAmB,UACrB,WAAY,CACV,CACE,KAAM,MACN,MAAO,GAAG,mBAAmB,cAK5B,CACL,QAAS,mBAAmB,QAC5B,YAAa,YACb,aAAY,IAAE,mBAAmB,gBAAY,MAAA,KAAA,OAAA,OAAA,GAAE,SAAQ,EACvD,OAAQ,mBAAmB,OAC3B,qBAAsB,UACtB,MAAO,mBAAmB,QA3JhC,QAAA,YAAA",
  "names": []
}
