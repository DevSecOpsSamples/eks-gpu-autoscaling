{
  "version": 3,
  "sources": ["call-rest-api.ts"],
  "sourcesContent": ["import * as apigateway from '../../../aws-apigateway';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { CallApiGatewayEndpointBase } from './base';\nimport { CallApiGatewayEndpointBaseProps } from './base-types';\n\n/**\n * Properties for calling an REST API Endpoint\n */\nexport interface CallApiGatewayRestApiEndpointProps extends CallApiGatewayEndpointBaseProps {\n  /**\n   * API to call\n   */\n  readonly api: apigateway.IRestApi;\n\n  /**\n   * Name of the stage where the API is deployed to in API Gateway\n   */\n  readonly stageName: string;\n}\n\n/**\n * Call REST API endpoint as a Task\n *\n * Be aware that the header values must be arrays. When passing the Task Token\n * in the headers field `WAIT_FOR_TASK_TOKEN` integration, use\n * `JsonPath.array()` to wrap the token in an array:\n *\n * ```ts\n * import * as apigateway from '@aws-cdk/aws-apigateway';\n * declare const api: apigateway.RestApi;\n *\n * new tasks.CallApiGatewayRestApiEndpoint(this, 'Endpoint', {\n *   api,\n *   stageName: 'Stage',\n *   method: tasks.HttpMethod.PUT,\n *   integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n *   headers: sfn.TaskInput.fromObject({\n *     TaskToken: sfn.JsonPath.array(sfn.JsonPath.taskToken),\n *   }),\n * });\n * ```\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-api-gateway.html\n */\nexport class CallApiGatewayRestApiEndpoint extends CallApiGatewayEndpointBase {\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig | undefined;\n  protected readonly taskPolicies?: iam.PolicyStatement[] | undefined;\n\n  protected readonly apiEndpoint: string;\n  protected readonly arnForExecuteApi: string;\n  protected readonly stageName?: string;\n\n  constructor(scope: Construct, id: string, private readonly props: CallApiGatewayRestApiEndpointProps) {\n    super(scope, id, props);\n\n    this.apiEndpoint = this.getApiEndpoint();\n    this.arnForExecuteApi = props.api.arnForExecuteApi(props.method, props.apiPath, props.stageName);\n    this.stageName = props.stageName;\n\n    this.taskPolicies = this.createPolicyStatements();\n  }\n\n  private getApiEndpoint(): string {\n    const apiStack = cdk.Stack.of(this.props.api);\n    return `${this.props.api.restApiId}.execute-api.${apiStack.region}.${apiStack.urlSuffix}`;\n  }\n}\n"],
  "mappings": "uOAGA,IAAA,QAAA,eAAA,EAEA,OAAA,QAAA,QAAA,EA0CA,MAAa,qCAAsC,QAAA,0BAA0B,CAQ3E,YAAY,MAAkB,GAA6B,MAAyC,CAClG,MAAM,MAAO,GAAI,KAAK,EADmC,KAAA,MAAA,4GAGzD,KAAK,YAAc,KAAK,eAAc,EACtC,KAAK,iBAAmB,MAAM,IAAI,iBAAiB,MAAM,OAAQ,MAAM,QAAS,MAAM,SAAS,EAC/F,KAAK,UAAY,MAAM,UAEvB,KAAK,aAAe,KAAK,uBAAsB,EAGzC,gBAAc,CACpB,KAAM,UAAW,IAAI,MAAM,GAAG,KAAK,MAAM,GAAG,EAC5C,MAAO,GAAG,KAAK,MAAM,IAAI,yBAAyB,SAAS,UAAU,SAAS,aApBlF,QAAA,8BAAA",
  "names": []
}
