{
  "version": 3,
  "sources": ["base.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\nimport { AuthType, CallApiGatewayEndpointBaseProps } from './base-types';\n\n/**\n * Base CallApiGatewayEndpoint Task\n * @internal\n */\nexport abstract class CallApiGatewayEndpointBase extends sfn.TaskStateBase {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  ];\n\n  private readonly baseProps: CallApiGatewayEndpointBaseProps;\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  protected abstract readonly apiEndpoint: string;\n  protected abstract readonly arnForExecuteApi: string;\n  protected abstract readonly stageName?: string;\n\n  constructor(scope: Construct, id: string, props: CallApiGatewayEndpointBaseProps) {\n    super(scope, id, props);\n\n    this.baseProps = props;\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n    validatePatternSupported(this.integrationPattern, CallApiGatewayEndpointBase.SUPPORTED_INTEGRATION_PATTERNS);\n\n    if (this.integrationPattern === sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN) {\n      if (!sfn.FieldUtils.containsTaskToken(this.baseProps.headers)) {\n        throw new Error('Task Token is required in `headers` for WAIT_FOR_TASK_TOKEN pattern. Use JsonPath.taskToken to set the token.');\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask() {\n    return {\n      Resource: integrationResourceArn('apigateway', 'invoke', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        ApiEndpoint: this.apiEndpoint,\n        Method: this.baseProps.method,\n        Headers: this.baseProps.headers?.value,\n        Stage: this.stageName,\n        Path: this.baseProps.apiPath,\n        QueryParameters: this.baseProps.queryParameters?.value,\n        RequestBody: this.baseProps.requestBody?.value,\n        AuthType: this.baseProps.authType ? this.baseProps.authType : 'NO_AUTH',\n      }),\n    };\n  }\n\n  protected createPolicyStatements(): iam.PolicyStatement[] {\n    if (this.baseProps.authType === AuthType.NO_AUTH) {\n      return [];\n    }\n\n    return [\n      new iam.PolicyStatement({\n        resources: [this.arnForExecuteApi],\n        actions: ['execute-api:Invoke'],\n      }),\n    ];\n  }\n}\n"],
  "mappings": "8GAAA,KAAA,KAAA,QAAA,kBAAA,EACA,IAAA,QAAA,4BAAA,EAEA,aAAA,QAAA,uBAAA,EACA,aAAA,QAAA,cAAA,EAMA,MAAsB,kCAAmC,KAAI,aAAa,CAaxE,YAAY,MAAkB,GAAY,MAAsC,QAC9E,MAAM,MAAO,GAAI,KAAK,EAMtB,GAJA,KAAK,UAAY,MACjB,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,mBAAmB,iBAC7E,aAAA,yBAAyB,KAAK,mBAAoB,2BAA2B,8BAA8B,EAEvG,KAAK,qBAAuB,IAAI,mBAAmB,qBACjD,CAAC,IAAI,WAAW,kBAAkB,KAAK,UAAU,OAAO,EAC1D,KAAM,IAAI,OAAM,+GAA+G,EAQ3H,aAAW,cACnB,MAAO,CACL,SAAU,aAAA,uBAAuB,aAAc,SAAU,KAAK,kBAAkB,EAChF,WAAY,IAAI,WAAW,aAAa,CACtC,YAAa,KAAK,YAClB,OAAQ,KAAK,UAAU,OACvB,QAAO,IAAE,KAAK,UAAU,WAAO,MAAA,KAAA,OAAA,OAAA,GAAE,MACjC,MAAO,KAAK,UACZ,KAAM,KAAK,UAAU,QACrB,gBAAe,IAAE,KAAK,UAAU,mBAAe,MAAA,KAAA,OAAA,OAAA,GAAE,MACjD,YAAW,IAAE,KAAK,UAAU,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,MACzC,SAAU,KAAK,UAAU,SAAW,KAAK,UAAU,SAAW,UAC/D,GAIK,wBAAsB,CAC9B,MAAI,MAAK,UAAU,WAAa,aAAA,SAAS,QAChC,CAAA,EAGF,CACL,GAAI,KAAI,gBAAgB,CACtB,UAAW,CAAC,KAAK,gBAAgB,EACjC,QAAS,CAAC,oBAAoB,EAC/B,IAvDP,QAAA,2BAAA,2BAC0B,2BAAA,+BAA2D,CACjF,IAAI,mBAAmB,iBACvB,IAAI,mBAAmB",
  "names": []
}
