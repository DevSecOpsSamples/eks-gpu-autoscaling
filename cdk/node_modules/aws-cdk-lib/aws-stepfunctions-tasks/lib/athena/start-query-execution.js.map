{
  "version": 3,
  "sources": ["start-query-execution.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as kms from '../../../aws-kms';\nimport * as s3 from '../../../aws-s3';\nimport * as sfn from '../../../aws-stepfunctions';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n/**\n * Properties for starting a Query Execution\n */\nexport interface AthenaStartQueryExecutionProps extends sfn.TaskStateBaseProps {\n  /**\n   * Query that will be started\n   */\n  readonly queryString: string;\n\n  /**\n   * Unique string string to ensure idempotence\n   *\n   * @default - No client request token\n   */\n  readonly clientRequestToken?: string;\n\n  /**\n   * Database within which query executes\n   *\n   * @default - No query execution context\n   */\n  readonly queryExecutionContext?: QueryExecutionContext;\n\n  /**\n   * Configuration on how and where to save query\n   *\n   * @default - No result configuration\n   */\n  readonly resultConfiguration?: ResultConfiguration;\n\n  /**\n   * Configuration on how and where to save query\n   *\n   * @default - No work group\n   */\n  readonly workGroup?: string;\n}\n\n/**\n * Start an Athena Query as a Task\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-athena.html\n */\nexport class AthenaStartQueryExecution extends sfn.TaskStateBase {\n\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.RUN_JOB,\n  ];\n\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: AthenaStartQueryExecutionProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n\n    validatePatternSupported(this.integrationPattern, AthenaStartQueryExecution.SUPPORTED_INTEGRATION_PATTERNS);\n\n    this.taskPolicies = this.createPolicyStatements();\n  }\n\n  private createPolicyStatements(): iam.PolicyStatement[] {\n    const policyStatements = [\n      new iam.PolicyStatement({\n        resources: [\n          cdk.Stack.of(this).formatArn({\n            service: 'athena',\n            resource: 'datacatalog',\n            resourceName: this.props.queryExecutionContext?.catalogName ?? 'AwsDataCatalog',\n          }),\n          cdk.Stack.of(this).formatArn({\n            service: 'athena',\n            resource: 'workgroup',\n            resourceName: this.props.workGroup ?? 'primary',\n          }),\n\n        ],\n        actions: ['athena:getDataCatalog', 'athena:startQueryExecution', 'athena:getQueryExecution'],\n      }),\n    ];\n\n    policyStatements.push(\n      new iam.PolicyStatement({\n        actions: ['s3:CreateBucket',\n          's3:ListBucket',\n          's3:GetBucketLocation',\n          's3:GetObject'],\n        resources: ['*'], // Need * permissions to create new output location https://docs.aws.amazon.com/athena/latest/ug/security-iam-athena.html\n      }),\n    );\n\n    policyStatements.push(\n      new iam.PolicyStatement({\n        actions: ['s3:AbortMultipartUpload',\n          's3:ListBucketMultipartUploads',\n          's3:ListMultipartUploadParts',\n          's3:PutObject'],\n        resources: [this.props.resultConfiguration?.outputLocation?.bucketName ? `arn:aws:s3:::${this.props.resultConfiguration?.outputLocation?.bucketName}/${this.props.resultConfiguration?.outputLocation?.objectKey}/*` : '*'], // Need S3 location where data is stored or Athena throws an Unable to verify/create output bucket https://docs.aws.amazon.com/athena/latest/ug/security-iam-athena.html\n      }),\n    );\n\n    policyStatements.push(\n      new iam.PolicyStatement({\n        actions: ['lakeformation:GetDataAccess'],\n        resources: ['*'], // State machines scoped to output location fail and * permissions are required as per documentation https://docs.aws.amazon.com/lake-formation/latest/dg/permissions-reference.html\n      }),\n    );\n\n    policyStatements.push(\n      new iam.PolicyStatement({\n        actions: ['glue:BatchCreatePartition',\n          'glue:BatchDeletePartition',\n          'glue:BatchDeleteTable',\n          'glue:BatchGetPartition',\n          'glue:CreateDatabase',\n          'glue:CreatePartition',\n          'glue:CreateTable',\n          'glue:DeleteDatabase',\n          'glue:DeletePartition',\n          'glue:DeleteTable',\n          'glue:GetDatabase',\n          'glue:GetDatabases',\n          'glue:GetPartition',\n          'glue:GetPartitions',\n          'glue:GetTable',\n          'glue:GetTables',\n          'glue:UpdateDatabase',\n          'glue:UpdatePartition',\n          'glue:UpdateTable'],\n        resources: [\n          cdk.Stack.of(this).formatArn({\n            service: 'glue',\n            resource: 'catalog',\n          }),\n          cdk.Stack.of(this).formatArn({\n            service: 'glue',\n            resource: 'database',\n            resourceName: this.props.queryExecutionContext?.databaseName ?? 'default',\n          }),\n          cdk.Stack.of(this).formatArn({\n            service: 'glue',\n            resource: 'table',\n            resourceName: (this.props.queryExecutionContext?.databaseName ?? 'default') + '/*', // grant access to all tables in the specified or default database to prevent cross database access https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awsglue.html\n          }),\n          cdk.Stack.of(this).formatArn({\n            service: 'glue',\n            resource: 'userDefinedFunction',\n            resourceName: (this.props.queryExecutionContext?.databaseName ?? 'default') + '/*', // grant access to get all user defined functions for the particular database in the request or the default database https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awsglue.html\n          }),\n        ],\n      }),\n    );\n\n    return policyStatements;\n  }\n\n  private renderEncryption(): any {\n    const encryptionConfiguration = this.props.resultConfiguration?.encryptionConfiguration !== undefined\n      ? {\n        EncryptionOption: this.props.resultConfiguration.encryptionConfiguration.encryptionOption,\n        KmsKey: this.props.resultConfiguration.encryptionConfiguration.encryptionKey,\n      }\n      : undefined;\n\n    return encryptionConfiguration;\n  }\n\n  /**\n   * Provides the Athena start query execution service integration task configuration\n   */\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('athena', 'startQueryExecution', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        QueryString: this.props.queryString,\n        ClientRequestToken: this.props.clientRequestToken,\n        QueryExecutionContext: (this.props.queryExecutionContext?.catalogName || this.props.queryExecutionContext?.databaseName) ? {\n          Catalog: this.props.queryExecutionContext?.catalogName,\n          Database: this.props.queryExecutionContext?.databaseName,\n        } : undefined,\n        ResultConfiguration: {\n          EncryptionConfiguration: this.renderEncryption(),\n          OutputLocation: this.props.resultConfiguration?.outputLocation ? `s3://${this.props.resultConfiguration.outputLocation.bucketName}/${this.props.resultConfiguration.outputLocation.objectKey}/` : undefined,\n        },\n        WorkGroup: this.props?.workGroup,\n      }),\n    };\n  }\n}\n\n/**\n * Location of query result along with S3 bucket configuration\n *\n * @see https://docs.aws.amazon.com/athena/latest/APIReference/API_ResultConfiguration.html\n */\nexport interface ResultConfiguration {\n\n  /**\n   * S3 path of query results\n   *\n   * Example value: `s3://query-results-bucket/folder/`\n   *\n   * @default - Query Result Location set in Athena settings for this workgroup\n  */\n  readonly outputLocation?: s3.Location;\n\n  /**\n   * Encryption option used if enabled in S3\n   *\n   * @default - SSE_S3 encrpytion is enabled with default encryption key\n   */\n  readonly encryptionConfiguration?: EncryptionConfiguration\n}\n\n/**\n * Encryption Configuration of the S3 bucket\n *\n * @see https://docs.aws.amazon.com/athena/latest/APIReference/API_EncryptionConfiguration.html\n */\nexport interface EncryptionConfiguration {\n\n  /**\n   * Type of S3 server-side encryption enabled\n   *\n   * @default EncryptionOption.S3_MANAGED\n   */\n  readonly encryptionOption: EncryptionOption;\n\n  /**\n   * KMS key ARN or ID\n   *\n   * @default - No KMS key for Encryption Option SSE_S3 and default master key for Encryption Option SSE_KMS and CSE_KMS\n   */\n  readonly encryptionKey?: kms.IKey;\n}\n\n/**\n * Encryption Options of the S3 bucket\n *\n * @see https://docs.aws.amazon.com/athena/latest/APIReference/API_EncryptionConfiguration.html#athena-Type-EncryptionConfiguration-EncryptionOption\n */\nexport enum EncryptionOption {\n  /**\n   * Server side encryption (SSE) with an Amazon S3-managed key.\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html\n   */\n  S3_MANAGED = 'SSE_S3',\n\n  /**\n   * Server-side encryption (SSE) with an AWS KMS key managed by the account owner.\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\n   */\n  KMS = 'SSE_KMS',\n\n  /**\n   * Client-side encryption (CSE) with an AWS KMS key managed by the account owner.\n   *\n   * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html\n   */\n  CLIENT_SIDE_KMS = 'CSE_KMS'\n}\n\n/**\n * Database and data catalog context in which the query execution occurs\n *\n * @see https://docs.aws.amazon.com/athena/latest/APIReference/API_QueryExecutionContext.html\n */\nexport interface QueryExecutionContext {\n\n  /**\n   * Name of catalog used in query execution\n   *\n   * @default - No catalog\n   */\n  readonly catalogName?: string;\n\n  /**\n   * Name of database used in query execution\n   *\n   * @default - No database\n   */\n  readonly databaseName?: string;\n}\n"],
  "mappings": "4PAAA,IAAA,QAAA,kBAAA,EAGA,IAAA,QAAA,4BAAA,EACA,IAAA,QAAA,eAAA,EAEA,aAAA,QAAA,uBAAA,EA6CA,MAAa,iCAAkC,KAAI,aAAa,CAY9D,YAAY,MAAkB,GAA6B,MAAqC,QAC9F,MAAM,MAAO,GAAI,KAAK,EADmC,KAAA,MAAA,wGAEzD,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,mBAAmB,iBAE7E,aAAA,yBAAyB,KAAK,mBAAoB,0BAA0B,8BAA8B,EAE1G,KAAK,aAAe,KAAK,uBAAsB,EAGzC,wBAAsB,kDAC5B,KAAM,kBAAmB,CACvB,GAAI,KAAI,gBAAgB,CACtB,UAAW,CACT,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAC3B,QAAS,SACT,SAAU,cACV,aAAY,IAAA,IAAE,KAAK,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,eAAW,MAAA,KAAA,OAAA,GAAI,iBAChE,EACD,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAC3B,QAAS,SACT,SAAU,YACV,aAAY,IAAE,KAAK,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,UACvC,GAGH,QAAS,CAAC,wBAAyB,6BAA8B,0BAA0B,EAC5F,GAGH,wBAAiB,KACf,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,kBACR,gBACA,uBACA,cAAc,EAChB,UAAW,CAAC,GAAG,EAChB,CAAC,EAGJ,iBAAiB,KACf,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,0BACR,gCACA,8BACA,cAAc,EAChB,UAAW,CAAC,MAAA,IAAA,KAAK,MAAM,uBAAmB,MAAA,KAAA,OAAA,OAAA,GAAE,kBAAc,MAAA,KAAA,SAAA,GAAE,WAAa,gBAAgB,IAAA,IAAA,KAAK,MAAM,uBAAmB,MAAA,KAAA,OAAA,OAAA,GAAE,kBAAc,MAAA,KAAA,OAAA,OAAA,GAAE,cAAc,IAAA,IAAA,KAAK,MAAM,uBAAmB,MAAA,KAAA,OAAA,OAAA,GAAE,kBAAc,MAAA,KAAA,OAAA,OAAA,GAAE,cAAgB,GAAG,EAC3N,CAAC,EAGJ,iBAAiB,KACf,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,6BAA6B,EACvC,UAAW,CAAC,GAAG,EAChB,CAAC,EAGJ,iBAAiB,KACf,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,4BACR,4BACA,wBACA,yBACA,sBACA,uBACA,mBACA,sBACA,uBACA,mBACA,mBACA,oBACA,oBACA,qBACA,gBACA,iBACA,sBACA,uBACA,kBAAkB,EACpB,UAAW,CACT,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAC3B,QAAS,OACT,SAAU,UACX,EACD,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAC3B,QAAS,OACT,SAAU,WACV,aAAY,IAAA,IAAE,KAAK,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,gBAAY,MAAA,KAAA,OAAA,GAAI,UACjE,EACD,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAC3B,QAAS,OACT,SAAU,QACV,aAAc,KAAA,IAAC,KAAK,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,gBAAY,MAAA,KAAA,OAAA,GAAI,WAAa,KAC/E,EACD,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAC3B,QAAS,OACT,SAAU,sBACV,aAAc,KAAA,IAAC,KAAK,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,gBAAY,MAAA,KAAA,OAAA,GAAI,WAAa,KAC/E,GAEJ,CAAC,EAGG,iBAGD,kBAAgB,QAQtB,MAPgC,KAAA,KAAK,MAAM,uBAAmB,MAAA,KAAA,OAAA,OAAA,GAAE,2BAA4B,OACxF,CACA,iBAAkB,KAAK,MAAM,oBAAoB,wBAAwB,iBACzE,OAAQ,KAAK,MAAM,oBAAoB,wBAAwB,eAE/D,OAWI,aAAW,uBACnB,MAAO,CACL,SAAU,aAAA,uBAAuB,SAAU,sBAAuB,KAAK,kBAAkB,EACzF,WAAY,IAAI,WAAW,aAAa,CACtC,YAAa,KAAK,MAAM,YACxB,mBAAoB,KAAK,MAAM,mBAC/B,sBAAwB,KAAA,KAAK,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,cAAW,KAAI,KAAK,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,cAAgB,CACzH,QAAO,IAAE,KAAK,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,YAC3C,SAAQ,IAAE,KAAK,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,cAC1C,OACJ,oBAAqB,CACnB,wBAAyB,KAAK,iBAAgB,EAC9C,eAAgB,MAAA,KAAK,MAAM,uBAAmB,MAAA,KAAA,SAAA,GAAE,eAAiB,QAAQ,KAAK,MAAM,oBAAoB,eAAe,cAAc,KAAK,MAAM,oBAAoB,eAAe,aAAe,QAEpM,UAAS,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,UACxB,IApJP,QAAA,0BAAA,qKAE0B,0BAAA,+BAA2D,CACjF,IAAI,mBAAmB,iBACvB,IAAI,mBAAmB,SAwM3B,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAM1B,kBAAA,WAAA,SAOA,kBAAA,IAAA,UAOA,kBAAA,gBAAA,SACF,GArBY,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,CAAA,EAAA",
  "names": []
}
