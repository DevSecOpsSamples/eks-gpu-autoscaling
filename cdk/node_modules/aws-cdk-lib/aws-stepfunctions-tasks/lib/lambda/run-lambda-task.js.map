{
  "version": 3,
  "sources": ["run-lambda-task.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as lambda from '../../../aws-lambda';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { getResourceArn } from '../resource-arn-suffix';\n\n/**\n * Properties for RunLambdaTask\n *\n * @deprecated Use `LambdaInvoke`\n */\nexport interface RunLambdaTaskProps {\n  /**\n   * The JSON that you want to provide to your Lambda function as input.\n   *\n   * @default - The state input (JSON path '$')\n   */\n  readonly payload?: sfn.TaskInput;\n\n  /**\n   * The service integration pattern indicates different ways to invoke Lambda function.\n   *\n   * The valid value for Lambda is either FIRE_AND_FORGET or WAIT_FOR_TASK_TOKEN,\n   * it determines whether to pause the workflow until a task token is returned.\n   *\n   * If this is set to WAIT_FOR_TASK_TOKEN, the JsonPath.taskToken value must be included\n   * somewhere in the payload and the Lambda must call\n   * `SendTaskSuccess/SendTaskFailure` using that token.\n   *\n   * @default FIRE_AND_FORGET\n   */\n  readonly integrationPattern?: sfn.ServiceIntegrationPattern;\n\n  /**\n   * Invocation type of the Lambda function\n   *\n   * @default RequestResponse\n   */\n  readonly invocationType?: InvocationType;\n\n  /**\n   * Client context to pass to the function\n   *\n   * @default - No context\n   */\n  readonly clientContext?: string;\n\n  /**\n   * Version or alias of the function to be invoked\n   *\n   * @default - No qualifier\n   * @deprecated pass a Version or Alias object as lambdaFunction instead\n   */\n  readonly qualifier?: string;\n}\n\n/**\n * Invoke a Lambda function as a Task\n *\n * OUTPUT: the output of this task is either the return value of Lambda's\n * Invoke call, or whatever the Lambda Function posted back using\n * `SendTaskSuccess/SendTaskFailure` in `waitForTaskToken` mode.\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-lambda.html\n * @deprecated Use `LambdaInvoke`\n */\nexport class RunLambdaTask implements sfn.IStepFunctionsTask {\n  private readonly integrationPattern: sfn.ServiceIntegrationPattern;\n\n  constructor(private readonly lambdaFunction: lambda.IFunction, private readonly props: RunLambdaTaskProps = {}) {\n    this.integrationPattern = props.integrationPattern || sfn.ServiceIntegrationPattern.FIRE_AND_FORGET;\n\n    const supportedPatterns = [\n      sfn.ServiceIntegrationPattern.FIRE_AND_FORGET,\n      sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    ];\n\n    if (!supportedPatterns.includes(this.integrationPattern)) {\n      throw new Error(`Invalid Service Integration Pattern: ${this.integrationPattern} is not supported to call Lambda.`);\n    }\n\n    if (this.integrationPattern === sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN\n        && !sfn.FieldUtils.containsTaskToken(props.payload)) {\n      throw new Error('Task Token is missing in payload (pass JsonPath.taskToken somewhere in payload)');\n    }\n  }\n\n  public bind(_task: sfn.Task): sfn.StepFunctionsTaskConfig {\n    return {\n      resourceArn: getResourceArn('lambda', 'invoke', this.integrationPattern),\n      policyStatements: [new iam.PolicyStatement({\n        resources: this.lambdaFunction.resourceArnsForGrantInvoke,\n        actions: ['lambda:InvokeFunction'],\n      })],\n      metricPrefixSingular: 'LambdaFunction',\n      metricPrefixPlural: 'LambdaFunctions',\n      metricDimensions: { LambdaFunctionArn: this.lambdaFunction.functionArn },\n      parameters: {\n        FunctionName: this.lambdaFunction.functionName,\n        Payload: this.props.payload ? this.props.payload.value : sfn.TaskInput.fromJsonPathAt('$').value,\n        InvocationType: this.props.invocationType,\n        ClientContext: this.props.clientContext,\n        Qualifier: this.props.qualifier,\n      },\n    };\n  }\n}\n\n/**\n * Invocation type of a Lambda\n * @deprecated use `LambdaInvocationType`\n */\nexport enum InvocationType {\n  /**\n   * Invoke synchronously\n   *\n   * The API response includes the function response and additional data.\n   */\n  REQUEST_RESPONSE = 'RequestResponse',\n\n  /**\n   * Invoke asynchronously\n   *\n   * Send events that fail multiple times to the function's dead-letter queue (if it's configured).\n   * The API response only includes a status code.\n   */\n  EVENT = 'Event',\n\n  /**\n   * TValidate parameter values and verify that the user or role has permission to invoke the function.\n   */\n  DRY_RUN = 'DryRun'\n}\n"],
  "mappings": "gLAAA,IAAA,QAAA,kBAAA,EAEA,IAAA,QAAA,4BAAA,EACA,sBAAA,QAAA,wBAAA,EA8DA,MAAa,aAAa,CAGxB,YAA6B,eAAmD,MAA4B,CAAA,EAAE,CAQ5G,GAR2B,KAAA,eAAA,eAAmD,KAAA,MAAA,MAC9E,KAAK,mBAAqB,MAAM,oBAAsB,IAAI,0BAA0B,gBAOhF,CAAC,AALqB,CACxB,IAAI,0BAA0B,gBAC9B,IAAI,0BAA0B,qBAGT,SAAS,KAAK,kBAAkB,EACrD,KAAM,IAAI,OAAM,wCAAwC,KAAK,qDAAqD,EAGpH,GAAI,KAAK,qBAAuB,IAAI,0BAA0B,qBACvD,CAAC,IAAI,WAAW,kBAAkB,MAAM,OAAO,EACpD,KAAM,IAAI,OAAM,iFAAiF,EAI9F,KAAK,MAAe,CACzB,MAAO,CACL,YAAa,sBAAA,eAAe,SAAU,SAAU,KAAK,kBAAkB,EACvE,iBAAkB,CAAC,GAAI,KAAI,gBAAgB,CACzC,UAAW,KAAK,eAAe,2BAC/B,QAAS,CAAC,uBAAuB,EAClC,CAAC,EACF,qBAAsB,iBACtB,mBAAoB,kBACpB,iBAAkB,CAAE,kBAAmB,KAAK,eAAe,WAAW,EACtE,WAAY,CACV,aAAc,KAAK,eAAe,aAClC,QAAS,KAAK,MAAM,QAAU,KAAK,MAAM,QAAQ,MAAQ,IAAI,UAAU,eAAe,GAAG,EAAE,MAC3F,eAAgB,KAAK,MAAM,eAC3B,cAAe,KAAK,MAAM,cAC1B,UAAW,KAAK,MAAM,aApC9B,QAAA,cAAA,iIA8CA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAMxB,gBAAA,iBAAA,kBAQA,gBAAA,MAAA,QAKA,gBAAA,QAAA,QACF,GApBY,eAAA,QAAA,gBAAA,SAAA,eAAc,CAAA,EAAA",
  "names": []
}
