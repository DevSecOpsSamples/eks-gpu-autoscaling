{
  "version": 3,
  "sources": ["invoke-function.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as lambda from '../../../aws-lambda';\nimport * as sfn from '../../../aws-stepfunctions';\n\n/**\n * Properties for InvokeFunction\n *\n * @deprecated use `LambdaInvoke`\n */\nexport interface InvokeFunctionProps {\n  /**\n   * The JSON that you want to provide to your Lambda function as input.\n   *\n   * This parameter is named as payload to keep consistent with RunLambdaTask class.\n   *\n   * @default - The JSON data indicated by the task's InputPath is used as payload\n   */\n  readonly payload?: { [key: string]: any };\n}\n\n/**\n * A Step Functions Task to invoke a Lambda function.\n *\n * The Lambda function Arn is defined as Resource in the state machine definition.\n *\n * OUTPUT: the output of this task is the return value of the Lambda Function.\n *\n * @deprecated Use `LambdaInvoke`\n */\nexport class InvokeFunction implements sfn.IStepFunctionsTask {\n  constructor(private readonly lambdaFunction: lambda.IFunction, private readonly props: InvokeFunctionProps = {}) {\n  }\n\n  public bind(_task: sfn.Task): sfn.StepFunctionsTaskConfig {\n    return {\n      resourceArn: this.lambdaFunction.functionArn,\n      policyStatements: [new iam.PolicyStatement({\n        resources: this.lambdaFunction.resourceArnsForGrantInvoke,\n        actions: ['lambda:InvokeFunction'],\n      })],\n      metricPrefixSingular: 'LambdaFunction',\n      metricPrefixPlural: 'LambdaFunctions',\n      metricDimensions: { LambdaFunctionArn: this.lambdaFunction.functionArn },\n      parameters: this.props.payload,\n    };\n  }\n}\n"],
  "mappings": "0JAAA,IAAA,QAAA,kBAAA,EA6BA,MAAa,cAAc,CACzB,YAA6B,eAAmD,MAA6B,CAAA,EAAE,CAAlF,KAAA,eAAA,eAAmD,KAAA,MAAA,MAGzE,KAAK,MAAe,CACzB,MAAO,CACL,YAAa,KAAK,eAAe,YACjC,iBAAkB,CAAC,GAAI,KAAI,gBAAgB,CACzC,UAAW,KAAK,eAAe,2BAC/B,QAAS,CAAC,uBAAuB,EAClC,CAAC,EACF,qBAAsB,iBACtB,mBAAoB,kBACpB,iBAAkB,CAAE,kBAAmB,KAAK,eAAe,WAAW,EACtE,WAAY,KAAK,MAAM,UAd7B,QAAA,eAAA",
  "names": []
}
