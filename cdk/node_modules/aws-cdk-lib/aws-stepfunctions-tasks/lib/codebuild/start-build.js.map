{
  "version": 3,
  "sources": ["start-build.ts"],
  "sourcesContent": ["import * as codebuild from '../../../aws-codebuild';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n/**\n * Properties for CodeBuildStartBuild\n */\nexport interface CodeBuildStartBuildProps extends sfn.TaskStateBaseProps {\n  /**\n   * CodeBuild project to start\n   */\n  readonly project: codebuild.IProject;\n  /**\n   * A set of environment variables to be used for this build only.\n   *\n   * @default - the latest environment variables already defined in the build project.\n   */\n  readonly environmentVariablesOverride?: { [name: string]: codebuild.BuildEnvironmentVariable };\n}\n\n/**\n * Start a CodeBuild Build as a task\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-codebuild.html\n */\nexport class CodeBuildStartBuild extends sfn.TaskStateBase {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.RUN_JOB,\n  ];\n\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: CodeBuildStartBuildProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n\n    validatePatternSupported(this.integrationPattern, CodeBuildStartBuild.SUPPORTED_INTEGRATION_PATTERNS);\n\n    this.taskMetrics = {\n      metricPrefixSingular: 'CodeBuildProject',\n      metricPrefixPlural: 'CodeBuildProjects',\n      metricDimensions: {\n        ProjectArn: this.props.project.projectArn,\n      },\n    };\n\n    this.taskPolicies = this.configurePolicyStatements();\n  }\n\n  private configurePolicyStatements(): iam.PolicyStatement[] {\n    let policyStatements = [\n      new iam.PolicyStatement({\n        resources: [this.props.project.projectArn],\n        actions: [\n          'codebuild:StartBuild',\n          'codebuild:StopBuild',\n          'codebuild:BatchGetBuilds',\n          'codebuild:BatchGetReports',\n        ],\n      }),\n    ];\n\n    if (this.integrationPattern === sfn.IntegrationPattern.RUN_JOB) {\n      policyStatements.push(\n        new iam.PolicyStatement({\n          actions: ['events:PutTargets', 'events:PutRule', 'events:DescribeRule'],\n          resources: [\n            cdk.Stack.of(this).formatArn({\n              service: 'events',\n              resource: 'rule/StepFunctionsGetEventForCodeBuildStartBuildRule',\n            }),\n          ],\n        }),\n      );\n    }\n\n    return policyStatements;\n  }\n\n  /**\n   * Provides the CodeBuild StartBuild service integration task configuration\n   */\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('codebuild', 'startBuild', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        ProjectName: this.props.project.projectName,\n        EnvironmentVariablesOverride: this.props.environmentVariablesOverride\n          ? this.serializeEnvVariables(this.props.environmentVariablesOverride)\n          : undefined,\n      }),\n    };\n  }\n\n  private serializeEnvVariables(environmentVariables: { [name: string]: codebuild.BuildEnvironmentVariable }) {\n    return Object.keys(environmentVariables).map(name => ({\n      Name: name,\n      Type: environmentVariables[name].type || codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      Value: environmentVariables[name].value,\n    }));\n  }\n}\n"],
  "mappings": "6NAAA,UAAA,QAAA,wBAAA,EACA,IAAA,QAAA,kBAAA,EACA,IAAA,QAAA,4BAAA,EACA,IAAA,QAAA,eAAA,EAEA,aAAA,QAAA,uBAAA,EAuBA,MAAa,2BAA4B,KAAI,aAAa,CAWxD,YAAY,MAAkB,GAA6B,MAA+B,QACxF,MAAM,MAAO,GAAI,KAAK,EADmC,KAAA,MAAA,kGAEzD,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,mBAAmB,iBAE7E,aAAA,yBAAyB,KAAK,mBAAoB,oBAAoB,8BAA8B,EAEpG,KAAK,YAAc,CACjB,qBAAsB,mBACtB,mBAAoB,oBACpB,iBAAkB,CAChB,WAAY,KAAK,MAAM,QAAQ,aAInC,KAAK,aAAe,KAAK,0BAAyB,EAG5C,2BAAyB,CAC/B,GAAI,kBAAmB,CACrB,GAAI,KAAI,gBAAgB,CACtB,UAAW,CAAC,KAAK,MAAM,QAAQ,UAAU,EACzC,QAAS,CACP,uBACA,sBACA,2BACA,6BAEH,GAGH,MAAI,MAAK,qBAAuB,IAAI,mBAAmB,SACrD,iBAAiB,KACf,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,oBAAqB,iBAAkB,qBAAqB,EACtE,UAAW,CACT,IAAI,MAAM,GAAG,IAAI,EAAE,UAAU,CAC3B,QAAS,SACT,SAAU,uDACX,GAEJ,CAAC,EAIC,iBASC,aAAW,CACnB,MAAO,CACL,SAAU,aAAA,uBAAuB,YAAa,aAAc,KAAK,kBAAkB,EACnF,WAAY,IAAI,WAAW,aAAa,CACtC,YAAa,KAAK,MAAM,QAAQ,YAChC,6BAA8B,KAAK,MAAM,6BACrC,KAAK,sBAAsB,KAAK,MAAM,4BAA4B,EAClE,OACL,GAIG,sBAAsB,qBAA4E,CACxG,MAAO,QAAO,KAAK,oBAAoB,EAAE,IAAI,MAAS,EACpD,KAAM,KACN,KAAM,qBAAqB,MAAM,MAAQ,UAAU,6BAA6B,UAChF,MAAO,qBAAqB,MAAM,OAClC,GAjFN,QAAA,oBAAA,mJAC0B,oBAAA,+BAA2D,CACjF,IAAI,mBAAmB,iBACvB,IAAI,mBAAmB",
  "names": []
}
