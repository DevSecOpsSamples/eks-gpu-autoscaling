{
  "version": 3,
  "sources": ["task-utils.ts"],
  "sourcesContent": ["import {\n  IntegrationPattern,\n} from '../../../aws-stepfunctions';\nimport { Aws } from '../../../core';\n\n/**\n * Verifies that a validation pattern is supported for a service integration\n *\n */\nexport function validatePatternSupported(integrationPattern: IntegrationPattern, supportedPatterns: IntegrationPattern[]) {\n  if (!supportedPatterns.includes(integrationPattern)) {\n    throw new Error(`Unsupported service integration pattern. Supported Patterns: ${supportedPatterns}. Received: ${integrationPattern}`);\n  }\n}\n\n/**\n * Suffixes corresponding to different service integration patterns\n *\n * Key is the service integration pattern, value is the resource ARN suffix.\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html\n */\nconst resourceArnSuffix: Record<IntegrationPattern, string> = {\n  [IntegrationPattern.REQUEST_RESPONSE]: '',\n  [IntegrationPattern.RUN_JOB]: '.sync',\n  [IntegrationPattern.WAIT_FOR_TASK_TOKEN]: '.waitForTaskToken',\n};\n\nexport function integrationResourceArn(service: string, api: string, integrationPattern?: IntegrationPattern): string {\n  if (!service || !api) {\n    throw new Error(\"Both 'service' and 'api' must be provided to build the resource ARN.\");\n  }\n  return `arn:${Aws.PARTITION}:states:::${service}:${api}` +\n        (integrationPattern ? resourceArnSuffix[integrationPattern] : '');\n}\n"],
  "mappings": "2IAAA,KAAA,qBAAA,QAAA,4BAAA,EAGA,OAAA,QAAA,eAAA,EAMA,kCAAyC,mBAAwC,kBAAuC,CACtH,GAAI,CAAC,kBAAkB,SAAS,kBAAkB,EAChD,KAAM,IAAI,OAAM,gEAAgE,gCAAgC,oBAAoB,CAExI,CAJA,QAAA,yBAAA,yBAaA,KAAM,mBAAwD,EAC3D,oBAAA,mBAAmB,kBAAmB,IACtC,oBAAA,mBAAmB,SAAU,SAC7B,oBAAA,mBAAmB,qBAAsB,qBAG5C,gCAAuC,QAAiB,IAAa,mBAAuC,CAC1G,GAAI,CAAC,SAAW,CAAC,IACf,KAAM,IAAI,OAAM,sEAAsE,EAExF,MAAO,OAAO,OAAA,IAAI,sBAAsB,WAAW,MAC5C,oBAAqB,kBAAkB,oBAAsB,GACtE,CANA,QAAA,uBAAA",
  "names": []
}
