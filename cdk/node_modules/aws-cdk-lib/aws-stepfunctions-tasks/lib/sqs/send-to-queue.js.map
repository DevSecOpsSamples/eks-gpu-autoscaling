{
  "version": 3,
  "sources": ["send-to-queue.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as sqs from '../../../aws-sqs';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Duration } from '../../../core';\nimport { getResourceArn } from '../resource-arn-suffix';\n\n/**\n * Properties for SendMessageTask\n *\n * @deprecated Use `SqsSendMessage`\n */\nexport interface SendToQueueProps {\n  /**\n   * The text message to send to the queue.\n   */\n  readonly messageBody: sfn.TaskInput;\n\n  /**\n   * The length of time, in seconds, for which to delay a specific message.\n   *\n   * Valid values are 0-900 seconds.\n   *\n   * @default Default value of the queue is used\n   */\n  readonly delay?: Duration;\n\n  /**\n   * The token used for deduplication of sent messages.\n   *\n   * @default Use content-based deduplication\n   */\n  readonly messageDeduplicationId?: string;\n\n  /**\n   * The tag that specifies that a message belongs to a specific message group.\n   *\n   * Required for FIFO queues. FIFO ordering applies to messages in the same message\n   * group.\n   *\n   * @default No group ID\n   */\n  readonly messageGroupId?: string;\n\n  /**\n   * The service integration pattern indicates different ways to call SendMessage to SQS.\n   *\n   * The valid value is either FIRE_AND_FORGET or WAIT_FOR_TASK_TOKEN.\n   *\n   * @default FIRE_AND_FORGET\n   */\n  readonly integrationPattern?: sfn.ServiceIntegrationPattern;\n}\n\n/**\n * A StepFunctions Task to send messages to SQS queue.\n *\n * A Function can be used directly as a Resource, but this class mirrors\n * integration with other AWS services via a specific class instance.\n *\n * @deprecated Use `SqsSendMessage`\n */\nexport class SendToQueue implements sfn.IStepFunctionsTask {\n\n  private readonly integrationPattern: sfn.ServiceIntegrationPattern;\n\n  constructor(private readonly queue: sqs.IQueue, private readonly props: SendToQueueProps) {\n    this.integrationPattern = props.integrationPattern || sfn.ServiceIntegrationPattern.FIRE_AND_FORGET;\n\n    const supportedPatterns = [\n      sfn.ServiceIntegrationPattern.FIRE_AND_FORGET,\n      sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    ];\n\n    if (!supportedPatterns.includes(this.integrationPattern)) {\n      throw new Error(`Invalid Service Integration Pattern: ${this.integrationPattern} is not supported to call SQS.`);\n    }\n\n    if (props.integrationPattern === sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN) {\n      if (!sfn.FieldUtils.containsTaskToken(props.messageBody)) {\n        throw new Error('Task Token is missing in messageBody (pass JsonPath.taskToken somewhere in messageBody)');\n      }\n    }\n  }\n\n  public bind(_task: sfn.Task): sfn.StepFunctionsTaskConfig {\n    return {\n      resourceArn: getResourceArn('sqs', 'sendMessage', this.integrationPattern),\n      policyStatements: [new iam.PolicyStatement({\n        actions: ['sqs:SendMessage'],\n        resources: [this.queue.queueArn],\n      })],\n      parameters: {\n        QueueUrl: this.queue.queueUrl,\n        MessageBody: this.props.messageBody.value,\n        DelaySeconds: this.props.delay && this.props.delay.toSeconds(),\n        MessageDeduplicationId: this.props.messageDeduplicationId,\n        MessageGroupId: this.props.messageGroupId,\n      },\n    };\n  }\n}\n"],
  "mappings": "uJAAA,IAAA,QAAA,kBAAA,EAEA,IAAA,QAAA,4BAAA,EAEA,sBAAA,QAAA,wBAAA,EAyDA,MAAa,WAAW,CAItB,YAA6B,MAAoC,MAAuB,CAQtF,GAR2B,KAAA,MAAA,MAAoC,KAAA,MAAA,MAC/D,KAAK,mBAAqB,MAAM,oBAAsB,IAAI,0BAA0B,gBAOhF,CAAC,AALqB,CACxB,IAAI,0BAA0B,gBAC9B,IAAI,0BAA0B,qBAGT,SAAS,KAAK,kBAAkB,EACrD,KAAM,IAAI,OAAM,wCAAwC,KAAK,kDAAkD,EAGjH,GAAI,MAAM,qBAAuB,IAAI,0BAA0B,qBACzD,CAAC,IAAI,WAAW,kBAAkB,MAAM,WAAW,EACrD,KAAM,IAAI,OAAM,yFAAyF,EAKxG,KAAK,MAAe,CACzB,MAAO,CACL,YAAa,sBAAA,eAAe,MAAO,cAAe,KAAK,kBAAkB,EACzE,iBAAkB,CAAC,GAAI,KAAI,gBAAgB,CACzC,QAAS,CAAC,iBAAiB,EAC3B,UAAW,CAAC,KAAK,MAAM,QAAQ,EAChC,CAAC,EACF,WAAY,CACV,SAAU,KAAK,MAAM,SACrB,YAAa,KAAK,MAAM,YAAY,MACpC,aAAc,KAAK,MAAM,OAAS,KAAK,MAAM,MAAM,UAAS,EAC5D,uBAAwB,KAAK,MAAM,uBACnC,eAAgB,KAAK,MAAM,kBAnCnC,QAAA,YAAA",
  "names": []
}
