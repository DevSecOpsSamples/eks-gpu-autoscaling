{
  "version": 3,
  "sources": ["publish.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as sns from '../../../aws-sns';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Token } from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n/**\n * The data type set for the SNS message attributes\n *\n * @see https://docs.aws.amazon.com/sns/latest/dg/sns-message-attributes.html#SNSMessageAttributes.DataTypes\n */\nexport enum MessageAttributeDataType {\n  /**\n   * Strings are Unicode with UTF-8 binary encoding\n   */\n  STRING = 'String',\n\n  /**\n   * An array, formatted as a string\n   *\n   * @see https://docs.aws.amazon.com/sns/latest/dg/sns-message-attributes.html#SNSMessageAttributes.DataTypes\n   */\n  STRING_ARRAY = 'String.Array',\n\n  /**\n   * Numbers are positive or negative integers or floating-point numbers\n   *\n   * @see https://docs.aws.amazon.com/sns/latest/dg/sns-message-attributes.html#SNSMessageAttributes.DataTypes\n   */\n  NUMBER = 'Number',\n\n  /**\n   * Binary type attributes can store any binary data\n   *\n   * @see https://docs.aws.amazon.com/sns/latest/dg/sns-message-attributes.html#SNSMessageAttributes.DataTypes\n   */\n  BINARY = 'Binary'\n}\n\n/**\n * A message attribute to add to the SNS message\n *\n * @see https://docs.aws.amazon.com/sns/latest/dg/sns-message-attributes.html\n */\nexport interface MessageAttribute {\n  /**\n   * The value of the attribute\n   */\n  readonly value: any;\n\n  /**\n   * The data type for the attribute\n   *\n   * @see https://docs.aws.amazon.com/sns/latest/dg/sns-message-attributes.html#SNSMessageAttributes.DataTypes\n   * @default determined by type inspection if possible, fallback is String\n   */\n  readonly dataType?: MessageAttributeDataType\n}\n\n/**\n * Properties for publishing a message to an SNS topic\n */\nexport interface SnsPublishProps extends sfn.TaskStateBaseProps {\n\n  /**\n   * The SNS topic that the task will publish to.\n   */\n  readonly topic: sns.ITopic;\n\n  /**\n   * The message you want to send.\n   *\n   * With the exception of SMS, messages must be UTF-8 encoded strings and\n   * at most 256 KB in size.\n   * For SMS, each message can contain up to 140 characters.\n   */\n  readonly message: sfn.TaskInput;\n\n  /**\n   * Add message attributes when publishing.\n   *\n   * These attributes carry additional metadata about the message and may be used\n   * for subscription filters.\n   *\n   * @see https://docs.aws.amazon.com/sns/latest/dg/sns-message-attributes.html\n   * @default {}\n   */\n  readonly messageAttributes?: { [key: string]: MessageAttribute };\n\n  /**\n   * Send different messages for each transport protocol.\n   *\n   * For example, you might want to send a shorter message to SMS subscribers\n   * and a more verbose message to email and SQS subscribers.\n   *\n   * Your message must be a JSON object with a top-level JSON key of\n   * \"default\" with a value that is a string\n   * You can define other top-level keys that define the message you want to\n   * send to a specific transport protocol (i.e. \"sqs\", \"email\", \"http\", etc)\n   *\n   * @see https://docs.aws.amazon.com/sns/latest/api/API_Publish.html#API_Publish_RequestParameters\n   * @default false\n   */\n  readonly messagePerSubscriptionType?: boolean;\n\n  /**\n   * Used as the \"Subject\" line when the message is delivered to email endpoints.\n   * This field will also be included, if present, in the standard JSON messages\n   * delivered to other endpoints.\n   *\n   * @default - No subject\n   */\n  readonly subject?: string;\n}\n\n/**\n * A Step Functions Task to publish messages to SNS topic.\n *\n */\nexport class SnsPublish extends sfn.TaskStateBase {\n\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  ];\n\n  protected readonly taskMetrics: sfn.TaskMetricsConfig | undefined;\n  protected readonly taskPolicies: iam.PolicyStatement[] | undefined;\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: SnsPublishProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n\n    validatePatternSupported(this.integrationPattern, SnsPublish.SUPPORTED_INTEGRATION_PATTERNS);\n\n    if (this.integrationPattern === sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN) {\n      if (!sfn.FieldUtils.containsTaskToken(props.message)) {\n        throw new Error('Task Token is required in `message` Use JsonPath.taskToken to set the token.');\n      }\n    }\n\n    this.taskPolicies = [\n      new iam.PolicyStatement({\n        actions: ['sns:Publish'],\n        resources: [this.props.topic.topicArn],\n      }),\n    ];\n  }\n\n  /**\n   * Provides the SNS Publish service integration task configuration\n   */\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('sns', 'publish', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        TopicArn: this.props.topic.topicArn,\n        Message: this.props.message.value,\n        MessageStructure: this.props.messagePerSubscriptionType ? 'json' : undefined,\n        MessageAttributes: renderMessageAttributes(this.props.messageAttributes),\n        Subject: this.props.subject,\n      }),\n    };\n  }\n}\n\ninterface MessageAttributeValue {\n  DataType: string;\n  StringValue?: string;\n  BinaryValue?: string;\n}\n\nfunction renderMessageAttributes(attributes?: { [key: string]: MessageAttribute }): any {\n  if (attributes === undefined) { return undefined; }\n  const renderedAttributes: { [key: string]: MessageAttributeValue } = {};\n  Object.entries(attributes).map(([key, val]) => {\n    renderedAttributes[key] = renderMessageAttributeValue(val);\n  });\n  return sfn.TaskInput.fromObject(renderedAttributes).value;\n}\n\nfunction renderMessageAttributeValue(attribute: MessageAttribute): MessageAttributeValue {\n  const dataType = attribute.dataType;\n  if (attribute.value instanceof sfn.TaskInput) {\n    return {\n      DataType: dataType ?? MessageAttributeDataType.STRING,\n      StringValue: dataType !== MessageAttributeDataType.BINARY ? attribute.value.value : undefined,\n      BinaryValue: dataType === MessageAttributeDataType.BINARY ? attribute.value.value : undefined,\n    };\n  }\n\n  if (dataType === MessageAttributeDataType.BINARY) {\n    return { DataType: dataType, BinaryValue: `${attribute.value}` };\n  }\n\n  if (Token.isUnresolved(attribute.value)) {\n    return { DataType: dataType ?? MessageAttributeDataType.STRING, StringValue: attribute.value };\n  }\n\n  validateMessageAttribute(attribute);\n  if (Array.isArray(attribute.value)) {\n    return { DataType: MessageAttributeDataType.STRING_ARRAY, StringValue: JSON.stringify(attribute.value) };\n  }\n  const value = attribute.value;\n  if (typeof value === 'number') {\n    return { DataType: MessageAttributeDataType.NUMBER, StringValue: `${value}` };\n  } else {\n    return { DataType: MessageAttributeDataType.STRING, StringValue: `${value}` };\n  }\n}\n\nfunction validateMessageAttribute(attribute: MessageAttribute): void {\n  const dataType = attribute.dataType;\n  const value = attribute.value;\n  if (dataType === undefined) {\n    return;\n  }\n  if (Array.isArray(value)) {\n    if (dataType !== MessageAttributeDataType.STRING_ARRAY) {\n      throw new Error(`Requested SNS message attribute type was ${dataType} but ${value} was of type Array`);\n    }\n    const validArrayTypes = ['string', 'boolean', 'number'];\n    value.forEach((v) => {\n      if (v !== null || !validArrayTypes.includes(typeof v)) {\n        throw new Error(`Requested SNS message attribute type was ${typeof value} but Array values must be one of ${validArrayTypes}`);\n      }\n    });\n    return;\n  }\n  const error = new Error(`Requested SNS message attribute type was ${dataType} but ${value} was of type ${typeof value}`);\n  switch (typeof value) {\n    case 'string':\n      // trust the user or will default to string\n      if (sfn.JsonPath.isEncodedJsonPath(attribute.value)) {\n        return;\n      }\n      if (dataType === MessageAttributeDataType.STRING ||\n        dataType === MessageAttributeDataType.BINARY) {\n        return;\n      }\n      throw error;\n    case 'number':\n      if (dataType === MessageAttributeDataType.NUMBER) { return; }\n      throw error;\n    case 'boolean':\n      if (dataType === MessageAttributeDataType.STRING) { return; }\n      throw error;\n    default:\n      throw error;\n  }\n}\n"],
  "mappings": "qPAAA,IAAA,QAAA,kBAAA,EAEA,IAAA,QAAA,4BAAA,EACA,OAAA,QAAA,eAAA,EAEA,aAAA,QAAA,uBAAA,EAOA,GAAY,0BAAZ,AAAA,UAAY,0BAAwB,CAIlC,0BAAA,OAAA,SAOA,0BAAA,aAAA,eAOA,0BAAA,OAAA,SAOA,0BAAA,OAAA,QACF,GA1BY,yBAAA,QAAA,0BAAA,SAAA,yBAAwB,CAAA,EAAA,EA4GpC,MAAa,kBAAmB,KAAI,aAAa,CAY/C,YAAY,MAAkB,GAA6B,MAAsB,QAC/E,MAAM,MAAO,GAAI,KAAK,EAKtB,GANyD,KAAA,MAAA,yFAEzD,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,mBAAmB,iBAE7E,aAAA,yBAAyB,KAAK,mBAAoB,WAAW,8BAA8B,EAEvF,KAAK,qBAAuB,IAAI,mBAAmB,qBACjD,CAAC,IAAI,WAAW,kBAAkB,MAAM,OAAO,EACjD,KAAM,IAAI,OAAM,8EAA8E,EAIlG,KAAK,aAAe,CAClB,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,aAAa,EACvB,UAAW,CAAC,KAAK,MAAM,MAAM,QAAQ,EACtC,GAUK,aAAW,CACnB,MAAO,CACL,SAAU,aAAA,uBAAuB,MAAO,UAAW,KAAK,kBAAkB,EAC1E,WAAY,IAAI,WAAW,aAAa,CACtC,SAAU,KAAK,MAAM,MAAM,SAC3B,QAAS,KAAK,MAAM,QAAQ,MAC5B,iBAAkB,KAAK,MAAM,2BAA6B,OAAS,OACnE,kBAAmB,wBAAwB,KAAK,MAAM,iBAAiB,EACvE,QAAS,KAAK,MAAM,QACrB,IA/CP,QAAA,WAAA,wHAE0B,WAAA,+BAA2D,CACjF,IAAI,mBAAmB,iBACvB,IAAI,mBAAmB,qBAsD3B,iCAAiC,WAAgD,CAC/E,GAAI,aAAe,OAAa,OAChC,KAAM,oBAA+D,CAAA,EACrE,cAAO,QAAQ,UAAU,EAAE,IAAI,CAAC,CAAC,IAAK,OAAQ,CAC5C,mBAAmB,KAAO,4BAA4B,GAAG,CAC3D,CAAC,EACM,IAAI,UAAU,WAAW,kBAAkB,EAAE,KACtD,CAEA,qCAAqC,UAA2B,CAC9D,KAAM,UAAW,UAAU,SAC3B,GAAI,UAAU,gBAAiB,KAAI,UACjC,MAAO,CACL,SAAU,UAAQ,KAAR,SAAY,yBAAyB,OAC/C,YAAa,WAAa,yBAAyB,OAAS,UAAU,MAAM,MAAQ,OACpF,YAAa,WAAa,yBAAyB,OAAS,UAAU,MAAM,MAAQ,QAIxF,GAAI,WAAa,yBAAyB,OACxC,MAAO,CAAE,SAAU,SAAU,YAAa,GAAG,UAAU,OAAO,EAGhE,GAAI,OAAA,MAAM,aAAa,UAAU,KAAK,EACpC,MAAO,CAAE,SAAU,UAAQ,KAAR,SAAY,yBAAyB,OAAQ,YAAa,UAAU,KAAK,EAI9F,GADA,yBAAyB,SAAS,EAC9B,MAAM,QAAQ,UAAU,KAAK,EAC/B,MAAO,CAAE,SAAU,yBAAyB,aAAc,YAAa,KAAK,UAAU,UAAU,KAAK,CAAC,EAExG,KAAM,OAAQ,UAAU,MACxB,MAAI,OAAO,QAAU,SACZ,CAAE,SAAU,yBAAyB,OAAQ,YAAa,GAAG,OAAO,EAEpE,CAAE,SAAU,yBAAyB,OAAQ,YAAa,GAAG,OAAO,CAE/E,CAEA,kCAAkC,UAA2B,CAC3D,KAAM,UAAW,UAAU,SACrB,MAAQ,UAAU,MACxB,GAAI,WAAa,OACf,OAEF,GAAI,MAAM,QAAQ,KAAK,EAAG,CACxB,GAAI,WAAa,yBAAyB,aACxC,KAAM,IAAI,OAAM,4CAA4C,gBAAgB,yBAAyB,EAEvG,KAAM,iBAAkB,CAAC,SAAU,UAAW,QAAQ,EACtD,MAAM,QAAQ,AAAC,GAAK,CAClB,GAAI,IAAM,MAAQ,CAAC,gBAAgB,SAAS,MAAO,EAAC,EAClD,KAAM,IAAI,OAAM,4CAA4C,MAAO,0CAAyC,iBAAiB,CAEjI,CAAC,EACD,OAEF,KAAM,OAAQ,GAAI,OAAM,4CAA4C,gBAAgB,qBAAqB,MAAO,QAAO,EACvH,OAAQ,MAAO,YACR,SAKH,GAHI,IAAI,SAAS,kBAAkB,UAAU,KAAK,GAG9C,WAAa,yBAAyB,QACxC,WAAa,yBAAyB,OACtC,OAEF,KAAM,WACH,SACH,GAAI,WAAa,yBAAyB,OAAU,OACpD,KAAM,WACH,UACH,GAAI,WAAa,yBAAyB,OAAU,OACpD,KAAM,eAEN,KAAM,OAEZ",
  "names": []
}
