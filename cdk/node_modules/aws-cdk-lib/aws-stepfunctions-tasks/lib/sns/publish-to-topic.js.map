{
  "version": 3,
  "sources": ["publish-to-topic.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as sns from '../../../aws-sns';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { getResourceArn } from '../resource-arn-suffix';\n\n/**\n * Properties for PublishTask\n *\n * @deprecated Use `SnsPublish`\n */\nexport interface PublishToTopicProps {\n  /**\n   * The text message to send to the topic.\n   */\n  readonly message: sfn.TaskInput;\n\n  /**\n   * If true, send a different message to every subscription type\n   *\n   * If this is set to true, message must be a JSON object with a\n   * \"default\" key and a key for every subscription type (such as \"sqs\",\n   * \"email\", etc.) The values are strings representing the messages\n   * being sent to every subscription type.\n   *\n   * @see https://docs.aws.amazon.com/sns/latest/api/API_Publish.html#API_Publish_RequestParameters\n   * @default false\n   */\n  readonly messagePerSubscriptionType?: boolean;\n\n  /**\n   * Used as the \"Subject\" line when the message is delivered to email endpoints.\n   * Also included, if present, in the standard JSON messages delivered to other endpoints.\n   *\n   * @default - No subject\n   */\n  readonly subject?: string;\n\n  /**\n   * The service integration pattern indicates different ways to call Publish to SNS.\n   *\n   * The valid value is either FIRE_AND_FORGET or WAIT_FOR_TASK_TOKEN.\n   *\n   * @default FIRE_AND_FORGET\n   */\n  readonly integrationPattern?: sfn.ServiceIntegrationPattern;\n}\n\n/**\n * A Step Functions Task to publish messages to SNS topic.\n *\n * A Function can be used directly as a Resource, but this class mirrors\n * integration with other AWS services via a specific class instance.\n *\n * @deprecated Use `SnsPublish`\n */\nexport class PublishToTopic implements sfn.IStepFunctionsTask {\n\n  private readonly integrationPattern: sfn.ServiceIntegrationPattern;\n\n  constructor(private readonly topic: sns.ITopic, private readonly props: PublishToTopicProps) {\n    this.integrationPattern = props.integrationPattern || sfn.ServiceIntegrationPattern.FIRE_AND_FORGET;\n\n    const supportedPatterns = [\n      sfn.ServiceIntegrationPattern.FIRE_AND_FORGET,\n      sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    ];\n\n    if (!supportedPatterns.includes(this.integrationPattern)) {\n      throw new Error(`Invalid Service Integration Pattern: ${this.integrationPattern} is not supported to call SNS.`);\n    }\n\n    if (this.integrationPattern === sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN) {\n      if (!sfn.FieldUtils.containsTaskToken(props.message)) {\n        throw new Error('Task Token is missing in message (pass JsonPath.taskToken somewhere in message)');\n      }\n    }\n  }\n\n  public bind(_task: sfn.Task): sfn.StepFunctionsTaskConfig {\n    return {\n      resourceArn: getResourceArn('sns', 'publish', this.integrationPattern),\n      policyStatements: [new iam.PolicyStatement({\n        actions: ['sns:Publish'],\n        resources: [this.topic.topicArn],\n      })],\n      parameters: {\n        TopicArn: this.topic.topicArn,\n        Message: this.props.message.value,\n        MessageStructure: this.props.messagePerSubscriptionType ? 'json' : undefined,\n        Subject: this.props.subject,\n      },\n    };\n  }\n}\n"],
  "mappings": "0JAAA,IAAA,QAAA,kBAAA,EAEA,IAAA,QAAA,4BAAA,EACA,sBAAA,QAAA,wBAAA,EAoDA,MAAa,cAAc,CAIzB,YAA6B,MAAoC,MAA0B,CAQzF,GAR2B,KAAA,MAAA,MAAoC,KAAA,MAAA,MAC/D,KAAK,mBAAqB,MAAM,oBAAsB,IAAI,0BAA0B,gBAOhF,CAAC,AALqB,CACxB,IAAI,0BAA0B,gBAC9B,IAAI,0BAA0B,qBAGT,SAAS,KAAK,kBAAkB,EACrD,KAAM,IAAI,OAAM,wCAAwC,KAAK,kDAAkD,EAGjH,GAAI,KAAK,qBAAuB,IAAI,0BAA0B,qBACxD,CAAC,IAAI,WAAW,kBAAkB,MAAM,OAAO,EACjD,KAAM,IAAI,OAAM,iFAAiF,EAKhG,KAAK,MAAe,CACzB,MAAO,CACL,YAAa,sBAAA,eAAe,MAAO,UAAW,KAAK,kBAAkB,EACrE,iBAAkB,CAAC,GAAI,KAAI,gBAAgB,CACzC,QAAS,CAAC,aAAa,EACvB,UAAW,CAAC,KAAK,MAAM,QAAQ,EAChC,CAAC,EACF,WAAY,CACV,SAAU,KAAK,MAAM,SACrB,QAAS,KAAK,MAAM,QAAQ,MAC5B,iBAAkB,KAAK,MAAM,2BAA6B,OAAS,OACnE,QAAS,KAAK,MAAM,WAlC5B,QAAA,eAAA",
  "names": []
}
