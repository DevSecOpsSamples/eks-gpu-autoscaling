{
  "version": 3,
  "sources": ["shared-types.ts"],
  "sourcesContent": ["import { transformAttributeValueMap, validateJsonPath } from './private/utils';\n\n/**\n * Determines the level of detail about provisioned throughput consumption that is returned.\n */\nexport enum DynamoConsumedCapacity {\n  /**\n   * The response includes the aggregate ConsumedCapacity for the operation,\n   * together with ConsumedCapacity for each table and secondary index that was accessed\n   */\n  INDEXES = 'INDEXES',\n\n  /**\n   * The response includes only the aggregate ConsumedCapacity for the operation.\n   */\n  TOTAL = 'TOTAL',\n\n  /**\n   * No ConsumedCapacity details are included in the response.\n   */\n  NONE = 'NONE',\n}\n\n/**\n * Determines whether item collection metrics are returned.\n */\nexport enum DynamoItemCollectionMetrics {\n  /**\n   * If set to SIZE, the response includes statistics about item collections,\n   * if any, that were modified during the operation.\n   */\n  SIZE = 'SIZE',\n\n  /**\n   * If set to NONE, no statistics are returned.\n   */\n  NONE = 'NONE',\n}\n\n/**\n * Use ReturnValues if you want to get the item attributes as they appear before or after they are changed\n */\nexport enum DynamoReturnValues {\n  /**\n   * Nothing is returned\n   */\n  NONE = 'NONE',\n\n  /**\n   * Returns all of the attributes of the item\n   */\n  ALL_OLD = 'ALL_OLD',\n\n  /**\n   * Returns only the updated attributes\n   */\n  UPDATED_OLD = 'UPDATED_OLD',\n\n  /**\n   * Returns all of the attributes of the item\n   */\n  ALL_NEW = 'ALL_NEW',\n\n  /**\n   * Returns only the updated attributes\n   */\n  UPDATED_NEW = 'UPDATED_NEW',\n}\n\n/**\n * Class to generate projection expression\n */\nexport class DynamoProjectionExpression {\n  private expression: string[] = [];\n\n  /**\n   * Adds the passed attribute to the chain\n   *\n   * @param attr Attribute name\n   */\n  public withAttribute(attr: string): DynamoProjectionExpression {\n    if (this.expression.length) {\n      this.expression.push(`.${attr}`);\n    } else {\n      this.expression.push(attr);\n    }\n    return this;\n  }\n\n  /**\n   * Adds the array literal access for passed index\n   *\n   * @param index array index\n   */\n  public atIndex(index: number): DynamoProjectionExpression {\n    if (!this.expression.length) {\n      throw new Error('Expression must start with an attribute');\n    }\n\n    this.expression.push(`[${index}]`);\n    return this;\n  }\n\n  /**\n   * converts and return the string expression\n   */\n  public toString(): string {\n    return this.expression.join('');\n  }\n}\n\n/**\n * Represents the data for an attribute.\n * Each attribute value is described as a name-value pair.\n * The name is the data type, and the value is the data itself.\n *\n * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html\n */\nexport class DynamoAttributeValue {\n  /**\n   * Sets an attribute of type String. For example:  \"S\": \"Hello\"\n   * Strings may be literal values or as JsonPath. Example values:\n   *\n   * - `DynamoAttributeValue.fromString('someValue')`\n   * - `DynamoAttributeValue.fromString(JsonPath.stringAt('$.bar'))`\n   */\n  public static fromString(value: string) {\n    return new DynamoAttributeValue({ S: value });\n  }\n\n  /**\n   * Sets a literal number. For example: 1234\n   * Numbers are sent across the network to DynamoDB as strings,\n   * to maximize compatibility across languages and libraries.\n   * However, DynamoDB treats them as number type attributes for mathematical operations.\n   */\n  public static fromNumber(value: number) {\n    return new DynamoAttributeValue({ N: value.toString() });\n  }\n\n  /**\n   * Sets an attribute of type Number. For example:  \"N\": \"123.45\"\n   * Numbers are sent across the network to DynamoDB as strings,\n   * to maximize compatibility across languages and libraries.\n   * However, DynamoDB treats them as number type attributes for mathematical operations.\n   *\n   * Numbers may be expressed as literal strings or as JsonPath\n   */\n  public static numberFromString(value: string) {\n    return new DynamoAttributeValue({ N: value.toString() });\n  }\n\n  /**\n   * Sets an attribute of type Binary. For example:  \"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n   *\n   * @param value base-64 encoded string\n   */\n  public static fromBinary(value: string) {\n    return new DynamoAttributeValue({ B: value });\n  }\n\n  /**\n   * Sets an attribute of type String Set. For example:  \"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n   */\n  public static fromStringSet(value: string[]) {\n    return new DynamoAttributeValue({ SS: value });\n  }\n\n  /**\n   * Sets an attribute of type Number Set. For example:  \"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n   * Numbers are sent across the network to DynamoDB as strings,\n   * to maximize compatibility across languages and libraries.\n   * However, DynamoDB treats them as number type attributes for mathematical operations.\n   */\n  public static fromNumberSet(value: number[]) {\n    return new DynamoAttributeValue({ NS: value.map(String) });\n  }\n\n  /**\n   * Sets an attribute of type Number Set. For example:  \"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n   * Numbers are sent across the network to DynamoDB as strings,\n   * to maximize compatibility across languages and libraries.\n   * However, DynamoDB treats them as number type attributes for mathematical operations.\n   *\n   * Numbers may be expressed as literal strings or as JsonPath\n   */\n  public static numberSetFromStrings(value: string[]) {\n    return new DynamoAttributeValue({ NS: value });\n  }\n\n  /**\n   * Sets an attribute of type Binary Set. For example:  \"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n   */\n  public static fromBinarySet(value: string[]) {\n    return new DynamoAttributeValue({ BS: value });\n  }\n\n  /**\n   * Sets an attribute of type Map. For example:  \"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n   */\n  public static fromMap(value: { [key: string]: DynamoAttributeValue }) {\n    return new DynamoAttributeValue({ M: transformAttributeValueMap(value) });\n  }\n\n  /**\n   * Sets an attribute of type Map. For example:  \"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n   *\n   * @param value Json path that specifies state input to be used\n   */\n  public static mapFromJsonPath(value: string) {\n    validateJsonPath(value);\n    return new DynamoAttributeValue({ 'M.$': value });\n  }\n\n  /**\n   * Sets an attribute of type List. For example:  \"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n   */\n  public static fromList(value: DynamoAttributeValue[]) {\n    return new DynamoAttributeValue({ L: value.map((val) => val.toObject()) });\n  }\n\n  /**\n   * Sets an attribute of type List. For example:  \"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"S\", \"Veggies\"}]\n   *\n   * @param value Json path that specifies state input to be used\n   */\n  public static listFromJsonPath(value: string) {\n    validateJsonPath(value);\n    return new DynamoAttributeValue({ L: value });\n  }\n\n  /**\n   * Sets an attribute of type Null. For example:  \"NULL\": true\n   */\n  public static fromNull(value: boolean) {\n    return new DynamoAttributeValue({ NULL: value });\n  }\n\n  /**\n   * Sets an attribute of type Boolean. For example:  \"BOOL\": true\n   */\n  public static fromBoolean(value: boolean) {\n    return new DynamoAttributeValue({ BOOL: value });\n  }\n\n  /**\n   * Sets an attribute of type Boolean from state input through Json path.\n   * For example:  \"BOOL\": true\n   *\n   * @param value Json path that specifies state input to be used\n   */\n  public static booleanFromJsonPath(value: string) {\n    validateJsonPath(value);\n    return new DynamoAttributeValue({ BOOL: value.toString() });\n  }\n\n  /**\n   * Represents the data for the attribute. Data can be\n   * i.e. \"S\": \"Hello\"\n   */\n  public readonly attributeValue: any;\n\n  private constructor(value: any) {\n    this.attributeValue = value;\n  }\n\n  /**\n   * Returns the DynamoDB attribute value\n   */\n  public toObject() {\n    return this.attributeValue;\n  }\n}\n"],
  "mappings": "oSAAA,QAAA,QAAA,iBAAA,EAKA,GAAY,wBAAZ,AAAA,UAAY,wBAAsB,CAKhC,wBAAA,QAAA,UAKA,wBAAA,MAAA,QAKA,wBAAA,KAAA,MACF,GAhBY,uBAAA,QAAA,wBAAA,SAAA,uBAAsB,CAAA,EAAA,EAqBlC,GAAY,6BAAZ,AAAA,UAAY,6BAA2B,CAKrC,6BAAA,KAAA,OAKA,6BAAA,KAAA,MACF,GAXY,4BAAA,QAAA,6BAAA,SAAA,4BAA2B,CAAA,EAAA,EAgBvC,GAAY,oBAAZ,AAAA,UAAY,oBAAkB,CAI5B,oBAAA,KAAA,OAKA,oBAAA,QAAA,UAKA,oBAAA,YAAA,cAKA,oBAAA,QAAA,UAKA,oBAAA,YAAA,aACF,GAzBY,mBAAA,QAAA,oBAAA,SAAA,mBAAkB,CAAA,EAAA,EA8B9B,MAAa,0BAA0B,CAAvC,aAAA,CACU,KAAA,WAAuB,CAAA,EAOxB,cAAc,KAAY,CAC/B,MAAI,MAAK,WAAW,OAClB,KAAK,WAAW,KAAK,IAAI,MAAM,EAE/B,KAAK,WAAW,KAAK,IAAI,EAEpB,KAQF,QAAQ,MAAa,CAC1B,GAAI,CAAC,KAAK,WAAW,OACnB,KAAM,IAAI,OAAM,yCAAyC,EAG3D,YAAK,WAAW,KAAK,IAAI,QAAQ,EAC1B,KAMF,UAAQ,CACb,MAAO,MAAK,WAAW,KAAK,EAAE,GAnClC,QAAA,2BAAA,wKA8CA,MAAa,oBAAoB,CAgJ/B,YAAoB,MAAU,CAC5B,KAAK,eAAiB,YAzIV,YAAW,MAAa,CACpC,MAAO,IAAI,sBAAqB,CAAE,EAAG,KAAK,CAAE,QAShC,YAAW,MAAa,CACpC,MAAO,IAAI,sBAAqB,CAAE,EAAG,MAAM,SAAQ,CAAE,CAAE,QAW3C,kBAAiB,MAAa,CAC1C,MAAO,IAAI,sBAAqB,CAAE,EAAG,MAAM,SAAQ,CAAE,CAAE,QAQ3C,YAAW,MAAa,CACpC,MAAO,IAAI,sBAAqB,CAAE,EAAG,KAAK,CAAE,QAMhC,eAAc,MAAe,CACzC,MAAO,IAAI,sBAAqB,CAAE,GAAI,KAAK,CAAE,QASjC,eAAc,MAAe,CACzC,MAAO,IAAI,sBAAqB,CAAE,GAAI,MAAM,IAAI,MAAM,CAAC,CAAE,QAW7C,sBAAqB,MAAe,CAChD,MAAO,IAAI,sBAAqB,CAAE,GAAI,KAAK,CAAE,QAMjC,eAAc,MAAe,CACzC,MAAO,IAAI,sBAAqB,CAAE,GAAI,KAAK,CAAE,QAMjC,SAAQ,MAA8C,CAClE,MAAO,IAAI,sBAAqB,CAAE,EAAG,QAAA,2BAA2B,KAAK,CAAC,CAAE,QAQ5D,iBAAgB,MAAa,CACzC,eAAA,iBAAiB,KAAK,EACf,GAAI,sBAAqB,CAAE,MAAO,KAAK,CAAE,QAMpC,UAAS,MAA6B,CAClD,MAAO,IAAI,sBAAqB,CAAE,EAAG,MAAM,IAAI,AAAC,KAAQ,IAAI,SAAQ,CAAE,CAAC,CAAE,QAQ7D,kBAAiB,MAAa,CAC1C,eAAA,iBAAiB,KAAK,EACf,GAAI,sBAAqB,CAAE,EAAG,KAAK,CAAE,QAMhC,UAAS,MAAc,CACnC,MAAO,IAAI,sBAAqB,CAAE,KAAM,KAAK,CAAE,QAMnC,aAAY,MAAc,CACtC,MAAO,IAAI,sBAAqB,CAAE,KAAM,KAAK,CAAE,QASnC,qBAAoB,MAAa,CAC7C,eAAA,iBAAiB,KAAK,EACf,GAAI,sBAAqB,CAAE,KAAM,MAAM,SAAQ,CAAE,CAAE,EAgBrD,UAAQ,CACb,MAAO,MAAK,gBAxJhB,QAAA,qBAAA",
  "names": []
}
