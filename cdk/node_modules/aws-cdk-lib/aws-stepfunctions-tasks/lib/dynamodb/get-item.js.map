{
  "version": 3,
  "sources": ["get-item.ts"],
  "sourcesContent": ["import * as ddb from '../../../aws-dynamodb';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Stack } from '../../../core';\nimport { Construct } from 'constructs';\nimport { DynamoMethod, getDynamoResourceArn, transformAttributeValueMap } from './private/utils';\nimport { DynamoAttributeValue, DynamoConsumedCapacity, DynamoProjectionExpression } from './shared-types';\n\n/**\n * Properties for DynamoGetItem Task\n */\nexport interface DynamoGetItemProps extends sfn.TaskStateBaseProps {\n  /**\n   * The name of the table containing the requested item.\n   */\n  readonly table: ddb.ITable;\n\n  /**\n   * Primary key of the item to retrieve.\n   *\n   * For the primary key, you must provide all of the attributes.\n   * For example, with a simple primary key, you only need to provide a value for the partition key.\n   * For a composite primary key, you must provide values for both the partition key and the sort key.\n   *\n   * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html#DDB-GetItem-request-Key\n   */\n  readonly key: { [key: string]: DynamoAttributeValue };\n\n  /**\n   * Determines the read consistency model:\n   * If set to true, then the operation uses strongly consistent reads;\n   * otherwise, the operation uses eventually consistent reads.\n   *\n   * @default false\n   */\n  readonly consistentRead?: boolean;\n\n  /**\n   * One or more substitution tokens for attribute names in an expression\n   *\n   * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html#DDB-GetItem-request-ExpressionAttributeNames\n   *\n   * @default - No expression attributes\n   */\n  readonly expressionAttributeNames?: { [key: string]: string };\n\n  /**\n   * An array of DynamoProjectionExpression that identifies one or more attributes to retrieve from the table.\n   * These attributes can include scalars, sets, or elements of a JSON document.\n   *\n   * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html#DDB-GetItem-request-ProjectionExpression\n   *\n   * @default - No projection expression\n   */\n  readonly projectionExpression?: DynamoProjectionExpression[];\n\n  /**\n   * Determines the level of detail about provisioned throughput consumption that is returned in the response\n   *\n   * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html#DDB-GetItem-request-ReturnConsumedCapacity\n   *\n   * @default DynamoConsumedCapacity.NONE\n   */\n  readonly returnConsumedCapacity?: DynamoConsumedCapacity;\n}\n\n/**\n * A StepFunctions task to call DynamoGetItem\n */\nexport class DynamoGetItem extends sfn.TaskStateBase {\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  constructor(scope: Construct, id: string, private readonly props: DynamoGetItemProps) {\n    super(scope, id, props);\n\n    this.taskPolicies = [\n      new iam.PolicyStatement({\n        resources: [\n          Stack.of(this).formatArn({\n            service: 'dynamodb',\n            resource: 'table',\n            resourceName: props.table.tableName,\n          }),\n        ],\n        actions: [`dynamodb:${DynamoMethod.GET}Item`],\n      }),\n    ];\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: getDynamoResourceArn(DynamoMethod.GET),\n      Parameters: sfn.FieldUtils.renderObject({\n        Key: transformAttributeValueMap(this.props.key),\n        TableName: this.props.table.tableName,\n        ConsistentRead: this.props.consistentRead ?? false,\n        ExpressionAttributeNames: this.props.expressionAttributeNames,\n        ProjectionExpression: this.configureProjectionExpression(this.props.projectionExpression),\n        ReturnConsumedCapacity: this.props.returnConsumedCapacity,\n      }),\n    };\n  }\n\n  private configureProjectionExpression(expressions?: DynamoProjectionExpression[]): string | undefined {\n    return expressions ? expressions.map((expression) => expression.toString()).join(',') : undefined;\n  }\n}\n"],
  "mappings": "uNACA,IAAA,QAAA,kBAAA,EACA,IAAA,QAAA,4BAAA,EACA,OAAA,QAAA,eAAA,EAEA,QAAA,QAAA,iBAAA,EAgEA,MAAa,qBAAsB,KAAI,aAAa,CAIlD,YAAY,MAAkB,GAA6B,MAAyB,CAClF,MAAM,MAAO,GAAI,KAAK,EADmC,KAAA,MAAA,4FAGzD,KAAK,aAAe,CAClB,GAAI,KAAI,gBAAgB,CACtB,UAAW,CACT,OAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CACvB,QAAS,WACT,SAAU,QACV,aAAc,MAAM,MAAM,UAC3B,GAEH,QAAS,CAAC,YAAY,QAAA,aAAa,SAAS,EAC7C,GAOK,aAAW,QACnB,MAAO,CACL,SAAU,QAAA,qBAAqB,QAAA,aAAa,GAAG,EAC/C,WAAY,IAAI,WAAW,aAAa,CACtC,IAAK,QAAA,2BAA2B,KAAK,MAAM,GAAG,EAC9C,UAAW,KAAK,MAAM,MAAM,UAC5B,eAAc,IAAE,KAAK,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,GAC7C,yBAA0B,KAAK,MAAM,yBACrC,qBAAsB,KAAK,8BAA8B,KAAK,MAAM,oBAAoB,EACxF,uBAAwB,KAAK,MAAM,uBACpC,GAIG,8BAA8B,YAA0C,CAC9E,MAAO,aAAc,YAAY,IAAI,AAAC,YAAe,WAAW,SAAQ,CAAE,EAAE,KAAK,GAAG,EAAI,QAvC5F,QAAA,cAAA",
  "names": []
}
