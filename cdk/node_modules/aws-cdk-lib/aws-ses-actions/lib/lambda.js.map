{
  "version": 3,
  "sources": ["lambda.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as lambda from '../../aws-lambda';\nimport * as ses from '../../aws-ses';\nimport * as sns from '../../aws-sns';\nimport * as cdk from '../../core';\n\n/**\n * The type of invocation to use for a Lambda Action.\n */\nexport enum LambdaInvocationType {\n  /**\n   * The function will be invoked asynchronously.\n   */\n  EVENT = 'Event',\n\n  /**\n   * The function will be invoked sychronously. Use RequestResponse only when\n   * you want to make a mail flow decision, such as whether to stop the receipt\n   * rule or the receipt rule set.\n   */\n  REQUEST_RESPONSE = 'RequestResponse',\n}\n\n/**\n * Construction properties for a Lambda action.\n */\nexport interface LambdaProps {\n  /**\n   * The Lambda function to invoke.\n   */\n  readonly function: lambda.IFunction\n\n  /**\n   * The invocation type of the Lambda function.\n   *\n   * @default Event\n   */\n  readonly invocationType?: LambdaInvocationType;\n\n  /**\n   * The SNS topic to notify when the Lambda action is taken.\n   *\n   * @default no notification\n   */\n  readonly topic?: sns.ITopic;\n}\n\n/**\n * Calls an AWS Lambda function, and optionally, publishes a notification to\n * Amazon SNS.\n */\nexport class Lambda implements ses.IReceiptRuleAction {\n  constructor(private readonly props: LambdaProps) {\n  }\n\n  public bind(rule: ses.IReceiptRule): ses.ReceiptRuleActionConfig {\n    // Allow SES to invoke Lambda function\n    // See https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html#receiving-email-permissions-lambda\n    const permissionId = 'AllowSes';\n    if (!this.props.function.permissionsNode.tryFindChild(permissionId)) {\n      this.props.function.addPermission(permissionId, {\n        action: 'lambda:InvokeFunction',\n        principal: new iam.ServicePrincipal('ses.amazonaws.com'),\n        sourceAccount: cdk.Aws.ACCOUNT_ID,\n      });\n    }\n\n    // Ensure permission is deployed before rule\n    const permission = this.props.function.permissionsNode.tryFindChild(permissionId) as lambda.CfnPermission;\n    if (permission) { // The Lambda could be imported\n      rule.node.addDependency(permission);\n    } else {\n      // eslint-disable-next-line max-len\n      cdk.Annotations.of(rule).addWarning('This rule is using a Lambda action with an imported function. Ensure permission is given to SES to invoke that function.');\n    }\n\n    return {\n      lambdaAction: {\n        functionArn: this.props.function.functionArn,\n        invocationType: this.props.invocationType,\n        topicArn: this.props.topic?.topicArn,\n      },\n    };\n  }\n}\n"],
  "mappings": "0OAAA,IAAA,QAAA,eAAA,EAIA,IAAA,QAAA,YAAA,EAKA,GAAY,sBAAZ,AAAA,UAAY,sBAAoB,CAI9B,sBAAA,MAAA,QAOA,sBAAA,iBAAA,iBACF,GAZY,qBAAA,QAAA,sBAAA,SAAA,qBAAoB,CAAA,EAAA,EA0ChC,MAAa,MAAM,CACjB,YAA6B,MAAkB,CAAlB,KAAA,MAAA,6EAGtB,KAAK,KAAsB,uEAGhC,KAAM,cAAe,WACrB,AAAK,KAAK,MAAM,SAAS,gBAAgB,aAAa,YAAY,GAChE,KAAK,MAAM,SAAS,cAAc,aAAc,CAC9C,OAAQ,wBACR,UAAW,GAAI,KAAI,iBAAiB,mBAAmB,EACvD,cAAe,IAAI,IAAI,WACxB,EAIH,KAAM,YAAa,KAAK,MAAM,SAAS,gBAAgB,aAAa,YAAY,EAChF,MAAI,YACF,KAAK,KAAK,cAAc,UAAU,EAGlC,IAAI,YAAY,GAAG,IAAI,EAAE,WAAW,0HAA0H,EAGzJ,CACL,aAAc,CACZ,YAAa,KAAK,MAAM,SAAS,YACjC,eAAgB,KAAK,MAAM,eAC3B,SAAQ,IAAE,KAAK,MAAM,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,YA7BpC,QAAA,OAAA",
  "names": []
}
