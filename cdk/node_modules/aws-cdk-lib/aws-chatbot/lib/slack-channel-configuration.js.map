{
  "version": 3,
  "sources": ["slack-channel-configuration.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport * as notifications from '../../aws-codestarnotifications';\nimport * as iam from '../../aws-iam';\nimport * as logs from '../../aws-logs';\nimport * as sns from '../../aws-sns';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnSlackChannelConfiguration } from './chatbot.generated';\n\n/**\n * Properties for a new Slack channel configuration\n */\nexport interface SlackChannelConfigurationProps {\n\n  /**\n   * The name of Slack channel configuration\n   */\n  readonly slackChannelConfigurationName: string;\n\n  /**\n   * The permission role of Slack channel configuration\n   *\n   * @default - A role will be created.\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * The ID of the Slack workspace authorized with AWS Chatbot.\n   *\n   * To get the workspace ID, you must perform the initial authorization flow with Slack in the AWS Chatbot console.\n   * Then you can copy and paste the workspace ID from the console.\n   * For more details, see steps 1-4 in Setting Up AWS Chatbot with Slack in the AWS Chatbot User Guide.\n   * @see https://docs.aws.amazon.com/chatbot/latest/adminguide/setting-up.html#Setup_intro\n   */\n  readonly slackWorkspaceId: string;\n\n  /**\n   * The ID of the Slack channel.\n   *\n   * To get the ID, open Slack, right click on the channel name in the left pane, then choose Copy Link.\n   * The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.\n   */\n  readonly slackChannelId: string;\n\n  /**\n   * The SNS topics that deliver notifications to AWS Chatbot.\n   *\n   * @default None\n   */\n  readonly notificationTopics?: sns.ITopic[];\n\n  /**\n   * Specifies the logging level for this configuration.\n   * This property affects the log entries pushed to Amazon CloudWatch Logs.\n   *\n   * @default LoggingLevel.NONE\n   */\n  readonly loggingLevel?: LoggingLevel;\n\n  /**\n   * The number of days log events are kept in CloudWatch Logs. When updating\n   * this property, unsetting it doesn't remove the log retention policy. To\n   * remove the retention policy, set the value to `INFINITE`.\n   *\n   * @default logs.RetentionDays.INFINITE\n   */\n  readonly logRetention?: logs.RetentionDays;\n\n  /**\n   * The IAM role for the Lambda function associated with the custom resource\n   * that sets the retention policy.\n   *\n   * @default - A new role is created.\n   */\n  readonly logRetentionRole?: iam.IRole;\n\n  /**\n   * When log retention is specified, a custom resource attempts to create the CloudWatch log group.\n   * These options control the retry policy when interacting with CloudWatch APIs.\n   *\n   * @default - Default AWS SDK retry options.\n   */\n  readonly logRetentionRetryOptions?: logs.LogRetentionRetryOptions;\n}\n\n/**\n * Logging levels include ERROR, INFO, or NONE.\n */\nexport enum LoggingLevel {\n  /**\n   * ERROR\n   */\n  ERROR = 'ERROR',\n\n  /**\n   * INFO\n   */\n  INFO = 'INFO',\n\n  /**\n   * NONE\n   */\n  NONE = 'NONE',\n}\n\n/**\n * Represents a Slack channel configuration\n */\nexport interface ISlackChannelConfiguration extends cdk.IResource, iam.IGrantable, notifications.INotificationRuleTarget {\n\n  /**\n   * The ARN of the Slack channel configuration\n   * In the form of arn:aws:chatbot:{region}:{account}:chat-configuration/slack-channel/{slackChannelName}\n   * @attribute\n   */\n  readonly slackChannelConfigurationArn: string;\n\n  /**\n   * The name of Slack channel configuration\n   * @attribute\n   */\n  readonly slackChannelConfigurationName: string;\n\n  /**\n   * The permission role of Slack channel configuration\n   * @attribute\n   *\n   * @default - A role will be created.\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * Adds a statement to the IAM role.\n   */\n  addToRolePolicy(statement: iam.PolicyStatement): void;\n\n  /**\n   * Return the given named metric for this SlackChannelConfiguration\n   */\n  metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n}\n\n/**\n * Either a new or imported Slack channel configuration\n */\nabstract class SlackChannelConfigurationBase extends cdk.Resource implements ISlackChannelConfiguration {\n  abstract readonly slackChannelConfigurationArn: string;\n\n  abstract readonly slackChannelConfigurationName: string;\n\n  abstract readonly grantPrincipal: iam.IPrincipal;\n\n  abstract readonly role?: iam.IRole;\n\n  /**\n   * Adds extra permission to iam-role of Slack channel configuration\n   * @param statement\n   */\n  public addToRolePolicy(statement: iam.PolicyStatement): void {\n    if (!this.role) {\n      return;\n    }\n\n    this.role.addToPrincipalPolicy(statement);\n  }\n\n  /**\n   * Return the given named metric for this SlackChannelConfiguration\n   */\n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    // AWS Chatbot publishes metrics to us-east-1 regardless of stack region\n    // https://docs.aws.amazon.com/chatbot/latest/adminguide/monitoring-cloudwatch.html\n    return new cloudwatch.Metric({\n      namespace: 'AWS/Chatbot',\n      region: 'us-east-1',\n      dimensionsMap: {\n        ConfigurationName: this.slackChannelConfigurationName,\n      },\n      metricName,\n      ...props,\n    });\n  }\n\n  public bindAsNotificationRuleTarget(_scope: Construct): notifications.NotificationRuleTargetConfig {\n    return {\n      targetType: 'AWSChatbotSlack',\n      targetAddress: this.slackChannelConfigurationArn,\n    };\n  }\n}\n\n/**\n * A new Slack channel configuration\n */\nexport class SlackChannelConfiguration extends SlackChannelConfigurationBase {\n\n  /**\n   * Import an existing Slack channel configuration provided an ARN\n   * @param scope The parent creating construct\n   * @param id The construct's name\n   * @param slackChannelConfigurationArn configuration ARN (i.e. arn:aws:chatbot::1234567890:chat-configuration/slack-channel/my-slack)\n   *\n   * @returns a reference to the existing Slack channel configuration\n   */\n  public static fromSlackChannelConfigurationArn(scope: Construct, id: string, slackChannelConfigurationArn: string): ISlackChannelConfiguration {\n    const re = /^slack-channel\\//;\n    const resourceName = cdk.Arn.extractResourceName(slackChannelConfigurationArn, 'chat-configuration');\n\n    if (!cdk.Token.isUnresolved(slackChannelConfigurationArn) && !re.test(resourceName)) {\n      throw new Error('The ARN of a Slack integration must be in the form: arn:aws:chatbot:{region}:{account}:chat-configuration/slack-channel/{slackChannelName}');\n    }\n\n    class Import extends SlackChannelConfigurationBase {\n\n      /**\n       * @attribute\n       */\n      readonly slackChannelConfigurationArn = slackChannelConfigurationArn;\n      readonly role?: iam.IRole = undefined;\n      readonly grantPrincipal: iam.IPrincipal;\n\n      /**\n       * Returns a name of Slack channel configuration\n       *\n       * NOTE:\n       * For example: arn:aws:chatbot::1234567890:chat-configuration/slack-channel/my-slack\n       * The ArnComponents API will return `slack-channel/my-slack`\n       * It need to handle that to gets a correct name.`my-slack`\n       */\n      readonly slackChannelConfigurationName: string;\n\n      constructor(s: Construct, i: string) {\n        super(s, i);\n        this.grantPrincipal = new iam.UnknownPrincipal({ resource: this });\n\n        // handle slackChannelConfigurationName as specified above\n        if (cdk.Token.isUnresolved(slackChannelConfigurationArn)) {\n          this.slackChannelConfigurationName = cdk.Fn.select(1, cdk.Fn.split('slack-channel/', resourceName));\n        } else {\n          this.slackChannelConfigurationName = resourceName.substring('slack-channel/'.length);\n        }\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * Return the given named metric for All SlackChannelConfigurations\n   */\n  public static metricAll(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    // AWS Chatbot publishes metrics to us-east-1 regardless of stack region\n    // https://docs.aws.amazon.com/chatbot/latest/adminguide/monitoring-cloudwatch.html\n    return new cloudwatch.Metric({\n      namespace: 'AWS/Chatbot',\n      region: 'us-east-1',\n      metricName,\n      ...props,\n    });\n  }\n\n  readonly slackChannelConfigurationArn: string;\n\n  readonly slackChannelConfigurationName: string;\n\n  readonly role?: iam.IRole;\n\n  readonly grantPrincipal: iam.IPrincipal;\n\n  /**\n   * The SNS topic that deliver notifications to AWS Chatbot.\n   * @attribute\n   */\n  private readonly notificationTopics: sns.ITopic[];\n\n  constructor(scope: Construct, id: string, props: SlackChannelConfigurationProps) {\n    super(scope, id, {\n      physicalName: props.slackChannelConfigurationName,\n    });\n\n    this.role = props.role || new iam.Role(this, 'ConfigurationRole', {\n      assumedBy: new iam.ServicePrincipal('chatbot.amazonaws.com'),\n    });\n\n    this.grantPrincipal = this.role;\n\n    this.notificationTopics = props.notificationTopics ?? [];\n\n    const configuration = new CfnSlackChannelConfiguration(this, 'Resource', {\n      configurationName: props.slackChannelConfigurationName,\n      iamRoleArn: this.role.roleArn,\n      slackWorkspaceId: props.slackWorkspaceId,\n      slackChannelId: props.slackChannelId,\n      snsTopicArns: cdk.Lazy.list({ produce: () => this.notificationTopics.map(topic => topic.topicArn) }, { omitEmpty: true } ),\n      loggingLevel: props.loggingLevel?.toString(),\n    });\n\n    // Log retention\n    // AWS Chatbot publishes logs to us-east-1 regardless of stack region https://docs.aws.amazon.com/chatbot/latest/adminguide/cloudwatch-logs.html\n    if (props.logRetention) {\n      new logs.LogRetention(this, 'LogRetention', {\n        logGroupName: `/aws/chatbot/${props.slackChannelConfigurationName}`,\n        retention: props.logRetention,\n        role: props.logRetentionRole,\n        logGroupRegion: 'us-east-1',\n        logRetentionRetryOptions: props.logRetentionRetryOptions,\n      });\n    }\n\n    this.slackChannelConfigurationArn = configuration.ref;\n    this.slackChannelConfigurationName = props.slackChannelConfigurationName;\n  }\n\n  /**\n   * Adds a SNS topic that deliver notifications to AWS Chatbot.\n   * @param notificationTopic\n   */\n  public addNotificationTopic(notificationTopic: sns.ITopic): void {\n    this.notificationTopics.push(notificationTopic);\n  }\n}\n\n"],
  "mappings": "qPAAA,WAAA,QAAA,sBAAA,EAEA,IAAA,QAAA,eAAA,EACA,KAAA,QAAA,gBAAA,EAEA,IAAA,QAAA,YAAA,EAEA,oBAAA,QAAA,qBAAA,EAiFA,GAAY,cAAZ,AAAA,UAAY,cAAY,CAItB,cAAA,MAAA,QAKA,cAAA,KAAA,OAKA,cAAA,KAAA,MACF,GAfY,aAAA,QAAA,cAAA,SAAA,aAAY,CAAA,EAAA,EAyDxB,MAAe,qCAAsC,KAAI,QAAQ,CAaxD,gBAAgB,UAA8B,CACnD,AAAI,CAAC,KAAK,MAIV,KAAK,KAAK,qBAAqB,SAAS,EAMnC,OAAO,WAAoB,MAAgC,CAGhE,MAAO,IAAI,YAAW,OAAO,CAC3B,UAAW,cACX,OAAQ,YACR,cAAe,CACb,kBAAmB,KAAK,+BAE1B,cACG,MACJ,EAGI,6BAA6B,OAAiB,CACnD,MAAO,CACL,WAAY,kBACZ,cAAe,KAAK,+BAQ1B,MAAa,iCAAkC,8BAA6B,CAiF1E,YAAY,MAAkB,GAAY,MAAqC,WAC7E,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,8BACrB,wFAED,KAAK,KAAO,MAAM,MAAQ,GAAI,KAAI,KAAK,KAAM,oBAAqB,CAChE,UAAW,GAAI,KAAI,iBAAiB,uBAAuB,EAC5D,EAED,KAAK,eAAiB,KAAK,KAE3B,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,CAAA,EAEtD,KAAM,eAAgB,GAAI,qBAAA,6BAA6B,KAAM,WAAY,CACvE,kBAAmB,MAAM,8BACzB,WAAY,KAAK,KAAK,QACtB,iBAAkB,MAAM,iBACxB,eAAgB,MAAM,eACtB,aAAc,IAAI,KAAK,KAAK,CAAE,QAAS,IAAM,KAAK,mBAAmB,IAAI,OAAS,MAAM,QAAQ,CAAC,EAAI,CAAE,UAAW,EAAI,CAAE,EACxH,aAAY,IAAE,MAAM,gBAAY,MAAA,KAAA,OAAA,OAAA,GAAE,SAAQ,EAC3C,EAID,AAAI,MAAM,cACR,GAAI,MAAK,aAAa,KAAM,eAAgB,CAC1C,aAAc,gBAAgB,MAAM,gCACpC,UAAW,MAAM,aACjB,KAAM,MAAM,iBACZ,eAAgB,YAChB,yBAA0B,MAAM,yBACjC,EAGH,KAAK,6BAA+B,cAAc,IAClD,KAAK,8BAAgC,MAAM,oCA1G/B,kCAAiC,MAAkB,GAAY,6BAAoC,CAC/G,KAAM,IAAK,mBACL,aAAe,IAAI,IAAI,oBAAoB,6BAA8B,oBAAoB,EAEnG,GAAI,CAAC,IAAI,MAAM,aAAa,4BAA4B,GAAK,CAAC,GAAG,KAAK,YAAY,EAChF,KAAM,IAAI,OAAM,4IAA4I,EAG9J,MAAM,cAAe,8BAA6B,CAmBhD,YAAY,EAAc,EAAS,CACjC,MAAM,EAAG,CAAC,EAfH,KAAA,6BAA+B,6BAC/B,KAAA,KAAmB,OAe1B,KAAK,eAAiB,GAAI,KAAI,iBAAiB,CAAE,SAAU,IAAI,CAAE,EAGjE,AAAI,IAAI,MAAM,aAAa,4BAA4B,EACrD,KAAK,8BAAgC,IAAI,GAAG,OAAO,EAAG,IAAI,GAAG,MAAM,iBAAkB,YAAY,CAAC,EAElG,KAAK,8BAAgC,aAAa,UAAU,EAAuB,CAEvF,EAGF,MAAO,IAAI,QAAO,MAAO,EAAE,QAMf,WAAU,WAAoB,MAAgC,gFAGnE,GAAI,YAAW,OAAO,CAC3B,UAAW,cACX,OAAQ,YACR,cACG,MACJ,EA2DI,qBAAqB,kBAA6B,uEACvD,KAAK,mBAAmB,KAAK,iBAAiB,GA5HlD,QAAA,0BAAA",
  "names": []
}
