{
  "version": 3,
  "sources": ["placeholders.ts"],
  "sourcesContent": ["/**\n * Placeholders which can be used manifests\n *\n * These can occur both in the Asset Manifest as well as the general\n * Cloud Assembly manifest.\n */\nexport class EnvironmentPlaceholders {\n  /**\n   * Insert this into the destination fields to be replaced with the current region\n   */\n  public static readonly CURRENT_REGION = '${AWS::Region}';\n\n  /**\n   * Insert this into the destination fields to be replaced with the current account\n   */\n  public static readonly CURRENT_ACCOUNT = '${AWS::AccountId}';\n\n  /**\n   * Insert this into the destination fields to be replaced with the current partition\n   */\n  public static readonly CURRENT_PARTITION = '${AWS::Partition}';\n\n  /**\n   * Replace the environment placeholders in all strings found in a complex object.\n   *\n   * Duplicated between cdk-assets and aws-cdk CLI because we don't have a good single place to put it\n   * (they're nominally independent tools).\n   */\n  public static replace(object: any, values: EnvironmentPlaceholderValues): any {\n    return this.recurse(object, value => {\n      value = replaceAll(value, EnvironmentPlaceholders.CURRENT_REGION, values.region);\n      value = replaceAll(value, EnvironmentPlaceholders.CURRENT_ACCOUNT, values.accountId);\n      value = replaceAll(value, EnvironmentPlaceholders.CURRENT_PARTITION, values.partition);\n      return value;\n    });\n  }\n\n  /**\n   * Like 'replace', but asynchronous\n   */\n  public static async replaceAsync(object: any, provider: IEnvironmentPlaceholderProvider): Promise<any> {\n    let needRegion = false;\n    let needAccountId = false;\n    let needPartition = false;\n\n    this.recurse(object, value => {\n      if (value.indexOf(EnvironmentPlaceholders.CURRENT_REGION) > 1) { needRegion = true; }\n      if (value.indexOf(EnvironmentPlaceholders.CURRENT_ACCOUNT) > 1) { needAccountId = true; }\n      if (value.indexOf(EnvironmentPlaceholders.CURRENT_PARTITION) > 1) { needPartition = true; }\n      return value;\n    });\n\n    const region = needRegion ? await provider.region() : undefined;\n    const accountId = needAccountId ? await provider.accountId() : undefined;\n    const partition = needPartition ? await provider.partition() : undefined;\n\n    return this.recurse(object, value => {\n      value = replaceAll(value, EnvironmentPlaceholders.CURRENT_REGION, region ?? 'WONTHAPPEN');\n      value = replaceAll(value, EnvironmentPlaceholders.CURRENT_ACCOUNT, accountId ?? 'WONTHAPPEN');\n      value = replaceAll(value, EnvironmentPlaceholders.CURRENT_PARTITION, partition ?? 'WONTHAPPEN');\n      return value;\n    });\n  }\n\n  private static recurse(value: any, cb: (x: string) => string): any {\n    if (typeof value === 'string') { return cb(value); }\n    if (typeof value !== 'object' || value === null) { return value; }\n    if (Array.isArray(value)) { return value.map(x => this.recurse(x, cb)); }\n\n    const ret: Record<string, any> = {};\n    for (const [key, inner] of Object.entries(value)) {\n      ret[key] = this.recurse(inner, cb);\n    }\n    return ret;\n  }\n}\n\n/**\n * Return the appropriate values for the environment placeholders\n */\nexport interface EnvironmentPlaceholderValues {\n  /**\n   * Return the region\n   */\n  readonly region: string;\n\n  /**\n   * Return the account\n   */\n  readonly accountId: string;\n\n  /**\n   * Return the partition\n   */\n  readonly partition: string;\n}\n\n/**\n * Return the appropriate values for the environment placeholders\n */\nexport interface IEnvironmentPlaceholderProvider {\n  /**\n   * Return the region\n   */\n  region(): Promise<string>;\n\n  /**\n   * Return the account\n   */\n  accountId(): Promise<string>;\n\n  /**\n   * Return the partition\n   */\n  partition(): Promise<string>;\n}\n\n/**\n * A \"replace-all\" function that doesn't require us escaping a literal string to a regex\n */\nfunction replaceAll(s: string, search: string, replace: string) {\n  return s.split(search).join(replace);\n}\n"],
  "mappings": "8NAMA,MAAa,uBAAuB,OAsBpB,SAAQ,OAAa,OAAoC,wFAC9D,KAAK,QAAQ,OAAQ,OAC1B,OAAQ,WAAW,MAAO,wBAAwB,eAAgB,OAAO,MAAM,EAC/E,MAAQ,WAAW,MAAO,wBAAwB,gBAAiB,OAAO,SAAS,EACnF,MAAQ,WAAW,MAAO,wBAAwB,kBAAmB,OAAO,SAAS,EAC9E,MACR,cAMiB,cAAa,OAAa,SAAyC,sFACrF,GAAI,YAAa,GACb,cAAgB,GAChB,cAAgB,GAEpB,KAAK,QAAQ,OAAQ,OACf,OAAM,QAAQ,wBAAwB,cAAc,EAAI,GAAK,YAAa,IAC1E,MAAM,QAAQ,wBAAwB,eAAe,EAAI,GAAK,eAAgB,IAC9E,MAAM,QAAQ,wBAAwB,iBAAiB,EAAI,GAAK,eAAgB,IAC7E,MACR,EAED,KAAM,QAAS,WAAa,KAAM,UAAS,OAAM,EAAK,OAChD,UAAY,cAAgB,KAAM,UAAS,UAAS,EAAK,OACzD,UAAY,cAAgB,KAAM,UAAS,UAAS,EAAK,OAE/D,MAAO,MAAK,QAAQ,OAAQ,OAC1B,OAAQ,WAAW,MAAO,wBAAwB,eAAgB,QAAM,KAAN,OAAU,YAAY,EACxF,MAAQ,WAAW,MAAO,wBAAwB,gBAAiB,WAAS,KAAT,UAAa,YAAY,EAC5F,MAAQ,WAAW,MAAO,wBAAwB,kBAAmB,WAAS,KAAT,UAAa,YAAY,EACvF,MACR,QAGY,SAAQ,MAAY,GAAyB,CAC1D,GAAI,MAAO,QAAU,SAAY,MAAO,IAAG,KAAK,EAChD,GAAI,MAAO,QAAU,UAAY,QAAU,KAAQ,MAAO,OAC1D,GAAI,MAAM,QAAQ,KAAK,EAAK,MAAO,OAAM,IAAI,GAAK,KAAK,QAAQ,EAAG,EAAE,CAAC,EAErE,KAAM,KAA2B,CAAA,EACjC,SAAW,CAAC,IAAK,QAAU,QAAO,QAAQ,KAAK,EAC7C,IAAI,KAAO,KAAK,QAAQ,MAAO,EAAE,EAEnC,MAAO,MAnEX,QAAA,wBAAA,8IAIyB,wBAAA,eAAiB,iBAKjB,wBAAA,gBAAkB,oBAKlB,wBAAA,kBAAoB,oBAoG7C,oBAAoB,EAAW,OAAgB,QAAe,CAC5D,MAAO,GAAE,MAAM,MAAM,EAAE,KAAK,OAAO,CACrC",
  "names": []
}
