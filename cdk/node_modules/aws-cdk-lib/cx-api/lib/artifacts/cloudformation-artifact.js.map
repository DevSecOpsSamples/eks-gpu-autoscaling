{
  "version": 3,
  "sources": ["cloudformation-artifact.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as cxschema from '../../../cloud-assembly-schema';\nimport { CloudArtifact } from '../cloud-artifact';\nimport type { CloudAssembly } from '../cloud-assembly';\nimport { Environment, EnvironmentUtils } from '../environment';\n\nexport class CloudFormationStackArtifact extends CloudArtifact {\n  /**\n   * The file name of the template.\n   */\n  public readonly templateFile: string;\n\n  /**\n   * The original name as defined in the CDK app.\n   */\n  public readonly originalName: string;\n\n  /**\n   * Any assets associated with this stack.\n   */\n  public readonly assets: cxschema.AssetMetadataEntry[];\n\n  /**\n   * CloudFormation parameters to pass to the stack.\n   */\n  public readonly parameters: { [id: string]: string };\n\n  /**\n   * CloudFormation tags to pass to the stack.\n   */\n  public readonly tags: { [id: string]: string };\n\n  /**\n   * The physical name of this stack.\n   */\n  public readonly stackName: string;\n\n  /**\n   * A string that represents this stack. Should only be used in user\n   * interfaces. If the stackName has not been set explicitly, or has been set\n   * to artifactId, it will return the hierarchicalId of the stack. Otherwise,\n   * it will return something like \"<hierarchicalId> (<stackName>)\"\n   */\n  public readonly displayName: string;\n\n  /**\n   * The physical name of this stack.\n   * @deprecated renamed to `stackName`\n   */\n  public readonly name: string;\n\n  /**\n   * The environment into which to deploy this artifact.\n   */\n  public readonly environment: Environment;\n\n  /**\n   * The role that needs to be assumed to deploy the stack\n   *\n   * @default - No role is assumed (current credentials are used)\n   */\n  public readonly assumeRoleArn?: string;\n\n  /**\n   * External ID to use when assuming role for cloudformation deployments\n   *\n   * @default - No external ID\n   */\n  readonly assumeRoleExternalId?: string;\n\n  /**\n   * The role that is passed to CloudFormation to execute the change set\n   *\n   * @default - No role is passed (currently assumed role/credentials are used)\n   */\n  public readonly cloudFormationExecutionRoleArn?: string;\n\n  /**\n   * The role to use to look up values from the target AWS account\n   *\n   * @default - No role is assumed (current credentials are used)\n   */\n  public readonly lookupRole?: cxschema.BootstrapRole;\n\n  /**\n   * If the stack template has already been included in the asset manifest, its asset URL\n   *\n   * @default - Not uploaded yet, upload just before deploying\n   */\n  public readonly stackTemplateAssetObjectUrl?: string;\n\n  /**\n   * Version of bootstrap stack required to deploy this stack\n   *\n   * @default - No bootstrap stack required\n   */\n  public readonly requiresBootstrapStackVersion?: number;\n\n  /**\n   * Name of SSM parameter with bootstrap stack version\n   *\n   * @default - Discover SSM parameter by reading stack\n   */\n  public readonly bootstrapStackVersionSsmParameter?: string;\n\n  /**\n   * Whether termination protection is enabled for this stack.\n   */\n  public readonly terminationProtection?: boolean;\n\n  /**\n   * Whether this stack should be validated by the CLI after synthesis\n   *\n   * @default - false\n   */\n  public readonly validateOnSynth?: boolean;\n\n  private _template: any | undefined;\n\n  constructor(assembly: CloudAssembly, artifactId: string, artifact: cxschema.ArtifactManifest) {\n    super(assembly, artifactId, artifact);\n\n    const properties = (this.manifest.properties || {}) as cxschema.AwsCloudFormationStackProperties;\n    if (!properties.templateFile) {\n      throw new Error('Invalid CloudFormation stack artifact. Missing \"templateFile\" property in cloud assembly manifest');\n    }\n    if (!artifact.environment) {\n      throw new Error('Invalid CloudFormation stack artifact. Missing environment');\n    }\n    this.environment = EnvironmentUtils.parse(artifact.environment);\n    this.templateFile = properties.templateFile;\n    this.parameters = properties.parameters ?? {};\n\n    // We get the tags from 'properties' if available (cloud assembly format >= 6.0.0), otherwise\n    // from the stack metadata\n    this.tags = properties.tags ?? this.tagsFromMetadata();\n    this.assumeRoleArn = properties.assumeRoleArn;\n    this.assumeRoleExternalId = properties.assumeRoleExternalId;\n    this.cloudFormationExecutionRoleArn = properties.cloudFormationExecutionRoleArn;\n    this.stackTemplateAssetObjectUrl = properties.stackTemplateAssetObjectUrl;\n    this.requiresBootstrapStackVersion = properties.requiresBootstrapStackVersion;\n    this.bootstrapStackVersionSsmParameter = properties.bootstrapStackVersionSsmParameter;\n    this.terminationProtection = properties.terminationProtection;\n    this.validateOnSynth = properties.validateOnSynth;\n    this.lookupRole = properties.lookupRole;\n\n    this.stackName = properties.stackName || artifactId;\n    this.assets = this.findMetadataByType(cxschema.ArtifactMetadataEntryType.ASSET).map(e => e.data as cxschema.AssetMetadataEntry);\n\n    this.displayName = this.stackName === artifactId\n      ? this.hierarchicalId\n      : `${this.hierarchicalId} (${this.stackName})`;\n\n    this.name = this.stackName; // backwards compat\n    this.originalName = this.stackName;\n  }\n\n  /**\n   * Full path to the template file\n   */\n  public get templateFullPath() {\n    return path.join(this.assembly.directory, this.templateFile);\n  }\n\n  /**\n   * The CloudFormation template for this stack.\n   */\n  public get template(): any {\n    if (this._template === undefined) {\n      this._template = JSON.parse(fs.readFileSync(this.templateFullPath, 'utf-8'));\n    }\n    return this._template;\n  }\n\n  private tagsFromMetadata() {\n    const ret: Record<string, string> = {};\n    for (const metadataEntry of this.findMetadataByType(cxschema.ArtifactMetadataEntryType.STACK_TAGS)) {\n      for (const tag of (metadataEntry.data ?? []) as cxschema.StackTagsMetadataEntry) {\n        ret[tag.key] = tag.value;\n      }\n    }\n    return ret;\n  }\n}\n"],
  "mappings": "qOAAA,GAAA,QAAA,IAAA,EACA,KAAA,QAAA,MAAA,EACA,SAAA,QAAA,gCAAA,EACA,iBAAA,QAAA,mBAAA,EAEA,cAAA,QAAA,gBAAA,EAEA,MAAa,mCAAoC,kBAAA,aAAa,CAiH5D,YAAY,SAAyB,WAAoB,SAAmC,WAC1F,MAAM,SAAU,WAAY,QAAQ,0JAEpC,KAAM,YAAc,KAAK,SAAS,YAAc,CAAA,EAChD,GAAI,CAAC,WAAW,aACd,KAAM,IAAI,OAAM,mGAAmG,EAErH,GAAI,CAAC,SAAS,YACZ,KAAM,IAAI,OAAM,4DAA4D,EAE9E,KAAK,YAAc,cAAA,iBAAiB,MAAM,SAAS,WAAW,EAC9D,KAAK,aAAe,WAAW,aAC/B,KAAK,WAAU,IAAG,WAAW,cAAU,MAAA,KAAA,OAAA,GAAI,CAAA,EAI3C,KAAK,KAAI,IAAG,WAAW,QAAI,MAAA,KAAA,OAAA,GAAI,KAAK,iBAAgB,EACpD,KAAK,cAAgB,WAAW,cAChC,KAAK,qBAAuB,WAAW,qBACvC,KAAK,+BAAiC,WAAW,+BACjD,KAAK,4BAA8B,WAAW,4BAC9C,KAAK,8BAAgC,WAAW,8BAChD,KAAK,kCAAoC,WAAW,kCACpD,KAAK,sBAAwB,WAAW,sBACxC,KAAK,gBAAkB,WAAW,gBAClC,KAAK,WAAa,WAAW,WAE7B,KAAK,UAAY,WAAW,WAAa,WACzC,KAAK,OAAS,KAAK,mBAAmB,SAAS,0BAA0B,KAAK,EAAE,IAAI,GAAK,EAAE,IAAmC,EAE9H,KAAK,YAAc,KAAK,YAAc,WAClC,KAAK,eACL,GAAG,KAAK,mBAAmB,KAAK,aAEpC,KAAK,KAAO,KAAK,UACjB,KAAK,aAAe,KAAK,aAMhB,mBAAgB,CACzB,MAAO,MAAK,KAAK,KAAK,SAAS,UAAW,KAAK,YAAY,KAMlD,WAAQ,CACjB,MAAI,MAAK,YAAc,QACrB,MAAK,UAAY,KAAK,MAAM,GAAG,aAAa,KAAK,iBAAkB,OAAO,CAAC,GAEtE,KAAK,UAGN,kBAAgB,QACtB,KAAM,KAA8B,CAAA,EACpC,SAAW,iBAAiB,MAAK,mBAAmB,SAAS,0BAA0B,UAAU,EAC/F,SAAW,OAAO,IAAC,cAAc,QAAI,MAAA,KAAA,OAAA,GAAI,CAAA,EACvC,IAAI,IAAI,KAAO,IAAI,MAGvB,MAAO,MA/KX,QAAA,4BAAA",
  "names": []
}
