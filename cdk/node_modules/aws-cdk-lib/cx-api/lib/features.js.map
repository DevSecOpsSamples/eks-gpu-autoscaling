{
  "version": 3,
  "sources": ["features.ts"],
  "sourcesContent": ["// --------------------------------------------------------------------------------\n// This file defines context keys that enable certain features that are\n// implemented behind a flag in order to preserve backwards compatibility for\n// existing apps. When a new app is initialized through `cdk init`, the CLI will\n// automatically add enable these features by adding them to the generated\n// `cdk.json` file.\n//\n// Some of these flags only affect the behavior of the construct library --\n// these will be removed in the next major release and the behavior they are\n// gating will become the only behavior.\n//\n// Other flags also affect the generated CloudFormation templates, in a way\n// that prevents seamless upgrading. In the next major version, their\n// behavior will become the default, but the flag still exists so users can\n// switch it *off* in order to revert to the old behavior. These flags\n// are marked with with the [PERMANENT] tag below.\n//\n// See https://github.com/aws/aws-cdk-rfcs/blob/master/text/0055-feature-flags.md\n// --------------------------------------------------------------------------------\n\n/**\n * If this is set, multiple stacks can use the same stack name (e.g. deployed to\n * different environments). This means that the name of the synthesized template\n * file will be based on the construct path and not on the defined `stackName`\n * of the stack.\n *\n * This is a \"future flag\": the feature is disabled by default for backwards\n * compatibility, but new projects created using `cdk init` will have this\n * enabled through the generated `cdk.json`.\n */\nexport const ENABLE_STACK_NAME_DUPLICATES_CONTEXT = '@aws-cdk/core:enableStackNameDuplicates';\n\n/**\n * IF this is set, `cdk diff` will always exit with 0.\n *\n * Use `cdk diff --fail` to exit with 1 if there's a diff.\n */\nexport const ENABLE_DIFF_NO_FAIL_CONTEXT = 'aws-cdk:enableDiffNoFail';\n/** @deprecated use `ENABLE_DIFF_NO_FAIL_CONTEXT` */\nexport const ENABLE_DIFF_NO_FAIL = ENABLE_DIFF_NO_FAIL_CONTEXT;\n\n/**\n * Switch to new stack synthesis method which enable CI/CD\n *\n * [PERMANENT]\n */\nexport const NEW_STYLE_STACK_SYNTHESIS_CONTEXT = '@aws-cdk/core:newStyleStackSynthesis';\n\n/**\n * Name exports based on the construct paths relative to the stack, rather than the global construct path\n *\n * Combined with the stack name this relative construct path is good enough to\n * ensure uniqueness, and makes the export names robust against refactoring\n * the location of the stack in the construct tree (specifically, moving the Stack\n * into a Stage).\n *\n * [PERMANENT]\n */\nexport const STACK_RELATIVE_EXPORTS_CONTEXT = '@aws-cdk/core:stackRelativeExports';\n\n/**\n * DockerImageAsset properly supports `.dockerignore` files by default\n *\n * If this flag is not set, the default behavior for `DockerImageAsset` is to use\n * glob semantics for `.dockerignore` files. If this flag is set, the default behavior\n * is standard Docker ignore semantics.\n *\n * This is a feature flag as the old behavior was technically incorrect but\n * users may have come to depend on it.\n */\nexport const DOCKER_IGNORE_SUPPORT = '@aws-cdk/aws-ecr-assets:dockerIgnoreSupport';\n\n/**\n * Secret.secretName for an \"owned\" secret will attempt to parse the secretName from the ARN,\n * rather than the default full resource name, which includes the SecretsManager suffix.\n *\n * If this flag is not set, Secret.secretName will include the SecretsManager suffix, which cannot be directly\n * used by SecretsManager.DescribeSecret, and must be parsed by the user first (e.g., Fn:Join, Fn:Select, Fn:Split).\n */\nexport const SECRETS_MANAGER_PARSE_OWNED_SECRET_NAME = '@aws-cdk/aws-secretsmanager:parseOwnedSecretName';\n\n/**\n * KMS Keys start with a default key policy that grants the account access to administer the key,\n * mirroring the behavior of the KMS SDK/CLI/Console experience. Users may override the default key\n * policy by specifying their own.\n *\n * If this flag is not set, the default key policy depends on the setting of the `trustAccountIdentities`\n * flag. If false (the default, for backwards-compatibility reasons), the default key policy somewhat\n * resemebles the default admin key policy, but with the addition of 'GenerateDataKey' permissions. If\n * true, the policy matches what happens when this feature flag is set.\n *\n * Additionally, if this flag is not set and the user supplies a custom key policy, this will be appended\n * to the key's default policy (rather than replacing it).\n */\nexport const KMS_DEFAULT_KEY_POLICIES = '@aws-cdk/aws-kms:defaultKeyPolicies';\n\n/**\n * Change the old 's3:PutObject*' permission to 's3:PutObject' on Bucket,\n * as the former includes 's3:PutObjectAcl',\n * which could be used to grant read/write object access to IAM principals in other accounts.\n * Use a feature flag to make sure existing customers who might be relying\n * on the overly-broad permissions are not broken.\n */\nexport const S3_GRANT_WRITE_WITHOUT_ACL = '@aws-cdk/aws-s3:grantWriteWithoutAcl';\n\n/**\n * ApplicationLoadBalancedServiceBase, ApplicationMultipleTargetGroupServiceBase,\n * NetworkLoadBalancedServiceBase, NetworkMultipleTargetGroupServiceBase, and\n * QueueProcessingServiceBase currently determine a default value for the desired count of\n * a CfnService if a desiredCount is not provided.\n *\n * If this flag is not set, the default behaviour for CfnService.desiredCount is to set a\n * desiredCount of 1, if one is not provided. If true, a default will not be defined for\n * CfnService.desiredCount and as such desiredCount will be undefined, if one is not provided.\n *\n * This is a feature flag as the old behavior was technically incorrect, but\n * users may have come to depend on it.\n */\nexport const ECS_REMOVE_DEFAULT_DESIRED_COUNT = '@aws-cdk/aws-ecs-patterns:removeDefaultDesiredCount';\n\n/**\n * ServerlessCluster.clusterIdentifier currently can has uppercase letters,\n * and ServerlessCluster pass it through to CfnDBCluster.dbClusterIdentifier.\n * The identifier is saved as lowercase string in AWS and is resolved as original string in CloudFormation.\n *\n * If this flag is not set, original value that one set to ServerlessCluster.clusterIdentifier\n * is passed to CfnDBCluster.dbClusterIdentifier.\n * If this flag is true, ServerlessCluster.clusterIdentifier is converted into a string containing\n * only lowercase characters by the `toLowerCase` function and passed to CfnDBCluster.dbClusterIdentifier.\n *\n * This feature flag make correct the ServerlessCluster.clusterArn when\n * clusterIdentifier contains a Upper case letters.\n *\n * [PERMANENT]\n */\nexport const RDS_LOWERCASE_DB_IDENTIFIER = '@aws-cdk/aws-rds:lowercaseDbIdentifier';\n\n/**\n * The UsagePlanKey resource connects an ApiKey with a UsagePlan. API Gateway does not allow more than one UsagePlanKey\n * for any given UsagePlan and ApiKey combination. For this reason, CloudFormation cannot replace this resource without\n * either the UsagePlan or ApiKey changing.\n *\n * The feature addition to support multiple UsagePlanKey resources - 142bd0e2 - recognized this and attempted to keep\n * existing UsagePlanKey logical ids unchanged.\n * However, this intentionally caused the logical id of the UsagePlanKey to be sensitive to order. That is, when\n * the 'first' UsagePlanKey resource is removed, the logical id of the 'second' assumes what was originally the 'first',\n * which again is disallowed.\n *\n * In effect, there is no way to get out of this mess in a backwards compatible way, while supporting existing stacks.\n * This flag changes the logical id layout of UsagePlanKey to not be sensitive to order.\n *\n * [PERMANENT]\n */\nexport const APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID = '@aws-cdk/aws-apigateway:usagePlanKeyOrderInsensitiveId';\n\n/**\n * Enable this feature flag to have elastic file systems encrypted at rest by default.\n *\n * Encryption can also be configured explicitly using the `encrypted` property.\n */\nexport const EFS_DEFAULT_ENCRYPTION_AT_REST = '@aws-cdk/aws-efs:defaultEncryptionAtRest';\n\n/**\n * Enable this feature flag to opt in to the updated logical id calculation for Lambda Version created using the\n * `fn.currentVersion`.\n *\n * The previous calculation incorrectly considered properties of the `AWS::Lambda::Function` resource that did\n * not constitute creating a new Version.\n *\n * See 'currentVersion' section in the aws-lambda module's README for more details.\n *\n * [PERMANENT]\n */\nexport const LAMBDA_RECOGNIZE_VERSION_PROPS = '@aws-cdk/aws-lambda:recognizeVersionProps';\n\n/**\n * Enable this feature flag to have cloudfront distributions use the security policy TLSv1.2_2021 by default.\n *\n * The security policy can also be configured explicitly using the `minimumProtocolVersion` property.\n *\n * [PERMANENT]\n */\nexport const CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021 = '@aws-cdk/aws-cloudfront:defaultSecurityPolicyTLSv1.2_2021';\n\n/**\n * What regions to include in lookup tables of environment agnostic stacks\n *\n * Has no effect on stacks that have a defined region, but will limit the amount\n * of unnecessary regions included in stacks without a known region.\n *\n * The type of this value should be a list of strings.\n *\n * [PERMANENT]\n */\nexport const TARGET_PARTITIONS = '@aws-cdk/core:target-partitions';\n\n/**\n * Enable this feature flag to configure default logging behavior for the ECS Service Extensions. This will enable the\n * `awslogs` log driver for the application container of the service to send the container logs to CloudWatch Logs.\n *\n * This is a feature flag as the new behavior provides a better default experience for the users.\n *\n * [PERMANENT]\n */\nexport const ECS_SERVICE_EXTENSIONS_ENABLE_DEFAULT_LOG_DRIVER = '@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver';\n\n/**\n * Enable this feature flag to have Launch Templates generated by the `InstanceRequireImdsv2Aspect` use unique names.\n *\n * Previously, the generated Launch Template names were only unique within a stack because they were based only on the\n * `Instance` construct ID. If another stack that has an `Instance` with the same construct ID is deployed in the same\n * account and region, the deployments would always fail as the generated Launch Template names were the same.\n *\n * The new implementation addresses this issue by generating the Launch Template name with the `Names.uniqueId` method.\n */\nexport const EC2_UNIQUE_IMDSV2_LAUNCH_TEMPLATE_NAME = '@aws-cdk/aws-ec2:uniqueImdsv2TemplateName';\n\n/**\n * Minimize IAM policies by combining Principals, Actions and Resources of two\n * Statements in the policies, as long as it doesn't change the meaning of the\n * policy.\n *\n * [PERMANENT]\n */\nexport const IAM_MINIMIZE_POLICIES = '@aws-cdk/aws-iam:minimizePolicies';\n\n/**\n * Flag values that should apply for new projects\n *\n * Add a flag in here (typically with the value `true`), to enable\n * backwards-breaking behavior changes only for new projects.  New projects\n * generated through `cdk init` will include these flags in their generated\n *\n * Tests must cover the default (disabled) case and the future (enabled) case.\n */\nexport const FUTURE_FLAGS: { [key: string]: boolean } = {\n  [APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID]: true,\n  [ENABLE_STACK_NAME_DUPLICATES_CONTEXT]: true,\n  [ENABLE_DIFF_NO_FAIL_CONTEXT]: true,\n  [STACK_RELATIVE_EXPORTS_CONTEXT]: true,\n  [DOCKER_IGNORE_SUPPORT]: true,\n  [SECRETS_MANAGER_PARSE_OWNED_SECRET_NAME]: true,\n  [KMS_DEFAULT_KEY_POLICIES]: true,\n  [S3_GRANT_WRITE_WITHOUT_ACL]: true,\n  [ECS_REMOVE_DEFAULT_DESIRED_COUNT]: true,\n  [RDS_LOWERCASE_DB_IDENTIFIER]: true,\n  [EFS_DEFAULT_ENCRYPTION_AT_REST]: true,\n  [LAMBDA_RECOGNIZE_VERSION_PROPS]: true,\n  [CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021]: true,\n  [ECS_SERVICE_EXTENSIONS_ENABLE_DEFAULT_LOG_DRIVER]: true,\n  [EC2_UNIQUE_IMDSV2_LAUNCH_TEMPLATE_NAME]: true,\n  [IAM_MINIMIZE_POLICIES]: true,\n};\n\n/**\n * Values that will be set by default in a new project, which are not necessarily booleans (and don't expire)\n */\nexport const NEW_PROJECT_DEFAULT_CONTEXT: { [key: string]: any} = {\n  [TARGET_PARTITIONS]: ['aws', 'aws-cn'],\n};\n\n/**\n * The list of future flags that are now expired. This is going to be used to identify\n * and block usages of old feature flags in the new major version of CDK.\n */\nexport const FUTURE_FLAGS_EXPIRED: string[] = [\n  DOCKER_IGNORE_SUPPORT,\n  ECS_REMOVE_DEFAULT_DESIRED_COUNT,\n  EFS_DEFAULT_ENCRYPTION_AT_REST,\n  ENABLE_DIFF_NO_FAIL_CONTEXT,\n  ENABLE_STACK_NAME_DUPLICATES_CONTEXT,\n  KMS_DEFAULT_KEY_POLICIES,\n  S3_GRANT_WRITE_WITHOUT_ACL,\n  SECRETS_MANAGER_PARSE_OWNED_SECRET_NAME,\n];\n\n/**\n * The default values of each of these flags.\n *\n * This is the effective value of the flag, unless it's overriden via\n * context.\n *\n * Adding new flags here is only allowed during the pre-release period of a new\n * major version!\n */\nconst FUTURE_FLAGS_DEFAULTS: { [key: string]: boolean } = {\n  [APIGATEWAY_USAGEPLANKEY_ORDERINSENSITIVE_ID]: true,\n  [ENABLE_STACK_NAME_DUPLICATES_CONTEXT]: true,\n  [ENABLE_DIFF_NO_FAIL_CONTEXT]: true,\n  [STACK_RELATIVE_EXPORTS_CONTEXT]: true,\n  [NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: true,\n  [DOCKER_IGNORE_SUPPORT]: true,\n  [SECRETS_MANAGER_PARSE_OWNED_SECRET_NAME]: true,\n  [KMS_DEFAULT_KEY_POLICIES]: true,\n  [S3_GRANT_WRITE_WITHOUT_ACL]: true,\n  [ECS_REMOVE_DEFAULT_DESIRED_COUNT]: true,\n  [RDS_LOWERCASE_DB_IDENTIFIER]: true,\n  [EFS_DEFAULT_ENCRYPTION_AT_REST]: true,\n  [LAMBDA_RECOGNIZE_VERSION_PROPS]: true,\n  [CLOUDFRONT_DEFAULT_SECURITY_POLICY_TLS_V1_2_2021]: true,\n  // Every feature flag below this should have its default behavior set to \"not\n  // activated\", as it was introduced AFTER v2 was released.\n  [ECS_SERVICE_EXTENSIONS_ENABLE_DEFAULT_LOG_DRIVER]: false,\n  [EC2_UNIQUE_IMDSV2_LAUNCH_TEMPLATE_NAME]: false,\n};\n\nexport function futureFlagDefault(flag: string): boolean {\n  return FUTURE_FLAGS_DEFAULTS[flag] ?? false;\n}\n"],
  "mappings": "m7BA8Ba,QAAA,qCAAuC,0CAOvC,QAAA,4BAA8B,2BAE9B,QAAA,oBAAsB,QAAA,4BAOtB,QAAA,kCAAoC,uCAYpC,QAAA,+BAAiC,qCAYjC,QAAA,sBAAwB,8CASxB,QAAA,wCAA0C,mDAe1C,QAAA,yBAA2B,sCAS3B,QAAA,2BAA6B,uCAe7B,QAAA,iCAAmC,sDAiBnC,QAAA,4BAA8B,yCAkB9B,QAAA,4CAA8C,yDAO9C,QAAA,+BAAiC,2CAajC,QAAA,+BAAiC,4CASjC,QAAA,iDAAmD,4DAYnD,QAAA,kBAAoB,kCAUpB,QAAA,iDAAmD,oEAWnD,QAAA,uCAAyC,4CASzC,QAAA,sBAAwB,oCAWxB,QAAA,aAA2C,EACrD,QAAA,6CAA8C,IAC9C,QAAA,sCAAuC,IACvC,QAAA,6BAA8B,IAC9B,QAAA,gCAAiC,IACjC,QAAA,uBAAwB,IACxB,QAAA,yCAA0C,IAC1C,QAAA,0BAA2B,IAC3B,QAAA,4BAA6B,IAC7B,QAAA,kCAAmC,IACnC,QAAA,6BAA8B,IAC9B,QAAA,gCAAiC,IACjC,QAAA,gCAAiC,IACjC,QAAA,kDAAmD,IACnD,QAAA,kDAAmD,IACnD,QAAA,wCAAyC,IACzC,QAAA,uBAAwB,IAMd,QAAA,4BAAqD,EAC/D,QAAA,mBAAoB,CAAC,MAAO,QAAQ,GAO1B,QAAA,qBAAiC,CAC5C,QAAA,sBACA,QAAA,iCACA,QAAA,+BACA,QAAA,4BACA,QAAA,qCACA,QAAA,yBACA,QAAA,2BACA,QAAA,yCAYF,KAAM,uBAAoD,EACvD,QAAA,6CAA8C,IAC9C,QAAA,sCAAuC,IACvC,QAAA,6BAA8B,IAC9B,QAAA,gCAAiC,IACjC,QAAA,mCAAoC,IACpC,QAAA,uBAAwB,IACxB,QAAA,yCAA0C,IAC1C,QAAA,0BAA2B,IAC3B,QAAA,4BAA6B,IAC7B,QAAA,kCAAmC,IACnC,QAAA,6BAA8B,IAC9B,QAAA,gCAAiC,IACjC,QAAA,gCAAiC,IACjC,QAAA,kDAAmD,IAGnD,QAAA,kDAAmD,IACnD,QAAA,wCAAyC,IAG5C,2BAAkC,KAAY,QAC5C,MAAA,IAAO,sBAAsB,SAAK,MAAA,KAAA,OAAA,GAAI,EACxC,CAFA,QAAA,kBAAA",
  "names": []
}
