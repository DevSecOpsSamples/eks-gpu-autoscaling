{
  "version": 3,
  "sources": ["vpc.ts"],
  "sourcesContent": ["/**\n * The type of subnet group.\n * Same as SubnetType in the @aws-cdk/aws-ec2 package,\n * but we can't use that because of cyclical dependencies.\n */\nexport enum VpcSubnetGroupType {\n  /** Public subnet group type. */\n  PUBLIC = 'Public',\n\n  /** Private subnet group type. */\n  PRIVATE = 'Private',\n\n  /** Isolated subnet group type. */\n  ISOLATED = 'Isolated',\n}\n\n/**\n * A subnet representation that the VPC provider uses.\n */\nexport interface VpcSubnet {\n  /** The identifier of the subnet. */\n  readonly subnetId: string;\n\n  /**\n   * The code of the availability zone this subnet is in\n   * (for example, 'us-west-2a').\n   */\n  readonly availabilityZone: string;\n\n  /** The identifier of the route table for this subnet. */\n  readonly routeTableId: string;\n\n  /**\n   * CIDR range of the subnet\n   *\n   * @default - CIDR information not available\n   */\n  readonly cidr?: string;\n}\n\n/**\n * A group of subnets returned by the VPC provider.\n * The included subnets do NOT have to be symmetric!\n */\nexport interface VpcSubnetGroup {\n  /**\n   * The name of the subnet group,\n   * determined by looking at the tags of of the subnets\n   * that belong to it.\n   */\n  readonly name: string;\n\n  /** The type of the subnet group. */\n  readonly type: VpcSubnetGroupType;\n\n  /**\n   * The subnets that are part of this group.\n   * There is no condition that the subnets have to be symmetric\n   * in the group.\n   */\n  readonly subnets: VpcSubnet[];\n}\n\n/**\n * Properties of a discovered VPC\n */\nexport interface VpcContextResponse {\n\n  /**\n   * VPC id\n   */\n  readonly vpcId: string;\n\n  /**\n   * VPC cidr\n   *\n   * @default - CIDR information not available\n   */\n  readonly vpcCidrBlock?: string;\n\n  /**\n   * AZs\n   */\n  readonly availabilityZones: string[];\n\n  /**\n   * IDs of all public subnets\n   *\n   * Element count: #(availabilityZones) \u00B7 #(publicGroups)\n   */\n  readonly publicSubnetIds?: string[];\n\n  /**\n   * Name of public subnet groups\n   *\n   * Element count: #(publicGroups)\n   */\n  readonly publicSubnetNames?: string[];\n\n  /**\n   * Route Table IDs of public subnet groups.\n   *\n   * Element count: #(availabilityZones) \u00B7 #(publicGroups)\n   */\n  readonly publicSubnetRouteTableIds?: string[];\n\n  /**\n   * IDs of all private subnets\n   *\n   * Element count: #(availabilityZones) \u00B7 #(privateGroups)\n   */\n  readonly privateSubnetIds?: string[];\n\n  /**\n   * Name of private subnet groups\n   *\n   * Element count: #(privateGroups)\n   */\n  readonly privateSubnetNames?: string[];\n\n  /**\n   * Route Table IDs of private subnet groups.\n   *\n   * Element count: #(availabilityZones) \u00B7 #(privateGroups)\n   */\n  readonly privateSubnetRouteTableIds?: string[];\n\n  /**\n   * IDs of all isolated subnets\n   *\n   * Element count: #(availabilityZones) \u00B7 #(isolatedGroups)\n   */\n  readonly isolatedSubnetIds?: string[];\n\n  /**\n   * Name of isolated subnet groups\n   *\n   * Element count: #(isolatedGroups)\n   */\n  readonly isolatedSubnetNames?: string[];\n\n  /**\n   * Route Table IDs of isolated subnet groups.\n   *\n   * Element count: #(availabilityZones) \u00B7 #(isolatedGroups)\n   */\n  readonly isolatedSubnetRouteTableIds?: string[];\n\n  /**\n   * The VPN gateway ID\n   */\n  readonly vpnGatewayId?: string;\n\n  /**\n   * The subnet groups discovered for the given VPC.\n   * Unlike the above properties, this will include asymmetric subnets,\n   * if the VPC has any.\n   * This property will only be populated if {@link VpcContextQuery.returnAsymmetricSubnets}\n   * is true.\n   *\n   * @default - no subnet groups will be returned unless {@link VpcContextQuery.returnAsymmetricSubnets} is true\n   */\n  readonly subnetGroups?: VpcSubnetGroup[];\n}\n"],
  "mappings": "sGAKA,GAAY,oBAAZ,AAAA,UAAY,oBAAkB,CAE5B,oBAAA,OAAA,SAGA,oBAAA,QAAA,UAGA,oBAAA,SAAA,UACF,GATY,mBAAA,QAAA,oBAAA,SAAA,mBAAkB,CAAA,EAAA",
  "names": []
}
