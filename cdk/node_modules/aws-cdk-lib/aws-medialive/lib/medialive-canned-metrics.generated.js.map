{
  "version": 3,
  "sources": ["medialive-canned-metrics.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nexport class MediaLiveMetrics {\n  public static activeAlertsMaximum(dimensions: { ChannelId: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'ActiveAlerts',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static inputVideoFrameRateAverage(dimensions: { ChannelId: string, Pipeline: string }): MetricWithDims<{ ChannelId: string, Pipeline: string }>;\n  public static inputVideoFrameRateAverage(dimensions: { ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }): MetricWithDims<{ ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }>;\n  public static inputVideoFrameRateAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'InputVideoFrameRate',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static fillMsecAverage(dimensions: { ChannelId: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'FillMsec',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static inputLossSecondsSum(dimensions: { ChannelId: string, Pipeline: string }): MetricWithDims<{ ChannelId: string, Pipeline: string }>;\n  public static inputLossSecondsSum(dimensions: { ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }): MetricWithDims<{ ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }>;\n  public static inputLossSecondsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'InputLossSeconds',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static rtpPacketsReceivedSum(dimensions: { ChannelId: string, Pipeline: string }): MetricWithDims<{ ChannelId: string, Pipeline: string }>;\n  public static rtpPacketsReceivedSum(dimensions: { ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }): MetricWithDims<{ ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }>;\n  public static rtpPacketsReceivedSum(dimensions: any) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'RtpPacketsReceived',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static rtpPacketsRecoveredViaFecSum(dimensions: { ChannelId: string, Pipeline: string }): MetricWithDims<{ ChannelId: string, Pipeline: string }>;\n  public static rtpPacketsRecoveredViaFecSum(dimensions: { ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }): MetricWithDims<{ ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }>;\n  public static rtpPacketsRecoveredViaFecSum(dimensions: any) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'RtpPacketsRecoveredViaFec',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static rtpPacketsLostSum(dimensions: { ChannelId: string, Pipeline: string }): MetricWithDims<{ ChannelId: string, Pipeline: string }>;\n  public static rtpPacketsLostSum(dimensions: { ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }): MetricWithDims<{ ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }>;\n  public static rtpPacketsLostSum(dimensions: any) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'RtpPacketsLost',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static fecRowPacketsReceivedSum(dimensions: { ChannelId: string, Pipeline: string }): MetricWithDims<{ ChannelId: string, Pipeline: string }>;\n  public static fecRowPacketsReceivedSum(dimensions: { ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }): MetricWithDims<{ ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }>;\n  public static fecRowPacketsReceivedSum(dimensions: any) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'FecRowPacketsReceived',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static fecColumnPacketsReceivedSum(dimensions: { ChannelId: string, Pipeline: string }): MetricWithDims<{ ChannelId: string, Pipeline: string }>;\n  public static fecColumnPacketsReceivedSum(dimensions: { ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }): MetricWithDims<{ ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }>;\n  public static fecColumnPacketsReceivedSum(dimensions: any) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'FecColumnPacketsReceived',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static primaryInputActiveMinimum(dimensions: { ChannelId: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'PrimaryInputActive',\n      dimensionsMap: dimensions,\n      statistic: 'Minimum',\n    };\n  }\n  public static networkInAverage(dimensions: { ChannelId: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'NetworkIn',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static networkOutAverage(dimensions: { ChannelId: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'NetworkOut',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static pipelinesLockedMinimum(dimensions: { ChannelId: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'PipelinesLocked',\n      dimensionsMap: dimensions,\n      statistic: 'Minimum',\n    };\n  }\n  public static inputTimecodesPresentMinimum(dimensions: { ChannelId: string, Pipeline: string }): MetricWithDims<{ ChannelId: string, Pipeline: string }>;\n  public static inputTimecodesPresentMinimum(dimensions: { ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }): MetricWithDims<{ ActiveInputFailoverLabel: string, ChannelId: string, Pipeline: string }>;\n  public static inputTimecodesPresentMinimum(dimensions: any) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'InputTimecodesPresent',\n      dimensionsMap: dimensions,\n      statistic: 'Minimum',\n    };\n  }\n  public static activeOutputsMaximum(dimensions: { ChannelId: string, OutputGroupName: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'ActiveOutputs',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static output4XxErrorsSum(dimensions: { ChannelId: string, OutputGroupName: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'Output4xxErrors',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static output5XxErrorsSum(dimensions: { ChannelId: string, OutputGroupName: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'Output5xxErrors',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static audioLevelMaximum(dimensions: { AudioDescriptionName: string, ChannelId: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'AudioLevel',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static outputAudioLevelDbfsMaximum(dimensions: { AudioDescriptionName: string, ChannelId: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'OutputAudioLevelDbfs',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static outputAudioLevelLkfsMaximum(dimensions: { AudioDescriptionName: string, ChannelId: string, Pipeline: string }) {\n    return {\n      namespace: 'AWS/MediaLive',\n      metricName: 'OutputAudioLevelLkfs',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n}\ntype MetricWithDims<D> = { namespace: string, metricName: string, statistic: string, dimensionsMap: D };\n"],
  "mappings": "oGAIA,MAAa,gBAAgB,OACb,qBAAoB,WAAmD,CACnF,MAAO,CACL,UAAW,gBACX,WAAY,eACZ,cAAe,WACf,UAAW,iBAKD,4BAA2B,WAAe,CACtD,MAAO,CACL,UAAW,gBACX,WAAY,sBACZ,cAAe,WACf,UAAW,iBAGD,iBAAgB,WAAmD,CAC/E,MAAO,CACL,UAAW,gBACX,WAAY,WACZ,cAAe,WACf,UAAW,iBAKD,qBAAoB,WAAe,CAC/C,MAAO,CACL,UAAW,gBACX,WAAY,mBACZ,cAAe,WACf,UAAW,aAKD,uBAAsB,WAAe,CACjD,MAAO,CACL,UAAW,gBACX,WAAY,qBACZ,cAAe,WACf,UAAW,aAKD,8BAA6B,WAAe,CACxD,MAAO,CACL,UAAW,gBACX,WAAY,4BACZ,cAAe,WACf,UAAW,aAKD,mBAAkB,WAAe,CAC7C,MAAO,CACL,UAAW,gBACX,WAAY,iBACZ,cAAe,WACf,UAAW,aAKD,0BAAyB,WAAe,CACpD,MAAO,CACL,UAAW,gBACX,WAAY,wBACZ,cAAe,WACf,UAAW,aAKD,6BAA4B,WAAe,CACvD,MAAO,CACL,UAAW,gBACX,WAAY,2BACZ,cAAe,WACf,UAAW,aAGD,2BAA0B,WAAmD,CACzF,MAAO,CACL,UAAW,gBACX,WAAY,qBACZ,cAAe,WACf,UAAW,iBAGD,kBAAiB,WAAmD,CAChF,MAAO,CACL,UAAW,gBACX,WAAY,YACZ,cAAe,WACf,UAAW,iBAGD,mBAAkB,WAAmD,CACjF,MAAO,CACL,UAAW,gBACX,WAAY,aACZ,cAAe,WACf,UAAW,iBAGD,wBAAuB,WAAmD,CACtF,MAAO,CACL,UAAW,gBACX,WAAY,kBACZ,cAAe,WACf,UAAW,iBAKD,8BAA6B,WAAe,CACxD,MAAO,CACL,UAAW,gBACX,WAAY,wBACZ,cAAe,WACf,UAAW,iBAGD,sBAAqB,WAA4E,CAC7G,MAAO,CACL,UAAW,gBACX,WAAY,gBACZ,cAAe,WACf,UAAW,iBAGD,oBAAmB,WAA4E,CAC3G,MAAO,CACL,UAAW,gBACX,WAAY,kBACZ,cAAe,WACf,UAAW,aAGD,oBAAmB,WAA4E,CAC3G,MAAO,CACL,UAAW,gBACX,WAAY,kBACZ,cAAe,WACf,UAAW,aAGD,mBAAkB,WAAiF,CAC/G,MAAO,CACL,UAAW,gBACX,WAAY,aACZ,cAAe,WACf,UAAW,iBAGD,6BAA4B,WAAiF,CACzH,MAAO,CACL,UAAW,gBACX,WAAY,uBACZ,cAAe,WACf,UAAW,iBAGD,6BAA4B,WAAiF,CACzH,MAAO,CACL,UAAW,gBACX,WAAY,uBACZ,cAAe,WACf,UAAW,YA9KjB,QAAA,iBAAA",
  "names": []
}
