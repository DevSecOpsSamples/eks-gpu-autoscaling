{
  "version": 3,
  "sources": ["tarball-asset.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as ecr from '../../aws-ecr';\nimport { AssetStaging, Stack, Stage } from '../../core';\nimport { Construct } from 'constructs';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line\nimport { IAsset } from '../../assets';\n\n/**\n * Options for TarballImageAsset\n */\nexport interface TarballImageAssetProps {\n  /**\n   * Absolute path to the tarball.\n   *\n   * It is recommended to to use the script running directory (e.g. `__dirname`\n   * in Node.js projects or dirname of `__file__` in Python) if your tarball\n   * is located as a resource inside your project.\n   */\n  readonly tarballFile: string;\n}\n\n/**\n * An asset that represents a Docker image.\n *\n * The image will loaded from an existing tarball and uploaded to an ECR repository.\n */\nexport class TarballImageAsset extends Construct implements IAsset {\n  /**\n   * The full URI of the image (including a tag). Use this reference to pull\n   * the asset.\n   */\n  public imageUri: string;\n\n  /**\n   * Repository where the image is stored\n   */\n  public repository: ecr.IRepository;\n\n  /**\n   * A hash of the source of this asset, which is available at construction time. As this is a plain\n   * string, it can be used in construct IDs in order to enforce creation of a new resource when\n   * the content hash has changed.\n   * @deprecated use assetHash\n   */\n  public readonly sourceHash: string;\n\n  /**\n   * A hash of this asset, which is available at construction time. As this is a plain string, it\n   * can be used in construct IDs in order to enforce creation of a new resource when the content\n   * hash has changed.\n   */\n  public readonly assetHash: string;\n\n  constructor(scope: Construct, id: string, props: TarballImageAssetProps) {\n    super(scope, id);\n\n    if (!fs.existsSync(props.tarballFile)) {\n      throw new Error(`Cannot find file at ${props.tarballFile}`);\n    }\n\n    const stagedTarball = new AssetStaging(this, 'Staging', { sourcePath: props.tarballFile });\n\n    this.sourceHash = stagedTarball.assetHash;\n    this.assetHash = stagedTarball.assetHash;\n\n    const stage = Stage.of(this);\n    const relativePathInOutDir = stage ? path.relative(stage.assetOutdir, stagedTarball.absoluteStagedPath) : stagedTarball.absoluteStagedPath;\n\n    const stack = Stack.of(this);\n    const location = stack.synthesizer.addDockerImageAsset({\n      sourceHash: stagedTarball.assetHash,\n      executable: [\n        'sh',\n        '-c',\n        `docker load -i ${relativePathInOutDir} | sed \"s/Loaded image: //g\"`,\n      ],\n    });\n\n    this.repository = ecr.Repository.fromRepositoryName(this, 'Repository', location.repositoryName);\n    this.imageUri = location.imageUri;\n  }\n}\n\n"],
  "mappings": "wNAAA,GAAA,QAAA,IAAA,EACA,KAAA,QAAA,MAAA,EACA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EAyBA,MAAa,yBAA0B,cAAA,SAAS,CA2B9C,YAAY,MAAkB,GAAY,MAA6B,CACrE,MAAM,MAAO,EAAE,EAEf,oFAAI,CAAC,GAAG,WAAW,MAAM,WAAW,EAClC,KAAM,IAAI,OAAM,uBAAuB,MAAM,aAAa,EAG5D,KAAM,eAAgB,GAAI,QAAA,aAAa,KAAM,UAAW,CAAE,WAAY,MAAM,WAAW,CAAE,EAEzF,KAAK,WAAa,cAAc,UAChC,KAAK,UAAY,cAAc,UAE/B,KAAM,OAAQ,OAAA,MAAM,GAAG,IAAI,EACrB,qBAAuB,MAAQ,KAAK,SAAS,MAAM,YAAa,cAAc,kBAAkB,EAAI,cAAc,mBAGlH,SAAW,AADH,OAAA,MAAM,GAAG,IAAI,EACJ,YAAY,oBAAoB,CACrD,WAAY,cAAc,UAC1B,WAAY,CACV,KACA,KACA,kBAAkB,oDAErB,EAED,KAAK,WAAa,IAAI,WAAW,mBAAmB,KAAM,aAAc,SAAS,cAAc,EAC/F,KAAK,SAAW,SAAS,UArD7B,QAAA,kBAAA",
  "names": []
}
