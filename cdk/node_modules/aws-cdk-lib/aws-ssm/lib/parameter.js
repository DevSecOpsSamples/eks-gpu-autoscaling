"use strict";var _a,_b;Object.defineProperty(exports,"__esModule",{value:!0}),exports.StringListParameter=exports.StringParameter=exports.ParameterTier=exports.ParameterDataType=exports.ParameterType=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),iam=require("../../aws-iam"),cxschema=require("../../cloud-assembly-schema"),core_1=require("../../core"),ssm=require("./ssm.generated"),util_1=require("./util");class ParameterBase extends core_1.Resource{grantRead(grantee){return this.encryptionKey&&this.encryptionKey.grantDecrypt(grantee),iam.Grant.addToPrincipal({grantee,actions:["ssm:DescribeParameters","ssm:GetParameters","ssm:GetParameter","ssm:GetParameterHistory"],resourceArns:[this.parameterArn]})}grantWrite(grantee){return this.encryptionKey&&this.encryptionKey.grantEncrypt(grantee),iam.Grant.addToPrincipal({grantee,actions:["ssm:PutParameter"],resourceArns:[this.parameterArn]})}}var ParameterType;(function(ParameterType2){ParameterType2.STRING="String",ParameterType2.SECURE_STRING="SecureString",ParameterType2.STRING_LIST="StringList",ParameterType2.AWS_EC2_IMAGE_ID="AWS::EC2::Image::Id"})(ParameterType=exports.ParameterType||(exports.ParameterType={}));var ParameterDataType;(function(ParameterDataType2){ParameterDataType2.TEXT="text",ParameterDataType2.AWS_EC2_IMAGE="aws:ec2:image"})(ParameterDataType=exports.ParameterDataType||(exports.ParameterDataType={}));var ParameterTier;(function(ParameterTier2){ParameterTier2.ADVANCED="Advanced",ParameterTier2.INTELLIGENT_TIERING="Intelligent-Tiering",ParameterTier2.STANDARD="Standard"})(ParameterTier=exports.ParameterTier||(exports.ParameterTier={}));class StringParameter extends ParameterBase{constructor(scope,id,props){var _c;super(scope,id,{physicalName:props.parameterName});if(jsiiDeprecationWarnings.aws_cdk_lib_aws_ssm_StringParameterProps(props),props.allowedPattern&&_assertValidValue(props.stringValue,props.allowedPattern),validateParameterName(this.physicalName),props.description&&((_c=props.description)===null||_c===void 0?void 0:_c.length)>1024)throw new Error("Description cannot be longer than 1024 characters.");if(props.type&&props.type===ParameterType.AWS_EC2_IMAGE_ID)throw new Error("The type must either be ParameterType.STRING or ParameterType.STRING_LIST. Did you mean to set dataType: ParameterDataType.AWS_EC2_IMAGE instead?");const resource=new ssm.CfnParameter(this,"Resource",{allowedPattern:props.allowedPattern,description:props.description,name:this.physicalName,tier:props.tier,type:props.type||ParameterType.STRING,dataType:props.dataType,value:props.stringValue});this.parameterName=this.getResourceNameAttribute(resource.ref),this.parameterArn=util_1.arnForParameterName(this,this.parameterName,{physicalName:props.parameterName||util_1.AUTOGEN_MARKER,simpleName:props.simpleName}),this.parameterType=resource.attrType,this.stringValue=resource.attrValue}static fromStringParameterName(scope,id,stringParameterName){return this.fromStringParameterAttributes(scope,id,{parameterName:stringParameterName})}static fromStringParameterAttributes(scope,id,attrs){if(jsiiDeprecationWarnings.aws_cdk_lib_aws_ssm_StringParameterAttributes(attrs),!attrs.parameterName)throw new Error("parameterName cannot be an empty string");const type=attrs.type||ParameterType.STRING,stringValue=attrs.version?new core_1.CfnDynamicReference(core_1.CfnDynamicReferenceService.SSM,`${attrs.parameterName}:${core_1.Tokenization.stringifyNumber(attrs.version)}`).toString():new core_1.CfnParameter(scope,`${id}.Parameter`,{type:`AWS::SSM::Parameter::Value<${type}>`,default:attrs.parameterName}).valueAsString;class Import extends ParameterBase{constructor(){super(...arguments);this.parameterName=attrs.parameterName,this.parameterArn=util_1.arnForParameterName(this,attrs.parameterName,{simpleName:attrs.simpleName}),this.parameterType=type,this.stringValue=stringValue}}return new Import(scope,id)}static fromSecureStringParameterAttributes(scope,id,attrs){jsiiDeprecationWarnings.aws_cdk_lib_aws_ssm_SecureStringParameterAttributes(attrs);const version=attrs.version?core_1.Tokenization.stringifyNumber(attrs.version):"",stringValue=new core_1.CfnDynamicReference(core_1.CfnDynamicReferenceService.SSM_SECURE,`${attrs.parameterName}:${version}`).toString();class Import extends ParameterBase{constructor(){super(...arguments);this.parameterName=attrs.parameterName,this.parameterArn=util_1.arnForParameterName(this,attrs.parameterName,{simpleName:attrs.simpleName}),this.parameterType=ParameterType.SECURE_STRING,this.stringValue=stringValue,this.encryptionKey=attrs.encryptionKey}}return new Import(scope,id)}static valueFromLookup(scope,parameterName){return core_1.ContextProvider.getValue(scope,{provider:cxschema.ContextProvider.SSM_PARAMETER_PROVIDER,props:{parameterName},dummyValue:`dummy-value-for-${parameterName}`}).value}static valueForStringParameter(scope,parameterName,version){return StringParameter.valueForTypedStringParameter(scope,parameterName,ParameterType.STRING,version)}static valueForTypedStringParameter(scope,parameterName,type=ParameterType.STRING,version){jsiiDeprecationWarnings.aws_cdk_lib_aws_ssm_ParameterType(type);const stack=core_1.Stack.of(scope),id=makeIdentityForImportedValue(parameterName),exists=stack.node.tryFindChild(id);return exists?exists.stringValue:this.fromStringParameterAttributes(stack,id,{parameterName,version,type}).stringValue}static valueForSecureStringParameter(scope,parameterName,version){const stack=core_1.Stack.of(scope),id=makeIdentityForImportedValue(parameterName),exists=stack.node.tryFindChild(id);return exists?exists.stringValue:this.fromSecureStringParameterAttributes(stack,id,{parameterName,version}).stringValue}}exports.StringParameter=StringParameter,_a=JSII_RTTI_SYMBOL_1,StringParameter[_a]={fqn:"aws-cdk-lib.aws_ssm.StringParameter",version:"2.20.0"};class StringListParameter extends ParameterBase{constructor(scope,id,props){var _c;super(scope,id,{physicalName:props.parameterName});if(jsiiDeprecationWarnings.aws_cdk_lib_aws_ssm_StringListParameterProps(props),props.stringListValue.find(str=>!core_1.Token.isUnresolved(str)&&str.indexOf(",")!==-1))throw new Error("Values of a StringList SSM Parameter cannot contain the ',' character. Use a string parameter instead.");if(props.allowedPattern&&!core_1.Token.isUnresolved(props.stringListValue)&&props.stringListValue.forEach(str=>_assertValidValue(str,props.allowedPattern)),validateParameterName(this.physicalName),props.description&&((_c=props.description)===null||_c===void 0?void 0:_c.length)>1024)throw new Error("Description cannot be longer than 1024 characters.");const resource=new ssm.CfnParameter(this,"Resource",{allowedPattern:props.allowedPattern,description:props.description,name:this.physicalName,tier:props.tier,type:ParameterType.STRING_LIST,value:props.stringListValue.join(",")});this.parameterName=this.getResourceNameAttribute(resource.ref),this.parameterArn=util_1.arnForParameterName(this,this.parameterName,{physicalName:props.parameterName||util_1.AUTOGEN_MARKER,simpleName:props.simpleName}),this.parameterType=resource.attrType,this.stringListValue=core_1.Fn.split(",",resource.attrValue)}static fromStringListParameterName(scope,id,stringListParameterName){class Import extends ParameterBase{constructor(){super(...arguments);this.parameterName=stringListParameterName,this.parameterArn=util_1.arnForParameterName(this,this.parameterName),this.parameterType=ParameterType.STRING_LIST,this.stringListValue=core_1.Fn.split(",",new core_1.CfnDynamicReference(core_1.CfnDynamicReferenceService.SSM,stringListParameterName).toString())}}return new Import(scope,id)}}exports.StringListParameter=StringListParameter,_b=JSII_RTTI_SYMBOL_1,StringListParameter[_b]={fqn:"aws-cdk-lib.aws_ssm.StringListParameter",version:"2.20.0"};function _assertValidValue(value,allowedPattern){if(!(core_1.Token.isUnresolved(value)||core_1.Token.isUnresolved(allowedPattern))&&!new RegExp(allowedPattern).test(value))throw new Error(`The supplied value (${value}) does not match the specified allowedPattern (${allowedPattern})`)}function makeIdentityForImportedValue(parameterName){return`SsmParameterValue:${parameterName}:C96584B6-F00A-464E-AD19-53AFF4B05118`}function validateParameterName(parameterName){if(!core_1.Token.isUnresolved(parameterName)){if(parameterName.length>2048)throw new Error("name cannot be longer than 2048 characters.");if(!parameterName.match(/^[\/\w.-]+$/))throw new Error(`name must only contain letters, numbers, and the following 4 symbols .-_/; got ${parameterName}`)}}
//# sourceMappingURL=parameter.js.map
