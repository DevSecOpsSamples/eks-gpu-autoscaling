{
  "version": 3,
  "sources": ["parameter.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as cxschema from '../../cloud-assembly-schema';\nimport {\n  CfnDynamicReference, CfnDynamicReferenceService, CfnParameter,\n  ContextProvider, Fn, IResource, Resource, Stack, Token,\n  Tokenization,\n} from '../../core';\nimport { Construct } from 'constructs';\nimport * as ssm from './ssm.generated';\nimport { arnForParameterName, AUTOGEN_MARKER } from './util';\n\n/**\n * An SSM Parameter reference.\n */\nexport interface IParameter extends IResource {\n  /**\n   * The ARN of the SSM Parameter resource.\n   * @attribute\n   */\n  readonly parameterArn: string;\n\n  /**\n   * The name of the SSM Parameter resource.\n   * @attribute\n   */\n  readonly parameterName: string;\n\n  /**\n   * The type of the SSM Parameter resource.\n   * @attribute\n   */\n  readonly parameterType: string;\n\n  /**\n   * Grants read (DescribeParameter, GetParameter, GetParameterHistory) permissions on the SSM Parameter.\n   *\n   * @param grantee the role to be granted read-only access to the parameter.\n   */\n  grantRead(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grants write (PutParameter) permissions on the SSM Parameter.\n   *\n   * @param grantee the role to be granted write access to the parameter.\n   */\n  grantWrite(grantee: iam.IGrantable): iam.Grant;\n}\n\n/**\n * A String SSM Parameter.\n */\nexport interface IStringParameter extends IParameter {\n  /**\n   * The parameter value. Value must not nest another parameter. Do not use {{}} in the value.\n   *\n   * @attribute Value\n   */\n  readonly stringValue: string;\n}\n\n/**\n * A StringList SSM Parameter.\n */\nexport interface IStringListParameter extends IParameter {\n  /**\n   * The parameter value. Value must not nest another parameter. Do not use {{}} in the value. Values in the array\n   * cannot contain commas (``,``).\n   *\n   * @attribute Value\n   */\n  readonly stringListValue: string[];\n}\n\n/**\n * Properties needed to create a new SSM Parameter.\n */\nexport interface ParameterOptions {\n  /**\n   * A regular expression used to validate the parameter value. For example, for String types with values restricted to\n   * numbers, you can specify the following: ``^\\d+$``\n   *\n   * @default no validation is performed\n   */\n  readonly allowedPattern?: string;\n\n  /**\n   * Information about the parameter that you want to add to the system.\n   *\n   * @default none\n   */\n  readonly description?: string;\n\n  /**\n   * The name of the parameter.\n   *\n   * @default - a name will be generated by CloudFormation\n   */\n  readonly parameterName?: string;\n\n  /**\n   * Indicates of the parameter name is a simple name (i.e. does not include \"/\"\n   * separators).\n   *\n   * This is only required only if `parameterName` is a token, which means we\n   * are unable to detect if the name is simple or \"path-like\" for the purpose\n   * of rendering SSM parameter ARNs.\n   *\n   * If `parameterName` is not specified, `simpleName` must be `true` (or\n   * undefined) since the name generated by AWS CloudFormation is always a\n   * simple name.\n   *\n   * @default - auto-detect based on `parameterName`\n   */\n  readonly simpleName?: boolean;\n\n  /**\n   * The tier of the string parameter\n   *\n   * @default - undefined\n   */\n  readonly tier?: ParameterTier;\n}\n\n/**\n * Properties needed to create a String SSM parameter.\n */\nexport interface StringParameterProps extends ParameterOptions {\n  /**\n   * The value of the parameter. It may not reference another parameter and ``{{}}`` cannot be used in the value.\n   */\n  readonly stringValue: string;\n\n  /**\n   * The type of the string parameter\n   *\n   * @default ParameterType.STRING\n   */\n  readonly type?: ParameterType;\n\n  /**\n   * The data type of the parameter, such as `text` or `aws:ec2:image`.\n   *\n   * @default ParameterDataType.TEXT\n   */\n  readonly dataType?: ParameterDataType;\n}\n\n/**\n * Properties needed to create a StringList SSM Parameter\n */\nexport interface StringListParameterProps extends ParameterOptions {\n  /**\n   * The values of the parameter. It may not reference another parameter and ``{{}}`` cannot be used in the value.\n   */\n  readonly stringListValue: string[];\n}\n\n/**\n * Basic features shared across all types of SSM Parameters.\n */\nabstract class ParameterBase extends Resource implements IParameter {\n  public abstract readonly parameterArn: string;\n  public abstract readonly parameterName: string;\n  public abstract readonly parameterType: string;\n\n  /**\n   * The encryption key that is used to encrypt this parameter.\n   *\n   * * @default - default master key\n   */\n  public readonly encryptionKey?: kms.IKey;\n\n  public grantRead(grantee: iam.IGrantable): iam.Grant {\n    if (this.encryptionKey) {\n      this.encryptionKey.grantDecrypt(grantee);\n    }\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: [\n        'ssm:DescribeParameters',\n        'ssm:GetParameters',\n        'ssm:GetParameter',\n        'ssm:GetParameterHistory',\n      ],\n      resourceArns: [this.parameterArn],\n    });\n  }\n\n  public grantWrite(grantee: iam.IGrantable): iam.Grant {\n    if (this.encryptionKey) {\n      this.encryptionKey.grantEncrypt(grantee);\n    }\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['ssm:PutParameter'],\n      resourceArns: [this.parameterArn],\n    });\n  }\n}\n\n/**\n * SSM parameter type\n */\nexport enum ParameterType {\n  /**\n   * String\n   */\n  STRING = 'String',\n  /**\n   * Secure String\n   *\n   * Parameter Store uses an AWS Key Management Service (KMS) customer master key (CMK) to encrypt the parameter value.\n   * Parameters of type SecureString cannot be created directly from a CDK application.\n   */\n  SECURE_STRING = 'SecureString',\n  /**\n   * String List\n   */\n  STRING_LIST = 'StringList',\n  /**\n   * An Amazon EC2 image ID, such as ami-0ff8a91507f77f867\n   */\n  AWS_EC2_IMAGE_ID = 'AWS::EC2::Image::Id',\n}\n\n/**\n * SSM parameter data type\n */\nexport enum ParameterDataType {\n  /**\n   * Text\n   */\n  TEXT = 'text',\n  /**\n   * Aws Ec2 Image\n   */\n  AWS_EC2_IMAGE = 'aws:ec2:image',\n}\n\n/**\n * SSM parameter tier\n */\nexport enum ParameterTier {\n  /**\n   * String\n   */\n  ADVANCED = 'Advanced',\n  /**\n   * String\n   */\n  INTELLIGENT_TIERING = 'Intelligent-Tiering',\n  /**\n   * String\n   */\n  STANDARD = 'Standard',\n}\n\n/**\n * Common attributes for string parameters.\n */\nexport interface CommonStringParameterAttributes {\n  /**\n   * The name of the parameter store value.\n   *\n   * This value can be a token or a concrete string. If it is a concrete string\n   * and includes \"/\" it must also be prefixed with a \"/\" (fully-qualified).\n   */\n  readonly parameterName: string;\n\n  /**\n   * Indicates of the parameter name is a simple name (i.e. does not include \"/\"\n   * separators).\n   *\n   * This is only required only if `parameterName` is a token, which means we\n   * are unable to detect if the name is simple or \"path-like\" for the purpose\n   * of rendering SSM parameter ARNs.\n   *\n   * If `parameterName` is not specified, `simpleName` must be `true` (or\n   * undefined) since the name generated by AWS CloudFormation is always a\n   * simple name.\n   *\n   * @default - auto-detect based on `parameterName`\n   */\n  readonly simpleName?: boolean;\n}\n\n/**\n * Attributes for parameters of various types of string.\n *\n * @see ParameterType\n */\nexport interface StringParameterAttributes extends CommonStringParameterAttributes {\n  /**\n   * The version number of the value you wish to retrieve.\n   *\n   * @default The latest version will be retrieved.\n   */\n  readonly version?: number;\n\n  /**\n   * The type of the string parameter\n   *\n   * @default ParameterType.STRING\n   */\n  readonly type?: ParameterType;\n}\n\n/**\n * Attributes for secure string parameters.\n */\nexport interface SecureStringParameterAttributes extends CommonStringParameterAttributes {\n  /**\n   * The version number of the value you wish to retrieve.\n   *\n   * @default - AWS CloudFormation uses the latest version of the parameter\n   */\n  readonly version?: number;\n\n  /**\n   * The encryption key that is used to encrypt this parameter\n   *\n   * @default - default master key\n   */\n  readonly encryptionKey?: kms.IKey;\n\n}\n\n/**\n * Creates a new String SSM Parameter.\n * @resource AWS::SSM::Parameter\n */\nexport class StringParameter extends ParameterBase implements IStringParameter {\n\n  /**\n   * Imports an external string parameter by name.\n   */\n  public static fromStringParameterName(scope: Construct, id: string, stringParameterName: string): IStringParameter {\n    return this.fromStringParameterAttributes(scope, id, { parameterName: stringParameterName });\n  }\n\n  /**\n   * Imports an external string parameter with name and optional version.\n   */\n  public static fromStringParameterAttributes(scope: Construct, id: string, attrs: StringParameterAttributes): IStringParameter {\n    if (!attrs.parameterName) {\n      throw new Error('parameterName cannot be an empty string');\n    }\n\n    const type = attrs.type || ParameterType.STRING;\n\n    const stringValue = attrs.version\n      ? new CfnDynamicReference(CfnDynamicReferenceService.SSM, `${attrs.parameterName}:${Tokenization.stringifyNumber(attrs.version)}`).toString()\n      : new CfnParameter(scope, `${id}.Parameter`, { type: `AWS::SSM::Parameter::Value<${type}>`, default: attrs.parameterName }).valueAsString;\n\n    class Import extends ParameterBase {\n      public readonly parameterName = attrs.parameterName;\n      public readonly parameterArn = arnForParameterName(this, attrs.parameterName, { simpleName: attrs.simpleName });\n      public readonly parameterType = type;\n      public readonly stringValue = stringValue;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * Imports a secure string parameter from the SSM parameter store.\n   */\n  public static fromSecureStringParameterAttributes(scope: Construct, id: string, attrs: SecureStringParameterAttributes): IStringParameter {\n    const version = attrs.version ? Tokenization.stringifyNumber(attrs.version) : '';\n    const stringValue = new CfnDynamicReference(CfnDynamicReferenceService.SSM_SECURE, `${attrs.parameterName}:${version}`).toString();\n\n    class Import extends ParameterBase {\n      public readonly parameterName = attrs.parameterName;\n      public readonly parameterArn = arnForParameterName(this, attrs.parameterName, { simpleName: attrs.simpleName });\n      public readonly parameterType = ParameterType.SECURE_STRING;\n      public readonly stringValue = stringValue;\n      public readonly encryptionKey = attrs.encryptionKey;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * Reads the value of an SSM parameter during synthesis through an\n   * environmental context provider.\n   *\n   * Requires that the stack this scope is defined in will have explicit\n   * account/region information. Otherwise, it will fail during synthesis.\n   */\n  public static valueFromLookup(scope: Construct, parameterName: string): string {\n    const value = ContextProvider.getValue(scope, {\n      provider: cxschema.ContextProvider.SSM_PARAMETER_PROVIDER,\n      props: { parameterName },\n      dummyValue: `dummy-value-for-${parameterName}`,\n    }).value;\n\n    return value;\n  }\n\n  /**\n   * Returns a token that will resolve (during deployment) to the string value of an SSM string parameter.\n   * @param scope Some scope within a stack\n   * @param parameterName The name of the SSM parameter.\n   * @param version The parameter version (recommended in order to ensure that the value won't change during deployment)\n   */\n  public static valueForStringParameter(scope: Construct, parameterName: string, version?: number): string {\n    return StringParameter.valueForTypedStringParameter(scope, parameterName, ParameterType.STRING, version);\n  }\n\n  /**\n   * Returns a token that will resolve (during deployment) to the string value of an SSM string parameter.\n   * @param scope Some scope within a stack\n   * @param parameterName The name of the SSM parameter.\n   * @param type The type of the SSM parameter.\n   * @param version The parameter version (recommended in order to ensure that the value won't change during deployment)\n   */\n  public static valueForTypedStringParameter(scope: Construct, parameterName: string, type = ParameterType.STRING, version?: number): string {\n    const stack = Stack.of(scope);\n    const id = makeIdentityForImportedValue(parameterName);\n    const exists = stack.node.tryFindChild(id) as IStringParameter;\n\n    if (exists) { return exists.stringValue; }\n\n    return this.fromStringParameterAttributes(stack, id, { parameterName, version, type }).stringValue;\n  }\n\n  /**\n   * Returns a token that will resolve (during deployment)\n   * @param scope Some scope within a stack\n   * @param parameterName The name of the SSM parameter\n   * @param version The parameter version (required for secure strings)\n   */\n  public static valueForSecureStringParameter(scope: Construct, parameterName: string, version: number): string {\n    const stack = Stack.of(scope);\n    const id = makeIdentityForImportedValue(parameterName);\n    const exists = stack.node.tryFindChild(id) as IStringParameter;\n    if (exists) { return exists.stringValue; }\n\n    return this.fromSecureStringParameterAttributes(stack, id, { parameterName, version }).stringValue;\n  }\n\n  public readonly parameterArn: string;\n  public readonly parameterName: string;\n  public readonly parameterType: string;\n  public readonly stringValue: string;\n\n  constructor(scope: Construct, id: string, props: StringParameterProps) {\n    super(scope, id, {\n      physicalName: props.parameterName,\n    });\n\n    if (props.allowedPattern) {\n      _assertValidValue(props.stringValue, props.allowedPattern);\n    }\n\n    validateParameterName(this.physicalName);\n\n    if (props.description && props.description?.length > 1024) {\n      throw new Error('Description cannot be longer than 1024 characters.');\n    }\n\n    if (props.type && props.type === ParameterType.AWS_EC2_IMAGE_ID) {\n      throw new Error('The type must either be ParameterType.STRING or ParameterType.STRING_LIST. Did you mean to set dataType: ParameterDataType.AWS_EC2_IMAGE instead?');\n    }\n\n    const resource = new ssm.CfnParameter(this, 'Resource', {\n      allowedPattern: props.allowedPattern,\n      description: props.description,\n      name: this.physicalName,\n      tier: props.tier,\n      type: props.type || ParameterType.STRING,\n      dataType: props.dataType,\n      value: props.stringValue,\n    });\n\n    this.parameterName = this.getResourceNameAttribute(resource.ref);\n    this.parameterArn = arnForParameterName(this, this.parameterName, {\n      physicalName: props.parameterName || AUTOGEN_MARKER,\n      simpleName: props.simpleName,\n    });\n\n    this.parameterType = resource.attrType;\n    this.stringValue = resource.attrValue;\n  }\n}\n\n/**\n * Creates a new StringList SSM Parameter.\n * @resource AWS::SSM::Parameter\n */\nexport class StringListParameter extends ParameterBase implements IStringListParameter {\n\n  /**\n   * Imports an external parameter of type string list.\n   * Returns a token and should not be parsed.\n   */\n  public static fromStringListParameterName(scope: Construct, id: string, stringListParameterName: string): IStringListParameter {\n    class Import extends ParameterBase {\n      public readonly parameterName = stringListParameterName;\n      public readonly parameterArn = arnForParameterName(this, this.parameterName);\n      public readonly parameterType = ParameterType.STRING_LIST;\n      public readonly stringListValue = Fn.split(',', new CfnDynamicReference(CfnDynamicReferenceService.SSM, stringListParameterName).toString());\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly parameterArn: string;\n  public readonly parameterName: string;\n  public readonly parameterType: string;\n  public readonly stringListValue: string[];\n\n  constructor(scope: Construct, id: string, props: StringListParameterProps) {\n    super(scope, id, {\n      physicalName: props.parameterName,\n    });\n\n    if (props.stringListValue.find(str => !Token.isUnresolved(str) && str.indexOf(',') !== -1)) {\n      throw new Error('Values of a StringList SSM Parameter cannot contain the \\',\\' character. Use a string parameter instead.');\n    }\n\n    if (props.allowedPattern && !Token.isUnresolved(props.stringListValue)) {\n      props.stringListValue.forEach(str => _assertValidValue(str, props.allowedPattern!));\n    }\n\n    validateParameterName(this.physicalName);\n\n    if (props.description && props.description?.length > 1024) {\n      throw new Error('Description cannot be longer than 1024 characters.');\n    }\n\n    const resource = new ssm.CfnParameter(this, 'Resource', {\n      allowedPattern: props.allowedPattern,\n      description: props.description,\n      name: this.physicalName,\n      tier: props.tier,\n      type: ParameterType.STRING_LIST,\n      value: props.stringListValue.join(','),\n    });\n    this.parameterName = this.getResourceNameAttribute(resource.ref);\n    this.parameterArn = arnForParameterName(this, this.parameterName, {\n      physicalName: props.parameterName || AUTOGEN_MARKER,\n      simpleName: props.simpleName,\n    });\n\n    this.parameterType = resource.attrType;\n    this.stringListValue = Fn.split(',', resource.attrValue);\n  }\n}\n\n/**\n * Validates whether a supplied value conforms to the allowedPattern, granted neither is an unresolved token.\n *\n * @param value          the value to be validated.\n * @param allowedPattern the regular expression to use for validation.\n *\n * @throws if the ``value`` does not conform to the ``allowedPattern`` and neither is an unresolved token (per\n *         ``cdk.unresolved``).\n */\nfunction _assertValidValue(value: string, allowedPattern: string): void {\n  if (Token.isUnresolved(value) || Token.isUnresolved(allowedPattern)) {\n    // Unable to perform validations against unresolved tokens\n    return;\n  }\n  if (!new RegExp(allowedPattern).test(value)) {\n    throw new Error(`The supplied value (${value}) does not match the specified allowedPattern (${allowedPattern})`);\n  }\n}\n\nfunction makeIdentityForImportedValue(parameterName: string) {\n  return `SsmParameterValue:${parameterName}:C96584B6-F00A-464E-AD19-53AFF4B05118`;\n}\n\nfunction validateParameterName(parameterName: string) {\n  if (Token.isUnresolved(parameterName)) { return; }\n  if (parameterName.length > 2048) {\n    throw new Error('name cannot be longer than 2048 characters.');\n  }\n  if (!parameterName.match(/^[\\/\\w.-]+$/)) {\n    throw new Error(`name must only contain letters, numbers, and the following 4 symbols .-_/; got ${parameterName}`);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
