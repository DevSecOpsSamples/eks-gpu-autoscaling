{
  "version": 3,
  "sources": ["integ.parameter-store-string.lit.ts"],
  "sourcesContent": ["/// !cdk-integ *\nimport * as cdk from '../../core';\nimport * as ssm from '../lib';\n\nclass CreatingStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    new ssm.StringParameter(this, 'String', {\n      parameterName: '/My/Public/Parameter',\n      stringValue: 'abcdef',\n    });\n  }\n}\n\nclass UsingStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    // Parameter that contains version number, will be used to pass\n    // version value from token.\n    const parameterVersion = new cdk.CfnParameter(this, 'MyParameterVersion', {\n      type: 'Number',\n      default: 1,\n    }).valueAsNumber;\n\n    /// !show\n    // Retrieve the latest value of the non-secret parameter\n    // with name \"/My/String/Parameter\".\n    const stringValue = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValue', {\n      parameterName: '/My/Public/Parameter',\n      // 'version' can be specified but is optional.\n    }).stringValue;\n    const stringValueVersionFromToken = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValueVersionFromToken', {\n      parameterName: '/My/Public/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    }).stringValue;\n\n    // Retrieve a specific version of the secret (SecureString) parameter.\n    // 'version' is always required.\n    const secretValue = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValue', {\n      parameterName: '/My/Secret/Parameter',\n      version: 5,\n    });\n    const secretValueVersionFromToken = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValueVersionFromToken', {\n      parameterName: '/My/Secret/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    });\n\n    /// !hide\n\n    new cdk.CfnResource(this, 'Dummy', { type: 'AWS::SNS::Topic' });\n    new cdk.CfnOutput(this, 'TheValue', { value: stringValue });\n    new cdk.CfnOutput(this, 'TheValueVersionFromToken', { value: stringValueVersionFromToken });\n\n    // Cannot be provisioned so cannot be actually used\n    Array.isArray(secretValue);\n    Array.isArray(secretValueVersionFromToken);\n  }\n}\n\nconst app = new cdk.App();\n\nconst creating = new CreatingStack(app, 'sspms-creating');\nconst using = new UsingStack(app, 'sspms-using');\nusing.addDependency(creating);\n\napp.synth();\n"],
  "mappings": "oEACA,KAAA,KAAA,QAAA,YAAA,EACA,IAAA,QAAA,QAAA,EAEA,MAAM,qBAAsB,KAAI,KAAK,CACnC,YAAY,MAAgB,GAAU,CACpC,MAAM,MAAO,EAAE,EAEf,GAAI,KAAI,gBAAgB,KAAM,SAAU,CACtC,cAAe,uBACf,YAAa,SACd,GAIL,MAAM,kBAAmB,KAAI,KAAK,CAChC,YAAY,MAAgB,GAAU,CACpC,MAAM,MAAO,EAAE,EAIf,KAAM,kBAAmB,GAAI,KAAI,aAAa,KAAM,qBAAsB,CACxE,KAAM,SACN,QAAS,EACV,EAAE,cAKG,YAAc,IAAI,gBAAgB,8BAA8B,KAAM,UAAW,CACrF,cAAe,uBAEhB,EAAE,YACG,4BAA8B,IAAI,gBAAgB,8BAA8B,KAAM,0BAA2B,CACrH,cAAe,uBAEf,QAAS,iBACV,EAAE,YAIG,YAAc,IAAI,gBAAgB,oCAAoC,KAAM,gBAAiB,CACjG,cAAe,uBACf,QAAS,EACV,EACK,4BAA8B,IAAI,gBAAgB,oCAAoC,KAAM,gCAAiC,CACjI,cAAe,uBAEf,QAAS,iBACV,EAID,GAAI,KAAI,YAAY,KAAM,QAAS,CAAE,KAAM,iBAAiB,CAAE,EAC9D,GAAI,KAAI,UAAU,KAAM,WAAY,CAAE,MAAO,WAAW,CAAE,EAC1D,GAAI,KAAI,UAAU,KAAM,2BAA4B,CAAE,MAAO,2BAA2B,CAAE,EAG1F,MAAM,QAAQ,WAAW,EACzB,MAAM,QAAQ,2BAA2B,GAI7C,KAAM,KAAM,GAAI,KAAI,IAEd,SAAW,GAAI,eAAc,IAAK,gBAAgB,EAClD,MAAQ,GAAI,YAAW,IAAK,aAAa,EAC/C,MAAM,cAAc,QAAQ,EAE5B,IAAI,MAAK",
  "names": []
}
