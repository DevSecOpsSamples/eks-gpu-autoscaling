{
  "version": 3,
  "sources": ["redshift-canned-metrics.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nexport class RedshiftMetrics {\n  public static commitQueueLengthAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'CommitQueueLength',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static concurrencyScalingActiveClustersAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'ConcurrencyScalingActiveClusters',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static concurrencyScalingSecondsAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'ConcurrencyScalingSeconds',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuUtilizationAverage(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static cpuUtilizationAverage(dimensions: { ClusterIdentifier: string, NodeID: string }): MetricWithDims<{ ClusterIdentifier: string, NodeID: string }>;\n  public static cpuUtilizationAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'CPUUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static databaseConnectionsAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'DatabaseConnections',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static healthStatusSum(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'HealthStatus',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static maintenanceModeSum(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'MaintenanceMode',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static maxConfiguredConcurrencyScalingClustersSum(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'MaxConfiguredConcurrencyScalingClusters',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static networkReceiveThroughputSum(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static networkReceiveThroughputSum(dimensions: { ClusterIdentifier: string, NodeID: string }): MetricWithDims<{ ClusterIdentifier: string, NodeID: string }>;\n  public static networkReceiveThroughputSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'NetworkReceiveThroughput',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static networkTransmitThroughputSum(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static networkTransmitThroughputSum(dimensions: { ClusterIdentifier: string, NodeID: string }): MetricWithDims<{ ClusterIdentifier: string, NodeID: string }>;\n  public static networkTransmitThroughputSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'NetworkTransmitThroughput',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static numExceededSchemaQuotasAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'NumExceededSchemaQuotas',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static percentageDiskSpaceUsedAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'PercentageDiskSpaceUsed',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static percentageQuotaUsedAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'PercentageQuotaUsed',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static queriesCompletedPerSecondSum(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static queriesCompletedPerSecondSum(dimensions: { ClusterIdentifier: string, wlmid: string }): MetricWithDims<{ ClusterIdentifier: string, wlmid: string }>;\n  public static queriesCompletedPerSecondSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'QueriesCompletedPerSecond',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static queryDurationAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'QueryDuration',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static queryRuntimeBreakdownSum(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'QueryRuntimeBreakdown',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static readIopsSum(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static readIopsSum(dimensions: { ClusterIdentifier: string, NodeID: string }): MetricWithDims<{ ClusterIdentifier: string, NodeID: string }>;\n  public static readIopsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'ReadIOPS',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static readLatencyAverage(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static readLatencyAverage(dimensions: { ClusterIdentifier: string, NodeID: string }): MetricWithDims<{ ClusterIdentifier: string, NodeID: string }>;\n  public static readLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'ReadLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static readThroughputSum(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static readThroughputSum(dimensions: { ClusterIdentifier: string, NodeID: string }): MetricWithDims<{ ClusterIdentifier: string, NodeID: string }>;\n  public static readThroughputSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'ReadThroughput',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static storageUsedAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'StorageUsed',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static totalTableCountAverage(dimensions: { ClusterIdentifier: string }) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'TotalTableCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static wlmQueriesCompletedPerSecondAverage(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static wlmQueriesCompletedPerSecondAverage(dimensions: { ClusterIdentifier: string, wlmid: string }): MetricWithDims<{ ClusterIdentifier: string, wlmid: string }>;\n  public static wlmQueriesCompletedPerSecondAverage(dimensions: { ClusterIdentifier: string, QueueName: string }): MetricWithDims<{ ClusterIdentifier: string, QueueName: string }>;\n  public static wlmQueriesCompletedPerSecondAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'WLMQueriesCompletedPerSecond',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static wlmQueryDurationAverage(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static wlmQueryDurationAverage(dimensions: { ClusterIdentifier: string, wlmid: string }): MetricWithDims<{ ClusterIdentifier: string, wlmid: string }>;\n  public static wlmQueryDurationAverage(dimensions: { ClusterIdentifier: string, QueueName: string }): MetricWithDims<{ ClusterIdentifier: string, QueueName: string }>;\n  public static wlmQueryDurationAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'WLMQueryDuration',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static wlmQueueLengthSum(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static wlmQueueLengthSum(dimensions: { ClusterIdentifier: string, QueueName: string }): MetricWithDims<{ ClusterIdentifier: string, QueueName: string }>;\n  public static wlmQueueLengthSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'WLMQueueLength',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static writeIopsSum(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static writeIopsSum(dimensions: { ClusterIdentifier: string, NodeID: string }): MetricWithDims<{ ClusterIdentifier: string, NodeID: string }>;\n  public static writeIopsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'WriteIOPS',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static writeLatencyAverage(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static writeLatencyAverage(dimensions: { ClusterIdentifier: string, NodeID: string }): MetricWithDims<{ ClusterIdentifier: string, NodeID: string }>;\n  public static writeLatencyAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'WriteLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static writeThroughputSum(dimensions: { ClusterIdentifier: string }): MetricWithDims<{ ClusterIdentifier: string }>;\n  public static writeThroughputSum(dimensions: { ClusterIdentifier: string, NodeID: string }): MetricWithDims<{ ClusterIdentifier: string, NodeID: string }>;\n  public static writeThroughputSum(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'WriteThroughput',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static wlmQueueWaitTimeAverage(dimensions: { ClusterIdentifier: string, wlmid: string }): MetricWithDims<{ ClusterIdentifier: string, wlmid: string }>;\n  public static wlmQueueWaitTimeAverage(dimensions: { ClusterIdentifier: string, QueueName: string }): MetricWithDims<{ ClusterIdentifier: string, QueueName: string }>;\n  public static wlmQueueWaitTimeAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'WLMQueueWaitTime',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static wlmRunningQueriesAverage(dimensions: { ClusterIdentifier: string, wlmid: string }): MetricWithDims<{ ClusterIdentifier: string, wlmid: string }>;\n  public static wlmRunningQueriesAverage(dimensions: { ClusterIdentifier: string, QueueName: string }): MetricWithDims<{ ClusterIdentifier: string, QueueName: string }>;\n  public static wlmRunningQueriesAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/Redshift',\n      metricName: 'WLMRunningQueries',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n}\ntype MetricWithDims<D> = { namespace: string, metricName: string, statistic: string, dimensionsMap: D };\n"],
  "mappings": "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",
  "names": []
}
