{
  "version": 3,
  "sources": ["resource.ts"],
  "sourcesContent": ["import * as dynamodb from '../../aws-dynamodb';\nimport * as ec2 from '../../aws-ec2';\nimport * as efs from '../../aws-efs';\nimport * as rds from '../../aws-rds';\nimport { Stack } from '../../core';\nimport { Construct } from 'constructs';\n\n/**\n * An operation that is applied to a key-value pair\n */\nexport enum TagOperation {\n  /**\n   * StringEquals\n   */\n  STRING_EQUALS = 'STRINGEQUALS',\n\n  /**\n   * Dummy member\n   */\n  DUMMY = 'dummy'\n}\n\n/**\n * A tag condition\n */\nexport interface TagCondition {\n  /**\n   * The key in a key-value pair.\n   *\n   * For example, in `\"ec2:ResourceTag/Department\": \"accounting\"`,\n   * `ec2:ResourceTag/Department` is the key.\n   */\n  readonly key: string;\n\n  /**\n   * An operation that is applied to a key-value pair used to filter\n   * resources in a selection.\n   *\n   * @default STRING_EQUALS\n   */\n  readonly operation?: TagOperation;\n\n  /**\n   * The value in a key-value pair.\n   *\n   * For example, in `\"ec2:ResourceTag/Department\": \"accounting\"`,\n   * `accounting` is the value.\n   */\n  readonly value: string;\n}\n\n/**\n * A resource to backup\n */\nexport class BackupResource {\n  /**\n   * Adds all supported resources in a construct\n   *\n   * @param construct The construct containing resources to backup\n   */\n  public static fromConstruct(construct: Construct) {\n    return new BackupResource(undefined, undefined, construct);\n  }\n\n  /**\n   * A DynamoDB table\n   */\n  public static fromDynamoDbTable(table: dynamodb.ITable) {\n    return BackupResource.fromArn(table.tableArn);\n  }\n\n  /**\n   * An EC2 instance\n   */\n  public static fromEc2Instance(instance: ec2.IInstance) {\n    return BackupResource.fromArn(Stack.of(instance).formatArn({\n      service: 'ec2',\n      resource: 'instance',\n      resourceName: instance.instanceId,\n    }));\n  }\n\n  /**\n   * An EFS file system\n   */\n  public static fromEfsFileSystem(fileSystem: efs.IFileSystem) {\n    return BackupResource.fromArn(Stack.of(fileSystem).formatArn({\n      service: 'elasticfilesystem',\n      resource: 'file-system',\n      resourceName: fileSystem.fileSystemId,\n    }));\n  }\n\n  /**\n   * A RDS database instance\n   */\n  public static fromRdsDatabaseInstance(instance: rds.IDatabaseInstance) {\n    return BackupResource.fromArn(instance.instanceArn);\n  }\n\n  /**\n   * A list of ARNs or match patterns such as\n   * `arn:aws:ec2:us-east-1:123456789012:volume/*`\n   */\n  public static fromArn(arn: string) {\n    return new BackupResource(arn);\n  }\n\n  /**\n   * A tag condition\n   */\n  public static fromTag(key: string, value: string, operation?: TagOperation) {\n    return new BackupResource(undefined, {\n      key,\n      value,\n      operation,\n    });\n  }\n\n  /**\n   * A resource\n   */\n  public readonly resource?: string;\n\n  /**\n   * A condition on a tag\n   */\n  public readonly tagCondition?: TagCondition;\n\n  /**\n   * A construct\n   */\n  public readonly construct?: Construct;\n\n  constructor(resource?: string, tagCondition?: TagCondition, construct?: Construct) {\n    this.resource = resource;\n    this.tagCondition = tagCondition;\n    this.construct = construct;\n  }\n}\n"],
  "mappings": "0OAIA,OAAA,QAAA,YAAA,EAMA,GAAY,cAAZ,AAAA,UAAY,cAAY,CAItB,cAAA,cAAA,eAKA,cAAA,MAAA,OACF,GAVY,aAAA,QAAA,cAAA,SAAA,aAAY,CAAA,EAAA,EA4CxB,MAAa,cAAc,CAgFzB,YAAY,SAAmB,aAA6B,UAAqB,2EAC/E,KAAK,SAAW,SAChB,KAAK,aAAe,aACpB,KAAK,UAAY,gBA7EL,eAAc,UAAoB,CAC9C,MAAO,IAAI,gBAAe,OAAW,OAAW,SAAS,QAM7C,mBAAkB,MAAsB,uEAC7C,eAAe,QAAQ,MAAM,QAAQ,QAMhC,iBAAgB,SAAuB,wEAC5C,eAAe,QAAQ,OAAA,MAAM,GAAG,QAAQ,EAAE,UAAU,CACzD,QAAS,MACT,SAAU,WACV,aAAc,SAAS,WACxB,CAAC,QAMU,mBAAkB,WAA2B,4EAClD,eAAe,QAAQ,OAAA,MAAM,GAAG,UAAU,EAAE,UAAU,CAC3D,QAAS,oBACT,SAAU,cACV,aAAc,WAAW,aAC1B,CAAC,QAMU,yBAAwB,SAA+B,gFAC5D,eAAe,QAAQ,SAAS,WAAW,QAOtC,SAAQ,IAAW,CAC/B,MAAO,IAAI,gBAAe,GAAG,QAMjB,SAAQ,IAAa,MAAe,UAAwB,+EACjE,GAAI,gBAAe,OAAW,CACnC,IACA,MACA,UACD,GA9DL,QAAA,eAAA",
  "names": []
}
