{
  "version": 3,
  "sources": ["alarm-base.ts"],
  "sourcesContent": ["import { IResource, Resource } from '../../core';\nimport { IAlarmAction } from './alarm-action';\n\n/**\n * Interface for Alarm Rule.\n */\nexport interface IAlarmRule {\n\n  /**\n   * serialized representation of Alarm Rule to be used when building the Composite Alarm resource.\n   */\n  renderAlarmRule(): string;\n\n}\n\n/**\n * Represents a CloudWatch Alarm\n */\nexport interface IAlarm extends IAlarmRule, IResource {\n  /**\n   * Alarm ARN (i.e. arn:aws:cloudwatch:<region>:<account-id>:alarm:Foo)\n   *\n   * @attribute\n   */\n  readonly alarmArn: string;\n\n  /**\n   * Name of the alarm\n   *\n   * @attribute\n   */\n  readonly alarmName: string;\n}\n\n/**\n * The base class for Alarm and CompositeAlarm resources.\n */\nexport abstract class AlarmBase extends Resource implements IAlarm {\n\n  /**\n   * @attribute\n   */\n  public abstract readonly alarmArn: string;\n  public abstract readonly alarmName: string;\n\n  protected alarmActionArns?: string[];\n  protected insufficientDataActionArns?: string[];\n  protected okActionArns?: string[];\n\n  /**\n   * AlarmRule indicating ALARM state for Alarm.\n   */\n  public renderAlarmRule(): string {\n    return `ALARM(\"${this.alarmArn}\")`;\n  }\n\n  /**\n   * Trigger this action if the alarm fires\n   *\n   * Typically the ARN of an SNS topic or ARN of an AutoScaling policy.\n   */\n  public addAlarmAction(...actions: IAlarmAction[]) {\n    if (this.alarmActionArns === undefined) {\n      this.alarmActionArns = [];\n    }\n\n    this.alarmActionArns.push(...actions.map(a => a.bind(this, this).alarmActionArn));\n  }\n\n  /**\n   * Trigger this action if there is insufficient data to evaluate the alarm\n   *\n   * Typically the ARN of an SNS topic or ARN of an AutoScaling policy.\n   */\n  public addInsufficientDataAction(...actions: IAlarmAction[]) {\n    if (this.insufficientDataActionArns === undefined) {\n      this.insufficientDataActionArns = [];\n    }\n\n    this.insufficientDataActionArns.push(...actions.map(a => a.bind(this, this).alarmActionArn));\n  }\n\n  /**\n   * Trigger this action if the alarm returns from breaching state into ok state\n   *\n   * Typically the ARN of an SNS topic or ARN of an AutoScaling policy.\n   */\n  public addOkAction(...actions: IAlarmAction[]) {\n    if (this.okActionArns === undefined) {\n      this.okActionArns = [];\n    }\n\n    this.okActionArns.push(...actions.map(a => a.bind(this, this).alarmActionArn));\n  }\n\n}\n"],
  "mappings": "gNAAA,OAAA,QAAA,YAAA,EAqCA,MAAsB,iBAAkB,QAAA,QAAQ,CAevC,iBAAe,CACpB,MAAO,UAAU,KAAK,aAQjB,kBAAkB,QAAuB,0EAC1C,KAAK,kBAAoB,QAC3B,MAAK,gBAAkB,CAAA,GAGzB,KAAK,gBAAgB,KAAK,GAAG,QAAQ,IAAI,GAAK,EAAE,KAAK,KAAM,IAAI,EAAE,cAAc,CAAC,EAQ3E,6BAA6B,QAAuB,0EACrD,KAAK,6BAA+B,QACtC,MAAK,2BAA6B,CAAA,GAGpC,KAAK,2BAA2B,KAAK,GAAG,QAAQ,IAAI,GAAK,EAAE,KAAK,KAAM,IAAI,EAAE,cAAc,CAAC,EAQtF,eAAe,QAAuB,0EACvC,KAAK,eAAiB,QACxB,MAAK,aAAe,CAAA,GAGtB,KAAK,aAAa,KAAK,GAAG,QAAQ,IAAI,GAAK,EAAE,KAAK,KAAM,IAAI,EAAE,cAAc,CAAC,GAvDjF,QAAA,UAAA",
  "names": []
}
