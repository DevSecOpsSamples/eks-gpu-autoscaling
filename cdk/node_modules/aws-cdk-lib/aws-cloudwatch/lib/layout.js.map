{
  "version": 3,
  "sources": ["layout.ts"],
  "sourcesContent": ["import { GRID_WIDTH, IWidget } from './widget';\n\n// This file contains widgets that exist for layout purposes\n\n/**\n * A widget that contains other widgets in a horizontal row\n *\n * Widgets will be laid out next to each other\n */\nexport class Row implements IWidget {\n  public readonly width: number;\n  public readonly height: number;\n\n  /**\n   * List of contained widgets\n   */\n  private readonly widgets: IWidget[];\n\n  /**\n   * Relative position of each widget inside this row\n   */\n  private readonly offsets: Vector[] = [];\n\n  constructor(...widgets: IWidget[]) {\n    this.widgets = widgets;\n\n    this.width = 0;\n    this.height = 0;\n    let x = 0;\n    let y = 0;\n    for (const widget of widgets) {\n      // See if we need to horizontally wrap to add this widget\n      if (x + widget.width > GRID_WIDTH) {\n        y = this.height;\n        x = 0;\n      }\n\n      this.offsets.push({ x, y });\n      this.width = Math.max(this.width, x + widget.width);\n      this.height = Math.max(this.height, y + widget.height);\n\n      x += widget.width;\n    }\n  }\n\n  public position(x: number, y: number): void {\n    for (let i = 0; i < this.widgets.length; i++) {\n      this.widgets[i].position(x + this.offsets[i].x, y + this.offsets[i].y);\n    }\n  }\n\n  public toJson(): any[] {\n    const ret: any[] = [];\n    for (const widget of this.widgets) {\n      ret.push(...widget.toJson());\n    }\n    return ret;\n  }\n}\n\n/**\n * A widget that contains other widgets in a vertical column\n *\n * Widgets will be laid out next to each other\n */\nexport class Column implements IWidget {\n  public readonly width: number;\n  public readonly height: number;\n\n  /**\n   * List of contained widgets\n   */\n  private readonly widgets: IWidget[];\n\n  constructor(...widgets: IWidget[]) {\n    this.widgets = widgets;\n\n    // There's no vertical wrapping so this one's a lot easier\n    this.width = Math.max(...this.widgets.map(w => w.width));\n    this.height = sum(...this.widgets.map(w => w.height));\n  }\n\n  public position(x: number, y: number): void {\n    let widgetY = y;\n    for (const widget of this.widgets) {\n      widget.position(x, widgetY);\n      widgetY += widget.height;\n    }\n  }\n\n  public toJson(): any[] {\n    const ret: any[] = [];\n    for (const widget of this.widgets) {\n      ret.push(...widget.toJson());\n    }\n    return ret;\n  }\n}\n\n/**\n * Props of the spacer\n */\nexport interface SpacerProps {\n  /**\n   * Width of the spacer\n   *\n   * @default 1\n   */\n  readonly width?: number;\n\n  /**\n   * Height of the spacer\n   *\n   * @default: 1\n   */\n  readonly height?: number;\n}\n\n/**\n * A widget that doesn't display anything but takes up space\n */\nexport class Spacer implements IWidget {\n  public readonly width: number;\n  public readonly height: number;\n\n  constructor(props: SpacerProps = {}) {\n    this.width = props.width || 1;\n    this.height = props.height || 1;\n  }\n\n  public position(_x: number, _y: number): void {\n    // Don't need to do anything, not a physical widget\n  }\n\n  public toJson(): any[] {\n    return [];\n  }\n}\n\n/**\n * Interface representing a 2D vector (for internal use)\n */\ninterface Vector {\n  x: number;\n  y: number;\n}\n\n/**\n * Return the sum of a list of numbers\n */\nfunction sum(...xs: number[]) {\n  let ret = 0;\n  for (const x of xs) {\n    ret += x;\n  }\n  return ret;\n}\n"],
  "mappings": "8OAAA,SAAA,QAAA,UAAA,EASA,MAAa,GAAG,CAcd,eAAe,QAAkB,CAFhB,KAAA,QAAoB,CAAA,sEAGnC,KAAK,QAAU,QAEf,KAAK,MAAQ,EACb,KAAK,OAAS,EACd,GAAI,GAAI,EACJ,EAAI,EACR,SAAW,UAAU,SAEnB,AAAI,EAAI,OAAO,MAAQ,SAAA,YACrB,GAAI,KAAK,OACT,EAAI,GAGN,KAAK,QAAQ,KAAK,CAAE,EAAG,CAAC,CAAE,EAC1B,KAAK,MAAQ,KAAK,IAAI,KAAK,MAAO,EAAI,OAAO,KAAK,EAClD,KAAK,OAAS,KAAK,IAAI,KAAK,OAAQ,EAAI,OAAO,MAAM,EAErD,GAAK,OAAO,MAIT,SAAS,EAAW,EAAS,CAClC,OAAS,GAAI,EAAG,EAAI,KAAK,QAAQ,OAAQ,IACvC,KAAK,QAAQ,GAAG,SAAS,EAAI,KAAK,QAAQ,GAAG,EAAG,EAAI,KAAK,QAAQ,GAAG,CAAC,EAIlE,QAAM,CACX,KAAM,KAAa,CAAA,EACnB,SAAW,UAAU,MAAK,QACxB,IAAI,KAAK,GAAG,OAAO,OAAM,CAAE,EAE7B,MAAO,MA/CX,QAAA,IAAA,0FAwDA,MAAa,MAAM,CASjB,eAAe,QAAkB,qEAC/B,KAAK,QAAU,QAGf,KAAK,MAAQ,KAAK,IAAI,GAAG,KAAK,QAAQ,IAAI,GAAK,EAAE,KAAK,CAAC,EACvD,KAAK,OAAS,IAAI,GAAG,KAAK,QAAQ,IAAI,GAAK,EAAE,MAAM,CAAC,EAG/C,SAAS,EAAW,EAAS,CAClC,GAAI,SAAU,EACd,SAAW,UAAU,MAAK,QACxB,OAAO,SAAS,EAAG,OAAO,EAC1B,SAAW,OAAO,OAIf,QAAM,CACX,KAAM,KAAa,CAAA,EACnB,SAAW,UAAU,MAAK,QACxB,IAAI,KAAK,GAAG,OAAO,OAAM,CAAE,EAE7B,MAAO,MA9BX,QAAA,OAAA,mGAwDA,MAAa,MAAM,CAIjB,YAAY,MAAqB,CAAA,EAAE,uEACjC,KAAK,MAAQ,MAAM,OAAS,EAC5B,KAAK,OAAS,MAAM,QAAU,EAGzB,SAAS,GAAY,GAAU,EAI/B,QAAM,CACX,MAAO,CAAA,GAdX,QAAA,OAAA,mGA6BA,gBAAgB,GAAY,CAC1B,GAAI,KAAM,EACV,SAAW,KAAK,IACd,KAAO,EAET,MAAO,IACT",
  "names": []
}
