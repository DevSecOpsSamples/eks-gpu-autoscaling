{
  "version": 3,
  "sources": ["metric.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as cdk from '../../core';\nimport { Construct, IConstruct } from 'constructs';\nimport { Alarm, ComparisonOperator, TreatMissingData } from './alarm';\nimport { Dimension, IMetric, MetricAlarmConfig, MetricConfig, MetricGraphConfig, Unit } from './metric-types';\nimport { dispatchMetric, metricKey } from './private/metric-util';\nimport { normalizeStatistic, parseStatistic } from './private/statistic';\n\nexport type DimensionHash = {[dim: string]: any};\n\nexport type DimensionsMap = { [dim: string]: string };\n\n/**\n * Options shared by most methods accepting metric options\n */\nexport interface CommonMetricOptions {\n  /**\n   * The period over which the specified statistic is applied.\n   *\n   * @default Duration.minutes(5)\n   */\n  readonly period?: cdk.Duration;\n\n  /**\n   * What function to use for aggregating.\n   *\n   * Can be one of the following:\n   *\n   * - \"Minimum\" | \"min\"\n   * - \"Maximum\" | \"max\"\n   * - \"Average\" | \"avg\"\n   * - \"Sum\" | \"sum\"\n   * - \"SampleCount | \"n\"\n   * - \"pNN.NN\"\n   *\n   * @default Average\n   */\n  readonly statistic?: string;\n\n  /**\n   * Dimensions of the metric\n   *\n   * @default - No dimensions.\n   *\n   * @deprecated Use 'dimensionsMap' instead.\n   */\n  readonly dimensions?: DimensionHash;\n\n  /**\n   * Dimensions of the metric\n   *\n   * @default - No dimensions.\n   */\n  readonly dimensionsMap?: DimensionsMap;\n\n  /**\n   * Unit used to filter the metric stream\n   *\n   * Only refer to datums emitted to the metric stream with the given unit and\n   * ignore all others. Only useful when datums are being emitted to the same\n   * metric stream under different units.\n   *\n   * The default is to use all matric datums in the stream, regardless of unit,\n   * which is recommended in nearly all cases.\n   *\n   * CloudWatch does not honor this property for graphs.\n   *\n   * @default - All metric datums in the given metric stream\n   */\n  readonly unit?: Unit;\n\n  /**\n   * Label for this metric when added to a Graph in a Dashboard\n   *\n   * You can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)\n   * to show summary information about the entire displayed time series\n   * in the legend. For example, if you use:\n   *\n   * ```\n   * [max: ${MAX}] MyMetric\n   * ```\n   *\n   * As the metric label, the maximum value in the visible range will\n   * be shown next to the time series name in the graph's legend.\n   *\n   * @default - No label\n   */\n  readonly label?: string;\n\n  /**\n   * The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph.\n   * The `Color` class has a set of standard colors that can be used here.\n   * @default - Automatic color\n   */\n  readonly color?: string;\n\n  /**\n   * Account which this metric comes from.\n   *\n   * @default - Deployment account.\n   */\n  readonly account?: string;\n\n  /**\n   * Region which this metric comes from.\n   *\n   * @default - Deployment region.\n   */\n  readonly region?: string;\n}\n\n/**\n * Properties for a metric\n */\nexport interface MetricProps extends CommonMetricOptions {\n  /**\n   * Namespace of the metric.\n   */\n  readonly namespace: string;\n\n  /**\n   * Name of the metric.\n   */\n  readonly metricName: string;\n}\n\n/**\n * Properties of a metric that can be changed\n */\nexport interface MetricOptions extends CommonMetricOptions {\n}\n\n/**\n * Configurable options for MathExpressions\n */\nexport interface MathExpressionOptions {\n  /**\n   * Label for this expression when added to a Graph in a Dashboard\n   *\n   * If this expression evaluates to more than one time series (for\n   * example, through the use of `METRICS()` or `SEARCH()` expressions),\n   * each time series will appear in the graph using a combination of the\n   * expression label and the individual metric label. Specify the empty\n   * string (`''`) to suppress the expression label and only keep the\n   * metric label.\n   *\n   * You can use [dynamic labels](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html)\n   * to show summary information about the displayed time series\n   * in the legend. For example, if you use:\n   *\n   * ```\n   * [max: ${MAX}] MyMetric\n   * ```\n   *\n   * As the metric label, the maximum value in the visible range will\n   * be shown next to the time series name in the graph's legend. If the\n   * math expression produces more than one time series, the maximum\n   * will be shown for each individual time series produce by this\n   * math expression.\n   *\n   * @default - Expression value is used as label\n   */\n  readonly label?: string;\n\n  /**\n   * Color for this metric when added to a Graph in a Dashboard\n   *\n   * @default - Automatic color\n   */\n  readonly color?: string;\n\n  /**\n   * The period over which the expression's statistics are applied.\n   *\n   * This period overrides all periods in the metrics used in this\n   * math expression.\n   *\n   * @default Duration.minutes(5)\n   */\n  readonly period?: cdk.Duration;\n\n  /**\n   * Account to evaluate search expressions within.\n   *\n   * Specifying a searchAccount has no effect to the account used\n   * for metrics within the expression (passed via usingMetrics).\n   *\n   * @default - Deployment account.\n   */\n  readonly searchAccount?: string;\n\n  /**\n    * Region to evaluate search expressions within.\n    *\n    * Specifying a searchRegion has no effect to the region used\n    * for metrics within the expression (passed via usingMetrics).\n    *\n    * @default - Deployment region.\n    */\n  readonly searchRegion?: string;\n}\n\n/**\n * Properties for a MathExpression\n */\nexport interface MathExpressionProps extends MathExpressionOptions {\n  /**\n   * The expression defining the metric.\n   *\n   * When an expression contains a SEARCH function, it cannot be used\n   * within an Alarm.\n   */\n  readonly expression: string;\n\n  /**\n   * The metrics used in the expression, in a map.\n   *\n   * The key is the identifier that represents the given metric in the\n   * expression, and the value is the actual Metric object.\n   *\n   * @default - Empty map.\n   */\n  readonly usingMetrics?: Record<string, IMetric>;\n}\n\n/**\n * A metric emitted by a service\n *\n * The metric is a combination of a metric identifier (namespace, name and dimensions)\n * and an aggregation function (statistic, period and unit).\n *\n * It also contains metadata which is used only in graphs, such as color and label.\n * It makes sense to embed this in here, so that compound constructs can attach\n * that metadata to metrics they expose.\n *\n * This class does not represent a resource, so hence is not a construct. Instead,\n * Metric is an abstraction that makes it easy to specify metrics for use in both\n * alarms and graphs.\n */\nexport class Metric implements IMetric {\n  /**\n   * Grant permissions to the given identity to write metrics.\n   *\n   * @param grantee The IAM identity to give permissions to.\n   */\n  public static grantPutMetricData(grantee: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['cloudwatch:PutMetricData'],\n      resourceArns: ['*'],\n    });\n  }\n\n  /** Dimensions of this metric */\n  public readonly dimensions?: DimensionHash;\n  /** Namespace of this metric */\n  public readonly namespace: string;\n  /** Name of this metric */\n  public readonly metricName: string;\n  /** Period of this metric */\n  public readonly period: cdk.Duration;\n  /** Statistic of this metric */\n  public readonly statistic: string;\n  /** Label for this metric when added to a Graph in a Dashboard */\n  public readonly label?: string;\n  /** The hex color code used when this metric is rendered on a graph. */\n  public readonly color?: string;\n\n  /** Unit of the metric. */\n  public readonly unit?: Unit;\n\n  /** Account which this metric comes from */\n  public readonly account?: string;\n\n  /** Region which this metric comes from. */\n  public readonly region?: string;\n\n  constructor(props: MetricProps) {\n    this.period = props.period || cdk.Duration.minutes(5);\n    const periodSec = this.period.toSeconds();\n    if (periodSec !== 1 && periodSec !== 5 && periodSec !== 10 && periodSec !== 30 && periodSec % 60 !== 0) {\n      throw new Error(`'period' must be 1, 5, 10, 30, or a multiple of 60 seconds, received ${periodSec}`);\n    }\n    this.dimensions = this.validateDimensions(props.dimensionsMap ?? props.dimensions);\n    this.namespace = props.namespace;\n    this.metricName = props.metricName;\n    // Try parsing, this will throw if it's not a valid stat\n    this.statistic = normalizeStatistic(props.statistic || 'Average');\n    this.label = props.label;\n    this.color = props.color;\n    this.unit = props.unit;\n    this.account = props.account;\n    this.region = props.region;\n  }\n\n  /**\n   * Return a copy of Metric `with` properties changed.\n   *\n   * All properties except namespace and metricName can be changed.\n   *\n   * @param props The set of properties to change.\n   */\n  public with(props: MetricOptions): Metric {\n    // Short-circuit creating a new object if there would be no effective change\n    if ((props.label === undefined || props.label === this.label)\n      && (props.color === undefined || props.color === this.color)\n      && (props.statistic === undefined || props.statistic === this.statistic)\n      && (props.unit === undefined || props.unit === this.unit)\n      && (props.account === undefined || props.account === this.account)\n      && (props.region === undefined || props.region === this.region)\n      // For these we're not going to do deep equality, misses some opportunity for optimization\n      // but that's okay.\n      && (props.dimensions === undefined)\n      && (props.dimensionsMap === undefined)\n      && (props.period === undefined || props.period.toSeconds() === this.period.toSeconds())) {\n      return this;\n    }\n\n    return new Metric({\n      dimensionsMap: props.dimensionsMap ?? props.dimensions ?? this.dimensions,\n      namespace: this.namespace,\n      metricName: this.metricName,\n      period: ifUndefined(props.period, this.period),\n      statistic: ifUndefined(props.statistic, this.statistic),\n      unit: ifUndefined(props.unit, this.unit),\n      label: ifUndefined(props.label, this.label),\n      color: ifUndefined(props.color, this.color),\n      account: ifUndefined(props.account, this.account),\n      region: ifUndefined(props.region, this.region),\n    });\n  }\n\n  /**\n   * Attach the metric object to the given construct scope\n   *\n   * Returns a Metric object that uses the account and region from the Stack\n   * the given construct is defined in. If the metric is subsequently used\n   * in a Dashboard or Alarm in a different Stack defined in a different\n   * account or region, the appropriate 'region' and 'account' fields\n   * will be added to it.\n   *\n   * If the scope we attach to is in an environment-agnostic stack,\n   * nothing is done and the same Metric object is returned.\n   */\n  public attachTo(scope: IConstruct): Metric {\n    const stack = cdk.Stack.of(scope);\n\n    return this.with({\n      region: cdk.Token.isUnresolved(stack.region) ? undefined : stack.region,\n      account: cdk.Token.isUnresolved(stack.account) ? undefined : stack.account,\n    });\n  }\n\n  public toMetricConfig(): MetricConfig {\n    const dims = this.dimensionsAsList();\n    return {\n      metricStat: {\n        dimensions: dims.length > 0 ? dims : undefined,\n        namespace: this.namespace,\n        metricName: this.metricName,\n        period: this.period,\n        statistic: this.statistic,\n        unitFilter: this.unit,\n        account: this.account,\n        region: this.region,\n      },\n      renderingProperties: {\n        color: this.color,\n        label: this.label,\n      },\n    };\n  }\n\n  /** @deprecated use toMetricConfig() */\n  public toAlarmConfig(): MetricAlarmConfig {\n    const metricConfig = this.toMetricConfig();\n    if (metricConfig.metricStat === undefined) {\n      throw new Error('Using a math expression is not supported here. Pass a \\'Metric\\' object instead');\n    }\n\n    const stat = parseStatistic(metricConfig.metricStat.statistic);\n    return {\n      dimensions: metricConfig.metricStat.dimensions,\n      namespace: metricConfig.metricStat.namespace,\n      metricName: metricConfig.metricStat.metricName,\n      period: metricConfig.metricStat.period.toSeconds(),\n      statistic: stat.type === 'simple' ? stat.statistic : undefined,\n      extendedStatistic: stat.type === 'percentile' ? 'p' + stat.percentile : undefined,\n      unit: this.unit,\n    };\n  }\n\n  /**\n   * @deprecated use toMetricConfig()\n   */\n  public toGraphConfig(): MetricGraphConfig {\n    const metricConfig = this.toMetricConfig();\n    if (metricConfig.metricStat === undefined) {\n      throw new Error('Using a math expression is not supported here. Pass a \\'Metric\\' object instead');\n    }\n\n    return {\n      dimensions: metricConfig.metricStat.dimensions,\n      namespace: metricConfig.metricStat.namespace,\n      metricName: metricConfig.metricStat.metricName,\n      renderingProperties: {\n        period: metricConfig.metricStat.period.toSeconds(),\n        stat: metricConfig.metricStat.statistic,\n        color: asString(metricConfig.renderingProperties?.color),\n        label: asString(metricConfig.renderingProperties?.label),\n      },\n      // deprecated properties for backwards compatibility\n      period: metricConfig.metricStat.period.toSeconds(),\n      statistic: metricConfig.metricStat.statistic,\n      color: asString(metricConfig.renderingProperties?.color),\n      label: asString(metricConfig.renderingProperties?.label),\n      unit: this.unit,\n    };\n  }\n\n  /**\n   * Make a new Alarm for this metric\n   *\n   * Combines both properties that may adjust the metric (aggregation) as well\n   * as alarm properties.\n   */\n  public createAlarm(scope: Construct, id: string, props: CreateAlarmOptions): Alarm {\n    return new Alarm(scope, id, {\n      metric: this.with({\n        statistic: props.statistic,\n        period: props.period,\n      }),\n      alarmName: props.alarmName,\n      alarmDescription: props.alarmDescription,\n      comparisonOperator: props.comparisonOperator,\n      datapointsToAlarm: props.datapointsToAlarm,\n      threshold: props.threshold,\n      evaluationPeriods: props.evaluationPeriods,\n      evaluateLowSampleCountPercentile: props.evaluateLowSampleCountPercentile,\n      treatMissingData: props.treatMissingData,\n      actionsEnabled: props.actionsEnabled,\n    });\n  }\n\n  public toString() {\n    return this.label || this.metricName;\n  }\n\n  /**\n   * Return the dimensions of this Metric as a list of Dimension.\n   */\n  private dimensionsAsList(): Dimension[] {\n    const dims = this.dimensions;\n\n    if (dims === undefined) {\n      return [];\n    }\n\n    const list = Object.keys(dims).sort().map(key => ({ name: key, value: dims[key] }));\n\n    return list;\n  }\n\n  private validateDimensions(dims?: DimensionHash): DimensionHash | undefined {\n    if (!dims) {\n      return dims;\n    }\n\n    var dimsArray = Object.keys(dims);\n    if (dimsArray?.length > 10) {\n      throw new Error(`The maximum number of dimensions is 10, received ${dimsArray.length}`);\n    }\n\n    dimsArray.map(key => {\n      if (dims[key] === undefined || dims[key] === null) {\n        throw new Error(`Dimension value of '${dims[key]}' is invalid`);\n      };\n      if (key.length < 1 || key.length > 255) {\n        throw new Error(`Dimension name must be at least 1 and no more than 255 characters; received ${key}`);\n      };\n\n      if (dims[key].length < 1 || dims[key].length > 255) {\n        throw new Error(`Dimension value must be at least 1 and no more than 255 characters; received ${dims[key]}`);\n      };\n    });\n\n    return dims;\n  }\n}\n\nfunction asString(x?: unknown): string | undefined {\n  if (x === undefined) { return undefined; }\n  if (typeof x !== 'string') {\n    throw new Error(`Expected string, got ${x}`);\n  }\n  return x;\n}\n\n/**\n * A math expression built with metric(s) emitted by a service\n *\n * The math expression is a combination of an expression (x+y) and metrics to apply expression on.\n * It also contains metadata which is used only in graphs, such as color and label.\n * It makes sense to embed this in here, so that compound constructs can attach\n * that metadata to metrics they expose.\n *\n * MathExpression can also be used for search expressions. In this case,\n * it also optionally accepts a searchRegion and searchAccount property for cross-environment\n * search expressions.\n *\n * This class does not represent a resource, so hence is not a construct. Instead,\n * MathExpression is an abstraction that makes it easy to specify metrics for use in both\n * alarms and graphs.\n */\nexport class MathExpression implements IMetric {\n  /**\n   * The expression defining the metric.\n   */\n  public readonly expression: string;\n\n  /**\n   * The metrics used in the expression as KeyValuePair <id, metric>.\n   */\n  public readonly usingMetrics: Record<string, IMetric>;\n\n  /**\n   * Label for this metric when added to a Graph.\n   */\n  public readonly label?: string;\n\n  /**\n   * The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph.\n   * The `Color` class has a set of standard colors that can be used here.\n   */\n  public readonly color?: string;\n\n  /**\n   * Aggregation period of this metric\n   */\n  public readonly period: cdk.Duration;\n\n  /**\n   * Account to evaluate search expressions within.\n   */\n  public readonly searchAccount?: string;\n\n  /**\n   * Region to evaluate search expressions within.\n   */\n  public readonly searchRegion?: string;\n\n  constructor(props: MathExpressionProps) {\n    this.period = props.period || cdk.Duration.minutes(5);\n    this.expression = props.expression;\n    this.usingMetrics = changeAllPeriods(props.usingMetrics ?? {}, this.period);\n    this.label = props.label;\n    this.color = props.color;\n    this.searchAccount = props.searchAccount;\n    this.searchRegion = props.searchRegion;\n\n    const invalidVariableNames = Object.keys(this.usingMetrics).filter(x => !validVariableName(x));\n    if (invalidVariableNames.length > 0) {\n      throw new Error(`Invalid variable names in expression: ${invalidVariableNames}. Must start with lowercase letter and only contain alphanumerics.`);\n    }\n\n    this.validateNoIdConflicts();\n  }\n\n  /**\n   * Return a copy of Metric with properties changed.\n   *\n   * All properties except namespace and metricName can be changed.\n   *\n   * @param props The set of properties to change.\n   */\n  public with(props: MathExpressionOptions): MathExpression {\n    // Short-circuit creating a new object if there would be no effective change\n    if ((props.label === undefined || props.label === this.label)\n      && (props.color === undefined || props.color === this.color)\n      && (props.period === undefined || props.period.toSeconds() === this.period.toSeconds())\n      && (props.searchAccount === undefined || props.searchAccount === this.searchAccount)\n      && (props.searchRegion === undefined || props.searchRegion === this.searchRegion)) {\n      return this;\n    }\n\n    return new MathExpression({\n      expression: this.expression,\n      usingMetrics: this.usingMetrics,\n      label: ifUndefined(props.label, this.label),\n      color: ifUndefined(props.color, this.color),\n      period: ifUndefined(props.period, this.period),\n      searchAccount: ifUndefined(props.searchAccount, this.searchAccount),\n      searchRegion: ifUndefined(props.searchRegion, this.searchRegion),\n    });\n  }\n\n  /**\n   * @deprecated use toMetricConfig()\n   */\n  public toAlarmConfig(): MetricAlarmConfig {\n    throw new Error('Using a math expression is not supported here. Pass a \\'Metric\\' object instead');\n  }\n\n  /**\n   * @deprecated use toMetricConfig()\n   */\n  public toGraphConfig(): MetricGraphConfig {\n    throw new Error('Using a math expression is not supported here. Pass a \\'Metric\\' object instead');\n  }\n\n  public toMetricConfig(): MetricConfig {\n    return {\n      mathExpression: {\n        period: this.period.toSeconds(),\n        expression: this.expression,\n        usingMetrics: this.usingMetrics,\n        searchAccount: this.searchAccount,\n        searchRegion: this.searchRegion,\n      },\n      renderingProperties: {\n        label: this.label,\n        color: this.color,\n      },\n    };\n  }\n\n  /**\n   * Make a new Alarm for this metric\n   *\n   * Combines both properties that may adjust the metric (aggregation) as well\n   * as alarm properties.\n   */\n  public createAlarm(scope: Construct, id: string, props: CreateAlarmOptions): Alarm {\n    return new Alarm(scope, id, {\n      metric: this.with({\n        period: props.period,\n      }),\n      alarmName: props.alarmName,\n      alarmDescription: props.alarmDescription,\n      comparisonOperator: props.comparisonOperator,\n      datapointsToAlarm: props.datapointsToAlarm,\n      threshold: props.threshold,\n      evaluationPeriods: props.evaluationPeriods,\n      evaluateLowSampleCountPercentile: props.evaluateLowSampleCountPercentile,\n      treatMissingData: props.treatMissingData,\n      actionsEnabled: props.actionsEnabled,\n    });\n  }\n\n  public toString() {\n    return this.label || this.expression;\n  }\n\n  private validateNoIdConflicts() {\n    const seen = new Map<string, IMetric>();\n    visit(this);\n\n    function visit(metric: IMetric) {\n      dispatchMetric(metric, {\n        withStat() {\n          // Nothing\n        },\n        withExpression(expr) {\n          for (const [id, subMetric] of Object.entries(expr.usingMetrics)) {\n            const existing = seen.get(id);\n            if (existing && metricKey(existing) !== metricKey(subMetric)) {\n              throw new Error(`The ID '${id}' used for two metrics in the expression: '${subMetric}' and '${existing}'. Rename one.`);\n            }\n            seen.set(id, subMetric);\n            visit(subMetric);\n          }\n        },\n      });\n    }\n  }\n\n}\n\nconst VALID_VARIABLE = new RegExp('^[a-z][a-zA-Z0-9_]*$');\n\nfunction validVariableName(x: string) {\n  return VALID_VARIABLE.test(x);\n}\n\n/**\n * Properties needed to make an alarm from a metric\n */\nexport interface CreateAlarmOptions {\n  /**\n   * The period over which the specified statistic is applied.\n   *\n   * Cannot be used with `MathExpression` objects.\n   *\n   * @default - The period from the metric\n   * @deprecated Use `metric.with({ period: ... })` to encode the period into the Metric object\n   */\n  readonly period?: cdk.Duration;\n\n  /**\n   * What function to use for aggregating.\n   *\n   * Can be one of the following:\n   *\n   * - \"Minimum\" | \"min\"\n   * - \"Maximum\" | \"max\"\n   * - \"Average\" | \"avg\"\n   * - \"Sum\" | \"sum\"\n   * - \"SampleCount | \"n\"\n   * - \"pNN.NN\"\n   *\n   * Cannot be used with `MathExpression` objects.\n   *\n   * @default - The statistic from the metric\n   * @deprecated Use `metric.with({ statistic: ... })` to encode the period into the Metric object\n   */\n  readonly statistic?: string;\n\n  /**\n   * Name of the alarm\n   *\n   * @default Automatically generated name\n   */\n  readonly alarmName?: string;\n\n  /**\n   * Description for the alarm\n   *\n   * @default No description\n   */\n  readonly alarmDescription?: string;\n\n  /**\n   * Comparison to use to check if metric is breaching\n   *\n   * @default GreaterThanOrEqualToThreshold\n   */\n  readonly comparisonOperator?: ComparisonOperator;\n\n  /**\n   * The value against which the specified statistic is compared.\n   */\n  readonly threshold: number;\n\n  /**\n   * The number of periods over which data is compared to the specified threshold.\n   */\n  readonly evaluationPeriods: number;\n\n  /**\n   * Specifies whether to evaluate the data and potentially change the alarm state if there are too few data points to be statistically significant.\n   *\n   * Used only for alarms that are based on percentiles.\n   *\n   * @default - Not configured.\n   */\n  readonly evaluateLowSampleCountPercentile?: string;\n\n  /**\n   * Sets how this alarm is to handle missing data points.\n   *\n   * @default TreatMissingData.Missing\n   */\n  readonly treatMissingData?: TreatMissingData;\n\n  /**\n   * Whether the actions for this alarm are enabled\n   *\n   * @default true\n   */\n  readonly actionsEnabled?: boolean;\n\n  /**\n   * The number of datapoints that must be breaching to trigger the alarm. This is used only if you are setting an \"M\n   * out of N\" alarm. In that case, this value is the M. For more information, see Evaluating an Alarm in the Amazon\n   * CloudWatch User Guide.\n   *\n   * @default ``evaluationPeriods``\n   *\n   * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation\n   */\n  readonly datapointsToAlarm?: number;\n}\n\nfunction ifUndefined<T>(x: T | undefined, def: T | undefined): T | undefined {\n  if (x !== undefined) {\n    return x;\n  }\n  return def;\n}\n\n/**\n * Change periods of all metrics in the map\n */\nfunction changeAllPeriods(metrics: Record<string, IMetric>, period: cdk.Duration): Record<string, IMetric> {\n  const ret: Record<string, IMetric> = {};\n  for (const [id, metric] of Object.entries(metrics)) {\n    ret[id] = changePeriod(metric, period);\n  }\n  return ret;\n}\n\n/**\n * Return a new metric object which is the same type as the input object, but with the period changed\n *\n * Relies on the fact that implementations of `IMetric` are also supposed to have\n * an implementation of `with` that accepts an argument called `period`. See `IModifiableMetric`.\n */\nfunction changePeriod(metric: IMetric, period: cdk.Duration): IMetric {\n  if (isModifiableMetric(metric)) {\n    return metric.with({ period });\n  }\n\n  throw new Error(`Metric object should also implement 'with': ${metric}`);\n}\n\n/**\n * Private protocol for metrics\n *\n * Metric types used in a MathExpression need to implement at least this:\n * a `with` method that takes at least a `period` and returns a modified copy\n * of the metric object.\n *\n * We put it here instead of on `IMetric` because there is no way to type\n * it in jsii in a way that concrete implementations `Metric` and `MathExpression`\n * can be statically typable about the fields that are changeable: all\n * `with` methods would need to take the same argument type, but not all\n * classes have the same `with`-able properties.\n *\n * This class exists to prevent having to use `instanceof` in the `changePeriod`\n * function, so that we have a system where in principle new implementations\n * of `IMetric` can be added. Because it will be rare, the mechanism doesn't have\n * to be exposed very well, just has to be possible.\n */\ninterface IModifiableMetric {\n  with(options: { period?: cdk.Duration }): IMetric;\n}\n\nfunction isModifiableMetric(m: any): m is IModifiableMetric {\n  return typeof m === 'object' && m !== null && !!m.with;\n}\n"],
  "mappings": "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",
  "names": []
}
