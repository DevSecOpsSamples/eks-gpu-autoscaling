{
  "version": 3,
  "sources": ["metric-types.ts"],
  "sourcesContent": ["import { Duration } from '../../core';\n\n/**\n * Interface for metrics\n */\nexport interface IMetric {\n  /**\n   * Inspect the details of the metric object\n   */\n  toMetricConfig(): MetricConfig;\n\n  /**\n   * Turn this metric object into an alarm configuration\n   *\n   * @deprecated Use `toMetricConfig()` instead.\n   */\n  toAlarmConfig(): MetricAlarmConfig;\n\n  /**\n   * Turn this metric object into a graph configuration\n   *\n   * @deprecated Use `toMetricConfig()` instead.\n   */\n  toGraphConfig(): MetricGraphConfig;\n}\n\n/**\n * Metric dimension\n *\n * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-dimension.html\n *\n */\nexport interface Dimension {\n  /**\n   * Name of the dimension\n   */\n  readonly name: string;\n\n  /**\n   * Value of the dimension\n   */\n  readonly value: any;\n}\n\n/**\n * Statistic to use over the aggregation period\n */\nexport enum Statistic {\n  /**\n   * The count (number) of data points used for the statistical calculation.\n   */\n  SAMPLE_COUNT = 'SampleCount',\n\n  /**\n   * The value of Sum / SampleCount during the specified period.\n   */\n  AVERAGE = 'Average',\n  /**\n   * All values submitted for the matching metric added together.\n   * This statistic can be useful for determining the total volume of a metric.\n   */\n  SUM = 'Sum',\n  /**\n   * The lowest value observed during the specified period.\n   * You can use this value to determine low volumes of activity for your application.\n   */\n  MINIMUM = 'Minimum',\n  /**\n   * The highest value observed during the specified period.\n   * You can use this value to determine high volumes of activity for your application.\n   */\n  MAXIMUM = 'Maximum'\n}\n\n/**\n * Unit for metric\n */\nexport enum Unit {\n  /**\n   * Seconds\n   */\n  SECONDS = 'Seconds',\n\n  /**\n   * Microseconds\n   */\n  MICROSECONDS = 'Microseconds',\n\n  /**\n   * Milliseconds\n   */\n  MILLISECONDS = 'Milliseconds',\n\n  /**\n   * Bytes\n   */\n  BYTES = 'Bytes',\n\n  /**\n   * Kilobytes\n   */\n  KILOBYTES = 'Kilobytes',\n\n  /**\n   * Megabytes\n   */\n  MEGABYTES = 'Megabytes',\n\n  /**\n   * Gigabytes\n   */\n  GIGABYTES = 'Gigabytes',\n\n  /**\n   * Terabytes\n   */\n  TERABYTES = 'Terabytes',\n\n  /**\n   * Bits\n   */\n  BITS = 'Bits',\n\n  /**\n   * Kilobits\n   */\n  KILOBITS = 'Kilobits',\n\n  /**\n   * Megabits\n   */\n  MEGABITS = 'Megabits',\n\n  /**\n   * Gigabits\n   */\n  GIGABITS = 'Gigabits',\n\n  /**\n   * Terabits\n   */\n  TERABITS = 'Terabits',\n\n  /**\n   * Percent\n   */\n  PERCENT = 'Percent',\n\n  /**\n   * Count\n   */\n  COUNT = 'Count',\n\n  /**\n   * Bytes/second (B/s)\n   */\n  BYTES_PER_SECOND = 'Bytes/Second',\n\n  /**\n   * Kilobytes/second (kB/s)\n   */\n  KILOBYTES_PER_SECOND = 'Kilobytes/Second',\n\n  /**\n   * Megabytes/second (MB/s)\n   */\n  MEGABYTES_PER_SECOND = 'Megabytes/Second',\n\n  /**\n   * Gigabytes/second (GB/s)\n   */\n  GIGABYTES_PER_SECOND = 'Gigabytes/Second',\n\n  /**\n   * Terabytes/second (TB/s)\n   */\n  TERABYTES_PER_SECOND = 'Terabytes/Second',\n\n  /**\n   * Bits/second (b/s)\n   */\n  BITS_PER_SECOND = 'Bits/Second',\n\n  /**\n   * Kilobits/second (kb/s)\n   */\n  KILOBITS_PER_SECOND = 'Kilobits/Second',\n\n  /**\n   * Megabits/second (Mb/s)\n   */\n  MEGABITS_PER_SECOND = 'Megabits/Second',\n\n  /**\n   * Gigabits/second (Gb/s)\n   */\n  GIGABITS_PER_SECOND = 'Gigabits/Second',\n\n  /**\n   * Terabits/second (Tb/s)\n   */\n  TERABITS_PER_SECOND = 'Terabits/Second',\n\n  /**\n   * Count/second\n   */\n  COUNT_PER_SECOND = 'Count/Second',\n\n  /**\n   * No unit\n   */\n  NONE = 'None'\n}\n\n/**\n * Properties of a rendered metric\n */\nexport interface MetricConfig {\n  /**\n   * In case the metric represents a query, the details of the query\n   *\n   * @default - None\n   */\n  readonly metricStat?: MetricStatConfig;\n\n  /**\n   * In case the metric is a math expression, the details of the math expression\n   *\n   * @default - None\n   */\n  readonly mathExpression?: MetricExpressionConfig;\n\n  /**\n   * Additional properties which will be rendered if the metric is used in a dashboard\n   *\n   * Examples are 'label' and 'color', but any key in here will be\n   * added to dashboard graphs.\n   *\n   * @default - None\n   */\n  readonly renderingProperties?: Record<string, unknown>;\n}\n\n/**\n * Properties for a concrete metric\n *\n * NOTE: `unit` is no longer on this object since it is only used for `Alarms`, and doesn't mean what one\n * would expect it to mean there anyway. It is most likely to be misused.\n */\nexport interface MetricStatConfig {\n  /**\n   * The dimensions to apply to the alarm\n   *\n   * @default []\n   */\n  readonly dimensions?: Dimension[];\n\n  /**\n   * Namespace of the metric\n   */\n  readonly namespace: string;\n\n  /**\n   * Name of the metric\n   */\n  readonly metricName: string;\n\n  /**\n   * How many seconds to aggregate over\n   */\n  readonly period: Duration;\n\n  /**\n   * Aggregation function to use (can be either simple or a percentile)\n   */\n  readonly statistic: string;\n\n  /**\n   * Unit used to filter the metric stream\n   *\n   * Only refer to datums emitted to the metric stream with the given unit and\n   * ignore all others. Only useful when datums are being emitted to the same\n   * metric stream under different units.\n   *\n   * This field has been renamed from plain `unit` to clearly communicate\n   * its purpose.\n   *\n   * @default - Refer to all metric datums\n   */\n  readonly unitFilter?: Unit;\n\n  /**\n   * Region which this metric comes from.\n   *\n   * @default Deployment region.\n   */\n  readonly region?: string;\n\n  /**\n   * Account which this metric comes from.\n   *\n   * @default Deployment account.\n   */\n  readonly account?: string;\n}\n\n/**\n * Properties for a concrete metric\n */\nexport interface MetricExpressionConfig {\n  /**\n   * Math expression for the metric.\n   */\n  readonly expression: string;\n\n  /**\n   * Metrics used in the math expression\n   */\n  readonly usingMetrics: Record<string, IMetric>;\n\n  /**\n   * How many seconds to aggregate over\n   */\n  readonly period: number;\n\n  /**\n   * Account to evaluate search expressions within.\n   *\n   * @default - Deployment account.\n   */\n  readonly searchAccount?: string;\n\n  /**\n   * Region to evaluate search expressions within.\n   *\n   * @default - Deployment region.\n   */\n  readonly searchRegion?: string;\n}\n\n/**\n * Properties used to construct the Metric identifying part of an Alarm\n *\n * @deprecated Replaced by MetricConfig\n */\nexport interface MetricAlarmConfig {\n  /**\n   * The dimensions to apply to the alarm\n   */\n  readonly dimensions?: Dimension[];\n\n  /**\n   * Namespace of the metric\n   */\n  readonly namespace: string;\n\n  /**\n   * Name of the metric\n   */\n  readonly metricName: string;\n\n  /**\n   * How many seconds to aggregate over\n   */\n  readonly period: number;\n\n  /**\n   * Simple aggregation function to use\n   */\n  readonly statistic?: Statistic;\n\n  /**\n   * Percentile aggregation function to use\n   */\n  readonly extendedStatistic?: string;\n\n  /**\n   * The unit of the alarm\n   */\n  readonly unit?: Unit;\n}\n\n/**\n * Properties used to construct the Metric identifying part of a Graph\n *\n * @deprecated Replaced by MetricConfig\n */\nexport interface MetricGraphConfig {\n  /**\n   * The dimensions to apply to the alarm\n   */\n  readonly dimensions?: Dimension[];\n\n  /**\n   * Namespace of the metric\n   */\n  readonly namespace: string;\n\n  /**\n   * Name of the metric\n   */\n  readonly metricName: string;\n\n  /**\n   * Rendering properties override yAxis parameter of the widget object\n   */\n  readonly renderingProperties: MetricRenderingProperties;\n\n  /**\n   * How many seconds to aggregate over\n   *\n   * @deprecated Use `period` in `renderingProperties`\n   */\n  readonly period: number;\n\n  /**\n   * Label for the metric\n   *\n   * @deprecated Use `label` in `renderingProperties`\n   */\n  readonly label?: string;\n\n  /**\n   * Color for the graph line\n   *\n   * @deprecated Use `color` in `renderingProperties`\n   */\n  readonly color?: string;\n\n  /**\n   * Aggregation function to use (can be either simple or a percentile)\n   *\n   * @deprecated Use `stat` in `renderingProperties`\n   */\n  readonly statistic?: string;\n\n  /**\n   * The unit of the alarm\n   *\n   * @deprecated not used in dashboard widgets\n   */\n  readonly unit?: Unit;\n}\n\n/**\n * Custom rendering properties that override the default rendering properties specified in the yAxis parameter of the widget object.\n *\n * @deprecated Replaced by MetricConfig.\n */\nexport interface MetricRenderingProperties {\n  /**\n   * How many seconds to aggregate over\n   */\n  readonly period: number;\n\n  /**\n   * Label for the metric\n   */\n  readonly label?: string;\n\n  /**\n   * The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph.\n   * The `Color` class has a set of standard colors that can be used here.\n   */\n  readonly color?: string;\n\n  /**\n   * Aggregation function to use (can be either simple or a percentile)\n   */\n  readonly stat?: string;\n}\n"],
  "mappings": "0GA+CA,GAAY,WAAZ,AAAA,UAAY,WAAS,CAInB,WAAA,aAAA,cAKA,WAAA,QAAA,UAKA,WAAA,IAAA,MAKA,WAAA,QAAA,UAKA,WAAA,QAAA,SACF,GAzBY,UAAA,QAAA,WAAA,SAAA,UAAS,CAAA,EAAA,EA8BrB,GAAY,MAAZ,AAAA,UAAY,MAAI,CAId,MAAA,QAAA,UAKA,MAAA,aAAA,eAKA,MAAA,aAAA,eAKA,MAAA,MAAA,QAKA,MAAA,UAAA,YAKA,MAAA,UAAA,YAKA,MAAA,UAAA,YAKA,MAAA,UAAA,YAKA,MAAA,KAAA,OAKA,MAAA,SAAA,WAKA,MAAA,SAAA,WAKA,MAAA,SAAA,WAKA,MAAA,SAAA,WAKA,MAAA,QAAA,UAKA,MAAA,MAAA,QAKA,MAAA,iBAAA,eAKA,MAAA,qBAAA,mBAKA,MAAA,qBAAA,mBAKA,MAAA,qBAAA,mBAKA,MAAA,qBAAA,mBAKA,MAAA,gBAAA,cAKA,MAAA,oBAAA,kBAKA,MAAA,oBAAA,kBAKA,MAAA,oBAAA,kBAKA,MAAA,oBAAA,kBAKA,MAAA,iBAAA,eAKA,MAAA,KAAA,MACF,GAvIY,KAAA,QAAA,MAAA,SAAA,KAAI,CAAA,EAAA",
  "names": []
}
