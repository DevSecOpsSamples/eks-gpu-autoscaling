{
  "version": 3,
  "sources": ["log-query.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { ConcreteWidget } from './widget';\n\n/**\n * Types of view\n */\nexport enum LogQueryVisualizationType {\n  /**\n   * Table view\n   */\n  TABLE = 'table',\n  /**\n   * Line view\n   */\n  LINE = 'line',\n  /**\n   * Stacked area view\n   */\n  STACKEDAREA = 'stackedarea',\n  /**\n   * Bar view\n   */\n  BAR = 'bar',\n  /**\n   * Pie view\n   */\n  PIE = 'pie',\n}\n\n/**\n * Properties for a Query widget\n */\nexport interface LogQueryWidgetProps {\n  /**\n   * Title for the widget\n   *\n   * @default No title\n   */\n  readonly title?: string;\n\n  /**\n   * Names of log groups to query\n   */\n  readonly logGroupNames: string[];\n\n  /**\n   * Full query string for log insights\n   *\n   * Be sure to prepend every new line with a newline and pipe character\n   * (`\\n|`).\n   *\n   * @default - Exactly one of `queryString`, `queryLines` is required.\n   */\n  readonly queryString?: string;\n\n  /**\n   * A sequence of lines to use to build the query\n   *\n   * The query will be built by joining the lines together using `\\n|`.\n   *\n   * @default - Exactly one of `queryString`, `queryLines` is required.\n   */\n  readonly queryLines?: string[];\n\n  /**\n   * The region the metrics of this widget should be taken from\n   *\n   * @default Current region\n   */\n  readonly region?: string;\n\n  /**\n   * The type of view to use\n   *\n   * @default LogQueryVisualizationType.TABLE\n   */\n  readonly view?: LogQueryVisualizationType;\n\n  /**\n   * Width of the widget, in a grid of 24 units wide\n   *\n   * @default 6\n   */\n  readonly width?: number;\n\n  /**\n   * Height of the widget\n   *\n   * @default 6\n   */\n  readonly height?: number;\n}\n\n/**\n * Display query results from Logs Insights\n */\nexport class LogQueryWidget extends ConcreteWidget {\n  private readonly props: LogQueryWidgetProps;\n\n  constructor(props: LogQueryWidgetProps) {\n    super(props.width || 6, props.height || 6);\n    this.props = props;\n\n    if (props.logGroupNames.length === 0) {\n      throw new Error('Specify at least one log group name.');\n    }\n\n    if (!!props.queryString === !!props.queryLines) {\n      throw new Error('Specify exactly one of \\'queryString\\' and \\'queryLines\\'');\n    }\n  }\n\n  public toJson(): any[] {\n    const sources = this.props.logGroupNames.map(l => `SOURCE '${l}'`).join(' | ');\n    const query = this.props.queryLines\n      ? this.props.queryLines.join('\\n| ')\n      : this.props.queryString;\n\n    const properties: any = {\n      view: this.props.view? this.props.view : LogQueryVisualizationType.TABLE,\n      title: this.props.title,\n      region: this.props.region || cdk.Aws.REGION,\n      query: `${sources} | ${query}`,\n    };\n\n    // adding stacked property in case of LINE or STACKEDAREA\n    if (this.props.view === LogQueryVisualizationType.LINE || this.props.view === LogQueryVisualizationType.STACKEDAREA) {\n      // assign the right native view value. both types share the same value\n      properties.view = 'timeSeries',\n      properties.stacked = this.props.view === LogQueryVisualizationType.STACKEDAREA ? true : false;\n    }\n\n    return [{\n      type: 'log',\n      width: this.width,\n      height: this.height,\n      x: this.x,\n      y: this.y,\n      properties: properties,\n    }];\n  }\n}\n"],
  "mappings": "uPAAA,IAAA,QAAA,YAAA,EACA,SAAA,QAAA,UAAA,EAKA,GAAY,2BAAZ,AAAA,UAAY,2BAAyB,CAInC,2BAAA,MAAA,QAIA,2BAAA,KAAA,OAIA,2BAAA,YAAA,cAIA,2BAAA,IAAA,MAIA,2BAAA,IAAA,KACF,GArBY,0BAAA,QAAA,2BAAA,SAAA,0BAAyB,CAAA,EAAA,EA0FrC,MAAa,sBAAuB,UAAA,cAAc,CAGhD,YAAY,MAA0B,CACpC,MAAM,MAAM,OAAS,EAAG,MAAM,QAAU,CAAC,EAGzC,iFAFA,KAAK,MAAQ,MAET,MAAM,cAAc,SAAW,EACjC,KAAM,IAAI,OAAM,sCAAsC,EAGxD,GAAI,CAAC,CAAC,MAAM,aAAgB,CAAC,CAAC,MAAM,WAClC,KAAM,IAAI,OAAM,uDAA2D,EAIxE,QAAM,CACX,KAAM,SAAU,KAAK,MAAM,cAAc,IAAI,GAAK,WAAW,IAAI,EAAE,KAAK,KAAK,EACvE,MAAQ,KAAK,MAAM,WACrB,KAAK,MAAM,WAAW,KAAK;GAAM,EACjC,KAAK,MAAM,YAET,WAAkB,CACtB,KAAM,KAAK,MAAM,KAAM,KAAK,MAAM,KAAO,0BAA0B,MACnE,MAAO,KAAK,MAAM,MAClB,OAAQ,KAAK,MAAM,QAAU,IAAI,IAAI,OACrC,MAAO,GAAG,aAAa,SAIzB,MAAI,MAAK,MAAM,OAAS,0BAA0B,MAAQ,KAAK,MAAM,OAAS,0BAA0B,cAEtG,YAAW,KAAO,aAClB,WAAW,QAAU,KAAK,MAAM,OAAS,0BAA0B,aAG9D,CAAC,CACN,KAAM,MACN,MAAO,KAAK,MACZ,OAAQ,KAAK,OACb,EAAG,KAAK,EACR,EAAG,KAAK,EACR,WACD,GA3CL,QAAA,eAAA",
  "names": []
}
