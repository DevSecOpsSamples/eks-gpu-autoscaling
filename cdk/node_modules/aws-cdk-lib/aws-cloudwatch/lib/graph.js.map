{
  "version": 3,
  "sources": ["graph.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { IAlarm } from './alarm-base';\nimport { IMetric } from './metric-types';\nimport { allMetricsGraphJson } from './private/rendering';\nimport { ConcreteWidget } from './widget';\n\n/**\n * Basic properties for widgets that display metrics\n */\nexport interface MetricWidgetProps {\n  /**\n   * Title for the graph\n   *\n   * @default - None\n   */\n  readonly title?: string;\n\n  /**\n   * The region the metrics of this graph should be taken from\n   *\n   * @default - Current region\n   */\n  readonly region?: string;\n\n  /**\n   * Width of the widget, in a grid of 24 units wide\n   *\n   * @default 6\n   */\n  readonly width?: number;\n\n  /**\n   * Height of the widget\n   *\n   * @default - 6 for Alarm and Graph widgets.\n   *   3 for single value widgets where most recent value of a metric is displayed.\n   */\n  readonly height?: number;\n}\n\n/**\n * Properties for a Y-Axis\n */\nexport interface YAxisProps {\n  /**\n   * The min value\n   *\n   * @default 0\n   */\n  readonly min?: number;\n\n  /**\n   * The max value\n   *\n   * @default - No maximum value\n   */\n  readonly max?: number;\n\n  /**\n   * The label\n   *\n   * @default - No label\n   */\n  readonly label?: string;\n\n  /**\n   * Whether to show units\n   *\n   * @default true\n   */\n  readonly showUnits?: boolean;\n}\n\n/**\n * Properties for an AlarmWidget\n */\nexport interface AlarmWidgetProps extends MetricWidgetProps {\n  /**\n   * The alarm to show\n   */\n  readonly alarm: IAlarm;\n\n  /**\n   * Left Y axis\n   *\n   * @default - No minimum or maximum values for the left Y-axis\n   */\n  readonly leftYAxis?: YAxisProps;\n}\n\n/**\n * Display the metric associated with an alarm, including the alarm line\n */\nexport class AlarmWidget extends ConcreteWidget {\n  private readonly props: AlarmWidgetProps;\n\n  constructor(props: AlarmWidgetProps) {\n    super(props.width || 6, props.height || 6);\n    this.props = props;\n  }\n\n  public toJson(): any[] {\n    return [{\n      type: 'metric',\n      width: this.width,\n      height: this.height,\n      x: this.x,\n      y: this.y,\n      properties: {\n        view: 'timeSeries',\n        title: this.props.title,\n        region: this.props.region || cdk.Aws.REGION,\n        annotations: {\n          alarms: [this.props.alarm.alarmArn],\n        },\n        yAxis: {\n          left: this.props.leftYAxis ?? undefined,\n        },\n      },\n    }];\n  }\n}\n\n/**\n * Types of view\n */\nexport enum GraphWidgetView {\n  /**\n   * Display as a line graph.\n   */\n  TIME_SERIES = 'timeSeries',\n  /**\n   * Display as a bar graph.\n   */\n  BAR = 'bar',\n  /**\n   * Display as a pie graph.\n   */\n  PIE = 'pie',\n}\n\n/**\n * Properties for a GraphWidget\n */\nexport interface GraphWidgetProps extends MetricWidgetProps {\n  /**\n   * Metrics to display on left Y axis\n   *\n   * @default - No metrics\n   */\n  readonly left?: IMetric[];\n\n  /**\n   * Metrics to display on right Y axis\n   *\n   * @default - No metrics\n   */\n  readonly right?: IMetric[];\n\n  /**\n   * Annotations for the left Y axis\n   *\n   * @default - No annotations\n   */\n  readonly leftAnnotations?: HorizontalAnnotation[];\n\n  /**\n   * Annotations for the right Y axis\n   *\n   * @default - No annotations\n   */\n  readonly rightAnnotations?: HorizontalAnnotation[];\n\n  /**\n   * Whether the graph should be shown as stacked lines\n   *\n   * @default false\n   */\n  readonly stacked?: boolean;\n\n  /**\n   * Left Y axis\n   *\n   * @default - None\n   */\n  readonly leftYAxis?: YAxisProps;\n\n  /**\n   * Right Y axis\n   *\n   * @default - None\n   */\n  readonly rightYAxis?: YAxisProps;\n\n  /**\n   * Position of the legend\n   *\n   * @default - bottom\n   */\n  readonly legendPosition?: LegendPosition;\n\n  /**\n   * Whether the graph should show live data\n   *\n   * @default false\n   */\n  readonly liveData?: boolean;\n\n  /**\n   * Display this metric\n   *\n   * @default TimeSeries\n   */\n  readonly view?: GraphWidgetView;\n\n  /**\n   * Whether to show the value from the entire time range. Only applicable for Bar and Pie charts.\n   *\n   * If false, values will be from the most recent period of your chosen time range;\n   * if true, shows the value from the entire time range.\n   *\n   * @default false\n   */\n  readonly setPeriodToTimeRange?: boolean;\n\n  /**\n   * The default period for all metrics in this widget.\n   * The period is the length of time represented by one data point on the graph.\n   * This default can be overridden within each metric definition.\n   *\n   * @default cdk.Duration.seconds(300)\n   */\n  readonly period?: cdk.Duration;\n\n  /**\n   * The default statistic to be displayed for each metric.\n   * This default can be overridden within the definition of each individual metric\n   *\n   * @default - The statistic for each metric is used\n   */\n  readonly statistic?: string;\n}\n\n/**\n * A dashboard widget that displays metrics\n */\nexport class GraphWidget extends ConcreteWidget {\n\n  private readonly props: GraphWidgetProps;\n\n  private readonly leftMetrics: IMetric[];\n  private readonly rightMetrics: IMetric[];\n\n  constructor(props: GraphWidgetProps) {\n    super(props.width || 6, props.height || 6);\n    this.props = props;\n    this.leftMetrics = props.left ?? [];\n    this.rightMetrics = props.right ?? [];\n  }\n\n  /**\n   * Add another metric to the left Y axis of the GraphWidget\n   *\n   * @param metric the metric to add\n   */\n  public addLeftMetric(metric: IMetric) {\n    this.leftMetrics.push(metric);\n  }\n\n  /**\n   * Add another metric to the right Y axis of the GraphWidget\n   *\n   * @param metric the metric to add\n   */\n  public addRightMetric(metric: IMetric) {\n    this.rightMetrics.push(metric);\n  }\n\n  public toJson(): any[] {\n    const horizontalAnnotations = [\n      ...(this.props.leftAnnotations || []).map(mapAnnotation('left')),\n      ...(this.props.rightAnnotations || []).map(mapAnnotation('right')),\n    ];\n\n    const metrics = allMetricsGraphJson(this.leftMetrics, this.rightMetrics);\n    return [{\n      type: 'metric',\n      width: this.width,\n      height: this.height,\n      x: this.x,\n      y: this.y,\n      properties: {\n        view: this.props.view ?? GraphWidgetView.TIME_SERIES,\n        title: this.props.title,\n        region: this.props.region || cdk.Aws.REGION,\n        stacked: this.props.stacked,\n        metrics: metrics.length > 0 ? metrics : undefined,\n        annotations: horizontalAnnotations.length > 0 ? { horizontal: horizontalAnnotations } : undefined,\n        yAxis: {\n          left: this.props.leftYAxis ?? undefined,\n          right: this.props.rightYAxis ?? undefined,\n        },\n        legend: this.props.legendPosition !== undefined ? { position: this.props.legendPosition } : undefined,\n        liveData: this.props.liveData,\n        setPeriodToTimeRange: this.props.setPeriodToTimeRange,\n        period: this.props.period?.toSeconds(),\n        stat: this.props.statistic,\n      },\n    }];\n  }\n}\n\n/**\n * Properties for a SingleValueWidget\n */\nexport interface SingleValueWidgetProps extends MetricWidgetProps {\n  /**\n   * Metrics to display\n   */\n  readonly metrics: IMetric[];\n\n  /**\n   * Whether to show the value from the entire time range.\n   *\n   * @default false\n   */\n  readonly setPeriodToTimeRange?: boolean;\n\n  /**\n   * Whether to show as many digits as can fit, before rounding.\n   *\n   * @default false\n   */\n  readonly fullPrecision?: boolean;\n}\n\n/**\n * A dashboard widget that displays the most recent value for every metric\n */\nexport class SingleValueWidget extends ConcreteWidget {\n  private readonly props: SingleValueWidgetProps;\n\n  constructor(props: SingleValueWidgetProps) {\n    super(props.width || 6, props.height || 3);\n    this.props = props;\n  }\n\n  public toJson(): any[] {\n    return [{\n      type: 'metric',\n      width: this.width,\n      height: this.height,\n      x: this.x,\n      y: this.y,\n      properties: {\n        view: 'singleValue',\n        title: this.props.title,\n        region: this.props.region || cdk.Aws.REGION,\n        metrics: allMetricsGraphJson(this.props.metrics, []),\n        setPeriodToTimeRange: this.props.setPeriodToTimeRange,\n        singleValueFullPrecision: this.props.fullPrecision,\n      },\n    }];\n  }\n}\n\n/**\n * Horizontal annotation to be added to a graph\n */\nexport interface HorizontalAnnotation {\n  /**\n   * The value of the annotation\n   */\n  readonly value: number;\n\n  /**\n   * Label for the annotation\n   *\n   * @default - No label\n   */\n  readonly label?: string;\n\n  /**\n   * The hex color code, prefixed with '#' (e.g. '#00ff00'), to be used for the annotation.\n   * The `Color` class has a set of standard colors that can be used here.\n   *\n   * @default - Automatic color\n   */\n  readonly color?: string;\n\n  /**\n   * Add shading above or below the annotation\n   *\n   * @default No shading\n   */\n  readonly fill?: Shading;\n\n  /**\n   * Whether the annotation is visible\n   *\n   * @default true\n   */\n  readonly visible?: boolean;\n}\n\n/**\n * Fill shading options that will be used with an annotation\n */\nexport enum Shading {\n  /**\n   * Don't add shading\n   */\n  NONE = 'none',\n\n  /**\n   * Add shading above the annotation\n   */\n  ABOVE = 'above',\n\n  /**\n   * Add shading below the annotation\n   */\n  BELOW = 'below'\n}\n\n/**\n * A set of standard colours that can be used in annotations in a GraphWidget.\n */\nexport class Color {\n  /** blue - hex #1f77b4 */\n  public static readonly BLUE = '#1f77b4';\n\n  /** brown - hex #8c564b */\n  public static readonly BROWN = '#8c564b';\n\n  /** green - hex #2ca02c */\n  public static readonly GREEN = '#2ca02c';\n\n  /** grey - hex #7f7f7f */\n  public static readonly GREY = '#7f7f7f';\n\n  /** orange - hex #ff7f0e */\n  public static readonly ORANGE = '#ff7f0e';\n\n  /** pink - hex #e377c2 */\n  public static readonly PINK = '#e377c2';\n\n  /** purple - hex #9467bd */\n  public static readonly PURPLE = '#9467bd';\n\n  /** red - hex #d62728 */\n  public static readonly RED = '#d62728';\n\n  private constructor() {}\n}\n\n/**\n * The position of the legend on a GraphWidget.\n */\nexport enum LegendPosition {\n  /**\n   * Legend appears below the graph (default).\n   */\n  BOTTOM = 'bottom',\n\n  /**\n   * Add shading above the annotation\n   */\n  RIGHT = 'right',\n\n  /**\n   * Add shading below the annotation\n   */\n  HIDDEN = 'hidden'\n}\n\nfunction mapAnnotation(yAxis: string): ((x: HorizontalAnnotation) => any) {\n  return (a: HorizontalAnnotation) => {\n    return { ...a, yAxis };\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
