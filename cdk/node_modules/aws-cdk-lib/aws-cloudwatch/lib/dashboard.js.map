{
  "version": 3,
  "sources": ["dashboard.ts"],
  "sourcesContent": ["import { Lazy, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnDashboard } from './cloudwatch.generated';\nimport { Column, Row } from './layout';\nimport { IWidget } from './widget';\n\n/**\n * Specify the period for graphs when the CloudWatch dashboard loads\n */\nexport enum PeriodOverride {\n  /**\n   * Period of all graphs on the dashboard automatically adapt to the time range of the dashboard.\n   */\n  AUTO = 'auto',\n  /**\n   * Period set for each graph will be used\n   */\n  INHERIT = 'inherit',\n}\n\n/**\n * Properties for defining a CloudWatch Dashboard\n */\nexport interface DashboardProps {\n  /**\n   * Name of the dashboard.\n   *\n   * If set, must only contain alphanumerics, dash (-) and underscore (_)\n   *\n   * @default - automatically generated name\n   */\n  readonly dashboardName?: string;\n\n  /**\n   * The start of the time range to use for each widget on the dashboard.\n   * You can specify start without specifying end to specify a relative time range that ends with the current time.\n   * In this case, the value of start must begin with -P, and you can use M, H, D, W and M as abbreviations for\n   * minutes, hours, days, weeks and months. For example, -PT8H shows the last 8 hours and -P3M shows the last three months.\n   * You can also use start along with an end field, to specify an absolute time range.\n   * When specifying an absolute time range, use the ISO 8601 format. For example, 2018-12-17T06:00:00.000Z.\n   *\n   * @default When the dashboard loads, the start time will be the default time range.\n   */\n  readonly start?: string;\n\n  /**\n   * The end of the time range to use for each widget on the dashboard when the dashboard loads.\n   * If you specify a value for end, you must also specify a value for start.\n   * Specify an absolute time in the ISO 8601 format. For example, 2018-12-17T06:00:00.000Z.\n   *\n   * @default When the dashboard loads, the end date will be the current time.\n   */\n  readonly end?: string;\n\n  /**\n   * Use this field to specify the period for the graphs when the dashboard loads.\n   * Specifying `Auto` causes the period of all graphs on the dashboard to automatically adapt to the time range of the dashboard.\n   * Specifying `Inherit` ensures that the period set for each graph is always obeyed.\n   *\n   * @default Auto\n   */\n  readonly periodOverride?: PeriodOverride;\n\n  /**\n   * Initial set of widgets on the dashboard\n   *\n   * One array represents a row of widgets.\n   *\n   * @default - No widgets\n   */\n  readonly widgets?: IWidget[][]\n}\n\n/**\n * A CloudWatch dashboard\n */\nexport class Dashboard extends Resource {\n  private readonly rows: IWidget[] = [];\n\n  constructor(scope: Construct, id: string, props: DashboardProps = {}) {\n    super(scope, id, {\n      physicalName: props.dashboardName,\n    });\n\n    {\n      const { dashboardName } = props;\n      if (dashboardName && !Token.isUnresolved(dashboardName) && !dashboardName.match(/^[\\w-]+$/)) {\n        throw new Error([\n          `The value ${dashboardName} for field dashboardName contains invalid characters.`,\n          'It can only contain alphanumerics, dash (-) and underscore (_).',\n        ].join(' '));\n      }\n    }\n\n    new CfnDashboard(this, 'Resource', {\n      dashboardName: this.physicalName,\n      dashboardBody: Lazy.string({\n        produce: () => {\n          const column = new Column(...this.rows);\n          column.position(0, 0);\n          return Stack.of(this).toJsonString({\n            start: props.start,\n            end: props.end,\n            periodOverride: props.periodOverride,\n            widgets: column.toJson(),\n          });\n        },\n      }),\n    });\n\n    (props.widgets || []).forEach(row => {\n      this.addWidgets(...row);\n    });\n  }\n\n  /**\n   * Add a widget to the dashboard.\n   *\n   * Widgets given in multiple calls to add() will be laid out stacked on\n   * top of each other.\n   *\n   * Multiple widgets added in the same call to add() will be laid out next\n   * to each other.\n   */\n  public addWidgets(...widgets: IWidget[]) {\n    if (widgets.length === 0) {\n      return;\n    }\n\n    const w = widgets.length > 1 ? new Row(...widgets) : widgets[0];\n    this.rows.push(w);\n  }\n}\n"],
  "mappings": "uOAAA,OAAA,QAAA,YAAA,EAEA,uBAAA,QAAA,wBAAA,EACA,SAAA,QAAA,UAAA,EAMA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAIxB,gBAAA,KAAA,OAIA,gBAAA,QAAA,SACF,GATY,eAAA,QAAA,gBAAA,SAAA,eAAc,CAAA,EAAA,EAmE1B,MAAa,iBAAkB,QAAA,QAAQ,CAGrC,YAAY,MAAkB,GAAY,MAAwB,CAAA,EAAE,CAClE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,cACrB,EALc,KAAA,KAAkB,CAAA,2EAOjC,CACE,KAAM,CAAE,eAAkB,MAC1B,GAAI,eAAiB,CAAC,OAAA,MAAM,aAAa,aAAa,GAAK,CAAC,cAAc,MAAM,UAAU,EACxF,KAAM,IAAI,OAAM,CACd,aAAa,qEACb,mEACA,KAAK,GAAG,CAAC,EAIf,GAAI,wBAAA,aAAa,KAAM,WAAY,CACjC,cAAe,KAAK,aACpB,cAAe,OAAA,KAAK,OAAO,CACzB,QAAS,IAAK,CACZ,KAAM,QAAS,GAAI,UAAA,OAAO,GAAG,KAAK,IAAI,EACtC,cAAO,SAAS,EAAG,CAAC,EACb,OAAA,MAAM,GAAG,IAAI,EAAE,aAAa,CACjC,MAAO,MAAM,MACb,IAAK,MAAM,IACX,eAAgB,MAAM,eACtB,QAAS,OAAO,OAAM,EACvB,CACH,EACD,EACF,EAEA,OAAM,SAAW,CAAA,GAAI,QAAQ,KAAM,CAClC,KAAK,WAAW,GAAG,GAAG,CACxB,CAAC,EAYI,cAAc,QAAkB,CACrC,uEAAI,QAAQ,SAAW,EACrB,OAGF,KAAM,GAAI,QAAQ,OAAS,EAAI,GAAI,UAAA,IAAI,GAAG,OAAO,EAAI,QAAQ,GAC7D,KAAK,KAAK,KAAK,CAAC,GAtDpB,QAAA,UAAA",
  "names": []
}
