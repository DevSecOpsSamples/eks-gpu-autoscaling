{
  "version": 3,
  "sources": ["alarm-rule.ts"],
  "sourcesContent": ["import { IAlarm, IAlarmRule } from './alarm-base';\n\n/**\n * Enumeration indicates state of Alarm used in building Alarm Rule.\n */\nexport enum AlarmState {\n\n  /**\n   * State indicates resource is in ALARM\n   */\n  ALARM = 'ALARM',\n\n  /**\n   * State indicates resource is not in ALARM\n   */\n  OK = 'OK',\n\n  /**\n   * State indicates there is not enough data to determine is resource is in ALARM\n   */\n  INSUFFICIENT_DATA = 'INSUFFICIENT_DATA',\n\n}\n\n/**\n * Enumeration of supported Composite Alarms operators.\n */\nenum Operator {\n\n  AND = 'AND',\n  OR = 'OR',\n  NOT = 'NOT',\n\n}\n\n/**\n * Class with static functions to build AlarmRule for Composite Alarms.\n */\nexport class AlarmRule {\n\n  /**\n   * function to join all provided AlarmRules with AND operator.\n   *\n   * @param operands IAlarmRules to be joined with AND operator.\n   */\n  public static allOf(...operands: IAlarmRule[]): IAlarmRule {\n    return this.concat(Operator.AND, ...operands);\n  }\n\n  /**\n   * function to join all provided AlarmRules with OR operator.\n   *\n   * @param operands IAlarmRules to be joined with OR operator.\n   */\n  public static anyOf(...operands: IAlarmRule[]): IAlarmRule {\n    return this.concat(Operator.OR, ...operands);\n  }\n\n  /**\n   * function to wrap provided AlarmRule in NOT operator.\n   *\n   * @param operand IAlarmRule to be wrapped in NOT operator.\n   */\n  public static not(operand: IAlarmRule): IAlarmRule {\n    return new class implements IAlarmRule {\n      public renderAlarmRule(): string {\n        return `(NOT (${operand.renderAlarmRule()}))`;\n      }\n    };\n  }\n\n  /**\n   * function to build TRUE/FALSE intent for Rule Expression.\n   *\n   * @param value boolean value to be used in rule expression.\n   */\n  public static fromBoolean(value: boolean): IAlarmRule {\n    return new class implements IAlarmRule {\n      public renderAlarmRule(): string {\n        return `${String(value).toUpperCase()}`;\n      }\n    };\n  }\n\n  /**\n   * function to build Rule Expression for given IAlarm and AlarmState.\n   *\n   * @param alarm IAlarm to be used in Rule Expression.\n   * @param alarmState AlarmState to be used in Rule Expression.\n   */\n  public static fromAlarm(alarm: IAlarm, alarmState: AlarmState): IAlarmRule {\n    return new class implements IAlarmRule {\n      public renderAlarmRule(): string {\n        return `${alarmState}(\"${alarm.alarmArn}\")`;\n      }\n    };\n  }\n\n  /**\n   * function to build Rule Expression for given Alarm Rule string.\n   *\n   * @param alarmRule string to be used in Rule Expression.\n   */\n  public static fromString(alarmRule: string): IAlarmRule {\n    return new class implements IAlarmRule {\n      public renderAlarmRule(): string {\n        return alarmRule;\n      }\n    };\n  }\n\n  private static concat(operator: Operator, ...operands: IAlarmRule[]): IAlarmRule {\n    return new class implements IAlarmRule {\n      public renderAlarmRule(): string {\n        const expression = operands\n          .map(operand => `${operand.renderAlarmRule()}`)\n          .join(` ${operator} `);\n        return `(${expression})`;\n      }\n    };\n  }\n}\n"],
  "mappings": "mOAKA,GAAY,YAAZ,AAAA,UAAY,YAAU,CAKpB,YAAA,MAAA,QAKA,YAAA,GAAA,KAKA,YAAA,kBAAA,mBAEF,GAjBY,WAAA,QAAA,YAAA,SAAA,WAAU,CAAA,EAAA,EAsBtB,GAAK,UAAL,AAAA,UAAK,UAAQ,CAEX,UAAA,IAAA,MACA,UAAA,GAAA,KACA,UAAA,IAAA,KAEF,GANK,UAAA,UAAQ,CAAA,EAAA,EAWb,MAAa,SAAS,OAON,UAAS,SAAsB,gFACpC,KAAK,OAAO,SAAS,IAAK,GAAG,QAAQ,QAQhC,UAAS,SAAsB,gFACpC,KAAK,OAAO,SAAS,GAAI,GAAG,QAAQ,QAQ/B,KAAI,QAAmB,+EAC5B,GAAI,MAAA,CACF,iBAAe,CACpB,MAAO,SAAS,QAAQ,gBAAe,KACzC,SASU,aAAY,MAAc,CACtC,MAAO,IAAI,MAAA,CACF,iBAAe,CACpB,MAAO,GAAG,OAAO,KAAK,EAAE,YAAW,GACrC,SAUU,WAAU,MAAe,WAAsB,mJACpD,GAAI,MAAA,CACF,iBAAe,CACpB,MAAO,GAAG,eAAe,MAAM,YACjC,SASU,YAAW,UAAiB,CACxC,MAAO,IAAI,MAAA,CACF,iBAAe,CACpB,MAAO,UACT,SAIW,QAAO,YAAuB,SAAsB,CACjE,MAAO,IAAI,MAAA,CACF,iBAAe,CAIpB,MAAO,IAHY,SAChB,IAAI,SAAW,GAAG,QAAQ,gBAAe,GAAI,EAC7C,KAAK,IAAI,WAAW,IAEzB,IAhFN,QAAA,UAAA",
  "names": []
}
