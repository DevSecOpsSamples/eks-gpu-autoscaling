{
  "version": 3,
  "sources": ["build.js"],
  "sourcesContent": ["/**\n * This build file has two purposes:\n *   1. It adds a dependency on each @aws-cdk/aws-xyz package with L1s to this package.\n *   2. It generates the file cfn-types-2-classes.json that contains a mapping\n *     between the CloudFormation type and the fully-qualified name of the L1 class,\n *     used in the logic of the CfnInclude class.\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst jsii_reflect = require('jsii-reflect');\n\nconst packageJson = require('./package.json');\nconst dependencies = packageJson.dependencies || {};\nconst peerDependencies = packageJson.peerDependencies || {};\n\nasync function main() {\n  const constructLibrariesRoot = path.resolve('..');\n  const constructLibrariesDirs = fs.readdirSync(constructLibrariesRoot);\n  let errors = false;\n\n  const typeSystem = new jsii_reflect.TypeSystem();\n  const cfnType2L1Class = {};\n  // load the @aws-cdk/core assembly first, to find the CfnResource class\n  await typeSystem.load(path.resolve(constructLibrariesRoot, 'core'), { validate: false });\n  const cfnResourceClass = typeSystem.findClass('@aws-cdk/core.CfnResource');\n\n  for (const constructLibraryDir of constructLibrariesDirs) {\n    const absConstructLibraryDir = path.resolve(constructLibrariesRoot, constructLibraryDir);\n    if (!fs.statSync(absConstructLibraryDir).isDirectory()) { continue; } // .DS_Store\n\n    const libraryPackageJson = require(path.join(absConstructLibraryDir, 'package.json'));\n\n    const libraryDependencyVersion = dependencies[libraryPackageJson.name];\n    if (libraryPackageJson.maturity === 'deprecated') {\n      if (libraryDependencyVersion) {\n        console.error(`Incorrect dependency on deprecated package: ${libraryPackageJson.name}`);\n        errors = true;\n        delete dependencies[libraryPackageJson.name];\n        delete peerDependencies[libraryPackageJson.name];\n      }\n      // we don't want dependencies on deprecated modules,\n      // even if they do contain L1s (like eks-legacy)\n      continue;\n    }\n\n    // we're not interested in modules that don't use cfn2ts\n    // (as they don't contain any L1s)\n    const cfn2ts = (libraryPackageJson['cdk-build'] || {}).cloudformation;\n    if (!cfn2ts) {\n      continue;\n    }\n\n    const libraryVersion = libraryPackageJson.version;\n    if (!libraryDependencyVersion) {\n      console.error(`Missing dependency on package: ${libraryPackageJson.name}`);\n      errors = true;\n    } else if (libraryDependencyVersion !== libraryVersion) {\n      console.error(`Incorrect dependency version for package ${libraryPackageJson.name}: expecting '${libraryVersion}', got: '${libraryDependencyVersion}'`);\n      errors = true;\n    }\n\n    dependencies[libraryPackageJson.name] = libraryVersion;\n    // dependencies need to be in both sections to satisfy pkglint\n    peerDependencies[libraryPackageJson.name] = libraryVersion;\n\n    // load the assembly of this package,\n    // and find all subclasses of CfnResource to put them in cfnType2L1Class\n    const assembly = await typeSystem.load(absConstructLibraryDir, { validate: false });\n    for (let i = 0; i < assembly.classes.length; i++) {\n      const classs = assembly.classes[i];\n      if (classs.extends(cfnResourceClass)) {\n        const properties = classs.spec.properties;\n        const cfnResourceTypeNameProp = (properties || []).find(p => p.name === 'CFN_RESOURCE_TYPE_NAME');\n        if (cfnResourceTypeNameProp) {\n          const [moduleName, ...className] = classs.fqn.split('.');\n          const module = require(moduleName);\n          const jsClassFromModule = module[className.join('.')];\n          cfnType2L1Class[jsClassFromModule.CFN_RESOURCE_TYPE_NAME] = classs.fqn;\n        }\n      }\n    }\n  }\n\n  fs.writeFileSync(path.join(__dirname, 'package.json'),\n      JSON.stringify(packageJson, undefined, 2) + '\\n');\n  fs.writeFileSync(path.join(__dirname, 'cfn-types-2-classes.json'),\n      JSON.stringify(cfnType2L1Class, undefined, 2) + '\\n');\n\n  if (errors) {\n    console.error('errors found. updated package.json');\n    process.exit(1);\n  }\n}\n\n(async () => {\n  try {\n    await main();\n  } catch (e) {\n    console.error(e);\n    process.exit(1);\n  }\n})();\n"],
  "mappings": "AAQA,KAAM,IAAK,QAAQ,IAAI,EACjB,KAAO,QAAQ,MAAM,EAErB,aAAe,QAAQ,cAAc,EAErC,YAAc,QAAQ,gBAAgB,EACtC,aAAe,YAAY,cAAgB,CAAC,EAC5C,iBAAmB,YAAY,kBAAoB,CAAC,EAE1D,qBAAsB,CACpB,KAAM,wBAAyB,KAAK,QAAQ,IAAI,EAC1C,uBAAyB,GAAG,YAAY,sBAAsB,EACpE,GAAI,QAAS,GAEb,KAAM,YAAa,GAAI,cAAa,WAC9B,gBAAkB,CAAC,EAEzB,KAAM,YAAW,KAAK,KAAK,QAAQ,uBAAwB,MAAM,EAAG,CAAE,SAAU,EAAM,CAAC,EACvF,KAAM,kBAAmB,WAAW,UAAU,2BAA2B,EAEzE,SAAW,uBAAuB,wBAAwB,CACxD,KAAM,wBAAyB,KAAK,QAAQ,uBAAwB,mBAAmB,EACvF,GAAI,CAAC,GAAG,SAAS,sBAAsB,EAAE,YAAY,EAAK,SAE1D,KAAM,oBAAqB,QAAQ,KAAK,KAAK,uBAAwB,cAAc,CAAC,EAE9E,yBAA2B,aAAa,mBAAmB,MACjE,GAAI,mBAAmB,WAAa,aAAc,CAChD,AAAI,0BACF,SAAQ,MAAM,+CAA+C,mBAAmB,MAAM,EACtF,OAAS,GACT,MAAO,cAAa,mBAAmB,MACvC,MAAO,kBAAiB,mBAAmB,OAI7C,QACF,CAKA,GAAI,CADY,oBAAmB,cAAgB,CAAC,GAAG,eAErD,SAGF,KAAM,gBAAiB,mBAAmB,QAC1C,AAAK,yBAGM,2BAA6B,gBACtC,SAAQ,MAAM,4CAA4C,mBAAmB,oBAAoB,0BAA0B,2BAA2B,EACtJ,OAAS,IAJT,SAAQ,MAAM,kCAAkC,mBAAmB,MAAM,EACzE,OAAS,IAMX,aAAa,mBAAmB,MAAQ,eAExC,iBAAiB,mBAAmB,MAAQ,eAI5C,KAAM,UAAW,KAAM,YAAW,KAAK,uBAAwB,CAAE,SAAU,EAAM,CAAC,EAClF,OAAS,GAAI,EAAG,EAAI,SAAS,QAAQ,OAAQ,IAAK,CAChD,KAAM,QAAS,SAAS,QAAQ,GAChC,GAAI,OAAO,QAAQ,gBAAgB,GAEA,CADd,OAAO,KAAK,YACgB,CAAC,GAAG,KAAK,GAAK,EAAE,OAAS,wBAAwB,EACnE,CAC3B,KAAM,CAAC,cAAe,WAAa,OAAO,IAAI,MAAM,GAAG,EAEjD,kBAAoB,AADX,QAAQ,UAAU,EACA,UAAU,KAAK,GAAG,GACnD,gBAAgB,kBAAkB,wBAA0B,OAAO,GACrE,CAEJ,CACF,CAEA,GAAG,cAAc,KAAK,KAAK,UAAW,cAAc,EAChD,KAAK,UAAU,YAAa,OAAW,CAAC,EAAI;AAAA,CAAI,EACpD,GAAG,cAAc,KAAK,KAAK,UAAW,0BAA0B,EAC5D,KAAK,UAAU,gBAAiB,OAAW,CAAC,EAAI;AAAA,CAAI,EAEpD,QACF,SAAQ,MAAM,oCAAoC,EAClD,QAAQ,KAAK,CAAC,EAElB,CAEA,AAAC,UAAY,CACX,GAAI,CACF,KAAM,MAAK,CACb,OAAS,EAAP,CACA,QAAQ,MAAM,CAAC,EACf,QAAQ,KAAK,CAAC,CAChB,CACF,GAAG",
  "names": []
}
