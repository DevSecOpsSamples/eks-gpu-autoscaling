{
  "version": 3,
  "sources": ["yaml-cfn.ts"],
  "sourcesContent": ["import * as yaml from 'yaml';\nimport * as yaml_cst from 'yaml/parse-cst';\nimport * as yaml_types from 'yaml/types';\n\n/**\n * Serializes the given data structure into valid YAML.\n *\n * @param obj the data structure to serialize\n * @returns a string containing the YAML representation of {@param obj}\n */\nexport function serialize(obj: any): string {\n  const oldFold = yaml_types.strOptions.fold.lineWidth;\n  try {\n    yaml_types.strOptions.fold.lineWidth = 0;\n    return yaml.stringify(obj, { schema: 'yaml-1.1' });\n  } finally {\n    yaml_types.strOptions.fold.lineWidth = oldFold;\n  }\n}\n\n/**\n * Deserialize the YAML into the appropriate data structure.\n *\n * @param str the string containing YAML\n * @returns the data structure the YAML represents\n *   (most often in case of CloudFormation, an object)\n */\nexport function deserialize(str: string): any {\n  return parseYamlStrWithCfnTags(str);\n}\n\nfunction makeTagForCfnIntrinsic(intrinsicName: string, addFnPrefix: boolean): yaml_types.Schema.CustomTag {\n  return {\n    identify(value: any) { return typeof value === 'string'; },\n    tag: `!${intrinsicName}`,\n    resolve: (_doc: yaml.Document, cstNode: yaml_cst.CST.Node) => {\n      const ret: any = {};\n      ret[addFnPrefix ? `Fn::${intrinsicName}` : intrinsicName] =\n        // the +1 is to account for the ! the short form begins with\n        parseYamlStrWithCfnTags(cstNode.toString().substring(intrinsicName.length + 1));\n      return ret;\n    },\n  };\n}\n\nconst shortForms: yaml_types.Schema.CustomTag[] = [\n  'Base64', 'Cidr', 'FindInMap', 'GetAZs', 'ImportValue', 'Join', 'Sub',\n  'Select', 'Split', 'Transform', 'And', 'Equals', 'If', 'Not', 'Or', 'GetAtt',\n].map(name => makeTagForCfnIntrinsic(name, true)).concat(\n  makeTagForCfnIntrinsic('Ref', false),\n  makeTagForCfnIntrinsic('Condition', false),\n);\n\nfunction parseYamlStrWithCfnTags(text: string): any {\n  return yaml.parse(text, {\n    customTags: shortForms,\n    schema: 'core',\n  });\n}\n\n"],
  "mappings": "iHAAA,KAAA,MAAA,QAAA,MAAA,EAEA,WAAA,QAAA,YAAA,EAQA,mBAA0B,IAAQ,CAChC,KAAM,SAAU,WAAW,WAAW,KAAK,UAC3C,GAAI,CACF,kBAAW,WAAW,KAAK,UAAY,EAChC,KAAK,UAAU,IAAK,CAAE,OAAQ,UAAU,CAAE,UAEjD,WAAW,WAAW,KAAK,UAAY,QAE3C,CARA,QAAA,UAAA,UAiBA,qBAA4B,IAAW,CACrC,MAAO,yBAAwB,GAAG,CACpC,CAFA,QAAA,YAAA,YAIA,gCAAgC,cAAuB,YAAoB,CACzE,MAAO,CACL,SAAS,MAAU,CAAI,MAAO,OAAO,QAAU,QAAS,EACxD,IAAK,IAAI,gBACT,QAAS,CAAC,KAAqB,UAA8B,CAC3D,KAAM,KAAW,CAAA,EACjB,WAAI,YAAc,OAAO,gBAAkB,eAEzC,wBAAwB,QAAQ,SAAQ,EAAG,UAAU,cAAc,OAAS,CAAC,CAAC,EACzE,GACT,EAEJ,CAEA,KAAM,YAA4C,CAChD,SAAU,OAAQ,YAAa,SAAU,cAAe,OAAQ,MAChE,SAAU,QAAS,YAAa,MAAO,SAAU,KAAM,MAAO,KAAM,UACpE,IAAI,MAAQ,uBAAuB,KAAM,EAAI,CAAC,EAAE,OAChD,uBAAuB,MAAO,EAAK,EACnC,uBAAuB,YAAa,EAAK,CAAC,EAG5C,iCAAiC,KAAY,CAC3C,MAAO,MAAK,MAAM,KAAM,CACtB,WAAY,WACZ,OAAQ,OACT,CACH",
  "names": []
}
