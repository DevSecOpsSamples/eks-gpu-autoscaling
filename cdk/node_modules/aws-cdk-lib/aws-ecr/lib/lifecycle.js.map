{
  "version": 3,
  "sources": ["lifecycle.ts"],
  "sourcesContent": ["import { Duration } from '../../core';\n\n/**\n * An ECR life cycle rule\n */\nexport interface LifecycleRule {\n  /**\n   * Controls the order in which rules are evaluated (low to high)\n   *\n   * All rules must have a unique priority, where lower numbers have\n   * higher precedence. The first rule that matches is applied to an image.\n   *\n   * There can only be one rule with a tagStatus of Any, and it must have\n   * the highest rulePriority.\n   *\n   * All rules without a specified priority will have incrementing priorities\n   * automatically assigned to them, higher than any rules that DO have priorities.\n   *\n   * @default Automatically assigned\n   */\n  readonly rulePriority?: number;\n\n  /**\n   * Describes the purpose of the rule\n   *\n   * @default No description\n   */\n  readonly description?: string;\n\n  /**\n   * Select images based on tags\n   *\n   * Only one rule is allowed to select untagged images, and it must\n   * have the highest rulePriority.\n   *\n   * @default TagStatus.Tagged if tagPrefixList is given, TagStatus.Any otherwise\n   */\n  readonly tagStatus?: TagStatus;\n\n  /**\n   * Select images that have ALL the given prefixes in their tag.\n   *\n   * Only if tagStatus == TagStatus.Tagged\n   */\n  readonly tagPrefixList?: string[];\n\n  /**\n   * The maximum number of images to retain\n   *\n   * Specify exactly one of maxImageCount and maxImageAge.\n   */\n  readonly maxImageCount?: number;\n\n  /**\n   * The maximum age of images to retain. The value must represent a number of days.\n   *\n   * Specify exactly one of maxImageCount and maxImageAge.\n   */\n  readonly maxImageAge?: Duration;\n}\n\n/**\n * Select images based on tags\n */\nexport enum TagStatus {\n  /**\n   * Rule applies to all images\n   */\n  ANY = 'any',\n\n  /**\n   * Rule applies to tagged images\n   */\n  TAGGED = 'tagged',\n\n  /**\n   * Rule applies to untagged images\n   */\n  UNTAGGED = 'untagged',\n}\n"],
  "mappings": "6FAgEA,GAAY,WAAZ,AAAA,UAAY,WAAS,CAInB,WAAA,IAAA,MAKA,WAAA,OAAA,SAKA,WAAA,SAAA,UACF,GAfY,UAAA,QAAA,WAAA,SAAA,UAAS,CAAA,EAAA",
  "names": []
}
