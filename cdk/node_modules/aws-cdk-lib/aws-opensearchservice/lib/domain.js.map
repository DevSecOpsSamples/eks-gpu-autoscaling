{
  "version": 3,
  "sources": ["domain.ts"],
  "sourcesContent": ["import { URL } from 'url';\n\nimport * as acm from '../../aws-certificatemanager';\nimport { Metric, MetricOptions, Statistic } from '../../aws-cloudwatch';\nimport * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as logs from '../../aws-logs';\nimport * as route53 from '../../aws-route53';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\n\nimport { LogGroupResourcePolicy } from './log-group-resource-policy';\nimport { OpenSearchAccessPolicy } from './opensearch-access-policy';\nimport { CfnDomain } from './opensearchservice.generated';\nimport * as perms from './perms';\nimport { EngineVersion } from './version';\n\n/**\n * Configures the capacity of the cluster such as the instance type and the\n * number of instances.\n */\nexport interface CapacityConfig {\n  /**\n   * The number of instances to use for the master node.\n   *\n   * @default - no dedicated master nodes\n   */\n  readonly masterNodes?: number;\n\n  /**\n   * The hardware configuration of the computer that hosts the dedicated master\n   * node, such as `m3.medium.search`. For valid values, see [Supported\n   * Instance Types]\n   * (https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html)\n   * in the Amazon OpenSearch Service Developer Guide.\n   *\n   * @default - r5.large.search\n   */\n  readonly masterNodeInstanceType?: string;\n\n  /**\n   * The number of data nodes (instances) to use in the Amazon OpenSearch Service domain.\n   *\n   * @default - 1\n   */\n  readonly dataNodes?: number;\n\n  /**\n   * The instance type for your data nodes, such as\n   * `m3.medium.search`. For valid values, see [Supported Instance\n   * Types](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html)\n   * in the Amazon OpenSearch Service Developer Guide.\n   *\n   * @default - r5.large.search\n   */\n  readonly dataNodeInstanceType?: string;\n\n  /**\n   * The number of UltraWarm nodes (instances) to use in the Amazon OpenSearch Service domain.\n   *\n   * @default - no UltraWarm nodes\n   */\n  readonly warmNodes?: number;\n\n  /**\n   * The instance type for your UltraWarm node, such as `ultrawarm1.medium.search`.\n   * For valid values, see [UltraWarm Storage Limits]\n   * (https://docs.aws.amazon.com/opensearch-service/latest/developerguide/limits.html#limits-ultrawarm)\n   * in the Amazon OpenSearch Service Developer Guide.\n   *\n   * @default - ultrawarm1.medium.search\n   */\n  readonly warmInstanceType?: string;\n\n}\n\n/**\n * Specifies zone awareness configuration options.\n */\nexport interface ZoneAwarenessConfig {\n  /**\n   * Indicates whether to enable zone awareness for the Amazon OpenSearch Service domain.\n   * When you enable zone awareness, Amazon OpenSearch Service allocates the nodes and replica\n   * index shards that belong to a cluster across two Availability Zones (AZs)\n   * in the same region to prevent data loss and minimize downtime in the event\n   * of node or data center failure. Don't enable zone awareness if your cluster\n   * has no replica index shards or is a single-node cluster. For more information,\n   * see [Configuring a Multi-AZ Domain]\n   * (https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html)\n   * in the Amazon OpenSearch Service Developer Guide.\n   *\n   * @default - false\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * If you enabled multiple Availability Zones (AZs), the number of AZs that you\n   * want the domain to use. Valid values are 2 and 3.\n   *\n   * @default - 2 if zone awareness is enabled.\n   */\n  readonly availabilityZoneCount?: number;\n}\n\n/**\n * The configurations of Amazon Elastic Block Store (Amazon EBS) volumes that\n * are attached to data nodes in the Amazon OpenSearch Service domain. For more information, see\n * [Amazon EBS]\n * (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html)\n * in the Amazon Elastic Compute Cloud Developer Guide.\n */\nexport interface EbsOptions {\n  /**\n   * Specifies whether Amazon EBS volumes are attached to data nodes in the\n   * Amazon OpenSearch Service domain.\n   *\n   * @default - true\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * The number of I/O operations per second (IOPS) that the volume\n   * supports. This property applies only to the Provisioned IOPS (SSD) EBS\n   * volume type.\n   *\n   * @default - iops are not set.\n   */\n  readonly iops?: number;\n\n  /**\n   * The size (in GiB) of the EBS volume for each data node. The minimum and\n   * maximum size of an EBS volume depends on the EBS volume type and the\n   * instance type to which it is attached.  For  valid values, see\n   * [EBS volume size limits]\n   * (https://docs.aws.amazon.com/opensearch-service/latest/developerguide/limits.html#ebsresource)\n   * in the Amazon OpenSearch Service Developer Guide.\n   *\n   * @default 10\n   */\n  readonly volumeSize?: number;\n\n  /**\n   * The EBS volume type to use with the Amazon OpenSearch Service domain, such as standard, gp2, io1.\n   *\n   * @default gp2\n   */\n  readonly volumeType?: ec2.EbsDeviceVolumeType;\n}\n\n/**\n * Configures log settings for the domain.\n */\nexport interface LoggingOptions {\n  /**\n   * Specify if slow search logging should be set up.\n   * Requires Elasticsearch version 5.1 or later or OpenSearch version 1.0 or later.\n   *\n   * @default - false\n   */\n  readonly slowSearchLogEnabled?: boolean;\n\n  /**\n   * Log slow searches to this log group.\n   *\n   * @default - a new log group is created if slow search logging is enabled\n   */\n  readonly slowSearchLogGroup?: logs.ILogGroup;\n\n  /**\n   * Specify if slow index logging should be set up.\n   * Requires Elasticsearch version 5.1 or later or OpenSearch version 1.0 or later.\n   *\n   * @default - false\n   */\n  readonly slowIndexLogEnabled?: boolean;\n\n  /**\n   * Log slow indices to this log group.\n   *\n   * @default - a new log group is created if slow index logging is enabled\n   */\n  readonly slowIndexLogGroup?: logs.ILogGroup;\n\n  /**\n   * Specify if Amazon OpenSearch Service application logging should be set up.\n   * Requires Elasticsearch version 5.1 or later or OpenSearch version 1.0 or later.\n   *\n   * @default - false\n   */\n  readonly appLogEnabled?: boolean;\n\n  /**\n   * Log Amazon OpenSearch Service application logs to this log group.\n   *\n   * @default - a new log group is created if app logging is enabled\n   */\n  readonly appLogGroup?: logs.ILogGroup;\n\n  /**\n   * Specify if Amazon OpenSearch Service audit logging should be set up.\n   * Requires Elasticsearch version 6.7 or later or OpenSearch version 1.0 or later and fine grained access control to be enabled.\n   *\n   * @default - false\n   */\n  readonly auditLogEnabled?: boolean;\n\n  /**\n   * Log Amazon OpenSearch Service audit logs to this log group.\n   *\n   * @default - a new log group is created if audit logging is enabled\n   */\n  readonly auditLogGroup?: logs.ILogGroup;\n}\n\n/**\n * Whether the domain should encrypt data at rest, and if so, the AWS Key\n * Management Service (KMS) key to use. Can only be used to create a new domain,\n * not update an existing one. Requires Elasticsearch version 5.1 or later or OpenSearch version 1.0 or later.\n */\nexport interface EncryptionAtRestOptions {\n  /**\n   * Specify true to enable encryption at rest.\n   *\n   * @default - encryption at rest is disabled.\n   */\n  readonly enabled?: boolean;\n\n  /**\n   * Supply if using KMS key for encryption at rest.\n   *\n   * @default - uses default aws/es KMS key.\n   */\n  readonly kmsKey?: kms.IKey;\n}\n\n/**\n * Configures Amazon OpenSearch Service to use Amazon Cognito authentication for OpenSearch Dashboards.\n * @see https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html\n */\nexport interface CognitoOptions {\n  /**\n   * The Amazon Cognito identity pool ID that you want Amazon OpenSearch Service to use for OpenSearch Dashboards authentication.\n   */\n  readonly identityPoolId: string;\n\n  /**\n   * A role that allows Amazon OpenSearch Service to configure your user pool and identity pool. It must have the `AmazonESCognitoAccess` policy attached to it.\n   *\n   * @see https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html#cognito-auth-prereq\n   */\n  readonly role: iam.IRole;\n\n  /**\n   * The Amazon Cognito user pool ID that you want Amazon OpenSearch Service to use for OpenSearch Dashboards authentication.\n   */\n  readonly userPoolId: string;\n}\n\n/**\n * The minimum TLS version required for traffic to the domain.\n */\nexport enum TLSSecurityPolicy {\n  /** Cipher suite TLS 1.0 */\n  TLS_1_0 = 'Policy-Min-TLS-1-0-2019-07',\n  /** Cipher suite TLS 1.2 */\n  TLS_1_2 = 'Policy-Min-TLS-1-2-2019-07'\n}\n\n/**\n * Specifies options for fine-grained access control.\n */\nexport interface AdvancedSecurityOptions {\n  /**\n   * ARN for the master user. Only specify this or masterUserName, but not both.\n   *\n   * @default - fine-grained access control is disabled\n   */\n  readonly masterUserArn?: string;\n\n  /**\n   * Username for the master user. Only specify this or masterUserArn, but not both.\n   *\n   * @default - fine-grained access control is disabled\n   */\n  readonly masterUserName?: string;\n\n  /**\n   * Password for the master user.\n   *\n   * You can use `SecretValue.plainText` to specify a password in plain text or\n   * use `secretsmanager.Secret.fromSecretAttributes` to reference a secret in\n   * Secrets Manager.\n   *\n   * @default - A Secrets Manager generated password\n   */\n  readonly masterUserPassword?: cdk.SecretValue;\n}\n\n/**\n * Configures a custom domain endpoint for the Amazon OpenSearch Service domain\n */\nexport interface CustomEndpointOptions {\n  /**\n   * The custom domain name to assign\n   */\n  readonly domainName: string;\n\n  /**\n   * The certificate to use\n   * @default - create a new one\n   */\n  readonly certificate?: acm.ICertificate;\n\n  /**\n   * The hosted zone in Route53 to create the CNAME record in\n   * @default - do not create a CNAME\n   */\n  readonly hostedZone?: route53.IHostedZone;\n}\n\n/**\n * Properties for an Amazon OpenSearch Service domain.\n */\nexport interface DomainProps {\n  /**\n   * Domain access policies.\n   *\n   * @default - No access policies.\n   */\n  readonly accessPolicies?: iam.PolicyStatement[];\n\n  /**\n   * Additional options to specify for the Amazon OpenSearch Service domain.\n   *\n   * @see https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options\n   * @default - no advanced options are specified\n   */\n  readonly advancedOptions?: { [key: string]: (string) };\n\n  /**\n   * Configures Amazon OpenSearch Service to use Amazon Cognito authentication for OpenSearch Dashboards.\n   *\n   * @default - Cognito not used for authentication to OpenSearch Dashboards.\n   */\n  readonly cognitoDashboardsAuth?: CognitoOptions;\n\n  /**\n   * Enforces a particular physical domain name.\n   *\n   * @default - A name will be auto-generated.\n   */\n  readonly domainName?: string;\n\n  /**\n   * The configurations of Amazon Elastic Block Store (Amazon EBS) volumes that\n   * are attached to data nodes in the Amazon OpenSearch Service domain.\n   *\n   * @default - 10 GiB General Purpose (SSD) volumes per node.\n   */\n  readonly ebs?: EbsOptions;\n\n  /**\n   * The cluster capacity configuration for the Amazon OpenSearch Service domain.\n   *\n   * @default - 1 r5.large.search data node; no dedicated master nodes.\n   */\n  readonly capacity?: CapacityConfig;\n\n  /**\n   * The cluster zone awareness configuration for the Amazon OpenSearch Service domain.\n   *\n   * @default - no zone awareness (1 AZ)\n   */\n  readonly zoneAwareness?: ZoneAwarenessConfig;\n\n  /**\n   * The Elasticsearch/OpenSearch version that your domain will leverage.\n   */\n  readonly version: EngineVersion;\n\n  /**\n   * Encryption at rest options for the cluster.\n   *\n   * @default - No encryption at rest\n   */\n  readonly encryptionAtRest?: EncryptionAtRestOptions;\n\n  /**\n   * Configuration log publishing configuration options.\n   *\n   * @default - No logs are published\n   */\n  readonly logging?: LoggingOptions;\n\n  /**\n   * Specify true to enable node to node encryption.\n   * Requires Elasticsearch version 6.0 or later or OpenSearch version 1.0 or later.\n   *\n   * @default - Node to node encryption is not enabled.\n   */\n  readonly nodeToNodeEncryption?: boolean;\n\n  /**\n   * The hour in UTC during which the service takes an automated daily snapshot\n   * of the indices in the Amazon OpenSearch Service domain. Only applies for Elasticsearch versions\n   * below 5.3.\n   *\n   * @default - Hourly automated snapshots not used\n   */\n  readonly automatedSnapshotStartHour?: number;\n\n  /**\n   * Place the domain inside this VPC.\n   *\n   * @see https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html\n   * @default - Domain is not placed in a VPC.\n   */\n  readonly vpc?: ec2.IVpc;\n\n  /**\n   * The list of security groups that are associated with the VPC endpoints\n   * for the domain.\n   *\n   * Only used if `vpc` is specified.\n   *\n   * @see https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\n   * @default - One new security group is created.\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n  /**\n   * The specific vpc subnets the domain will be placed in. You must provide one subnet for each Availability Zone\n   * that your domain uses. For example, you must specify three subnet IDs for a three Availability Zone\n   * domain.\n   *\n   * Only used if `vpc` is specified.\n   *\n   * @see https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\n   * @default - All private subnets.\n   */\n  readonly vpcSubnets?: ec2.SubnetSelection[];\n\n  /**\n   * True to require that all traffic to the domain arrive over HTTPS.\n   *\n   * @default - false\n   */\n  readonly enforceHttps?: boolean;\n\n  /**\n   * The minimum TLS version required for traffic to the domain.\n   *\n   * @default - TLSSecurityPolicy.TLS_1_0\n   */\n  readonly tlsSecurityPolicy?: TLSSecurityPolicy;\n\n  /**\n   * Specifies options for fine-grained access control.\n   * Requires Elasticsearch version 6.7 or later or OpenSearch version 1.0 or later. Enabling fine-grained access control\n   * also requires encryption of data at rest and node-to-node encryption, along with\n   * enforced HTTPS.\n   *\n   * @default - fine-grained access control is disabled\n   */\n  readonly fineGrainedAccessControl?: AdvancedSecurityOptions;\n\n  /**\n   * Configures the domain so that unsigned basic auth is enabled. If no master user is provided a default master user\n   * with username `admin` and a dynamically generated password stored in KMS is created. The password can be retrieved\n   * by getting `masterUserPassword` from the domain instance.\n   *\n   * Setting this to true will also add an access policy that allows unsigned\n   * access, enable node to node encryption, encryption at rest. If conflicting\n   * settings are encountered (like disabling encryption at rest) enabling this\n   * setting will cause a failure.\n   *\n   * @default - false\n   */\n  readonly useUnsignedBasicAuth?: boolean;\n\n  /**\n   * To upgrade an Amazon OpenSearch Service domain to a new version, rather than replacing the entire\n   * domain resource, use the EnableVersionUpgrade update policy.\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html#cfn-attributes-updatepolicy-upgradeopensearchdomain\n   * @default - false\n   */\n  readonly enableVersionUpgrade?: boolean;\n\n  /**\n   * Policy to apply when the domain is removed from the stack\n   *\n   * @default RemovalPolicy.RETAIN\n   */\n  readonly removalPolicy?: cdk.RemovalPolicy;\n\n  /**\n   * To configure a custom domain configure these options\n   *\n   * If you specify a Route53 hosted zone it will create a CNAME record and use DNS validation for the certificate\n   * @default - no custom domain endpoint will be configured\n   */\n  readonly customEndpoint?: CustomEndpointOptions;\n}\n\n/**\n * An interface that represents an Amazon OpenSearch Service domain - either created with the CDK, or an existing one.\n */\nexport interface IDomain extends cdk.IResource {\n  /**\n   * Arn of the Amazon OpenSearch Service domain.\n   *\n   * @attribute\n   */\n  readonly domainArn: string;\n\n  /**\n   * Domain name of the Amazon OpenSearch Service domain.\n   *\n   * @attribute\n   */\n  readonly domainName: string;\n\n  /**\n   * Identifier of the Amazon OpenSearch Service domain.\n   *\n   * @attribute\n   */\n  readonly domainId: string;\n\n  /**\n   * Endpoint of the Amazon OpenSearch Service domain.\n   *\n   * @attribute\n   */\n  readonly domainEndpoint: string;\n\n  /**\n   * Grant read permissions for this domain and its contents to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param identity The principal\n   */\n  grantRead(identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant write permissions for this domain and its contents to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param identity The principal\n   */\n  grantWrite(identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant read/write permissions for this domain and its contents to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param identity The principal\n   */\n  grantReadWrite(identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant read permissions for an index in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param index The index to grant permissions for\n   * @param identity The principal\n   */\n  grantIndexRead(index: string, identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant write permissions for an index in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param index The index to grant permissions for\n   * @param identity The principal\n   */\n  grantIndexWrite(index: string, identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant read/write permissions for an index in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param index The index to grant permissions for\n   * @param identity The principal\n   */\n  grantIndexReadWrite(index: string, identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant read permissions for a specific path in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param path The path to grant permissions for\n   * @param identity The principal\n   */\n  grantPathRead(path: string, identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant write permissions for a specific path in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param path The path to grant permissions for\n   * @param identity The principal\n   */\n  grantPathWrite(path: string, identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant read/write permissions for a specific path in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param path The path to grant permissions for\n   * @param identity The principal\n   */\n  grantPathReadWrite(path: string, identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Return the given named metric for this domain.\n   */\n  metric(metricName: string, props?: MetricOptions): Metric;\n\n  /**\n   * Metric for the time the cluster status is red.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricClusterStatusRed(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for the time the cluster status is yellow.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricClusterStatusYellow(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for the storage space of nodes in the cluster.\n   *\n   * @default minimum over 5 minutes\n   */\n  metricFreeStorageSpace(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for the cluster blocking index writes.\n   *\n   * @default maximum over 1 minute\n   */\n  metricClusterIndexWritesBlocked(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for the number of nodes.\n   *\n   * @default minimum over 1 hour\n   */\n  metricNodes(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for automated snapshot failures.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricAutomatedSnapshotFailure(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for CPU utilization.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricCPUUtilization(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for JVM memory pressure.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricJVMMemoryPressure(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for master CPU utilization.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricMasterCPUUtilization(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for master JVM memory pressure.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricMasterJVMMemoryPressure(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for KMS key errors.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricKMSKeyError(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for KMS key being inaccessible.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricKMSKeyInaccessible(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for number of searchable documents.\n   *\n   * @default maximum over 5 minutes\n   */\n  metricSearchableDocuments(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for search latency.\n   *\n   * @default p99 over 5 minutes\n   */\n  metricSearchLatency(props?: MetricOptions): Metric;\n\n  /**\n   * Metric for indexing latency.\n   *\n   * @default p99 over 5 minutes\n   */\n  metricIndexingLatency(props?: MetricOptions): Metric;\n}\n\n\n/**\n * A new or imported domain.\n */\nabstract class DomainBase extends cdk.Resource implements IDomain {\n  public abstract readonly domainArn: string;\n  public abstract readonly domainName: string;\n  public abstract readonly domainId: string;\n  public abstract readonly domainEndpoint: string;\n\n  /**\n   * Grant read permissions for this domain and its contents to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param identity The principal\n   */\n  grantRead(identity: iam.IGrantable): iam.Grant {\n    return this.grant(\n      identity,\n      perms.ES_READ_ACTIONS,\n      this.domainArn,\n      `${this.domainArn}/*`,\n    );\n  }\n\n  /**\n   * Grant write permissions for this domain and its contents to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param identity The principal\n   */\n  grantWrite(identity: iam.IGrantable): iam.Grant {\n    return this.grant(\n      identity,\n      perms.ES_WRITE_ACTIONS,\n      this.domainArn,\n      `${this.domainArn}/*`,\n    );\n  }\n\n  /**\n   * Grant read/write permissions for this domain and its contents to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param identity The principal\n   */\n  grantReadWrite(identity: iam.IGrantable): iam.Grant {\n    return this.grant(\n      identity,\n      perms.ES_READ_WRITE_ACTIONS,\n      this.domainArn,\n      `${this.domainArn}/*`,\n    );\n  }\n\n  /**\n   * Grant read permissions for an index in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param index The index to grant permissions for\n   * @param identity The principal\n   */\n  grantIndexRead(index: string, identity: iam.IGrantable): iam.Grant {\n    return this.grant(\n      identity,\n      perms.ES_READ_ACTIONS,\n      `${this.domainArn}/${index}`,\n      `${this.domainArn}/${index}/*`,\n    );\n  }\n\n  /**\n   * Grant write permissions for an index in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param index The index to grant permissions for\n   * @param identity The principal\n   */\n  grantIndexWrite(index: string, identity: iam.IGrantable): iam.Grant {\n    return this.grant(\n      identity,\n      perms.ES_WRITE_ACTIONS,\n      `${this.domainArn}/${index}`,\n      `${this.domainArn}/${index}/*`,\n    );\n  }\n\n  /**\n   * Grant read/write permissions for an index in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param index The index to grant permissions for\n   * @param identity The principal\n   */\n  grantIndexReadWrite(index: string, identity: iam.IGrantable): iam.Grant {\n    return this.grant(\n      identity,\n      perms.ES_READ_WRITE_ACTIONS,\n      `${this.domainArn}/${index}`,\n      `${this.domainArn}/${index}/*`,\n    );\n  }\n\n  /**\n   * Grant read permissions for a specific path in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param path The path to grant permissions for\n   * @param identity The principal\n   */\n  grantPathRead(path: string, identity: iam.IGrantable): iam.Grant {\n    return this.grant(\n      identity,\n      perms.ES_READ_ACTIONS,\n      `${this.domainArn}/${path}`,\n    );\n  }\n\n  /**\n   * Grant write permissions for a specific path in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param path The path to grant permissions for\n   * @param identity The principal\n   */\n  grantPathWrite(path: string, identity: iam.IGrantable): iam.Grant {\n    return this.grant(\n      identity,\n      perms.ES_WRITE_ACTIONS,\n      `${this.domainArn}/${path}`,\n    );\n  }\n\n  /**\n   * Grant read/write permissions for a specific path in this domain to an IAM\n   * principal (Role/Group/User).\n   *\n   * @param path The path to grant permissions for\n   * @param identity The principal\n   */\n  grantPathReadWrite(path: string, identity: iam.IGrantable): iam.Grant {\n    return this.grant(\n      identity,\n      perms.ES_READ_WRITE_ACTIONS,\n      `${this.domainArn}/${path}`,\n    );\n  }\n\n  /**\n   * Return the given named metric for this domain.\n   */\n  public metric(metricName: string, props?: MetricOptions): Metric {\n    return new Metric({\n      namespace: 'AWS/ES',\n      metricName,\n      dimensionsMap: {\n        DomainName: this.domainName,\n        ClientId: this.stack.account,\n      },\n      ...props,\n    }).attachTo(this);\n  }\n\n  /**\n   * Metric for the time the cluster status is red.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricClusterStatusRed(props?: MetricOptions): Metric {\n    return this.metric('ClusterStatus.red', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for the time the cluster status is yellow.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricClusterStatusYellow(props?: MetricOptions): Metric {\n    return this.metric('ClusterStatus.yellow', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for the storage space of nodes in the cluster.\n   *\n   * @default minimum over 5 minutes\n   */\n  public metricFreeStorageSpace(props?: MetricOptions): Metric {\n    return this.metric('FreeStorageSpace', {\n      statistic: Statistic.MINIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for the cluster blocking index writes.\n   *\n   * @default maximum over 1 minute\n   */\n  public metricClusterIndexWritesBlocked(props?: MetricOptions): Metric {\n    return this.metric('ClusterIndexWritesBlocked', {\n      statistic: Statistic.MAXIMUM,\n      period: cdk.Duration.minutes(1),\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for the number of nodes.\n   *\n   * @default minimum over 1 hour\n   */\n  public metricNodes(props?: MetricOptions): Metric {\n    return this.metric('Nodes', {\n      statistic: Statistic.MINIMUM,\n      period: cdk.Duration.hours(1),\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for automated snapshot failures.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricAutomatedSnapshotFailure(props?: MetricOptions): Metric {\n    return this.metric('AutomatedSnapshotFailure', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for CPU utilization.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricCPUUtilization(props?: MetricOptions): Metric {\n    return this.metric('CPUUtilization', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for JVM memory pressure.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricJVMMemoryPressure(props?: MetricOptions): Metric {\n    return this.metric('JVMMemoryPressure', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for master CPU utilization.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricMasterCPUUtilization(props?: MetricOptions): Metric {\n    return this.metric('MasterCPUUtilization', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for master JVM memory pressure.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricMasterJVMMemoryPressure(props?: MetricOptions): Metric {\n    return this.metric('MasterJVMMemoryPressure', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for KMS key errors.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricKMSKeyError(props?: MetricOptions): Metric {\n    return this.metric('KMSKeyError', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for KMS key being inaccessible.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricKMSKeyInaccessible(props?: MetricOptions): Metric {\n    return this.metric('KMSKeyInaccessible', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for number of searchable documents.\n   *\n   * @default maximum over 5 minutes\n   */\n  public metricSearchableDocuments(props?: MetricOptions): Metric {\n    return this.metric('SearchableDocuments', {\n      statistic: Statistic.MAXIMUM,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for search latency.\n   *\n   * @default p99 over 5 minutes\n   */\n  public metricSearchLatency(props?: MetricOptions): Metric {\n    return this.metric('SearchLatency', { statistic: 'p99', ...props });\n  }\n\n  /**\n   * Metric for indexing latency.\n   *\n   * @default p99 over 5 minutes\n   */\n  public metricIndexingLatency(props?: MetricOptions): Metric {\n    return this.metric('IndexingLatency', { statistic: 'p99', ...props });\n  }\n\n  private grant(\n    grantee: iam.IGrantable,\n    domainActions: string[],\n    resourceArn: string,\n    ...otherResourceArns: string[]\n  ): iam.Grant {\n    const resourceArns = [resourceArn, ...otherResourceArns];\n\n    const grant = iam.Grant.addToPrincipal({\n      grantee,\n      actions: domainActions,\n      resourceArns,\n      scope: this,\n    });\n\n    return grant;\n  }\n\n}\n\n\n/**\n * Reference to an Amazon OpenSearch Service domain.\n */\nexport interface DomainAttributes {\n  /**\n   * The ARN of the Amazon OpenSearch Service domain.\n   */\n  readonly domainArn: string;\n\n  /**\n   * The domain endpoint of the Amazon OpenSearch Service domain.\n   */\n  readonly domainEndpoint: string;\n}\n\n\n/**\n * Provides an Amazon OpenSearch Service domain.\n */\nexport class Domain extends DomainBase implements IDomain, ec2.IConnectable {\n  /**\n   * Creates a domain construct that represents an external domain via domain endpoint.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param domainEndpoint The domain's endpoint.\n   */\n  public static fromDomainEndpoint(\n    scope: Construct,\n    id: string,\n    domainEndpoint: string,\n  ): IDomain {\n    const stack = cdk.Stack.of(scope);\n    const domainName = extractNameFromEndpoint(domainEndpoint);\n    const domainArn = stack.formatArn({\n      service: 'es',\n      resource: 'domain',\n      resourceName: domainName,\n    });\n\n    return Domain.fromDomainAttributes(scope, id, {\n      domainArn,\n      domainEndpoint,\n    });\n  }\n\n  /**\n   * Creates a domain construct that represents an external domain.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param attrs A `DomainAttributes` object.\n   */\n  public static fromDomainAttributes(scope: Construct, id: string, attrs: DomainAttributes): IDomain {\n    const { domainArn, domainEndpoint } = attrs;\n    const domainName = cdk.Stack.of(scope).splitArn(domainArn, cdk.ArnFormat.SLASH_RESOURCE_NAME).resourceName\n      ?? extractNameFromEndpoint(domainEndpoint);\n\n    return new class extends DomainBase {\n      public readonly domainArn = domainArn;\n      public readonly domainName = domainName;\n      public readonly domainId = domainName;\n      public readonly domainEndpoint = domainEndpoint.replace(/^https?:\\/\\//, '');\n\n      constructor() { super(scope, id); }\n    };\n  }\n\n  public readonly domainArn: string;\n  public readonly domainName: string;\n  public readonly domainId: string;\n  public readonly domainEndpoint: string;\n\n  /**\n   * Log group that slow searches are logged to.\n   *\n   * @attribute\n   */\n  public readonly slowSearchLogGroup?: logs.ILogGroup;\n\n  /**\n   * Log group that slow indices are logged to.\n   *\n   * @attribute\n   */\n  public readonly slowIndexLogGroup?: logs.ILogGroup;\n\n  /**\n   * Log group that application logs are logged to.\n   *\n   * @attribute\n   */\n  public readonly appLogGroup?: logs.ILogGroup;\n\n  /**\n   * Log group that audit logs are logged to.\n   *\n   * @attribute\n   */\n  public readonly auditLogGroup?: logs.ILogGroup;\n\n  /**\n   * Master user password if fine grained access control is configured.\n   */\n  public readonly masterUserPassword?: cdk.SecretValue;\n\n\n  private readonly domain: CfnDomain;\n\n  private accessPolicy?: OpenSearchAccessPolicy\n\n  private encryptionAtRestOptions?: EncryptionAtRestOptions\n\n  private readonly _connections: ec2.Connections | undefined;\n\n  constructor(scope: Construct, id: string, props: DomainProps) {\n    super(scope, id, {\n      physicalName: props.domainName,\n    });\n\n    const defaultInstanceType = 'r5.large.search';\n    const warmDefaultInstanceType = 'ultrawarm1.medium.search';\n\n    const dedicatedMasterType = initializeInstanceType(defaultInstanceType, props.capacity?.masterNodeInstanceType);\n    const dedicatedMasterCount = props.capacity?.masterNodes ?? 0;\n    const dedicatedMasterEnabled = cdk.Token.isUnresolved(dedicatedMasterCount) ? true : dedicatedMasterCount > 0;\n\n    const instanceType = initializeInstanceType(defaultInstanceType, props.capacity?.dataNodeInstanceType);\n    const instanceCount = props.capacity?.dataNodes ?? 1;\n\n    const warmType = initializeInstanceType(warmDefaultInstanceType, props.capacity?.warmInstanceType);\n    const warmCount = props.capacity?.warmNodes ?? 0;\n    const warmEnabled = cdk.Token.isUnresolved(warmCount) ? true : warmCount > 0;\n\n    const availabilityZoneCount =\n      props.zoneAwareness?.availabilityZoneCount ?? 2;\n\n    if (![2, 3].includes(availabilityZoneCount)) {\n      throw new Error('Invalid zone awareness configuration; availabilityZoneCount must be 2 or 3');\n    }\n\n    const zoneAwarenessEnabled =\n      props.zoneAwareness?.enabled ??\n      props.zoneAwareness?.availabilityZoneCount != null;\n\n\n    let securityGroups: ec2.ISecurityGroup[] | undefined;\n    let subnets: ec2.ISubnet[] | undefined;\n\n    if (props.vpc) {\n      subnets = selectSubnets(props.vpc, props.vpcSubnets ?? [{ subnetType: ec2.SubnetType.PRIVATE }]);\n      securityGroups = props.securityGroups ?? [new ec2.SecurityGroup(this, 'SecurityGroup', {\n        vpc: props.vpc,\n        description: `Security group for domain ${this.node.id}`,\n      })];\n      this._connections = new ec2.Connections({ securityGroups });\n    }\n\n    // If VPC options are supplied ensure that the number of subnets matches the number AZ\n    if (subnets && zoneAwarenessEnabled && new Set(subnets.map((subnet) => subnet.availabilityZone)).size < availabilityZoneCount) {\n      throw new Error('When providing vpc options you need to provide a subnet for each AZ you are using');\n    }\n\n    if ([dedicatedMasterType, instanceType, warmType].some(t => (!cdk.Token.isUnresolved(t) && !t.endsWith('.search')))) {\n      throw new Error('Master, data and UltraWarm node instance types must end with \".search\".');\n    }\n\n    if (!cdk.Token.isUnresolved(warmType) && !warmType.startsWith('ultrawarm')) {\n      throw new Error('UltraWarm node instance type must start with \"ultrawarm\".');\n    }\n\n    const unsignedBasicAuthEnabled = props.useUnsignedBasicAuth ?? false;\n\n    if (unsignedBasicAuthEnabled) {\n      if (props.enforceHttps == false) {\n        throw new Error('You cannot disable HTTPS and use unsigned basic auth');\n      }\n      if (props.nodeToNodeEncryption == false) {\n        throw new Error('You cannot disable node to node encryption and use unsigned basic auth');\n      }\n      if (props.encryptionAtRest?.enabled == false) {\n        throw new Error('You cannot disable encryption at rest and use unsigned basic auth');\n      }\n    }\n\n    const unsignedAccessPolicy = new iam.PolicyStatement({\n      effect: iam.Effect.ALLOW,\n      actions: ['es:ESHttp*'],\n      principals: [new iam.AnyPrincipal()],\n      resources: [cdk.Lazy.string({ produce: () => `${this.domainArn}/*` })],\n    });\n\n    const masterUserArn = props.fineGrainedAccessControl?.masterUserArn;\n    const masterUserNameProps = props.fineGrainedAccessControl?.masterUserName;\n    // If basic auth is enabled set the user name to admin if no other user info is supplied.\n    const masterUserName = unsignedBasicAuthEnabled\n      ? (masterUserArn == null ? (masterUserNameProps ?? 'admin') : undefined)\n      : masterUserNameProps;\n\n    if (masterUserArn != null && masterUserName != null) {\n      throw new Error('Invalid fine grained access control settings. Only provide one of master user ARN or master user name. Not both.');\n    }\n\n    const advancedSecurityEnabled = (masterUserArn ?? masterUserName) != null;\n    const internalUserDatabaseEnabled = masterUserName != null;\n    const masterUserPasswordProp = props.fineGrainedAccessControl?.masterUserPassword;\n    const createMasterUserPassword = (): cdk.SecretValue => {\n      return new secretsmanager.Secret(this, 'MasterUser', {\n        generateSecretString: {\n          secretStringTemplate: JSON.stringify({\n            username: masterUserName,\n          }),\n          generateStringKey: 'password',\n          excludeCharacters: \"{}'\\\\*[]()`\",\n        },\n      })\n        .secretValueFromJson('password');\n    };\n    this.masterUserPassword = internalUserDatabaseEnabled ?\n      (masterUserPasswordProp ?? createMasterUserPassword())\n      : undefined;\n\n    const encryptionAtRestEnabled =\n      props.encryptionAtRest?.enabled ?? (props.encryptionAtRest?.kmsKey != null || unsignedBasicAuthEnabled);\n    const nodeToNodeEncryptionEnabled = props.nodeToNodeEncryption ?? unsignedBasicAuthEnabled;\n    const volumeSize = props.ebs?.volumeSize ?? 10;\n    const volumeType = props.ebs?.volumeType ?? ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD;\n    const ebsEnabled = props.ebs?.enabled ?? true;\n    const enforceHttps = props.enforceHttps ?? unsignedBasicAuthEnabled;\n\n    function isInstanceType(t: string): Boolean {\n      return dedicatedMasterType.startsWith(t) || instanceType.startsWith(t);\n    };\n\n    function isSomeInstanceType(...instanceTypes: string[]): Boolean {\n      return instanceTypes.some(isInstanceType);\n    };\n\n    function isEveryDatanodeInstanceType(...instanceTypes: string[]): Boolean {\n      return instanceTypes.some(t => instanceType.startsWith(t));\n    };\n\n    // Validate feature support for the given Elasticsearch/OpenSearch version, per\n    // https://docs.aws.amazon.com/opensearch-service/latest/developerguide/features-by-version.html\n    const { versionNum: versionNum, isElasticsearchVersion } = parseVersion(props.version);\n    if (isElasticsearchVersion) {\n\n      if (\n        versionNum <= 7.7 &&\n        ![\n          1.5, 2.3, 5.1, 5.3, 5.5, 5.6, 6.0,\n          6.2, 6.3, 6.4, 6.5, 6.7, 6.8, 7.1, 7.4,\n          7.7,\n        ].includes(versionNum)\n      ) {\n        throw new Error(`Unknown Elasticsearch version: ${versionNum}`);\n      }\n\n      if (versionNum < 5.1) {\n        if (props.logging?.appLogEnabled) {\n          throw new Error('Error logs publishing requires Elasticsearch version 5.1 or later or OpenSearch version 1.0 or later.');\n        }\n        if (props.encryptionAtRest?.enabled) {\n          throw new Error('Encryption of data at rest requires Elasticsearch version 5.1 or later or OpenSearch version 1.0 or later.');\n        }\n        if (props.cognitoDashboardsAuth != null) {\n          throw new Error('Cognito authentication for OpenSearch Dashboards requires Elasticsearch version 5.1 or later or OpenSearch version 1.0 or later.');\n        }\n        if (isSomeInstanceType('c5', 'i3', 'm5', 'r5')) {\n          throw new Error('C5, I3, M5, and R5 instance types require Elasticsearch version 5.1 or later or OpenSearch version 1.0 or later.');\n        }\n      }\n\n      if (versionNum < 6.0) {\n        if (props.nodeToNodeEncryption) {\n          throw new Error('Node-to-node encryption requires Elasticsearch version 6.0 or later or OpenSearch version 1.0 or later.');\n        }\n      }\n\n      if (versionNum < 6.7) {\n        if (unsignedBasicAuthEnabled) {\n          throw new Error('Using unsigned basic auth requires Elasticsearch version 6.7 or later or OpenSearch version 1.0 or later.');\n        }\n        if (advancedSecurityEnabled) {\n          throw new Error('Fine-grained access control requires Elasticsearch version 6.7 or later or OpenSearch version 1.0 or later.');\n        }\n      }\n\n      if (versionNum < 6.8 && warmEnabled) {\n        throw new Error('UltraWarm requires Elasticsearch version 6.8 or later or OpenSearch version 1.0 or later.');\n      }\n    }\n\n    // Validate against instance type restrictions, per\n    // https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html\n    if (isSomeInstanceType('i3', 'r6gd') && ebsEnabled) {\n      throw new Error('I3 and R6GD instance types do not support EBS storage volumes.');\n    }\n\n    if (isSomeInstanceType('m3', 'r3', 't2') && encryptionAtRestEnabled) {\n      throw new Error('M3, R3, and T2 instance types do not support encryption of data at rest.');\n    }\n\n    if (isInstanceType('t2.micro') && !(isElasticsearchVersion && versionNum <= 2.3)) {\n      throw new Error('The t2.micro.search instance type supports only Elasticsearch versions 1.5 and 2.3.');\n    }\n\n    if (isSomeInstanceType('t2', 't3') && warmEnabled) {\n      throw new Error('T2 and T3 instance types do not support UltraWarm storage.');\n    }\n\n    // Only R3, I3 and r6gd support instance storage, per\n    // https://aws.amazon.com/opensearch-service/pricing/\n    if (!ebsEnabled && !isEveryDatanodeInstanceType('r3', 'i3', 'r6gd')) {\n      throw new Error('EBS volumes are required when using instance types other than r3, i3 or r6gd.');\n    }\n\n    // Fine-grained access control requires node-to-node encryption, encryption at rest,\n    // and enforced HTTPS.\n    if (advancedSecurityEnabled) {\n      if (!nodeToNodeEncryptionEnabled) {\n        throw new Error('Node-to-node encryption is required when fine-grained access control is enabled.');\n      }\n      if (!encryptionAtRestEnabled) {\n        throw new Error('Encryption-at-rest is required when fine-grained access control is enabled.');\n      }\n      if (!enforceHttps) {\n        throw new Error('Enforce HTTPS is required when fine-grained access control is enabled.');\n      }\n    }\n\n    // Validate fine grained access control enabled for audit logs, per\n    // https://aws.amazon.com/about-aws/whats-new/2020/09/elasticsearch-audit-logs-now-available-on-amazon-elasticsearch-service/\n    if (props.logging?.auditLogEnabled && !advancedSecurityEnabled) {\n      throw new Error('Fine-grained access control is required when audit logs publishing is enabled.');\n    }\n\n    // Validate UltraWarm requirement for dedicated master nodes, per\n    // https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ultrawarm.html\n    if (warmEnabled && !dedicatedMasterEnabled) {\n      throw new Error('Dedicated master node is required when UltraWarm storage is enabled.');\n    }\n\n    let cfnVpcOptions: CfnDomain.VPCOptionsProperty | undefined;\n\n    if (securityGroups && subnets) {\n      cfnVpcOptions = {\n        securityGroupIds: securityGroups.map((sg) => sg.securityGroupId),\n        subnetIds: subnets.map((subnet) => subnet.subnetId),\n      };\n    }\n\n    // Setup logging\n    const logGroups: logs.ILogGroup[] = [];\n\n    if (props.logging?.slowSearchLogEnabled) {\n      this.slowSearchLogGroup = props.logging.slowSearchLogGroup ??\n        new logs.LogGroup(this, 'SlowSearchLogs', {\n          retention: logs.RetentionDays.ONE_MONTH,\n        });\n\n      logGroups.push(this.slowSearchLogGroup);\n    };\n\n    if (props.logging?.slowIndexLogEnabled) {\n      this.slowIndexLogGroup = props.logging.slowIndexLogGroup ??\n        new logs.LogGroup(this, 'SlowIndexLogs', {\n          retention: logs.RetentionDays.ONE_MONTH,\n        });\n\n      logGroups.push(this.slowIndexLogGroup);\n    };\n\n    if (props.logging?.appLogEnabled) {\n      this.appLogGroup = props.logging.appLogGroup ??\n        new logs.LogGroup(this, 'AppLogs', {\n          retention: logs.RetentionDays.ONE_MONTH,\n        });\n\n      logGroups.push(this.appLogGroup);\n    };\n\n    if (props.logging?.auditLogEnabled) {\n      this.auditLogGroup = props.logging.auditLogGroup ??\n        new logs.LogGroup(this, 'AuditLogs', {\n          retention: logs.RetentionDays.ONE_MONTH,\n        });\n\n      logGroups.push(this.auditLogGroup);\n    };\n\n    let logGroupResourcePolicy: LogGroupResourcePolicy | null = null;\n    if (logGroups.length > 0) {\n      const logPolicyStatement = new iam.PolicyStatement({\n        effect: iam.Effect.ALLOW,\n        actions: ['logs:PutLogEvents', 'logs:CreateLogStream'],\n        resources: logGroups.map((lg) => lg.logGroupArn),\n        principals: [new iam.ServicePrincipal('es.amazonaws.com')],\n      });\n\n      // Use a custom resource to set the log group resource policy since it is not supported by CDK and cfn.\n      // https://github.com/aws/aws-cdk/issues/5343\n      logGroupResourcePolicy = new LogGroupResourcePolicy(this, `ESLogGroupPolicy${this.node.addr}`, {\n        // create a cloudwatch logs resource policy name that is unique to this domain instance\n        policyName: `ESLogPolicy${this.node.addr}`,\n        policyStatements: [logPolicyStatement],\n      });\n    }\n\n    const logPublishing: Record<string, any> = {};\n\n    if (this.appLogGroup) {\n      logPublishing.ES_APPLICATION_LOGS = {\n        enabled: true,\n        cloudWatchLogsLogGroupArn: this.appLogGroup.logGroupArn,\n      };\n    }\n\n    if (this.slowSearchLogGroup) {\n      logPublishing.SEARCH_SLOW_LOGS = {\n        enabled: true,\n        cloudWatchLogsLogGroupArn: this.slowSearchLogGroup.logGroupArn,\n      };\n    }\n\n    if (this.slowIndexLogGroup) {\n      logPublishing.INDEX_SLOW_LOGS = {\n        enabled: true,\n        cloudWatchLogsLogGroupArn: this.slowIndexLogGroup.logGroupArn,\n      };\n    }\n\n    if (this.auditLogGroup) {\n      logPublishing.AUDIT_LOGS = {\n        enabled: this.auditLogGroup != null,\n        cloudWatchLogsLogGroupArn: this.auditLogGroup?.logGroupArn,\n      };\n    }\n\n    let customEndpointCertificate: acm.ICertificate | undefined;\n    if (props.customEndpoint) {\n      if (props.customEndpoint.certificate) {\n        customEndpointCertificate = props.customEndpoint.certificate;\n      } else {\n        customEndpointCertificate = new acm.Certificate(this, 'CustomEndpointCertificate', {\n          domainName: props.customEndpoint.domainName,\n          validation: props.customEndpoint.hostedZone ? acm.CertificateValidation.fromDns(props.customEndpoint.hostedZone) : undefined,\n        });\n      }\n    }\n\n    // Create the domain\n    this.domain = new CfnDomain(this, 'Resource', {\n      domainName: this.physicalName,\n      engineVersion: props.version.version,\n      clusterConfig: {\n        dedicatedMasterEnabled,\n        dedicatedMasterCount: dedicatedMasterEnabled\n          ? dedicatedMasterCount\n          : undefined,\n        dedicatedMasterType: dedicatedMasterEnabled\n          ? dedicatedMasterType\n          : undefined,\n        instanceCount,\n        instanceType,\n        warmEnabled: warmEnabled\n          ? warmEnabled\n          : undefined,\n        warmCount: warmEnabled\n          ? warmCount\n          : undefined,\n        warmType: warmEnabled\n          ? warmType\n          : undefined,\n        zoneAwarenessEnabled,\n        zoneAwarenessConfig: zoneAwarenessEnabled\n          ? { availabilityZoneCount }\n          : undefined,\n      },\n      ebsOptions: {\n        ebsEnabled,\n        volumeSize: ebsEnabled ? volumeSize : undefined,\n        volumeType: ebsEnabled ? volumeType : undefined,\n        iops: ebsEnabled ? props.ebs?.iops : undefined,\n      },\n      encryptionAtRestOptions: {\n        enabled: encryptionAtRestEnabled,\n        kmsKeyId: encryptionAtRestEnabled\n          ? props.encryptionAtRest?.kmsKey?.keyId\n          : undefined,\n      },\n      nodeToNodeEncryptionOptions: { enabled: nodeToNodeEncryptionEnabled },\n      logPublishingOptions: logPublishing,\n      cognitoOptions: {\n        enabled: props.cognitoDashboardsAuth != null,\n        identityPoolId: props.cognitoDashboardsAuth?.identityPoolId,\n        roleArn: props.cognitoDashboardsAuth?.role.roleArn,\n        userPoolId: props.cognitoDashboardsAuth?.userPoolId,\n      },\n      vpcOptions: cfnVpcOptions,\n      snapshotOptions: props.automatedSnapshotStartHour\n        ? { automatedSnapshotStartHour: props.automatedSnapshotStartHour }\n        : undefined,\n      domainEndpointOptions: {\n        enforceHttps,\n        tlsSecurityPolicy: props.tlsSecurityPolicy ?? TLSSecurityPolicy.TLS_1_0,\n        ...props.customEndpoint && {\n          customEndpointEnabled: true,\n          customEndpoint: props.customEndpoint.domainName,\n          customEndpointCertificateArn: customEndpointCertificate!.certificateArn,\n        },\n      },\n      advancedSecurityOptions: advancedSecurityEnabled\n        ? {\n          enabled: true,\n          internalUserDatabaseEnabled,\n          masterUserOptions: {\n            masterUserArn: masterUserArn,\n            masterUserName: masterUserName,\n            masterUserPassword: this.masterUserPassword?.toString(),\n          },\n        }\n        : undefined,\n      advancedOptions: props.advancedOptions,\n    });\n    this.domain.applyRemovalPolicy(props.removalPolicy);\n\n    if (props.enableVersionUpgrade) {\n      this.domain.cfnOptions.updatePolicy = {\n        ...this.domain.cfnOptions.updatePolicy,\n        enableVersionUpgrade: props.enableVersionUpgrade,\n      };\n    }\n\n    if (logGroupResourcePolicy) { this.domain.node.addDependency(logGroupResourcePolicy); }\n\n    if (props.domainName) {\n      if (!cdk.Token.isUnresolved(props.domainName)) {\n        // https://docs.aws.amazon.com/opensearch-service/latest/developerguide/configuration-api.html#configuration-api-datatypes-domainname\n        if (!props.domainName.match(/^[a-z0-9\\-]+$/)) {\n          throw new Error(`Invalid domainName '${props.domainName}'. Valid characters are a-z (lowercase only), 0-9, and \u2013 (hyphen).`);\n        }\n        if (props.domainName.length < 3 || props.domainName.length > 28) {\n          throw new Error(`Invalid domainName '${props.domainName}'. It must be between 3 and 28 characters`);\n        }\n        if (props.domainName[0] < 'a' || props.domainName[0] > 'z') {\n          throw new Error(`Invalid domainName '${props.domainName}'. It must start with a lowercase letter`);\n        }\n      }\n      this.node.addMetadata('aws:cdk:hasPhysicalName', props.domainName);\n    }\n\n    this.domainName = this.getResourceNameAttribute(this.domain.ref);\n\n    this.domainId = this.domain.getAtt('Id').toString();\n\n    this.domainEndpoint = this.domain.getAtt('DomainEndpoint').toString();\n\n    this.domainArn = this.getResourceArnAttribute(this.domain.attrArn, {\n      service: 'es',\n      resource: 'domain',\n      resourceName: this.physicalName,\n    });\n\n    if (props.customEndpoint?.hostedZone) {\n      new route53.CnameRecord(this, 'CnameRecord', {\n        recordName: props.customEndpoint.domainName,\n        zone: props.customEndpoint.hostedZone,\n        domainName: this.domainEndpoint,\n      });\n    }\n\n    this.encryptionAtRestOptions = props.encryptionAtRest;\n    if (props.accessPolicies) {\n      this.addAccessPolicies(...props.accessPolicies);\n    }\n    if (unsignedBasicAuthEnabled) {\n      this.addAccessPolicies(unsignedAccessPolicy);\n    }\n  }\n\n  /**\n   * Manages network connections to the domain. This will throw an error in case the domain\n   * is not placed inside a VPC.\n   */\n  public get connections(): ec2.Connections {\n    if (!this._connections) {\n      throw new Error(\"Connections are only available on VPC enabled domains. Use the 'vpc' property to place a domain inside a VPC\");\n    }\n    return this._connections;\n  }\n\n\n  /**\n   * Add policy statements to the domain access policy\n   */\n  public addAccessPolicies(...accessPolicyStatements: iam.PolicyStatement[]) {\n    if (accessPolicyStatements.length > 0) {\n      if (!this.accessPolicy) {\n        // Only create the custom resource after there are statements to set.\n        this.accessPolicy = new OpenSearchAccessPolicy(this, 'AccessPolicy', {\n          domainName: this.domainName,\n          domainArn: this.domainArn,\n          accessPolicies: accessPolicyStatements,\n        });\n\n        if (this.encryptionAtRestOptions?.kmsKey) {\n          // https://docs.aws.amazon.com/opensearch-service/latest/developerguide/encryption-at-rest.html\n\n          // these permissions are documented as required during domain creation.\n          // while not strictly documented for updates as well, it stands to reason that an update\n          // operation might require these in case the cluster uses a kms key.\n          // empircal evidence shows this is indeed required: https://github.com/aws/aws-cdk/issues/11412\n          this.accessPolicy.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n            actions: ['kms:List*', 'kms:Describe*', 'kms:CreateGrant'],\n            resources: [this.encryptionAtRestOptions.kmsKey.keyArn],\n            effect: iam.Effect.ALLOW,\n          }));\n        }\n      } else {\n        this.accessPolicy.addAccessPolicies(...accessPolicyStatements);\n      }\n    }\n  }\n}\n\n/**\n * Given an Amazon OpenSearch Service domain endpoint, returns a CloudFormation expression that\n * extracts the domain name.\n *\n * Domain endpoints look like this:\n *\n *   https://example-domain-jcjotrt6f7otem4sqcwbch3c4u.us-east-1.es.amazonaws.com\n *   https://<domain-name>-<suffix>.<region>.es.amazonaws.com\n *\n * ..which means that in order to extract the domain name from the endpoint, we can\n * split the endpoint using \"-<suffix>\" and select the component in index 0.\n *\n * @param domainEndpoint The Amazon OpenSearch Service domain endpoint\n */\nfunction extractNameFromEndpoint(domainEndpoint: string) {\n  const { hostname } = new URL(domainEndpoint);\n  const domain = hostname.split('.')[0];\n  const suffix = '-' + domain.split('-').slice(-1)[0];\n  return domain.split(suffix)[0];\n}\n\n/**\n * Converts an engine version into a into a decimal number with major and minor version i.e x.y.\n *\n * @param version The engine version object\n */\nfunction parseVersion(version: EngineVersion): { versionNum: number, isElasticsearchVersion: boolean } {\n  const elasticsearchPrefix = 'Elasticsearch_';\n  const openSearchPrefix = 'OpenSearch_';\n  const isElasticsearchVersion = version.version.startsWith(elasticsearchPrefix);\n  const versionStr = isElasticsearchVersion\n    ? version.version.substring(elasticsearchPrefix.length)\n    : version.version.substring(openSearchPrefix.length);\n  const firstDot = versionStr.indexOf('.');\n\n  if (firstDot < 1) {\n    throw new Error(`Invalid engine version: ${versionStr}. Version string needs to start with major and minor version (x.y).`);\n  }\n\n  const secondDot = versionStr.indexOf('.', firstDot + 1);\n\n  try {\n    if (secondDot == -1) {\n      return { versionNum: parseFloat(versionStr), isElasticsearchVersion };\n    } else {\n      return { versionNum: parseFloat(versionStr.substring(0, secondDot)), isElasticsearchVersion };\n    }\n  } catch (error) {\n    throw new Error(`Invalid engine version: ${versionStr}. Version string needs to start with major and minor version (x.y).`);\n  }\n}\n\nfunction selectSubnets(vpc: ec2.IVpc, vpcSubnets: ec2.SubnetSelection[]): ec2.ISubnet[] {\n  const selected = [];\n  for (const selection of vpcSubnets) {\n    selected.push(...vpc.selectSubnets(selection).subnets);\n  }\n  return selected;\n}\n\n/**\n * Initializes an instance type.\n *\n * @param defaultInstanceType Default instance type which is used if no instance type is provided\n * @param instanceType Instance type\n * @returns Instance type in lowercase (if provided) or default instance type\n */\nfunction initializeInstanceType(defaultInstanceType: string, instanceType?: string): string {\n  if (instanceType) {\n    return cdk.Token.isUnresolved(instanceType) ? instanceType : instanceType.toLowerCase();\n  } else {\n    return defaultInstanceType;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
