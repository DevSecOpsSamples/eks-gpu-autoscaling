{
  "version": 3,
  "sources": ["cognito-action.ts"],
  "sourcesContent": ["import * as cognito from '../../aws-cognito';\nimport * as elbv2 from '../../aws-elasticloadbalancingv2';\nimport { Duration } from '../../core';\n\n/**\n * Properties for AuthenticateCognitoAction\n */\nexport interface AuthenticateCognitoActionProps {\n  /**\n   * What action to execute next\n   *\n   * Multiple actions form a linked chain; the chain must always terminate in a\n   * (weighted)forward, fixedResponse or redirect action.\n   */\n  readonly next: elbv2.ListenerAction;\n\n  /**\n   * The Amazon Cognito user pool.\n   */\n  readonly userPool: cognito.IUserPool;\n\n  /**\n   * The Amazon Cognito user pool client.\n   */\n  readonly userPoolClient: cognito.IUserPoolClient;\n\n  /**\n   * The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.\n   */\n  readonly userPoolDomain: cognito.IUserPoolDomain;\n\n  /**\n   * The query parameters (up to 10) to include in the redirect request to the authorization endpoint.\n   *\n   * @default - No extra parameters\n   */\n  readonly authenticationRequestExtraParams?: Record<string, string>;\n\n  /**\n   * The behavior if the user is not authenticated.\n   *\n   * @default UnauthenticatedAction.AUTHENTICATE\n   */\n  readonly onUnauthenticatedRequest?: elbv2.UnauthenticatedAction;\n\n  /**\n   * The set of user claims to be requested from the IdP.\n   *\n   * To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.\n   *\n   * @default \"openid\"\n   */\n  readonly scope?: string;\n\n  /**\n   * The name of the cookie used to maintain session information.\n   *\n   * @default \"AWSELBAuthSessionCookie\"\n   */\n  readonly sessionCookieName?: string;\n\n  /**\n   * The maximum duration of the authentication session.\n   *\n   * @default Duration.days(7)\n   */\n  readonly sessionTimeout?: Duration;\n}\n\n/**\n * A Listener Action to authenticate with Cognito\n */\nexport class AuthenticateCognitoAction extends elbv2.ListenerAction {\n  /**\n   * Authenticate using an identity provide (IdP) that is compliant with OpenID Connect (OIDC)\n   */\n  constructor(options: AuthenticateCognitoActionProps) {\n    super({\n      type: 'authenticate-cognito',\n      authenticateCognitoConfig: {\n        userPoolArn: options.userPool.userPoolArn,\n        userPoolClientId: options.userPoolClient.userPoolClientId,\n        userPoolDomain: options.userPoolDomain.domainName,\n        authenticationRequestExtraParams: options.authenticationRequestExtraParams,\n        onUnauthenticatedRequest: options.onUnauthenticatedRequest,\n        scope: options.scope,\n        sessionCookieName: options.sessionCookieName,\n        sessionTimeout: options.sessionTimeout?.toSeconds().toString(),\n      },\n    }, options.next);\n  }\n}\n"],
  "mappings": "gOACA,MAAA,QAAA,kCAAA,EAuEA,MAAa,iCAAkC,OAAM,cAAc,CAIjE,YAAY,QAAuC,QACjD,MAAM,CACJ,KAAM,uBACN,0BAA2B,CACzB,YAAa,QAAQ,SAAS,YAC9B,iBAAkB,QAAQ,eAAe,iBACzC,eAAgB,QAAQ,eAAe,WACvC,iCAAkC,QAAQ,iCAC1C,yBAA0B,QAAQ,yBAClC,MAAO,QAAQ,MACf,kBAAmB,QAAQ,kBAC3B,eAAc,IAAE,QAAQ,kBAAc,MAAA,KAAA,OAAA,OAAA,GAAE,UAAS,EAAG,SAAQ,IAE7D,QAAQ,IAAI,kHAjBnB,QAAA,0BAAA",
  "names": []
}
