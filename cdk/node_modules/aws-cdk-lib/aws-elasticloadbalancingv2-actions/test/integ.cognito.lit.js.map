{
  "version": 3,
  "sources": ["integ.cognito.lit.ts"],
  "sourcesContent": ["import * as cognito from '../../aws-cognito';\nimport * as ec2 from '../../aws-ec2';\nimport * as elbv2 from '../../aws-elasticloadbalancingv2';\nimport { App, CfnOutput, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport * as actions from '../lib';\n\nclass CognitoStack extends Stack {\n\n  /// !hide\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'Stack', {\n      maxAzs: 2,\n    });\n\n    const certificate: elbv2.IListenerCertificate = {\n      certificateArn: process.env.SELF_SIGNED_CERT_ARN ?? '',\n    };\n\n    /// !show\n    const lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n      vpc,\n      internetFacing: true,\n    });\n\n    const userPool = new cognito.UserPool(this, 'UserPool');\n    const userPoolClient = new cognito.UserPoolClient(this, 'Client', {\n      userPool,\n\n      // Required minimal configuration for use with an ELB\n      generateSecret: true,\n      authFlows: {\n        userPassword: true,\n      },\n      oAuth: {\n        flows: {\n          authorizationCodeGrant: true,\n        },\n        scopes: [cognito.OAuthScope.EMAIL],\n        callbackUrls: [\n          `https://${lb.loadBalancerDnsName}/oauth2/idpresponse`,\n        ],\n      },\n    });\n    const cfnClient = userPoolClient.node.defaultChild as cognito.CfnUserPoolClient;\n    cfnClient.addPropertyOverride('RefreshTokenValidity', 1);\n    cfnClient.addPropertyOverride('SupportedIdentityProviders', ['COGNITO']);\n\n    const userPoolDomain = new cognito.UserPoolDomain(this, 'Domain', {\n      userPool,\n      cognitoDomain: {\n        domainPrefix: 'test-cdk-prefix',\n      },\n    });\n\n    lb.addListener('Listener', {\n      port: 443,\n      certificates: [certificate],\n      defaultAction: new actions.AuthenticateCognitoAction({\n        userPool,\n        userPoolClient,\n        userPoolDomain,\n        next: elbv2.ListenerAction.fixedResponse(200, {\n          contentType: 'text/plain',\n          messageBody: 'Authenticated',\n        }),\n      }),\n    });\n\n    new CfnOutput(this, 'DNS', {\n      value: lb.loadBalancerDnsName,\n    });\n  }\n}\n\nconst app = new App();\nnew CognitoStack(app, 'integ-cognito');\napp.synth();"],
  "mappings": "oEAAA,KAAA,SAAA,QAAA,mBAAA,EACA,IAAA,QAAA,eAAA,EACA,MAAA,QAAA,kCAAA,EACA,OAAA,QAAA,YAAA,EAEA,QAAA,QAAA,QAAA,EAEA,MAAM,oBAAqB,QAAA,KAAK,CAG9B,YAAY,MAAkB,GAAU,QACtC,MAAM,MAAO,EAAE,EAEf,KAAM,KAAM,GAAI,KAAI,IAAI,KAAM,QAAS,CACrC,OAAQ,EACT,EAEK,YAA0C,CAC9C,eAAc,IAAE,QAAQ,IAAI,wBAAoB,MAAA,KAAA,OAAA,GAAI,IAIhD,GAAK,GAAI,OAAM,wBAAwB,KAAM,KAAM,CACvD,IACA,eAAgB,GACjB,EAEK,SAAW,GAAI,SAAQ,SAAS,KAAM,UAAU,EAChD,eAAiB,GAAI,SAAQ,eAAe,KAAM,SAAU,CAChE,SAGA,eAAgB,GAChB,UAAW,CACT,aAAc,IAEhB,MAAO,CACL,MAAO,CACL,uBAAwB,IAE1B,OAAQ,CAAC,QAAQ,WAAW,KAAK,EACjC,aAAc,CACZ,WAAW,GAAG,2CAGnB,EACK,UAAY,eAAe,KAAK,aACtC,UAAU,oBAAoB,uBAAwB,CAAC,EACvD,UAAU,oBAAoB,6BAA8B,CAAC,SAAS,CAAC,EAEvE,KAAM,gBAAiB,GAAI,SAAQ,eAAe,KAAM,SAAU,CAChE,SACA,cAAe,CACb,aAAc,mBAEjB,EAED,GAAG,YAAY,WAAY,CACzB,KAAM,IACN,aAAc,CAAC,WAAW,EAC1B,cAAe,GAAI,SAAQ,0BAA0B,CACnD,SACA,eACA,eACA,KAAM,MAAM,eAAe,cAAc,IAAK,CAC5C,YAAa,aACb,YAAa,gBACd,EACF,EACF,EAED,GAAI,QAAA,UAAU,KAAM,MAAO,CACzB,MAAO,GAAG,oBACX,GAIL,KAAM,KAAM,GAAI,QAAA,IAChB,GAAI,cAAa,IAAK,eAAe,EACrC,IAAI,MAAK",
  "names": []
}
