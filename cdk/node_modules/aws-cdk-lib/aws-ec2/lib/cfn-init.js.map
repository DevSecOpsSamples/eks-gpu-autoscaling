{
  "version": 3,
  "sources": ["cfn-init.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\nimport * as iam from '../../aws-iam';\nimport { Aws, CfnResource } from '../../core';\nimport { InitElement } from './cfn-init-elements';\nimport { OperatingSystemType } from './machine-image';\nimport { InitBindOptions, InitElementConfig, InitElementType, InitPlatform } from './private/cfn-init-internal';\nimport { UserData } from './user-data';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * A CloudFormation-init configuration\n */\nexport class CloudFormationInit {\n  /**\n   * Build a new config from a set of Init Elements\n   */\n  public static fromElements(...elements: InitElement[]): CloudFormationInit {\n    return CloudFormationInit.fromConfig(new InitConfig(elements));\n  }\n\n  /**\n   * Use an existing InitConfig object as the default and only config\n   */\n  public static fromConfig(config: InitConfig): CloudFormationInit {\n    return CloudFormationInit.fromConfigSets({\n      configSets: {\n        default: ['config'],\n      },\n      configs: { config },\n    });\n  }\n\n  /**\n   * Build a CloudFormationInit from config sets\n   */\n  public static fromConfigSets(props: ConfigSetProps): CloudFormationInit {\n    return new CloudFormationInit(props.configSets, props.configs);\n  }\n\n  private readonly _configSets: Record<string, string[]> = {};\n  private readonly _configs: Record<string, InitConfig> = {};\n\n  private constructor(configSets: Record<string, string[]>, configs: Record<string, InitConfig>) {\n    Object.assign(this._configSets, configSets);\n    Object.assign(this._configs, configs);\n  }\n\n  /**\n   * Add a config with the given name to this CloudFormationInit object\n   */\n  public addConfig(configName: string, config: InitConfig) {\n    if (this._configs[configName]) {\n      throw new Error(`CloudFormationInit already contains a config named '${configName}'`);\n    }\n    this._configs[configName] = config;\n  }\n\n  /**\n   * Add a config set with the given name to this CloudFormationInit object\n   *\n   * The new configset will reference the given configs in the given order.\n   */\n  public addConfigSet(configSetName: string, configNames: string[] = []) {\n    if (this._configSets[configSetName]) {\n      throw new Error(`CloudFormationInit already contains a configSet named '${configSetName}'`);\n    }\n\n    const unk = configNames.filter(c => !this._configs[c]);\n    if (unk.length > 0) {\n      throw new Error(`Unknown configs referenced in definition of '${configSetName}': ${unk}`);\n    }\n\n    this._configSets[configSetName] = [...configNames];\n  }\n\n  /**\n   * Attach the CloudFormation Init config to the given resource\n   *\n   * As an app builder, use `instance.applyCloudFormationInit()` or\n   * `autoScalingGroup.applyCloudFormationInit()` to trigger this method.\n   *\n   * This method does the following:\n   *\n   * - Renders the `AWS::CloudFormation::Init` object to the given resource's\n   *   metadata, potentially adding a `AWS::CloudFormation::Authentication` object\n   *   next to it if required.\n   * - Updates the instance role policy to be able to call the APIs required for\n   *   `cfn-init` and `cfn-signal` to work, and potentially add permissions to download\n   *   referenced asset and bucket resources.\n   * - Updates the given UserData with commands to execute the `cfn-init` script.\n   */\n  public attach(attachedResource: CfnResource, attachOptions: AttachInitOptions) {\n    if (attachOptions.platform === OperatingSystemType.UNKNOWN) {\n      throw new Error('Cannot attach CloudFormationInit to an unknown OS type');\n    }\n\n    const CFN_INIT_METADATA_KEY = 'AWS::CloudFormation::Init';\n\n    if (attachedResource.getMetadata(CFN_INIT_METADATA_KEY) !== undefined) {\n      throw new Error(`Cannot bind CfnInit: resource '${attachedResource.node.path}' already has '${CFN_INIT_METADATA_KEY}' attached`);\n    }\n\n    // Note: This will not reflect mutations made after attaching.\n    const bindResult = this.bind(attachedResource.stack, attachOptions);\n    attachedResource.addMetadata(CFN_INIT_METADATA_KEY, bindResult.configData);\n\n    // Need to resolve the various tokens from assets in the config,\n    // as well as include any asset hashes provided so the fingerprint is accurate.\n    const resolvedConfig = attachedResource.stack.resolve(bindResult.configData);\n    const fingerprintInput = { config: resolvedConfig, assetHash: bindResult.assetHash };\n    const fingerprint = contentHash(JSON.stringify(fingerprintInput)).slice(0, 16);\n\n    attachOptions.instanceRole.addToPrincipalPolicy(new iam.PolicyStatement({\n      actions: ['cloudformation:DescribeStackResource', 'cloudformation:SignalResource'],\n      resources: [Aws.STACK_ID],\n    }));\n\n    if (bindResult.authData) {\n      attachedResource.addMetadata('AWS::CloudFormation::Authentication', bindResult.authData);\n    }\n\n    // To identify the resources that have the metadata and where the signal\n    // needs to be sent, we need { region, stackName, logicalId }\n    let resourceLocator = `--region ${Aws.REGION} --stack ${Aws.STACK_NAME} --resource ${attachedResource.logicalId}`;\n    const signalResource = attachOptions.signalResource?.logicalId ?? attachedResource.logicalId;\n    let notifyResourceLocator = `--region ${Aws.REGION} --stack ${Aws.STACK_NAME} --resource ${signalResource}`;\n\n    // If specified in attachOptions, include arguments in cfn-init/cfn-signal commands\n    if (attachOptions.includeUrl) {\n      resourceLocator = `${resourceLocator} --url https://cloudformation.${Aws.REGION}.${Aws.URL_SUFFIX}`;\n      notifyResourceLocator = `${notifyResourceLocator} --url https://cloudformation.${Aws.REGION}.${Aws.URL_SUFFIX}`;\n    }\n    if (attachOptions.includeRole) {\n      resourceLocator = `${resourceLocator} --role ${attachOptions.instanceRole.roleName}`;\n      notifyResourceLocator = `${notifyResourceLocator} --role ${attachOptions.instanceRole.roleName}`;\n    }\n\n    const configSets = (attachOptions.configSets ?? ['default']).join(',');\n    const printLog = attachOptions.printLog ?? true;\n\n    if (attachOptions.embedFingerprint ?? true) {\n      // It just so happens that the comment char is '#' for both bash and PowerShell\n      attachOptions.userData.addCommands(`# fingerprint: ${fingerprint}`);\n    }\n\n    if (attachOptions.platform === OperatingSystemType.WINDOWS) {\n      const errCode = attachOptions.ignoreFailures ? '0' : '$LASTEXITCODE';\n      attachOptions.userData.addCommands(\n        ...[\n          `cfn-init.exe -v ${resourceLocator} -c ${configSets}`,\n          `cfn-signal.exe -e ${errCode} ${notifyResourceLocator}`,\n          ...(printLog ? ['type C:\\\\cfn\\\\log\\\\cfn-init.log'] : []),\n        ],\n      );\n    } else {\n      const errCode = attachOptions.ignoreFailures ? '0' : '$?';\n      attachOptions.userData.addCommands(\n        ...[\n          // Run a subshell without 'errexit', so we can signal using the exit code of cfn-init\n          '(',\n          '  set +e',\n          `  /opt/aws/bin/cfn-init -v ${resourceLocator} -c ${configSets}`,\n          `  /opt/aws/bin/cfn-signal -e ${errCode} ${notifyResourceLocator}`,\n          ...(printLog ? ['  cat /var/log/cfn-init.log >&2'] : []),\n          ')',\n        ],\n      );\n    }\n  }\n\n  private bind(scope: Construct, options: AttachInitOptions): { configData: any, authData: any, assetHash?: any } {\n    const nonEmptyConfigs = mapValues(this._configs, c => c.isEmpty() ? undefined : c);\n\n    const configNameToBindResult = mapValues(nonEmptyConfigs, c => c._bind(scope, options));\n\n    return {\n      configData: {\n        configSets: mapValues(this._configSets, configNames => configNames.filter(name => nonEmptyConfigs[name] !== undefined)),\n        ...mapValues(configNameToBindResult, c => c.config),\n      },\n      authData: Object.values(configNameToBindResult).map(c => c.authentication).reduce(deepMerge, undefined),\n      assetHash: combineAssetHashesOrUndefined(Object.values(configNameToBindResult).map(c => c.assetHash)),\n    };\n  }\n\n}\n\n/**\n * A collection of configuration elements\n */\nexport class InitConfig {\n  private readonly elements = new Array<InitElement>();\n\n  constructor(elements: InitElement[]) {\n    this.add(...elements);\n  }\n\n  /**\n   * Whether this configset has elements or not\n   */\n  public isEmpty() {\n    return this.elements.length === 0;\n  }\n\n  /**\n   * Add one or more elements to the config\n   */\n  public add(...elements: InitElement[]) {\n    this.elements.push(...elements);\n  }\n\n  /**\n   * Called when the config is applied to an instance.\n   * Creates the CloudFormation representation of the Init config and handles any permissions and assets.\n   * @internal\n   */\n  public _bind(scope: Construct, options: AttachInitOptions): InitElementConfig {\n    const bindOptions = {\n      instanceRole: options.instanceRole,\n      platform: this.initPlatformFromOSType(options.platform),\n      scope,\n    };\n\n    const packageConfig = this.bindForType(InitElementType.PACKAGE, bindOptions);\n    const groupsConfig = this.bindForType(InitElementType.GROUP, bindOptions);\n    const usersConfig = this.bindForType(InitElementType.USER, bindOptions);\n    const sourcesConfig = this.bindForType(InitElementType.SOURCE, bindOptions);\n    const filesConfig = this.bindForType(InitElementType.FILE, bindOptions);\n    const commandsConfig = this.bindForType(InitElementType.COMMAND, bindOptions);\n    // Must be last!\n    const servicesConfig = this.bindForType(InitElementType.SERVICE, bindOptions);\n\n    const allConfig = [packageConfig, groupsConfig, usersConfig, sourcesConfig, filesConfig, commandsConfig, servicesConfig];\n    const authentication = allConfig.map(c => c?.authentication).reduce(deepMerge, undefined);\n    const assetHash = combineAssetHashesOrUndefined(allConfig.map(c => c?.assetHash));\n\n    return {\n      config: {\n        packages: packageConfig?.config,\n        groups: groupsConfig?.config,\n        users: usersConfig?.config,\n        sources: sourcesConfig?.config,\n        files: filesConfig?.config,\n        commands: commandsConfig?.config,\n        services: servicesConfig?.config,\n      },\n      authentication,\n      assetHash,\n    };\n  }\n\n  private bindForType(elementType: InitElementType, renderOptions: Omit<InitBindOptions, 'index'>): InitElementConfig | undefined {\n    const elements = this.elements.filter(elem => elem.elementType === elementType);\n    if (elements.length === 0) { return undefined; }\n\n    const bindResults = elements.map((e, index) => e._bind({ index, ...renderOptions }));\n\n    return {\n      config: bindResults.map(r => r.config).reduce(deepMerge, undefined) ?? {},\n      authentication: bindResults.map(r => r.authentication).reduce(deepMerge, undefined),\n      assetHash: combineAssetHashesOrUndefined(bindResults.map(r => r.assetHash)),\n    };\n  }\n\n  private initPlatformFromOSType(osType: OperatingSystemType): InitPlatform {\n    switch (osType) {\n      case OperatingSystemType.LINUX: {\n        return InitPlatform.LINUX;\n      }\n      case OperatingSystemType.WINDOWS: {\n        return InitPlatform.WINDOWS;\n      }\n      default: {\n        throw new Error('Cannot attach CloudFormationInit to an unknown OS type');\n      }\n    }\n  }\n}\n\n/**\n * Options for CloudFormationInit.withConfigSets\n */\nexport interface ConfigSetProps {\n  /**\n   * The definitions of each config set\n   */\n  readonly configSets: Record<string, string[]>;\n\n  /**\n   * The sets of configs to pick from\n   */\n  readonly configs: Record<string, InitConfig>;\n}\n\n/**\n * Deep-merge objects and arrays\n *\n * Treat arrays as sets, removing duplicates. This is acceptable for rendering\n * cfn-inits, not applicable elsewhere.\n */\nfunction deepMerge(target?: Record<string, any>, src?: Record<string, any>) {\n  if (target == null) { return src; }\n  if (src == null) { return target; }\n\n  for (const [key, value] of Object.entries(src)) {\n    if (Array.isArray(value)) {\n      if (target[key] && !Array.isArray(target[key])) {\n        throw new Error(`Trying to merge array [${value}] into a non-array '${target[key]}'`);\n      }\n      target[key] = Array.from(new Set([\n        ...target[key] ?? [],\n        ...value,\n      ]));\n      continue;\n    }\n    if (typeof value === 'object' && value) {\n      target[key] = deepMerge(target[key] ?? {}, value);\n      continue;\n    }\n    if (value !== undefined) {\n      target[key] = value;\n    }\n  }\n\n  return target;\n}\n\n/**\n * Map a function over values of an object\n *\n * If the mapping function returns undefined, remove the key\n */\nfunction mapValues<A, B>(xs: Record<string, A>, fn: (x: A) => B | undefined): Record<string, B> {\n  const ret: Record<string, B> = {};\n  for (const [k, v] of Object.entries(xs)) {\n    const mapped = fn(v);\n    if (mapped !== undefined) {\n      ret[k] = mapped;\n    }\n  }\n  return ret;\n}\n\n// Combines all input asset hashes into one, or if no hashes are present, returns undefined.\nfunction combineAssetHashesOrUndefined(hashes: (string | undefined)[]): string | undefined {\n  const hashArray = hashes.filter((x): x is string => x !== undefined);\n  return hashArray.length > 0 ? hashArray.join('') : undefined;\n}\n\nfunction contentHash(content: string) {\n  return crypto.createHash('sha256').update(content).digest('hex');\n}\n\n/**\n * Options for attaching a CloudFormationInit to a resource\n */\nexport interface AttachInitOptions {\n  /**\n   * Instance role of the consuming instance or fleet\n   */\n  readonly instanceRole: iam.IRole;\n\n  /**\n   * Include --url argument when running cfn-init and cfn-signal commands\n   *\n   * This will be the cloudformation endpoint in the deployed region\n   * e.g. https://cloudformation.us-east-1.amazonaws.com\n   *\n   * @default false\n   */\n  readonly includeUrl?: boolean;\n\n  /**\n   * Include --role argument when running cfn-init and cfn-signal commands\n   *\n   * This will be the IAM instance profile attached to the EC2 instance\n   *\n   * @default false\n   */\n  readonly includeRole?: boolean;\n\n  /**\n   * OS Platform the init config will be used for\n   */\n  readonly platform: OperatingSystemType;\n\n  /**\n   * UserData to add commands to\n   */\n  readonly userData: UserData;\n\n  /**\n   * ConfigSet to activate\n   *\n   * @default ['default']\n   */\n  readonly configSets?: string[];\n\n  /**\n   * Whether to embed a hash into the userData\n   *\n   * If `true` (the default), a hash of the config will be embedded into the\n   * UserData, so that if the config changes, the UserData changes and\n   * the instance will be replaced.\n   *\n   * If `false`, no such hash will be embedded, and if the CloudFormation Init\n   * config changes nothing will happen to the running instance.\n   *\n   * @default true\n   */\n  readonly embedFingerprint?: boolean;\n\n  /**\n   * Print the results of running cfn-init to the Instance System Log\n   *\n   * By default, the output of running cfn-init is written to a log file\n   * on the instance. Set this to `true` to print it to the System Log\n   * (visible from the EC2 Console), `false` to not print it.\n   *\n   * (Be aware that the system log is refreshed at certain points in\n   * time of the instance life cycle, and successful execution may\n   * not always show up).\n   *\n   * @default true\n   */\n  readonly printLog?: boolean;\n\n  /**\n   * Don't fail the instance creation when cfn-init fails\n   *\n   * You can use this to prevent CloudFormation from rolling back when\n   * instances fail to start up, to help in debugging.\n   *\n   * @default false\n   */\n  readonly ignoreFailures?: boolean;\n\n  /**\n   * When provided, signals this resource instead of the attached resource\n   *\n   * You can use this to support signaling LaunchTemplate while attaching AutoScalingGroup\n   *\n   * @default - if this property is undefined cfn-signal signals the attached resource\n   */\n  readonly signalResource?: CfnResource;\n}\n"],
  "mappings": "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",
  "names": []
}
