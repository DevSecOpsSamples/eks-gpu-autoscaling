{
  "version": 3,
  "sources": ["network-acl-types.ts"],
  "sourcesContent": ["/**\n * Either an IPv4 or an IPv6 CIDR\n *\n *\n */\nexport abstract class AclCidr {\n  /**\n   * An IP network range in CIDR notation (for example, 172.16.0.0/24).\n   */\n  public static ipv4(ipv4Cidr: string): AclCidr {\n    return new AclCidrImpl({\n      cidrBlock: ipv4Cidr,\n    });\n  }\n\n  /**\n   * The CIDR containing all IPv4 addresses (i.e., 0.0.0.0/0)\n   */\n  public static anyIpv4(): AclCidr {\n    return AclCidr.ipv4('0.0.0.0/0');\n  }\n\n  /**\n   * An IPv6 network range in CIDR notation (for example, 2001:db8::/48)\n   */\n  public static ipv6(ipv6Cidr: string): AclCidr {\n    return new AclCidrImpl({\n      ipv6CidrBlock: ipv6Cidr,\n    });\n  }\n\n  /**\n   * The CIDR containing all IPv6 addresses (i.e., ::/0)\n   */\n  public static anyIpv6(): AclCidr {\n    return AclCidr.ipv6('::/0');\n  }\n\n  public abstract toCidrConfig(): AclCidrConfig;\n}\n\nclass AclCidrImpl extends AclCidr {\n  constructor(private readonly config: AclCidrConfig) {\n    super();\n  }\n\n  public toCidrConfig(): AclCidrConfig {\n    return this.config;\n  }\n}\n\n/**\n * Acl Configuration for CIDR\n *\n *\n */\nexport interface AclCidrConfig {\n  /**\n   * Ipv4 CIDR\n   */\n  readonly cidrBlock?: string;\n\n  /**\n   * Ipv6 CIDR\n   */\n  readonly ipv6CidrBlock?: string;\n}\n\n/**\n * The traffic that is configured using a Network ACL entry\n *\n *\n */\nexport abstract class AclTraffic {\n  /**\n   * Apply the ACL entry to all traffic\n   */\n  public static allTraffic(): AclTraffic {\n    return new AclTrafficImpl({\n      protocol: -1,\n    });\n  }\n\n  /**\n   * Apply the ACL entry to ICMP traffic of given type and code\n   */\n  public static icmp(props: AclIcmp): AclTraffic {\n    return new AclTrafficImpl({\n      protocol: 1,\n      icmp: props,\n    });\n  }\n\n  /**\n   * Apply the ACL entry to ICMPv6 traffic of given type and code\n   *\n   * Requires an IPv6 CIDR block.\n   */\n  public static icmpv6(props: AclIcmp): AclTraffic {\n    return new AclTrafficImpl({\n      protocol: 58,\n      icmp: props,\n    });\n  }\n\n  /**\n   * Apply the ACL entry to TCP traffic on a given port\n   */\n  public static tcpPort(port: number): AclTraffic {\n    return new AclTrafficImpl({\n      protocol: 6,\n      portRange: {\n        from: port,\n        to: port,\n      },\n    });\n  }\n\n  /**\n   * Apply the ACL entry to TCP traffic on a given port range\n   */\n  public static tcpPortRange(startPort: number, endPort: number): AclTraffic {\n    return new AclTrafficImpl({\n      protocol: 6,\n      portRange: {\n        from: startPort,\n        to: endPort,\n      },\n    });\n  }\n\n  /**\n   * Apply the ACL entry to UDP traffic on a given port\n   */\n  public static udpPort(port: number): AclTraffic {\n    return new AclTrafficImpl({\n      protocol: 17,\n      portRange: {\n        from: port,\n        to: port,\n      },\n    });\n  }\n\n  /**\n   * Apply the ACL entry to UDP traffic on a given port range\n   */\n  public static udpPortRange(startPort: number, endPort: number): AclTraffic {\n    return new AclTrafficImpl({\n      protocol: 17,\n      portRange: {\n        from: startPort,\n        to: endPort,\n      },\n    });\n  }\n\n  public abstract toTrafficConfig(): AclTrafficConfig;\n}\n\nclass AclTrafficImpl extends AclTraffic {\n  constructor(private readonly config: AclTrafficConfig) {\n    super();\n  }\n\n  public toTrafficConfig(): AclTrafficConfig {\n    return this.config;\n  }\n}\n\n/**\n * Acl Configuration for traffic\n *\n *\n */\nexport interface AclTrafficConfig {\n  /**\n   * The Internet Control Message Protocol (ICMP) code and type.\n   *\n   * @default - Required if specifying 1 (ICMP) for the protocol parameter.\n   */\n  readonly icmp?: AclIcmp;\n\n  /**\n   * The range of port numbers for the UDP/TCP protocol.\n   *\n   * @default - Required if specifying 6 (TCP) or 17 (UDP) for the protocol parameter\n   */\n  readonly portRange?: AclPortRange;\n\n  /**\n   * The protocol number.\n   *\n   * A value of \"-1\" means all protocols.\n   *\n   * If you specify \"-1\" or a protocol number other than \"6\" (TCP), \"17\" (UDP),\n   * or \"1\" (ICMP), traffic on all ports is allowed, regardless of any ports or\n   * ICMP types or codes that you specify.\n   *\n   * If you specify protocol \"58\" (ICMPv6) and specify an IPv4 CIDR\n   * block, traffic for all ICMP types and codes allowed, regardless of any that\n   * you specify. If you specify protocol \"58\" (ICMPv6) and specify an IPv6 CIDR\n   * block, you must specify an ICMP type and code.\n   *\n   * @default 17\n   */\n  readonly protocol: number;\n}\n\n/**\n * Properties to create Icmp\n *\n *\n */\nexport interface AclIcmp {\n  /**\n   * The Internet Control Message Protocol (ICMP) type. You can use -1 to specify all ICMP types.\n   * Conditional requirement: Required if you specify 1 (ICMP) for the CreateNetworkAclEntry protocol parameter.\n   */\n  readonly type?: number;\n\n  /**\n   * The Internet Control Message Protocol (ICMP) code. You can use -1 to specify all ICMP\n   * codes for the given ICMP type. Requirement is conditional: Required if you\n   * specify 1 (ICMP) for the protocol parameter.\n   */\n  readonly code?: number;\n}\n\n/**\n * Properties to create PortRange\n *\n *\n */\nexport interface AclPortRange {\n  /**\n   * The first port in the range. Required if you specify 6 (TCP) or 17 (UDP) for the protocol parameter.\n   */\n  readonly from?: number\n\n  /**\n   * The last port in the range. Required if you specify 6 (TCP) or 17 (UDP) for the protocol parameter.\n   */\n  readonly to?: number\n}\n"],
  "mappings": "oOAKA,MAAsB,OAAO,OAIb,MAAK,SAAgB,CACjC,MAAO,IAAI,aAAY,CACrB,UAAW,SACZ,QAMW,UAAO,CACnB,MAAO,SAAQ,KAAK,WAAW,QAMnB,MAAK,SAAgB,CACjC,MAAO,IAAI,aAAY,CACrB,cAAe,SAChB,QAMW,UAAO,CACnB,MAAO,SAAQ,KAAK,MAAM,GA9B9B,QAAA,QAAA,+FAoCA,MAAM,mBAAoB,QAAO,CAC/B,YAA6B,OAAqB,CAChD,MAAK,EADsB,KAAA,OAAA,OAItB,cAAY,CACjB,MAAO,MAAK,QA0BhB,MAAsB,UAAU,OAIhB,aAAU,CACtB,MAAO,IAAI,gBAAe,CACxB,SAAU,GACX,QAMW,MAAK,MAAc,mEACxB,GAAI,gBAAe,CACxB,SAAU,EACV,KAAM,MACP,QAQW,QAAO,MAAc,mEAC1B,GAAI,gBAAe,CACxB,SAAU,GACV,KAAM,MACP,QAMW,SAAQ,KAAY,CAChC,MAAO,IAAI,gBAAe,CACxB,SAAU,EACV,UAAW,CACT,KAAM,KACN,GAAI,MAEP,QAMW,cAAa,UAAmB,QAAe,CAC3D,MAAO,IAAI,gBAAe,CACxB,SAAU,EACV,UAAW,CACT,KAAM,UACN,GAAI,SAEP,QAMW,SAAQ,KAAY,CAChC,MAAO,IAAI,gBAAe,CACxB,SAAU,GACV,UAAW,CACT,KAAM,KACN,GAAI,MAEP,QAMW,cAAa,UAAmB,QAAe,CAC3D,MAAO,IAAI,gBAAe,CACxB,SAAU,GACV,UAAW,CACT,KAAM,UACN,GAAI,SAEP,GAjFL,QAAA,WAAA,wGAuFA,MAAM,sBAAuB,WAAU,CACrC,YAA6B,OAAwB,CACnD,MAAK,EADsB,KAAA,OAAA,OAItB,iBAAe,CACpB,MAAO,MAAK",
  "names": []
}
