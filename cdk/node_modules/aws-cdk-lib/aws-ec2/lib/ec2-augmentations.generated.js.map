{
  "version": 3,
  "sources": ["ec2-augmentations.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\nimport * as cloudwatch from '../../aws-cloudwatch';\nimport { VpnConnection } from \"./vpn\";\ndeclare module \"./vpn\" {\n    interface IVpnConnection {\n        /**\n         * Return the given named metric for this VPNConnection\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The state of the tunnel. 0 indicates DOWN and 1 indicates UP.\n         *\n         * Average over 5 minutes\n         */\n        metricTunnelState(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The bytes received through the VPN tunnel.\n         *\n         * Sum over 5 minutes\n         */\n        metricTunnelDataIn(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The bytes sent through the VPN tunnel.\n         *\n         * Sum over 5 minutes\n         */\n        metricTunnelDataOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n    interface VpnConnection {\n        /**\n         * Return the given named metric for this VPNConnection\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The state of the tunnel. 0 indicates DOWN and 1 indicates UP.\n         *\n         * Average over 5 minutes\n         */\n        metricTunnelState(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The bytes received through the VPN tunnel.\n         *\n         * Sum over 5 minutes\n         */\n        metricTunnelDataIn(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The bytes sent through the VPN tunnel.\n         *\n         * Sum over 5 minutes\n         */\n        metricTunnelDataOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n}\nVpnConnection.prototype.metric = function(metricName: string, props?: cloudwatch.MetricOptions) {\n  return new cloudwatch.Metric({\n    namespace: 'AWS/VPN',\n    metricName,\n    dimensionsMap: { VpnId: this.vpnId },\n    ...props\n  }).attachTo(this);\n};\nVpnConnection.prototype.metricTunnelState = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('TunnelState', { statistic: 'Average', ...props });\n};\nVpnConnection.prototype.metricTunnelDataIn = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('TunnelDataIn', { statistic: 'Sum', ...props });\n};\nVpnConnection.prototype.metricTunnelDataOut = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('TunnelDataOut', { statistic: 'Sum', ...props });\n};\n"],
  "mappings": "oEAGA,KAAA,YAAA,QAAA,sBAAA,EACA,MAAA,QAAA,OAAA,EAmDA,MAAA,cAAc,UAAU,OAAS,SAAS,WAAoB,MAAgC,CAC5F,MAAO,IAAI,YAAW,OAAO,CAC3B,UAAW,UACX,WACA,cAAe,CAAE,MAAO,KAAK,KAAK,KAC/B,MACJ,EAAE,SAAS,IAAI,CAClB,EACA,MAAA,cAAc,UAAU,kBAAoB,SAAS,MAAgC,CACnF,MAAO,MAAK,OAAO,cAAe,CAAE,UAAW,aAAc,KAAK,CAAE,CACtE,EACA,MAAA,cAAc,UAAU,mBAAqB,SAAS,MAAgC,CACpF,MAAO,MAAK,OAAO,eAAgB,CAAE,UAAW,SAAU,KAAK,CAAE,CACnE,EACA,MAAA,cAAc,UAAU,oBAAsB,SAAS,MAAgC,CACrF,MAAO,MAAK,OAAO,gBAAiB,CAAE,UAAW,SAAU,KAAK,CAAE,CACpE",
  "names": []
}
