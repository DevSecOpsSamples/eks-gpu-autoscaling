{
  "version": 3,
  "sources": ["bastion-host.ts"],
  "sourcesContent": ["import { IPrincipal, IRole, PolicyStatement } from '../../aws-iam';\nimport { CfnOutput, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { AmazonLinuxGeneration, InstanceArchitecture, InstanceClass, InstanceSize, InstanceType } from '.';\nimport { CloudFormationInit } from './cfn-init';\nimport { Connections } from './connections';\nimport { ApplyCloudFormationInitOptions, IInstance, Instance } from './instance';\nimport { AmazonLinuxCpuType, IMachineImage, MachineImage } from './machine-image';\nimport { IPeer } from './peer';\nimport { Port } from './port';\nimport { ISecurityGroup } from './security-group';\nimport { BlockDevice } from './volume';\nimport { IVpc, SubnetSelection } from './vpc';\n\n/**\n * Properties of the bastion host\n *\n *\n */\nexport interface BastionHostLinuxProps {\n\n  /**\n   * In which AZ to place the instance within the VPC\n   *\n   * @default - Random zone.\n   */\n  readonly availabilityZone?: string;\n\n  /**\n   * VPC to launch the instance in.\n   */\n  readonly vpc: IVpc;\n\n  /**\n   * The name of the instance\n   *\n   * @default 'BastionHost'\n   */\n  readonly instanceName?: string;\n\n  /**\n   * Select the subnets to run the bastion host in.\n   * Set this to PUBLIC if you need to connect to this instance via the internet and cannot use SSM.\n   * You have to allow port 22 manually by using the connections field\n   *\n   * @default - private subnets of the supplied VPC\n   */\n  readonly subnetSelection?: SubnetSelection;\n\n  /**\n   * Security Group to assign to this instance\n   *\n   * @default - create new security group with no inbound and all outbound traffic allowed\n   */\n  readonly securityGroup?: ISecurityGroup;\n\n  /**\n   * Type of instance to launch\n   * @default 't3.nano'\n   */\n  readonly instanceType?: InstanceType;\n\n  /**\n   * The machine image to use, assumed to have SSM Agent preinstalled.\n   *\n   * @default - An Amazon Linux 2 image which is kept up-to-date automatically (the instance\n   * may be replaced on every deployment) and already has SSM Agent installed.\n   */\n  readonly machineImage?: IMachineImage;\n\n  /**\n   * Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.\n   *\n   * Each instance that is launched has an associated root device volume,\n   * either an Amazon EBS volume or an instance store volume.\n   * You can use block device mappings to specify additional EBS volumes or\n   * instance store volumes to attach to an instance when it is launched.\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html\n   *\n   * @default - Uses the block device mapping of the AMI\n   */\n  readonly blockDevices?: BlockDevice[];\n\n  /**\n   * Apply the given CloudFormation Init configuration to the instance at startup\n   *\n   * @default - no CloudFormation init\n   */\n  readonly init?: CloudFormationInit;\n\n  /**\n   * Use the given options for applying CloudFormation Init\n   *\n   * Describes the configsets to use and the timeout to wait\n   *\n   * @default - default options\n   */\n  readonly initOptions?: ApplyCloudFormationInitOptions;\n\n  /**\n   * Whether IMDSv2 should be required on this instance\n   *\n   * @default - false\n   */\n  readonly requireImdsv2?: boolean;\n}\n\n/**\n * This creates a linux bastion host you can use to connect to other instances or services in your VPC.\n * The recommended way to connect to the bastion host is by using AWS Systems Manager Session Manager.\n *\n * The operating system is Amazon Linux 2 with the latest SSM agent installed\n *\n * You can also configure this bastion host to allow connections via SSH\n *\n *\n * @resource AWS::EC2::Instance\n */\nexport class BastionHostLinux extends Resource implements IInstance {\n  public readonly stack: Stack;\n\n  /**\n   * Allows specify security group connections for the instance.\n   */\n  public readonly connections: Connections;\n\n  /**\n   * The IAM role assumed by the instance.\n   */\n  public readonly role: IRole;\n\n  /**\n   * The principal to grant permissions to\n   */\n  public readonly grantPrincipal: IPrincipal;\n\n  /**\n   * The underlying instance resource\n   */\n  public readonly instance: Instance;\n\n  /**\n   * @attribute\n   */\n  public readonly instanceId: string;\n\n  /**\n   * @attribute\n   */\n  public readonly instanceAvailabilityZone: string;\n\n  /**\n   * @attribute\n   */\n  public readonly instancePrivateDnsName: string;\n\n  /**\n   * @attribute\n   */\n  public readonly instancePrivateIp: string;\n\n  /**\n   * @attribute\n   */\n  public readonly instancePublicDnsName: string;\n\n  /**\n   * @attribute\n   */\n  public readonly instancePublicIp: string;\n\n  constructor(scope: Construct, id: string, props: BastionHostLinuxProps) {\n    super(scope, id);\n    this.stack = Stack.of(scope);\n    const instanceType = props.instanceType ?? InstanceType.of(InstanceClass.T3, InstanceSize.NANO);\n    this.instance = new Instance(this, 'Resource', {\n      vpc: props.vpc,\n      availabilityZone: props.availabilityZone,\n      securityGroup: props.securityGroup,\n      instanceName: props.instanceName ?? 'BastionHost',\n      instanceType,\n      machineImage: props.machineImage ?? MachineImage.latestAmazonLinux({\n        generation: AmazonLinuxGeneration.AMAZON_LINUX_2,\n        cpuType: this.toAmazonLinuxCpuType(instanceType.architecture),\n      }),\n      vpcSubnets: props.subnetSelection ?? {},\n      blockDevices: props.blockDevices ?? undefined,\n      init: props.init,\n      initOptions: props.initOptions,\n      requireImdsv2: props.requireImdsv2 ?? false,\n    });\n    this.instance.addToRolePolicy(new PolicyStatement({\n      actions: [\n        'ssmmessages:*',\n        'ssm:UpdateInstanceInformation',\n        'ec2messages:*',\n      ],\n      resources: ['*'],\n    }));\n    this.connections = this.instance.connections;\n    this.role = this.instance.role;\n    this.grantPrincipal = this.instance.role;\n    this.instanceId = this.instance.instanceId;\n    this.instancePrivateIp = this.instance.instancePrivateIp;\n    this.instanceAvailabilityZone = this.instance.instanceAvailabilityZone;\n    this.instancePrivateDnsName = this.instance.instancePrivateDnsName;\n    this.instancePublicIp = this.instance.instancePublicIp;\n    this.instancePublicDnsName = this.instance.instancePublicDnsName;\n\n    new CfnOutput(this, 'BastionHostId', {\n      description: 'Instance ID of the bastion host. Use this to connect via SSM Session Manager',\n      value: this.instanceId,\n    });\n  }\n\n  /**\n   * Returns the AmazonLinuxCpuType corresponding to the given instance architecture\n   * @param architecture the instance architecture value to convert\n   */\n  private toAmazonLinuxCpuType(architecture: InstanceArchitecture): AmazonLinuxCpuType {\n    if (architecture === InstanceArchitecture.ARM_64) {\n      return AmazonLinuxCpuType.ARM_64;\n    } else if (architecture === InstanceArchitecture.X86_64) {\n      return AmazonLinuxCpuType.X86_64;\n    }\n\n    throw new Error(`Unsupported instance architecture '${architecture}'`);\n  }\n\n  /**\n   * Allow SSH access from the given peer or peers\n   *\n   * Necessary if you want to connect to the instance using ssh. If not\n   * called, you should use SSM Session Manager to connect to the instance.\n   */\n  public allowSshAccessFrom(...peer: IPeer[]): void {\n    peer.forEach(p => {\n      this.connections.allowFrom(p, Port.tcp(22), 'SSH access');\n    });\n  }\n}\n"],
  "mappings": "uNAAA,UAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EAEA,GAAA,QAAA,GAAA,EAGA,WAAA,QAAA,YAAA,EACA,gBAAA,QAAA,iBAAA,EAEA,OAAA,QAAA,QAAA,EA8GA,MAAa,wBAAyB,QAAA,QAAQ,CAqD5C,YAAY,MAAkB,GAAY,MAA4B,uBACpE,MAAM,MAAO,EAAE,2EACf,KAAK,MAAQ,OAAA,MAAM,GAAG,KAAK,EAC3B,KAAM,cAAY,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,GAAA,aAAa,GAAG,GAAA,cAAc,GAAI,GAAA,aAAa,IAAI,EAC9F,KAAK,SAAW,GAAI,YAAA,SAAS,KAAM,WAAY,CAC7C,IAAK,MAAM,IACX,iBAAkB,MAAM,iBACxB,cAAe,MAAM,cACrB,aAAY,IAAE,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,cACpC,aACA,aAAY,IAAE,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,gBAAA,aAAa,kBAAkB,CACjE,WAAY,GAAA,sBAAsB,eAClC,QAAS,KAAK,qBAAqB,aAAa,YAAY,EAC7D,EACD,WAAU,IAAE,MAAM,mBAAe,MAAA,KAAA,OAAA,GAAI,CAAA,EACrC,aAAY,IAAE,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,OACpC,KAAM,MAAM,KACZ,YAAa,MAAM,YACnB,cAAa,IAAE,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,GACvC,EACD,KAAK,SAAS,gBAAgB,GAAI,WAAA,gBAAgB,CAChD,QAAS,CACP,gBACA,gCACA,iBAEF,UAAW,CAAC,GAAG,EAChB,CAAC,EACF,KAAK,YAAc,KAAK,SAAS,YACjC,KAAK,KAAO,KAAK,SAAS,KAC1B,KAAK,eAAiB,KAAK,SAAS,KACpC,KAAK,WAAa,KAAK,SAAS,WAChC,KAAK,kBAAoB,KAAK,SAAS,kBACvC,KAAK,yBAA2B,KAAK,SAAS,yBAC9C,KAAK,uBAAyB,KAAK,SAAS,uBAC5C,KAAK,iBAAmB,KAAK,SAAS,iBACtC,KAAK,sBAAwB,KAAK,SAAS,sBAE3C,GAAI,QAAA,UAAU,KAAM,gBAAiB,CACnC,YAAa,+EACb,MAAO,KAAK,WACb,EAOK,qBAAqB,aAAkC,CAC7D,GAAI,eAAiB,GAAA,qBAAqB,OACxC,MAAO,iBAAA,mBAAmB,OACrB,GAAI,eAAiB,GAAA,qBAAqB,OAC/C,MAAO,iBAAA,mBAAmB,OAG5B,KAAM,IAAI,OAAM,sCAAsC,eAAe,EAShE,sBAAsB,KAAa,yDACxC,KAAK,QAAQ,GAAI,CACf,KAAK,YAAY,UAAU,EAAG,OAAA,KAAK,IAAI,EAAE,EAAG,YAAY,CAC1D,CAAC,GAxHL,QAAA,iBAAA",
  "names": []
}
