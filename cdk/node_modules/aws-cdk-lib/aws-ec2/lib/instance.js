"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.Instance=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),crypto=require("crypto"),iam=require("../../aws-iam"),core_1=require("../../core"),aspects_1=require("./aspects"),connections_1=require("./connections"),ec2_generated_1=require("./ec2.generated"),ebs_util_1=require("./private/ebs-util"),security_group_1=require("./security-group"),vpc_1=require("./vpc"),NAME_TAG="Name";class Instance extends core_1.Resource{constructor(scope,id,props){var _b;super(scope,id);if(this.securityGroups=[],jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_InstanceProps(props),props.initOptions&&!props.init)throw new Error("Setting 'initOptions' requires that 'init' is also set");props.securityGroup?this.securityGroup=props.securityGroup:this.securityGroup=new security_group_1.SecurityGroup(this,"InstanceSecurityGroup",{vpc:props.vpc,allowAllOutbound:props.allowAllOutbound!==!1}),this.connections=new connections_1.Connections({securityGroups:[this.securityGroup]}),this.securityGroups.push(this.securityGroup),core_1.Tags.of(this).add(NAME_TAG,props.instanceName||this.node.path),this.role=props.role||new iam.Role(this,"InstanceRole",{assumedBy:new iam.ServicePrincipal("ec2.amazonaws.com")}),this.grantPrincipal=this.role;const iamProfile=new iam.CfnInstanceProfile(this,"InstanceProfile",{roles:[this.role.roleName]}),imageConfig=props.machineImage.getImage(this);this.userData=(_b=props.userData)!==null&&_b!==void 0?_b:imageConfig.userData;const userDataToken=core_1.Lazy.string({produce:()=>core_1.Fn.base64(this.userData.render())}),securityGroupsToken=core_1.Lazy.list({produce:()=>this.securityGroups.map(sg=>sg.securityGroupId)}),{subnets}=props.vpc.selectSubnets(props.vpcSubnets);let subnet;if(props.availabilityZone){const selected=subnets.filter(sn=>sn.availabilityZone===props.availabilityZone);selected.length===1?subnet=selected[0]:core_1.Annotations.of(this).addError(`Need exactly 1 subnet to match AZ '${props.availabilityZone}', found ${selected.length}. Use a different availabilityZone.`)}else subnets.length>0?subnet=subnets[0]:core_1.Annotations.of(this).addError(`Did not find any subnets matching '${JSON.stringify(props.vpcSubnets)}', please use a different selection.`);subnet||(subnet=vpc_1.Subnet.fromSubnetAttributes(this,"DummySubnet",{subnetId:"s-notfound",availabilityZone:"az-notfound"})),this.instance=new ec2_generated_1.CfnInstance(this,"Resource",{imageId:imageConfig.imageId,keyName:props.keyName,instanceType:props.instanceType.toString(),securityGroupIds:securityGroupsToken,iamInstanceProfile:iamProfile.ref,userData:userDataToken,subnetId:subnet.subnetId,availabilityZone:subnet.availabilityZone,sourceDestCheck:props.sourceDestCheck,blockDeviceMappings:props.blockDevices!==void 0?ebs_util_1.instanceBlockDeviceMappings(this,props.blockDevices):void 0,privateIpAddress:props.privateIpAddress,propagateTagsToVolumeOnCreation:props.propagateTagsToVolumeOnCreation,monitoring:props.detailedMonitoring}),this.instance.node.addDependency(this.role),this.osType=imageConfig.osType,this.node.defaultChild=this.instance,this.instanceId=this.instance.ref,this.instanceAvailabilityZone=this.instance.attrAvailabilityZone,this.instancePrivateDnsName=this.instance.attrPrivateDnsName,this.instancePrivateIp=this.instance.attrPrivateIp,this.instancePublicDnsName=this.instance.attrPublicDnsName,this.instancePublicIp=this.instance.attrPublicIp,props.init&&this.applyCloudFormationInit(props.init,props.initOptions),this.applyUpdatePolicies(props);const originalLogicalId=core_1.Stack.of(this).getLogicalId(this.instance);let recursing=!1;this.instance.overrideLogicalId(core_1.Lazy.uncachedString({produce:context=>{var _b2;if(recursing||!((_b2=props.userDataCausesReplacement)!==null&&_b2!==void 0?_b2:props.initOptions))return originalLogicalId;const md5=crypto.createHash("md5");recursing=!0;try{md5.update(JSON.stringify(context.resolve(this.userData.render())))}finally{recursing=!1}const digest=md5.digest("hex").slice(0,16);return`${originalLogicalId}${digest}`}})),props.requireImdsv2&&core_1.Aspects.of(this).add(new aspects_1.InstanceRequireImdsv2Aspect)}addSecurityGroup(securityGroup){jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_ISecurityGroup(securityGroup),this.securityGroups.push(securityGroup)}addUserData(...commands){this.userData.addCommands(...commands)}addToRolePolicy(statement){jsiiDeprecationWarnings.aws_cdk_lib_aws_iam_PolicyStatement(statement),this.role.addToPrincipalPolicy(statement)}applyCloudFormationInit(init,options={}){var _b;init.attach(this.instance,{platform:this.osType,instanceRole:this.role,userData:this.userData,configSets:options.configSets,embedFingerprint:options.embedFingerprint,printLog:options.printLog,ignoreFailures:options.ignoreFailures,includeRole:options.includeRole,includeUrl:options.includeUrl}),this.waitForResourceSignal((_b=options.timeout)!==null&&_b!==void 0?_b:core_1.Duration.minutes(5))}waitForResourceSignal(timeout){var _b,_c;const oldResourceSignal=(_b=this.instance.cfnOptions.creationPolicy)===null||_b===void 0?void 0:_b.resourceSignal;this.instance.cfnOptions.creationPolicy={...this.instance.cfnOptions.creationPolicy,resourceSignal:{count:((_c=oldResourceSignal==null?void 0:oldResourceSignal.count)!==null&&_c!==void 0?_c:0)+1,timeout:(oldResourceSignal!=null&&oldResourceSignal.timeout?core_1.Duration.parse(oldResourceSignal==null?void 0:oldResourceSignal.timeout).plus(timeout):timeout).toIsoString()}}}applyUpdatePolicies(props){props.resourceSignalTimeout!==void 0&&(this.instance.cfnOptions.creationPolicy={...this.instance.cfnOptions.creationPolicy,resourceSignal:{timeout:props.resourceSignalTimeout&&props.resourceSignalTimeout.toIsoString()}})}}exports.Instance=Instance,_a=JSII_RTTI_SYMBOL_1,Instance[_a]={fqn:"aws-cdk-lib.aws_ec2.Instance",version:"2.20.0"};
//# sourceMappingURL=instance.js.map
