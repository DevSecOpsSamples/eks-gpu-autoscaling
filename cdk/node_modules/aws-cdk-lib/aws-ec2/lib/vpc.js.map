{
  "version": 3,
  "sources": ["vpc.ts"],
  "sourcesContent": ["import * as cxschema from '../../cloud-assembly-schema';\nimport {\n  Arn, Annotations, ContextProvider,\n  IResource, Lazy, Resource, Stack, Token, Tags, Names,\n} from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { Construct, Dependable, DependencyGroup, IConstruct, IDependable, Node } from 'constructs';\nimport { ClientVpnEndpoint, ClientVpnEndpointOptions } from './client-vpn-endpoint';\nimport {\n  CfnEIP, CfnInternetGateway, CfnNatGateway, CfnRoute, CfnRouteTable, CfnSubnet,\n  CfnSubnetRouteTableAssociation, CfnVPC, CfnVPCGatewayAttachment, CfnVPNGatewayRoutePropagation,\n} from './ec2.generated';\nimport { NatProvider } from './nat';\nimport { INetworkAcl, NetworkAcl, SubnetNetworkAclAssociation } from './network-acl';\nimport { NetworkBuilder } from './network-util';\nimport { SubnetFilter } from './subnet';\nimport { allRouteTableIds, defaultSubnetName, flatten, ImportSubnetGroup, subnetGroupNameFromConstructId, subnetId } from './util';\nimport { GatewayVpcEndpoint, GatewayVpcEndpointAwsService, GatewayVpcEndpointOptions, InterfaceVpcEndpoint, InterfaceVpcEndpointOptions } from './vpc-endpoint';\nimport { FlowLog, FlowLogOptions, FlowLogResourceType } from './vpc-flow-logs';\nimport { VpcLookupOptions } from './vpc-lookup';\nimport { EnableVpnGatewayOptions, VpnConnection, VpnConnectionOptions, VpnConnectionType, VpnGateway } from './vpn';\n\nconst VPC_SUBNET_SYMBOL = Symbol.for('@aws-cdk/aws-ec2.VpcSubnet');\n\nexport interface ISubnet extends IResource {\n  /**\n   * The Availability Zone the subnet is located in\n   */\n  readonly availabilityZone: string;\n\n  /**\n   * The subnetId for this particular subnet\n   * @attribute\n   */\n  readonly subnetId: string;\n\n  /**\n   * Dependable that can be depended upon to force internet connectivity established on the VPC\n   */\n  readonly internetConnectivityEstablished: IDependable;\n\n  /**\n   * The IPv4 CIDR block for this subnet\n   */\n  readonly ipv4CidrBlock: string;\n\n  /**\n   * The route table for this subnet\n   */\n  readonly routeTable: IRouteTable;\n\n  /**\n   * Associate a Network ACL with this subnet\n   *\n   * @param acl The Network ACL to associate\n   */\n  associateNetworkAcl(id: string, acl: INetworkAcl): void;\n}\n\n/**\n * An abstract route table\n */\nexport interface IRouteTable {\n  /**\n   * Route table ID\n   */\n  readonly routeTableId: string;\n}\n\nexport interface IVpc extends IResource {\n  /**\n   * Identifier for this VPC\n   * @attribute\n   */\n  readonly vpcId: string;\n\n  /**\n   * ARN for this VPC\n   * @attribute\n   */\n  readonly vpcArn: string;\n\n  /**\n   * CIDR range for this VPC\n   *\n   * @attribute\n   */\n  readonly vpcCidrBlock: string;\n\n  /**\n   * List of public subnets in this VPC\n   */\n  readonly publicSubnets: ISubnet[];\n\n  /**\n   * List of private subnets in this VPC\n   */\n  readonly privateSubnets: ISubnet[];\n\n  /**\n   * List of isolated subnets in this VPC\n   */\n  readonly isolatedSubnets: ISubnet[];\n\n  /**\n   * AZs for this VPC\n   */\n  readonly availabilityZones: string[];\n\n  /**\n   * Identifier for the VPN gateway\n   */\n  readonly vpnGatewayId?: string;\n\n  /**\n   * Dependable that can be depended upon to force internet connectivity established on the VPC\n   */\n  readonly internetConnectivityEstablished: IDependable;\n\n  /**\n   * Return information on the subnets appropriate for the given selection strategy\n   *\n   * Requires that at least one subnet is matched, throws a descriptive\n   * error message otherwise.\n   */\n  selectSubnets(selection?: SubnetSelection): SelectedSubnets;\n\n  /**\n   * Adds a VPN Gateway to this VPC\n   */\n  enableVpnGateway(options: EnableVpnGatewayOptions): void;\n\n  /**\n   * Adds a new VPN connection to this VPC\n   */\n  addVpnConnection(id: string, options: VpnConnectionOptions): VpnConnection;\n\n  /**\n   * Adds a new client VPN endpoint to this VPC\n   */\n  addClientVpnEndpoint(id: string, options: ClientVpnEndpointOptions): ClientVpnEndpoint;\n\n  /**\n   * Adds a new gateway endpoint to this VPC\n   */\n  addGatewayEndpoint(id: string, options: GatewayVpcEndpointOptions): GatewayVpcEndpoint\n\n  /**\n   * Adds a new interface endpoint to this VPC\n   */\n  addInterfaceEndpoint(id: string, options: InterfaceVpcEndpointOptions): InterfaceVpcEndpoint\n\n  /**\n   * Adds a new Flow Log to this VPC\n   */\n  addFlowLog(id: string, options?: FlowLogOptions): FlowLog\n}\n\n/**\n * The type of Subnet\n */\nexport enum SubnetType {\n  /**\n   * Isolated Subnets do not route traffic to the Internet (in this VPC),\n   * and as such, do not require NAT gateways.\n   *\n   * Isolated subnets can only connect to or be connected to from other\n   * instances in the same VPC. A default VPC configuration will not include\n   * isolated subnets.\n   *\n   * This can be good for subnets with RDS or Elasticache instances,\n   * or which route Internet traffic through a peer VPC.\n   */\n  PRIVATE_ISOLATED = 'Isolated',\n\n  /**\n   * Isolated Subnets do not route traffic to the Internet (in this VPC),\n   * and as such, do not require NAT gateways.\n   *\n   * Isolated subnets can only connect to or be connected to from other\n   * instances in the same VPC. A default VPC configuration will not include\n   * isolated subnets.\n   *\n   * This can be good for subnets with RDS or Elasticache instances,\n   * or which route Internet traffic through a peer VPC.\n   *\n   * @deprecated use `SubnetType.PRIVATE_ISOLATED`\n   */\n  ISOLATED = 'Isolated',\n\n  /**\n   * Subnet that routes to the internet (via a NAT gateway), but not vice versa.\n   *\n   * Instances in a private subnet can connect to the Internet, but will not\n   * allow connections to be initiated from the Internet. NAT Gateway(s) are\n   * required with this subnet type to route the Internet traffic through.\n   * If a NAT Gateway is not required or desired, use `SubnetType.PRIVATE_ISOLATED` instead.\n   *\n   * By default, a NAT gateway is created in every public subnet for maximum availability.\n   * Be aware that you will be charged for NAT gateways.\n   *\n   * Normally a Private subnet will use a NAT gateway in the same AZ, but\n   * if `natGateways` is used to reduce the number of NAT gateways, a NAT\n   * gateway from another AZ will be used instead.\n   */\n  PRIVATE_WITH_NAT = 'Private',\n\n  /**\n   * Subnet that routes to the internet, but not vice versa.\n   *\n   * Instances in a private subnet can connect to the Internet, but will not\n   * allow connections to be initiated from the Internet. NAT Gateway(s) are\n   * required with this subnet type to route the Internet traffic through.\n   * If a NAT Gateway is not required or desired, use `SubnetType.PRIVATE_ISOLATED` instead.\n   *\n   * By default, a NAT gateway is created in every public subnet for maximum availability.\n   * Be aware that you will be charged for NAT gateways.\n   *\n   * Normally a Private subnet will use a NAT gateway in the same AZ, but\n   * if `natGateways` is used to reduce the number of NAT gateways, a NAT\n   * gateway from another AZ will be used instead.\n   *\n   * @deprecated use `PRIVATE_WITH_NAT`\n   */\n  PRIVATE = 'Private',\n\n  /**\n   * Subnet connected to the Internet\n   *\n   * Instances in a Public subnet can connect to the Internet and can be\n   * connected to from the Internet as long as they are launched with public\n   * IPs (controlled on the AutoScalingGroup or other constructs that launch\n   * instances).\n   *\n   * Public subnets route outbound traffic via an Internet Gateway.\n   */\n  PUBLIC = 'Public'\n}\n\n/**\n * Customize subnets that are selected for placement of ENIs\n *\n * Constructs that allow customization of VPC placement use parameters of this\n * type to provide placement settings.\n *\n * By default, the instances are placed in the private subnets.\n */\nexport interface SubnetSelection {\n  /**\n   * Select all subnets of the given type\n   *\n   * At most one of `subnetType` and `subnetGroupName` can be supplied.\n   *\n   * @default SubnetType.PRIVATE_WITH_NAT (or ISOLATED or PUBLIC if there are no PRIVATE_WITH_NAT subnets)\n   */\n  readonly subnetType?: SubnetType;\n\n  /**\n   * Select subnets only in the given AZs.\n   *\n   * @default no filtering on AZs is done\n   */\n  readonly availabilityZones?: string[];\n\n  /**\n   * Select the subnet group with the given name\n   *\n   * Select the subnet group with the given name. This only needs\n   * to be used if you have multiple subnet groups of the same type\n   * and you need to distinguish between them. Otherwise, prefer\n   * `subnetType`.\n   *\n   * This field does not select individual subnets, it selects all subnets that\n   * share the given subnet group name. This is the name supplied in\n   * `subnetConfiguration`.\n   *\n   * At most one of `subnetType` and `subnetGroupName` can be supplied.\n   *\n   * @default - Selection by type instead of by name\n   */\n  readonly subnetGroupName?: string;\n\n  /**\n   * Alias for `subnetGroupName`\n   *\n   * Select the subnet group with the given name. This only needs\n   * to be used if you have multiple subnet groups of the same type\n   * and you need to distinguish between them.\n   *\n   * @deprecated Use `subnetGroupName` instead\n   */\n  readonly subnetName?: string;\n\n  /**\n   * If true, return at most one subnet per AZ\n   *\n   * @default false\n   */\n  readonly onePerAz?: boolean;\n\n  /**\n   * List of provided subnet filters.\n   *\n   * @default - none\n   */\n  readonly subnetFilters?: SubnetFilter[];\n\n  /**\n   * Explicitly select individual subnets\n   *\n   * Use this if you don't want to automatically use all subnets in\n   * a group, but have a need to control selection down to\n   * individual subnets.\n   *\n   * Cannot be specified together with `subnetType` or `subnetGroupName`.\n   *\n   * @default - Use all subnets in a selected group (all private subnets by default)\n   */\n  readonly subnets?: ISubnet[]\n}\n\n/**\n * Result of selecting a subset of subnets from a VPC\n */\nexport interface SelectedSubnets {\n  /**\n   * The subnet IDs\n   */\n  readonly subnetIds: string[];\n\n  /**\n   * The respective AZs of each subnet\n   */\n  readonly availabilityZones: string[];\n\n  /**\n   * Dependency representing internet connectivity for these subnets\n   */\n  readonly internetConnectivityEstablished: IDependable;\n\n  /**\n   * Selected subnet objects\n   */\n  readonly subnets: ISubnet[];\n\n  /**\n   * Whether any of the given subnets are from the VPC's public subnets.\n   */\n  readonly hasPublic: boolean;\n\n  /**\n   * The subnet selection is not actually real yet\n   *\n   * If this value is true, don't validate anything about the subnets. The count\n   * or identities are not known yet, and the validation will most likely fail\n   * which will prevent a successful lookup.\n   *\n   * @default false\n   */\n  readonly isPendingLookup?: boolean;\n}\n\n/**\n * A new or imported VPC\n */\nabstract class VpcBase extends Resource implements IVpc {\n\n  /**\n   * Identifier for this VPC\n   */\n  public abstract readonly vpcId: string;\n\n  /**\n   * Arn of this VPC\n   */\n  public abstract readonly vpcArn: string;\n\n  /**\n   * CIDR range for this VPC\n   */\n  public abstract readonly vpcCidrBlock: string;\n\n  /**\n   * List of public subnets in this VPC\n   */\n  public abstract readonly publicSubnets: ISubnet[];\n\n  /**\n   * List of private subnets in this VPC\n   */\n  public abstract readonly privateSubnets: ISubnet[];\n\n  /**\n   * List of isolated subnets in this VPC\n   */\n  public abstract readonly isolatedSubnets: ISubnet[];\n\n  /**\n   * AZs for this VPC\n   */\n  public abstract readonly availabilityZones: string[];\n\n  /**\n   * Dependencies for internet connectivity\n   */\n  public abstract readonly internetConnectivityEstablished: IDependable;\n\n  /**\n   * Dependencies for NAT connectivity\n   *\n   * @deprecated - This value is no longer used.\n   */\n  protected readonly natDependencies = new Array<IConstruct>();\n\n  /**\n   * If this is set to true, don't error out on trying to select subnets\n   */\n  protected incompleteSubnetDefinition: boolean = false;\n\n  /**\n   * Mutable private field for the vpnGatewayId\n   *\n   * @internal\n   */\n  protected _vpnGatewayId?: string;\n\n  /**\n   * Returns IDs of selected subnets\n   */\n  public selectSubnets(selection: SubnetSelection = {}): SelectedSubnets {\n    const subnets = this.selectSubnetObjects(selection);\n    const pubs = new Set(this.publicSubnets);\n\n    return {\n      subnetIds: subnets.map(s => s.subnetId),\n      get availabilityZones(): string[] { return subnets.map(s => s.availabilityZone); },\n      internetConnectivityEstablished: tap(new CompositeDependable(), d => subnets.forEach(s => d.add(s.internetConnectivityEstablished))),\n      subnets,\n      hasPublic: subnets.some(s => pubs.has(s)),\n      isPendingLookup: this.incompleteSubnetDefinition,\n    };\n  }\n\n  /**\n   * Adds a VPN Gateway to this VPC\n   */\n  public enableVpnGateway(options: EnableVpnGatewayOptions): void {\n    if (this.vpnGatewayId) {\n      throw new Error('The VPN Gateway has already been enabled.');\n    }\n\n    const vpnGateway = new VpnGateway(this, 'VpnGateway', {\n      amazonSideAsn: options.amazonSideAsn,\n      type: VpnConnectionType.IPSEC_1,\n    });\n\n    this._vpnGatewayId = vpnGateway.gatewayId;\n\n    const attachment = new CfnVPCGatewayAttachment(this, 'VPCVPNGW', {\n      vpcId: this.vpcId,\n      vpnGatewayId: this._vpnGatewayId,\n    });\n\n    // Propagate routes on route tables associated with the right subnets\n    const vpnRoutePropagation = options.vpnRoutePropagation ?? [{}];\n    const routeTableIds = allRouteTableIds(flatten(vpnRoutePropagation.map(s => this.selectSubnets(s).subnets)));\n\n    if (routeTableIds.length === 0) {\n      Annotations.of(this).addError(`enableVpnGateway: no subnets matching selection: '${JSON.stringify(vpnRoutePropagation)}'. Select other subnets to add routes to.`);\n    }\n\n    const routePropagation = new CfnVPNGatewayRoutePropagation(this, 'RoutePropagation', {\n      routeTableIds,\n      vpnGatewayId: this._vpnGatewayId,\n    });\n    // The AWS::EC2::VPNGatewayRoutePropagation resource cannot use the VPN gateway\n    // until it has successfully attached to the VPC.\n    // See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-gatewayrouteprop.html\n    routePropagation.node.addDependency(attachment);\n  }\n\n  /**\n   * Adds a new VPN connection to this VPC\n   */\n  public addVpnConnection(id: string, options: VpnConnectionOptions): VpnConnection {\n    return new VpnConnection(this, id, {\n      vpc: this,\n      ...options,\n    });\n  }\n\n  /**\n   * Adds a new client VPN endpoint to this VPC\n   */\n  public addClientVpnEndpoint(id: string, options: ClientVpnEndpointOptions): ClientVpnEndpoint {\n    return new ClientVpnEndpoint(this, id, {\n      ...options,\n      vpc: this,\n    });\n  }\n\n  /**\n   * Adds a new interface endpoint to this VPC\n   */\n  public addInterfaceEndpoint(id: string, options: InterfaceVpcEndpointOptions): InterfaceVpcEndpoint {\n    return new InterfaceVpcEndpoint(this, id, {\n      vpc: this,\n      ...options,\n    });\n  }\n\n  /**\n   * Adds a new gateway endpoint to this VPC\n   */\n  public addGatewayEndpoint(id: string, options: GatewayVpcEndpointOptions): GatewayVpcEndpoint {\n    return new GatewayVpcEndpoint(this, id, {\n      vpc: this,\n      ...options,\n    });\n  }\n\n  /**\n   * Adds a new flow log to this VPC\n   */\n  public addFlowLog(id: string, options?: FlowLogOptions): FlowLog {\n    return new FlowLog(this, id, {\n      resourceType: FlowLogResourceType.fromVpc(this),\n      ...options,\n    });\n  }\n\n  /**\n   * Returns the id of the VPN Gateway (if enabled)\n   */\n  public get vpnGatewayId(): string | undefined {\n    return this._vpnGatewayId;\n  }\n\n  /**\n   * Return the subnets appropriate for the placement strategy\n   */\n  protected selectSubnetObjects(selection: SubnetSelection = {}): ISubnet[] {\n    selection = this.reifySelectionDefaults(selection);\n\n    if (selection.subnets !== undefined) {\n      return selection.subnets;\n    }\n\n    let subnets;\n\n    if (selection.subnetGroupName !== undefined) { // Select by name\n      subnets = this.selectSubnetObjectsByName(selection.subnetGroupName);\n\n    } else { // Or specify by type\n      const type = selection.subnetType || SubnetType.PRIVATE_WITH_NAT;\n      subnets = this.selectSubnetObjectsByType(type);\n    }\n\n    // Apply all the filters\n    subnets = this.applySubnetFilters(subnets, selection.subnetFilters ?? []);\n\n    return subnets;\n  }\n\n  private applySubnetFilters(subnets: ISubnet[], filters: SubnetFilter[]): ISubnet[] {\n    let filtered = subnets;\n    // Apply each filter in sequence\n    for (const filter of filters) {\n      filtered = filter.selectSubnets(filtered);\n    }\n    return filtered;\n  }\n\n  private selectSubnetObjectsByName(groupName: string) {\n    const allSubnets = [...this.publicSubnets, ...this.privateSubnets, ...this.isolatedSubnets];\n    const subnets = allSubnets.filter(s => subnetGroupNameFromConstructId(s) === groupName);\n\n    if (subnets.length === 0 && !this.incompleteSubnetDefinition) {\n      const names = Array.from(new Set(allSubnets.map(subnetGroupNameFromConstructId)));\n      throw new Error(`There are no subnet groups with name '${groupName}' in this VPC. Available names: ${names}`);\n    }\n\n    return subnets;\n  }\n\n  private selectSubnetObjectsByType(subnetType: SubnetType) {\n    const allSubnets = {\n      [SubnetType.PRIVATE_ISOLATED]: this.isolatedSubnets,\n      [SubnetType.PRIVATE_WITH_NAT]: this.privateSubnets,\n      [SubnetType.PUBLIC]: this.publicSubnets,\n    };\n\n    const subnets = allSubnets[subnetType];\n\n    // Force merge conflict here with https://github.com/aws/aws-cdk/pull/4089\n    // see ImportedVpc\n\n    if (subnets.length === 0 && !this.incompleteSubnetDefinition) {\n      const availableTypes = Object.entries(allSubnets).filter(([_, subs]) => subs.length > 0).map(([typeName, _]) => typeName);\n      throw new Error(`There are no '${subnetType}' subnet groups in this VPC. Available types: ${availableTypes}`);\n    }\n\n    return subnets;\n  }\n\n  /**\n   * Validate the fields in a SubnetSelection object, and reify defaults if necessary\n   *\n   * In case of default selection, select the first type of PRIVATE, ISOLATED,\n   * PUBLIC (in that order) that has any subnets.\n   */\n  private reifySelectionDefaults(placement: SubnetSelection): SubnetSelection {\n\n    if (placement.subnetName !== undefined) {\n      if (placement.subnetGroupName !== undefined) {\n        throw new Error('Please use only \\'subnetGroupName\\' (\\'subnetName\\' is deprecated and has the same behavior)');\n      } else {\n        Annotations.of(this).addWarning('Usage of \\'subnetName\\' in SubnetSelection is deprecated, use \\'subnetGroupName\\' instead');\n      }\n      placement = { ...placement, subnetGroupName: placement.subnetName };\n    }\n\n    const exclusiveSelections: Array<keyof SubnetSelection> = ['subnets', 'subnetType', 'subnetGroupName'];\n    const providedSelections = exclusiveSelections.filter(key => placement[key] !== undefined);\n    if (providedSelections.length > 1) {\n      throw new Error(`Only one of '${providedSelections}' can be supplied to subnet selection.`);\n    }\n\n    if (placement.subnetType === undefined && placement.subnetGroupName === undefined && placement.subnets === undefined) {\n      // Return default subnet type based on subnets that actually exist\n      let subnetType = this.privateSubnets.length\n        ? SubnetType.PRIVATE_WITH_NAT : this.isolatedSubnets.length ? SubnetType.PRIVATE_ISOLATED : SubnetType.PUBLIC;\n      placement = { ...placement, subnetType: subnetType };\n    }\n\n    // Establish which subnet filters are going to be used\n    let subnetFilters = placement.subnetFilters ?? [];\n\n    // Backwards compatibility with existing `availabilityZones` and `onePerAz` functionality\n    if (placement.availabilityZones !== undefined) { // Filter by AZs, if specified\n      subnetFilters.push(SubnetFilter.availabilityZones(placement.availabilityZones));\n    }\n    if (!!placement.onePerAz) { // Ensure one per AZ if specified\n      subnetFilters.push(SubnetFilter.onePerAz());\n    }\n\n    // Overwrite the provided placement filters and remove the availabilityZones and onePerAz properties\n    placement = { ...placement, subnetFilters: subnetFilters, availabilityZones: undefined, onePerAz: undefined };\n    const { availabilityZones, onePerAz, ...rest } = placement;\n\n    return rest;\n  }\n}\n\n/**\n * Properties that reference an external Vpc\n */\nexport interface VpcAttributes {\n  /**\n   * VPC's identifier\n   */\n  readonly vpcId: string;\n\n  /**\n   * VPC's CIDR range\n   *\n   * @default - Retrieving the CIDR from the VPC will fail\n   */\n  readonly vpcCidrBlock?: string;\n\n  /**\n   * List of availability zones for the subnets in this VPC.\n   */\n  readonly availabilityZones: string[];\n\n  /**\n   * List of public subnet IDs\n   *\n   * Must be undefined or match the availability zones in length and order.\n   */\n  readonly publicSubnetIds?: string[];\n\n  /**\n   * List of names for the public subnets\n   *\n   * Must be undefined or have a name for every public subnet group.\n   */\n  readonly publicSubnetNames?: string[];\n\n  /**\n   * List of IDs of routing tables for the public subnets.\n   *\n   * Must be undefined or have a name for every public subnet group.\n   */\n  readonly publicSubnetRouteTableIds?: string[];\n\n  /**\n   * List of private subnet IDs\n   *\n   * Must be undefined or match the availability zones in length and order.\n   */\n  readonly privateSubnetIds?: string[];\n\n  /**\n   * List of names for the private subnets\n   *\n   * Must be undefined or have a name for every private subnet group.\n   */\n  readonly privateSubnetNames?: string[];\n\n  /**\n   * List of IDs of routing tables for the private subnets.\n   *\n   * Must be undefined or have a name for every private subnet group.\n   */\n  readonly privateSubnetRouteTableIds?: string[];\n\n  /**\n   * List of isolated subnet IDs\n   *\n   * Must be undefined or match the availability zones in length and order.\n   */\n  readonly isolatedSubnetIds?: string[];\n\n  /**\n   * List of names for the isolated subnets\n   *\n   * Must be undefined or have a name for every isolated subnet group.\n   */\n  readonly isolatedSubnetNames?: string[];\n\n  /**\n   * List of IDs of routing tables for the isolated subnets.\n   *\n   * Must be undefined or have a name for every isolated subnet group.\n   */\n  readonly isolatedSubnetRouteTableIds?: string[];\n\n  /**\n   * VPN gateway's identifier\n   */\n  readonly vpnGatewayId?: string;\n}\n\nexport interface SubnetAttributes {\n\n  /**\n   * The Availability Zone the subnet is located in\n   *\n   * @default - No AZ information, cannot use AZ selection features\n   */\n  readonly availabilityZone?: string;\n\n  /**\n   * The IPv4 CIDR block associated with the subnet\n   *\n   * @default - No CIDR information, cannot use CIDR filter features\n   */\n  readonly ipv4CidrBlock?: string;\n\n  /**\n   * The ID of the route table for this particular subnet\n   *\n   * @default - No route table information, cannot create VPC endpoints\n   */\n  readonly routeTableId?: string;\n\n  /**\n   * The subnetId for this particular subnet\n   */\n  readonly subnetId: string;\n}\n\n/**\n * Name tag constant\n */\nconst NAME_TAG: string = 'Name';\n\n/**\n * Configuration for Vpc\n */\nexport interface VpcProps {\n\n  /**\n   * The CIDR range to use for the VPC, e.g. '10.0.0.0/16'.\n   *\n   * Should be a minimum of /28 and maximum size of /16. The range will be\n   * split across all subnets per Availability Zone.\n   *\n   * @default Vpc.DEFAULT_CIDR_RANGE\n   */\n  readonly cidr?: string;\n\n  /**\n   * Indicates whether the instances launched in the VPC get public DNS hostnames.\n   *\n   * If this attribute is true, instances in the VPC get public DNS hostnames,\n   * but only if the enableDnsSupport attribute is also set to true.\n   *\n   * @default true\n   */\n  readonly enableDnsHostnames?: boolean;\n\n  /**\n   * Indicates whether the DNS resolution is supported for the VPC.\n   *\n   * If this attribute is false, the Amazon-provided DNS server in the VPC that\n   * resolves public DNS hostnames to IP addresses is not enabled. If this\n   * attribute is true, queries to the Amazon provided DNS server at the\n   * 169.254.169.253 IP address, or the reserved IP address at the base of the\n   * VPC IPv4 network range plus two will succeed.\n   *\n   * @default true\n   */\n  readonly enableDnsSupport?: boolean;\n\n  /**\n   * The default tenancy of instances launched into the VPC.\n   *\n   * By setting this to dedicated tenancy, instances will be launched on\n   * hardware dedicated to a single AWS customer, unless specifically specified\n   * at instance launch time. Please note, not all instance types are usable\n   * with Dedicated tenancy.\n   *\n   * @default DefaultInstanceTenancy.Default (shared) tenancy\n   */\n  readonly defaultInstanceTenancy?: DefaultInstanceTenancy;\n\n  /**\n   * Define the maximum number of AZs to use in this region\n   *\n   * If the region has more AZs than you want to use (for example, because of\n   * EIP limits), pick a lower number here. The AZs will be sorted and picked\n   * from the start of the list.\n   *\n   * If you pick a higher number than the number of AZs in the region, all AZs\n   * in the region will be selected. To use \"all AZs\" available to your\n   * account, use a high number (such as 99).\n   *\n   * Be aware that environment-agnostic stacks will be created with access to\n   * only 2 AZs, so to use more than 2 AZs, be sure to specify the account and\n   * region on your stack.\n   *\n   * @default 3\n   */\n  readonly maxAzs?: number;\n\n  /**\n   * The number of NAT Gateways/Instances to create.\n   *\n   * The type of NAT gateway or instance will be determined by the\n   * `natGatewayProvider` parameter.\n   *\n   * You can set this number lower than the number of Availability Zones in your\n   * VPC in order to save on NAT cost. Be aware you may be charged for\n   * cross-AZ data traffic instead.\n   *\n   * @default - One NAT gateway/instance per Availability Zone\n   */\n  readonly natGateways?: number;\n\n  /**\n   * Configures the subnets which will have NAT Gateways/Instances\n   *\n   * You can pick a specific group of subnets by specifying the group name;\n   * the picked subnets must be public subnets.\n   *\n   * Only necessary if you have more than one public subnet group.\n   *\n   * @default - All public subnets.\n   */\n  readonly natGatewaySubnets?: SubnetSelection;\n\n  /**\n   * What type of NAT provider to use\n   *\n   * Select between NAT gateways or NAT instances. NAT gateways\n   * may not be available in all AWS regions.\n   *\n   * @default NatProvider.gateway()\n   *\n   */\n  readonly natGatewayProvider?: NatProvider;\n\n  /**\n   * Configure the subnets to build for each AZ\n   *\n   * Each entry in this list configures a Subnet Group; each group will contain a\n   * subnet for each Availability Zone.\n   *\n   * For example, if you want 1 public subnet, 1 private subnet, and 1 isolated\n   * subnet in each AZ provide the following:\n   *\n   * ```ts\n   * new ec2.Vpc(this, 'VPC', {\n   *   subnetConfiguration: [\n   *      {\n   *        cidrMask: 24,\n   *        name: 'ingress',\n   *        subnetType: ec2.SubnetType.PUBLIC,\n   *      },\n   *      {\n   *        cidrMask: 24,\n   *        name: 'application',\n   *        subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n   *      },\n   *      {\n   *        cidrMask: 28,\n   *        name: 'rds',\n   *        subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n   *      }\n   *   ]\n   * });\n   * ```\n   *\n   * @default - The VPC CIDR will be evenly divided between 1 public and 1\n   * private subnet per AZ.\n   */\n  readonly subnetConfiguration?: SubnetConfiguration[];\n\n  /**\n   * Indicates whether a VPN gateway should be created and attached to this VPC.\n   *\n   * @default - true when vpnGatewayAsn or vpnConnections is specified\n   */\n  readonly vpnGateway?: boolean;\n\n  /**\n   * The private Autonomous System Number (ASN) for the VPN gateway.\n   *\n   * @default - Amazon default ASN.\n   */\n  readonly vpnGatewayAsn?: number;\n\n  /**\n   * VPN connections to this VPC.\n   *\n   * @default - No connections.\n   */\n  readonly vpnConnections?: { [id: string]: VpnConnectionOptions }\n\n  /**\n   * Where to propagate VPN routes.\n   *\n   * @default - On the route tables associated with private subnets. If no\n   * private subnets exists, isolated subnets are used. If no isolated subnets\n   * exists, public subnets are used.\n   */\n  readonly vpnRoutePropagation?: SubnetSelection[]\n\n  /**\n   * Gateway endpoints to add to this VPC.\n   *\n   * @default - None.\n   */\n  readonly gatewayEndpoints?: { [id: string]: GatewayVpcEndpointOptions }\n\n  /**\n   * Flow logs to add to this VPC.\n   *\n   * @default - No flow logs.\n   */\n  readonly flowLogs?: { [id: string]: FlowLogOptions }\n\n  /**\n   * The VPC name.\n   *\n   * Since the VPC resource doesn't support providing a physical name, the value provided here will be recorded in the `Name` tag\n   *\n   * @default this.node.path\n   */\n  readonly vpcName?: string;\n}\n\n/**\n * The default tenancy of instances launched into the VPC.\n */\nexport enum DefaultInstanceTenancy {\n  /**\n   * Instances can be launched with any tenancy.\n   */\n  DEFAULT = 'default',\n\n  /**\n   * Any instance launched into the VPC automatically has dedicated tenancy, unless you launch it with the default tenancy.\n   */\n  DEDICATED = 'dedicated'\n}\n\n/**\n * Specify configuration parameters for a single subnet group in a VPC.\n */\nexport interface SubnetConfiguration {\n  /**\n   * The number of leading 1 bits in the routing mask.\n   *\n   * The number of available IP addresses in each subnet of this group\n   * will be equal to `2^(32 - cidrMask) - 2`.\n   *\n   * Valid values are `16--28`.\n   *\n   * @default - Available IP space is evenly divided across subnets.\n   */\n  readonly cidrMask?: number;\n\n  /**\n   * The type of Subnet to configure.\n   *\n   * The Subnet type will control the ability to route and connect to the\n   * Internet.\n   */\n  readonly subnetType: SubnetType;\n\n  /**\n   * Logical name for the subnet group.\n   *\n   * This name can be used when selecting VPC subnets to distinguish\n   * between different subnet groups of the same type.\n   */\n  readonly name: string;\n\n  /**\n   * Controls if subnet IP space needs to be reserved.\n   *\n   * When true, the IP space for the subnet is reserved but no actual\n   * resources are provisioned. This space is only dependent on the\n   * number of availability zones and on `cidrMask` - all other subnet\n   * properties are ignored.\n   *\n   * @default false\n   */\n  readonly reserved?: boolean;\n\n  /**\n   * Controls if a public IP is associated to an instance at launch\n   *\n   * @default true in Subnet.Public, false in Subnet.Private or Subnet.Isolated.\n   */\n  readonly mapPublicIpOnLaunch?: boolean;\n}\n\n/**\n * Define an AWS Virtual Private Cloud\n *\n * See the package-level documentation of this package for an overview\n * of the various dimensions in which you can configure your VPC.\n *\n * For example:\n *\n * ```ts\n * const vpc = new ec2.Vpc(this, 'TheVPC', {\n *   cidr: \"10.0.0.0/16\"\n * })\n *\n * // Iterate the private subnets\n * const selection = vpc.selectSubnets({\n *   subnetType: ec2.SubnetType.PRIVATE_WITH_NAT\n * });\n *\n * for (const subnet of selection.subnets) {\n *   // ...\n * }\n * ```\n *\n * @resource AWS::EC2::VPC\n */\nexport class Vpc extends VpcBase {\n  /**\n   * The default CIDR range used when creating VPCs.\n   * This can be overridden using VpcProps when creating a VPCNetwork resource.\n   * e.g. new VpcResource(this, { cidr: '192.168.0.0./16' })\n   */\n  public static readonly DEFAULT_CIDR_RANGE: string = '10.0.0.0/16';\n\n  /**\n   * The default subnet configuration\n   *\n   * 1 Public and 1 Private subnet per AZ evenly split\n   */\n  public static readonly DEFAULT_SUBNETS: SubnetConfiguration[] = [\n    {\n      subnetType: SubnetType.PUBLIC,\n      name: defaultSubnetName(SubnetType.PUBLIC),\n    },\n    {\n      subnetType: SubnetType.PRIVATE_WITH_NAT,\n      name: defaultSubnetName(SubnetType.PRIVATE_WITH_NAT),\n    },\n  ];\n\n  /**\n   * The default subnet configuration if natGateways specified to be 0\n   *\n   * 1 Public and 1 Isolated Subnet per AZ evenly split\n   */\n  public static readonly DEFAULT_SUBNETS_NO_NAT: SubnetConfiguration[] = [\n    {\n      subnetType: SubnetType.PUBLIC,\n      name: defaultSubnetName(SubnetType.PUBLIC),\n    },\n    {\n      subnetType: SubnetType.PRIVATE_ISOLATED,\n      name: defaultSubnetName(SubnetType.PRIVATE_ISOLATED),\n    },\n  ];\n\n  /**\n   * Import a VPC by supplying all attributes directly\n   *\n   * NOTE: using `fromVpcAttributes()` with deploy-time parameters (like a `Fn.importValue()` or\n   * `CfnParameter` to represent a list of subnet IDs) sometimes accidentally works. It happens\n   * to work for constructs that need a list of subnets (like `AutoScalingGroup` and `eks.Cluster`)\n   * but it does not work for constructs that need individual subnets (like\n   * `Instance`). See https://github.com/aws/aws-cdk/issues/4118 for more\n   * information.\n   *\n   * Prefer to use `Vpc.fromLookup()` instead.\n   */\n  public static fromVpcAttributes(scope: Construct, id: string, attrs: VpcAttributes): IVpc {\n    return new ImportedVpc(scope, id, attrs, false);\n  }\n\n  /**\n   * Import an existing VPC from by querying the AWS environment this stack is deployed to.\n   *\n   * This function only needs to be used to use VPCs not defined in your CDK\n   * application. If you are looking to share a VPC between stacks, you can\n   * pass the `Vpc` object between stacks and use it as normal.\n   *\n   * Calling this method will lead to a lookup when the CDK CLI is executed.\n   * You can therefore not use any values that will only be available at\n   * CloudFormation execution time (i.e., Tokens).\n   *\n   * The VPC information will be cached in `cdk.context.json` and the same VPC\n   * will be used on future runs. To refresh the lookup, you will have to\n   * evict the value from the cache using the `cdk context` command. See\n   * https://docs.aws.amazon.com/cdk/latest/guide/context.html for more information.\n   */\n  public static fromLookup(scope: Construct, id: string, options: VpcLookupOptions): IVpc {\n    if (Token.isUnresolved(options.vpcId)\n      || Token.isUnresolved(options.vpcName)\n      || Object.values(options.tags || {}).some(Token.isUnresolved)\n      || Object.keys(options.tags || {}).some(Token.isUnresolved)) {\n      throw new Error('All arguments to Vpc.fromLookup() must be concrete (no Tokens)');\n    }\n\n    const filter: {[key: string]: string} = makeTagFilter(options.tags);\n\n    // We give special treatment to some tags\n    if (options.vpcId) { filter['vpc-id'] = options.vpcId; }\n    if (options.vpcName) { filter['tag:Name'] = options.vpcName; }\n    if (options.isDefault !== undefined) {\n      filter.isDefault = options.isDefault ? 'true' : 'false';\n    }\n\n    const overrides: {[key: string]: string} = {};\n    if (options.region) {\n      overrides.region = options.region;\n    }\n\n    const attributes: cxapi.VpcContextResponse = ContextProvider.getValue(scope, {\n      provider: cxschema.ContextProvider.VPC_PROVIDER,\n      props: {\n        ...overrides,\n        filter,\n        returnAsymmetricSubnets: true,\n        subnetGroupNameTag: options.subnetGroupNameTag,\n      } as cxschema.VpcContextQuery,\n      dummyValue: undefined,\n    }).value;\n\n    return new LookedUpVpc(scope, id, attributes || DUMMY_VPC_PROPS, attributes === undefined);\n\n    /**\n     * Prefixes all keys in the argument with `tag:`.`\n     */\n    function makeTagFilter(tags: { [name: string]: string } | undefined): { [name: string]: string } {\n      const result: { [name: string]: string } = {};\n      for (const [name, value] of Object.entries(tags || {})) {\n        result[`tag:${name}`] = value;\n      }\n      return result;\n    }\n  }\n\n  /**\n   * Identifier for this VPC\n   */\n  public readonly vpcId: string;\n\n  /**\n   * @attribute\n   */\n  public readonly vpcArn: string;\n\n  /**\n   * @attribute\n   */\n  public readonly vpcCidrBlock: string;\n\n  /**\n   * @attribute\n   */\n  public readonly vpcDefaultNetworkAcl: string;\n\n  /**\n   * @attribute\n   */\n  public readonly vpcCidrBlockAssociations: string[];\n\n  /**\n   * @attribute\n   */\n  public readonly vpcDefaultSecurityGroup: string;\n\n  /**\n   * @attribute\n   */\n  public readonly vpcIpv6CidrBlocks: string[];\n\n  /**\n   * List of public subnets in this VPC\n   */\n  public readonly publicSubnets: ISubnet[] = [];\n\n  /**\n   * List of private subnets in this VPC\n   */\n  public readonly privateSubnets: ISubnet[] = [];\n\n  /**\n   * List of isolated subnets in this VPC\n   */\n  public readonly isolatedSubnets: ISubnet[] = [];\n\n  /**\n   * AZs for this VPC\n   */\n  public readonly availabilityZones: string[];\n\n  /**\n   * Internet Gateway for the VPC. Note that in case the VPC is configured only\n   * with ISOLATED subnets, this attribute will be `undefined`.\n   */\n  public readonly internetGatewayId?: string;\n\n  public readonly internetConnectivityEstablished: IDependable;\n\n  /**\n   * Indicates if instances launched in this VPC will have public DNS hostnames.\n   */\n  public readonly dnsHostnamesEnabled: boolean;\n\n  /**\n   * Indicates if DNS support is enabled for this VPC.\n   */\n  public readonly dnsSupportEnabled: boolean;\n\n  /**\n   * The VPC resource\n   */\n  private readonly resource: CfnVPC;\n\n  /**\n   * The NetworkBuilder\n   */\n  private networkBuilder: NetworkBuilder;\n\n  /**\n   * Subnet configurations for this VPC\n   */\n  private subnetConfiguration: SubnetConfiguration[] = [];\n\n  private readonly _internetConnectivityEstablished = new DependencyGroup();\n\n  /**\n   * Vpc creates a VPC that spans a whole region.\n   * It will automatically divide the provided VPC CIDR range, and create public and private subnets per Availability Zone.\n   * Network routing for the public subnets will be configured to allow outbound access directly via an Internet Gateway.\n   * Network routing for the private subnets will be configured to allow outbound access via a set of resilient NAT Gateways (one per AZ).\n   */\n  constructor(scope: Construct, id: string, props: VpcProps = {}) {\n    super(scope, id);\n\n    const stack = Stack.of(this);\n\n    // Can't have enabledDnsHostnames without enableDnsSupport\n    if (props.enableDnsHostnames && !props.enableDnsSupport) {\n      throw new Error('To use DNS Hostnames, DNS Support must be enabled, however, it was explicitly disabled.');\n    }\n\n    const cidrBlock = ifUndefined(props.cidr, Vpc.DEFAULT_CIDR_RANGE);\n    if (Token.isUnresolved(cidrBlock)) {\n      throw new Error('\\'cidr\\' property must be a concrete CIDR string, got a Token (we need to parse it for automatic subdivision)');\n    }\n\n    this.networkBuilder = new NetworkBuilder(cidrBlock);\n\n    this.dnsHostnamesEnabled = props.enableDnsHostnames == null ? true : props.enableDnsHostnames;\n    this.dnsSupportEnabled = props.enableDnsSupport == null ? true : props.enableDnsSupport;\n    const instanceTenancy = props.defaultInstanceTenancy || 'default';\n    this.internetConnectivityEstablished = this._internetConnectivityEstablished;\n\n    // Define a VPC using the provided CIDR range\n    this.resource = new CfnVPC(this, 'Resource', {\n      cidrBlock,\n      enableDnsHostnames: this.dnsHostnamesEnabled,\n      enableDnsSupport: this.dnsSupportEnabled,\n      instanceTenancy,\n    });\n\n    this.vpcDefaultNetworkAcl = this.resource.attrDefaultNetworkAcl;\n    this.vpcCidrBlockAssociations = this.resource.attrCidrBlockAssociations;\n    this.vpcCidrBlock = this.resource.attrCidrBlock;\n    this.vpcDefaultSecurityGroup = this.resource.attrDefaultSecurityGroup;\n    this.vpcIpv6CidrBlocks = this.resource.attrIpv6CidrBlocks;\n\n    Tags.of(this).add(NAME_TAG, props.vpcName || this.node.path);\n\n    this.availabilityZones = stack.availabilityZones;\n\n    const maxAZs = props.maxAzs ?? 3;\n    this.availabilityZones = this.availabilityZones.slice(0, maxAZs);\n\n    this.vpcId = this.resource.ref;\n    this.vpcArn = Arn.format({\n      service: 'ec2',\n      resource: 'vpc',\n      resourceName: this.vpcId,\n    }, stack);\n\n    const defaultSubnet = props.natGateways === 0 ? Vpc.DEFAULT_SUBNETS_NO_NAT : Vpc.DEFAULT_SUBNETS;\n    this.subnetConfiguration = ifUndefined(props.subnetConfiguration, defaultSubnet);\n\n    const natGatewayPlacement = props.natGatewaySubnets || { subnetType: SubnetType.PUBLIC };\n    const natGatewayCount = determineNatGatewayCount(props.natGateways, this.subnetConfiguration, this.availabilityZones.length);\n\n    // subnetConfiguration must be set before calling createSubnets\n    this.createSubnets();\n\n    const allowOutbound = this.subnetConfiguration.filter(\n      subnet => (subnet.subnetType !== SubnetType.PRIVATE_ISOLATED)).length > 0;\n\n    // Create an Internet Gateway and attach it if necessary\n    if (allowOutbound) {\n      const igw = new CfnInternetGateway(this, 'IGW', {\n      });\n\n      this.internetGatewayId = igw.ref;\n\n      this._internetConnectivityEstablished.add(igw);\n      const att = new CfnVPCGatewayAttachment(this, 'VPCGW', {\n        internetGatewayId: igw.ref,\n        vpcId: this.resource.ref,\n      });\n\n      (this.publicSubnets as PublicSubnet[]).forEach(publicSubnet => {\n        publicSubnet.addDefaultInternetRoute(igw.ref, att);\n      });\n\n      // if gateways are needed create them\n      if (natGatewayCount > 0) {\n        const provider = props.natGatewayProvider || NatProvider.gateway();\n        this.createNatGateways(provider, natGatewayCount, natGatewayPlacement);\n      }\n    }\n\n    if (props.vpnGateway && this.publicSubnets.length === 0 && this.privateSubnets.length === 0 && this.isolatedSubnets.length === 0) {\n      throw new Error('Can not enable the VPN gateway while the VPC has no subnets at all');\n    }\n\n    if ((props.vpnConnections || props.vpnGatewayAsn) && props.vpnGateway === false) {\n      throw new Error('Cannot specify `vpnConnections` or `vpnGatewayAsn` when `vpnGateway` is set to false.');\n    }\n\n    if (props.vpnGateway || props.vpnConnections || props.vpnGatewayAsn) {\n      this.enableVpnGateway({\n        amazonSideAsn: props.vpnGatewayAsn,\n        type: VpnConnectionType.IPSEC_1,\n        vpnRoutePropagation: props.vpnRoutePropagation,\n      });\n\n      const vpnConnections = props.vpnConnections || {};\n      for (const [connectionId, connection] of Object.entries(vpnConnections)) {\n        this.addVpnConnection(connectionId, connection);\n      }\n    }\n\n    // Allow creation of gateway endpoints on VPC instantiation as those can be\n    // immediately functional without further configuration. This is not the case\n    // for interface endpoints where the security group must be configured.\n    if (props.gatewayEndpoints) {\n      const gatewayEndpoints = props.gatewayEndpoints || {};\n      for (const [endpointId, endpoint] of Object.entries(gatewayEndpoints)) {\n        this.addGatewayEndpoint(endpointId, endpoint);\n      }\n    }\n\n    // Add flow logs to the VPC\n    if (props.flowLogs) {\n      const flowLogs = props.flowLogs || {};\n      for (const [flowLogId, flowLog] of Object.entries(flowLogs)) {\n        this.addFlowLog(flowLogId, flowLog);\n      }\n    }\n  }\n\n  /**\n   * Adds a new S3 gateway endpoint to this VPC\n   *\n   * @deprecated use `addGatewayEndpoint()` instead\n   */\n  public addS3Endpoint(id: string, subnets?: SubnetSelection[]): GatewayVpcEndpoint {\n    return new GatewayVpcEndpoint(this, id, {\n      service: GatewayVpcEndpointAwsService.S3,\n      vpc: this,\n      subnets,\n    });\n  }\n\n  /**\n   * Adds a new DynamoDB gateway endpoint to this VPC\n   *\n   * @deprecated use `addGatewayEndpoint()` instead\n   */\n  public addDynamoDbEndpoint(id: string, subnets?: SubnetSelection[]): GatewayVpcEndpoint {\n    return new GatewayVpcEndpoint(this, id, {\n      service: GatewayVpcEndpointAwsService.DYNAMODB,\n      vpc: this,\n      subnets,\n    });\n  }\n\n  private createNatGateways(provider: NatProvider, natCount: number, placement: SubnetSelection): void {\n    const natSubnets: PublicSubnet[] = this.selectSubnetObjects(placement) as PublicSubnet[];\n    for (const sub of natSubnets) {\n      if (this.publicSubnets.indexOf(sub) === -1) {\n        throw new Error(`natGatewayPlacement ${placement} contains non public subnet ${sub}`);\n      }\n    }\n\n    provider.configureNat({\n      vpc: this,\n      natSubnets: natSubnets.slice(0, natCount),\n      privateSubnets: this.privateSubnets as PrivateSubnet[],\n    });\n  }\n\n  /**\n   * createSubnets creates the subnets specified by the subnet configuration\n   * array or creates the `DEFAULT_SUBNETS` configuration\n   */\n  private createSubnets() {\n    const remainingSpaceSubnets: SubnetConfiguration[] = [];\n\n    for (const subnet of this.subnetConfiguration) {\n      if (subnet.cidrMask === undefined) {\n        remainingSpaceSubnets.push(subnet);\n        continue;\n      }\n      this.createSubnetResources(subnet, subnet.cidrMask);\n    }\n\n    const totalRemaining = remainingSpaceSubnets.length * this.availabilityZones.length;\n    const cidrMaskForRemaining = this.networkBuilder.maskForRemainingSubnets(totalRemaining);\n    for (const subnet of remainingSpaceSubnets) {\n      this.createSubnetResources(subnet, cidrMaskForRemaining);\n    }\n  }\n\n  private createSubnetResources(subnetConfig: SubnetConfiguration, cidrMask: number) {\n    this.availabilityZones.forEach((zone, index) => {\n      if (subnetConfig.reserved === true) {\n        // For reserved subnets, just allocate ip space but do not create any resources\n        this.networkBuilder.addSubnet(cidrMask);\n        return;\n      }\n\n      // mapPublicIpOnLaunch true in Subnet.Public, false in Subnet.Private or Subnet.Isolated.\n      let mapPublicIpOnLaunch = false;\n      if (subnetConfig.subnetType !== SubnetType.PUBLIC && subnetConfig.mapPublicIpOnLaunch !== undefined) {\n        throw new Error(`${subnetConfig.subnetType} subnet cannot include mapPublicIpOnLaunch parameter`);\n      }\n      if (subnetConfig.subnetType === SubnetType.PUBLIC) {\n        mapPublicIpOnLaunch = (subnetConfig.mapPublicIpOnLaunch !== undefined)\n          ? subnetConfig.mapPublicIpOnLaunch\n          : true;\n      }\n\n      const name = subnetId(subnetConfig.name, index);\n      const subnetProps: SubnetProps = {\n        availabilityZone: zone,\n        vpcId: this.vpcId,\n        cidrBlock: this.networkBuilder.addSubnet(cidrMask),\n        mapPublicIpOnLaunch: mapPublicIpOnLaunch,\n      };\n\n      let subnet: Subnet;\n      switch (subnetConfig.subnetType) {\n        case SubnetType.PUBLIC:\n          const publicSubnet = new PublicSubnet(this, name, subnetProps);\n          this.publicSubnets.push(publicSubnet);\n          subnet = publicSubnet;\n          break;\n        case SubnetType.PRIVATE_WITH_NAT:\n          const privateSubnet = new PrivateSubnet(this, name, subnetProps);\n          this.privateSubnets.push(privateSubnet);\n          subnet = privateSubnet;\n          break;\n        case SubnetType.PRIVATE_ISOLATED:\n          const isolatedSubnet = new PrivateSubnet(this, name, subnetProps);\n          this.isolatedSubnets.push(isolatedSubnet);\n          subnet = isolatedSubnet;\n          break;\n        default:\n          throw new Error(`Unrecognized subnet type: ${subnetConfig.subnetType}`);\n      }\n\n      // These values will be used to recover the config upon provider import\n      const includeResourceTypes = [CfnSubnet.CFN_RESOURCE_TYPE_NAME];\n      Tags.of(subnet).add(SUBNETNAME_TAG, subnetConfig.name, { includeResourceTypes });\n      Tags.of(subnet).add(SUBNETTYPE_TAG, subnetTypeTagValue(subnetConfig.subnetType), { includeResourceTypes });\n    });\n  }\n}\n\nconst SUBNETTYPE_TAG = 'aws-cdk:subnet-type';\nconst SUBNETNAME_TAG = 'aws-cdk:subnet-name';\n\nfunction subnetTypeTagValue(type: SubnetType) {\n  switch (type) {\n    case SubnetType.PUBLIC: return 'Public';\n    case SubnetType.PRIVATE_WITH_NAT: return 'Private';\n    case SubnetType.PRIVATE_ISOLATED: return 'Isolated';\n  }\n}\n\n/**\n * Specify configuration parameters for a VPC subnet\n */\nexport interface SubnetProps {\n\n  /**\n   * The availability zone for the subnet\n   */\n  readonly availabilityZone: string;\n\n  /**\n   * The VPC which this subnet is part of\n   */\n  readonly vpcId: string;\n\n  /**\n   * The CIDR notation for this subnet\n   */\n  readonly cidrBlock: string;\n\n  /**\n   * Controls if a public IP is associated to an instance at launch\n   *\n   * @default true in Subnet.Public, false in Subnet.Private or Subnet.Isolated.\n   */\n  readonly mapPublicIpOnLaunch?: boolean;\n}\n\n/**\n * Represents a new VPC subnet resource\n *\n * @resource AWS::EC2::Subnet\n */\nexport class Subnet extends Resource implements ISubnet {\n\n  public static isVpcSubnet(x: any): x is Subnet {\n    return VPC_SUBNET_SYMBOL in x;\n  }\n\n  public static fromSubnetAttributes(scope: Construct, id: string, attrs: SubnetAttributes): ISubnet {\n    return new ImportedSubnet(scope, id, attrs);\n  }\n\n  /**\n   * Import existing subnet from id.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  public static fromSubnetId(scope: Construct, id: string, subnetId: string): ISubnet {\n    return this.fromSubnetAttributes(scope, id, { subnetId });\n  }\n\n  /**\n   * The Availability Zone the subnet is located in\n   */\n  public readonly availabilityZone: string;\n\n  /**\n   * @attribute\n   */\n  public readonly ipv4CidrBlock: string;\n\n  /**\n   * The subnetId for this particular subnet\n   */\n  public readonly subnetId: string;\n\n  /**\n   * @attribute\n   */\n  public readonly subnetVpcId: string;\n\n  /**\n   * @attribute\n   */\n  public readonly subnetAvailabilityZone: string;\n\n  /**\n   * @attribute\n   */\n  public readonly subnetIpv6CidrBlocks: string[];\n\n  /**\n   * The Amazon Resource Name (ARN) of the Outpost for this subnet (if one exists).\n   * @attribute\n   */\n  public readonly subnetOutpostArn: string;\n\n  /**\n   * @attribute\n   */\n  public readonly subnetNetworkAclAssociationId: string;\n\n  /**\n   * Parts of this VPC subnet\n   */\n  public readonly dependencyElements: IDependable[] = [];\n\n  /**\n   * The routeTableId attached to this subnet.\n   */\n  public readonly routeTable: IRouteTable;\n\n  public readonly internetConnectivityEstablished: IDependable;\n\n  private readonly _internetConnectivityEstablished = new DependencyGroup();\n\n  private _networkAcl: INetworkAcl;\n\n  constructor(scope: Construct, id: string, props: SubnetProps) {\n    super(scope, id);\n\n    Object.defineProperty(this, VPC_SUBNET_SYMBOL, { value: true });\n\n    Tags.of(this).add(NAME_TAG, this.node.path);\n\n    this.availabilityZone = props.availabilityZone;\n    this.ipv4CidrBlock = props.cidrBlock;\n    const subnet = new CfnSubnet(this, 'Subnet', {\n      vpcId: props.vpcId,\n      cidrBlock: props.cidrBlock,\n      availabilityZone: props.availabilityZone,\n      mapPublicIpOnLaunch: props.mapPublicIpOnLaunch,\n    });\n    this.subnetId = subnet.ref;\n    this.subnetVpcId = subnet.attrVpcId;\n    this.subnetAvailabilityZone = subnet.attrAvailabilityZone;\n    this.subnetIpv6CidrBlocks = subnet.attrIpv6CidrBlocks;\n    this.subnetOutpostArn = subnet.attrOutpostArn;\n\n    // subnet.attrNetworkAclAssociationId is the default ACL after the subnet\n    // was just created. However, the ACL can be replaced at a later time.\n    this._networkAcl = NetworkAcl.fromNetworkAclId(this, 'Acl', subnet.attrNetworkAclAssociationId);\n    this.subnetNetworkAclAssociationId = Lazy.string({ produce: () => this._networkAcl.networkAclId });\n    this.node.defaultChild = subnet;\n\n    const table = new CfnRouteTable(this, 'RouteTable', {\n      vpcId: props.vpcId,\n    });\n    this.routeTable = { routeTableId: table.ref };\n\n    // Associate the public route table for this subnet, to this subnet\n    new CfnSubnetRouteTableAssociation(this, 'RouteTableAssociation', {\n      subnetId: this.subnetId,\n      routeTableId: table.ref,\n    });\n\n    this.internetConnectivityEstablished = this._internetConnectivityEstablished;\n  }\n\n  /**\n   * Create a default route that points to a passed IGW, with a dependency\n   * on the IGW's attachment to the VPC.\n   *\n   * @param gatewayId the logical ID (ref) of the gateway attached to your VPC\n   * @param gatewayAttachment the gateway attachment construct to be added as a dependency\n   */\n  public addDefaultInternetRoute(gatewayId: string, gatewayAttachment: IDependable) {\n    const route = new CfnRoute(this, 'DefaultRoute', {\n      routeTableId: this.routeTable.routeTableId,\n      destinationCidrBlock: '0.0.0.0/0',\n      gatewayId,\n    });\n    route.node.addDependency(gatewayAttachment);\n\n    // Since the 'route' depends on the gateway attachment, just\n    // depending on the route is enough.\n    this._internetConnectivityEstablished.add(route);\n  }\n\n  /**\n   * Network ACL associated with this Subnet\n   *\n   * Upon creation, this is the default ACL which allows all traffic, except\n   * explicit DENY entries that you add.\n   *\n   * You can replace it with a custom ACL which denies all traffic except\n   * the explicit ALLOW entries that you add by creating a `NetworkAcl`\n   * object and calling `associateNetworkAcl()`.\n   */\n  public get networkAcl(): INetworkAcl {\n    return this._networkAcl;\n  }\n\n  /**\n   * Adds an entry to this subnets route table that points to the passed NATGatewayId\n   * @param natGatewayId The ID of the NAT gateway\n   */\n  public addDefaultNatRoute(natGatewayId: string) {\n    this.addRoute('DefaultRoute', {\n      routerType: RouterType.NAT_GATEWAY,\n      routerId: natGatewayId,\n      enablesInternetConnectivity: true,\n    });\n  }\n\n  /**\n   * Adds an entry to this subnets route table\n   */\n  public addRoute(id: string, options: AddRouteOptions) {\n    if (options.destinationCidrBlock && options.destinationIpv6CidrBlock) {\n      throw new Error('Cannot specify both \\'destinationCidrBlock\\' and \\'destinationIpv6CidrBlock\\'');\n    }\n\n    const route = new CfnRoute(this, id, {\n      routeTableId: this.routeTable.routeTableId,\n      destinationCidrBlock: options.destinationCidrBlock || (options.destinationIpv6CidrBlock === undefined ? '0.0.0.0/0' : undefined),\n      destinationIpv6CidrBlock: options.destinationIpv6CidrBlock,\n      [routerTypeToPropName(options.routerType)]: options.routerId,\n    });\n\n    if (options.enablesInternetConnectivity) {\n      this._internetConnectivityEstablished.add(route);\n    }\n  }\n\n  public associateNetworkAcl(id: string, networkAcl: INetworkAcl) {\n    this._networkAcl = networkAcl;\n\n    const scope = networkAcl instanceof Construct ? networkAcl : this;\n    const other = networkAcl instanceof Construct ? this : networkAcl;\n    new SubnetNetworkAclAssociation(scope, id + Names.nodeUniqueId(other.node), {\n      networkAcl,\n      subnet: this,\n    });\n  }\n}\n\n/**\n * Options for adding a new route to a subnet\n */\nexport interface AddRouteOptions {\n  /**\n   * IPv4 range this route applies to\n   *\n   * @default '0.0.0.0/0'\n   */\n  readonly destinationCidrBlock?: string;\n\n  /**\n   * IPv6 range this route applies to\n   *\n   * @default - Uses IPv6\n   */\n  readonly destinationIpv6CidrBlock?: string;\n\n  /**\n   * What type of router to route this traffic to\n   */\n  readonly routerType: RouterType;\n\n  /**\n   * The ID of the router\n   *\n   * Can be an instance ID, gateway ID, etc, depending on the router type.\n   */\n  readonly routerId: string;\n\n  /**\n   * Whether this route will enable internet connectivity\n   *\n   * If true, this route will be added before any AWS resources that depend\n   * on internet connectivity in the VPC will be created.\n   *\n   * @default false\n   */\n  readonly enablesInternetConnectivity?: boolean;\n}\n\n/**\n * Type of router used in route\n */\nexport enum RouterType {\n  /**\n   * Egress-only Internet Gateway\n   */\n  EGRESS_ONLY_INTERNET_GATEWAY = 'EgressOnlyInternetGateway',\n\n  /**\n   * Internet Gateway\n   */\n  GATEWAY = 'Gateway',\n\n  /**\n   * Instance\n   */\n  INSTANCE = 'Instance',\n\n  /**\n   * NAT Gateway\n   */\n  NAT_GATEWAY = 'NatGateway',\n\n  /**\n   * Network Interface\n   */\n  NETWORK_INTERFACE = 'NetworkInterface',\n\n  /**\n   * VPC peering connection\n   */\n  VPC_PEERING_CONNECTION = 'VpcPeeringConnection',\n}\n\nfunction routerTypeToPropName(routerType: RouterType) {\n  return ({\n    [RouterType.EGRESS_ONLY_INTERNET_GATEWAY]: 'egressOnlyInternetGatewayId',\n    [RouterType.GATEWAY]: 'gatewayId',\n    [RouterType.INSTANCE]: 'instanceId',\n    [RouterType.NAT_GATEWAY]: 'natGatewayId',\n    [RouterType.NETWORK_INTERFACE]: 'networkInterfaceId',\n    [RouterType.VPC_PEERING_CONNECTION]: 'vpcPeeringConnectionId',\n  })[routerType];\n}\n\nexport interface PublicSubnetProps extends SubnetProps {\n\n}\n\nexport interface IPublicSubnet extends ISubnet { }\n\nexport interface PublicSubnetAttributes extends SubnetAttributes { }\n\n/**\n * Represents a public VPC subnet resource\n */\nexport class PublicSubnet extends Subnet implements IPublicSubnet {\n\n  public static fromPublicSubnetAttributes(scope: Construct, id: string, attrs: PublicSubnetAttributes): IPublicSubnet {\n    return new ImportedSubnet(scope, id, attrs);\n  }\n\n  constructor(scope: Construct, id: string, props: PublicSubnetProps) {\n    super(scope, id, props);\n  }\n\n  /**\n   * Creates a new managed NAT gateway attached to this public subnet.\n   * Also adds the EIP for the managed NAT.\n   * @returns A ref to the the NAT Gateway ID\n   */\n  public addNatGateway(eipAllocationId?: string) {\n    // Create a NAT Gateway in this public subnet\n    const ngw = new CfnNatGateway(this, 'NATGateway', {\n      subnetId: this.subnetId,\n      allocationId: eipAllocationId ?? new CfnEIP(this, 'EIP', {\n        domain: 'vpc',\n      }).attrAllocationId,\n    });\n    return ngw;\n  }\n}\n\nexport interface PrivateSubnetProps extends SubnetProps {\n\n}\n\nexport interface IPrivateSubnet extends ISubnet { }\n\nexport interface PrivateSubnetAttributes extends SubnetAttributes { }\n\n/**\n * Represents a private VPC subnet resource\n */\nexport class PrivateSubnet extends Subnet implements IPrivateSubnet {\n\n  public static fromPrivateSubnetAttributes(scope: Construct, id: string, attrs: PrivateSubnetAttributes): IPrivateSubnet {\n    return new ImportedSubnet(scope, id, attrs);\n  }\n\n  constructor(scope: Construct, id: string, props: PrivateSubnetProps) {\n    super(scope, id, props);\n  }\n}\n\nfunction ifUndefined<T>(value: T | undefined, defaultValue: T): T {\n  return value ?? defaultValue;\n}\n\nclass ImportedVpc extends VpcBase {\n  public readonly vpcId: string;\n  public readonly vpcArn: string;\n  public readonly publicSubnets: ISubnet[];\n  public readonly privateSubnets: ISubnet[];\n  public readonly isolatedSubnets: ISubnet[];\n  public readonly availabilityZones: string[];\n  public readonly internetConnectivityEstablished: IDependable = new DependencyGroup();\n  private readonly cidr?: string | undefined;\n\n  constructor(scope: Construct, id: string, props: VpcAttributes, isIncomplete: boolean) {\n    super(scope, id);\n\n    this.vpcId = props.vpcId;\n    this.vpcArn = Arn.format({\n      service: 'ec2',\n      resource: 'vpc',\n      resourceName: this.vpcId,\n    }, Stack.of(this));\n    this.cidr = props.vpcCidrBlock;\n    this.availabilityZones = props.availabilityZones;\n    this._vpnGatewayId = props.vpnGatewayId;\n    this.incompleteSubnetDefinition = isIncomplete;\n\n    // None of the values may be unresolved list tokens\n    for (const k of Object.keys(props) as Array<keyof VpcAttributes>) {\n      if (Array.isArray(props[k]) && Token.isUnresolved(props[k])) {\n        Annotations.of(this).addWarning(`fromVpcAttributes: '${k}' is a list token: the imported VPC will not work with constructs that require a list of subnets at synthesis time. Use 'Vpc.fromLookup()' or 'Fn.importListValue' instead.`);\n      }\n    }\n\n    /* eslint-disable max-len */\n    const pub = new ImportSubnetGroup(props.publicSubnetIds, props.publicSubnetNames, props.publicSubnetRouteTableIds, SubnetType.PUBLIC, this.availabilityZones, 'publicSubnetIds', 'publicSubnetNames', 'publicSubnetRouteTableIds');\n    const priv = new ImportSubnetGroup(props.privateSubnetIds, props.privateSubnetNames, props.privateSubnetRouteTableIds, SubnetType.PRIVATE_WITH_NAT, this.availabilityZones, 'privateSubnetIds', 'privateSubnetNames', 'privateSubnetRouteTableIds');\n    const iso = new ImportSubnetGroup(props.isolatedSubnetIds, props.isolatedSubnetNames, props.isolatedSubnetRouteTableIds, SubnetType.PRIVATE_ISOLATED, this.availabilityZones, 'isolatedSubnetIds', 'isolatedSubnetNames', 'isolatedSubnetRouteTableIds');\n    /* eslint-enable max-len */\n\n    this.publicSubnets = pub.import(this);\n    this.privateSubnets = priv.import(this);\n    this.isolatedSubnets = iso.import(this);\n  }\n\n  public get vpcCidrBlock(): string {\n    if (this.cidr === undefined) {\n      throw new Error('Cannot perform this operation: \\'vpcCidrBlock\\' was not supplied when creating this VPC');\n    }\n    return this.cidr;\n  }\n}\n\nclass LookedUpVpc extends VpcBase {\n  public readonly vpcId: string;\n  public readonly vpcArn: string;\n  public readonly internetConnectivityEstablished: IDependable = new DependencyGroup();\n  public readonly availabilityZones: string[];\n  public readonly publicSubnets: ISubnet[];\n  public readonly privateSubnets: ISubnet[];\n  public readonly isolatedSubnets: ISubnet[];\n  private readonly cidr?: string | undefined;\n\n  constructor(scope: Construct, id: string, props: cxapi.VpcContextResponse, isIncomplete: boolean) {\n    super(scope, id);\n\n    this.vpcId = props.vpcId;\n    this.vpcArn = Arn.format({\n      service: 'ec2',\n      resource: 'vpc',\n      resourceName: this.vpcId,\n    }, Stack.of(this));\n    this.cidr = props.vpcCidrBlock;\n    this._vpnGatewayId = props.vpnGatewayId;\n    this.incompleteSubnetDefinition = isIncomplete;\n\n    const subnetGroups = props.subnetGroups || [];\n    const availabilityZones = Array.from(new Set<string>(flatMap(subnetGroups, subnetGroup => {\n      return subnetGroup.subnets.map(subnet => subnet.availabilityZone);\n    })));\n    availabilityZones.sort((az1, az2) => az1.localeCompare(az2));\n    this.availabilityZones = availabilityZones;\n\n    this.publicSubnets = this.extractSubnetsOfType(subnetGroups, cxapi.VpcSubnetGroupType.PUBLIC);\n    this.privateSubnets = this.extractSubnetsOfType(subnetGroups, cxapi.VpcSubnetGroupType.PRIVATE);\n    this.isolatedSubnets = this.extractSubnetsOfType(subnetGroups, cxapi.VpcSubnetGroupType.ISOLATED);\n  }\n\n  public get vpcCidrBlock(): string {\n    if (this.cidr === undefined) {\n      // Value might be cached from an old CLI version, so bumping the CX API protocol to\n      // force the value to exist would not have helped.\n      throw new Error('Cannot perform this operation: \\'vpcCidrBlock\\' was not found when looking up this VPC. Use a newer version of the CDK CLI and clear the old context value.');\n    }\n    return this.cidr;\n  }\n\n  private extractSubnetsOfType(subnetGroups: cxapi.VpcSubnetGroup[], subnetGroupType: cxapi.VpcSubnetGroupType): ISubnet[] {\n    return flatMap(subnetGroups.filter(subnetGroup => subnetGroup.type === subnetGroupType),\n      subnetGroup => this.subnetGroupToSubnets(subnetGroup));\n  }\n\n  private subnetGroupToSubnets(subnetGroup: cxapi.VpcSubnetGroup): ISubnet[] {\n    const ret = new Array<ISubnet>();\n    for (let i = 0; i < subnetGroup.subnets.length; i++) {\n      const vpcSubnet = subnetGroup.subnets[i];\n      ret.push(Subnet.fromSubnetAttributes(this, `${subnetGroup.name}Subnet${i + 1}`, {\n        availabilityZone: vpcSubnet.availabilityZone,\n        subnetId: vpcSubnet.subnetId,\n        routeTableId: vpcSubnet.routeTableId,\n        ipv4CidrBlock: vpcSubnet.cidr,\n      }));\n    }\n    return ret;\n  }\n}\n\nfunction flatMap<T, U>(xs: T[], fn: (x: T) => U[]): U[] {\n  const ret = new Array<U>();\n  for (const x of xs) {\n    ret.push(...fn(x));\n  }\n  return ret;\n}\n\nclass CompositeDependable implements IDependable {\n  private readonly dependables = new Array<IDependable>();\n\n  constructor() {\n    const self = this;\n    Dependable.implement(this, {\n      get dependencyRoots() {\n        const ret = new Array<IConstruct>();\n        for (const dep of self.dependables) {\n          ret.push(...Dependable.of(dep).dependencyRoots);\n        }\n        return ret;\n      },\n    });\n  }\n\n  /**\n   * Add a construct to the dependency roots\n   */\n  public add(dep: IDependable) {\n    this.dependables.push(dep);\n  }\n}\n\n/**\n * Invoke a function on a value (for its side effect) and return the value\n */\nfunction tap<T>(x: T, fn: (x: T) => void): T {\n  fn(x);\n  return x;\n}\n\nclass ImportedSubnet extends Resource implements ISubnet, IPublicSubnet, IPrivateSubnet {\n  public readonly internetConnectivityEstablished: IDependable = new DependencyGroup();\n  public readonly subnetId: string;\n  public readonly routeTable: IRouteTable;\n  private readonly _availabilityZone?: string;\n  private readonly _ipv4CidrBlock?: string;\n\n  constructor(scope: Construct, id: string, attrs: SubnetAttributes) {\n    super(scope, id);\n\n    if (!attrs.routeTableId) {\n      // The following looks a little weird, but comes down to:\n      //\n      // * Is the subnetId itself unresolved ({ Ref: Subnet }); or\n      // * Was it the accidentally extracted first element of a list-encoded\n      //   token? ({ Fn::ImportValue: Subnets } => ['#{Token[1234]}'] =>\n      //   '#{Token[1234]}'\n      //\n      // There's no other API to test for the second case than to the string back into\n      // a list and see if the combination is Unresolved.\n      //\n      // In both cases we can't output the subnetId literally into the metadata (because it'll\n      // be useless). In the 2nd case even, if we output it to metadata, the `resolve()` call\n      // that gets done on the metadata will even `throw`, because the '#{Token}' value will\n      // occur in an illegal position (not in a list context).\n      const ref = Token.isUnresolved(attrs.subnetId) || Token.isUnresolved([attrs.subnetId])\n        ? `at '${Node.of(scope).path}/${id}'`\n        : `'${attrs.subnetId}'`;\n      // eslint-disable-next-line max-len\n      Annotations.of(this).addWarning(`No routeTableId was provided to the subnet ${ref}. Attempting to read its .routeTable.routeTableId will return null/undefined. (More info: https://github.com/aws/aws-cdk/pull/3171)`);\n    }\n\n    this._ipv4CidrBlock = attrs.ipv4CidrBlock;\n    this._availabilityZone = attrs.availabilityZone;\n    this.subnetId = attrs.subnetId;\n    this.routeTable = {\n      // Forcing routeTableId to pretend non-null to maintain backwards-compatibility. See https://github.com/aws/aws-cdk/pull/3171\n      routeTableId: attrs.routeTableId!,\n    };\n  }\n\n  public get availabilityZone(): string {\n    if (!this._availabilityZone) {\n      // eslint-disable-next-line max-len\n      throw new Error('You cannot reference a Subnet\\'s availability zone if it was not supplied. Add the availabilityZone when importing using Subnet.fromSubnetAttributes()');\n    }\n    return this._availabilityZone;\n  }\n\n  public get ipv4CidrBlock(): string {\n    if (!this._ipv4CidrBlock) {\n      // tslint:disable-next-line: max-line-length\n      throw new Error('You cannot reference an imported Subnet\\'s IPv4 CIDR if it was not supplied. Add the ipv4CidrBlock when importing using Subnet.fromSubnetAttributes()');\n    }\n    return this._ipv4CidrBlock;\n  }\n\n  public associateNetworkAcl(id: string, networkAcl: INetworkAcl): void {\n    const scope = networkAcl instanceof Construct ? networkAcl : this;\n    const other = networkAcl instanceof Construct ? this : networkAcl;\n    new SubnetNetworkAclAssociation(scope, id + Names.nodeUniqueId(other.node), {\n      networkAcl,\n      subnet: this,\n    });\n  }\n}\n\n/**\n * Determine (and validate) the NAT gateway count w.r.t. the rest of the subnet configuration\n *\n * We have the following requirements:\n *\n * - NatGatewayCount = 0 ==> there are no private subnets\n * - NatGatewayCount > 0 ==> there must be public subnets\n *\n * Do we want to require that there are private subnets if there are NatGateways?\n * They seem pointless but I see no reason to prevent it.\n */\nfunction determineNatGatewayCount(requestedCount: number | undefined, subnetConfig: SubnetConfiguration[], azCount: number) {\n  const hasPrivateSubnets = subnetConfig.some(c => c.subnetType === SubnetType.PRIVATE_WITH_NAT && !c.reserved);\n  const hasPublicSubnets = subnetConfig.some(c => c.subnetType === SubnetType.PUBLIC);\n\n  const count = requestedCount !== undefined ? Math.min(requestedCount, azCount) : (hasPrivateSubnets ? azCount : 0);\n\n  if (count === 0 && hasPrivateSubnets) {\n    // eslint-disable-next-line max-len\n    throw new Error('If you do not want NAT gateways (natGateways=0), make sure you don\\'t configure any PRIVATE subnets in \\'subnetConfiguration\\' (make them PUBLIC or ISOLATED instead)');\n  }\n\n  if (count > 0 && !hasPublicSubnets) {\n    // eslint-disable-next-line max-len\n    throw new Error(`If you configure PRIVATE subnets in 'subnetConfiguration', you must also configure PUBLIC subnets to put the NAT gateways into (got ${JSON.stringify(subnetConfig)}.`);\n  }\n\n  return count;\n}\n\n/**\n * There are returned when the provider has not supplied props yet\n *\n * It's only used for testing and on the first run-through.\n */\nconst DUMMY_VPC_PROPS: cxapi.VpcContextResponse = {\n  availabilityZones: [],\n  vpcCidrBlock: '1.2.3.4/5',\n  isolatedSubnetIds: undefined,\n  isolatedSubnetNames: undefined,\n  isolatedSubnetRouteTableIds: undefined,\n  privateSubnetIds: undefined,\n  privateSubnetNames: undefined,\n  privateSubnetRouteTableIds: undefined,\n  publicSubnetIds: undefined,\n  publicSubnetNames: undefined,\n  publicSubnetRouteTableIds: undefined,\n  subnetGroups: [\n    {\n      name: 'Public',\n      type: cxapi.VpcSubnetGroupType.PUBLIC,\n      subnets: [\n        {\n          availabilityZone: 'dummy1a',\n          subnetId: 's-12345',\n          routeTableId: 'rtb-12345s',\n          cidr: '1.2.3.4/5',\n        },\n        {\n          availabilityZone: 'dummy1b',\n          subnetId: 's-67890',\n          routeTableId: 'rtb-67890s',\n          cidr: '1.2.3.4/5',\n        },\n      ],\n    },\n    {\n      name: 'Private',\n      type: cxapi.VpcSubnetGroupType.PRIVATE,\n      subnets: [\n        {\n          availabilityZone: 'dummy1a',\n          subnetId: 'p-12345',\n          routeTableId: 'rtb-12345p',\n          cidr: '1.2.3.4/5',\n        },\n        {\n          availabilityZone: 'dummy1b',\n          subnetId: 'p-67890',\n          routeTableId: 'rtb-57890p',\n          cidr: '1.2.3.4/5',\n        },\n      ],\n    },\n    {\n      name: 'Isolated',\n      type: cxapi.VpcSubnetGroupType.ISOLATED,\n      subnets: [\n        {\n          availabilityZone: 'dummy1a',\n          subnetId: 'p-12345',\n          routeTableId: 'rtb-12345p',\n          cidr: '1.2.3.4/5',\n        },\n        {\n          availabilityZone: 'dummy1b',\n          subnetId: 'p-67890',\n          routeTableId: 'rtb-57890p',\n          cidr: '1.2.3.4/5',\n        },\n      ],\n    },\n  ],\n  vpcId: 'vpc-12345',\n};\n"],
  "mappings": "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",
  "names": []
}
