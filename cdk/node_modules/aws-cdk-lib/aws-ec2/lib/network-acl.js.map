{
  "version": 3,
  "sources": ["network-acl.ts"],
  "sourcesContent": ["import { IResource, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnNetworkAcl, CfnNetworkAclEntry, CfnSubnetNetworkAclAssociation } from './ec2.generated';\nimport { AclCidr, AclTraffic } from './network-acl-types';\nimport { ISubnet, IVpc, SubnetSelection } from './vpc';\n\n/**\n * A NetworkAcl\n *\n *\n */\nexport interface INetworkAcl extends IResource {\n  /**\n   * ID for the current Network ACL\n   * @attribute\n   */\n  readonly networkAclId: string;\n\n  /**\n   * Add a new entry to the ACL\n   */\n  addEntry(id: string, options: CommonNetworkAclEntryOptions): NetworkAclEntry;\n}\n\n/**\n * A NetworkAclBase that is not created in this template\n *\n *\n */\nabstract class NetworkAclBase extends Resource implements INetworkAcl {\n  public abstract readonly networkAclId: string;\n\n  /**\n   * Add a new entry to the ACL\n   */\n  public addEntry(id: string, options: CommonNetworkAclEntryOptions): NetworkAclEntry {\n    return new NetworkAclEntry(this, id, {\n      networkAcl: this,\n      ...options,\n    });\n  }\n\n}\n\n/**\n * Properties to create NetworkAcl\n *\n *\n */\nexport interface NetworkAclProps {\n  /**\n   * The name of the NetworkAcl.\n   *\n   * It is not recommended to use an explicit name.\n   *\n   * @default If you don't specify a networkAclName, AWS CloudFormation generates a\n   * unique physical ID and uses that ID for the group name.\n   */\n  readonly networkAclName?: string;\n\n  /**\n   * The VPC in which to create the NetworkACL.\n   */\n  readonly vpc: IVpc;\n\n  /**\n   * Subnets in the given VPC to associate the ACL with\n   *\n   * More subnets can always be added later by calling\n   * `associateWithSubnets()`.\n   *\n   * @default - No subnets associated\n   */\n  readonly subnetSelection?: SubnetSelection;\n}\n\n/**\n * Define a new custom network ACL\n *\n * By default, will deny all inbound and outbound traffic unless entries are\n * added explicitly allowing it.\n *\n *\n */\nexport class NetworkAcl extends NetworkAclBase {\n  /**\n   * Import an existing NetworkAcl into this app.\n   */\n  public static fromNetworkAclId(scope: Construct, id: string, networkAclId: string): INetworkAcl {\n    class Import extends NetworkAclBase {\n      public readonly networkAclId = networkAclId;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The ID of the NetworkACL\n   *\n   * @attribute\n   */\n  public readonly networkAclId: string;\n\n  /**\n   * The VPC ID for this NetworkACL\n   *\n   * @attribute\n   */\n  public readonly networkAclVpcId: string;\n\n  private readonly networkAcl: CfnNetworkAcl;\n  private readonly vpc: IVpc;\n\n  constructor(scope: Construct, id: string, props: NetworkAclProps) {\n    super(scope, id, {\n      physicalName: props.networkAclName,\n    });\n\n    this.vpc = props.vpc;\n\n    this.networkAcl = new CfnNetworkAcl(this, 'Resource', {\n      vpcId: props.vpc.vpcId,\n    });\n\n    this.networkAclId = this.networkAcl.ref;\n    this.networkAclVpcId = this.networkAcl.vpcId;\n\n    if (props.subnetSelection !== undefined) {\n      this.associateWithSubnet('DefaultAssociation', props.subnetSelection);\n    }\n  }\n\n  /**\n   * Associate the ACL with a given set of subnets\n   */\n  public associateWithSubnet(id: string, selection: SubnetSelection) {\n    const subnets = this.vpc.selectSubnets(selection);\n    for (const subnet of subnets.subnets) {\n      subnet.associateNetworkAcl(id, this);\n    }\n  }\n}\n\n/**\n * What action to apply to traffic matching the ACL\n *\n *\n */\nexport enum Action {\n  /**\n   * Allow the traffic\n   */\n  ALLOW = 'allow',\n\n  /**\n   * Deny the traffic\n   */\n  DENY = 'deny',\n}\n\n/**\n * A NetworkAclEntry\n *\n *\n */\nexport interface INetworkAclEntry extends IResource {\n  /**\n   * The network ACL.\n   */\n  readonly networkAcl: INetworkAcl\n\n}\n\n/**\n * Base class for NetworkAclEntries\n *\n *\n */\nabstract class NetworkAclEntryBase extends Resource implements INetworkAclEntry {\n  public abstract readonly networkAcl: INetworkAcl;\n}\n\n/**\n * Direction of traffic the AclEntry applies to\n *\n *\n */\nexport enum TrafficDirection {\n  /**\n   * Traffic leaving the subnet\n   */\n  EGRESS,\n\n  /**\n   * Traffic entering the subnet\n   */\n  INGRESS,\n}\n\n/**\n * Basic NetworkACL entry props\n *\n *\n */\nexport interface CommonNetworkAclEntryOptions {\n  /**\n   * The name of the NetworkAclEntry.\n   *\n   * It is not recommended to use an explicit group name.\n   *\n   * @default If you don't specify a NetworkAclName, AWS CloudFormation generates a\n   * unique physical ID and uses that ID for the group name.\n   */\n  readonly networkAclEntryName?: string;\n\n  /**\n   * The CIDR range to allow or deny.\n   */\n  readonly cidr: AclCidr;\n\n  /**\n   * What kind of traffic this ACL rule applies to\n   */\n  readonly traffic: AclTraffic;\n\n  /**\n   * Traffic direction, with respect to the subnet, this rule applies to\n   *\n   * @default TrafficDirection.INGRESS\n   */\n  readonly direction?: TrafficDirection;\n\n  /**\n   * Whether to allow or deny traffic that matches the rule; valid values are \"allow\" or \"deny\".\n   *\n   * Any traffic that is not explicitly allowed is automatically denied in a custom\n   * ACL, all traffic is automatically allowed in a default ACL.\n   *\n   * @default ALLOW\n   */\n  readonly ruleAction?: Action;\n\n  /**\n   * Rule number to assign to the entry, such as 100. ACL entries are processed in ascending order by rule number.\n   * Entries can't use the same rule number unless one is an egress rule and the other is an ingress rule.\n   */\n  readonly ruleNumber: number;\n}\n\n/**\n * Properties to create NetworkAclEntry\n *\n *\n */\nexport interface NetworkAclEntryProps extends CommonNetworkAclEntryOptions {\n  /**\n   * The network ACL this entry applies to.\n   */\n  readonly networkAcl: INetworkAcl;\n}\n\n/**\n * Define an entry in a Network ACL table\n *\n *\n */\nexport class NetworkAclEntry extends NetworkAclEntryBase {\n  public readonly networkAcl: INetworkAcl;\n\n  constructor(scope: Construct, id: string, props: NetworkAclEntryProps) {\n    super(scope, id, {\n      physicalName: props.networkAclEntryName,\n    });\n\n    this.networkAcl = props.networkAcl;\n\n    new CfnNetworkAclEntry(this, 'Resource', {\n      networkAclId: this.networkAcl.networkAclId,\n      ruleNumber: props.ruleNumber,\n      ruleAction: props.ruleAction ?? Action.ALLOW,\n      egress: props.direction !== undefined ? props.direction === TrafficDirection.EGRESS : undefined,\n      ...props.traffic.toTrafficConfig(),\n      ...props.cidr.toCidrConfig(),\n    });\n  }\n}\n\n/**\n * A SubnetNetworkAclAssociation\n *\n *\n */\nexport interface ISubnetNetworkAclAssociation extends IResource {\n  /**\n   * ID for the current SubnetNetworkAclAssociation\n   * @attribute\n   */\n  readonly subnetNetworkAclAssociationAssociationId: string;\n}\n\n/**\n * Properties to create a SubnetNetworkAclAssociation\n *\n *\n */\nexport interface SubnetNetworkAclAssociationProps {\n  /**\n   * The name of the SubnetNetworkAclAssociation.\n   *\n   * It is not recommended to use an explicit name.\n   *\n   * @default If you don't specify a SubnetNetworkAclAssociationName, AWS CloudFormation generates a\n   * unique physical ID and uses that ID for the group name.\n   */\n  readonly subnetNetworkAclAssociationName?: string;\n\n  /**\n   * The Network ACL this association is defined for\n   *\n   * @attribute\n   */\n  readonly networkAcl: INetworkAcl;\n\n  /**\n   * ID of the Subnet\n   * @attribute\n   */\n  readonly subnet: ISubnet;\n}\n\n/**\n * Associate a network ACL with a subnet\n *\n *\n */\nabstract class SubnetNetworkAclAssociationBase extends Resource implements ISubnetNetworkAclAssociation {\n  public abstract readonly subnetNetworkAclAssociationAssociationId: string;\n}\nexport class SubnetNetworkAclAssociation extends SubnetNetworkAclAssociationBase {\n  public static fromSubnetNetworkAclAssociationAssociationId(\n    scope: Construct, id: string,\n    subnetNetworkAclAssociationAssociationId: string): ISubnetNetworkAclAssociation {\n    class Import extends SubnetNetworkAclAssociationBase {\n      public readonly subnetNetworkAclAssociationAssociationId = subnetNetworkAclAssociationAssociationId;\n    }\n\n    return new Import(scope, id);\n  }\n  /**\n   * ID for the current SubnetNetworkAclAssociation\n   * @attribute\n   */\n  public readonly subnetNetworkAclAssociationAssociationId: string;\n\n  /**\n   * ID for the current Network ACL\n   * @attribute\n   */\n  public readonly networkAcl: INetworkAcl;\n\n  /**\n   * ID of the Subnet\n   * @attribute\n   */\n  public readonly subnet: ISubnet;\n\n  private association: CfnSubnetNetworkAclAssociation;\n\n  constructor(scope: Construct, id: string, props: SubnetNetworkAclAssociationProps) {\n    super(scope, id, {\n      physicalName: props.subnetNetworkAclAssociationName,\n    });\n\n    this.association = new CfnSubnetNetworkAclAssociation(this, 'Resource', {\n      networkAclId: props.networkAcl.networkAclId,\n      subnetId: props.subnet.subnetId,\n    });\n\n    this.networkAcl = props.networkAcl;\n    this.subnet = props.subnet;\n    this.subnetNetworkAclAssociationAssociationId = this.association.attrAssociationId;\n  }\n}\n"],
  "mappings": "2TAAA,OAAA,QAAA,YAAA,EAEA,gBAAA,QAAA,iBAAA,EA2BA,MAAe,sBAAuB,QAAA,QAAQ,CAMrC,SAAS,GAAY,QAAqC,CAC/D,MAAO,IAAI,iBAAgB,KAAM,GAAI,CACnC,WAAY,QACT,QACJ,GA6CL,MAAa,kBAAmB,eAAc,CA6B5C,YAAY,MAAkB,GAAY,MAAsB,CAC9D,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,eACrB,qEAED,KAAK,IAAM,MAAM,IAEjB,KAAK,WAAa,GAAI,iBAAA,cAAc,KAAM,WAAY,CACpD,MAAO,MAAM,IAAI,MAClB,EAED,KAAK,aAAe,KAAK,WAAW,IACpC,KAAK,gBAAkB,KAAK,WAAW,MAEnC,MAAM,kBAAoB,QAC5B,KAAK,oBAAoB,qBAAsB,MAAM,eAAe,QAxC1D,kBAAiB,MAAkB,GAAY,aAAoB,CAC/E,MAAM,cAAe,eAAc,CAAnC,aAAA,qBACkB,KAAA,aAAe,YACjC,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,EA0CtB,oBAAoB,GAAY,UAA0B,wEAC/D,KAAM,SAAU,KAAK,IAAI,cAAc,SAAS,EAChD,SAAW,UAAU,SAAQ,QAC3B,OAAO,oBAAoB,GAAI,IAAI,GAtDzC,QAAA,WAAA,wGAgEA,GAAY,QAAZ,AAAA,UAAY,QAAM,CAIhB,QAAA,MAAA,QAKA,QAAA,KAAA,MACF,GAVY,OAAA,QAAA,QAAA,SAAA,OAAM,CAAA,EAAA,EA8BlB,MAAe,2BAA4B,QAAA,QAAQ,EASnD,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAI1B,kBAAA,kBAAA,OAAA,GAAA,SAKA,kBAAA,kBAAA,QAAA,GAAA,SACF,GAVY,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,CAAA,EAAA,EA+E5B,MAAa,uBAAwB,oBAAmB,CAGtD,YAAY,MAAkB,GAAY,MAA2B,QACnE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,oBACrB,0EAED,KAAK,WAAa,MAAM,WAExB,GAAI,iBAAA,mBAAmB,KAAM,WAAY,CACvC,aAAc,KAAK,WAAW,aAC9B,WAAY,MAAM,WAClB,WAAU,IAAE,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,OAAO,MACvC,OAAQ,MAAM,YAAc,OAAY,MAAM,YAAc,iBAAiB,OAAS,UACnF,MAAM,QAAQ,gBAAe,KAC7B,MAAM,KAAK,aAAY,EAC3B,GAjBL,QAAA,gBAAA,uHAqEA,MAAe,uCAAwC,QAAA,QAAQ,EAG/D,MAAa,mCAAoC,gCAA+B,CA8B9E,YAAY,MAAkB,GAAY,MAAuC,CAC/E,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,gCACrB,sFAED,KAAK,YAAc,GAAI,iBAAA,+BAA+B,KAAM,WAAY,CACtE,aAAc,MAAM,WAAW,aAC/B,SAAU,MAAM,OAAO,SACxB,EAED,KAAK,WAAa,MAAM,WACxB,KAAK,OAAS,MAAM,OACpB,KAAK,yCAA2C,KAAK,YAAY,wBAzCrD,8CACZ,MAAkB,GAClB,yCAAgD,CAChD,MAAM,cAAe,gCAA+B,CAApD,aAAA,qBACkB,KAAA,yCAA2C,wCAC7D,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,GAR/B,QAAA,4BAAA",
  "names": []
}
