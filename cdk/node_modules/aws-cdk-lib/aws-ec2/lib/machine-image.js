"use strict";var _a,_b,_c,_d,_e,_f,_g;Object.defineProperty(exports,"__esModule",{value:!0}),exports.LookupMachineImage=exports.OperatingSystemType=exports.GenericWindowsImage=exports.GenericLinuxImage=exports.AmazonLinuxStorage=exports.AmazonLinuxVirt=exports.AmazonLinuxEdition=exports.AmazonLinuxKernel=exports.AmazonLinuxGeneration=exports.AmazonLinuxImage=exports.AmazonLinuxCpuType=exports.WindowsImage=exports.GenericSSMParameterImage=exports.MachineImage=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),ssm=require("../../aws-ssm"),cxschema=require("../../cloud-assembly-schema"),core_1=require("../../core"),user_data_1=require("./user-data");class MachineImage{static latestWindows(version,props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_WindowsVersion(version),jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_WindowsImageProps(props),new WindowsImage(version,props)}static latestAmazonLinux(props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AmazonLinuxImageProps(props),new AmazonLinuxImage(props)}static genericLinux(amiMap,props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_GenericLinuxImageProps(props),new GenericLinuxImage(amiMap,props)}static genericWindows(amiMap,props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_GenericWindowsImageProps(props),new GenericWindowsImage(amiMap,props)}static fromSSMParameter(parameterName,os,userData){return new GenericSSMParameterImage(parameterName,os,userData)}static fromSsmParameter(parameterName,options){return jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_SsmParameterImageOptions(options),new GenericSsmParameterImage(parameterName,options)}static lookup(props){return jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_LookupMachineImageProps(props),new LookupMachineImage(props)}}exports.MachineImage=MachineImage,_a=JSII_RTTI_SYMBOL_1,MachineImage[_a]={fqn:"aws-cdk-lib.aws_ec2.MachineImage",version:"2.20.0"};class GenericSSMParameterImage{constructor(parameterName,os,userData){this.os=os,this.userData=userData,jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_OperatingSystemType(os),jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_UserData(userData),this.parameterName=parameterName}getImage(scope){var _h;return{imageId:ssm.StringParameter.valueForTypedStringParameter(scope,this.parameterName,ssm.ParameterType.AWS_EC2_IMAGE_ID),osType:this.os,userData:(_h=this.userData)!==null&&_h!==void 0?_h:this.os===OperatingSystemType.WINDOWS?user_data_1.UserData.forWindows():user_data_1.UserData.forLinux()}}}exports.GenericSSMParameterImage=GenericSSMParameterImage,_b=JSII_RTTI_SYMBOL_1,GenericSSMParameterImage[_b]={fqn:"aws-cdk-lib.aws_ec2.GenericSSMParameterImage",version:"2.20.0"};class GenericSsmParameterImage{constructor(parameterName,props={}){this.parameterName=parameterName,this.props=props}getImage(scope){var _h,_j;const imageId=lookupImage(scope,this.props.cachedInContext,this.parameterName),osType=(_h=this.props.os)!==null&&_h!==void 0?_h:OperatingSystemType.LINUX;return{imageId,osType,userData:(_j=this.props.userData)!==null&&_j!==void 0?_j:osType===OperatingSystemType.WINDOWS?user_data_1.UserData.forWindows():user_data_1.UserData.forLinux()}}}class WindowsImage extends GenericSSMParameterImage{constructor(version,props={}){super("/aws/service/ami-windows-latest/"+version,OperatingSystemType.WINDOWS,props.userData);jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_WindowsVersion(version),jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_WindowsImageProps(props)}}exports.WindowsImage=WindowsImage,_c=JSII_RTTI_SYMBOL_1,WindowsImage[_c]={fqn:"aws-cdk-lib.aws_ec2.WindowsImage",version:"2.20.0"};var AmazonLinuxCpuType;(function(AmazonLinuxCpuType2){AmazonLinuxCpuType2.ARM_64="arm64",AmazonLinuxCpuType2.X86_64="x86_64"})(AmazonLinuxCpuType=exports.AmazonLinuxCpuType||(exports.AmazonLinuxCpuType={}));class AmazonLinuxImage extends GenericSSMParameterImage{constructor(props={}){var _h;super(AmazonLinuxImage.ssmParameterName(props),OperatingSystemType.LINUX,props.userData);this.props=props,jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AmazonLinuxImageProps(props),this.cachedInContext=(_h=props.cachedInContext)!==null&&_h!==void 0?_h:!1}static ssmParameterName(props={}){jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_AmazonLinuxImageProps(props);const generation=props&&props.generation||AmazonLinuxGeneration.AMAZON_LINUX,edition=props&&props.edition||AmazonLinuxEdition.STANDARD,cpu=props&&props.cpuType||AmazonLinuxCpuType.X86_64;let kernel=props&&props.kernel||void 0,virtualization,storage;if(generation===AmazonLinuxGeneration.AMAZON_LINUX_2022){if(kernel=AmazonLinuxKernel.KERNEL5_X,props&&props.storage)throw new Error("Storage parameter does not exist in smm parameter name for Amazon Linux 2022.");if(props&&props.virtualization)throw new Error("Virtualization parameter does not exist in smm parameter name for Amazon Linux 2022.")}else virtualization=props&&props.virtualization||AmazonLinuxVirt.HVM,storage=props&&props.storage||AmazonLinuxStorage.GENERAL_PURPOSE;const parts=[generation,"ami",edition!==AmazonLinuxEdition.STANDARD?edition:void 0,kernel,virtualization,cpu,storage].filter(x=>x!==void 0);return"/aws/service/ami-amazon-linux-latest/"+parts.join("-")}getImage(scope){var _h;const imageId=lookupImage(scope,this.cachedInContext,this.parameterName),osType=OperatingSystemType.LINUX;return{imageId,osType,userData:(_h=this.props.userData)!==null&&_h!==void 0?_h:user_data_1.UserData.forLinux()}}}exports.AmazonLinuxImage=AmazonLinuxImage,_d=JSII_RTTI_SYMBOL_1,AmazonLinuxImage[_d]={fqn:"aws-cdk-lib.aws_ec2.AmazonLinuxImage",version:"2.20.0"};var AmazonLinuxGeneration;(function(AmazonLinuxGeneration2){AmazonLinuxGeneration2.AMAZON_LINUX="amzn",AmazonLinuxGeneration2.AMAZON_LINUX_2="amzn2",AmazonLinuxGeneration2.AMAZON_LINUX_2022="al2022"})(AmazonLinuxGeneration=exports.AmazonLinuxGeneration||(exports.AmazonLinuxGeneration={}));var AmazonLinuxKernel;(function(AmazonLinuxKernel2){AmazonLinuxKernel2.KERNEL5_X="kernel-5.10"})(AmazonLinuxKernel=exports.AmazonLinuxKernel||(exports.AmazonLinuxKernel={}));var AmazonLinuxEdition;(function(AmazonLinuxEdition2){AmazonLinuxEdition2.STANDARD="standard",AmazonLinuxEdition2.MINIMAL="minimal"})(AmazonLinuxEdition=exports.AmazonLinuxEdition||(exports.AmazonLinuxEdition={}));var AmazonLinuxVirt;(function(AmazonLinuxVirt2){AmazonLinuxVirt2.HVM="hvm",AmazonLinuxVirt2.PV="pv"})(AmazonLinuxVirt=exports.AmazonLinuxVirt||(exports.AmazonLinuxVirt={}));var AmazonLinuxStorage;(function(AmazonLinuxStorage2){AmazonLinuxStorage2.EBS="ebs",AmazonLinuxStorage2.S3="s3",AmazonLinuxStorage2.GENERAL_PURPOSE="gp2"})(AmazonLinuxStorage=exports.AmazonLinuxStorage||(exports.AmazonLinuxStorage={}));class GenericLinuxImage{constructor(amiMap,props={}){this.amiMap=amiMap,this.props=props,jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_GenericLinuxImageProps(props)}getImage(scope){var _h;const userData=(_h=this.props.userData)!==null&&_h!==void 0?_h:user_data_1.UserData.forLinux(),osType=OperatingSystemType.LINUX,region=core_1.Stack.of(scope).region;if(core_1.Token.isUnresolved(region)){const mapping={};for(const[rgn,ami]of Object.entries(this.amiMap))mapping[rgn]={ami};return{imageId:new core_1.CfnMapping(scope,"AmiMap",{mapping}).findInMap(core_1.Aws.REGION,"ami"),userData,osType}}const imageId=region!=="test-region"?this.amiMap[region]:"ami-12345";if(!imageId)throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);return{imageId,userData,osType}}}exports.GenericLinuxImage=GenericLinuxImage,_e=JSII_RTTI_SYMBOL_1,GenericLinuxImage[_e]={fqn:"aws-cdk-lib.aws_ec2.GenericLinuxImage",version:"2.20.0"};class GenericWindowsImage{constructor(amiMap,props={}){this.amiMap=amiMap,this.props=props,jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_GenericWindowsImageProps(props)}getImage(scope){var _h;const userData=(_h=this.props.userData)!==null&&_h!==void 0?_h:user_data_1.UserData.forWindows(),osType=OperatingSystemType.WINDOWS,region=core_1.Stack.of(scope).region;if(core_1.Token.isUnresolved(region)){const mapping={};for(const[rgn,ami]of Object.entries(this.amiMap))mapping[rgn]={ami};return{imageId:new core_1.CfnMapping(scope,"AmiMap",{mapping}).findInMap(core_1.Aws.REGION,"ami"),userData,osType}}const imageId=region!=="test-region"?this.amiMap[region]:"ami-12345";if(!imageId)throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);return{imageId,userData,osType}}}exports.GenericWindowsImage=GenericWindowsImage,_f=JSII_RTTI_SYMBOL_1,GenericWindowsImage[_f]={fqn:"aws-cdk-lib.aws_ec2.GenericWindowsImage",version:"2.20.0"};var OperatingSystemType;(function(OperatingSystemType2){OperatingSystemType2[OperatingSystemType2.LINUX=0]="LINUX",OperatingSystemType2[OperatingSystemType2.WINDOWS=1]="WINDOWS",OperatingSystemType2[OperatingSystemType2.UNKNOWN=2]="UNKNOWN"})(OperatingSystemType=exports.OperatingSystemType||(exports.OperatingSystemType={}));class LookupMachineImage{constructor(props){this.props=props,jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_LookupMachineImageProps(props)}getImage(scope){var _h;const filters={name:[this.props.name],state:["available"],"image-type":["machine"],platform:this.props.windows?["windows"]:void 0};Object.assign(filters,this.props.filters);const value=core_1.ContextProvider.getValue(scope,{provider:cxschema.ContextProvider.AMI_PROVIDER,props:{owners:this.props.owners,filters},dummyValue:"ami-1234"}).value;if(typeof value!="string")throw new Error(`Response to AMI lookup invalid, got: ${value}`);const osType=this.props.windows?OperatingSystemType.WINDOWS:OperatingSystemType.LINUX;return{imageId:value,osType,userData:(_h=this.props.userData)!==null&&_h!==void 0?_h:user_data_1.UserData.forOperatingSystem(osType)}}}exports.LookupMachineImage=LookupMachineImage,_g=JSII_RTTI_SYMBOL_1,LookupMachineImage[_g]={fqn:"aws-cdk-lib.aws_ec2.LookupMachineImage",version:"2.20.0"};function lookupImage(scope,cachedInContext,parameterName){return cachedInContext?ssm.StringParameter.valueFromLookup(scope,parameterName):ssm.StringParameter.valueForTypedStringParameter(scope,parameterName,ssm.ParameterType.AWS_EC2_IMAGE_ID)}
//# sourceMappingURL=machine-image.js.map
