{
  "version": 3,
  "sources": ["machine-image.ts"],
  "sourcesContent": ["import * as ssm from '../../aws-ssm';\nimport * as cxschema from '../../cloud-assembly-schema';\nimport { ContextProvider, CfnMapping, Aws, Stack, Token } from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { UserData } from './user-data';\nimport { WindowsVersion } from './windows-versions';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Interface for classes that can select an appropriate machine image to use\n */\nexport interface IMachineImage {\n  /**\n   * Return the image to use in the given context\n   */\n  getImage(scope: Construct): MachineImageConfig;\n}\n\n/**\n * Factory functions for standard Amazon Machine Image objects.\n */\nexport abstract class MachineImage {\n  /**\n   * A Windows image that is automatically kept up-to-date\n   *\n   * This Machine Image automatically updates to the latest version on every\n   * deployment. Be aware this will cause your instances to be replaced when a\n   * new version of the image becomes available. Do not store stateful information\n   * on the instance if you are using this image.\n   */\n  public static latestWindows(version: WindowsVersion, props?: WindowsImageProps): IMachineImage {\n    return new WindowsImage(version, props);\n  }\n\n  /**\n   * An Amazon Linux image that is automatically kept up-to-date\n   *\n   * This Machine Image automatically updates to the latest version on every\n   * deployment. Be aware this will cause your instances to be replaced when a\n   * new version of the image becomes available. Do not store stateful information\n   * on the instance if you are using this image.\n   */\n  public static latestAmazonLinux(props?: AmazonLinuxImageProps): IMachineImage {\n    return new AmazonLinuxImage(props);\n  }\n\n  /**\n   * A Linux image where you specify the AMI ID for every region\n   *\n   * @param amiMap For every region where you are deploying the stack,\n   * specify the AMI ID for that region.\n   * @param props Customize the image by supplying additional props\n   */\n  public static genericLinux(amiMap: Record<string, string>, props?: GenericLinuxImageProps): IMachineImage {\n    return new GenericLinuxImage(amiMap, props);\n  }\n\n  /**\n   * A Windows image where you specify the AMI ID for every region\n   *\n   * @param amiMap For every region where you are deploying the stack,\n   * specify the AMI ID for that region.\n   * @param props Customize the image by supplying additional props\n   */\n  public static genericWindows(amiMap: Record<string, string>, props?: GenericWindowsImageProps): IMachineImage {\n    return new GenericWindowsImage(amiMap, props);\n  }\n\n  /**\n   * An image specified in SSM parameter store that is automatically kept up-to-date\n   *\n   * This Machine Image automatically updates to the latest version on every\n   * deployment. Be aware this will cause your instances to be replaced when a\n   * new version of the image becomes available. Do not store stateful information\n   * on the instance if you are using this image.\n   *\n   * @param parameterName The name of SSM parameter containing the AMi id\n   * @param os The operating system type of the AMI\n   * @param userData optional user data for the given image\n   * @deprecated Use `MachineImage.fromSsmParameter()` instead\n   */\n  public static fromSSMParameter(parameterName: string, os: OperatingSystemType, userData?: UserData): IMachineImage {\n    return new GenericSSMParameterImage(parameterName, os, userData);\n  }\n\n  /**\n   * An image specified in SSM parameter store\n   *\n   * By default, the SSM parameter is refreshed at every deployment,\n   * causing your instances to be replaced whenever a new version of the AMI\n   * is released.\n   *\n   * Pass `{ cachedInContext: true }` to keep the AMI ID stable. If you do, you\n   * will have to remember to periodically invalidate the context to refresh\n   * to the newest AMI ID.\n   */\n  public static fromSsmParameter(parameterName: string, options?: SsmParameterImageOptions): IMachineImage {\n    return new GenericSsmParameterImage(parameterName, options);\n  }\n\n  /**\n   * Look up a shared Machine Image using DescribeImages\n   *\n   * The most recent, available, launchable image matching the given filter\n   * criteria will be used. Looking up AMIs may take a long time; specify\n   * as many filter criteria as possible to narrow down the search.\n   *\n   * The AMI selected will be cached in `cdk.context.json` and the same value\n   * will be used on future runs. To refresh the AMI lookup, you will have to\n   * evict the value from the cache using the `cdk context` command. See\n   * https://docs.aws.amazon.com/cdk/latest/guide/context.html for more information.\n   *\n   * This function can not be used in environment-agnostic stacks.\n   */\n  public static lookup(props: LookupMachineImageProps): IMachineImage {\n    return new LookupMachineImage(props);\n  }\n}\n\n/**\n * Configuration for a machine image\n */\nexport interface MachineImageConfig {\n  /**\n   * The AMI ID of the image to use\n   */\n  readonly imageId: string;\n\n  /**\n   * Operating system type for this image\n   */\n  readonly osType: OperatingSystemType;\n\n  /**\n   * Initial UserData for this image\n   */\n  readonly userData: UserData;\n}\n\n/**\n * Select the image based on a given SSM parameter\n *\n * This Machine Image automatically updates to the latest version on every\n * deployment. Be aware this will cause your instances to be replaced when a\n * new version of the image becomes available. Do not store stateful information\n * on the instance if you are using this image.\n *\n * The AMI ID is selected using the values published to the SSM parameter store.\n */\nexport class GenericSSMParameterImage implements IMachineImage {\n  // FIXME: this class ought to be `@deprecated` and removed from v2, but that\n  // is causing build failure right now. Ref: https://github.com/aws/jsii/issues/3025\n  // @-deprecated Use `MachineImage.fromSsmParameter()` instead\n\n  /**\n   * Name of the SSM parameter we're looking up\n   */\n  public readonly parameterName: string;\n\n  constructor(parameterName: string, private readonly os: OperatingSystemType, private readonly userData?: UserData) {\n    this.parameterName = parameterName;\n  }\n\n  /**\n   * Return the image to use in the given context\n   */\n  public getImage(scope: Construct): MachineImageConfig {\n    const ami = ssm.StringParameter.valueForTypedStringParameter(scope, this.parameterName, ssm.ParameterType.AWS_EC2_IMAGE_ID);\n    return {\n      imageId: ami,\n      osType: this.os,\n      userData: this.userData ?? (this.os === OperatingSystemType.WINDOWS ? UserData.forWindows() : UserData.forLinux()),\n    };\n  }\n}\n\n/**\n * Properties for GenericSsmParameterImage\n */\nexport interface SsmParameterImageOptions {\n  /**\n   * Operating system\n   *\n   * @default OperatingSystemType.LINUX\n   */\n  readonly os?: OperatingSystemType;\n\n  /**\n   * Custom UserData\n   *\n   * @default - UserData appropriate for the OS\n   */\n  readonly userData?: UserData;\n\n  /**\n   * Whether the AMI ID is cached to be stable between deployments\n   *\n   * By default, the newest image is used on each deployment. This will cause\n   * instances to be replaced whenever a new version is released, and may cause\n   * downtime if there aren't enough running instances in the AutoScalingGroup\n   * to reschedule the tasks on.\n   *\n   * If set to true, the AMI ID will be cached in `cdk.context.json` and the\n   * same value will be used on future runs. Your instances will not be replaced\n   * but your AMI version will grow old over time. To refresh the AMI lookup,\n   * you will have to evict the value from the cache using the `cdk context`\n   * command. See https://docs.aws.amazon.com/cdk/latest/guide/context.html for\n   * more information.\n   *\n   * Can not be set to `true` in environment-agnostic stacks.\n   *\n   * @default false\n   */\n  readonly cachedInContext?: boolean;\n}\n\n/**\n * Select the image based on a given SSM parameter\n *\n * This Machine Image automatically updates to the latest version on every\n * deployment. Be aware this will cause your instances to be replaced when a\n * new version of the image becomes available. Do not store stateful information\n * on the instance if you are using this image.\n *\n * The AMI ID is selected using the values published to the SSM parameter store.\n */\nclass GenericSsmParameterImage implements IMachineImage {\n  constructor(private readonly parameterName: string, private readonly props: SsmParameterImageOptions = {}) {\n  }\n\n  /**\n   * Return the image to use in the given context\n   */\n  public getImage(scope: Construct): MachineImageConfig {\n    const imageId = lookupImage(scope, this.props.cachedInContext, this.parameterName);\n\n    const osType = this.props.os ?? OperatingSystemType.LINUX;\n    return {\n      imageId,\n      osType,\n      userData: this.props.userData ?? (osType === OperatingSystemType.WINDOWS ? UserData.forWindows() : UserData.forLinux()),\n    };\n  }\n}\n\n/**\n * Configuration options for WindowsImage\n */\nexport interface WindowsImageProps {\n  /**\n   * Initial user data\n   *\n   * @default - Empty UserData for Windows machines\n   */\n  readonly userData?: UserData;\n}\n\n/**\n * Select the latest version of the indicated Windows version\n *\n * This Machine Image automatically updates to the latest version on every\n * deployment. Be aware this will cause your instances to be replaced when a\n * new version of the image becomes available. Do not store stateful information\n * on the instance if you are using this image.\n *\n * The AMI ID is selected using the values published to the SSM parameter store.\n *\n * https://aws.amazon.com/blogs/mt/query-for-the-latest-windows-ami-using-systems-manager-parameter-store/\n */\nexport class WindowsImage extends GenericSSMParameterImage {\n  constructor(version: WindowsVersion, props: WindowsImageProps = {}) {\n    super('/aws/service/ami-windows-latest/' + version, OperatingSystemType.WINDOWS, props.userData);\n  }\n}\n\n/**\n * CPU type\n */\nexport enum AmazonLinuxCpuType {\n  /**\n   * arm64 CPU type\n   */\n  ARM_64 = 'arm64',\n\n  /**\n   * x86_64 CPU type\n   */\n  X86_64 = 'x86_64',\n}\n\n/**\n * Amazon Linux image properties\n */\nexport interface AmazonLinuxImageProps {\n  /**\n   * What generation of Amazon Linux to use\n   *\n   * @default AmazonLinux\n   */\n  readonly generation?: AmazonLinuxGeneration;\n\n  /**\n   * What edition of Amazon Linux to use\n   *\n   * @default Standard\n   */\n  readonly edition?: AmazonLinuxEdition;\n\n  /**\n   * What kernel version of Amazon Linux to use\n   *\n   * @default -\n   */\n  readonly kernel?: AmazonLinuxKernel;\n\n  /**\n   * Virtualization type\n   *\n   * @default HVM\n   */\n  readonly virtualization?: AmazonLinuxVirt;\n\n  /**\n   * What storage backed image to use\n   *\n   * @default GeneralPurpose\n   */\n  readonly storage?: AmazonLinuxStorage;\n\n  /**\n   * Initial user data\n   *\n   * @default - Empty UserData for Linux machines\n   */\n  readonly userData?: UserData;\n\n  /**\n   * CPU Type\n   *\n   * @default X86_64\n   */\n  readonly cpuType?: AmazonLinuxCpuType;\n\n  /**\n   * Whether the AMI ID is cached to be stable between deployments\n   *\n   * By default, the newest image is used on each deployment. This will cause\n   * instances to be replaced whenever a new version is released, and may cause\n   * downtime if there aren't enough running instances in the AutoScalingGroup\n   * to reschedule the tasks on.\n   *\n   * If set to true, the AMI ID will be cached in `cdk.context.json` and the\n   * same value will be used on future runs. Your instances will not be replaced\n   * but your AMI version will grow old over time. To refresh the AMI lookup,\n   * you will have to evict the value from the cache using the `cdk context`\n   * command. See https://docs.aws.amazon.com/cdk/latest/guide/context.html for\n   * more information.\n   *\n   * Can not be set to `true` in environment-agnostic stacks.\n   *\n   * @default false\n   */\n  readonly cachedInContext?: boolean;\n}\n\n/**\n * Selects the latest version of Amazon Linux\n *\n * This Machine Image automatically updates to the latest version on every\n * deployment. Be aware this will cause your instances to be replaced when a\n * new version of the image becomes available. Do not store stateful information\n * on the instance if you are using this image.\n *\n * The AMI ID is selected using the values published to the SSM parameter store.\n */\nexport class AmazonLinuxImage extends GenericSSMParameterImage {\n  /**\n   * Return the SSM parameter name that will contain the Amazon Linux image with the given attributes\n   */\n  public static ssmParameterName(props: AmazonLinuxImageProps = {}) {\n    const generation = (props && props.generation) || AmazonLinuxGeneration.AMAZON_LINUX;\n    const edition = (props && props.edition) || AmazonLinuxEdition.STANDARD;\n    const cpu = (props && props.cpuType) || AmazonLinuxCpuType.X86_64;\n    let kernel = (props && props.kernel) || undefined;\n    let virtualization: AmazonLinuxVirt | undefined;\n    let storage: AmazonLinuxStorage | undefined;\n\n    if (generation === AmazonLinuxGeneration.AMAZON_LINUX_2022) {\n      kernel = AmazonLinuxKernel.KERNEL5_X;\n      if (props && props.storage) {\n        throw new Error('Storage parameter does not exist in smm parameter name for Amazon Linux 2022.');\n      }\n      if (props && props.virtualization) {\n        throw new Error('Virtualization parameter does not exist in smm parameter name for Amazon Linux 2022.');\n      }\n    } else {\n      virtualization = (props && props.virtualization) || AmazonLinuxVirt.HVM;\n      storage = (props && props.storage) || AmazonLinuxStorage.GENERAL_PURPOSE;\n    }\n\n    const parts: Array<string|undefined> = [\n      generation,\n      'ami',\n      edition !== AmazonLinuxEdition.STANDARD ? edition : undefined,\n      kernel,\n      virtualization,\n      cpu,\n      storage,\n    ].filter(x => x !== undefined); // Get rid of undefineds\n\n    return '/aws/service/ami-amazon-linux-latest/' + parts.join('-');\n  }\n\n  private readonly cachedInContext: boolean;\n\n  constructor(private readonly props: AmazonLinuxImageProps = {}) {\n    super(AmazonLinuxImage.ssmParameterName(props), OperatingSystemType.LINUX, props.userData);\n\n    this.cachedInContext = props.cachedInContext ?? false;\n  }\n\n  /**\n   * Return the image to use in the given context\n   */\n  public getImage(scope: Construct): MachineImageConfig {\n    const imageId = lookupImage(scope, this.cachedInContext, this.parameterName);\n\n    const osType = OperatingSystemType.LINUX;\n    return {\n      imageId,\n      osType,\n      userData: this.props.userData ?? UserData.forLinux(),\n    };\n  }\n}\n\n/**\n * What generation of Amazon Linux to use\n */\nexport enum AmazonLinuxGeneration {\n  /**\n   * Amazon Linux\n   */\n  AMAZON_LINUX = 'amzn',\n\n  /**\n   * Amazon Linux 2\n   */\n  AMAZON_LINUX_2 = 'amzn2',\n\n  /**\n   * Amazon Linux 2022\n   */\n  AMAZON_LINUX_2022 = 'al2022',\n}\n\n/**\n * Amazon Linux Kernel\n */\nexport enum AmazonLinuxKernel {\n  /**\n   * Standard edition\n   */\n  KERNEL5_X = 'kernel-5.10',\n}\n\n/**\n * Amazon Linux edition\n */\nexport enum AmazonLinuxEdition {\n  /**\n   * Standard edition\n   */\n  STANDARD = 'standard',\n\n  /**\n   * Minimal edition\n   */\n  MINIMAL = 'minimal',\n}\n\n/**\n * Virtualization type for Amazon Linux\n */\nexport enum AmazonLinuxVirt {\n  /**\n   * HVM virtualization (recommended)\n   */\n  HVM = 'hvm',\n\n  /**\n   * PV virtualization\n   */\n  PV = 'pv',\n}\n\nexport enum AmazonLinuxStorage {\n  /**\n   * EBS-backed storage\n   */\n  EBS = 'ebs',\n\n  /**\n   * S3-backed storage\n   */\n  S3 = 's3',\n\n  /**\n   * General Purpose-based storage (recommended)\n   */\n  GENERAL_PURPOSE = 'gp2',\n}\n\n/**\n * Configuration options for GenericLinuxImage\n */\nexport interface GenericLinuxImageProps {\n  /**\n   * Initial user data\n   *\n   * @default - Empty UserData for Linux machines\n   */\n  readonly userData?: UserData;\n}\n\n/**\n * Configuration options for GenericWindowsImage\n */\nexport interface GenericWindowsImageProps {\n  /**\n   * Initial user data\n   *\n   * @default - Empty UserData for Windows machines\n   */\n  readonly userData?: UserData;\n}\n\n/**\n * Construct a Linux machine image from an AMI map\n *\n * Linux images IDs are not published to SSM parameter store yet, so you'll have to\n * manually specify an AMI map.\n */\nexport class GenericLinuxImage implements IMachineImage {\n  constructor(private readonly amiMap: { [region: string]: string }, private readonly props: GenericLinuxImageProps = {}) {\n  }\n\n  public getImage(scope: Construct): MachineImageConfig {\n    const userData = this.props.userData ?? UserData.forLinux();\n    const osType = OperatingSystemType.LINUX;\n    const region = Stack.of(scope).region;\n    if (Token.isUnresolved(region)) {\n      const mapping: { [k1: string]: { [k2: string]: any } } = {};\n      for (const [rgn, ami] of Object.entries(this.amiMap)) {\n        mapping[rgn] = { ami };\n      }\n      const amiMap = new CfnMapping(scope, 'AmiMap', { mapping });\n      return {\n        imageId: amiMap.findInMap(Aws.REGION, 'ami'),\n        userData,\n        osType,\n      };\n    }\n    const imageId = region !== 'test-region' ? this.amiMap[region] : 'ami-12345';\n    if (!imageId) {\n      throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);\n    }\n    return {\n      imageId,\n      userData,\n      osType,\n    };\n  }\n}\n\n/**\n * Construct a Windows machine image from an AMI map\n *\n * Allows you to create a generic Windows EC2 , manually specify an AMI map.\n */\nexport class GenericWindowsImage implements IMachineImage {\n  constructor(private readonly amiMap: {[region: string]: string}, private readonly props: GenericWindowsImageProps = {}) {\n  }\n\n  public getImage(scope: Construct): MachineImageConfig {\n    const userData = this.props.userData ?? UserData.forWindows();\n    const osType = OperatingSystemType.WINDOWS;\n    const region = Stack.of(scope).region;\n    if (Token.isUnresolved(region)) {\n      const mapping: { [k1: string]: { [k2: string]: any } } = {};\n      for (const [rgn, ami] of Object.entries(this.amiMap)) {\n        mapping[rgn] = { ami };\n      }\n      const amiMap = new CfnMapping(scope, 'AmiMap', { mapping });\n      return {\n        imageId: amiMap.findInMap(Aws.REGION, 'ami'),\n        userData,\n        osType,\n      };\n    }\n    const imageId = region !== 'test-region' ? this.amiMap[region] : 'ami-12345';\n    if (!imageId) {\n      throw new Error(`Unable to find AMI in AMI map: no AMI specified for region '${region}'`);\n    }\n    return {\n      imageId,\n      userData,\n      osType,\n    };\n  }\n}\n\n/**\n * The OS type of a particular image\n */\nexport enum OperatingSystemType {\n  LINUX,\n  WINDOWS,\n  /**\n   * Used when the type of the operating system is not known\n   * (for example, for imported Auto-Scaling Groups).\n   */\n  UNKNOWN,\n}\n\n/**\n * A machine image whose AMI ID will be searched using DescribeImages.\n *\n * The most recent, available, launchable image matching the given filter\n * criteria will be used. Looking up AMIs may take a long time; specify\n * as many filter criteria as possible to narrow down the search.\n *\n * The AMI selected will be cached in `cdk.context.json` and the same value\n * will be used on future runs. To refresh the AMI lookup, you will have to\n * evict the value from the cache using the `cdk context` command. See\n * https://docs.aws.amazon.com/cdk/latest/guide/context.html for more information.\n */\nexport class LookupMachineImage implements IMachineImage {\n  constructor(private readonly props: LookupMachineImageProps) {\n  }\n\n  public getImage(scope: Construct): MachineImageConfig {\n    // Need to know 'windows' or not before doing the query to return the right\n    // osType for the dummy value, so might as well add it to the filter.\n    const filters: Record<string, string[] | undefined> = {\n      'name': [this.props.name],\n      'state': ['available'],\n      'image-type': ['machine'],\n      'platform': this.props.windows ? ['windows'] : undefined,\n    };\n    Object.assign(filters, this.props.filters);\n\n    const value = ContextProvider.getValue(scope, {\n      provider: cxschema.ContextProvider.AMI_PROVIDER,\n      props: {\n        owners: this.props.owners,\n        filters,\n      } as cxschema.AmiContextQuery,\n      dummyValue: 'ami-1234',\n    }).value as cxapi.AmiContextResponse;\n\n    if (typeof value !== 'string') {\n      throw new Error(`Response to AMI lookup invalid, got: ${value}`);\n    }\n\n    const osType = this.props.windows ? OperatingSystemType.WINDOWS : OperatingSystemType.LINUX;\n\n    return {\n      imageId: value,\n      osType,\n      userData: this.props.userData ?? UserData.forOperatingSystem(osType),\n    };\n  }\n}\n\n/**\n * Properties for looking up an image\n */\nexport interface LookupMachineImageProps {\n  /**\n   * Name of the image (may contain wildcards)\n   */\n  readonly name: string;\n\n  /**\n   * Owner account IDs or aliases\n   *\n   * @default - All owners\n   */\n  readonly owners?: string[];\n\n  /**\n   * Additional filters on the AMI\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html\n   * @default - No additional filters\n   */\n  readonly filters?: {[key: string]: string[]};\n\n  /**\n   * Look for Windows images\n   *\n   * @default false\n   */\n  readonly windows?: boolean;\n\n  /**\n   * Custom userdata for this image\n   *\n   * @default - Empty user data appropriate for the platform type\n   */\n  readonly userData?: UserData;\n}\n\nfunction lookupImage(scope: Construct, cachedInContext: boolean | undefined, parameterName: string) {\n  return cachedInContext\n    ? ssm.StringParameter.valueFromLookup(scope, parameterName)\n    : ssm.StringParameter.valueForTypedStringParameter(scope, parameterName, ssm.ParameterType.AWS_EC2_IMAGE_ID);\n}\n"],
  "mappings": "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",
  "names": []
}
