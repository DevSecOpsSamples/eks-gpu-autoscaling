{
  "version": 3,
  "sources": ["vpc-flow-logs.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as logs from '../../aws-logs';\nimport * as s3 from '../../aws-s3';\nimport { IResource, PhysicalName, RemovalPolicy, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnFlowLog } from './ec2.generated';\nimport { ISubnet, IVpc } from './vpc';\n\n/**\n * A FlowLog\n *\n *\n */\nexport interface IFlowLog extends IResource {\n  /**\n   * The Id of the VPC Flow Log\n   *\n   * @attribute\n   */\n  readonly flowLogId: string;\n}\n\n/**\n * The type of VPC traffic to log\n *\n *\n */\nexport enum FlowLogTrafficType {\n  /**\n   * Only log accepts\n   */\n  ACCEPT = 'ACCEPT',\n\n  /**\n   * Log all requests\n   */\n  ALL = 'ALL',\n\n  /**\n   * Only log rejects\n   */\n  REJECT = 'REJECT'\n}\n\n/**\n * The available destination types for Flow Logs\n *\n */\nexport enum FlowLogDestinationType {\n  /**\n   * Send flow logs to CloudWatch Logs Group\n   */\n  CLOUD_WATCH_LOGS = 'cloud-watch-logs',\n\n  /**\n   * Send flow logs to S3 Bucket\n   */\n  S3 = 's3'\n}\n\n/**\n * The type of resource to create the flow log for\n *\n *\n */\nexport abstract class FlowLogResourceType {\n  /**\n   * The subnet to attach the Flow Log to\n   */\n  public static fromSubnet(subnet: ISubnet): FlowLogResourceType {\n    return {\n      resourceType: 'Subnet',\n      resourceId: subnet.subnetId,\n    };\n  }\n\n  /**\n   * The VPC to attach the Flow Log to\n   */\n  public static fromVpc(vpc: IVpc): FlowLogResourceType {\n    return {\n      resourceType: 'VPC',\n      resourceId: vpc.vpcId,\n    };\n  }\n\n  /**\n   * The Network Interface to attach the Flow Log to\n   */\n  public static fromNetworkInterfaceId(id: string): FlowLogResourceType {\n    return {\n      resourceType: 'NetworkInterface',\n      resourceId: id,\n    };\n  }\n\n  /**\n   * The type of resource to attach a flow log to.\n   */\n  public abstract resourceType: string;\n\n  /**\n   * The Id of the resource that the flow log should be attached to.\n   */\n  public abstract resourceId: string;\n}\n\n/**\n * The destination type for the flow log\n *\n *\n */\nexport abstract class FlowLogDestination {\n  /**\n   * Use CloudWatch logs as the destination\n   */\n  public static toCloudWatchLogs(logGroup?: logs.ILogGroup, iamRole?: iam.IRole): FlowLogDestination {\n    return new CloudWatchLogsDestination({\n      logDestinationType: FlowLogDestinationType.CLOUD_WATCH_LOGS,\n      logGroup,\n      iamRole,\n    });\n  }\n\n  /**\n   * Use S3 as the destination\n   */\n  public static toS3(bucket?: s3.IBucket, keyPrefix?: string): FlowLogDestination {\n    return new S3Destination({\n      logDestinationType: FlowLogDestinationType.S3,\n      s3Bucket: bucket,\n      keyPrefix,\n    });\n  }\n\n  /**\n   * Generates a flow log destination configuration\n   */\n  public abstract bind(scope: Construct, flowLog: FlowLog): FlowLogDestinationConfig;\n}\n\n/**\n * Flow Log Destination configuration\n *\n *\n */\nexport interface FlowLogDestinationConfig {\n  /**\n   * The type of destination to publish the flow logs to.\n   *\n   * @default - CLOUD_WATCH_LOGS\n   */\n  readonly logDestinationType: FlowLogDestinationType;\n\n  /**\n   * The IAM Role that has access to publish to CloudWatch logs\n   *\n   * @default - default IAM role is created for you\n   */\n  readonly iamRole?: iam.IRole;\n\n  /**\n   * The CloudWatch Logs Log Group to publish the flow logs to\n   *\n   * @default - default log group is created for you\n   */\n  readonly logGroup?: logs.ILogGroup;\n\n  /**\n   * S3 bucket to publish the flow logs to\n   *\n   * @default - undefined\n   */\n  readonly s3Bucket?: s3.IBucket;\n\n  /**\n   * S3 bucket key prefix to publish the flow logs to\n   *\n   * @default - undefined\n   */\n  readonly keyPrefix?: string;\n}\n\n/**\n *\n */\nclass S3Destination extends FlowLogDestination {\n  constructor(private readonly props: FlowLogDestinationConfig) {\n    super();\n  }\n\n  public bind(scope: Construct, _flowLog: FlowLog): FlowLogDestinationConfig {\n    let s3Bucket: s3.IBucket;\n    if (this.props.s3Bucket === undefined) {\n      s3Bucket = new s3.Bucket(scope, 'Bucket', {\n        encryption: s3.BucketEncryption.UNENCRYPTED,\n        removalPolicy: RemovalPolicy.RETAIN,\n      });\n    } else {\n      s3Bucket = this.props.s3Bucket;\n    }\n    return {\n      logDestinationType: FlowLogDestinationType.S3,\n      s3Bucket,\n      keyPrefix: this.props.keyPrefix,\n    };\n  }\n}\n\n/**\n *\n */\nclass CloudWatchLogsDestination extends FlowLogDestination {\n  constructor(private readonly props: FlowLogDestinationConfig) {\n    super();\n  }\n\n  public bind(scope: Construct, _flowLog: FlowLog): FlowLogDestinationConfig {\n    let iamRole: iam.IRole;\n    let logGroup: logs.ILogGroup;\n    if (this.props.iamRole === undefined) {\n      iamRole = new iam.Role(scope, 'IAMRole', {\n        roleName: PhysicalName.GENERATE_IF_NEEDED,\n        assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com'),\n      });\n    } else {\n      iamRole = this.props.iamRole;\n    }\n\n    if (this.props.logGroup === undefined) {\n      logGroup = new logs.LogGroup(scope, 'LogGroup');\n    } else {\n      logGroup = this.props.logGroup;\n    }\n\n    iamRole.addToPrincipalPolicy(\n      new iam.PolicyStatement({\n        actions: [\n          'logs:CreateLogStream',\n          'logs:PutLogEvents',\n          'logs:DescribeLogStreams',\n        ],\n        effect: iam.Effect.ALLOW,\n        resources: [logGroup.logGroupArn],\n      }),\n    );\n\n    iamRole.addToPrincipalPolicy(\n      new iam.PolicyStatement({\n        actions: ['iam:PassRole'],\n        effect: iam.Effect.ALLOW,\n        resources: [iamRole.roleArn],\n      }),\n    );\n\n    return {\n      logDestinationType: FlowLogDestinationType.CLOUD_WATCH_LOGS,\n      logGroup,\n      iamRole,\n    };\n  }\n}\n\n/**\n * Options to add a flow log to a VPC\n *\n *\n */\nexport interface FlowLogOptions {\n  /**\n   * The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.\n   *\n   * @default ALL\n   */\n  readonly trafficType?: FlowLogTrafficType;\n\n  /**\n   * Specifies the type of destination to which the flow log data is to be published.\n   * Flow log data can be published to CloudWatch Logs or Amazon S3\n   *\n   * @default FlowLogDestinationType.toCloudWatchLogs()\n   */\n  readonly destination?: FlowLogDestination;\n}\n\n/**\n * Properties of a VPC Flow Log\n *\n *\n */\nexport interface FlowLogProps extends FlowLogOptions {\n  /**\n   * The name of the FlowLog\n   *\n   * It is not recommended to use an explicit name.\n   *\n   * @default If you don't specify a flowLogName, AWS CloudFormation generates a\n   * unique physical ID and uses that ID for the group name.\n   */\n  readonly flowLogName?: string;\n\n  /**\n   * The type of resource for which to create the flow log\n   */\n  readonly resourceType: FlowLogResourceType;\n}\n\n/**\n * The base class for a Flow Log\n *\n *\n */\nabstract class FlowLogBase extends Resource implements IFlowLog {\n  /**\n   * The Id of the VPC Flow Log\n   *\n   * @attribute\n   */\n  public abstract readonly flowLogId: string;\n}\n\n/**\n * A VPC flow log.\n * @resource AWS::EC2::FlowLog\n *\n *\n */\nexport class FlowLog extends FlowLogBase {\n  /**\n   * Import a Flow Log by it's Id\n   */\n  public static fromFlowLogId(scope: Construct, id: string, flowLogId: string): IFlowLog {\n    class Import extends FlowLogBase {\n      public flowLogId = flowLogId;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The Id of the VPC Flow Log\n   *\n   * @attribute\n   */\n  public readonly flowLogId: string;\n\n  /**\n   * The S3 bucket to publish flow logs to\n   */\n  public readonly bucket?: s3.IBucket;\n\n  /**\n   * S3 bucket key prefix to publish the flow logs under\n   */\n  readonly keyPrefix?: string;\n\n  /**\n   * The iam role used to publish logs to CloudWatch\n   */\n  public readonly iamRole?: iam.IRole;\n\n  /**\n   * The CloudWatch Logs LogGroup to publish flow logs to\n   */\n  public readonly logGroup?: logs.ILogGroup;\n\n  constructor(scope: Construct, id: string, props: FlowLogProps) {\n    super(scope, id, {\n      physicalName: props.flowLogName,\n    });\n\n    const destination = props.destination || FlowLogDestination.toCloudWatchLogs();\n\n    const destinationConfig = destination.bind(this, this);\n    this.logGroup = destinationConfig.logGroup;\n    this.bucket = destinationConfig.s3Bucket;\n    this.iamRole = destinationConfig.iamRole;\n    this.keyPrefix = destinationConfig.keyPrefix;\n\n    let logDestination: string | undefined = undefined;\n    if (this.bucket) {\n      logDestination = this.keyPrefix ? this.bucket.arnForObjects(this.keyPrefix) : this.bucket.bucketArn;\n    }\n\n    const flowLog = new CfnFlowLog(this, 'FlowLog', {\n      deliverLogsPermissionArn: this.iamRole ? this.iamRole.roleArn : undefined,\n      logDestinationType: destinationConfig.logDestinationType,\n      logGroupName: this.logGroup ? this.logGroup.logGroupName : undefined,\n      resourceId: props.resourceType.resourceId,\n      resourceType: props.resourceType.resourceType,\n      trafficType: props.trafficType\n        ? props.trafficType\n        : FlowLogTrafficType.ALL,\n      logDestination,\n    });\n\n    this.flowLogId = flowLog.ref;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
