{
  "version": 3,
  "sources": ["ec2-canned-metrics.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nexport class EC2CapacityReservationsMetrics {\n  public static instanceUtilizationAverage(dimensions: { CapacityReservationId: string }) {\n    return {\n      namespace: 'AWS/EC2CapacityReservations',\n      metricName: 'InstanceUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static usedInstanceCountAverage(dimensions: { CapacityReservationId: string }) {\n    return {\n      namespace: 'AWS/EC2CapacityReservations',\n      metricName: 'UsedInstanceCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static availableInstanceCountAverage(dimensions: { CapacityReservationId: string }) {\n    return {\n      namespace: 'AWS/EC2CapacityReservations',\n      metricName: 'AvailableInstanceCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static totalInstanceCountAverage(dimensions: { CapacityReservationId: string }) {\n    return {\n      namespace: 'AWS/EC2CapacityReservations',\n      metricName: 'TotalInstanceCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n}\nexport class EBSMetrics {\n  public static volumeReadBytesSum(dimensions: { VolumeId: string }) {\n    return {\n      namespace: 'AWS/EBS',\n      metricName: 'VolumeReadBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static volumeWriteBytesSum(dimensions: { VolumeId: string }) {\n    return {\n      namespace: 'AWS/EBS',\n      metricName: 'VolumeWriteBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static volumeReadOpsSum(dimensions: { VolumeId: string }) {\n    return {\n      namespace: 'AWS/EBS',\n      metricName: 'VolumeReadOps',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static volumeTotalReadTimeAverage(dimensions: { VolumeId: string }) {\n    return {\n      namespace: 'AWS/EBS',\n      metricName: 'VolumeTotalReadTime',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static volumeWriteOpsSum(dimensions: { VolumeId: string }) {\n    return {\n      namespace: 'AWS/EBS',\n      metricName: 'VolumeWriteOps',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static volumeTotalWriteTimeAverage(dimensions: { VolumeId: string }) {\n    return {\n      namespace: 'AWS/EBS',\n      metricName: 'VolumeTotalWriteTime',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static volumeIdleTimeAverage(dimensions: { VolumeId: string }) {\n    return {\n      namespace: 'AWS/EBS',\n      metricName: 'VolumeIdleTime',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static volumeQueueLengthAverage(dimensions: { VolumeId: string }) {\n    return {\n      namespace: 'AWS/EBS',\n      metricName: 'VolumeQueueLength',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static burstBalanceAverage(dimensions: { VolumeId: string }) {\n    return {\n      namespace: 'AWS/EBS',\n      metricName: 'BurstBalance',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n}\nexport class EC2Metrics {\n  public static cpuCreditUsageAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'CPUCreditUsage',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuCreditBalanceAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'CPUCreditBalance',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuSurplusCreditBalanceAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'CPUSurplusCreditBalance',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuSurplusCreditsChargedAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'CPUSurplusCreditsCharged',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuUtilizationAverage(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static cpuUtilizationAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static cpuUtilizationAverage(dimensions: { AutoScalingGroupName: string }): MetricWithDims<{ AutoScalingGroupName: string }>;\n  public static cpuUtilizationAverage(dimensions: { ImageId: string }): MetricWithDims<{ ImageId: string }>;\n  public static cpuUtilizationAverage(dimensions: { InstanceType: string }): MetricWithDims<{ InstanceType: string }>;\n  public static cpuUtilizationAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'CPUUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskReadBytesAverage(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static diskReadBytesAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static diskReadBytesAverage(dimensions: { AutoScalingGroupName: string }): MetricWithDims<{ AutoScalingGroupName: string }>;\n  public static diskReadBytesAverage(dimensions: { ImageId: string }): MetricWithDims<{ ImageId: string }>;\n  public static diskReadBytesAverage(dimensions: { InstanceType: string }): MetricWithDims<{ InstanceType: string }>;\n  public static diskReadBytesAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'DiskReadBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskReadOpsAverage(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static diskReadOpsAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static diskReadOpsAverage(dimensions: { AutoScalingGroupName: string }): MetricWithDims<{ AutoScalingGroupName: string }>;\n  public static diskReadOpsAverage(dimensions: { ImageId: string }): MetricWithDims<{ ImageId: string }>;\n  public static diskReadOpsAverage(dimensions: { InstanceType: string }): MetricWithDims<{ InstanceType: string }>;\n  public static diskReadOpsAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'DiskReadOps',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskWriteBytesAverage(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static diskWriteBytesAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static diskWriteBytesAverage(dimensions: { AutoScalingGroupName: string }): MetricWithDims<{ AutoScalingGroupName: string }>;\n  public static diskWriteBytesAverage(dimensions: { ImageId: string }): MetricWithDims<{ ImageId: string }>;\n  public static diskWriteBytesAverage(dimensions: { InstanceType: string }): MetricWithDims<{ InstanceType: string }>;\n  public static diskWriteBytesAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'DiskWriteBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskWriteOpsAverage(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static diskWriteOpsAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static diskWriteOpsAverage(dimensions: { AutoScalingGroupName: string }): MetricWithDims<{ AutoScalingGroupName: string }>;\n  public static diskWriteOpsAverage(dimensions: { ImageId: string }): MetricWithDims<{ ImageId: string }>;\n  public static diskWriteOpsAverage(dimensions: { InstanceType: string }): MetricWithDims<{ InstanceType: string }>;\n  public static diskWriteOpsAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'DiskWriteOps',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static metadataNoTokenSum(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static metadataNoTokenSum(dimensions: {  }): MetricWithDims<{  }>;\n  public static metadataNoTokenSum(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'MetadataNoToken',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static networkInAverage(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static networkInAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static networkInAverage(dimensions: { AutoScalingGroupName: string }): MetricWithDims<{ AutoScalingGroupName: string }>;\n  public static networkInAverage(dimensions: { ImageId: string }): MetricWithDims<{ ImageId: string }>;\n  public static networkInAverage(dimensions: { InstanceType: string }): MetricWithDims<{ InstanceType: string }>;\n  public static networkInAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'NetworkIn',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static networkOutAverage(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static networkOutAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static networkOutAverage(dimensions: { AutoScalingGroupName: string }): MetricWithDims<{ AutoScalingGroupName: string }>;\n  public static networkOutAverage(dimensions: { ImageId: string }): MetricWithDims<{ ImageId: string }>;\n  public static networkOutAverage(dimensions: { InstanceType: string }): MetricWithDims<{ InstanceType: string }>;\n  public static networkOutAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'NetworkOut',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static networkPacketsInAverage(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static networkPacketsInAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static networkPacketsInAverage(dimensions: { AutoScalingGroupName: string }): MetricWithDims<{ AutoScalingGroupName: string }>;\n  public static networkPacketsInAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'NetworkPacketsIn',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static networkPacketsOutAverage(dimensions: { InstanceId: string }): MetricWithDims<{ InstanceId: string }>;\n  public static networkPacketsOutAverage(dimensions: {  }): MetricWithDims<{  }>;\n  public static networkPacketsOutAverage(dimensions: { AutoScalingGroupName: string }): MetricWithDims<{ AutoScalingGroupName: string }>;\n  public static networkPacketsOutAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'NetworkPacketsOut',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static statusCheckFailedSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'StatusCheckFailed',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static statusCheckFailedInstanceSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'StatusCheckFailed_Instance',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static statusCheckFailedSystemSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'AWS/EC2',\n      metricName: 'StatusCheckFailed_System',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n}\nexport class CWAgentMetrics {\n  public static cpuUsageIdleAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'cpu_usage_idle',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuUsageIowaitAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'cpu_usage_iowait',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuUsageStealAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'cpu_usage_steal',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuUsageSystemAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'cpu_usage_system',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static cpuUsageUserAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'cpu_usage_user',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskInodesFreeSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'disk_inodes_free',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static diskInodesTotalSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'disk_inodes_total',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static diskInodesUsedSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'disk_inodes_used',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static diskUsedPercentAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'disk_used_percent',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskioIoTimeAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'diskio_io_time',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskioReadBytesAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'diskio_read_bytes',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskioReadsAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'diskio_reads',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskioWriteBytesAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'diskio_write_bytes',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static diskioWritesAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'diskio_writes',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static memCachedAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'mem_cached',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static memTotalAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'mem_total',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static memUsedAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'mem_used',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static memUsedPercentAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'mem_used_percent',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static netstatTcpEstablishedSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'netstat_tcp_established',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static netstatTcpTimeWaitSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'netstat_tcp_time_wait',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static swapUsedPercentAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'swap_used_percent',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static tcPv4ConnectionsEstablishedSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'TCPv4 Connections Established',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static tcPv6ConnectionsEstablishedSum(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'TCPv6 Connections Established',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static memoryCommittedBytesInUseAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'Memory % Committed Bytes In Use',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static processorIdleTimeAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'Processor % Idle Time',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static processorInterruptTimeAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'Processor % Interrupt Time',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static processorUserTimeAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'Processor % User Time',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static logicalDiskFreeSpaceAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'LogicalDisk % Free Space',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static pagingFileUsageAverage(dimensions: { InstanceId: string }) {\n    return {\n      namespace: 'CWAgent',\n      metricName: 'Paging File % Usage',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n}\nexport class NATGatewayMetrics {\n  public static activeConnectionCountMaximum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'ActiveConnectionCount',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static packetsDropCountSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'PacketsDropCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static bytesInFromDestinationSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'BytesInFromDestination',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static bytesInFromSourceSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'BytesInFromSource',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static bytesOutToDestinationSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'BytesOutToDestination',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static bytesOutToSourceSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'BytesOutToSource',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static connectionAttemptCountSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'ConnectionAttemptCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static connectionEstablishedCountSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'ConnectionEstablishedCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static errorPortAllocationSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'ErrorPortAllocation',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static idleTimeoutCountSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'IdleTimeoutCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static packetsInFromDestinationSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'PacketsInFromDestination',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static packetsInFromSourceSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'PacketsInFromSource',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static packetsOutToDestinationSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'PacketsOutToDestination',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static packetsOutToSourceSum(dimensions: { NatGatewayId: string }) {\n    return {\n      namespace: 'AWS/NATGateway',\n      metricName: 'PacketsOutToSource',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n}\nexport class TransitGatewayMetrics {\n  public static bytesInSum(dimensions: { TransitGateway: string }) {\n    return {\n      namespace: 'AWS/TransitGateway',\n      metricName: 'BytesIn',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static bytesOutSum(dimensions: { TransitGateway: string }) {\n    return {\n      namespace: 'AWS/TransitGateway',\n      metricName: 'BytesOut',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static packetDropCountBlackholeSum(dimensions: { TransitGateway: string }) {\n    return {\n      namespace: 'AWS/TransitGateway',\n      metricName: 'PacketDropCountBlackhole',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static packetDropCountNoRouteSum(dimensions: { TransitGateway: string }) {\n    return {\n      namespace: 'AWS/TransitGateway',\n      metricName: 'PacketDropCountNoRoute',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static packetsInSum(dimensions: { TransitGateway: string }) {\n    return {\n      namespace: 'AWS/TransitGateway',\n      metricName: 'PacketsIn',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static packetsOutSum(dimensions: { TransitGateway: string }) {\n    return {\n      namespace: 'AWS/TransitGateway',\n      metricName: 'PacketsOut',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n}\nexport class VPNMetrics {\n  public static tunnelDataInSum(dimensions: { VpnId: string }) {\n    return {\n      namespace: 'AWS/VPN',\n      metricName: 'TunnelDataIn',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static tunnelStateAverage(dimensions: { VpnId: string }) {\n    return {\n      namespace: 'AWS/VPN',\n      metricName: 'TunnelState',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static tunnelDataOutSum(dimensions: { VpnId: string }) {\n    return {\n      namespace: 'AWS/VPN',\n      metricName: 'TunnelDataOut',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n}\ntype MetricWithDims<D> = { namespace: string, metricName: string, statistic: string, dimensionsMap: D };\n"],
  "mappings": "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",
  "names": []
}
