{
  "version": 3,
  "sources": ["client-vpn-route.ts"],
  "sourcesContent": ["import { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { IClientVpnEndpoint } from './client-vpn-endpoint-types';\nimport { CfnClientVpnRoute } from './ec2.generated';\nimport { ISubnet } from './vpc';\n\n/**\n * Options for a ClientVpnRoute\n */\nexport interface ClientVpnRouteOptions {\n  /**\n   * The IPv4 address range, in CIDR notation, of the route destination.\n   *\n   * For example:\n   *   - To add a route for Internet access, enter 0.0.0.0/0\n   *   - To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range\n   *   - To add a route for an on-premises network, enter the AWS Site-to-Site VPN\n   *     connection's IPv4 CIDR range\n   *   - To add a route for the local network, enter the client CIDR range\n   */\n  readonly cidr: string;\n\n  /**\n   * A brief description of the authorization rule.\n   *\n   * @default - no description\n   */\n  readonly description?: string;\n\n  /**\n   * The target for the route\n   */\n  readonly target: ClientVpnRouteTarget;\n}\n\n/**\n * Target for a client VPN route\n */\nexport abstract class ClientVpnRouteTarget {\n  /**\n   * Subnet\n   *\n   * The specified subnet must be an existing target network of the client VPN\n   * endpoint.\n   */\n  public static subnet(subnet: ISubnet): ClientVpnRouteTarget {\n    return { subnetId: subnet.subnetId };\n  }\n\n  /**\n   * Local network\n   */\n  public static local(): ClientVpnRouteTarget {\n    return { subnetId: 'local' };\n  }\n\n  /** The subnet ID */\n  public abstract readonly subnetId: string;\n}\n\n/**\n * Properties for a ClientVpnRoute\n */\nexport interface ClientVpnRouteProps extends ClientVpnRouteOptions {\n\n  /**\n   * The client VPN endpoint to which to add the route.\n   * @default clientVpnEndpoint is required\n   */\n  readonly clientVpnEndpoint?: IClientVpnEndpoint;\n  /**\n   * The client VPN endpoint to which to add the route.\n   * @deprecated Use `clientVpnEndpoint` instead\n   * @default clientVpnEndpoint is required\n\n   */\n  readonly clientVpnEndoint?: IClientVpnEndpoint;\n}\n\n/**\n * A client VPN route\n */\nexport class ClientVpnRoute extends Resource {\n  constructor(scope: Construct, id: string, props: ClientVpnRouteProps) {\n    if (!props.clientVpnEndoint && !props.clientVpnEndpoint) {\n      throw new Error(\n        'ClientVpnRoute: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified',\n      );\n    }\n    if (props.clientVpnEndoint && props.clientVpnEndpoint) {\n      throw new Error(\n        'ClientVpnRoute: either clientVpnEndpoint or clientVpnEndoint (deprecated) must be specified' +\n          ', but not both',\n      );\n    }\n    const clientVpnEndpoint = props.clientVpnEndoint || props.clientVpnEndpoint;\n    super(scope, id);\n    const route = new CfnClientVpnRoute(this, 'Resource', {\n      clientVpnEndpointId: clientVpnEndpoint!.endpointId,\n      description: props.description,\n      destinationCidrBlock: props.cidr,\n      targetVpcSubnetId: props.target.subnetId,\n    });\n\n    // See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnroute.html\n    route.node.addDependency(clientVpnEndpoint!.targetNetworksAssociated);\n  }\n}\n"],
  "mappings": "qPAAA,OAAA,QAAA,YAAA,EAGA,gBAAA,QAAA,iBAAA,EAmCA,MAAsB,oBAAoB,OAO1B,QAAO,OAAe,oEAC3B,CAAE,SAAU,OAAO,QAAQ,QAMtB,QAAK,CACjB,MAAO,CAAE,SAAU,OAAO,GAf9B,QAAA,qBAAA,sIA4CA,MAAa,sBAAuB,QAAA,QAAQ,CAC1C,YAAY,MAAkB,GAAY,MAA0B,CAClE,0EAAI,CAAC,MAAM,kBAAoB,CAAC,MAAM,kBACpC,KAAM,IAAI,OACR,6FAA6F,EAGjG,GAAI,MAAM,kBAAoB,MAAM,kBAClC,KAAM,IAAI,OACR,2GACkB,EAGtB,KAAM,mBAAoB,MAAM,kBAAoB,MAAM,kBAC1D,MAAM,MAAO,EAAE,EASf,AARc,GAAI,iBAAA,kBAAkB,KAAM,WAAY,CACpD,oBAAqB,kBAAmB,WACxC,YAAa,MAAM,YACnB,qBAAsB,MAAM,KAC5B,kBAAmB,MAAM,OAAO,SACjC,EAGK,KAAK,cAAc,kBAAmB,wBAAwB,GAvBxE,QAAA,eAAA",
  "names": []
}
