{
  "version": 3,
  "sources": ["vpc-endpoint.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as cxschema from '../../cloud-assembly-schema';\nimport { Aws, ContextProvider, IResource, Lazy, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { Connections, IConnectable } from './connections';\nimport { CfnVPCEndpoint } from './ec2.generated';\nimport { Peer } from './peer';\nimport { Port } from './port';\nimport { ISecurityGroup, SecurityGroup } from './security-group';\nimport { allRouteTableIds, flatten } from './util';\nimport { ISubnet, IVpc, SubnetSelection } from './vpc';\n\n/**\n * A VPC endpoint.\n */\nexport interface IVpcEndpoint extends IResource {\n  /**\n   * The VPC endpoint identifier.\n   * @attribute\n   */\n  readonly vpcEndpointId: string;\n}\n\nexport abstract class VpcEndpoint extends Resource implements IVpcEndpoint {\n  public abstract readonly vpcEndpointId: string;\n\n  protected policyDocument?: iam.PolicyDocument;\n\n  /**\n   * Adds a statement to the policy document of the VPC endpoint. The statement\n   * must have a Principal.\n   *\n   * Not all interface VPC endpoints support policy. For more information\n   * see https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html\n   *\n   * @param statement the IAM statement to add\n   */\n  public addToPolicy(statement: iam.PolicyStatement) {\n    if (!statement.hasPrincipal) {\n      throw new Error('Statement must have a `Principal`.');\n    }\n\n    if (!this.policyDocument) {\n      this.policyDocument = new iam.PolicyDocument();\n    }\n\n    this.policyDocument.addStatements(statement);\n  }\n}\n\n/**\n * A gateway VPC endpoint.\n */\nexport interface IGatewayVpcEndpoint extends IVpcEndpoint {\n}\n\n/**\n * The type of VPC endpoint.\n */\nexport enum VpcEndpointType {\n  /**\n   * Interface\n   *\n   * An interface endpoint is an elastic network interface with a private IP\n   * address that serves as an entry point for traffic destined to a supported\n   * service.\n   */\n  INTERFACE = 'Interface',\n\n  /**\n   * Gateway\n   *\n   * A gateway endpoint is a gateway that is a target for a specified route in\n   * your route table, used for traffic destined to a supported AWS service.\n   */\n  GATEWAY = 'Gateway'\n}\n\n/**\n * A service for a gateway VPC endpoint.\n */\nexport interface IGatewayVpcEndpointService {\n  /**\n   * The name of the service.\n   */\n  readonly name: string;\n}\n\n/**\n * An AWS service for a gateway VPC endpoint.\n */\nexport class GatewayVpcEndpointAwsService implements IGatewayVpcEndpointService {\n  public static readonly DYNAMODB = new GatewayVpcEndpointAwsService('dynamodb');\n  public static readonly S3 = new GatewayVpcEndpointAwsService('s3');\n\n  /**\n   * The name of the service.\n   */\n  public readonly name: string;\n\n  constructor(name: string, prefix?: string) {\n    this.name = `${prefix || 'com.amazonaws'}.${Aws.REGION}.${name}`;\n  }\n}\n\n/**\n * Options to add a gateway endpoint to a VPC.\n */\nexport interface GatewayVpcEndpointOptions {\n  /**\n   * The service to use for this gateway VPC endpoint.\n   */\n  readonly service: IGatewayVpcEndpointService;\n\n  /**\n   * Where to add endpoint routing.\n   *\n   * By default, this endpoint will be routable from all subnets in the VPC.\n   * Specify a list of subnet selection objects here to be more specific.\n   *\n   * @default - All subnets in the VPC\n   * @example\n   *\n   * declare const vpc: ec2.Vpc;\n   *\n   * vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n   *   service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n   *   // Add only to ISOLATED subnets\n   *   subnets: [\n   *     { subnetType: ec2.SubnetType.PRIVATE_ISOLATED }\n   *   ]\n   * });\n   *\n   *\n   */\n  readonly subnets?: SubnetSelection[]\n}\n\n/**\n * Construction properties for a GatewayVpcEndpoint.\n */\nexport interface GatewayVpcEndpointProps extends GatewayVpcEndpointOptions {\n  /**\n   * The VPC network in which the gateway endpoint will be used.\n   */\n  readonly vpc: IVpc\n}\n\n/**\n * A gateway VPC endpoint.\n * @resource AWS::EC2::VPCEndpoint\n */\nexport class GatewayVpcEndpoint extends VpcEndpoint implements IGatewayVpcEndpoint {\n\n  public static fromGatewayVpcEndpointId(scope: Construct, id: string, gatewayVpcEndpointId: string): IGatewayVpcEndpoint {\n    class Import extends VpcEndpoint {\n      public vpcEndpointId = gatewayVpcEndpointId;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The gateway VPC endpoint identifier.\n   */\n  public readonly vpcEndpointId: string;\n\n  /**\n   * The date and time the gateway VPC endpoint was created.\n   * @attribute\n   */\n  public readonly vpcEndpointCreationTimestamp: string;\n\n  /**\n   * @attribute\n   */\n  public readonly vpcEndpointNetworkInterfaceIds: string[];\n\n  /**\n   * @attribute\n   */\n  public readonly vpcEndpointDnsEntries: string[];\n\n  constructor(scope: Construct, id: string, props: GatewayVpcEndpointProps) {\n    super(scope, id);\n\n    const subnets: ISubnet[] = props.subnets\n      ? flatten(props.subnets.map(s => props.vpc.selectSubnets(s).subnets))\n      : [...props.vpc.privateSubnets, ...props.vpc.publicSubnets, ...props.vpc.isolatedSubnets];\n    const routeTableIds = allRouteTableIds(subnets);\n\n    if (routeTableIds.length === 0) {\n      throw new Error('Can\\'t add a gateway endpoint to VPC; route table IDs are not available');\n    }\n\n    const endpoint = new CfnVPCEndpoint(this, 'Resource', {\n      policyDocument: Lazy.any({ produce: () => this.policyDocument }),\n      routeTableIds,\n      serviceName: props.service.name,\n      vpcEndpointType: VpcEndpointType.GATEWAY,\n      vpcId: props.vpc.vpcId,\n    });\n\n    this.vpcEndpointId = endpoint.ref;\n    this.vpcEndpointCreationTimestamp = endpoint.attrCreationTimestamp;\n    this.vpcEndpointDnsEntries = endpoint.attrDnsEntries;\n    this.vpcEndpointNetworkInterfaceIds = endpoint.attrNetworkInterfaceIds;\n  }\n}\n\n/**\n * A service for an interface VPC endpoint.\n */\nexport interface IInterfaceVpcEndpointService {\n  /**\n   * The name of the service.\n   */\n  readonly name: string;\n\n  /**\n   * The port of the service.\n   */\n  readonly port: number;\n\n  /**\n   * Whether Private DNS is supported by default.\n   */\n  readonly privateDnsDefault?: boolean;\n}\n\n/**\n * A custom-hosted service for an interface VPC endpoint.\n */\nexport class InterfaceVpcEndpointService implements IInterfaceVpcEndpointService {\n\n  /**\n   * The name of the service.\n   */\n  public readonly name: string;\n\n  /**\n   * The port of the service.\n   */\n  public readonly port: number;\n\n  /**\n   * Whether Private DNS is supported by default.\n   */\n  public readonly privateDnsDefault?: boolean = false;\n\n  constructor(name: string, port?: number) {\n    this.name = name;\n    this.port = port || 443;\n  }\n}\n\n/**\n * An AWS service for an interface VPC endpoint.\n */\nexport class InterfaceVpcEndpointAwsService implements IInterfaceVpcEndpointService {\n  public static readonly SAGEMAKER_NOTEBOOK = new InterfaceVpcEndpointAwsService('notebook', 'aws.sagemaker');\n  public static readonly ATHENA = new InterfaceVpcEndpointAwsService('athena');\n  public static readonly CLOUDFORMATION = new InterfaceVpcEndpointAwsService('cloudformation');\n  public static readonly CLOUDTRAIL = new InterfaceVpcEndpointAwsService('cloudtrail');\n  public static readonly CODEBUILD = new InterfaceVpcEndpointAwsService('codebuild');\n  public static readonly CODEBUILD_FIPS = new InterfaceVpcEndpointAwsService('codebuild-fips');\n  public static readonly CODECOMMIT = new InterfaceVpcEndpointAwsService('codecommit');\n  public static readonly CODECOMMIT_FIPS = new InterfaceVpcEndpointAwsService('codecommit-fips');\n  public static readonly CODEGURU_PROFILER = new InterfaceVpcEndpointAwsService('codeguru-profiler');\n  public static readonly CODEGURU_REVIEWER = new InterfaceVpcEndpointAwsService('codeguru-reviewer');\n  public static readonly CODEPIPELINE = new InterfaceVpcEndpointAwsService('codepipeline');\n  public static readonly CONFIG = new InterfaceVpcEndpointAwsService('config');\n  public static readonly EC2 = new InterfaceVpcEndpointAwsService('ec2');\n  public static readonly EC2_MESSAGES = new InterfaceVpcEndpointAwsService('ec2messages');\n  public static readonly ECR = new InterfaceVpcEndpointAwsService('ecr.api');\n  public static readonly ECR_DOCKER = new InterfaceVpcEndpointAwsService('ecr.dkr');\n  public static readonly ECS = new InterfaceVpcEndpointAwsService('ecs');\n  public static readonly ECS_AGENT = new InterfaceVpcEndpointAwsService('ecs-agent');\n  public static readonly ECS_TELEMETRY = new InterfaceVpcEndpointAwsService('ecs-telemetry');\n  public static readonly ELASTIC_FILESYSTEM = new InterfaceVpcEndpointAwsService('elasticfilesystem');\n  public static readonly ELASTIC_FILESYSTEM_FIPS = new InterfaceVpcEndpointAwsService('elasticfilesystem-fips');\n  public static readonly ELASTIC_INFERENCE_RUNTIME = new InterfaceVpcEndpointAwsService('elastic-inference.runtime');\n  public static readonly ELASTIC_LOAD_BALANCING = new InterfaceVpcEndpointAwsService('elasticloadbalancing');\n  public static readonly CLOUDWATCH_EVENTS = new InterfaceVpcEndpointAwsService('events');\n  public static readonly APIGATEWAY = new InterfaceVpcEndpointAwsService('execute-api');\n  public static readonly CODECOMMIT_GIT = new InterfaceVpcEndpointAwsService('git-codecommit');\n  public static readonly CODECOMMIT_GIT_FIPS = new InterfaceVpcEndpointAwsService('git-codecommit-fips');\n  public static readonly GLUE = new InterfaceVpcEndpointAwsService('glue');\n  public static readonly KEYSPACES = new InterfaceVpcEndpointAwsService('cassandra', '', 9142);\n  public static readonly KINESIS_STREAMS = new InterfaceVpcEndpointAwsService('kinesis-streams');\n  public static readonly KINESIS_FIREHOSE = new InterfaceVpcEndpointAwsService('kinesis-firehose');\n  public static readonly KMS = new InterfaceVpcEndpointAwsService('kms');\n  public static readonly CLOUDWATCH_LOGS = new InterfaceVpcEndpointAwsService('logs');\n  public static readonly CLOUDWATCH = new InterfaceVpcEndpointAwsService('monitoring');\n  public static readonly RDS = new InterfaceVpcEndpointAwsService('rds');\n  public static readonly RDS_DATA = new InterfaceVpcEndpointAwsService('rds-data');\n  public static readonly SAGEMAKER_API = new InterfaceVpcEndpointAwsService('sagemaker.api');\n  public static readonly SAGEMAKER_RUNTIME = new InterfaceVpcEndpointAwsService('sagemaker.runtime');\n  public static readonly SAGEMAKER_RUNTIME_FIPS = new InterfaceVpcEndpointAwsService('sagemaker.runtime-fips');\n  public static readonly SECRETS_MANAGER = new InterfaceVpcEndpointAwsService('secretsmanager');\n  public static readonly SERVICE_CATALOG = new InterfaceVpcEndpointAwsService('servicecatalog');\n  public static readonly SNS = new InterfaceVpcEndpointAwsService('sns');\n  public static readonly SQS = new InterfaceVpcEndpointAwsService('sqs');\n  public static readonly SSM = new InterfaceVpcEndpointAwsService('ssm');\n  public static readonly SSM_MESSAGES = new InterfaceVpcEndpointAwsService('ssmmessages');\n  public static readonly STS = new InterfaceVpcEndpointAwsService('sts');\n  public static readonly TRANSFER = new InterfaceVpcEndpointAwsService('transfer.server');\n  public static readonly STORAGE_GATEWAY = new InterfaceVpcEndpointAwsService('storagegateway');\n  public static readonly REKOGNITION = new InterfaceVpcEndpointAwsService('rekognition');\n  public static readonly REKOGNITION_FIPS = new InterfaceVpcEndpointAwsService('rekognition-fips');\n  public static readonly STEP_FUNCTIONS = new InterfaceVpcEndpointAwsService('states');\n  public static readonly LAMBDA = new InterfaceVpcEndpointAwsService('lambda');\n  public static readonly TRANSCRIBE = new InterfaceVpcEndpointAwsService('transcribe');\n  public static readonly XRAY = new InterfaceVpcEndpointAwsService('xray');\n\n  /**\n   * The name of the service.\n   */\n  public readonly name: string;\n\n  /**\n   * The port of the service.\n   */\n  public readonly port: number;\n\n  /**\n   * Whether Private DNS is supported by default.\n   */\n  public readonly privateDnsDefault?: boolean = true;\n\n  constructor(name: string, prefix?: string, port?: number) {\n    const region = Lazy.uncachedString({\n      produce: (context) => Stack.of(context.scope).region,\n    });\n    const defaultEndpointPrefix = Lazy.uncachedString({\n      produce: (context) => {\n        const regionName = Stack.of(context.scope).region;\n        return this.getDefaultEndpointPrefix(name, regionName);\n      },\n    });\n    const defaultEndpointSuffix = Lazy.uncachedString({\n      produce: (context) => {\n        const regionName = Stack.of(context.scope).region;\n        return this.getDefaultEndpointSuffix(name, regionName);\n      },\n    });\n\n    this.name = `${prefix || defaultEndpointPrefix}.${region}.${name}${defaultEndpointSuffix}`;\n    this.port = port || 443;\n  }\n\n  /**\n   * Get the endpoint prefix for the service in the specified region\n   * because the prefix for some of the services in cn-north-1 and cn-northwest-1 are different\n   *\n   * For future maintenance\uFF0C the vpc endpoint services could be fetched using AWS CLI Commmand:\n   * aws ec2 describe-vpc-endpoint-services\n   */\n  private getDefaultEndpointPrefix(name: string, region: string) {\n    const VPC_ENDPOINT_SERVICE_EXCEPTIONS: { [region: string]: string[] } = {\n      'cn-north-1': ['application-autoscaling', 'athena', 'autoscaling', 'awsconnector', 'cassandra',\n        'cloudformation', 'codedeploy-commands-secure', 'databrew', 'dms', 'ebs', 'ec2', 'ecr.api', 'ecr.dkr',\n        'elasticbeanstalk', 'elasticfilesystem', 'elasticfilesystem-fips', 'execute-api', 'imagebuilder',\n        'iotsitewise.api', 'iotsitewise.data', 'kinesis-streams', 'lambda', 'license-manager', 'monitoring',\n        'rds', 'redshift', 'redshift-data', 's3', 'sagemaker.api', 'sagemaker.featurestore-runtime',\n        'sagemaker.runtime', 'servicecatalog', 'sms', 'sqs', 'states', 'sts', 'synthetics', 'transcribe',\n        'transcribestreaming', 'transfer', 'xray'],\n      'cn-northwest-1': ['application-autoscaling', 'athena', 'autoscaling', 'awsconnector', 'cassandra',\n        'cloudformation', 'codedeploy-commands-secure', 'databrew', 'dms', 'ebs', 'ec2', 'ecr.api', 'ecr.dkr',\n        'elasticbeanstalk', 'elasticfilesystem', 'elasticfilesystem-fips', 'execute-api', 'imagebuilder',\n        'kinesis-streams', 'lambda', 'license-manager', 'monitoring', 'rds', 'redshift', 'redshift-data', 's3',\n        'sagemaker.api', 'sagemaker.featurestore-runtime', 'sagemaker.runtime', 'servicecatalog', 'sms', 'sqs',\n        'states', 'sts', 'synthetics', 'transcribe', 'transcribestreaming', 'transfer', 'workspaces', 'xray'],\n    };\n    if (VPC_ENDPOINT_SERVICE_EXCEPTIONS[region]?.includes(name)) {\n      return 'cn.com.amazonaws';\n    } else {\n      return 'com.amazonaws';\n    }\n  }\n\n  /**\n   * Get the endpoint suffix for the service in the specified region.\n   * In cn-north-1 and cn-northwest-1, the vpc endpoint of transcribe is:\n   *   cn.com.amazonaws.cn-north-1.transcribe.cn\n   *   cn.com.amazonaws.cn-northwest-1.transcribe.cn\n   * so suffix '.cn' should be return in these scenarios.\n   *\n   * For future maintenance\uFF0C the vpc endpoint services could be fetched using AWS CLI Commmand:\n   * aws ec2 describe-vpc-endpoint-services\n   */\n  private getDefaultEndpointSuffix(name: string, region: string) {\n    const VPC_ENDPOINT_SERVICE_EXCEPTIONS: { [region: string]: string[] } = {\n      'cn-north-1': ['transcribe'],\n      'cn-northwest-1': ['transcribe'],\n    };\n    return VPC_ENDPOINT_SERVICE_EXCEPTIONS[region]?.includes(name) ? '.cn' : '';\n  }\n}\n\n/**\n * Options to add an interface endpoint to a VPC.\n */\nexport interface InterfaceVpcEndpointOptions {\n  /**\n   * The service to use for this interface VPC endpoint.\n   */\n  readonly service: IInterfaceVpcEndpointService;\n\n  /**\n   * Whether to associate a private hosted zone with the specified VPC. This\n   * allows you to make requests to the service using its default DNS hostname.\n   *\n   * @default set by the instance of IInterfaceVpcEndpointService, or true if\n   * not defined by the instance of IInterfaceVpcEndpointService\n   */\n  readonly privateDnsEnabled?: boolean;\n\n  /**\n   * The subnets in which to create an endpoint network interface. At most one\n   * per availability zone.\n   *\n   * @default - private subnets\n   */\n  readonly subnets?: SubnetSelection;\n\n  /**\n   * The security groups to associate with this interface VPC endpoint.\n   *\n   * @default - a new security group is created\n   */\n  readonly securityGroups?: ISecurityGroup[];\n\n  /**\n   * Whether to automatically allow VPC traffic to the endpoint\n   *\n   * If enabled, all traffic to the endpoint from within the VPC will be\n   * automatically allowed. This is done based on the VPC's CIDR range.\n   *\n   * @default true\n   */\n  readonly open?: boolean;\n\n  /**\n   * Limit to only those availability zones where the endpoint service can be created\n   *\n   * Setting this to 'true' requires a lookup to be performed at synthesis time. Account\n   * and region must be set on the containing stack for this to work.\n   *\n   * @default false\n   */\n  readonly lookupSupportedAzs?: boolean;\n}\n\n/**\n * Construction properties for an InterfaceVpcEndpoint.\n */\nexport interface InterfaceVpcEndpointProps extends InterfaceVpcEndpointOptions {\n  /**\n   * The VPC network in which the interface endpoint will be used.\n   */\n  readonly vpc: IVpc\n}\n\n/**\n * An interface VPC endpoint.\n */\nexport interface IInterfaceVpcEndpoint extends IVpcEndpoint, IConnectable {\n}\n\n/**\n * A interface VPC endpoint.\n * @resource AWS::EC2::VPCEndpoint\n */\nexport class InterfaceVpcEndpoint extends VpcEndpoint implements IInterfaceVpcEndpoint {\n  /**\n   * Imports an existing interface VPC endpoint.\n   */\n  public static fromInterfaceVpcEndpointAttributes(scope: Construct, id: string, attrs: InterfaceVpcEndpointAttributes): IInterfaceVpcEndpoint {\n    const securityGroups = attrs.securityGroupId\n      ? [SecurityGroup.fromSecurityGroupId(scope, 'SecurityGroup', attrs.securityGroupId)]\n      : attrs.securityGroups;\n\n    class Import extends Resource implements IInterfaceVpcEndpoint {\n      public readonly vpcEndpointId = attrs.vpcEndpointId;\n      public readonly connections = new Connections({\n        defaultPort: Port.tcp(attrs.port),\n        securityGroups,\n      });\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The interface VPC endpoint identifier.\n   */\n  public readonly vpcEndpointId: string;\n\n  /**\n   * The date and time the interface VPC endpoint was created.\n   * @attribute\n   */\n  public readonly vpcEndpointCreationTimestamp: string;\n\n  /**\n   * The DNS entries for the interface VPC endpoint.\n   * @attribute\n   */\n  public readonly vpcEndpointDnsEntries: string[];\n\n  /**\n   * One or more network interfaces for the interface VPC endpoint.\n   * @attribute\n   */\n  public readonly vpcEndpointNetworkInterfaceIds: string[];\n\n  /**\n   * The identifier of the first security group associated with this interface\n   * VPC endpoint.\n   *\n   * @deprecated use the `connections` object\n   */\n  public readonly securityGroupId: string;\n\n  /**\n   * Access to network connections.\n   */\n  public readonly connections: Connections;\n\n  constructor(scope: Construct, id: string, props: InterfaceVpcEndpointProps) {\n    super(scope, id);\n\n    const securityGroups = props.securityGroups || [new SecurityGroup(this, 'SecurityGroup', {\n      vpc: props.vpc,\n    })];\n\n    this.securityGroupId = securityGroups[0].securityGroupId;\n    this.connections = new Connections({\n      defaultPort: Port.tcp(props.service.port),\n      securityGroups,\n    });\n\n    if (props.open !== false) {\n      this.connections.allowDefaultPortFrom(Peer.ipv4(props.vpc.vpcCidrBlock));\n    }\n\n    // Determine which subnets to place the endpoint in\n    const subnetIds = this.endpointSubnets(props);\n\n    const endpoint = new CfnVPCEndpoint(this, 'Resource', {\n      privateDnsEnabled: props.privateDnsEnabled ?? props.service.privateDnsDefault ?? true,\n      policyDocument: Lazy.any({ produce: () => this.policyDocument }),\n      securityGroupIds: securityGroups.map(s => s.securityGroupId),\n      serviceName: props.service.name,\n      vpcEndpointType: VpcEndpointType.INTERFACE,\n      subnetIds,\n      vpcId: props.vpc.vpcId,\n    });\n\n    this.vpcEndpointId = endpoint.ref;\n    this.vpcEndpointCreationTimestamp = endpoint.attrCreationTimestamp;\n    this.vpcEndpointDnsEntries = endpoint.attrDnsEntries;\n    this.vpcEndpointNetworkInterfaceIds = endpoint.attrNetworkInterfaceIds;\n  }\n\n  /**\n   * Determine which subnets to place the endpoint in. This is in its own function\n   * because there's a lot of code.\n   */\n  private endpointSubnets(props: InterfaceVpcEndpointProps) {\n    const lookupSupportedAzs = props.lookupSupportedAzs ?? false;\n    const subnetSelection = props.vpc.selectSubnets({ ...props.subnets, onePerAz: true });\n    const subnets = subnetSelection.subnets;\n\n    // Sanity check the subnet count\n    if (!subnetSelection.isPendingLookup && subnetSelection.subnets.length == 0) {\n      throw new Error('Cannot create a VPC Endpoint with no subnets');\n    }\n\n    // If we aren't going to lookup supported AZs we'll exit early, returning the subnetIds from the provided subnet selection\n    if (!lookupSupportedAzs) {\n      return subnetSelection.subnetIds;\n    }\n\n    // Some service names, such as AWS service name references, use Tokens to automatically fill in the region\n    // If it is an InterfaceVpcEndpointAwsService, then the reference will be resolvable since it only references the region\n    const isAwsService = Token.isUnresolved(props.service.name) && props.service instanceof InterfaceVpcEndpointAwsService;\n\n    // Determine what service name gets pass to the context provider\n    // If it is an AWS service it will have a REGION token\n    const lookupServiceName = isAwsService ? Stack.of(this).resolve(props.service.name) : props.service.name;\n\n    // Check that the lookup will work\n    this.validateCanLookupSupportedAzs(subnets, lookupServiceName);\n\n    // Do the actual lookup for AZs\n    const availableAZs = this.availableAvailabilityZones(lookupServiceName);\n    const filteredSubnets = subnets.filter(s => availableAZs.includes(s.availabilityZone));\n\n    // Throw an error if the lookup filtered out all subnets\n    // VpcEndpoints must be created with at least one AZ\n    if (filteredSubnets.length == 0) {\n      throw new Error(`lookupSupportedAzs returned ${availableAZs} but subnets have AZs ${subnets.map(s => s.availabilityZone)}`);\n    }\n    return filteredSubnets.map(s => s.subnetId);\n  }\n\n  /**\n   * Sanity checking when looking up AZs for an endpoint service, to make sure it won't fail\n   */\n  private validateCanLookupSupportedAzs(subnets: ISubnet[], serviceName: string) {\n\n    // Having any of these be true will cause the AZ lookup to fail at synthesis time\n    const agnosticAcct = Token.isUnresolved(this.stack.account);\n    const agnosticRegion = Token.isUnresolved(this.stack.region);\n    const agnosticService = Token.isUnresolved(serviceName);\n\n    // Having subnets with Token AZs can cause the endpoint to be created with no subnets, failing at deployment time\n    const agnosticSubnets = subnets.some(s => Token.isUnresolved(s.availabilityZone));\n    const agnosticSubnetList = Token.isUnresolved(subnets.map(s => s.availabilityZone));\n\n    // Context provider cannot make an AWS call without an account/region\n    if (agnosticAcct || agnosticRegion) {\n      throw new Error('Cannot look up VPC endpoint availability zones if account/region are not specified');\n    }\n\n    // The AWS call will fail if there is a Token in the service name\n    if (agnosticService) {\n      throw new Error(`Cannot lookup AZs for a service name with a Token: ${serviceName}`);\n    }\n\n    // The AWS call return strings for AZs, like us-east-1a, us-east-1b, etc\n    // If the subnet AZs are Tokens, a string comparison between the subnet AZs and the AZs from the AWS call\n    // will not match\n    if (agnosticSubnets || agnosticSubnetList) {\n      const agnostic = subnets.filter(s => Token.isUnresolved(s.availabilityZone));\n      throw new Error(`lookupSupportedAzs cannot filter on subnets with Token AZs: ${agnostic}`);\n    }\n  }\n\n  private availableAvailabilityZones(serviceName: string): string[] {\n    // Here we check what AZs the endpoint service is available in\n    // If for whatever reason we can't retrieve the AZs, and no context is set,\n    // we will fall back to all AZs\n    const availableAZs = ContextProvider.getValue(this, {\n      provider: cxschema.ContextProvider.ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER,\n      dummyValue: this.stack.availabilityZones,\n      props: { serviceName },\n    }).value;\n    if (!Array.isArray(availableAZs)) {\n      throw new Error(`Discovered AZs for endpoint service ${serviceName} must be an array`);\n    }\n    return availableAZs;\n  }\n}\n\n/**\n * Construction properties for an ImportedInterfaceVpcEndpoint.\n */\nexport interface InterfaceVpcEndpointAttributes {\n  /**\n   * The interface VPC endpoint identifier.\n   */\n  readonly vpcEndpointId: string;\n\n  /**\n   * The identifier of the security group associated with the interface VPC endpoint.\n   *\n   * @deprecated use `securityGroups` instead\n   */\n  readonly securityGroupId?: string;\n\n  /**\n   * The security groups associated with the interface VPC endpoint.\n   *\n   */\n  readonly securityGroups?: ISecurityGroup[];\n\n  /**\n   * The port of the service of the interface VPC endpoint.\n   */\n  readonly port: number;\n}\n"],
  "mappings": "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",
  "names": []
}
