{
  "version": 3,
  "sources": ["vpn.ts"],
  "sourcesContent": ["import * as net from 'net';\nimport * as cloudwatch from '../../aws-cloudwatch';\nimport { IResource, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport {\n  CfnCustomerGateway,\n  CfnVPNConnection,\n  CfnVPNConnectionRoute,\n  CfnVPNGateway,\n} from './ec2.generated';\nimport { IVpc, SubnetSelection } from './vpc';\n\nexport interface IVpnConnection extends IResource {\n  /**\n   * The id of the VPN connection.\n   */\n  readonly vpnId: string;\n\n  /**\n   * The id of the customer gateway.\n   */\n  readonly customerGatewayId: string;\n\n  /**\n   * The ip address of the customer gateway.\n   */\n  readonly customerGatewayIp: string;\n\n  /**\n   * The ASN of the customer gateway.\n   */\n  readonly customerGatewayAsn: number;\n}\n\n/**\n * The virtual private gateway interface\n */\nexport interface IVpnGateway extends IResource {\n\n  /**\n   * The virtual private gateway Id\n   */\n  readonly gatewayId: string\n}\n\nexport interface VpnTunnelOption {\n  /**\n   * The pre-shared key (PSK) to establish initial authentication between the virtual\n   * private gateway and customer gateway. Allowed characters are alphanumeric characters\n   * and ._. Must be between 8 and 64 characters in length and cannot start with zero (0).\n   *\n   * @default an Amazon generated pre-shared key\n   */\n  readonly preSharedKey?: string;\n\n  /**\n   * The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be\n   * unique across all VPN connections that use the same virtual private gateway.\n   * A size /30 CIDR block from the 169.254.0.0/16 range.\n   *\n   * @default an Amazon generated inside IP CIDR\n   */\n  readonly tunnelInsideCidr?: string;\n}\n\nexport interface VpnConnectionOptions {\n  /**\n   * The ip address of the customer gateway.\n   */\n  readonly ip: string;\n\n  /**\n   * The ASN of the customer gateway.\n   *\n   * @default 65000\n   */\n  readonly asn?: number;\n\n  /**\n   * The static routes to be routed from the VPN gateway to the customer gateway.\n   *\n   * @default Dynamic routing (BGP)\n   */\n  readonly staticRoutes?: string[];\n\n  /**\n   * The tunnel options for the VPN connection. At most two elements (one per tunnel).\n   * Duplicates not allowed.\n   *\n   * @default Amazon generated tunnel options\n   */\n  readonly tunnelOptions?: VpnTunnelOption[];\n}\n\n/**\n * The VpnGateway Properties\n */\nexport interface VpnGatewayProps {\n\n  /**\n   * Default type ipsec.1\n   */\n  readonly type: string;\n\n  /**\n   * Explicitly specify an Asn or let aws pick an Asn for you.\n   * @default 65000\n   */\n  readonly amazonSideAsn?: number;\n}\n\n/**\n * Options for the Vpc.enableVpnGateway() method\n */\nexport interface EnableVpnGatewayOptions extends VpnGatewayProps {\n  /**\n   * Provide an array of subnets where the route propagation should be added.\n   * @default noPropagation\n   */\n  readonly vpnRoutePropagation?: SubnetSelection[]\n}\n\nexport interface VpnConnectionProps extends VpnConnectionOptions {\n  /**\n   * The VPC to connect to.\n   */\n  readonly vpc: IVpc;\n}\n\n/**\n * The VPN connection type.\n */\nexport enum VpnConnectionType {\n  /**\n   * The IPsec 1 VPN connection type.\n   */\n  IPSEC_1 = 'ipsec.1',\n\n  /**\n   * Dummy member\n   * TODO: remove once https://github.com/aws/jsii/issues/231 is fixed\n   */\n  DUMMY = 'dummy'\n}\n\n/**\n * The VPN Gateway that shall be added to the VPC\n *\n * @resource AWS::EC2::VPNGateway\n */\nexport class VpnGateway extends Resource implements IVpnGateway {\n\n  /**\n   * The virtual private gateway Id\n   */\n  public readonly gatewayId: string;\n\n  constructor(scope: Construct, id: string, props: VpnGatewayProps) {\n    super(scope, id);\n\n    // This is 'Default' instead of 'Resource', because using 'Default' will generate\n    // a logical ID for a VpnGateway which is exactly the same as the logical ID that used\n    // to be created for the CfnVPNGateway (and 'Resource' would not do that).\n    const vpnGW = new CfnVPNGateway(this, 'Default', props);\n    this.gatewayId = vpnGW.ref;\n  }\n}\n/**\n * Define a VPN Connection\n *\n * @resource AWS::EC2::VPNConnection\n */\nexport class VpnConnection extends Resource implements IVpnConnection {\n  /**\n   * Return the given named metric for all VPN connections in the account/region.\n   */\n  public static metricAll(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/VPN',\n      metricName,\n      ...props,\n    });\n  }\n\n  /**\n   * Metric for the tunnel state of all VPN connections in the account/region.\n   *\n   * @default average over 5 minutes\n   */\n  public static metricAllTunnelState(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.metricAll('TunnelState', { statistic: 'avg', ...props });\n  }\n\n  /**\n   * Metric for the tunnel data in of all VPN connections in the account/region.\n   *\n   * @default sum over 5 minutes\n   */\n  public static metricAllTunnelDataIn(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.metricAll('TunnelDataIn', { statistic: 'sum', ...props });\n  }\n\n  /**\n   * Metric for the tunnel data out of all VPN connections.\n   *\n   * @default sum over 5 minutes\n   */\n  public static metricAllTunnelDataOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.metricAll('TunnelDataOut', { statistic: 'sum', ...props });\n  }\n\n  public readonly vpnId: string;\n  public readonly customerGatewayId: string;\n  public readonly customerGatewayIp: string;\n  public readonly customerGatewayAsn: number;\n\n  constructor(scope: Construct, id: string, props: VpnConnectionProps) {\n    super(scope, id);\n\n    if (!props.vpc.vpnGatewayId) {\n      props.vpc.enableVpnGateway({\n        type: 'ipsec.1',\n        amazonSideAsn: props.asn,\n      });\n    }\n\n    if (!Token.isUnresolved(props.ip) && !net.isIPv4(props.ip)) {\n      throw new Error(`The \\`ip\\` ${props.ip} is not a valid IPv4 address.`);\n    }\n\n    const type = VpnConnectionType.IPSEC_1;\n    const bgpAsn = props.asn || 65000;\n\n    const customerGateway = new CfnCustomerGateway(this, 'CustomerGateway', {\n      bgpAsn,\n      ipAddress: props.ip,\n      type,\n    });\n\n    this.customerGatewayId = customerGateway.ref;\n    this.customerGatewayAsn = bgpAsn;\n    this.customerGatewayIp = props.ip;\n\n    // Validate tunnel options\n    if (props.tunnelOptions) {\n      if (props.tunnelOptions.length > 2) {\n        throw new Error('Cannot specify more than two `tunnelOptions`');\n      }\n\n      if (props.tunnelOptions.length === 2 && props.tunnelOptions[0].tunnelInsideCidr === props.tunnelOptions[1].tunnelInsideCidr) {\n        throw new Error(`Same ${props.tunnelOptions[0].tunnelInsideCidr} \\`tunnelInsideCidr\\` cannot be used for both tunnels.`);\n      }\n\n      props.tunnelOptions.forEach((options, index) => {\n        if (options.preSharedKey && !Token.isUnresolved(options.preSharedKey) && !/^[a-zA-Z1-9._][a-zA-Z\\d._]{7,63}$/.test(options.preSharedKey)) {\n          /* eslint-disable max-len */\n          throw new Error(`The \\`preSharedKey\\` ${options.preSharedKey} for tunnel ${index + 1} is invalid. Allowed characters are alphanumeric characters and ._. Must be between 8 and 64 characters in length and cannot start with zero (0).`);\n          /* eslint-enable max-len */\n        }\n\n        if (options.tunnelInsideCidr) {\n          if (RESERVED_TUNNEL_INSIDE_CIDR.includes(options.tunnelInsideCidr)) {\n            throw new Error(`The \\`tunnelInsideCidr\\` ${options.tunnelInsideCidr} for tunnel ${index + 1} is a reserved inside CIDR.`);\n          }\n\n          if (!/^169\\.254\\.\\d{1,3}\\.\\d{1,3}\\/30$/.test(options.tunnelInsideCidr)) {\n            /* eslint-disable-next-line max-len */\n            throw new Error(`The \\`tunnelInsideCidr\\` ${options.tunnelInsideCidr} for tunnel ${index + 1} is not a size /30 CIDR block from the 169.254.0.0/16 range.`);\n          }\n        }\n      });\n    }\n\n    const vpnConnection = new CfnVPNConnection(this, 'Resource', {\n      type,\n      customerGatewayId: customerGateway.ref,\n      staticRoutesOnly: props.staticRoutes ? true : false,\n      vpnGatewayId: props.vpc.vpnGatewayId,\n      vpnTunnelOptionsSpecifications: props.tunnelOptions,\n    });\n\n    this.vpnId = vpnConnection.ref;\n\n    if (props.staticRoutes) {\n      props.staticRoutes.forEach(route => {\n        new CfnVPNConnectionRoute(this, `Route${route.replace(/[^\\d]/g, '')}`, {\n          destinationCidrBlock: route,\n          vpnConnectionId: this.vpnId,\n        });\n      });\n    }\n  }\n}\n\nexport const RESERVED_TUNNEL_INSIDE_CIDR = [\n  '169.254.0.0/30',\n  '169.254.1.0/30',\n  '169.254.2.0/30',\n  '169.254.3.0/30',\n  '169.254.4.0/30',\n  '169.254.5.0/30',\n  '169.254.169.252/30',\n];\n"],
  "mappings": "wSAAA,IAAA,QAAA,KAAA,EACA,WAAA,QAAA,sBAAA,EACA,OAAA,QAAA,YAAA,EAEA,gBAAA,QAAA,iBAAA,EAgIA,GAAY,mBAAZ,AAAA,UAAY,mBAAiB,CAI3B,mBAAA,QAAA,UAMA,mBAAA,MAAA,OACF,GAXY,kBAAA,QAAA,mBAAA,SAAA,kBAAiB,CAAA,EAAA,EAkB7B,MAAa,kBAAmB,QAAA,QAAQ,CAOtC,YAAY,MAAkB,GAAY,MAAsB,CAC9D,MAAM,MAAO,EAAE,qEAKf,KAAM,OAAQ,GAAI,iBAAA,cAAc,KAAM,UAAW,KAAK,EACtD,KAAK,UAAY,MAAM,KAd3B,QAAA,WAAA,wGAsBA,MAAa,qBAAsB,QAAA,QAAQ,CA4CzC,YAAY,MAAkB,GAAY,MAAyB,CACjE,MAAM,MAAO,EAAE,EASf,yEAPK,MAAM,IAAI,cACb,MAAM,IAAI,iBAAiB,CACzB,KAAM,UACN,cAAe,MAAM,IACtB,EAGC,CAAC,OAAA,MAAM,aAAa,MAAM,EAAE,GAAK,CAAC,IAAI,OAAO,MAAM,EAAE,EACvD,KAAM,IAAI,OAAM,cAAc,MAAM,iCAAiC,EAGvE,KAAM,MAAO,kBAAkB,QACzB,OAAS,MAAM,KAAO,KAEtB,gBAAkB,GAAI,iBAAA,mBAAmB,KAAM,kBAAmB,CACtE,OACA,UAAW,MAAM,GACjB,KACD,EAOD,GALA,KAAK,kBAAoB,gBAAgB,IACzC,KAAK,mBAAqB,OAC1B,KAAK,kBAAoB,MAAM,GAG3B,MAAM,cAAe,CACvB,GAAI,MAAM,cAAc,OAAS,EAC/B,KAAM,IAAI,OAAM,8CAA8C,EAGhE,GAAI,MAAM,cAAc,SAAW,GAAK,MAAM,cAAc,GAAG,mBAAqB,MAAM,cAAc,GAAG,iBACzG,KAAM,IAAI,OAAM,QAAQ,MAAM,cAAc,GAAG,wEAAwE,EAGzH,MAAM,cAAc,QAAQ,CAAC,QAAS,QAAS,CAC7C,GAAI,QAAQ,cAAgB,CAAC,OAAA,MAAM,aAAa,QAAQ,YAAY,GAAK,CAAC,oCAAoC,KAAK,QAAQ,YAAY,EAErI,KAAM,IAAI,OAAM,wBAAwB,QAAQ,2BAA2B,MAAQ,oJAAoJ,EAIzO,GAAI,QAAQ,iBAAkB,CAC5B,GAAI,QAAA,4BAA4B,SAAS,QAAQ,gBAAgB,EAC/D,KAAM,IAAI,OAAM,4BAA4B,QAAQ,+BAA+B,MAAQ,8BAA8B,EAG3H,GAAI,CAAC,mCAAmC,KAAK,QAAQ,gBAAgB,EAEnE,KAAM,IAAI,OAAM,4BAA4B,QAAQ,+BAA+B,MAAQ,+DAA+D,EAGhK,CAAC,EAGH,KAAM,eAAgB,GAAI,iBAAA,iBAAiB,KAAM,WAAY,CAC3D,KACA,kBAAmB,gBAAgB,IACnC,iBAAkB,QAAM,aACxB,aAAc,MAAM,IAAI,aACxB,+BAAgC,MAAM,cACvC,EAED,KAAK,MAAQ,cAAc,IAEvB,MAAM,cACR,MAAM,aAAa,QAAQ,OAAQ,CACjC,GAAI,iBAAA,sBAAsB,KAAM,QAAQ,MAAM,QAAQ,SAAU,EAAE,IAAK,CACrE,qBAAsB,MACtB,gBAAiB,KAAK,MACvB,CACH,CAAC,QAjHS,WAAU,WAAoB,MAAgC,gFACnE,GAAI,YAAW,OAAO,CAC3B,UAAW,UACX,cACG,MACJ,QAQW,sBAAqB,MAAgC,gFAC1D,KAAK,UAAU,cAAe,CAAE,UAAW,SAAU,KAAK,CAAE,QAQvD,uBAAsB,MAAgC,gFAC3D,KAAK,UAAU,eAAgB,CAAE,UAAW,SAAU,KAAK,CAAE,QAQxD,wBAAuB,MAAgC,gFAC5D,KAAK,UAAU,gBAAiB,CAAE,UAAW,SAAU,KAAK,CAAE,GApCzE,QAAA,cAAA,iHA0Ha,QAAA,4BAA8B,CACzC,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA",
  "names": []
}
