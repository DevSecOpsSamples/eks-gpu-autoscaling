{
  "version": 3,
  "sources": ["user-data.ts"],
  "sourcesContent": ["import { IBucket } from '../../aws-s3';\nimport { Fn, Resource, Stack, CfnResource } from '../../core';\nimport { OperatingSystemType } from './machine-image';\n\n/**\n * Options when constructing UserData for Linux\n */\nexport interface LinuxUserDataOptions {\n  /**\n   * Shebang for the UserData script\n   *\n   * @default \"#!/bin/bash\"\n   */\n  readonly shebang?: string;\n}\n\n/**\n * Options when downloading files from S3\n */\nexport interface S3DownloadOptions {\n\n  /**\n   * Name of the S3 bucket to download from\n   */\n  readonly bucket: IBucket;\n\n  /**\n   * The key of the file to download\n   */\n  readonly bucketKey: string;\n\n  /**\n   * The name of the local file.\n   *\n   * @default Linux   - /tmp/bucketKey\n   *          Windows - %TEMP%/bucketKey\n   */\n  readonly localFile?: string;\n\n  /**\n   * The region of the S3 Bucket (needed for access via VPC Gateway)\n   * @default none\n   */\n  readonly region?: string\n\n}\n\n/**\n * Options when executing a file.\n */\nexport interface ExecuteFileOptions {\n\n  /**\n   * The path to the file.\n   */\n  readonly filePath: string;\n\n  /**\n   * The arguments to be passed to the file.\n   *\n   * @default No arguments are passed to the file.\n   */\n  readonly arguments?: string;\n\n}\n\n/**\n * Instance User Data\n */\nexport abstract class UserData {\n  /**\n   * Create a userdata object for Linux hosts\n   */\n  public static forLinux(options: LinuxUserDataOptions = {}): UserData {\n    return new LinuxUserData(options);\n  }\n\n  /**\n   * Create a userdata object for Windows hosts\n   */\n  public static forWindows(): UserData {\n    return new WindowsUserData();\n  }\n\n  /**\n   * Create a userdata object with custom content\n   */\n  public static custom(content: string): UserData {\n    const userData = new CustomUserData();\n    userData.addCommands(content);\n    return userData;\n  }\n\n  public static forOperatingSystem(os: OperatingSystemType): UserData {\n    switch (os) {\n      case OperatingSystemType.LINUX: return UserData.forLinux();\n      case OperatingSystemType.WINDOWS: return UserData.forWindows();\n      case OperatingSystemType.UNKNOWN: throw new Error('Cannot determine UserData for unknown operating system type');\n    }\n  }\n\n  /**\n   * Add one or more commands to the user data\n   */\n  public abstract addCommands(...commands: string[]): void;\n\n  /**\n   * Add one or more commands to the user data that will run when the script exits.\n   */\n  public abstract addOnExitCommands(...commands: string[]): void;\n\n  /**\n   * Render the UserData for use in a construct\n   */\n  public abstract render(): string;\n\n  /**\n   * Adds commands to download a file from S3\n   *\n   * @returns: The local path that the file will be downloaded to\n   */\n  public abstract addS3DownloadCommand(params: S3DownloadOptions): string;\n\n  /**\n   * Adds commands to execute a file\n   */\n  public abstract addExecuteFileCommand( params: ExecuteFileOptions): void;\n\n  /**\n   * Adds a command which will send a cfn-signal when the user data script ends\n   */\n  public abstract addSignalOnExitCommand( resource: Resource ): void;\n\n}\n\n/**\n * Linux Instance User Data\n */\nclass LinuxUserData extends UserData {\n  private readonly lines: string[] = [];\n  private readonly onExitLines: string[] = [];\n\n  constructor(private readonly props: LinuxUserDataOptions = {}) {\n    super();\n  }\n\n  public addCommands(...commands: string[]) {\n    this.lines.push(...commands);\n  }\n\n  public addOnExitCommands(...commands: string[]) {\n    this.onExitLines.push(...commands);\n  }\n\n  public render(): string {\n    const shebang = this.props.shebang ?? '#!/bin/bash';\n    return [shebang, ...(this.renderOnExitLines()), ...this.lines].join('\\n');\n  }\n\n  public addS3DownloadCommand(params: S3DownloadOptions): string {\n    const s3Path = `s3://${params.bucket.bucketName}/${params.bucketKey}`;\n    const localPath = ( params.localFile && params.localFile.length !== 0 ) ? params.localFile : `/tmp/${ params.bucketKey }`;\n    this.addCommands(\n      `mkdir -p $(dirname '${localPath}')`,\n      `aws s3 cp '${s3Path}' '${localPath}'` + (params.region !== undefined ? ` --region ${params.region}` : ''),\n    );\n\n    return localPath;\n  }\n\n  public addExecuteFileCommand( params: ExecuteFileOptions): void {\n    this.addCommands(\n      'set -e',\n      `chmod +x '${params.filePath}'`,\n      `'${params.filePath}' ${params.arguments ?? ''}`.trim(),\n    );\n  }\n\n  public addSignalOnExitCommand( resource: Resource ): void {\n    const stack = Stack.of(resource);\n    const resourceID = (resource.node.defaultChild as CfnResource).logicalId;\n    this.addOnExitCommands(`/opt/aws/bin/cfn-signal --stack ${stack.stackName} --resource ${resourceID} --region ${stack.region} -e $exitCode || echo 'Failed to send Cloudformation Signal'`);\n  }\n\n  private renderOnExitLines(): string[] {\n    if ( this.onExitLines.length > 0 ) {\n      return ['function exitTrap(){', 'exitCode=$?', ...this.onExitLines, '}', 'trap exitTrap EXIT'];\n    }\n    return [];\n  }\n}\n\n/**\n * Windows Instance User Data\n */\nclass WindowsUserData extends UserData {\n  private readonly lines: string[] = [];\n  private readonly onExitLines: string[] = [];\n\n  constructor() {\n    super();\n  }\n\n  public addCommands(...commands: string[]) {\n    this.lines.push(...commands);\n  }\n\n  public addOnExitCommands(...commands: string[]) {\n    this.onExitLines.push(...commands);\n  }\n\n  public render(): string {\n    return `<powershell>${\n      [...(this.renderOnExitLines()),\n        ...this.lines,\n        ...( this.onExitLines.length > 0 ? ['throw \"Success\"'] : [] )].join('\\n')\n    }</powershell>`;\n  }\n\n  public addS3DownloadCommand(params: S3DownloadOptions): string {\n    const localPath = ( params.localFile && params.localFile.length !== 0 ) ? params.localFile : `C:/temp/${ params.bucketKey }`;\n    this.addCommands(\n      `mkdir (Split-Path -Path '${localPath}' ) -ea 0`,\n      `Read-S3Object -BucketName '${params.bucket.bucketName}' -key '${params.bucketKey}' -file '${localPath}' -ErrorAction Stop` + (params.region !== undefined ? ` -Region ${params.region}` : ''),\n    );\n    return localPath;\n  }\n\n  public addExecuteFileCommand( params: ExecuteFileOptions): void {\n    this.addCommands(\n      `&'${params.filePath}' ${params.arguments ?? ''}`.trim(),\n      `if (!$?) { Write-Error 'Failed to execute the file \"${params.filePath}\"' -ErrorAction Stop }`,\n    );\n  }\n\n  public addSignalOnExitCommand( resource: Resource ): void {\n    const stack = Stack.of(resource);\n    const resourceID = (resource.node.defaultChild as CfnResource).logicalId;\n\n    this.addOnExitCommands(`cfn-signal --stack ${stack.stackName} --resource ${resourceID} --region ${stack.region} --success ($success.ToString().ToLower())`);\n  }\n\n  private renderOnExitLines(): string[] {\n    if ( this.onExitLines.length > 0 ) {\n      return ['trap {', '$success=($PSItem.Exception.Message -eq \"Success\")', ...this.onExitLines, 'break', '}'];\n    }\n    return [];\n  }\n}\n\n/**\n * Custom Instance User Data\n */\nclass CustomUserData extends UserData {\n  private readonly lines: string[] = [];\n\n  constructor() {\n    super();\n  }\n\n  public addCommands(...commands: string[]) {\n    this.lines.push(...commands);\n  }\n\n  public addOnExitCommands(): void {\n    throw new Error('CustomUserData does not support addOnExitCommands, use UserData.forLinux() or UserData.forWindows() instead.');\n  }\n\n  public render(): string {\n    return this.lines.join('\\n');\n  }\n\n  public addS3DownloadCommand(): string {\n    throw new Error('CustomUserData does not support addS3DownloadCommand, use UserData.forLinux() or UserData.forWindows() instead.');\n  }\n\n  public addExecuteFileCommand(): void {\n    throw new Error('CustomUserData does not support addExecuteFileCommand, use UserData.forLinux() or UserData.forWindows() instead.');\n  }\n\n  public addSignalOnExitCommand(): void {\n    throw new Error('CustomUserData does not support addSignalOnExitCommand, use UserData.forLinux() or UserData.forWindows() instead.');\n  }\n}\n\n/**\n * Options when creating `MultipartBody`.\n */\nexport interface MultipartBodyOptions {\n\n  /**\n   * `Content-Type` header of this part.\n   *\n   * Some examples of content types:\n   * * `text/x-shellscript; charset=\"utf-8\"` (shell script)\n   * * `text/cloud-boothook; charset=\"utf-8\"` (shell script executed during boot phase)\n   *\n   * For Linux shell scripts use `text/x-shellscript`.\n   */\n  readonly contentType: string;\n\n  /**\n   * `Content-Transfer-Encoding` header specifying part encoding.\n   *\n   * @default undefined - body is not encoded\n   */\n  readonly transferEncoding?: string;\n\n  /**\n   * The body of message.\n   *\n   * @default undefined - body will not be added to part\n   */\n  readonly body?: string,\n}\n\n/**\n * The base class for all classes which can be used as {@link MultipartUserData}.\n */\nexport abstract class MultipartBody {\n  /**\n   * Content type for shell scripts\n   */\n  public static readonly SHELL_SCRIPT = 'text/x-shellscript; charset=\"utf-8\"';\n\n  /**\n   * Content type for boot hooks\n   */\n  public static readonly CLOUD_BOOTHOOK = 'text/cloud-boothook; charset=\"utf-8\"';\n\n  /**\n   * Constructs the new `MultipartBody` wrapping existing `UserData`. Modification to `UserData` are reflected\n   * in subsequent renders of the part.\n   *\n   * For more information about content types see {@link MultipartBodyOptions.contentType}.\n   *\n   * @param userData user data to wrap into body part\n   * @param contentType optional content type, if default one should not be used\n   */\n  public static fromUserData(userData: UserData, contentType?: string): MultipartBody {\n    return new MultipartBodyUserDataWrapper(userData, contentType);\n  }\n\n  /**\n   * Constructs the raw `MultipartBody` using specified body, content type and transfer encoding.\n   *\n   * When transfer encoding is specified (typically as Base64), it's caller responsibility to convert body to\n   * Base64 either by wrapping with `Fn.base64` or by converting it by other converters.\n   */\n  public static fromRawBody(opts: MultipartBodyOptions): MultipartBody {\n    return new MultipartBodyRaw(opts);\n  }\n\n  public constructor() {\n  }\n\n  /**\n   * Render body part as the string.\n   *\n   * Subclasses should not add leading nor trailing new line characters (\\r \\n)\n   */\n  public abstract renderBodyPart(): string[];\n}\n\n/**\n * The raw part of multi-part user data, which can be added to {@link MultipartUserData}.\n */\nclass MultipartBodyRaw extends MultipartBody {\n  public constructor(private readonly props: MultipartBodyOptions) {\n    super();\n  }\n\n  /**\n   * Render body part as the string.\n   */\n  public renderBodyPart(): string[] {\n    const result: string[] = [];\n\n    result.push(`Content-Type: ${this.props.contentType}`);\n\n    if (this.props.transferEncoding != null) {\n      result.push(`Content-Transfer-Encoding: ${this.props.transferEncoding}`);\n    }\n    // One line free after separator\n    result.push('');\n\n    if (this.props.body != null) {\n      result.push(this.props.body);\n      // The new line added after join will be consumed by encapsulating or closing boundary\n    }\n\n    return result;\n  }\n}\n\n/**\n * Wrapper for `UserData`.\n */\nclass MultipartBodyUserDataWrapper extends MultipartBody {\n  private readonly contentType: string;\n\n  public constructor(private readonly userData: UserData, contentType?: string) {\n    super();\n\n    this.contentType = contentType || MultipartBody.SHELL_SCRIPT;\n  }\n\n  /**\n   * Render body part as the string.\n   */\n  public renderBodyPart(): string[] {\n    const result: string[] = [];\n\n    result.push(`Content-Type: ${this.contentType}`);\n    result.push('Content-Transfer-Encoding: base64');\n    result.push('');\n    result.push(Fn.base64(this.userData.render()));\n\n    return result;\n  }\n}\n\n/**\n * Options for creating {@link MultipartUserData}\n */\nexport interface MultipartUserDataOptions {\n  /**\n   * The string used to separate parts in multipart user data archive (it's like MIME boundary).\n   *\n   * This string should contain [a-zA-Z0-9()+,-./:=?] characters only, and should not be present in any part, or in text content of archive.\n   *\n   * @default `+AWS+CDK+User+Data+Separator==`\n   */\n  readonly partsSeparator?: string;\n}\n\n/**\n * Mime multipart user data.\n *\n * This class represents MIME multipart user data, as described in.\n * [Specifying Multiple User Data Blocks Using a MIME Multi Part Archive](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#multi-part_user_data)\n *\n */\nexport class MultipartUserData extends UserData {\n  private static readonly USE_PART_ERROR = 'MultipartUserData only supports this operation if it has a default UserData. Call addUserDataPart with makeDefault=true.';\n  private static readonly BOUNDRY_PATTERN = '[^a-zA-Z0-9()+,-./:=?]';\n\n  private parts: MultipartBody[] = [];\n\n  private opts: MultipartUserDataOptions;\n\n  private defaultUserData?: UserData;\n\n  constructor(opts?: MultipartUserDataOptions) {\n    super();\n\n    let partsSeparator: string;\n\n    // Validate separator\n    if (opts?.partsSeparator != null) {\n      if (new RegExp(MultipartUserData.BOUNDRY_PATTERN).test(opts!.partsSeparator)) {\n        throw new Error(`Invalid characters in separator. Separator has to match pattern ${MultipartUserData.BOUNDRY_PATTERN}`);\n      } else {\n        partsSeparator = opts!.partsSeparator;\n      }\n    } else {\n      partsSeparator = '+AWS+CDK+User+Data+Separator==';\n    }\n\n    this.opts = {\n      partsSeparator: partsSeparator,\n    };\n  }\n\n  /**\n   * Adds a part to the list of parts.\n   */\n  public addPart(part: MultipartBody) {\n    this.parts.push(part);\n  }\n\n  /**\n   * Adds a multipart part based on a UserData object.\n   *\n   * If `makeDefault` is true, then the UserData added by this method\n   * will also be the target of calls to the `add*Command` methods on\n   * this MultipartUserData object.\n   *\n   * If `makeDefault` is false, then this is the same as calling:\n   *\n   * ```ts\n   * declare const multiPart: ec2.MultipartUserData;\n   * declare const userData: ec2.UserData;\n   * declare const contentType: string;\n   *\n   * multiPart.addPart(ec2.MultipartBody.fromUserData(userData, contentType));\n   * ```\n   *\n   * An undefined `makeDefault` defaults to either:\n   * - `true` if no default UserData has been set yet; or\n   * - `false` if there is no default UserData set.\n   */\n  public addUserDataPart(userData: UserData, contentType?: string, makeDefault?: boolean) {\n    this.addPart(MultipartBody.fromUserData(userData, contentType));\n    makeDefault = makeDefault ?? (this.defaultUserData === undefined ? true : false);\n    if (makeDefault) {\n      this.defaultUserData = userData;\n    }\n  }\n\n  public render(): string {\n    const boundary = this.opts.partsSeparator;\n    // Now build final MIME archive - there are few changes from MIME message which are accepted by cloud-init:\n    // - MIME RFC uses CRLF to separate lines - cloud-init is fine with LF \\n only\n    // Note: new lines matters, matters a lot.\n    var resultArchive = new Array<string>();\n    resultArchive.push(`Content-Type: multipart/mixed; boundary=\"${boundary}\"`);\n    resultArchive.push('MIME-Version: 1.0');\n\n    // Add new line, the next one will be boundary (encapsulating or closing)\n    // so this line will count into it.\n    resultArchive.push('');\n\n    // Add parts - each part starts with boundary\n    this.parts.forEach(part => {\n      resultArchive.push(`--${boundary}`);\n      resultArchive.push(...part.renderBodyPart());\n    });\n\n    // Add closing boundary\n    resultArchive.push(`--${boundary}--`);\n    resultArchive.push(''); // Force new line at the end\n\n    return resultArchive.join('\\n');\n  }\n\n  public addS3DownloadCommand(params: S3DownloadOptions): string {\n    if (this.defaultUserData) {\n      return this.defaultUserData.addS3DownloadCommand(params);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n\n  public addExecuteFileCommand(params: ExecuteFileOptions): void {\n    if (this.defaultUserData) {\n      this.defaultUserData.addExecuteFileCommand(params);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n\n  public addSignalOnExitCommand(resource: Resource): void {\n    if (this.defaultUserData) {\n      this.defaultUserData.addSignalOnExitCommand(resource);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n\n  public addCommands(...commands: string[]): void {\n    if (this.defaultUserData) {\n      this.defaultUserData.addCommands(...commands);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n\n  public addOnExitCommands(...commands: string[]): void {\n    if (this.defaultUserData) {\n      this.defaultUserData.addOnExitCommands(...commands);\n    } else {\n      throw new Error(MultipartUserData.USE_PART_ERROR);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
