{
  "version": 3,
  "sources": ["client-vpn-endpoint.ts"],
  "sourcesContent": ["import { ISamlProvider } from '../../aws-iam';\nimport * as logs from '../../aws-logs';\nimport { CfnOutput, Resource, Token } from '../../core';\nimport { Construct, DependencyGroup, IDependable } from 'constructs';\nimport { ClientVpnAuthorizationRule, ClientVpnAuthorizationRuleOptions } from './client-vpn-authorization-rule';\nimport { IClientVpnConnectionHandler, IClientVpnEndpoint, TransportProtocol, VpnPort } from './client-vpn-endpoint-types';\nimport { ClientVpnRoute, ClientVpnRouteOptions } from './client-vpn-route';\nimport { Connections } from './connections';\nimport { CfnClientVpnEndpoint, CfnClientVpnTargetNetworkAssociation } from './ec2.generated';\nimport { CidrBlock } from './network-util';\nimport { ISecurityGroup, SecurityGroup } from './security-group';\nimport { IVpc, SubnetSelection } from './vpc';\n\n/**\n * Options for a client VPN endpoint\n */\nexport interface ClientVpnEndpointOptions {\n  /**\n   * The IPv4 address range, in CIDR notation, from which to assign client IP\n   * addresses. The address range cannot overlap with the local CIDR of the VPC\n   * in which the associated subnet is located, or the routes that you add manually.\n   *\n   * Changing the address range will replace the Client VPN endpoint.\n   *\n   * The CIDR block should be /22 or greater.\n   */\n  readonly cidr: string;\n\n  /**\n   * The ARN of the client certificate for mutual authentication.\n   *\n   * The certificate must be signed by a certificate authority (CA) and it must\n   * be provisioned in AWS Certificate Manager (ACM).\n   *\n   * @default - use user-based authentication\n   */\n  readonly clientCertificateArn?: string;\n\n  /**\n   * The type of user-based authentication to use.\n   *\n   * @see https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html\n   *\n   * @default - use mutual authentication\n   */\n  readonly userBasedAuthentication?: ClientVpnUserBasedAuthentication;\n\n  /**\n   * Whether to enable connections logging\n   *\n   * @default true\n   */\n  readonly logging?: boolean;\n\n  /**\n   * A CloudWatch Logs log group for connection logging\n   *\n   * @default - a new group is created\n   */\n  readonly logGroup?: logs.ILogGroup;\n\n  /**\n   * A CloudWatch Logs log stream for connection logging\n   *\n   * @default - a new stream is created\n   */\n  readonly logStream?: logs.ILogStream;\n\n  /**\n   * The AWS Lambda function used for connection authorization\n   *\n   * The name of the Lambda function must begin with the `AWSClientVPN-` prefix\n   *\n   * @default - no connection handler\n   */\n  readonly clientConnectionHandler?: IClientVpnConnectionHandler;\n\n  /**\n   * A brief description of the Client VPN endpoint.\n   *\n   * @default - no description\n   */\n  readonly description?: string;\n\n  /**\n   * The security groups to apply to the target network.\n   *\n   * @default - a new security group is created\n   */\n  readonly securityGroups?: ISecurityGroup[];\n\n  /**\n   * Specify whether to enable the self-service portal for the Client VPN endpoint.\n   *\n   * @default true\n   */\n  readonly selfServicePortal?: boolean;\n\n  /**\n   * The ARN of the server certificate\n   */\n  readonly serverCertificateArn: string;\n\n  /**\n   * Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint.\n   *\n   * @see https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html\n   *\n   * @default false\n   */\n  readonly splitTunnel?: boolean;\n\n  /**\n   * The transport protocol to be used by the VPN session.\n   *\n   * @default TransportProtocol.UDP\n   */\n  readonly transportProtocol?: TransportProtocol;\n\n  /**\n   * The port number to assign to the Client VPN endpoint for TCP and UDP\n   * traffic.\n   *\n   * @default VpnPort.HTTPS\n   */\n  readonly port?: VpnPort;\n\n  /**\n   * Information about the DNS servers to be used for DNS resolution.\n   *\n   * A Client VPN endpoint can have up to two DNS servers.\n   *\n   * @default - use the DNS address configured on the device\n   */\n  readonly dnsServers?: string[];\n\n  /**\n   * Subnets to associate to the client VPN endpoint.\n   *\n   * @default - the VPC default strategy\n   */\n  readonly vpcSubnets?: SubnetSelection;\n\n  /**\n   * Whether to authorize all users to the VPC CIDR\n   *\n   * This automatically creates an authorization rule. Set this to `false` and\n   * use `addAuthorizationRule()` to create your own rules instead.\n   *\n   * @default true\n   */\n  readonly authorizeAllUsersToVpcCidr?: boolean;\n\n  /**\n   * The maximum VPN session duration time.\n   *\n   * @default ClientVpnSessionTimeout.TWENTY_FOUR_HOURS\n   */\n  readonly sessionTimeout?: ClientVpnSessionTimeout;\n\n  /**\n   * Customizable text that will be displayed in a banner on AWS provided clients\n   * when a VPN session is established.\n   *\n   * UTF-8 encoded characters only. Maximum of 1400 characters.\n   *\n   * @default - no banner is presented to the client\n   */\n  readonly clientLoginBanner?: string;\n}\n\n/**\n * Maximum VPN session duration time\n */\nexport enum ClientVpnSessionTimeout {\n  /** 8 hours */\n  EIGHT_HOURS = 8,\n  /** 10 hours */\n  TEN_HOURS = 10,\n  /** 12 hours */\n  TWELVE_HOURS = 12,\n  /** 24 hours */\n  TWENTY_FOUR_HOURS = 24,\n}\n\n/**\n * User-based authentication for a client VPN endpoint\n */\nexport abstract class ClientVpnUserBasedAuthentication {\n  /**\n   * Active Directory authentication\n   */\n  public static activeDirectory(directoryId: string): ClientVpnUserBasedAuthentication {\n    return new ActiveDirectoryAuthentication(directoryId);\n  }\n\n  /** Federated authentication */\n  public static federated(samlProvider: ISamlProvider, selfServiceSamlProvider?: ISamlProvider): ClientVpnUserBasedAuthentication {\n    return new FederatedAuthentication(samlProvider, selfServiceSamlProvider);\n  }\n\n  /** Renders the user based authentication */\n  public abstract render(): any;\n}\n\n/**\n * Active Directory authentication\n */\nclass ActiveDirectoryAuthentication extends ClientVpnUserBasedAuthentication {\n  constructor(private readonly directoryId: string) {\n    super();\n  }\n\n  render(): any {\n    return {\n      type: 'directory-service-authentication',\n      activeDirectory: { directoryId: this.directoryId },\n    };\n  }\n}\n\n/**\n * Federated authentication\n */\nclass FederatedAuthentication extends ClientVpnUserBasedAuthentication {\n  constructor(private readonly samlProvider: ISamlProvider, private readonly selfServiceSamlProvider?: ISamlProvider) {\n    super();\n  }\n\n  render(): any {\n    return {\n      type: 'federated-authentication',\n      federatedAuthentication: {\n        samlProviderArn: this.samlProvider.samlProviderArn,\n        selfServiceSamlProviderArn: this.selfServiceSamlProvider?.samlProviderArn,\n      },\n    };\n  }\n}\n\n/**\n * Properties for a client VPN endpoint\n */\nexport interface ClientVpnEndpointProps extends ClientVpnEndpointOptions {\n  /**\n   * The VPC to connect to.\n   */\n  readonly vpc: IVpc;\n}\n\n/**\n * Attributes when importing an existing client VPN endpoint\n */\nexport interface ClientVpnEndpointAttributes {\n  /**\n   * The endpoint ID\n   */\n  readonly endpointId: string;\n\n  /**\n   * The security groups associated with the endpoint\n   */\n  readonly securityGroups: ISecurityGroup[];\n}\n\n/**\n * A client VPN connnection\n */\nexport class ClientVpnEndpoint extends Resource implements IClientVpnEndpoint {\n  /**\n   * Import an existing client VPN endpoint\n   */\n  public static fromEndpointAttributes(scope: Construct, id: string, attrs: ClientVpnEndpointAttributes): IClientVpnEndpoint {\n    class Import extends Resource implements IClientVpnEndpoint {\n      public readonly endpointId = attrs.endpointId;\n      public readonly connections = new Connections({ securityGroups: attrs.securityGroups });\n      public readonly targetNetworksAssociated: IDependable = new DependencyGroup();\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly endpointId: string;\n\n  /**\n   * Allows specify security group connections for the endpoint.\n   */\n  public readonly connections: Connections;\n\n  public readonly targetNetworksAssociated: IDependable;\n\n  private readonly _targetNetworksAssociated = new DependencyGroup();\n\n  constructor(scope: Construct, id: string, props: ClientVpnEndpointProps) {\n    super(scope, id);\n\n    if (!Token.isUnresolved(props.vpc.vpcCidrBlock)) {\n      const clientCidr = new CidrBlock(props.cidr);\n      const vpcCidr = new CidrBlock(props.vpc.vpcCidrBlock);\n      if (vpcCidr.containsCidr(clientCidr)) {\n        throw new Error('The client CIDR cannot overlap with the local CIDR of the VPC');\n      }\n    }\n\n    if (props.dnsServers && props.dnsServers.length > 2) {\n      throw new Error('A client VPN endpoint can have up to two DNS servers');\n    }\n\n    if (props.logging == false && (props.logGroup || props.logStream)) {\n      throw new Error('Cannot specify `logGroup` or `logStream` when logging is disabled');\n    }\n\n    if (props.clientConnectionHandler\n      && !Token.isUnresolved(props.clientConnectionHandler.functionName)\n      && !props.clientConnectionHandler.functionName.startsWith('AWSClientVPN-')) {\n      throw new Error('The name of the Lambda function must begin with the `AWSClientVPN-` prefix');\n    }\n\n    if (props.clientLoginBanner\n      && !Token.isUnresolved(props.clientLoginBanner)\n      && props.clientLoginBanner.length > 1400) {\n      throw new Error(`The maximum length for the client login banner is 1400, got ${props.clientLoginBanner.length}`);\n    }\n\n    const logging = props.logging ?? true;\n    const logGroup = logging\n      ? props.logGroup ?? new logs.LogGroup(this, 'LogGroup')\n      : undefined;\n\n    const securityGroups = props.securityGroups ?? [new SecurityGroup(this, 'SecurityGroup', {\n      vpc: props.vpc,\n    })];\n    this.connections = new Connections({ securityGroups });\n\n    const endpoint = new CfnClientVpnEndpoint(this, 'Resource', {\n      authenticationOptions: renderAuthenticationOptions(props.clientCertificateArn, props.userBasedAuthentication),\n      clientCidrBlock: props.cidr,\n      clientConnectOptions: props.clientConnectionHandler\n        ? {\n          enabled: true,\n          lambdaFunctionArn: props.clientConnectionHandler.functionArn,\n        }\n        : undefined,\n      connectionLogOptions: {\n        enabled: logging,\n        cloudwatchLogGroup: logGroup?.logGroupName,\n        cloudwatchLogStream: props.logStream?.logStreamName,\n      },\n      description: props.description,\n      dnsServers: props.dnsServers,\n      securityGroupIds: securityGroups.map(s => s.securityGroupId),\n      selfServicePortal: booleanToEnabledDisabled(props.selfServicePortal),\n      serverCertificateArn: props.serverCertificateArn,\n      splitTunnel: props.splitTunnel,\n      transportProtocol: props.transportProtocol,\n      vpcId: props.vpc.vpcId,\n      vpnPort: props.port,\n      sessionTimeoutHours: props.sessionTimeout,\n      clientLoginBannerOptions: props.clientLoginBanner\n        ? {\n          enabled: true,\n          bannerText: props.clientLoginBanner,\n        }\n        : undefined,\n    });\n\n    this.endpointId = endpoint.ref;\n\n    if (props.userBasedAuthentication && (props.selfServicePortal ?? true)) {\n      // Output self-service portal URL\n      new CfnOutput(this, 'SelfServicePortalUrl', {\n        value: `https://self-service.clientvpn.amazonaws.com/endpoints/${this.endpointId}`,\n      });\n    }\n\n    // Associate subnets\n    const subnetIds = props.vpc.selectSubnets(props.vpcSubnets).subnetIds;\n\n    if (Token.isUnresolved(subnetIds)) {\n      throw new Error('Cannot associate subnets when VPC are imported from parameters or exports containing lists of subnet IDs.');\n    }\n\n    for (const [idx, subnetId] of Object.entries(subnetIds)) {\n      this._targetNetworksAssociated.add(new CfnClientVpnTargetNetworkAssociation(this, `Association${idx}`, {\n        clientVpnEndpointId: this.endpointId,\n        subnetId,\n      }));\n    }\n    this.targetNetworksAssociated = this._targetNetworksAssociated;\n\n    if (props.authorizeAllUsersToVpcCidr ?? true) {\n      this.addAuthorizationRule('AuthorizeAll', {\n        cidr: props.vpc.vpcCidrBlock,\n      });\n    }\n  }\n\n  /**\n   * Adds an authorization rule to this endpoint\n   */\n  public addAuthorizationRule(id: string, props: ClientVpnAuthorizationRuleOptions): ClientVpnAuthorizationRule {\n    return new ClientVpnAuthorizationRule(this, id, {\n      ...props,\n      clientVpnEndpoint: this,\n    });\n  }\n\n  /**\n   * Adds a route to this endpoint\n   */\n  public addRoute(id: string, props: ClientVpnRouteOptions): ClientVpnRoute {\n    return new ClientVpnRoute(this, id, {\n      ...props,\n      clientVpnEndpoint: this,\n    });\n  }\n}\n\nfunction renderAuthenticationOptions(\n  clientCertificateArn?: string,\n  userBasedAuthentication?: ClientVpnUserBasedAuthentication): CfnClientVpnEndpoint.ClientAuthenticationRequestProperty[] {\n  const authenticationOptions: CfnClientVpnEndpoint.ClientAuthenticationRequestProperty[] = [];\n\n  if (clientCertificateArn) {\n    authenticationOptions.push({\n      type: 'certificate-authentication',\n      mutualAuthentication: {\n        clientRootCertificateChainArn: clientCertificateArn,\n      },\n    });\n  }\n\n  if (userBasedAuthentication) {\n    authenticationOptions.push(userBasedAuthentication.render());\n  }\n\n  if (authenticationOptions.length === 0) {\n    throw new Error('A client VPN endpoint must use at least one authentication option');\n  }\n  return authenticationOptions;\n}\n\nfunction booleanToEnabledDisabled(val?: boolean): 'enabled' | 'disabled' | undefined {\n  switch (val) {\n    case undefined:\n      return undefined;\n    case true:\n      return 'enabled';\n    case false:\n      return 'disabled';\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
