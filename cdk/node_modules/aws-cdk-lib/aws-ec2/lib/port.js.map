{
  "version": 3,
  "sources": ["port.ts"],
  "sourcesContent": ["import { Token } from '../../core';\n\n/**\n * Protocol for use in Connection Rules\n *\n * https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\n */\nexport enum Protocol {\n  ALL = '-1',\n  HOPOPT = '0',\n  ICMP = 'icmp',\n  IGMP = '2',\n  GGP = '3',\n  IPV4 = '4',\n  ST = '5',\n  TCP = 'tcp',\n  CBT = '7',\n  EGP = '8',\n  IGP = '9',\n  BBN_RCC_MON = '10',\n  NVP_II = '11',\n  PUP = '12',\n  EMCON = '14',\n  XNET = '15',\n  CHAOS = '16',\n  UDP = 'udp',\n  MUX = '18',\n  DCN_MEAS = '19',\n  HMP = '20',\n  PRM = '21',\n  XNS_IDP = '22',\n  TRUNK_1 = '23',\n  TRUNK_2 = '24',\n  LEAF_1 = '25',\n  LEAF_2 = '26',\n  RDP = '27',\n  IRTP = '28',\n  ISO_TP4 = '29',\n  NETBLT = '30',\n  MFE_NSP = '31',\n  MERIT_INP = '32',\n  DCCP = '33',\n  THREEPC = '34',\n  IDPR = '35',\n  XTP = '36',\n  DDP = '37',\n  IDPR_CMTP = '38',\n  TPPLUSPLUS = '39',\n  IL = '40',\n  IPV6 = '41',\n  SDRP = '42',\n  IPV6_ROUTE = '43',\n  IPV6_FRAG = '44',\n  IDRP = '45',\n  RSVP = '46',\n  GRE = '47',\n  DSR = '48',\n  BNA = '49',\n  ESP = '50',\n  AH = '51',\n  I_NLSP = '52',\n  SWIPE = '53',\n  NARP = '54',\n  MOBILE = '55',\n  TLSP = '56',\n  SKIP = '57',\n  ICMPV6 = 'icmpv6',\n  IPV6_NONXT = '59',\n  IPV6_OPTS = '60',\n  CFTP = '62',\n  ANY_LOCAL = '63',\n  SAT_EXPAK = '64',\n  KRYPTOLAN = '65',\n  RVD = '66',\n  IPPC = '67',\n  ANY_DFS = '68',\n  SAT_MON = '69',\n  VISA = '70',\n  IPCV = '71',\n  CPNX = '72',\n  CPHB = '73',\n  WSN = '74',\n  PVP = '75',\n  BR_SAT_MON = '76',\n  SUN_ND = '77',\n  WB_MON = '78',\n  WB_EXPAK = '79',\n  ISO_IP = '80',\n  VMTP = '81',\n  SECURE_VMTP = '82',\n  VINES = '83',\n  TTP = '84',\n  IPTM = '84',\n  NSFNET_IGP = '85',\n  DGP = '86',\n  TCF = '87',\n  EIGRP = '88',\n  OSPFIGP = '89',\n  SPRITE_RPC = '90',\n  LARP = '91',\n  MTP = '92',\n  AX_25 = '93',\n  IPIP = '94',\n  MICP = '95',\n  SCC_SP = '96',\n  ETHERIP = '97',\n  ENCAP = '98',\n  ANY_ENC = '99',\n  GMTP = '100',\n  IFMP = '101',\n  PNNI = '102',\n  PIM = '103',\n  ARIS = '104',\n  SCPS = '105',\n  QNX = '106',\n  A_N = '107',\n  IPCOMP = '108',\n  SNP = '109',\n  COMPAQ_PEER = '110',\n  IPX_IN_IP = '111',\n  VRRP = '112',\n  PGM = '113',\n  ANY_0_HOP = '114',\n  L2_T_P = '115',\n  DDX = '116',\n  IATP = '117',\n  STP = '118',\n  SRP = '119',\n  UTI = '120',\n  SMP = '121',\n  SM = '122',\n  PTP = '123',\n  ISIS_IPV4 = '124',\n  FIRE = '125',\n  CRTP = '126',\n  CRUDP = '127',\n  SSCOPMCE = '128',\n  IPLT = '129',\n  SPS = '130',\n  PIPE = '131',\n  SCTP = '132',\n  FC = '133',\n  RSVP_E2E_IGNORE = '134',\n  MOBILITY_HEADER = '135',\n  UDPLITE = '136',\n  MPLS_IN_IP = '137',\n  MANET = '138',\n  HIP = '139',\n  SHIM6 = '140',\n  WESP = '141',\n  ROHC = '142',\n  ETHERNET = '143',\n  EXPERIMENT_1 = '253',\n  EXPERIMENT_2 = '254',\n  RESERVED = '255',\n}\n/**\n * Properties to create a port range\n */\nexport interface PortProps {\n  /**\n   * The protocol for the range\n   */\n  readonly protocol: Protocol;\n\n  /**\n   * The starting port for the range\n   *\n   * @default - Not included in the rule\n   */\n  readonly fromPort?: number;\n\n  /**\n   * The ending port for the range\n   *\n   * @default - Not included in the rule\n   */\n  readonly toPort?: number;\n\n  /**\n   * String representation for this object\n   */\n  readonly stringRepresentation: string;\n}\n\n/**\n * Interface for classes that provide the connection-specification parts of a security group rule\n */\nexport class Port {\n  /**\n   * A single TCP port\n   */\n  public static tcp(port: number): Port {\n    return new Port({\n      protocol: Protocol.TCP,\n      fromPort: port,\n      toPort: port,\n      stringRepresentation: renderPort(port),\n    });\n  }\n\n  /**\n   * A TCP port range\n   */\n  public static tcpRange(startPort: number, endPort: number) {\n    return new Port({\n      protocol: Protocol.TCP,\n      fromPort: startPort,\n      toPort: endPort,\n      stringRepresentation: `${renderPort(startPort)}-${renderPort(endPort)}`,\n    });\n  }\n\n  /**\n   * Any TCP traffic\n   */\n  public static allTcp() {\n    return new Port({\n      protocol: Protocol.TCP,\n      fromPort: 0,\n      toPort: 65535,\n      stringRepresentation: 'ALL PORTS',\n    });\n  }\n\n  /**\n   * A single UDP port\n   */\n  public static udp(port: number): Port {\n    return new Port({\n      protocol: Protocol.UDP,\n      fromPort: port,\n      toPort: port,\n      stringRepresentation: `UDP ${renderPort(port)}`,\n    });\n  }\n\n  /**\n   * A UDP port range\n   */\n  public static udpRange(startPort: number, endPort: number) {\n    return new Port({\n      protocol: Protocol.UDP,\n      fromPort: startPort,\n      toPort: endPort,\n      stringRepresentation: `UDP ${renderPort(startPort)}-${renderPort(endPort)}`,\n    });\n  }\n\n  /**\n   * Any UDP traffic\n   */\n  public static allUdp() {\n    return new Port({\n      protocol: Protocol.UDP,\n      fromPort: 0,\n      toPort: 65535,\n      stringRepresentation: 'UDP ALL PORTS',\n    });\n  }\n\n  /**\n   * A specific combination of ICMP type and code\n   *\n   * @see https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml\n   */\n  public static icmpTypeAndCode(type: number, code: number) {\n    return new Port({\n      protocol: Protocol.ICMP,\n      fromPort: type,\n      toPort: code,\n      stringRepresentation: `ICMP Type ${type} Code ${code}`,\n    });\n  }\n\n  /**\n   * All codes for a single ICMP type\n   */\n  public static icmpType(type: number): Port {\n    return new Port({\n      protocol: Protocol.ICMP,\n      fromPort: type,\n      toPort: -1,\n      stringRepresentation: `ICMP Type ${type}`,\n    });\n  }\n\n  /**\n   * ICMP ping (echo) traffic\n   */\n  public static icmpPing() {\n    return Port.icmpType(8);\n  }\n\n  /**\n   * All ICMP traffic\n   */\n  public static allIcmp() {\n    return new Port({\n      protocol: Protocol.ICMP,\n      fromPort: -1,\n      toPort: -1,\n      stringRepresentation: 'ALL ICMP',\n    });\n  }\n\n  /**\n   * All traffic\n   */\n  public static allTraffic() {\n    return new Port({\n      protocol: Protocol.ALL,\n      stringRepresentation: 'ALL TRAFFIC',\n    });\n  }\n\n  /**\n   * A single ESP port\n   */\n  public static esp(): Port {\n    return new Port({\n      protocol: Protocol.ESP,\n      fromPort: 50,\n      toPort: 50,\n      stringRepresentation: 'ESP 50',\n    });\n  }\n\n  /**\n   * A single AH port\n   */\n  public static ah(): Port {\n    return new Port({\n      protocol: Protocol.AH,\n      fromPort: 51,\n      toPort: 51,\n      stringRepresentation: 'AH 51',\n    });\n  }\n\n  /**\n   * Whether the rule containing this port range can be inlined into a securitygroup or not.\n   */\n  public readonly canInlineRule: boolean;\n\n  constructor(private readonly props: PortProps) {\n    this.canInlineRule = !Token.isUnresolved(props.fromPort) && !Token.isUnresolved(props.toPort);\n  }\n\n  /**\n   * Produce the ingress/egress rule JSON for the given connection\n   */\n  public toRuleJson(): any {\n    return {\n      ipProtocol: this.props.protocol,\n      fromPort: this.props.fromPort,\n      toPort: this.props.toPort,\n    };\n  }\n\n  public toString(): string {\n    return this.props.stringRepresentation;\n  }\n}\n\nfunction renderPort(port: number) {\n  return Token.isUnresolved(port) ? '{IndirectPort}' : port.toString();\n}\n"],
  "mappings": "4NAAA,OAAA,QAAA,YAAA,EAOA,GAAY,UAAZ,AAAA,UAAY,UAAQ,CAClgBAAA,MACA,UAAA,gBAAA,MACA,UAAA,QAAA,MACA,UAAA,WAAA,MACA,UAAA,MAAA,MACA,UAAA,IAAA,MACA,UAAA,MAAA,MACA,UAAA,KAAA,MACA,UAAA,KAAA,MACA,UAAA,SAAA,MACA,UAAA,aAAA,MACA,UAAA,aAAA,MACA,UAAA,SAAA,KACF,GApJY,SAAA,QAAA,UAAA,SAAA,SAAQ,CAAA,EAAA,EAqLpB,MAAa,IAAI,CA6Jf,YAA6B,MAAgB,CAAhB,KAAA,MAAA,mEAC3B,KAAK,cAAgB,CAAC,OAAA,MAAM,aAAa,MAAM,QAAQ,GAAK,CAAC,OAAA,MAAM,aAAa,MAAM,MAAM,QA1JhF,KAAI,KAAY,CAC5B,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,IACnB,SAAU,KACV,OAAQ,KACR,qBAAsB,WAAW,IAAI,EACtC,QAMW,UAAS,UAAmB,QAAe,CACvD,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,IACnB,SAAU,UACV,OAAQ,QACR,qBAAsB,GAAG,WAAW,SAAS,KAAK,WAAW,OAAO,IACrE,QAMW,SAAM,CAClB,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,IACnB,SAAU,EACV,OAAQ,MACR,qBAAsB,YACvB,QAMW,KAAI,KAAY,CAC5B,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,IACnB,SAAU,KACV,OAAQ,KACR,qBAAsB,OAAO,WAAW,IAAI,IAC7C,QAMW,UAAS,UAAmB,QAAe,CACvD,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,IACnB,SAAU,UACV,OAAQ,QACR,qBAAsB,OAAO,WAAW,SAAS,KAAK,WAAW,OAAO,IACzE,QAMW,SAAM,CAClB,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,IACnB,SAAU,EACV,OAAQ,MACR,qBAAsB,gBACvB,QAQW,iBAAgB,KAAc,KAAY,CACtD,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,KACnB,SAAU,KACV,OAAQ,KACR,qBAAsB,aAAa,aAAa,OACjD,QAMW,UAAS,KAAY,CACjC,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,KACnB,SAAU,KACV,OAAQ,GACR,qBAAsB,aAAa,OACpC,QAMW,WAAQ,CACpB,MAAO,MAAK,SAAS,CAAC,QAMV,UAAO,CACnB,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,KACnB,SAAU,GACV,OAAQ,GACR,qBAAsB,WACvB,QAMW,aAAU,CACtB,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,IACnB,qBAAsB,cACvB,QAMW,MAAG,CACf,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,IACnB,SAAU,GACV,OAAQ,GACR,qBAAsB,SACvB,QAMW,KAAE,CACd,MAAO,IAAI,MAAK,CACd,SAAU,SAAS,GACnB,SAAU,GACV,OAAQ,GACR,qBAAsB,QACvB,EAeI,YAAU,CACf,MAAO,CACL,WAAY,KAAK,MAAM,SACvB,SAAU,KAAK,MAAM,SACrB,OAAQ,KAAK,MAAM,QAIhB,UAAQ,CACb,MAAO,MAAK,MAAM,sBA7KtB,QAAA,KAAA,sFAiLA,oBAAoB,KAAY,CAC9B,MAAO,QAAA,MAAM,aAAa,IAAI,EAAI,iBAAmB,KAAK,SAAQ,CACpE",
  "names": []
}
