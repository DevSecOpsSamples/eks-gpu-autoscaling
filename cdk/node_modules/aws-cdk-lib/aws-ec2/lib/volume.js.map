{
  "version": 3,
  "sources": ["volume.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\n\nimport { AccountRootPrincipal, Grant, IGrantable } from '../../aws-iam';\nimport { IKey, ViaServicePrincipal } from '../../aws-kms';\nimport { IResource, Resource, Size, SizeRoundingBehavior, Stack, Token, Tags, Names, RemovalPolicy } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnVolume } from './ec2.generated';\nimport { IInstance } from './instance';\n\n/**\n * Block device\n */\nexport interface BlockDevice {\n  /**\n   * The device name exposed to the EC2 instance\n   *\n   * For example, a value like `/dev/sdh`, `xvdh`.\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html\n   */\n  readonly deviceName: string;\n\n  /**\n   * Defines the block device volume, to be either an Amazon EBS volume or an ephemeral instance store volume\n   *\n   * For example, a value like `BlockDeviceVolume.ebs(15)`, `BlockDeviceVolume.ephemeral(0)`.\n   */\n  readonly volume: BlockDeviceVolume;\n\n  /**\n   * If false, the device mapping will be suppressed.\n   * If set to false for the root device, the instance might fail the Amazon EC2 health check.\n   * Amazon EC2 Auto Scaling launches a replacement instance if the instance fails the health check.\n   *\n   * @default true - device mapping is left untouched\n   */\n  readonly mappingEnabled?: boolean;\n}\n\n/**\n * Base block device options for an EBS volume\n */\nexport interface EbsDeviceOptionsBase {\n  /**\n   * Indicates whether to delete the volume when the instance is terminated.\n   *\n   * @default - true for Amazon EC2 Auto Scaling, false otherwise (e.g. EBS)\n   */\n  readonly deleteOnTermination?: boolean;\n\n  /**\n   * The number of I/O operations per second (IOPS) to provision for the volume.\n   *\n   * Must only be set for {@link volumeType}: {@link EbsDeviceVolumeType.IO1}\n   *\n   * The maximum ratio of IOPS to volume size (in GiB) is 50:1, so for 5,000 provisioned IOPS,\n   * you need at least 100 GiB storage on the volume.\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\n   *\n   * @default - none, required for {@link EbsDeviceVolumeType.IO1}\n   */\n  readonly iops?: number;\n\n  /**\n   * The EBS volume type\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\n   *\n   * @default {@link EbsDeviceVolumeType.GP2}\n   */\n  readonly volumeType?: EbsDeviceVolumeType;\n}\n\n/**\n * Block device options for an EBS volume\n */\nexport interface EbsDeviceOptions extends EbsDeviceOptionsBase {\n  /**\n   * Specifies whether the EBS volume is encrypted.\n   * Encrypted EBS volumes can only be attached to instances that support Amazon EBS encryption\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\n   *\n   * @default false\n   */\n  readonly encrypted?: boolean;\n\n  /**\n   * The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.\n   *\n   * You have to ensure that the KMS CMK has the correct permissions to be used by the service launching the ec2 instances.\n   *\n   * @see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#ebs-encryption-requirements\n   *\n   * @default - If encrypted is true, the default aws/ebs KMS key will be used.\n   */\n  readonly kmsKey?: IKey;\n}\n\n/**\n * Block device options for an EBS volume created from a snapshot\n */\nexport interface EbsDeviceSnapshotOptions extends EbsDeviceOptionsBase {\n  /**\n   * The volume size, in Gibibytes (GiB)\n   *\n   * If you specify volumeSize, it must be equal or greater than the size of the snapshot.\n   *\n   * @default - The snapshot size\n   */\n  readonly volumeSize?: number;\n}\n\n/**\n * Properties of an EBS block device\n */\nexport interface EbsDeviceProps extends EbsDeviceSnapshotOptions, EbsDeviceOptions {\n  /**\n   * The snapshot ID of the volume to use\n   *\n   * @default - No snapshot will be used\n   */\n  readonly snapshotId?: string;\n}\n\n/**\n * Describes a block device mapping for an EC2 instance or Auto Scaling group.\n */\nexport class BlockDeviceVolume {\n  /**\n   * Creates a new Elastic Block Storage device\n   *\n   * @param volumeSize The volume size, in Gibibytes (GiB)\n   * @param options additional device options\n   */\n  public static ebs(volumeSize: number, options: EbsDeviceOptions = {}): BlockDeviceVolume {\n    return new this({ ...options, volumeSize });\n  }\n\n  /**\n   * Creates a new Elastic Block Storage device from an existing snapshot\n   *\n   * @param snapshotId The snapshot ID of the volume to use\n   * @param options additional device options\n   */\n  public static ebsFromSnapshot(snapshotId: string, options: EbsDeviceSnapshotOptions = {}): BlockDeviceVolume {\n    return new this({ ...options, snapshotId });\n  }\n\n  /**\n   * Creates a virtual, ephemeral device.\n   * The name will be in the form ephemeral{volumeIndex}.\n   *\n   * @param volumeIndex the volume index. Must be equal or greater than 0\n   */\n  public static ephemeral(volumeIndex: number) {\n    if (volumeIndex < 0) {\n      throw new Error(`volumeIndex must be a number starting from 0, got \"${volumeIndex}\"`);\n    }\n\n    return new this(undefined, `ephemeral${volumeIndex}`);\n  }\n\n  /**\n   * @param ebsDevice EBS device info\n   * @param virtualName Virtual device name\n   */\n  protected constructor(public readonly ebsDevice?: EbsDeviceProps, public readonly virtualName?: string) {\n  }\n}\n\n/**\n * Supported EBS volume types for blockDevices\n */\nexport enum EbsDeviceVolumeType {\n  /**\n   * Magnetic\n   */\n  STANDARD = 'standard',\n\n  /**\n   *  Provisioned IOPS SSD - IO1\n   */\n  IO1 = 'io1',\n\n  /**\n   *  Provisioned IOPS SSD - IO2\n   */\n  IO2 = 'io2',\n\n  /**\n   * General Purpose SSD - GP2\n   */\n  GP2 = 'gp2',\n\n  /**\n   * General Purpose SSD - GP3\n   */\n  GP3 = 'gp3',\n\n  /**\n   * Throughput Optimized HDD\n   */\n  ST1 = 'st1',\n\n  /**\n   * Cold HDD\n   */\n  SC1 = 'sc1',\n\n  /**\n   * General purpose SSD volume (GP2) that balances price and performance for a wide variety of workloads.\n   */\n  GENERAL_PURPOSE_SSD = GP2,\n\n  /**\n   * General purpose SSD volume (GP3) that balances price and performance for a wide variety of workloads.\n   */\n  GENERAL_PURPOSE_SSD_GP3 = GP3,\n\n  /**\n   * Highest-performance SSD volume (IO1) for mission-critical low-latency or high-throughput workloads.\n   */\n  PROVISIONED_IOPS_SSD = IO1,\n\n  /**\n   * Highest-performance SSD volume (IO2) for mission-critical low-latency or high-throughput workloads.\n   */\n  PROVISIONED_IOPS_SSD_IO2 = IO2,\n\n  /**\n   * Low-cost HDD volume designed for frequently accessed, throughput-intensive workloads.\n   */\n  THROUGHPUT_OPTIMIZED_HDD = ST1,\n\n  /**\n   * Lowest cost HDD volume designed for less frequently accessed workloads.\n   */\n  COLD_HDD = SC1,\n\n  /**\n   * Magnetic volumes are backed by magnetic drives and are suited for workloads where data is accessed infrequently, and scenarios where low-cost\n   * storage for small volume sizes is important.\n   */\n  MAGNETIC = STANDARD,\n}\n\n/**\n * An EBS Volume in AWS EC2.\n */\nexport interface IVolume extends IResource {\n  /**\n   * The EBS Volume's ID\n   *\n   * @attribute\n   */\n  readonly volumeId: string;\n\n  /**\n   * The availability zone that the EBS Volume is contained within (ex: us-west-2a)\n   */\n  readonly availabilityZone: string;\n\n  /**\n   * The customer-managed encryption key that is used to encrypt the Volume.\n   *\n   * @attribute\n   */\n  readonly encryptionKey?: IKey;\n\n  /**\n   * Grants permission to attach this Volume to an instance.\n   * CAUTION: Granting an instance permission to attach to itself using this method will lead to\n   * an unresolvable circular reference between the instance role and the instance.\n   * Use {@link IVolume.grantAttachVolumeToSelf} to grant an instance permission to attach this\n   * volume to itself.\n   *\n   * @param grantee  the principal being granted permission.\n   * @param instances the instances to which permission is being granted to attach this\n   *                 volume to. If not specified, then permission is granted to attach\n   *                 to all instances in this account.\n   */\n  grantAttachVolume(grantee: IGrantable, instances?: IInstance[]): Grant;\n\n  /**\n   * Grants permission to attach the Volume by a ResourceTag condition. If you are looking to\n   * grant an Instance, AutoScalingGroup, EC2-Fleet, SpotFleet, ECS host, etc the ability to attach\n   * this volume to **itself** then this is the method you want to use.\n   *\n   * This is implemented by adding a Tag with key `VolumeGrantAttach-<suffix>` to the given\n   * constructs and this Volume, and then conditioning the Grant such that the grantee is only\n   * given the ability to AttachVolume if both the Volume and the destination Instance have that\n   * tag applied to them.\n   *\n   * @param grantee    the principal being granted permission.\n   * @param constructs The list of constructs that will have the generated resource tag applied to them.\n   * @param tagKeySuffix A suffix to use on the generated Tag key in place of the generated hash value.\n   *                     Defaults to a hash calculated from this volume and list of constructs. (DEPRECATED)\n   */\n  grantAttachVolumeByResourceTag(grantee: IGrantable, constructs: Construct[], tagKeySuffix?: string): Grant;\n\n  /**\n   * Grants permission to detach this Volume from an instance\n   * CAUTION: Granting an instance permission to detach from itself using this method will lead to\n   * an unresolvable circular reference between the instance role and the instance.\n   * Use {@link IVolume.grantDetachVolumeFromSelf} to grant an instance permission to detach this\n   * volume from itself.\n   *\n   * @param grantee  the principal being granted permission.\n   * @param instances the instances to which permission is being granted to detach this\n   *                 volume from. If not specified, then permission is granted to detach\n   *                 from all instances in this account.\n   */\n  grantDetachVolume(grantee: IGrantable, instances?: IInstance[]): Grant;\n\n  /**\n   * Grants permission to detach the Volume by a ResourceTag condition.\n   *\n   * This is implemented via the same mechanism as {@link IVolume.grantAttachVolumeByResourceTag},\n   * and is subject to the same conditions.\n   *\n   * @param grantee    the principal being granted permission.\n   * @param constructs The list of constructs that will have the generated resource tag applied to them.\n   * @param tagKeySuffix A suffix to use on the generated Tag key in place of the generated hash value.\n   *                     Defaults to a hash calculated from this volume and list of constructs. (DEPRECATED)\n   */\n  grantDetachVolumeByResourceTag(grantee: IGrantable, constructs: Construct[], tagKeySuffix?: string): Grant;\n}\n\n/**\n * Properties of an EBS Volume\n */\nexport interface VolumeProps {\n  /**\n   * The value of the physicalName property of this resource.\n   *\n   * @default The physical name will be allocated by CloudFormation at deployment time\n   */\n  readonly volumeName?: string;\n\n  /**\n   * The Availability Zone in which to create the volume.\n   */\n  readonly availabilityZone: string;\n\n  /**\n   * The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size.\n   * See {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volume.html}\n   * for details on the allowable size for each type of volume.\n   *\n   * @default If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.\n   */\n  readonly size?: Size;\n\n  /**\n   * The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.\n   *\n   * @default The EBS volume is not created from a snapshot.\n   */\n  readonly snapshotId?: string;\n\n  /**\n   * Indicates whether Amazon EBS Multi-Attach is enabled.\n   * See {@link https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html#considerations|Considerations and limitations}\n   * for the constraints of multi-attach.\n   *\n   * @default false\n   */\n  readonly enableMultiAttach?: boolean;\n\n  /**\n   * Specifies whether the volume should be encrypted. The effect of setting the encryption state to true depends on the volume origin\n   * (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information,\n   * see {@link https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default|Encryption by Default}\n   * in the Amazon Elastic Compute Cloud User Guide.\n   *\n   * Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see\n   * {@link https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances|Supported Instance Types.}\n   *\n   * @default false\n   */\n  readonly encrypted?: boolean;\n\n  /**\n   * The customer-managed encryption key that is used to encrypt the Volume. The encrypted property must\n   * be true if this is provided.\n   *\n   * Note: If using an {@link aws-kms.IKey} created from a {@link aws-kms.Key.fromKeyArn()} here,\n   * then the KMS key **must** have the following in its Key policy; otherwise, the Volume\n   * will fail to create.\n   *\n   *     {\n   *       \"Effect\": \"Allow\",\n   *       \"Principal\": { \"AWS\": \"<arn for your account-user> ex: arn:aws:iam::00000000000:root\" },\n   *       \"Resource\": \"*\",\n   *       \"Action\": [\n   *         \"kms:DescribeKey\",\n   *         \"kms:GenerateDataKeyWithoutPlainText\",\n   *       ],\n   *       \"Condition\": {\n   *         \"StringEquals\": {\n   *           \"kms:ViaService\": \"ec2.<Region>.amazonaws.com\", (eg: ec2.us-east-1.amazonaws.com)\n   *           \"kms:CallerAccount\": \"0000000000\" (your account ID)\n   *         }\n   *       }\n   *     }\n   *\n   * @default The default KMS key for the account, region, and EC2 service is used.\n   */\n  readonly encryptionKey?: IKey;\n\n  /**\n   * Indicates whether the volume is auto-enabled for I/O operations. By default, Amazon EBS disables I/O to the volume from attached EC2\n   * instances when it determines that a volume's data is potentially inconsistent. If the consistency of the volume is not a concern, and\n   * you prefer that the volume be made available immediately if it's impaired, you can configure the volume to automatically enable I/O.\n   *\n   * @default false\n   */\n  readonly autoEnableIo?: boolean;\n\n  /**\n   * The type of the volume; what type of storage to use to form the EBS Volume.\n   *\n   * @default {@link EbsDeviceVolumeType.GENERAL_PURPOSE_SSD}\n   */\n  readonly volumeType?: EbsDeviceVolumeType;\n\n  /**\n   * The number of I/O operations per second (IOPS) to provision for the volume. The maximum ratio is 50 IOPS/GiB for PROVISIONED_IOPS_SSD,\n   * and 500 IOPS/GiB for both PROVISIONED_IOPS_SSD_IO2 and GENERAL_PURPOSE_SSD_GP3.\n   * See {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volume.html}\n   * for more information.\n   *\n   * This parameter is valid only for PROVISIONED_IOPS_SSD, PROVISIONED_IOPS_SSD_IO2 and GENERAL_PURPOSE_SSD_GP3 volumes.\n   *\n   * @default None -- Required for io1 and io2 volumes. The default for gp3 volumes is 3,000 IOPS if omitted.\n   */\n  readonly iops?: number;\n\n  /**\n   * Policy to apply when the volume is removed from the stack\n   *\n   * @default RemovalPolicy.RETAIN\n   */\n  readonly removalPolicy?: RemovalPolicy;\n}\n\n/**\n * Attributes required to import an existing EBS Volume into the Stack.\n */\nexport interface VolumeAttributes {\n  /**\n   * The EBS Volume's ID\n   */\n  readonly volumeId: string;\n\n  /**\n   * The availability zone that the EBS Volume is contained within (ex: us-west-2a)\n   */\n  readonly availabilityZone: string;\n\n  /**\n   * The customer-managed encryption key that is used to encrypt the Volume.\n   *\n   * @default None -- The EBS Volume is not using a customer-managed KMS key for encryption.\n   */\n  readonly encryptionKey?: IKey;\n}\n\n/**\n * Common behavior of Volumes. Users should not use this class directly, and instead use ``Volume``.\n */\nabstract class VolumeBase extends Resource implements IVolume {\n  public abstract readonly volumeId: string;\n  public abstract readonly availabilityZone: string;\n  public abstract readonly encryptionKey?: IKey;\n\n  public grantAttachVolume(grantee: IGrantable, instances?: IInstance[]): Grant {\n    const result = Grant.addToPrincipal({\n      grantee,\n      actions: ['ec2:AttachVolume'],\n      resourceArns: this.collectGrantResourceArns(instances),\n    });\n\n    if (this.encryptionKey) {\n      // When attaching a volume, the EC2 Service will need to grant to itself permission\n      // to be able to decrypt the encryption key. We restrict the CreateGrant for principle\n      // of least privilege, in accordance with best practices.\n      // See: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#ebs-encryption-permissions\n      const kmsGrant: Grant = this.encryptionKey.grant(grantee, 'kms:CreateGrant');\n      kmsGrant.principalStatement!.addConditions(\n        {\n          Bool: { 'kms:GrantIsForAWSResource': true },\n          StringEquals: {\n            'kms:ViaService': `ec2.${Stack.of(this).region}.amazonaws.com`,\n            'kms:GrantConstraintType': 'EncryptionContextSubset',\n          },\n        },\n      );\n    }\n\n    return result;\n  }\n\n  public grantAttachVolumeByResourceTag(grantee: IGrantable, constructs: Construct[], tagKeySuffix?: string): Grant {\n    const tagValue = this.calculateResourceTagValue([this, ...constructs]);\n    const tagKey = `VolumeGrantAttach-${tagKeySuffix ?? tagValue.slice(0, 10).toUpperCase()}`;\n    const grantCondition: { [key: string]: string } = {};\n    grantCondition[`ec2:ResourceTag/${tagKey}`] = tagValue;\n\n    const result = this.grantAttachVolume(grantee);\n    result.principalStatement!.addCondition(\n      'ForAnyValue:StringEquals', grantCondition,\n    );\n\n    // The ResourceTag condition requires that all resources involved in the operation have\n    // the given tag, so we tag this and all constructs given.\n    Tags.of(this).add(tagKey, tagValue);\n    constructs.forEach(construct => Tags.of(construct).add(tagKey, tagValue));\n\n    return result;\n  }\n\n  public grantDetachVolume(grantee: IGrantable, instances?: IInstance[]): Grant {\n    const result = Grant.addToPrincipal({\n      grantee,\n      actions: ['ec2:DetachVolume'],\n      resourceArns: this.collectGrantResourceArns(instances),\n    });\n    // Note: No encryption key permissions are required to detach an encrypted volume.\n    return result;\n  }\n\n  public grantDetachVolumeByResourceTag(grantee: IGrantable, constructs: Construct[], tagKeySuffix?: string): Grant {\n    const tagValue = this.calculateResourceTagValue([this, ...constructs]);\n    const tagKey = `VolumeGrantDetach-${tagKeySuffix ?? tagValue.slice(0, 10).toUpperCase()}`;\n    const grantCondition: { [key: string]: string } = {};\n    grantCondition[`ec2:ResourceTag/${tagKey}`] = tagValue;\n\n    const result = this.grantDetachVolume(grantee);\n    result.principalStatement!.addCondition(\n      'ForAnyValue:StringEquals', grantCondition,\n    );\n\n    // The ResourceTag condition requires that all resources involved in the operation have\n    // the given tag, so we tag this and all constructs given.\n    Tags.of(this).add(tagKey, tagValue);\n    constructs.forEach(construct => Tags.of(construct).add(tagKey, tagValue));\n\n    return result;\n  }\n\n  private collectGrantResourceArns(instances?: IInstance[]): string[] {\n    const stack = Stack.of(this);\n    const resourceArns: string[] = [\n      `arn:${stack.partition}:ec2:${stack.region}:${stack.account}:volume/${this.volumeId}`,\n    ];\n    const instanceArnPrefix = `arn:${stack.partition}:ec2:${stack.region}:${stack.account}:instance`;\n    if (instances) {\n      instances.forEach(instance => resourceArns.push(`${instanceArnPrefix}/${instance?.instanceId}`));\n    } else {\n      resourceArns.push(`${instanceArnPrefix}/*`);\n    }\n    return resourceArns;\n  }\n\n  private calculateResourceTagValue(constructs: Construct[]): string {\n    const md5 = crypto.createHash('md5');\n    constructs.forEach(construct => md5.update(Names.uniqueId(construct)));\n    return md5.digest('hex');\n  }\n}\n\n/**\n * Creates a new EBS Volume in AWS EC2.\n */\nexport class Volume extends VolumeBase {\n  /**\n   * Import an existing EBS Volume into the Stack.\n   *\n   * @param scope the scope of the import.\n   * @param id    the ID of the imported Volume in the construct tree.\n   * @param attrs the attributes of the imported Volume\n   */\n  public static fromVolumeAttributes(scope: Construct, id: string, attrs: VolumeAttributes): IVolume {\n    class Import extends VolumeBase {\n      public readonly volumeId = attrs.volumeId;\n      public readonly availabilityZone = attrs.availabilityZone;\n      public readonly encryptionKey = attrs.encryptionKey;\n    }\n    // Check that the provided volumeId looks like it could be valid.\n    if (!Token.isUnresolved(attrs.volumeId) && !/^vol-[0-9a-fA-F]+$/.test(attrs.volumeId)) {\n      throw new Error('`volumeId` does not match expected pattern. Expected `vol-<hexadecmial value>` (ex: `vol-05abe246af`) or a Token');\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly volumeId: string;\n  public readonly availabilityZone: string;\n  public readonly encryptionKey?: IKey;\n\n  constructor(scope: Construct, id: string, props: VolumeProps) {\n    super(scope, id, {\n      physicalName: props.volumeName,\n    });\n\n    this.validateProps(props);\n\n    const resource = new CfnVolume(this, 'Resource', {\n      availabilityZone: props.availabilityZone,\n      autoEnableIo: props.autoEnableIo,\n      encrypted: props.encrypted,\n      kmsKeyId: props.encryptionKey?.keyArn,\n      iops: props.iops,\n      multiAttachEnabled: props.enableMultiAttach ?? false,\n      size: props.size?.toGibibytes({ rounding: SizeRoundingBehavior.FAIL }),\n      snapshotId: props.snapshotId,\n      volumeType: props.volumeType ?? EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n    });\n    resource.applyRemovalPolicy(props.removalPolicy);\n\n    if (props.volumeName) Tags.of(resource).add('Name', props.volumeName);\n\n    this.volumeId = resource.ref;\n    this.availabilityZone = props.availabilityZone;\n    this.encryptionKey = props.encryptionKey;\n\n    if (this.encryptionKey) {\n      // Per: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#ebs-encryption-requirements\n      const principal =\n        new ViaServicePrincipal(`ec2.${Stack.of(this).region}.amazonaws.com`, new AccountRootPrincipal()).withConditions({\n          StringEquals: {\n            'kms:CallerAccount': Stack.of(this).account,\n          },\n        });\n      const grant = this.encryptionKey.grant(principal,\n        // Describe & Generate are required to be able to create the CMK-encrypted Volume.\n        'kms:DescribeKey',\n        'kms:GenerateDataKeyWithoutPlainText',\n      );\n      if (props.snapshotId) {\n        // ReEncrypt is required for when re-encrypting from an encrypted snapshot.\n        grant.principalStatement?.addActions('kms:ReEncrypt*');\n      }\n    }\n  }\n\n  protected validateProps(props: VolumeProps) {\n    if (!(props.size || props.snapshotId)) {\n      throw new Error('Must provide at least one of `size` or `snapshotId`');\n    }\n\n    if (props.snapshotId && !Token.isUnresolved(props.snapshotId) && !/^snap-[0-9a-fA-F]+$/.test(props.snapshotId)) {\n      throw new Error('`snapshotId` does match expected pattern. Expected `snap-<hexadecmial value>` (ex: `snap-05abe246af`) or Token');\n    }\n\n    if (props.encryptionKey && !props.encrypted) {\n      throw new Error('`encrypted` must be true when providing an `encryptionKey`.');\n    }\n\n    if (\n      props.volumeType &&\n      [\n        EbsDeviceVolumeType.PROVISIONED_IOPS_SSD,\n        EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2,\n      ].includes(props.volumeType) &&\n      !props.iops\n    ) {\n      throw new Error(\n        '`iops` must be specified if the `volumeType` is `PROVISIONED_IOPS_SSD` or `PROVISIONED_IOPS_SSD_IO2`.',\n      );\n    }\n\n    if (props.iops) {\n      const volumeType = props.volumeType ?? EbsDeviceVolumeType.GENERAL_PURPOSE_SSD;\n      if (\n        ![\n          EbsDeviceVolumeType.PROVISIONED_IOPS_SSD,\n          EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2,\n          EbsDeviceVolumeType.GENERAL_PURPOSE_SSD_GP3,\n        ].includes(volumeType)\n      ) {\n        throw new Error(\n          '`iops` may only be specified if the `volumeType` is `PROVISIONED_IOPS_SSD`, `PROVISIONED_IOPS_SSD_IO2` or `GENERAL_PURPOSE_SSD_GP3`.',\n        );\n      }\n      // Enforce minimum & maximum IOPS:\n      // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volume.html\n      const iopsRanges: { [key: string]: { Min: number, Max: number } } = {};\n      iopsRanges[EbsDeviceVolumeType.GENERAL_PURPOSE_SSD_GP3] = { Min: 3000, Max: 16000 };\n      iopsRanges[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD] = { Min: 100, Max: 64000 };\n      iopsRanges[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2] = { Min: 100, Max: 64000 };\n      const { Min, Max } = iopsRanges[volumeType];\n      if (props.iops < Min || props.iops > Max) {\n        throw new Error(`\\`${volumeType}\\` volumes iops must be between ${Min} and ${Max}.`);\n      }\n\n      // Enforce maximum ratio of IOPS/GiB:\n      // https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html\n      const maximumRatios: { [key: string]: number } = {};\n      maximumRatios[EbsDeviceVolumeType.GENERAL_PURPOSE_SSD_GP3] = 500;\n      maximumRatios[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD] = 50;\n      maximumRatios[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2] = 500;\n      const maximumRatio = maximumRatios[volumeType];\n      if (props.size && (props.iops > maximumRatio * props.size.toGibibytes({ rounding: SizeRoundingBehavior.FAIL }))) {\n        throw new Error(`\\`${volumeType}\\` volumes iops has a maximum ratio of ${maximumRatio} IOPS/GiB.`);\n      }\n    }\n\n    if (props.enableMultiAttach) {\n      const volumeType = props.volumeType ?? EbsDeviceVolumeType.GENERAL_PURPOSE_SSD;\n      if (\n        ![\n          EbsDeviceVolumeType.PROVISIONED_IOPS_SSD,\n          EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2,\n        ].includes(volumeType)\n      ) {\n        throw new Error('multi-attach is supported exclusively on `PROVISIONED_IOPS_SSD` and `PROVISIONED_IOPS_SSD_IO2` volumes.');\n      }\n    }\n\n    if (props.size) {\n      const size = props.size.toGibibytes({ rounding: SizeRoundingBehavior.FAIL });\n      // Enforce minimum & maximum volume size:\n      // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volume.html\n      const sizeRanges: { [key: string]: { Min: number, Max: number } } = {};\n      sizeRanges[EbsDeviceVolumeType.GENERAL_PURPOSE_SSD] = { Min: 1, Max: 16384 };\n      sizeRanges[EbsDeviceVolumeType.GENERAL_PURPOSE_SSD_GP3] = { Min: 1, Max: 16384 };\n      sizeRanges[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD] = { Min: 4, Max: 16384 };\n      sizeRanges[EbsDeviceVolumeType.PROVISIONED_IOPS_SSD_IO2] = { Min: 4, Max: 16384 };\n      sizeRanges[EbsDeviceVolumeType.THROUGHPUT_OPTIMIZED_HDD] = { Min: 125, Max: 16384 };\n      sizeRanges[EbsDeviceVolumeType.COLD_HDD] = { Min: 125, Max: 16384 };\n      sizeRanges[EbsDeviceVolumeType.MAGNETIC] = { Min: 1, Max: 1024 };\n      const volumeType = props.volumeType ?? EbsDeviceVolumeType.GENERAL_PURPOSE_SSD;\n      const { Min, Max } = sizeRanges[volumeType];\n      if (size < Min || size > Max) {\n        throw new Error(`\\`${volumeType}\\` volumes must be between ${Min} GiB and ${Max} GiB in size.`);\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
