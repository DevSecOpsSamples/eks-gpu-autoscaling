{
  "version": 3,
  "sources": ["ebs-util.ts"],
  "sourcesContent": ["import { Annotations } from '../../../core';\nimport { CfnInstance, CfnLaunchTemplate } from '../ec2.generated';\nimport { BlockDevice, EbsDeviceVolumeType } from '../volume';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\nexport function instanceBlockDeviceMappings(construct: Construct, blockDevices: BlockDevice[]): CfnInstance.BlockDeviceMappingProperty[] {\n  return synthesizeBlockDeviceMappings<CfnInstance.BlockDeviceMappingProperty, object>(construct, blockDevices, {});\n}\n\nexport function launchTemplateBlockDeviceMappings(construct: Construct, blockDevices: BlockDevice[]): CfnLaunchTemplate.BlockDeviceMappingProperty[] {\n  return synthesizeBlockDeviceMappings<CfnLaunchTemplate.BlockDeviceMappingProperty, string>(construct, blockDevices, '');\n}\n\n/**\n * Synthesize an array of block device mappings from a list of block device\n *\n * @param construct the instance/asg construct, used to host any warning\n * @param blockDevices list of block devices\n */\nfunction synthesizeBlockDeviceMappings<RT, NDT>(construct: Construct, blockDevices: BlockDevice[], noDeviceValue: NDT): RT[] {\n  return blockDevices.map<RT>(({ deviceName, volume, mappingEnabled }): RT => {\n    const { virtualName, ebsDevice: ebs } = volume;\n\n    let finalEbs: CfnLaunchTemplate.EbsProperty | CfnInstance.EbsProperty | undefined;\n\n    if (ebs) {\n\n      const { iops, volumeType, kmsKey, ...rest } = ebs;\n\n      if (!iops) {\n        if (volumeType === EbsDeviceVolumeType.IO1 || volumeType === EbsDeviceVolumeType.IO2) {\n          throw new Error('iops property is required with volumeType: EbsDeviceVolumeType.IO1 and EbsDeviceVolumeType.IO2');\n        }\n      } else if (volumeType !== EbsDeviceVolumeType.IO1 && volumeType !== EbsDeviceVolumeType.IO2 && volumeType !== EbsDeviceVolumeType.GP3) {\n        Annotations.of(construct).addWarning('iops will be ignored without volumeType: IO1, IO2, or GP3');\n      }\n\n      /**\n       * Because the Ebs properties of the L2 Constructs do not match the Ebs properties of the Cfn Constructs,\n       * we have to do some transformation and handle all destructed properties\n       */\n\n      finalEbs = {\n        ...rest,\n        iops,\n        volumeType,\n        kmsKeyId: kmsKey?.keyArn,\n      };\n\n    } else {\n      finalEbs = undefined;\n    }\n\n\n    const noDevice = mappingEnabled === false ? noDeviceValue : undefined;\n    return { deviceName, ebs: finalEbs, virtualName, noDevice } as any;\n  });\n}\n"],
  "mappings": "yJAAA,KAAA,QAAA,QAAA,eAAA,EAEA,SAAA,QAAA,WAAA,EAMA,qCAA4C,UAAsB,aAA2B,CAC3F,MAAO,+BAA8E,UAAW,aAAc,CAAA,CAAE,CAClH,CAFA,QAAA,4BAAA,4BAIA,2CAAkD,UAAsB,aAA2B,CACjG,MAAO,+BAAoF,UAAW,aAAc,EAAE,CACxH,CAFA,QAAA,kCAAA,kCAUA,uCAAgD,UAAsB,aAA6B,cAAkB,CACnH,MAAO,cAAa,IAAQ,CAAC,CAAE,WAAY,OAAQ,kBAAwB,CACzE,KAAM,CAAE,YAAa,UAAW,KAAQ,OAExC,GAAI,UAEJ,GAAI,IAAK,CAEP,KAAM,CAAE,KAAM,WAAY,UAAW,MAAS,IAE9C,GAAK,KAIE,AAAI,aAAe,SAAA,oBAAoB,KAAO,aAAe,SAAA,oBAAoB,KAAO,aAAe,SAAA,oBAAoB,KAChI,OAAA,YAAY,GAAG,SAAS,EAAE,WAAW,2DAA2D,UAJ5F,aAAe,SAAA,oBAAoB,KAAO,aAAe,SAAA,oBAAoB,IAC/E,KAAM,IAAI,OAAM,gGAAgG,EAWpH,SAAW,IACN,KACH,KACA,WACA,SAAU,QAAM,KAAA,OAAN,OAAQ,YAIpB,UAAW,OAKb,MAAO,CAAE,WAAY,IAAK,SAAU,YAAa,SADhC,iBAAmB,GAAQ,cAAgB,MACH,CAC3D,CAAC,CACH",
  "names": []
}
