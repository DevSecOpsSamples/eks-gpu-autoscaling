{
  "version": 3,
  "sources": ["directoryservice.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-04-07T10:53:54.567Z\",\"fingerprint\":\"vi27yVLxbk1R5FWJtcXt7LorSySX4k5ie9mSID181T4=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n/**\n * Properties for defining a `CfnMicrosoftAD`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html\n */\nexport interface CfnMicrosoftADProps {\n\n    /**\n     * The fully qualified domain name for the AWS Managed Microsoft AD directory, such as `corp.example.com` . This name will resolve inside your VPC only. It does not need to be publicly resolvable.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-name\n     */\n    readonly name: string;\n\n    /**\n     * The password for the default administrative user named `Admin` .\n     *\n     * If you need to change the password for the administrator account, see the [ResetUserPassword](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_ResetUserPassword.html) API call in the *AWS Directory Service API Reference* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-password\n     */\n    readonly password: string;\n\n    /**\n     * Specifies the VPC settings of the Microsoft AD directory server in AWS .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-vpcsettings\n     */\n    readonly vpcSettings: CfnMicrosoftAD.VpcSettingsProperty | cdk.IResolvable;\n\n    /**\n     * Specifies an alias for a directory and assigns the alias to the directory. The alias is used to construct the access URL for the directory, such as `http://<alias>.awsapps.com` . By default, AWS CloudFormation does not create an alias.\n     *\n     * > After an alias has been created, it cannot be deleted or reused, so this operation should only be used when absolutely necessary.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-createalias\n     */\n    readonly createAlias?: boolean | cdk.IResolvable;\n\n    /**\n     * AWS Managed Microsoft AD is available in two editions: `Standard` and `Enterprise` . `Enterprise` is the default.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-edition\n     */\n    readonly edition?: string;\n\n    /**\n     * Whether to enable single sign-on for a Microsoft Active Directory in AWS . Single sign-on allows users in your directory to access certain AWS services from a computer joined to the directory without having to enter their credentials separately. If you don't specify a value, AWS CloudFormation disables single sign-on by default.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-enablesso\n     */\n    readonly enableSso?: boolean | cdk.IResolvable;\n\n    /**\n     * The NetBIOS name for your domain, such as `CORP` . If you don't specify a NetBIOS name, it will default to the first part of your directory DNS. For example, `CORP` for the directory DNS `corp.example.com` .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-shortname\n     */\n    readonly shortName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMicrosoftADProps`\n *\n * @param properties - the TypeScript properties of a `CfnMicrosoftADProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMicrosoftADPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('createAlias', cdk.validateBoolean)(properties.createAlias));\n    errors.collect(cdk.propertyValidator('edition', cdk.validateString)(properties.edition));\n    errors.collect(cdk.propertyValidator('enableSso', cdk.validateBoolean)(properties.enableSso));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('shortName', cdk.validateString)(properties.shortName));\n    errors.collect(cdk.propertyValidator('vpcSettings', cdk.requiredValidator)(properties.vpcSettings));\n    errors.collect(cdk.propertyValidator('vpcSettings', CfnMicrosoftAD_VpcSettingsPropertyValidator)(properties.vpcSettings));\n    return errors.wrap('supplied properties not correct for \"CfnMicrosoftADProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DirectoryService::MicrosoftAD` resource\n *\n * @param properties - the TypeScript properties of a `CfnMicrosoftADProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DirectoryService::MicrosoftAD` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMicrosoftADPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMicrosoftADPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Password: cdk.stringToCloudFormation(properties.password),\n        VpcSettings: cfnMicrosoftADVpcSettingsPropertyToCloudFormation(properties.vpcSettings),\n        CreateAlias: cdk.booleanToCloudFormation(properties.createAlias),\n        Edition: cdk.stringToCloudFormation(properties.edition),\n        EnableSso: cdk.booleanToCloudFormation(properties.enableSso),\n        ShortName: cdk.stringToCloudFormation(properties.shortName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMicrosoftADPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMicrosoftADProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMicrosoftADProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('vpcSettings', 'VpcSettings', CfnMicrosoftADVpcSettingsPropertyFromCloudFormation(properties.VpcSettings));\n    ret.addPropertyResult('createAlias', 'CreateAlias', properties.CreateAlias != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CreateAlias) : undefined);\n    ret.addPropertyResult('edition', 'Edition', properties.Edition != null ? cfn_parse.FromCloudFormation.getString(properties.Edition) : undefined);\n    ret.addPropertyResult('enableSso', 'EnableSso', properties.EnableSso != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableSso) : undefined);\n    ret.addPropertyResult('shortName', 'ShortName', properties.ShortName != null ? cfn_parse.FromCloudFormation.getString(properties.ShortName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::DirectoryService::MicrosoftAD`\n *\n * The `AWS::DirectoryService::MicrosoftAD` resource specifies a Microsoft Active Directory in AWS so that your directory users and groups can access the AWS Management Console and AWS applications using their existing credentials. For more information, see [AWS Managed Microsoft AD](https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html) in the *AWS Directory Service Admin Guide* .\n *\n * @cloudformationResource AWS::DirectoryService::MicrosoftAD\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html\n */\nexport class CfnMicrosoftAD extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DirectoryService::MicrosoftAD\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMicrosoftAD {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMicrosoftADPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMicrosoftAD(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * The alias for a directory. For example: `d-12373a053a` or `alias4-mydirectory-12345abcgmzsk` (if you have the `CreateAlias` property set to true).\n     * @cloudformationAttribute Alias\n     */\n    public readonly attrAlias: string;\n\n    /**\n     * The IP addresses of the DNS servers for the directory, such as `[ \"192.0.2.1\", \"192.0.2.2\" ]` .\n     * @cloudformationAttribute DnsIpAddresses\n     */\n    public readonly attrDnsIpAddresses: string[];\n\n    /**\n     * The fully qualified domain name for the AWS Managed Microsoft AD directory, such as `corp.example.com` . This name will resolve inside your VPC only. It does not need to be publicly resolvable.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-name\n     */\n    public name: string;\n\n    /**\n     * The password for the default administrative user named `Admin` .\n     *\n     * If you need to change the password for the administrator account, see the [ResetUserPassword](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_ResetUserPassword.html) API call in the *AWS Directory Service API Reference* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-password\n     */\n    public password: string;\n\n    /**\n     * Specifies the VPC settings of the Microsoft AD directory server in AWS .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-vpcsettings\n     */\n    public vpcSettings: CfnMicrosoftAD.VpcSettingsProperty | cdk.IResolvable;\n\n    /**\n     * Specifies an alias for a directory and assigns the alias to the directory. The alias is used to construct the access URL for the directory, such as `http://<alias>.awsapps.com` . By default, AWS CloudFormation does not create an alias.\n     *\n     * > After an alias has been created, it cannot be deleted or reused, so this operation should only be used when absolutely necessary.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-createalias\n     */\n    public createAlias: boolean | cdk.IResolvable | undefined;\n\n    /**\n     * AWS Managed Microsoft AD is available in two editions: `Standard` and `Enterprise` . `Enterprise` is the default.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-edition\n     */\n    public edition: string | undefined;\n\n    /**\n     * Whether to enable single sign-on for a Microsoft Active Directory in AWS . Single sign-on allows users in your directory to access certain AWS services from a computer joined to the directory without having to enter their credentials separately. If you don't specify a value, AWS CloudFormation disables single sign-on by default.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-enablesso\n     */\n    public enableSso: boolean | cdk.IResolvable | undefined;\n\n    /**\n     * The NetBIOS name for your domain, such as `CORP` . If you don't specify a NetBIOS name, it will default to the first part of your directory DNS. For example, `CORP` for the directory DNS `corp.example.com` .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html#cfn-directoryservice-microsoftad-shortname\n     */\n    public shortName: string | undefined;\n\n    /**\n     * Create a new `AWS::DirectoryService::MicrosoftAD`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnMicrosoftADProps) {\n        super(scope, id, { type: CfnMicrosoftAD.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'password', this);\n        cdk.requireProperty(props, 'vpcSettings', this);\n        this.attrAlias = cdk.Token.asString(this.getAtt('Alias'));\n        this.attrDnsIpAddresses = cdk.Token.asList(this.getAtt('DnsIpAddresses'));\n\n        this.name = props.name;\n        this.password = props.password;\n        this.vpcSettings = props.vpcSettings;\n        this.createAlias = props.createAlias;\n        this.edition = props.edition;\n        this.enableSso = props.enableSso;\n        this.shortName = props.shortName;\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMicrosoftAD.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            password: this.password,\n            vpcSettings: this.vpcSettings,\n            createAlias: this.createAlias,\n            edition: this.edition,\n            enableSso: this.enableSso,\n            shortName: this.shortName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMicrosoftADPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnMicrosoftAD {\n    /**\n     * Contains VPC information for the [CreateDirectory](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_CreateDirectory.html) or [CreateMicrosoftAD](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_CreateMicrosoftAD.html) operation.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-directoryservice-microsoftad-vpcsettings.html\n     */\n    export interface VpcSettingsProperty {\n        /**\n         * The identifiers of the subnets for the directory servers. The two subnets must be in different Availability Zones. AWS Directory Service specifies a directory server and a DNS server in each of these subnets.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-directoryservice-microsoftad-vpcsettings.html#cfn-directoryservice-microsoftad-vpcsettings-subnetids\n         */\n        readonly subnetIds: string[];\n        /**\n         * The identifier of the VPC in which to create the directory.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-directoryservice-microsoftad-vpcsettings.html#cfn-directoryservice-microsoftad-vpcsettings-vpcid\n         */\n        readonly vpcId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `VpcSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMicrosoftAD_VpcSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"VpcSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DirectoryService::MicrosoftAD.VpcSettings` resource\n *\n * @param properties - the TypeScript properties of a `VpcSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DirectoryService::MicrosoftAD.VpcSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMicrosoftADVpcSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMicrosoftAD_VpcSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMicrosoftADVpcSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMicrosoftAD.VpcSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMicrosoftAD.VpcSettingsProperty>();\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * Properties for defining a `CfnSimpleAD`\n *\n * @struct\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html\n */\nexport interface CfnSimpleADProps {\n\n    /**\n     * The fully qualified name for the directory, such as `corp.example.com` .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-name\n     */\n    readonly name: string;\n\n    /**\n     * The password for the directory administrator. The directory creation process creates a directory administrator account with the user name `Administrator` and this password.\n     *\n     * If you need to change the password for the administrator account, see the [ResetUserPassword](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_ResetUserPassword.html) API call in the *AWS Directory Service API Reference* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-password\n     */\n    readonly password: string;\n\n    /**\n     * The size of the directory. For valid values, see [CreateDirectory](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_CreateDirectory.html) in the *AWS Directory Service API Reference* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-size\n     */\n    readonly size: string;\n\n    /**\n     * A [DirectoryVpcSettings](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_DirectoryVpcSettings.html) object that contains additional information for the operation.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-vpcsettings\n     */\n    readonly vpcSettings: CfnSimpleAD.VpcSettingsProperty | cdk.IResolvable;\n\n    /**\n     * If set to `true` , specifies an alias for a directory and assigns the alias to the directory. The alias is used to construct the access URL for the directory, such as `http://<alias>.awsapps.com` . By default, this property is set to `false` .\n     *\n     * > After an alias has been created, it cannot be deleted or reused, so this operation should only be used when absolutely necessary.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-createalias\n     */\n    readonly createAlias?: boolean | cdk.IResolvable;\n\n    /**\n     * A description for the directory.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-description\n     */\n    readonly description?: string;\n\n    /**\n     * Whether to enable single sign-on for a directory. If you don't specify a value, AWS CloudFormation disables single sign-on by default.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-enablesso\n     */\n    readonly enableSso?: boolean | cdk.IResolvable;\n\n    /**\n     * The NetBIOS name of the directory, such as `CORP` .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-shortname\n     */\n    readonly shortName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSimpleADProps`\n *\n * @param properties - the TypeScript properties of a `CfnSimpleADProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSimpleADPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('createAlias', cdk.validateBoolean)(properties.createAlias));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('enableSso', cdk.validateBoolean)(properties.enableSso));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('shortName', cdk.validateString)(properties.shortName));\n    errors.collect(cdk.propertyValidator('size', cdk.requiredValidator)(properties.size));\n    errors.collect(cdk.propertyValidator('size', cdk.validateString)(properties.size));\n    errors.collect(cdk.propertyValidator('vpcSettings', cdk.requiredValidator)(properties.vpcSettings));\n    errors.collect(cdk.propertyValidator('vpcSettings', CfnSimpleAD_VpcSettingsPropertyValidator)(properties.vpcSettings));\n    return errors.wrap('supplied properties not correct for \"CfnSimpleADProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DirectoryService::SimpleAD` resource\n *\n * @param properties - the TypeScript properties of a `CfnSimpleADProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DirectoryService::SimpleAD` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSimpleADPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSimpleADPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Password: cdk.stringToCloudFormation(properties.password),\n        Size: cdk.stringToCloudFormation(properties.size),\n        VpcSettings: cfnSimpleADVpcSettingsPropertyToCloudFormation(properties.vpcSettings),\n        CreateAlias: cdk.booleanToCloudFormation(properties.createAlias),\n        Description: cdk.stringToCloudFormation(properties.description),\n        EnableSso: cdk.booleanToCloudFormation(properties.enableSso),\n        ShortName: cdk.stringToCloudFormation(properties.shortName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSimpleADPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSimpleADProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSimpleADProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('size', 'Size', cfn_parse.FromCloudFormation.getString(properties.Size));\n    ret.addPropertyResult('vpcSettings', 'VpcSettings', CfnSimpleADVpcSettingsPropertyFromCloudFormation(properties.VpcSettings));\n    ret.addPropertyResult('createAlias', 'CreateAlias', properties.CreateAlias != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CreateAlias) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('enableSso', 'EnableSso', properties.EnableSso != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableSso) : undefined);\n    ret.addPropertyResult('shortName', 'ShortName', properties.ShortName != null ? cfn_parse.FromCloudFormation.getString(properties.ShortName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n/**\n * A CloudFormation `AWS::DirectoryService::SimpleAD`\n *\n * The `AWS::DirectoryService::SimpleAD` resource specifies an AWS Directory Service Simple Active Directory ( Simple AD ) in AWS so that your directory users and groups can access the AWS Management Console and AWS applications using their existing credentials. Simple AD is a Microsoft Active Directory\u2013compatible directory. For more information, see [Simple Active Directory](https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_simple_ad.html) in the *AWS Directory Service Admin Guide* .\n *\n * @cloudformationResource AWS::DirectoryService::SimpleAD\n * @stability external\n *\n * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html\n */\nexport class CfnSimpleAD extends cdk.CfnResource implements cdk.IInspectable {\n    /**\n     * The CloudFormation resource type name for this resource class.\n     */\n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::DirectoryService::SimpleAD\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSimpleAD {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSimpleADPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSimpleAD(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n    /**\n     * The alias for a directory. For example: `d-12373a053a` or `alias4-mydirectory-12345abcgmzsk` (if you have the `CreateAlias` property set to true).\n     * @cloudformationAttribute Alias\n     */\n    public readonly attrAlias: string;\n\n    /**\n     * The IP addresses of the DNS servers for the directory, such as `[ \"172.31.3.154\", \"172.31.63.203\" ]` .\n     * @cloudformationAttribute DnsIpAddresses\n     */\n    public readonly attrDnsIpAddresses: string[];\n\n    /**\n     * The fully qualified name for the directory, such as `corp.example.com` .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-name\n     */\n    public name: string;\n\n    /**\n     * The password for the directory administrator. The directory creation process creates a directory administrator account with the user name `Administrator` and this password.\n     *\n     * If you need to change the password for the administrator account, see the [ResetUserPassword](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_ResetUserPassword.html) API call in the *AWS Directory Service API Reference* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-password\n     */\n    public password: string;\n\n    /**\n     * The size of the directory. For valid values, see [CreateDirectory](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_CreateDirectory.html) in the *AWS Directory Service API Reference* .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-size\n     */\n    public size: string;\n\n    /**\n     * A [DirectoryVpcSettings](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_DirectoryVpcSettings.html) object that contains additional information for the operation.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-vpcsettings\n     */\n    public vpcSettings: CfnSimpleAD.VpcSettingsProperty | cdk.IResolvable;\n\n    /**\n     * If set to `true` , specifies an alias for a directory and assigns the alias to the directory. The alias is used to construct the access URL for the directory, such as `http://<alias>.awsapps.com` . By default, this property is set to `false` .\n     *\n     * > After an alias has been created, it cannot be deleted or reused, so this operation should only be used when absolutely necessary.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-createalias\n     */\n    public createAlias: boolean | cdk.IResolvable | undefined;\n\n    /**\n     * A description for the directory.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-description\n     */\n    public description: string | undefined;\n\n    /**\n     * Whether to enable single sign-on for a directory. If you don't specify a value, AWS CloudFormation disables single sign-on by default.\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-enablesso\n     */\n    public enableSso: boolean | cdk.IResolvable | undefined;\n\n    /**\n     * The NetBIOS name of the directory, such as `CORP` .\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html#cfn-directoryservice-simplead-shortname\n     */\n    public shortName: string | undefined;\n\n    /**\n     * Create a new `AWS::DirectoryService::SimpleAD`.\n     *\n     * @param scope - scope in which this resource is defined\n     * @param id    - scoped id of the resource\n     * @param props - resource properties\n     */\n    constructor(scope: constructs.Construct, id: string, props: CfnSimpleADProps) {\n        super(scope, id, { type: CfnSimpleAD.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'password', this);\n        cdk.requireProperty(props, 'size', this);\n        cdk.requireProperty(props, 'vpcSettings', this);\n        this.attrAlias = cdk.Token.asString(this.getAtt('Alias'));\n        this.attrDnsIpAddresses = cdk.Token.asList(this.getAtt('DnsIpAddresses'));\n\n        this.name = props.name;\n        this.password = props.password;\n        this.size = props.size;\n        this.vpcSettings = props.vpcSettings;\n        this.createAlias = props.createAlias;\n        this.description = props.description;\n        this.enableSso = props.enableSso;\n        this.shortName = props.shortName;\n    }\n\n    /**\n     * Examines the CloudFormation resource and discloses attributes.\n     *\n     * @param inspector - tree inspector to collect and process attributes\n     *\n     */\n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSimpleAD.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            password: this.password,\n            size: this.size,\n            vpcSettings: this.vpcSettings,\n            createAlias: this.createAlias,\n            description: this.description,\n            enableSso: this.enableSso,\n            shortName: this.shortName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSimpleADPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSimpleAD {\n    /**\n     * Contains VPC information for the [CreateDirectory](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_CreateDirectory.html) or [CreateMicrosoftAD](https://docs.aws.amazon.com/directoryservice/latest/devguide/API_CreateMicrosoftAD.html) operation.\n     *\n     * @struct\n     * @stability external\n     *\n     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-directoryservice-simplead-vpcsettings.html\n     */\n    export interface VpcSettingsProperty {\n        /**\n         * The identifiers of the subnets for the directory servers. The two subnets must be in different Availability Zones. AWS Directory Service specifies a directory server and a DNS server in each of these subnets.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-directoryservice-simplead-vpcsettings.html#cfn-directoryservice-simplead-vpcsettings-subnetids\n         */\n        readonly subnetIds: string[];\n        /**\n         * The identifier of the VPC in which to create the directory.\n         *\n         * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-directoryservice-simplead-vpcsettings.html#cfn-directoryservice-simplead-vpcsettings-vpcid\n         */\n        readonly vpcId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `VpcSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSimpleAD_VpcSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"VpcSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::DirectoryService::SimpleAD.VpcSettings` resource\n *\n * @param properties - the TypeScript properties of a `VpcSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::DirectoryService::SimpleAD.VpcSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSimpleADVpcSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSimpleAD_VpcSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSimpleADVpcSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSimpleAD.VpcSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSimpleAD.VpcSettingsProperty>();\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
