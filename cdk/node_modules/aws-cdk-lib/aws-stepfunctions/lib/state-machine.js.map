{
  "version": 3,
  "sources": ["state-machine.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport * as iam from '../../aws-iam';\nimport * as logs from '../../aws-logs';\nimport { Arn, ArnFormat, Duration, IResource, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { StateGraph } from './state-graph';\nimport { StatesMetrics } from './stepfunctions-canned-metrics.generated';\nimport { CfnStateMachine } from './stepfunctions.generated';\nimport { IChainable } from './types';\n\n/**\n * Two types of state machines are available in AWS Step Functions: EXPRESS AND STANDARD.\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html\n *\n * @default STANDARD\n */\nexport enum StateMachineType {\n  /**\n   * Express Workflows are ideal for high-volume, event processing workloads.\n   */\n  EXPRESS = 'EXPRESS',\n\n  /**\n   * Standard Workflows are ideal for long-running, durable, and auditable workflows.\n   */\n  STANDARD = 'STANDARD'\n}\n\n/**\n * Defines which category of execution history events are logged.\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html\n *\n * @default ERROR\n */\nexport enum LogLevel {\n  /**\n   * No Logging\n   */\n  OFF = 'OFF',\n  /**\n   * Log everything\n   */\n  ALL = 'ALL',\n  /**\n   * Log all errors\n   */\n  ERROR = 'ERROR',\n  /**\n   * Log fatal errors\n   */\n  FATAL = 'FATAL'\n}\n\n/**\n * Defines what execution history events are logged and where they are logged.\n */\nexport interface LogOptions {\n  /**\n   * The log group where the execution history events will be logged.\n   */\n  readonly destination: logs.ILogGroup;\n\n  /**\n   * Determines whether execution data is included in your log.\n   *\n   * @default true\n   */\n  readonly includeExecutionData?: boolean;\n\n  /**\n   * Defines which category of execution history events are logged.\n   *\n   * @default ERROR\n   */\n  readonly level?: LogLevel;\n}\n\n/**\n * Properties for defining a State Machine\n */\nexport interface StateMachineProps {\n  /**\n   * A name for the state machine\n   *\n   * @default A name is automatically generated\n   */\n  readonly stateMachineName?: string;\n\n  /**\n   * Definition for this state machine\n   */\n  readonly definition: IChainable;\n\n  /**\n   * The execution role for the state machine service\n   *\n   * @default A role is automatically created\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * Maximum run time for this state machine\n   *\n   * @default No timeout\n   */\n  readonly timeout?: Duration;\n\n  /**\n   * Type of the state machine\n   *\n   * @default StateMachineType.STANDARD\n   */\n  readonly stateMachineType?: StateMachineType;\n\n  /**\n   * Defines what execution history events are logged and where they are logged.\n   *\n   * @default No logging\n   */\n  readonly logs?: LogOptions;\n\n  /**\n   * Specifies whether Amazon X-Ray tracing is enabled for this state machine.\n   *\n   * @default false\n   */\n  readonly tracingEnabled?: boolean;\n}\n\n/**\n * A new or imported state machine.\n */\nabstract class StateMachineBase extends Resource implements IStateMachine {\n\n  /**\n   * Import a state machine\n   */\n  public static fromStateMachineArn(scope: Construct, id: string, stateMachineArn: string): IStateMachine {\n    class Import extends StateMachineBase {\n      public readonly stateMachineArn = stateMachineArn;\n      public readonly grantPrincipal = new iam.UnknownPrincipal({ resource: this });\n    }\n    return new Import(scope, id, {\n      environmentFromArn: stateMachineArn,\n    });\n  }\n\n  public abstract readonly stateMachineArn: string;\n\n  /**\n   * The principal this state machine is running as\n   */\n  public abstract readonly grantPrincipal: iam.IPrincipal;\n\n  /**\n   * Grant the given identity permissions to start an execution of this state\n   * machine.\n   */\n  public grantStartExecution(identity: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions: ['states:StartExecution'],\n      resourceArns: [this.stateMachineArn],\n    });\n  }\n\n  /**\n   * Grant the given identity permissions to start a synchronous execution of\n   * this state machine.\n   */\n  public grantStartSyncExecution(identity: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions: ['states:StartSyncExecution'],\n      resourceArns: [this.stateMachineArn],\n    });\n  }\n\n  /**\n   * Grant the given identity permissions to read results from state\n   * machine.\n   */\n  public grantRead(identity: iam.IGrantable): iam.Grant {\n    iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions: [\n        'states:ListExecutions',\n        'states:ListStateMachines',\n      ],\n      resourceArns: [this.stateMachineArn],\n    });\n    iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions: [\n        'states:DescribeExecution',\n        'states:DescribeStateMachineForExecution',\n        'states:GetExecutionHistory',\n      ],\n      resourceArns: [`${this.executionArn()}:*`],\n    });\n    return iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions: [\n        'states:ListActivities',\n        'states:DescribeStateMachine',\n        'states:DescribeActivity',\n      ],\n      resourceArns: ['*'],\n    });\n  }\n\n  /**\n   * Grant the given identity task response permissions on a state machine\n   */\n  public grantTaskResponse(identity: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions: [\n        'states:SendTaskSuccess',\n        'states:SendTaskFailure',\n        'states:SendTaskHeartbeat',\n      ],\n      resourceArns: [this.stateMachineArn],\n    });\n  }\n\n  /**\n   * Grant the given identity permissions on all executions of the state machine\n   */\n  public grantExecution(identity: iam.IGrantable, ...actions: string[]) {\n    return iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions,\n      resourceArns: [`${this.executionArn()}:*`],\n    });\n  }\n\n  /**\n   * Grant the given identity custom permissions\n   */\n  public grant(identity: iam.IGrantable, ...actions: string[]): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions,\n      resourceArns: [this.stateMachineArn],\n    });\n  }\n\n\n  /**\n   * Return the given named metric for this State Machine's executions\n   *\n   * @default - sum over 5 minutes\n   */\n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/States',\n      metricName,\n      dimensionsMap: { StateMachineArn: this.stateMachineArn },\n      statistic: 'sum',\n      ...props,\n    }).attachTo(this);\n  }\n\n  /**\n   * Metric for the number of executions that failed\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricFailed(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.executionsFailedSum, props);\n  }\n\n  /**\n   * Metric for the number of executions that were throttled\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricThrottled(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    // There's a typo in the \"canned\" version of this\n    return this.metric('ExecutionThrottled', props);\n  }\n\n  /**\n   * Metric for the number of executions that were aborted\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricAborted(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.executionsAbortedSum, props);\n  }\n\n  /**\n   * Metric for the number of executions that succeeded\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricSucceeded(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.executionsSucceededSum, props);\n  }\n\n  /**\n   * Metric for the number of executions that timed out\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.executionsTimedOutSum, props);\n  }\n\n  /**\n   * Metric for the number of executions that were started\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricStarted(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.metric('ExecutionsStarted', props);\n  }\n\n  /**\n   * Metric for the interval, in milliseconds, between the time the execution starts and the time it closes\n   *\n   * @default - average over 5 minutes\n   */\n  public metricTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.executionTimeAverage, props);\n  }\n\n  /**\n   * Returns the pattern for the execution ARN's of the state machine\n   */\n  private executionArn(): string {\n    return Stack.of(this).formatArn({\n      resource: 'execution',\n      service: 'states',\n      resourceName: Arn.split(this.stateMachineArn, ArnFormat.COLON_RESOURCE_NAME).resourceName,\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n    });\n  }\n\n  private cannedMetric(\n    fn: (dims: { StateMachineArn: string }) => cloudwatch.MetricProps,\n    props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      ...fn({ StateMachineArn: this.stateMachineArn }),\n      ...props,\n    }).attachTo(this);\n  }\n}\n\n/**\n * Define a StepFunctions State Machine\n */\nexport class StateMachine extends StateMachineBase {\n  /**\n   * Execution role of this state machine\n   */\n  public readonly role: iam.IRole;\n\n  /**\n   * The name of the state machine\n   * @attribute\n   */\n  public readonly stateMachineName: string;\n\n  /**\n   * The ARN of the state machine\n   */\n  public readonly stateMachineArn: string;\n\n  /**\n   * Type of the state machine\n   * @attribute\n   */\n  public readonly stateMachineType: StateMachineType;\n\n  constructor(scope: Construct, id: string, props: StateMachineProps) {\n    super(scope, id, {\n      physicalName: props.stateMachineName,\n    });\n\n    if (props.stateMachineName !== undefined) {\n      this.validateStateMachineName(props.stateMachineName);\n    }\n\n    this.role = props.role || new iam.Role(this, 'Role', {\n      assumedBy: new iam.ServicePrincipal('states.amazonaws.com'),\n    });\n\n    const graph = new StateGraph(props.definition.startState, `State Machine ${id} definition`);\n    graph.timeout = props.timeout;\n\n    this.stateMachineType = props.stateMachineType ?? StateMachineType.STANDARD;\n\n    const resource = new CfnStateMachine(this, 'Resource', {\n      stateMachineName: this.physicalName,\n      stateMachineType: props.stateMachineType ?? undefined,\n      roleArn: this.role.roleArn,\n      definitionString: Stack.of(this).toJsonString(graph.toGraphJson()),\n      loggingConfiguration: props.logs ? this.buildLoggingConfiguration(props.logs) : undefined,\n      tracingConfiguration: props.tracingEnabled ? this.buildTracingConfiguration() : undefined,\n    });\n\n    resource.node.addDependency(this.role);\n\n    for (const statement of graph.policyStatements) {\n      this.addToRolePolicy(statement);\n    }\n\n    this.stateMachineName = this.getResourceNameAttribute(resource.attrName);\n    this.stateMachineArn = this.getResourceArnAttribute(resource.ref, {\n      service: 'states',\n      resource: 'stateMachine',\n      resourceName: this.physicalName,\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n    });\n  }\n\n  /**\n   * The principal this state machine is running as\n   */\n  public get grantPrincipal() {\n    return this.role.grantPrincipal;\n  }\n\n  /**\n   * Add the given statement to the role's policy\n   */\n  public addToRolePolicy(statement: iam.PolicyStatement) {\n    this.role.addToPrincipalPolicy(statement);\n  }\n\n  private validateStateMachineName(stateMachineName: string) {\n    if (!Token.isUnresolved(stateMachineName)) {\n      if (stateMachineName.length < 1 || stateMachineName.length > 80) {\n        throw new Error(`State Machine name must be between 1 and 80 characters. Received: ${stateMachineName}`);\n      }\n\n      if (!stateMachineName.match(/^[a-z0-9\\+\\!\\@\\.\\(\\)\\-\\=\\_\\']+$/i)) {\n        throw new Error(`State Machine name must match \"^[a-z0-9+!@.()-=_']+$/i\". Received: ${stateMachineName}`);\n      }\n    }\n  }\n\n  private buildLoggingConfiguration(logOptions: LogOptions): CfnStateMachine.LoggingConfigurationProperty {\n    // https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html#cloudwatch-iam-policy\n    this.addToRolePolicy(new iam.PolicyStatement({\n      effect: iam.Effect.ALLOW,\n      actions: [\n        'logs:CreateLogDelivery',\n        'logs:GetLogDelivery',\n        'logs:UpdateLogDelivery',\n        'logs:DeleteLogDelivery',\n        'logs:ListLogDeliveries',\n        'logs:PutResourcePolicy',\n        'logs:DescribeResourcePolicies',\n        'logs:DescribeLogGroups',\n      ],\n      resources: ['*'],\n    }));\n\n    return {\n      destinations: [{\n        cloudWatchLogsLogGroup: { logGroupArn: logOptions.destination.logGroupArn },\n      }],\n      includeExecutionData: logOptions.includeExecutionData,\n      level: logOptions.level || 'ERROR',\n    };\n  }\n\n  private buildTracingConfiguration(): CfnStateMachine.TracingConfigurationProperty {\n    this.addToRolePolicy(new iam.PolicyStatement({\n      // https://docs.aws.amazon.com/xray/latest/devguide/security_iam_id-based-policy-examples.html#xray-permissions-resources\n      // https://docs.aws.amazon.com/step-functions/latest/dg/xray-iam.html\n      actions: [\n        'xray:PutTraceSegments',\n        'xray:PutTelemetryRecords',\n        'xray:GetSamplingRules',\n        'xray:GetSamplingTargets',\n      ],\n      resources: ['*'],\n    }));\n\n    return {\n      enabled: true,\n    };\n  }\n}\n\n/**\n * A State Machine\n */\nexport interface IStateMachine extends IResource, iam.IGrantable {\n  /**\n   * The ARN of the state machine\n   * @attribute\n   */\n  readonly stateMachineArn: string;\n\n  /**\n   * Grant the given identity permissions to start an execution of this state\n   * machine.\n   *\n   * @param identity The principal\n   */\n  grantStartExecution(identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant the given identity permissions to start a synchronous execution of\n   * this state machine.\n   *\n   * @param identity The principal\n   */\n  grantStartSyncExecution(identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant the given identity read permissions for this state machine\n   *\n   * @param identity The principal\n   */\n  grantRead(identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant the given identity read permissions for this state machine\n   *\n   * @param identity The principal\n   */\n  grantTaskResponse(identity: iam.IGrantable): iam.Grant;\n\n  /**\n   * Grant the given identity permissions for all executions of a state machine\n   *\n   * @param identity The principal\n   * @param actions The list of desired actions\n   */\n  grantExecution(identity: iam.IGrantable, ...actions: string[]): iam.Grant;\n\n  /**\n   * Grant the given identity custom permissions\n   *\n   * @param identity The principal\n   * @param actions The list of desired actions\n   */\n  grant(identity: iam.IGrantable, ...actions: string[]): iam.Grant;\n\n  /**\n   * Return the given named metric for this State Machine's executions\n   *\n   * @default - sum over 5 minutes\n   */\n  metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the number of executions that failed\n   *\n   * @default - sum over 5 minutes\n   */\n  metricFailed(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the number of executions that were throttled\n   *\n   * @default sum over 5 minutes\n   */\n  metricThrottled(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the number of executions that were aborted\n   *\n   * @default - sum over 5 minutes\n   */\n  metricAborted(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the number of executions that succeeded\n   *\n   * @default - sum over 5 minutes\n   */\n  metricSucceeded(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the number of executions that timed out\n   *\n   * @default - sum over 5 minutes\n   */\n  metricTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the number of executions that were started\n   *\n   * @default - sum over 5 minutes\n   */\n  metricStarted(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the interval, in milliseconds, between the time the execution starts and the time it closes\n   *\n   * @default - sum over 5 minutes\n   */\n  metricTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n}\n"],
  "mappings": "6PAAA,WAAA,QAAA,sBAAA,EACA,IAAA,QAAA,eAAA,EAEA,OAAA,QAAA,YAAA,EAEA,cAAA,QAAA,eAAA,EACA,yCAAA,QAAA,0CAAA,EACA,0BAAA,QAAA,2BAAA,EAUA,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAI1B,kBAAA,QAAA,UAKA,kBAAA,SAAA,UACF,GAVY,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,CAAA,EAAA,EAmB5B,GAAY,UAAZ,AAAA,UAAY,UAAQ,CAIlB,UAAA,IAAA,MAIA,UAAA,IAAA,MAIA,UAAA,MAAA,QAIA,UAAA,MAAA,OACF,GAjBY,SAAA,QAAA,UAAA,SAAA,SAAQ,CAAA,EAAA,EAkGpB,MAAe,wBAAyB,QAAA,QAAQ,OAKhC,qBAAoB,MAAkB,GAAY,gBAAuB,CACrF,MAAM,cAAe,iBAAgB,CAArC,aAAA,qBACkB,KAAA,gBAAkB,gBAClB,KAAA,eAAiB,GAAI,KAAI,iBAAiB,CAAE,SAAU,IAAI,CAAE,CAC9E,EACA,MAAO,IAAI,QAAO,MAAO,GAAI,CAC3B,mBAAoB,gBACrB,EAcI,oBAAoB,SAAwB,CACjD,MAAO,KAAI,MAAM,eAAe,CAC9B,QAAS,SACT,QAAS,CAAC,uBAAuB,EACjC,aAAc,CAAC,KAAK,eAAe,EACpC,EAOI,wBAAwB,SAAwB,CACrD,MAAO,KAAI,MAAM,eAAe,CAC9B,QAAS,SACT,QAAS,CAAC,2BAA2B,EACrC,aAAc,CAAC,KAAK,eAAe,EACpC,EAOI,UAAU,SAAwB,CACvC,WAAI,MAAM,eAAe,CACvB,QAAS,SACT,QAAS,CACP,wBACA,4BAEF,aAAc,CAAC,KAAK,eAAe,EACpC,EACD,IAAI,MAAM,eAAe,CACvB,QAAS,SACT,QAAS,CACP,2BACA,0CACA,8BAEF,aAAc,CAAC,GAAG,KAAK,aAAY,KAAM,EAC1C,EACM,IAAI,MAAM,eAAe,CAC9B,QAAS,SACT,QAAS,CACP,wBACA,8BACA,2BAEF,aAAc,CAAC,GAAG,EACnB,EAMI,kBAAkB,SAAwB,CAC/C,MAAO,KAAI,MAAM,eAAe,CAC9B,QAAS,SACT,QAAS,CACP,yBACA,yBACA,4BAEF,aAAc,CAAC,KAAK,eAAe,EACpC,EAMI,eAAe,YAA6B,QAAiB,CAClE,MAAO,KAAI,MAAM,eAAe,CAC9B,QAAS,SACT,QACA,aAAc,CAAC,GAAG,KAAK,aAAY,KAAM,EAC1C,EAMI,MAAM,YAA6B,QAAiB,CACzD,MAAO,KAAI,MAAM,eAAe,CAC9B,QAAS,SACT,QACA,aAAc,CAAC,KAAK,eAAe,EACpC,EASI,OAAO,WAAoB,MAAgC,CAChE,MAAO,IAAI,YAAW,OAAO,CAC3B,UAAW,aACX,WACA,cAAe,CAAE,gBAAiB,KAAK,eAAe,EACtD,UAAW,SACR,MACJ,EAAE,SAAS,IAAI,EAQX,aAAa,MAAgC,CAClD,MAAO,MAAK,aAAa,yCAAA,cAAc,oBAAqB,KAAK,EAQ5D,gBAAgB,MAAgC,CAErD,MAAO,MAAK,OAAO,qBAAsB,KAAK,EAQzC,cAAc,MAAgC,CACnD,MAAO,MAAK,aAAa,yCAAA,cAAc,qBAAsB,KAAK,EAQ7D,gBAAgB,MAAgC,CACrD,MAAO,MAAK,aAAa,yCAAA,cAAc,uBAAwB,KAAK,EAQ/D,eAAe,MAAgC,CACpD,MAAO,MAAK,aAAa,yCAAA,cAAc,sBAAuB,KAAK,EAQ9D,cAAc,MAAgC,CACnD,MAAO,MAAK,OAAO,oBAAqB,KAAK,EAQxC,WAAW,MAAgC,CAChD,MAAO,MAAK,aAAa,yCAAA,cAAc,qBAAsB,KAAK,EAM5D,cAAY,CAClB,MAAO,QAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CAC9B,SAAU,YACV,QAAS,SACT,aAAc,OAAA,IAAI,MAAM,KAAK,gBAAiB,OAAA,UAAU,mBAAmB,EAAE,aAC7E,UAAW,OAAA,UAAU,oBACtB,EAGK,aACN,GACA,MAAgC,CAChC,MAAO,IAAI,YAAW,OAAO,IACxB,GAAG,CAAE,gBAAiB,KAAK,eAAe,CAAE,KAC5C,MACJ,EAAE,SAAS,IAAI,GAOpB,MAAa,oBAAqB,iBAAgB,CAuBhD,YAAY,MAAkB,GAAY,MAAwB,WAChE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,iBACrB,iFAEG,MAAM,mBAAqB,QAC7B,KAAK,yBAAyB,MAAM,gBAAgB,EAGtD,KAAK,KAAO,MAAM,MAAQ,GAAI,KAAI,KAAK,KAAM,OAAQ,CACnD,UAAW,GAAI,KAAI,iBAAiB,sBAAsB,EAC3D,EAED,KAAM,OAAQ,GAAI,eAAA,WAAW,MAAM,WAAW,WAAY,iBAAiB,eAAe,EAC1F,MAAM,QAAU,MAAM,QAEtB,KAAK,iBAAgB,IAAG,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAAI,iBAAiB,SAEnE,KAAM,UAAW,GAAI,2BAAA,gBAAgB,KAAM,WAAY,CACrD,iBAAkB,KAAK,aACvB,iBAAgB,IAAE,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAAI,OAC5C,QAAS,KAAK,KAAK,QACnB,iBAAkB,OAAA,MAAM,GAAG,IAAI,EAAE,aAAa,MAAM,YAAW,CAAE,EACjE,qBAAsB,MAAM,KAAO,KAAK,0BAA0B,MAAM,IAAI,EAAI,OAChF,qBAAsB,MAAM,eAAiB,KAAK,0BAAyB,EAAK,OACjF,EAED,SAAS,KAAK,cAAc,KAAK,IAAI,EAErC,SAAW,aAAa,OAAM,iBAC5B,KAAK,gBAAgB,SAAS,EAGhC,KAAK,iBAAmB,KAAK,yBAAyB,SAAS,QAAQ,EACvE,KAAK,gBAAkB,KAAK,wBAAwB,SAAS,IAAK,CAChE,QAAS,SACT,SAAU,eACV,aAAc,KAAK,aACnB,UAAW,OAAA,UAAU,oBACtB,KAMQ,iBAAc,CACvB,MAAO,MAAK,KAAK,eAMZ,gBAAgB,UAA8B,wEACnD,KAAK,KAAK,qBAAqB,SAAS,EAGlC,yBAAyB,iBAAwB,CACvD,GAAI,CAAC,OAAA,MAAM,aAAa,gBAAgB,EAAG,CACzC,GAAI,iBAAiB,OAAS,GAAK,iBAAiB,OAAS,GAC3D,KAAM,IAAI,OAAM,qEAAqE,kBAAkB,EAGzG,GAAI,CAAC,iBAAiB,MAAM,kCAAkC,EAC5D,KAAM,IAAI,OAAM,sEAAsE,kBAAkB,GAKtG,0BAA0B,WAAsB,CAEtD,YAAK,gBAAgB,GAAI,KAAI,gBAAgB,CAC3C,OAAQ,IAAI,OAAO,MACnB,QAAS,CACP,yBACA,sBACA,yBACA,yBACA,yBACA,yBACA,gCACA,0BAEF,UAAW,CAAC,GAAG,EAChB,CAAC,EAEK,CACL,aAAc,CAAC,CACb,uBAAwB,CAAE,YAAa,WAAW,YAAY,WAAW,EAC1E,EACD,qBAAsB,WAAW,qBACjC,MAAO,WAAW,OAAS,SAIvB,2BAAyB,CAC/B,YAAK,gBAAgB,GAAI,KAAI,gBAAgB,CAG3C,QAAS,CACP,wBACA,2BACA,wBACA,2BAEF,UAAW,CAAC,GAAG,EAChB,CAAC,EAEK,CACL,QAAS,KAnIf,QAAA,aAAA",
  "names": []
}
