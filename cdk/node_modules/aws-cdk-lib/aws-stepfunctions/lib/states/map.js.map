{
  "version": 3,
  "sources": ["map.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { FieldUtils } from '../fields';\nimport { StateGraph } from '../state-graph';\nimport { CatchProps, IChainable, INextable, RetryProps } from '../types';\nimport { StateType } from './private/state-type';\nimport { renderJsonPath, State } from './state';\n\n/**\n * Properties for defining a Map state\n */\nexport interface MapProps {\n  /**\n   * An optional description for this state\n   *\n   * @default No comment\n   */\n  readonly comment?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the input to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * input to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly inputPath?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the output to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * output to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly outputPath?: string;\n\n  /**\n   * JSONPath expression to indicate where to inject the state's output\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the state's\n   * input to become its output.\n   *\n   * @default $\n   */\n  readonly resultPath?: string;\n\n  /**\n   * JSONPath expression to select the array to iterate over\n   *\n   * @default $\n   */\n  readonly itemsPath?: string;\n\n  /**\n   * The JSON that you want to override your default iteration input\n   *\n   * @default $\n   */\n  readonly parameters?: { [key: string]: any };\n\n  /**\n   * The JSON that will replace the state's raw result and become the effective\n   * result before ResultPath is applied.\n   *\n   * You can use ResultSelector to create a payload with values that are static\n   * or selected from the state's raw result.\n   *\n   * @see\n   * https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-resultselector\n   *\n   * @default - None\n   */\n  readonly resultSelector?: { [key: string]: any };\n\n  /**\n   * MaxConcurrency\n   *\n   * An upper bound on the number of iterations you want running at once.\n   *\n   * @default - full concurrency\n   */\n  readonly maxConcurrency?: number;\n}\n\n/**\n * Returns true if the value passed is a positive integer\n * @param value the value ti validate\n */\n\nexport const isPositiveInteger = (value: number) => {\n  const isFloat = Math.floor(value) !== value;\n\n  const isNotPositiveInteger = value < 0 || value > Number.MAX_SAFE_INTEGER;\n\n  return !isFloat && !isNotPositiveInteger;\n};\n\n/**\n * Define a Map state in the state machine\n *\n * A `Map` state can be used to run a set of steps for each element of an input array.\n * A Map state will execute the same steps for multiple entries of an array in the state input.\n *\n * While the Parallel state executes multiple branches of steps using the same input, a Map state\n * will execute the same steps for multiple entries of an array in the state input.\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-map-state.html\n */\nexport class Map extends State implements INextable {\n  public readonly endStates: INextable[];\n\n  private readonly maxConcurrency: number | undefined;\n  private readonly itemsPath?: string;\n\n  constructor(scope: Construct, id: string, props: MapProps = {}) {\n    super(scope, id, props);\n    this.endStates = [this];\n    this.maxConcurrency = props.maxConcurrency;\n    this.itemsPath = props.itemsPath;\n  }\n\n  /**\n   * Add retry configuration for this state\n   *\n   * This controls if and how the execution will be retried if a particular\n   * error occurs.\n   */\n  public addRetry(props: RetryProps = {}): Map {\n    super._addRetry(props);\n    return this;\n  }\n\n  /**\n   * Add a recovery handler for this state\n   *\n   * When a particular error occurs, execution will continue at the error\n   * handler instead of failing the state machine execution.\n   */\n  public addCatch(handler: IChainable, props: CatchProps = {}): Map {\n    super._addCatch(handler.startState, props);\n    return this;\n  }\n\n  /**\n   * Continue normal execution with the given state\n   */\n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n  /**\n   * Define iterator state machine in Map\n   */\n  public iterator(iterator: IChainable): Map {\n    const name = `Map ${this.stateId} Iterator`;\n    super.addIterator(new StateGraph(iterator.startState, name));\n    return this;\n  }\n\n  /**\n   * Return the Amazon States Language object for this state\n   */\n  public toStateJson(): object {\n    return {\n      Type: StateType.MAP,\n      Comment: this.comment,\n      ResultPath: renderJsonPath(this.resultPath),\n      ...this.renderNextEnd(),\n      ...this.renderInputOutput(),\n      ...this.renderParameters(),\n      ...this.renderResultSelector(),\n      ...this.renderRetryCatch(),\n      ...this.renderIterator(),\n      ...this.renderItemsPath(),\n      MaxConcurrency: this.maxConcurrency,\n    };\n  }\n\n  /**\n   * Validate this state\n   */\n  protected validateState(): string[] {\n    const errors: string[] = [];\n\n    if (this.iteration === undefined) {\n      errors.push('Map state must have a non-empty iterator');\n    }\n\n    if (this.maxConcurrency !== undefined && !isPositiveInteger(this.maxConcurrency)) {\n      errors.push('maxConcurrency has to be a positive integer');\n    }\n\n    return errors;\n  }\n\n  private renderItemsPath(): any {\n    return {\n      ItemsPath: renderJsonPath(this.itemsPath),\n    };\n  }\n\n  /**\n   * Render Parameters in ASL JSON format\n   */\n  private renderParameters(): any {\n    return FieldUtils.renderObject({\n      Parameters: this.parameters,\n    });\n  }\n}\n"],
  "mappings": "uOACA,QAAA,QAAA,UAAA,EACA,SAAA,QAAA,WAAA,EACA,cAAA,QAAA,gBAAA,EAEA,aAAA,QAAA,sBAAA,EACA,QAAA,QAAA,SAAA,EAsFa,QAAA,kBAAoB,AAAC,OAAiB,CACjD,KAAM,SAAU,KAAK,MAAM,KAAK,IAAM,MAEhC,qBAAuB,MAAQ,GAAK,MAAQ,OAAO,iBAEzD,MAAO,CAAC,SAAW,CAAC,oBACtB,EAaA,MAAa,WAAY,SAAA,KAAK,CAM5B,YAAY,MAAkB,GAAY,MAAkB,CAAA,EAAE,CAC5D,MAAM,MAAO,GAAI,KAAK,wEACtB,KAAK,UAAY,CAAC,IAAI,EACtB,KAAK,eAAiB,MAAM,eAC5B,KAAK,UAAY,MAAM,UASlB,SAAS,MAAoB,CAAA,EAAE,gFACpC,MAAM,UAAU,KAAK,EACd,KASF,SAAS,QAAqB,MAAoB,CAAA,EAAE,0JACzD,MAAM,UAAU,QAAQ,WAAY,KAAK,EAClC,KAMF,KAAK,KAAgB,+EAC1B,MAAM,SAAS,KAAK,UAAU,EACvB,QAAA,MAAM,SAAS,KAAM,IAAI,EAM3B,SAAS,SAAoB,4EAClC,KAAM,MAAO,OAAO,KAAK,mBACzB,aAAM,YAAY,GAAI,eAAA,WAAW,SAAS,WAAY,IAAI,CAAC,EACpD,KAMF,aAAW,CAChB,MAAO,CACL,KAAM,aAAA,UAAU,IAChB,QAAS,KAAK,QACd,WAAY,QAAA,eAAe,KAAK,UAAU,KACvC,KAAK,cAAa,KAClB,KAAK,kBAAiB,KACtB,KAAK,iBAAgB,KACrB,KAAK,qBAAoB,KACzB,KAAK,iBAAgB,KACrB,KAAK,eAAc,KACnB,KAAK,gBAAe,EACvB,eAAgB,KAAK,gBAOf,eAAa,CACrB,KAAM,QAAmB,CAAA,EAEzB,MAAI,MAAK,YAAc,QACrB,OAAO,KAAK,0CAA0C,EAGpD,KAAK,iBAAmB,QAAa,CAAC,QAAA,kBAAkB,KAAK,cAAc,GAC7E,OAAO,KAAK,6CAA6C,EAGpD,OAGD,iBAAe,CACrB,MAAO,CACL,UAAW,QAAA,eAAe,KAAK,SAAS,GAOpC,kBAAgB,CACtB,MAAO,UAAA,WAAW,aAAa,CAC7B,WAAY,KAAK,WAClB,GApGL,QAAA,IAAA",
  "names": []
}
