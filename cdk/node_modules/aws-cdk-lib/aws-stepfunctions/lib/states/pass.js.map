{
  "version": 3,
  "sources": ["pass.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { FieldUtils } from '../fields';\nimport { IChainable, INextable } from '../types';\nimport { StateType } from './private/state-type';\nimport { renderJsonPath, State } from './state';\n\n/**\n * The result of a Pass operation\n */\nexport class Result {\n  /**\n   * The result of the operation is a string\n   */\n  public static fromString(value: string): Result {\n    return new Result(value);\n  }\n\n  /**\n   * The result of the operation is a number\n   */\n  public static fromNumber(value: number): Result {\n    return new Result(value);\n  }\n\n  /**\n   * The result of the operation is a boolean\n   */\n  public static fromBoolean(value: boolean): Result {\n    return new Result(value);\n  }\n\n  /**\n   * The result of the operation is an object\n   */\n  public static fromObject(value: {[key: string]: any}): Result {\n    return new Result(value);\n  }\n\n  /**\n   * The result of the operation is an array\n   */\n  public static fromArray(value: any[]): Result {\n    return new Result(value);\n  }\n\n  /**\n   *\n   * @param value result of the Pass operation\n   */\n  protected constructor(public readonly value: any) {\n  }\n}\n\n/**\n * Properties for defining a Pass state\n */\nexport interface PassProps {\n  /**\n   * An optional description for this state\n   *\n   * @default No comment\n   */\n  readonly comment?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the input to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * input to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly inputPath?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the output to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * output to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly outputPath?: string;\n\n  /**\n   * JSONPath expression to indicate where to inject the state's output\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the state's\n   * input to become its output.\n   *\n   * @default $\n   */\n  readonly resultPath?: string;\n\n  /**\n   * If given, treat as the result of this operation\n   *\n   * Can be used to inject or replace the current execution state.\n   *\n   * @default No injected result\n   */\n  readonly result?: Result;\n\n  /**\n   * Parameters pass a collection of key-value pairs, either static values or JSONPath expressions that select from the input.\n   *\n   * @see\n   * https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-parameters\n   *\n   * @default No parameters\n   */\n  readonly parameters?: { [name: string]: any };\n}\n\n/**\n * Define a Pass in the state machine\n *\n * A Pass state can be used to transform the current execution's state.\n */\nexport class Pass extends State implements INextable {\n  public readonly endStates: INextable[];\n\n  private readonly result?: Result;\n\n  constructor(scope: Construct, id: string, props: PassProps = {}) {\n    super(scope, id, props);\n\n    this.result = props.result;\n    this.endStates = [this];\n  }\n\n  /**\n   * Continue normal execution with the given state\n   */\n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n  /**\n   * Return the Amazon States Language object for this state\n   */\n  public toStateJson(): object {\n    return {\n      Type: StateType.PASS,\n      Comment: this.comment,\n      Result: this.result?.value,\n      ResultPath: renderJsonPath(this.resultPath),\n      ...this.renderInputOutput(),\n      ...this.renderParameters(),\n      ...this.renderNextEnd(),\n    };\n  }\n\n  /**\n   * Render Parameters in ASL JSON format\n   */\n  private renderParameters(): any {\n    return FieldUtils.renderObject({\n      Parameters: this.parameters,\n    });\n  }\n}\n"],
  "mappings": "gOACA,QAAA,QAAA,UAAA,EACA,SAAA,QAAA,WAAA,EAEA,aAAA,QAAA,sBAAA,EACA,QAAA,QAAA,SAAA,EAKA,MAAa,MAAM,CAwCjB,YAAsC,MAAU,CAAV,KAAA,MAAA,YApCxB,YAAW,MAAa,CACpC,MAAO,IAAI,QAAO,KAAK,QAMX,YAAW,MAAa,CACpC,MAAO,IAAI,QAAO,KAAK,QAMX,aAAY,MAAc,CACtC,MAAO,IAAI,QAAO,KAAK,QAMX,YAAW,MAA2B,CAClD,MAAO,IAAI,QAAO,KAAK,QAMX,WAAU,MAAY,CAClC,MAAO,IAAI,QAAO,KAAK,GAjC3B,QAAA,OAAA,sGA8GA,MAAa,YAAa,SAAA,KAAK,CAK7B,YAAY,MAAkB,GAAY,MAAmB,CAAA,EAAE,CAC7D,MAAM,MAAO,GAAI,KAAK,yEAEtB,KAAK,OAAS,MAAM,OACpB,KAAK,UAAY,CAAC,IAAI,EAMjB,KAAK,KAAgB,+EAC1B,MAAM,SAAS,KAAK,UAAU,EACvB,QAAA,MAAM,SAAS,KAAM,IAAI,EAM3B,aAAW,QAChB,MAAO,CACL,KAAM,aAAA,UAAU,KAChB,QAAS,KAAK,QACd,OAAM,IAAE,KAAK,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,MACrB,WAAY,QAAA,eAAe,KAAK,UAAU,KACvC,KAAK,kBAAiB,KACtB,KAAK,iBAAgB,KACrB,KAAK,cAAa,GAOjB,kBAAgB,CACtB,MAAO,UAAA,WAAW,aAAa,CAC7B,WAAY,KAAK,WAClB,GAzCL,QAAA,KAAA",
  "names": []
}
