{
  "version": 3,
  "sources": ["parallel.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { StateGraph } from '../state-graph';\nimport { CatchProps, IChainable, INextable, RetryProps } from '../types';\nimport { StateType } from './private/state-type';\nimport { renderJsonPath, State } from './state';\n\n/**\n * Properties for defining a Parallel state\n */\nexport interface ParallelProps {\n  /**\n   * An optional description for this state\n   *\n   * @default No comment\n   */\n  readonly comment?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the input to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * input to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly inputPath?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the output to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * output to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly outputPath?: string;\n\n  /**\n   * JSONPath expression to indicate where to inject the state's output\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the state's\n   * input to become its output.\n   *\n   * @default $\n   */\n  readonly resultPath?: string;\n\n  /**\n   * The JSON that will replace the state's raw result and become the effective\n   * result before ResultPath is applied.\n   *\n   * You can use ResultSelector to create a payload with values that are static\n   * or selected from the state's raw result.\n   *\n   * @see\n   * https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-resultselector\n   *\n   * @default - None\n   */\n  readonly resultSelector?: { [key: string]: any };\n}\n\n/**\n * Define a Parallel state in the state machine\n *\n * A Parallel state can be used to run one or more state machines at the same\n * time.\n *\n * The Result of a Parallel state is an array of the results of its substatemachines.\n */\nexport class Parallel extends State implements INextable {\n  public readonly endStates: INextable[];\n  private readonly _branches: IChainable[] = [];\n\n  constructor(scope: Construct, id: string, props: ParallelProps = {}) {\n    super(scope, id, props);\n\n    this.endStates = [this];\n  }\n\n  /**\n   * Add retry configuration for this state\n   *\n   * This controls if and how the execution will be retried if a particular\n   * error occurs.\n   */\n  public addRetry(props: RetryProps = {}): Parallel {\n    super._addRetry(props);\n    return this;\n  }\n\n  /**\n   * Add a recovery handler for this state\n   *\n   * When a particular error occurs, execution will continue at the error\n   * handler instead of failing the state machine execution.\n   */\n  public addCatch(handler: IChainable, props: CatchProps = {}): Parallel {\n    super._addCatch(handler.startState, props);\n    return this;\n  }\n\n  /**\n   * Continue normal execution with the given state\n   */\n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n  /**\n   * Define one or more branches to run in parallel\n   */\n  public branch(...branches: IChainable[]): Parallel {\n    // Store branches for late-bound stategraph creation when we call bindToGraph.\n    this._branches.push(...branches);\n    return this;\n  }\n\n  /**\n   * Overwrites State.bindToGraph. Adds branches to\n   * the Parallel state here so that any necessary\n   * prefixes are appended first.\n   */\n  public bindToGraph(graph: StateGraph) {\n    for (const branch of this._branches) {\n      const name = `Parallel '${this.stateId}' branch ${this.branches.length + 1}`;\n      super.addBranch(new StateGraph(branch.startState, name));\n    }\n    this._branches.splice(0, this._branches.length);\n    return super.bindToGraph(graph);\n  }\n\n  /**\n   * Return the Amazon States Language object for this state\n   */\n  public toStateJson(): object {\n    return {\n      Type: StateType.PARALLEL,\n      Comment: this.comment,\n      ResultPath: renderJsonPath(this.resultPath),\n      ...this.renderNextEnd(),\n      ...this.renderInputOutput(),\n      ...this.renderRetryCatch(),\n      ...this.renderBranches(),\n      ...this.renderResultSelector(),\n    };\n  }\n\n  /**\n   * Validate this state\n   */\n  protected validateState(): string[] {\n    if (this.branches.length === 0) {\n      return ['Parallel must have at least one branch'];\n    }\n    return [];\n  }\n}\n"],
  "mappings": "kNACA,QAAA,QAAA,UAAA,EACA,cAAA,QAAA,gBAAA,EAEA,aAAA,QAAA,sBAAA,EACA,QAAA,QAAA,SAAA,EAkEA,MAAa,gBAAiB,SAAA,KAAK,CAIjC,YAAY,MAAkB,GAAY,MAAuB,CAAA,EAAE,CACjE,MAAM,MAAO,GAAI,KAAK,EAHP,KAAA,UAA0B,CAAA,6EAKzC,KAAK,UAAY,CAAC,IAAI,EASjB,SAAS,MAAoB,CAAA,EAAE,gFACpC,MAAM,UAAU,KAAK,EACd,KASF,SAAS,QAAqB,MAAoB,CAAA,EAAE,0JACzD,MAAM,UAAU,QAAQ,WAAY,KAAK,EAClC,KAMF,KAAK,KAAgB,+EAC1B,MAAM,SAAS,KAAK,UAAU,EACvB,QAAA,MAAM,SAAS,KAAM,IAAI,EAM3B,UAAU,SAAsB,mFAErC,KAAK,UAAU,KAAK,GAAG,QAAQ,EACxB,KAQF,YAAY,MAAiB,yEAClC,SAAW,UAAU,MAAK,UAAW,CACnC,KAAM,MAAO,aAAa,KAAK,mBAAmB,KAAK,SAAS,OAAS,IACzE,MAAM,UAAU,GAAI,eAAA,WAAW,OAAO,WAAY,IAAI,CAAC,EAEzD,YAAK,UAAU,OAAO,EAAG,KAAK,UAAU,MAAM,EACvC,MAAM,YAAY,KAAK,EAMzB,aAAW,CAChB,MAAO,CACL,KAAM,aAAA,UAAU,SAChB,QAAS,KAAK,QACd,WAAY,QAAA,eAAe,KAAK,UAAU,KACvC,KAAK,cAAa,KAClB,KAAK,kBAAiB,KACtB,KAAK,iBAAgB,KACrB,KAAK,eAAc,KACnB,KAAK,qBAAoB,GAOtB,eAAa,CACrB,MAAI,MAAK,SAAS,SAAW,EACpB,CAAC,wCAAwC,EAE3C,CAAA,GAtFX,QAAA,SAAA",
  "names": []
}
