{
  "version": 3,
  "sources": ["task.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../../aws-cloudwatch';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { FieldUtils } from '../fields';\nimport { StateGraph } from '../state-graph';\nimport { IStepFunctionsTask, StepFunctionsTaskConfig } from '../step-functions-task';\nimport { CatchProps, IChainable, INextable, RetryProps } from '../types';\nimport { noEmptyObject } from '../util';\nimport { StateType } from './private/state-type';\nimport { renderJsonPath, State } from './state';\n\n/**\n * Props that are common to all tasks\n *\n * @deprecated - replaced by service integration specific classes (i.e. LambdaInvoke, SnsPublish)\n */\nexport interface TaskProps {\n  /**\n   * Actual task to be invoked in this workflow\n   */\n  readonly task: IStepFunctionsTask;\n\n  /**\n   * An optional description for this state\n   *\n   * @default No comment\n   */\n  readonly comment?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the input to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * input to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly inputPath?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the output to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * output to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly outputPath?: string;\n\n  /**\n   * JSONPath expression to indicate where to inject the state's output\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the state's\n   * input to become its output.\n   *\n   * @default $\n   */\n  readonly resultPath?: string;\n\n  /**\n   * Parameters to invoke the task with\n   *\n   * It is not recommended to use this field. The object that is passed in\n   * the `task` property will take care of returning the right values for the\n   * `Parameters` field in the Step Functions definition.\n   *\n   * The various classes that implement `IStepFunctionsTask` will take a\n   * properties which make sense for the task type. For example, for\n   * `InvokeFunction` the field that populates the `parameters` field will be\n   * called `payload`, and for the `PublishToTopic` the `parameters` field\n   * will be populated via a combination of the referenced topic, subject and\n   * message.\n   *\n   * If passed anyway, the keys in this map will override the parameters\n   * returned by the task object.\n   *\n   * @see\n   * https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-parameters\n   *\n   * @default - Use the parameters implied by the `task` property\n   */\n  readonly parameters?: { [name: string]: any };\n\n  /**\n   * Maximum run time of this state\n   *\n   * If the state takes longer than this amount of time to complete, a 'Timeout' error is raised.\n   *\n   * @default 60\n   */\n  readonly timeout?: cdk.Duration;\n}\n\n/**\n * Define a Task state in the state machine\n *\n * Reaching a Task state causes some work to be executed, represented by the\n * Task's resource property. Task constructs represent a generic Amazon\n * States Language Task.\n *\n * For some resource types, more specific subclasses of Task may be available\n * which are more convenient to use.\n *\n * @deprecated - replaced by service integration specific classes (i.e. LambdaInvoke, SnsPublish)\n */\nexport class Task extends State implements INextable {\n  public readonly endStates: INextable[];\n  private readonly timeout?: cdk.Duration;\n  private readonly taskProps: StepFunctionsTaskConfig;\n\n  constructor(scope: Construct, id: string, props: TaskProps) {\n    super(scope, id, props);\n\n    this.timeout = props.timeout;\n    const taskProps = props.task.bind(this);\n\n    this.taskProps = {\n      ...taskProps,\n      parameters: noEmptyObject({ ...taskProps.parameters || {}, ...props.parameters || {} }),\n    };\n    this.endStates = [this];\n  }\n\n  /**\n   * Add retry configuration for this state\n   *\n   * This controls if and how the execution will be retried if a particular\n   * error occurs.\n   */\n  public addRetry(props: RetryProps = {}): Task {\n    super._addRetry(props);\n    return this;\n  }\n\n  /**\n   * Add a recovery handler for this state\n   *\n   * When a particular error occurs, execution will continue at the error\n   * handler instead of failing the state machine execution.\n   */\n  public addCatch(handler: IChainable, props: CatchProps = {}): Task {\n    super._addCatch(handler.startState, props);\n    return this;\n  }\n\n  /**\n   * Continue normal execution with the given state\n   */\n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n  /**\n   * Return the Amazon States Language object for this state\n   */\n  public toStateJson(): object {\n    return {\n      ...this.renderNextEnd(),\n      ...this.renderRetryCatch(),\n      ...this.renderInputOutput(),\n      Type: StateType.TASK,\n      Comment: this.comment,\n      Resource: this.taskProps.resourceArn,\n      Parameters: this.taskProps.parameters && FieldUtils.renderObject(this.taskProps.parameters),\n      ResultPath: renderJsonPath(this.resultPath),\n      TimeoutSeconds: this.timeout && this.timeout.toSeconds(),\n      HeartbeatSeconds: this.taskProps.heartbeat && this.taskProps.heartbeat.toSeconds(),\n    };\n  }\n\n  /**\n   * Return the given named metric for this Task\n   *\n   * @default sum over 5 minutes\n   */\n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/States',\n      metricName,\n      dimensions: this.taskProps.metricDimensions,\n      statistic: 'sum',\n      ...props,\n    }).attachTo(this);\n  }\n\n  /**\n   * The interval, in milliseconds, between the time the Task starts and the time it closes.\n   *\n   * @default average over 5 minutes\n   */\n  public metricRunTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixSingular, 'RunTime', { statistic: 'avg', ...props });\n  }\n\n  /**\n   * The interval, in milliseconds, for which the activity stays in the schedule state.\n   *\n   * @default average over 5 minutes\n   */\n  public metricScheduleTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixSingular, 'ScheduleTime', { statistic: 'avg', ...props });\n  }\n\n  /**\n   * The interval, in milliseconds, between the time the activity is scheduled and the time it closes.\n   *\n   * @default average over 5 minutes\n   */\n  public metricTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixSingular, 'Time', { statistic: 'avg', ...props });\n  }\n\n  /**\n   * Metric for the number of times this activity is scheduled\n   *\n   * @default sum over 5 minutes\n   */\n  public metricScheduled(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'Scheduled', props);\n  }\n\n  /**\n   * Metric for the number of times this activity times out\n   *\n   * @default sum over 5 minutes\n   */\n  public metricTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'TimedOut', props);\n  }\n\n  /**\n   * Metric for the number of times this activity is started\n   *\n   * @default sum over 5 minutes\n   */\n  public metricStarted(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'Started', props);\n  }\n\n  /**\n   * Metric for the number of times this activity succeeds\n   *\n   * @default sum over 5 minutes\n   */\n  public metricSucceeded(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'Succeeded', props);\n  }\n\n  /**\n   * Metric for the number of times this activity fails\n   *\n   * @default sum over 5 minutes\n   */\n  public metricFailed(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'Failed', props);\n  }\n\n  /**\n   * Metric for the number of times the heartbeat times out for this activity\n   *\n   * @default sum over 5 minutes\n   */\n  public metricHeartbeatTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'HeartbeatTimedOut', props);\n  }\n\n  protected whenBoundToGraph(graph: StateGraph) {\n    super.whenBoundToGraph(graph);\n    for (const policyStatement of this.taskProps.policyStatements || []) {\n      graph.registerPolicyStatement(policyStatement);\n    }\n  }\n\n  private taskMetric(prefix: string | undefined, suffix: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    if (prefix === undefined) {\n      throw new Error('This Task Resource does not expose metrics');\n    }\n    return this.metric(prefix + suffix, props);\n  }\n}\n"],
  "mappings": "gJAAA,WAAA,QAAA,yBAAA,EAGA,QAAA,QAAA,UAAA,EACA,SAAA,QAAA,WAAA,EAIA,OAAA,QAAA,SAAA,EACA,aAAA,QAAA,sBAAA,EACA,QAAA,QAAA,SAAA,EAgGA,MAAa,YAAa,SAAA,KAAK,CAK7B,YAAY,MAAkB,GAAY,MAAgB,CACxD,MAAM,MAAO,GAAI,KAAK,EAEtB,KAAK,QAAU,MAAM,QACrB,KAAM,WAAY,MAAM,KAAK,KAAK,IAAI,EAEtC,KAAK,UAAY,IACZ,UACH,WAAY,OAAA,cAAc,IAAK,UAAU,YAAc,CAAA,KAAO,MAAM,YAAc,CAAA,CAAE,CAAE,GAExF,KAAK,UAAY,CAAC,IAAI,EASjB,SAAS,MAAoB,CAAA,EAAE,CACpC,aAAM,UAAU,KAAK,EACd,KASF,SAAS,QAAqB,MAAoB,CAAA,EAAE,CACzD,aAAM,UAAU,QAAQ,WAAY,KAAK,EAClC,KAMF,KAAK,KAAgB,CAC1B,aAAM,SAAS,KAAK,UAAU,EACvB,QAAA,MAAM,SAAS,KAAM,IAAI,EAM3B,aAAW,CAChB,MAAO,IACF,KAAK,cAAa,KAClB,KAAK,iBAAgB,KACrB,KAAK,kBAAiB,EACzB,KAAM,aAAA,UAAU,KAChB,QAAS,KAAK,QACd,SAAU,KAAK,UAAU,YACzB,WAAY,KAAK,UAAU,YAAc,SAAA,WAAW,aAAa,KAAK,UAAU,UAAU,EAC1F,WAAY,QAAA,eAAe,KAAK,UAAU,EAC1C,eAAgB,KAAK,SAAW,KAAK,QAAQ,UAAS,EACtD,iBAAkB,KAAK,UAAU,WAAa,KAAK,UAAU,UAAU,UAAS,GAS7E,OAAO,WAAoB,MAAgC,CAChE,MAAO,IAAI,YAAW,OAAO,CAC3B,UAAW,aACX,WACA,WAAY,KAAK,UAAU,iBAC3B,UAAW,SACR,MACJ,EAAE,SAAS,IAAI,EAQX,cAAc,MAAgC,CACnD,MAAO,MAAK,WAAW,KAAK,UAAU,qBAAsB,UAAW,CAAE,UAAW,SAAU,KAAK,CAAE,EAQhG,mBAAmB,MAAgC,CACxD,MAAO,MAAK,WAAW,KAAK,UAAU,qBAAsB,eAAgB,CAAE,UAAW,SAAU,KAAK,CAAE,EAQrG,WAAW,MAAgC,CAChD,MAAO,MAAK,WAAW,KAAK,UAAU,qBAAsB,OAAQ,CAAE,UAAW,SAAU,KAAK,CAAE,EAQ7F,gBAAgB,MAAgC,CACrD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,YAAa,KAAK,EAQvE,eAAe,MAAgC,CACpD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,WAAY,KAAK,EAQtE,cAAc,MAAgC,CACnD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,UAAW,KAAK,EAQrE,gBAAgB,MAAgC,CACrD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,YAAa,KAAK,EAQvE,aAAa,MAAgC,CAClD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,SAAU,KAAK,EAQpE,wBAAwB,MAAgC,CAC7D,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,oBAAqB,KAAK,EAG5E,iBAAiB,MAAiB,CAC1C,MAAM,iBAAiB,KAAK,EAC5B,SAAW,mBAAmB,MAAK,UAAU,kBAAoB,CAAA,EAC/D,MAAM,wBAAwB,eAAe,EAIzC,WAAW,OAA4B,OAAgB,MAAgC,CAC7F,GAAI,SAAW,OACb,KAAM,IAAI,OAAM,4CAA4C,EAE9D,MAAO,MAAK,OAAO,OAAS,OAAQ,KAAK,GA7K7C,QAAA,KAAA",
  "names": []
}
