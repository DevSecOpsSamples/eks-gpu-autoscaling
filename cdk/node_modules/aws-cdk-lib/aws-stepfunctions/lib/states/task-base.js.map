{
  "version": 3,
  "sources": ["task-base.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../../aws-cloudwatch';\nimport * as iam from '../../../aws-iam';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { StateGraph } from '../state-graph';\nimport { CatchProps, IChainable, INextable, RetryProps } from '../types';\nimport { renderJsonPath, State } from './state';\n\n\n/**\n * Props that are common to all tasks\n */\nexport interface TaskStateBaseProps {\n  /**\n   * An optional description for this state\n   *\n   * @default - No comment\n   */\n  readonly comment?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the input to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * input to be the empty object {}.\n   *\n   * @default - The entire task input (JSON path '$')\n   */\n  readonly inputPath?: string;\n\n  /**\n   * JSONPath expression to select select a portion of the state output to pass\n   * to the next state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * output to be the empty object {}.\n   *\n   * @default - The entire JSON node determined by the state input, the task result,\n   *   and resultPath is passed to the next state (JSON path '$')\n   */\n  readonly outputPath?: string;\n\n  /**\n   * JSONPath expression to indicate where to inject the state's output\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the state's\n   * input to become its output.\n   *\n   * @default - Replaces the entire input with the result (JSON path '$')\n   */\n  readonly resultPath?: string;\n\n  /**\n   * The JSON that will replace the state's raw result and become the effective\n   * result before ResultPath is applied.\n   *\n   * You can use ResultSelector to create a payload with values that are static\n   * or selected from the state's raw result.\n   *\n   * @see\n   * https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-resultselector\n   *\n   * @default - None\n   */\n  readonly resultSelector?: { [key: string]: any };\n\n  /**\n   * Timeout for the state machine\n   *\n   * @default - None\n   */\n  readonly timeout?: cdk.Duration;\n\n  /**\n   * Timeout for the heartbeat\n   *\n   * @default - None\n   */\n  readonly heartbeat?: cdk.Duration;\n\n  /**\n   * AWS Step Functions integrates with services directly in the Amazon States Language.\n   * You can control these AWS services using service integration patterns\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\n   *\n   * @default IntegrationPattern.REQUEST_RESPONSE\n   */\n  readonly integrationPattern?: IntegrationPattern;\n}\n\n/**\n * Define a Task state in the state machine\n *\n * Reaching a Task state causes some work to be executed, represented by the\n * Task's resource property. Task constructs represent a generic Amazon\n * States Language Task.\n *\n * For some resource types, more specific subclasses of Task may be available\n * which are more convenient to use.\n */\nexport abstract class TaskStateBase extends State implements INextable {\n\n  public readonly endStates: INextable[];\n\n  protected abstract readonly taskMetrics?: TaskMetricsConfig;\n  protected abstract readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly timeout?: cdk.Duration;\n  private readonly heartbeat?: cdk.Duration;\n\n  constructor(scope: Construct, id: string, props: TaskStateBaseProps) {\n    super(scope, id, props);\n    this.endStates = [this];\n    this.timeout = props.timeout;\n    this.heartbeat = props.heartbeat;\n  }\n\n  /**\n   * Add retry configuration for this state\n   *\n   * This controls if and how the execution will be retried if a particular\n   * error occurs.\n   */\n  public addRetry(props: RetryProps = {}): TaskStateBase {\n    super._addRetry(props);\n    return this;\n  }\n\n  /**\n   * Add a recovery handler for this state\n   *\n   * When a particular error occurs, execution will continue at the error\n   * handler instead of failing the state machine execution.\n   */\n  public addCatch(handler: IChainable, props: CatchProps = {}): TaskStateBase {\n    super._addCatch(handler.startState, props);\n    return this;\n  }\n\n  /**\n   * Continue normal execution with the given state\n   */\n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n  /**\n   * Return the Amazon States Language object for this state\n   */\n  public toStateJson(): object {\n    return {\n      ...this.renderNextEnd(),\n      ...this.renderRetryCatch(),\n      ...this.renderTaskBase(),\n      ...this._renderTask(),\n    };\n  }\n\n  /**\n   * Return the given named metric for this Task\n   *\n   * @default - sum over 5 minutes\n   */\n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/States',\n      metricName,\n      dimensionsMap: this.taskMetrics?.metricDimensions,\n      statistic: 'sum',\n      ...props,\n    }).attachTo(this);\n  }\n\n  /**\n   * The interval, in milliseconds, between the time the Task starts and the time it closes.\n   *\n   * @default - average over 5 minutes\n   */\n  public metricRunTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixSingular, 'RunTime', { statistic: 'avg', ...props });\n  }\n\n  /**\n   * The interval, in milliseconds, for which the activity stays in the schedule state.\n   *\n   * @default - average over 5 minutes\n   */\n  public metricScheduleTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixSingular, 'ScheduleTime', { statistic: 'avg', ...props });\n  }\n\n  /**\n   * The interval, in milliseconds, between the time the activity is scheduled and the time it closes.\n   *\n   * @default - average over 5 minutes\n   */\n  public metricTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixSingular, 'Time', { statistic: 'avg', ...props });\n  }\n\n  /**\n   * Metric for the number of times this activity is scheduled\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricScheduled(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'Scheduled', props);\n  }\n\n  /**\n   * Metric for the number of times this activity times out\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'TimedOut', props);\n  }\n\n  /**\n   * Metric for the number of times this activity is started\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricStarted(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'Started', props);\n  }\n\n  /**\n   * Metric for the number of times this activity succeeds\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricSucceeded(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'Succeeded', props);\n  }\n\n  /**\n   * Metric for the number of times this activity fails\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricFailed(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'Failed', props);\n  }\n\n  /**\n   * Metric for the number of times the heartbeat times out for this activity\n   *\n   * @default - sum over 5 minutes\n   */\n  public metricHeartbeatTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'HeartbeatTimedOut', props);\n  }\n\n  protected whenBoundToGraph(graph: StateGraph) {\n    super.whenBoundToGraph(graph);\n    for (const policyStatement of this.taskPolicies || []) {\n      graph.registerPolicyStatement(policyStatement);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected abstract _renderTask(): any;\n\n  private taskMetric(prefix: string | undefined, suffix: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    if (prefix === undefined) {\n      throw new Error('Task does not expose metrics. Use the \\'metric()\\' function to add metrics.');\n    }\n    return this.metric(prefix + suffix, props);\n  }\n\n  private renderTaskBase() {\n    return {\n      Type: 'Task',\n      Comment: this.comment,\n      TimeoutSeconds: this.timeout?.toSeconds(),\n      HeartbeatSeconds: this.heartbeat?.toSeconds(),\n      InputPath: renderJsonPath(this.inputPath),\n      OutputPath: renderJsonPath(this.outputPath),\n      ResultPath: renderJsonPath(this.resultPath),\n      ...this.renderResultSelector(),\n    };\n  }\n}\n\n/**\n * Task Metrics\n */\nexport interface TaskMetricsConfig {\n  /**\n   * Prefix for singular metric names of activity actions\n   *\n   * @default - No such metrics\n   */\n  readonly metricPrefixSingular?: string;\n\n  /**\n   * Prefix for plural metric names of activity actions\n   *\n   * @default - No such metrics\n   */\n  readonly metricPrefixPlural?: string;\n\n  /**\n   * The dimensions to attach to metrics\n   *\n   * @default - No metrics\n   */\n  readonly metricDimensions?: cloudwatch.DimensionHash;\n}\n\n/**\n *\n * AWS Step Functions integrates with services directly in the Amazon States Language.\n * You can control these AWS services using service integration patterns:\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html\n *\n */\nexport enum IntegrationPattern {\n  /**\n   * Step Functions will wait for an HTTP response and then progress to the next state.\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-default\n   */\n  REQUEST_RESPONSE = 'REQUEST_RESPONSE',\n\n  /**\n   * Step Functions can wait for a request to complete before progressing to the next state.\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync\n   */\n  RUN_JOB = 'RUN_JOB',\n\n  /**\n   * Callback tasks provide a way to pause a workflow until a task token is returned.\n   * You must set a task token when using the callback pattern\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token\n   */\n  WAIT_FOR_TASK_TOKEN = 'WAIT_FOR_TASK_TOKEN'\n}"],
  "mappings": "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",
  "names": []
}
