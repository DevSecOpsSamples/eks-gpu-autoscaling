{
  "version": 3,
  "sources": ["choice.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { Condition } from '../condition';\nimport { IChainable, INextable } from '../types';\nimport { StateType } from './private/state-type';\nimport { State } from './state';\n\n/**\n * Properties for defining a Choice state\n */\nexport interface ChoiceProps {\n  /**\n   * An optional description for this state\n   *\n   * @default No comment\n   */\n  readonly comment?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the input to this state.\n   *\n   * May also be the special value DISCARD, which will cause the effective\n   * input to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly inputPath?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the output to this state.\n   *\n   * May also be the special value DISCARD, which will cause the effective\n   * output to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly outputPath?: string;\n}\n\n/**\n * Define a Choice in the state machine\n *\n * A choice state can be used to make decisions based on the execution\n * state.\n */\nexport class Choice extends State {\n  public readonly endStates: INextable[] = [];\n\n  constructor(scope: Construct, id: string, props: ChoiceProps = {}) {\n    super(scope, id, props);\n  }\n\n  /**\n   * If the given condition matches, continue execution with the given state\n   */\n  public when(condition: Condition, next: IChainable): Choice {\n    super.addChoice(condition, next.startState);\n    return this;\n  }\n\n  /**\n   * If none of the given conditions match, continue execution with the given state\n   *\n   * If no conditions match and no otherwise() has been given, an execution\n   * error will be raised.\n   */\n  public otherwise(def: IChainable): Choice {\n    super.makeDefault(def.startState);\n    return this;\n  }\n\n  /**\n   * Return a Chain that contains all reachable end states from this Choice\n   *\n   * Use this to combine all possible choice paths back.\n   */\n  public afterwards(options: AfterwardsOptions = {}): Chain {\n    const endStates = State.filterNextables(State.findReachableEndStates(this, { includeErrorHandlers: options.includeErrorHandlers }));\n    if (options.includeOtherwise && this.defaultChoice) {\n      throw new Error(`'includeOtherwise' set but Choice state ${this.stateId} already has an 'otherwise' transition`);\n    }\n    if (options.includeOtherwise) {\n      endStates.push(new DefaultAsNext(this));\n    }\n    return Chain.custom(this, endStates, this);\n  }\n\n  /**\n   * Return the Amazon States Language object for this state\n   */\n  public toStateJson(): object {\n    return {\n      Type: StateType.CHOICE,\n      Comment: this.comment,\n      ...this.renderInputOutput(),\n      ...this.renderChoices(),\n    };\n  }\n}\n\n/**\n * Options for selecting the choice paths\n */\nexport interface AfterwardsOptions {\n  /**\n   * Whether to include error handling states\n   *\n   * If this is true, all states which are error handlers (added through 'onError')\n   * and states reachable via error handlers will be included as well.\n   *\n   * @default false\n   */\n  readonly includeErrorHandlers?: boolean;\n\n  /**\n   * Whether to include the default/otherwise transition for the current Choice state\n   *\n   * If this is true and the current Choice does not have a default outgoing\n   * transition, one will be added included when .next() is called on the chain.\n   *\n   * @default false\n   */\n  readonly includeOtherwise?: boolean;\n}\n\n/**\n * Adapter to make the .otherwise() transition settable through .next()\n */\nclass DefaultAsNext implements INextable {\n  constructor(private readonly choice: Choice) {\n  }\n\n  public next(state: IChainable): Chain {\n    this.choice.otherwise(state);\n    return Chain.sequence(this.choice, state);\n  }\n}\n"],
  "mappings": "gNACA,QAAA,QAAA,UAAA,EAGA,aAAA,QAAA,sBAAA,EACA,QAAA,QAAA,SAAA,EAwCA,MAAa,cAAe,SAAA,KAAK,CAG/B,YAAY,MAAkB,GAAY,MAAqB,CAAA,EAAE,CAC/D,MAAM,MAAO,GAAI,KAAK,EAHR,KAAA,UAAyB,CAAA,2EASlC,KAAK,UAAsB,KAAgB,0JAChD,MAAM,UAAU,UAAW,KAAK,UAAU,EACnC,KASF,UAAU,IAAe,8EAC9B,MAAM,YAAY,IAAI,UAAU,EACzB,KAQF,WAAW,QAA6B,CAAA,EAAE,kFAC/C,KAAM,WAAY,QAAA,MAAM,gBAAgB,QAAA,MAAM,uBAAuB,KAAM,CAAE,qBAAsB,QAAQ,oBAAoB,CAAE,CAAC,EAClI,GAAI,QAAQ,kBAAoB,KAAK,cACnC,KAAM,IAAI,OAAM,2CAA2C,KAAK,+CAA+C,EAEjH,MAAI,SAAQ,kBACV,UAAU,KAAK,GAAI,eAAc,IAAI,CAAC,EAEjC,QAAA,MAAM,OAAO,KAAM,UAAW,IAAI,EAMpC,aAAW,CAChB,MAAO,CACL,KAAM,aAAA,UAAU,OAChB,QAAS,KAAK,WACX,KAAK,kBAAiB,KACtB,KAAK,cAAa,IAlD3B,QAAA,OAAA,sGAmFA,MAAM,aAAa,CACjB,YAA6B,OAAc,CAAd,KAAA,OAAA,OAGtB,KAAK,MAAiB,CAC3B,YAAK,OAAO,UAAU,KAAK,EACpB,QAAA,MAAM,SAAS,KAAK,OAAQ,KAAK",
  "names": []
}
