{
  "version": 3,
  "sources": ["succeed.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { INextable } from '../types';\nimport { StateType } from './private/state-type';\nimport { State } from './state';\n\n/**\n * Properties for defining a Succeed state\n */\nexport interface SucceedProps {\n  /**\n   * An optional description for this state\n   *\n   * @default No comment\n   */\n  readonly comment?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the input to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * input to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly inputPath?: string;\n\n  /**\n   * JSONPath expression to select part of the state to be the output to this state.\n   *\n   * May also be the special value JsonPath.DISCARD, which will cause the effective\n   * output to be the empty object {}.\n   *\n   * @default $\n   */\n  readonly outputPath?: string;\n\n}\n\n/**\n * Define a Succeed state in the state machine\n *\n * Reaching a Succeed state terminates the state execution in success.\n */\nexport class Succeed extends State {\n  public readonly endStates: INextable[] = [];\n\n  constructor(scope: Construct, id: string, props: SucceedProps = {}) {\n    super(scope, id, props);\n  }\n\n  /**\n   * Return the Amazon States Language object for this state\n   */\n  public toStateJson(): object {\n    return {\n      Type: StateType.SUCCEED,\n      Comment: this.comment,\n      ...this.renderInputOutput(),\n    };\n  }\n}\n"],
  "mappings": "iNAEA,aAAA,QAAA,sBAAA,EACA,QAAA,QAAA,SAAA,EAwCA,MAAa,eAAgB,SAAA,KAAK,CAGhC,YAAY,MAAkB,GAAY,MAAsB,CAAA,EAAE,CAChE,MAAM,MAAO,GAAI,KAAK,EAHR,KAAA,UAAyB,CAAA,4EASlC,aAAW,CAChB,MAAO,CACL,KAAM,aAAA,UAAU,QAChB,QAAS,KAAK,WACX,KAAK,kBAAiB,IAd/B,QAAA,QAAA",
  "names": []
}
