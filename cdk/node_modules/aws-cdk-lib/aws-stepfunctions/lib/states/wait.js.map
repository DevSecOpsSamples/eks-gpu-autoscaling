{
  "version": 3,
  "sources": ["wait.ts"],
  "sourcesContent": ["import * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { IChainable, INextable } from '../types';\nimport { StateType } from './private/state-type';\nimport { State } from './state';\n\n/**\n * Represents the Wait state which delays a state machine from continuing for a specified time\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-wait-state.html\n */\nexport class WaitTime {\n  /**\n   * Wait a fixed amount of time.\n   */\n  public static duration(duration: cdk.Duration) { return new WaitTime({ Seconds: duration.toSeconds() }); }\n\n  /**\n   * Wait until the given ISO8601 timestamp\n   *\n   * Example value: `2016-03-14T01:59:00Z`\n   */\n  public static timestamp(timestamp: string) { return new WaitTime({ Timestamp: timestamp }); }\n\n  /**\n   * Wait for a number of seconds stored in the state object.\n   *\n   * Example value: `$.waitSeconds`\n   */\n  public static secondsPath(path: string) { return new WaitTime({ SecondsPath: path }); }\n\n  /**\n   * Wait until a timestamp found in the state object.\n   *\n   * Example value: `$.waitTimestamp`\n   */\n  public static timestampPath(path: string) { return new WaitTime({ TimestampPath: path }); }\n\n  private constructor(private readonly json: any) { }\n\n  /**\n   * @internal\n   */\n  public get _json() {\n    return this.json;\n  }\n}\n\n/**\n * Properties for defining a Wait state\n */\nexport interface WaitProps {\n  /**\n   * An optional description for this state\n   *\n   * @default No comment\n   */\n  readonly comment?: string;\n\n  /**\n   * Wait duration.\n   */\n  readonly time: WaitTime;\n}\n\n/**\n * Define a Wait state in the state machine\n *\n * A Wait state can be used to delay execution of the state machine for a while.\n */\nexport class Wait extends State implements INextable {\n  public readonly endStates: INextable[];\n\n  private readonly time: WaitTime;\n\n  constructor(scope: Construct, id: string, props: WaitProps) {\n    super(scope, id, props);\n\n    this.time = props.time;\n    this.endStates = [this];\n  }\n\n  /**\n   * Continue normal execution with the given state\n   */\n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n  /**\n   * Return the Amazon States Language object for this state\n   */\n  public toStateJson(): object {\n    return {\n      Type: StateType.WAIT,\n      Comment: this.comment,\n      ...this.time._json,\n      ...this.renderNextEnd(),\n    };\n  }\n}\n"],
  "mappings": "kOAEA,QAAA,QAAA,UAAA,EAEA,aAAA,QAAA,sBAAA,EACA,QAAA,QAAA,SAAA,EAMA,MAAa,QAAQ,CA2BnB,YAAqC,KAAS,CAAT,KAAA,KAAA,WAvBvB,UAAS,SAAsB,CAAA,+BAAA,qBAAA,QAAA,EAAW,GAAI,UAAS,CAAE,QAAS,SAAS,UAAS,CAAE,CAAE,CAAE,OAO1F,WAAU,UAAiB,CAAI,MAAO,IAAI,UAAS,CAAE,UAAW,SAAS,CAAE,CAAE,OAO7E,aAAY,KAAY,CAAI,MAAO,IAAI,UAAS,CAAE,YAAa,IAAI,CAAE,CAAE,OAOvE,eAAc,KAAY,CAAI,MAAO,IAAI,UAAS,CAAE,cAAe,IAAI,CAAE,CAAE,IAO9E,QAAK,CACd,MAAO,MAAK,MAjChB,QAAA,SAAA,4GA2DA,MAAa,YAAa,SAAA,KAAK,CAK7B,YAAY,MAAkB,GAAY,MAAgB,CACxD,MAAM,MAAO,GAAI,KAAK,yEAEtB,KAAK,KAAO,MAAM,KAClB,KAAK,UAAY,CAAC,IAAI,EAMjB,KAAK,KAAgB,+EAC1B,MAAM,SAAS,KAAK,UAAU,EACvB,QAAA,MAAM,SAAS,KAAM,IAAI,EAM3B,aAAW,CAChB,MAAO,CACL,KAAM,aAAA,UAAU,KAChB,QAAS,KAAK,WACX,KAAK,KAAK,SACV,KAAK,cAAa,IA5B3B,QAAA,KAAA",
  "names": []
}
