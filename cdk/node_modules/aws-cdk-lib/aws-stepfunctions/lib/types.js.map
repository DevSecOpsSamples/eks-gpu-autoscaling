{
  "version": 3,
  "sources": ["types.ts"],
  "sourcesContent": ["import { Duration } from '../../core';\nimport { Chain } from './chain';\nimport { State } from './states/state';\n\n/**\n * Interface for states that can have 'next' states\n */\nexport interface INextable {\n  /**\n   * Go to the indicated state after this state\n   *\n   * @returns The chain of states built up\n   */\n  next(state: IChainable): Chain;\n}\n\n/**\n * Interface for objects that can be used in a Chain\n */\nexport interface IChainable {\n  /**\n   * Descriptive identifier for this chainable\n   */\n  readonly id: string;\n\n  /**\n   * The start state of this chainable\n   */\n  readonly startState: State;\n\n  /**\n   * The chainable end state(s) of this chainable\n   */\n  readonly endStates: INextable[];\n}\n\n/**\n * Predefined error strings\n * Error names in Amazon States Language - https://states-language.net/spec.html#appendix-a\n * Error handling in Step Functions - https://docs.aws.amazon.com/step-functions/latest/dg/concepts-error-handling.html\n */\nexport class Errors {\n  /**\n   * Matches any Error.\n   */\n  public static readonly ALL = 'States.ALL';\n\n  /**\n   * A Task State failed to heartbeat for a time longer than the \u201CHeartbeatSeconds\u201D value.\n   */\n  public static readonly HEARTBEAT_TIMEOUT = 'States.HeartbeatTimeout';\n\n  /**\n   * A Task State either ran longer than the \u201CTimeoutSeconds\u201D value, or\n   * failed to heartbeat for a time longer than the \u201CHeartbeatSeconds\u201D value.\n   */\n  public static readonly TIMEOUT = 'States.Timeout';\n\n  /**\n   * A Task State failed during the execution.\n   */\n  public static readonly TASKS_FAILED = 'States.TaskFailed';\n\n  /**\n   * A Task State failed because it had insufficient privileges to execute\n   * the specified code.\n   */\n  public static readonly PERMISSIONS = 'States.Permissions';\n\n  /**\n   * A Task State\u2019s \u201CResultPath\u201D field cannot be applied to the input the state received.\n   */\n  public static readonly RESULT_PATH_MATCH_FAILURE = 'States.ResultPathMatchFailure';\n\n  /**\n   * Within a state\u2019s \u201CParameters\u201D field, the attempt to replace a field whose\n   * name ends in \u201C.$\u201D using a Path failed.\n   */\n  public static readonly PARAMETER_PATH_FAILURE = 'States.ParameterPathFailure';\n\n  /**\n   * A branch of a Parallel state failed.\n   */\n  public static readonly BRANCH_FAILED = 'States.BranchFailed';\n\n  /**\n   * A Choice state failed to find a match for the condition field extracted\n   * from its input.\n   */\n  public static readonly NO_CHOICE_MATCHED = 'States.NoChoiceMatched';\n}\n\n/**\n * Retry details\n */\nexport interface RetryProps {\n  /**\n   * Errors to retry\n   *\n   * A list of error strings to retry, which can be either predefined errors\n   * (for example Errors.NoChoiceMatched) or a self-defined error.\n   *\n   * @default All errors\n   */\n  readonly errors?: string[];\n\n  /**\n   * How many seconds to wait initially before retrying\n   *\n   * @default Duration.seconds(1)\n   */\n  readonly interval?: Duration;\n\n  /**\n   * How many times to retry this particular error.\n   *\n   * May be 0 to disable retry for specific errors (in case you have\n   * a catch-all retry policy).\n   *\n   * @default 3\n   */\n  readonly maxAttempts?: number;\n\n  /**\n   * Multiplication for how much longer the wait interval gets on every retry\n   *\n   * @default 2\n   */\n  readonly backoffRate?: number;\n}\n\n/**\n * Error handler details\n */\nexport interface CatchProps {\n  /**\n   * Errors to recover from by going to the given state\n   *\n   * A list of error strings to retry, which can be either predefined errors\n   * (for example Errors.NoChoiceMatched) or a self-defined error.\n   *\n   * @default All errors\n   */\n  readonly errors?: string[];\n\n  /**\n   * JSONPath expression to indicate where to inject the error data\n   *\n   * May also be the special value DISCARD, which will cause the error\n   * data to be discarded.\n   *\n   * @default $\n   */\n  readonly resultPath?: string;\n}\n\n/**\n * Special string value to discard state input, output or result\n */\nexport const DISCARD = 'DISCARD';\n"],
  "mappings": "kKAyCA,MAAa,MAAM,EAAnB,QAAA,OAAA,sGAIyB,OAAA,IAAM,aAKN,OAAA,kBAAoB,0BAMpB,OAAA,QAAU,iBAKV,OAAA,aAAe,oBAMf,OAAA,YAAc,qBAKd,OAAA,0BAA4B,gCAM5B,OAAA,uBAAyB,8BAKzB,OAAA,cAAgB,sBAMhB,OAAA,kBAAoB,yBAsEhC,QAAA,QAAU",
  "names": []
}
