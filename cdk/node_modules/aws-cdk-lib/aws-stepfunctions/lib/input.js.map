{
  "version": 3,
  "sources": ["input.ts"],
  "sourcesContent": ["import { JsonPath } from './fields';\n\n/**\n * Type union for task classes that accept multiple types of payload\n */\nexport class TaskInput {\n  /**\n   * Use a literal string as task input\n   *\n   * This might be a JSON-encoded object, or just a text.\n   */\n  public static fromText(text: string) {\n    return new TaskInput(InputType.TEXT, text);\n  }\n\n  /**\n   * Use an object as task input\n   *\n   * This object may contain JSON path fields as object values, if desired.\n   */\n  public static fromObject(obj: { [key: string]: any }) {\n    return new TaskInput(InputType.OBJECT, obj);\n  }\n\n  /**\n   * Use a part of the execution data or task context as task input\n   *\n   * Use this when you want to use a subobject or string from\n   * the current state machine execution or the current task context\n   * as complete payload to a task.\n   */\n  public static fromJsonPathAt(path: string) {\n    return new TaskInput(InputType.TEXT, JsonPath.stringAt(path));\n  }\n\n  /**\n   * Use a part of the execution data as task input\n   *\n   * Use this when you want to use a subobject or string from\n   * the current state machine execution as complete payload\n   * to a task.\n   *\n   * @deprecated Use `fromJsonPathAt`.\n   */\n  public static fromDataAt(path: string) {\n    return new TaskInput(InputType.TEXT, JsonPath.stringAt(path));\n  }\n\n  /**\n   * Use a part of the task context as task input\n   *\n   * Use this when you want to use a subobject or string from\n   * the current task context as complete payload\n   * to a task.\n   *\n   * @deprecated Use `fromJsonPathAt`.\n   */\n  public static fromContextAt(path: string) {\n    return new TaskInput(InputType.TEXT, JsonPath.stringAt(path));\n  }\n\n  /**\n   *\n   * @param type type of task input\n   * @param value payload for the corresponding input type.\n   * It can be a JSON-encoded object, context, data, etc.\n   */\n  private constructor(public readonly type: InputType, public readonly value: any) {}\n}\n\n/**\n * The type of task input\n */\nexport enum InputType {\n  /**\n   * Use a literal string\n   * This might be a JSON-encoded object, or just text.\n   * valid JSON text: standalone, quote-delimited strings; objects; arrays; numbers; Boolean values; and null.\n   *\n   * example: `literal string`\n   * example: {\"json\": \"encoded\"}\n   */\n  TEXT,\n  /**\n   * Use an object which may contain Data and Context fields\n   * as object values, if desired.\n   *\n   * example:\n   * {\n   *  literal: 'literal',\n   *  SomeInput: sfn.JsonPath.stringAt('$.someField')\n   * }\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-data.html\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html\n   */\n  OBJECT,\n}\n"],
  "mappings": "uKAAA,SAAA,QAAA,UAAA,EAKA,MAAa,SAAS,CA8DpB,YAAoC,KAAiC,MAAU,CAA3C,KAAA,KAAA,KAAiC,KAAA,MAAA,YAxDvD,UAAS,KAAY,CACjC,MAAO,IAAI,WAAU,UAAU,KAAM,IAAI,QAQ7B,YAAW,IAA2B,CAClD,MAAO,IAAI,WAAU,UAAU,OAAQ,GAAG,QAU9B,gBAAe,KAAY,CACvC,MAAO,IAAI,WAAU,UAAU,KAAM,SAAA,SAAS,SAAS,IAAI,CAAC,QAYhD,YAAW,KAAY,CACnC,MAAO,IAAI,WAAU,UAAU,KAAM,SAAA,SAAS,SAAS,IAAI,CAAC,QAYhD,eAAc,KAAY,CACtC,MAAO,IAAI,WAAU,UAAU,KAAM,SAAA,SAAS,SAAS,IAAI,CAAC,GArDhE,QAAA,UAAA,+GAoEA,GAAY,WAAZ,AAAA,UAAY,WAAS,CASnB,WAAA,WAAA,KAAA,GAAA,OAcA,WAAA,WAAA,OAAA,GAAA,QACF,GAxBY,UAAA,QAAA,WAAA,SAAA,UAAS,CAAA,EAAA",
  "names": []
}
