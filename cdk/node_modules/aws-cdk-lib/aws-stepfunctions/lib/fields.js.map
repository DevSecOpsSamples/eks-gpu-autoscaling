{
  "version": 3,
  "sources": ["fields.ts"],
  "sourcesContent": ["import { Token, IResolvable } from '../../core';\nimport { findReferencedPaths, jsonPathString, JsonPathToken, renderObject, renderInExpression, jsonPathFromAny } from './private/json-path';\n\n/**\n * Extract a field from the State Machine data or context\n * that gets passed around between states\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-paths.html\n */\nexport class JsonPath {\n  /**\n   * Special string value to discard state input, output or result\n   */\n  public static readonly DISCARD = 'DISCARD';\n\n  /**\n   * Instead of using a literal string, get the value from a JSON path\n   */\n  public static stringAt(path: string): string {\n    validateJsonPath(path);\n    return new JsonPathToken(path).toString();\n  }\n\n  /**\n   * Instead of using a literal string list, get the value from a JSON path\n   */\n  public static listAt(path: string): string[] {\n    // does not apply to task context\n    validateDataPath(path);\n    return Token.asList(new JsonPathToken(path));\n  }\n\n  /**\n   * Instead of using a literal number, get the value from a JSON path\n   */\n  public static numberAt(path: string): number {\n    validateJsonPath(path);\n    return Token.asNumber(new JsonPathToken(path));\n  }\n\n  /**\n   * Reference a complete (complex) object in a JSON path location\n   */\n  public static objectAt(path: string): IResolvable {\n    validateJsonPath(path);\n    return new JsonPathToken(path);\n  }\n\n  /**\n   * Use the entire data structure\n   *\n   * Will be an object at invocation time, but is represented in the CDK\n   * application as a string.\n   */\n  public static get entirePayload(): string {\n    return new JsonPathToken('$').toString();\n  }\n\n  /**\n   * Determines if the indicated string is an encoded JSON path\n   *\n   * @param value string to be evaluated\n   */\n  public static isEncodedJsonPath(value: string): boolean {\n    return !!jsonPathString(value);\n  }\n\n  /**\n   * Return the Task Token field\n   *\n   * External actions will need this token to report step completion\n   * back to StepFunctions using the `SendTaskSuccess` or `SendTaskFailure`\n   * calls.\n   */\n  public static get taskToken(): string {\n    return new JsonPathToken('$$.Task.Token').toString();\n  }\n\n  /**\n   * Use the entire context data structure\n   *\n   * Will be an object at invocation time, but is represented in the CDK\n   * application as a string.\n   */\n  public static get entireContext(): string {\n    return new JsonPathToken('$$').toString();\n  }\n\n  /**\n   * Make an intrinsic States.Array expression\n   *\n   * Combine any number of string literals or JsonPath expressions into an array.\n   *\n   * Use this function if the value of an array element directly has to come\n   * from a JSON Path expression (either the State object or the Context object).\n   *\n   * If the array contains object literals whose values come from a JSON path\n   * expression, you do not need to use this function.\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html\n   */\n  public static array(...values: string[]): string {\n    return new JsonPathToken(`States.Array(${values.map(renderInExpression).join(', ')})`).toString();\n  }\n\n  /**\n   * Make an intrinsic States.Format expression\n   *\n   * This can be used to embed JSON Path variables inside a format string.\n   *\n   * For example:\n   *\n   * ```ts\n   * sfn.JsonPath.format('Hello, my name is {}.', sfn.JsonPath.stringAt('$.name'))\n   * ```\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html\n   */\n  public static format(formatString: string, ...values: string[]): string {\n    const allArgs = [formatString, ...values];\n    return new JsonPathToken(`States.Format(${allArgs.map(renderInExpression).join(', ')})`).toString();\n  }\n\n  /**\n   * Make an intrinsic States.StringToJson expression\n   *\n   * During the execution of the Step Functions state machine, parse the given\n   * argument as JSON into its object form.\n   *\n   * For example:\n   *\n   * ```ts\n   * sfn.JsonPath.stringToJson(sfn.JsonPath.stringAt('$.someJsonBody'))\n   * ```\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html\n   */\n  public static stringToJson(jsonString: string): IResolvable {\n    return new JsonPathToken(`States.StringToJson(${renderInExpression(jsonString)})`);\n  }\n\n  /**\n   * Make an intrinsic States.JsonToString expression\n   *\n   * During the execution of the Step Functions state machine, encode the\n   * given object into a JSON string.\n   *\n   * For example:\n   *\n   * ```ts\n   * sfn.JsonPath.jsonToString(sfn.JsonPath.objectAt('$.someObject'))\n   * ```\n   *\n   * @see https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html\n   */\n  public static jsonToString(value: any): string {\n    const path = jsonPathFromAny(value);\n    if (!path) {\n      throw new Error('Argument to JsonPath.jsonToString() must be a JsonPath object');\n    }\n\n    return new JsonPathToken(`States.JsonToString(${path})`).toString();\n  }\n\n  private constructor() {}\n}\n\n/**\n * Extract a field from the State Machine data that gets passed around between states\n *\n * @deprecated replaced by `JsonPath`\n */\nexport class Data {\n  /**\n   * Instead of using a literal string, get the value from a JSON path\n   */\n  public static stringAt(path: string): string {\n    validateDataPath(path);\n    return new JsonPathToken(path).toString();\n  }\n\n  /**\n   * Instead of using a literal string list, get the value from a JSON path\n   */\n  public static listAt(path: string): string[] {\n    validateDataPath(path);\n    return Token.asList(new JsonPathToken(path));\n  }\n\n  /**\n   * Instead of using a literal number, get the value from a JSON path\n   */\n  public static numberAt(path: string): number {\n    validateDataPath(path);\n    return Token.asNumber(new JsonPathToken(path));\n  }\n\n  /**\n   * Use the entire data structure\n   *\n   * Will be an object at invocation time, but is represented in the CDK\n   * application as a string.\n   */\n  public static get entirePayload(): string {\n    return new JsonPathToken('$').toString();\n  }\n\n  /**\n   * Determines if the indicated string is an encoded JSON path\n   *\n   * @param value string to be evaluated\n   */\n  public static isJsonPathString(value: string): boolean {\n    return !!jsonPathString(value);\n  }\n\n  private constructor() {}\n}\n\n/**\n * Extract a field from the State Machine Context data\n *\n * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#wait-token-contextobject\n *\n * @deprecated replaced by `JsonPath`\n */\nexport class Context {\n  /**\n   * Instead of using a literal string, get the value from a JSON path\n   */\n  public static stringAt(path: string): string {\n    validateContextPath(path);\n    return new JsonPathToken(path).toString();\n  }\n\n  /**\n   * Instead of using a literal number, get the value from a JSON path\n   */\n  public static numberAt(path: string): number {\n    validateContextPath(path);\n    return Token.asNumber(new JsonPathToken(path));\n  }\n\n  /**\n   * Return the Task Token field\n   *\n   * External actions will need this token to report step completion\n   * back to StepFunctions using the `SendTaskSuccess` or `SendTaskFailure`\n   * calls.\n   */\n  public static get taskToken(): string {\n    return new JsonPathToken('$$.Task.Token').toString();\n  }\n\n  /**\n   * Use the entire context data structure\n   *\n   * Will be an object at invocation time, but is represented in the CDK\n   * application as a string.\n   */\n  public static get entireContext(): string {\n    return new JsonPathToken('$$').toString();\n  }\n\n  private constructor() {}\n}\n\n/**\n * Helper functions to work with structures containing fields\n */\nexport class FieldUtils {\n  /**\n   * Render a JSON structure containing fields to the right StepFunctions structure\n   */\n  public static renderObject(obj?: { [key: string]: any }): { [key: string]: any } | undefined {\n    return renderObject(obj);\n  }\n\n  /**\n   * Return all JSON paths used in the given structure\n   */\n  public static findReferencedPaths(obj?: { [key: string]: any }): string[] {\n    return Array.from(findReferencedPaths(obj)).sort();\n  }\n\n  /**\n   * Returns whether the given task structure contains the TaskToken field anywhere\n   *\n   * The field is considered included if the field itself or one of its containing\n   * fields occurs anywhere in the payload.\n   */\n  public static containsTaskToken(obj?: { [key: string]: any }): boolean {\n    const paths = findReferencedPaths(obj);\n    return paths.has('$$.Task.Token') || paths.has('$$.Task') || paths.has('$$');\n  }\n\n  private constructor() {}\n}\n\nfunction validateJsonPath(path: string) {\n  if (path !== '$'\n    && !path.startsWith('$.')\n    && path !== '$$'\n    && !path.startsWith('$$.')\n    && !path.startsWith('$[')\n    && ['Format', 'StringToJson', 'JsonToString', 'Array'].every(fn => !path.startsWith(`States.${fn}`))\n  ) {\n    throw new Error(`JSON path values must be exactly '$', '$$', start with '$.', start with '$$.', start with '$[', or start with an intrinsic function: States.Format, States.StringToJson, States.JsonToString, or States.Array. Received: ${path}`);\n  }\n}\n\nfunction validateDataPath(path: string) {\n  if (path !== '$' && !path.startsWith('$.')) {\n    throw new Error(\"Data JSON path values must either be exactly equal to '$' or start with '$.'\");\n  }\n}\n\nfunction validateContextPath(path: string) {\n  if (path !== '$$' && !path.startsWith('$$.')) {\n    throw new Error(\"Context JSON path values must either be exactly equal to '$$' or start with '$$.'\");\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
