{
  "version": 3,
  "sources": ["activity.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport * as iam from '../../aws-iam';\nimport { ArnFormat, IResource, Lazy, Names, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { StatesMetrics } from './stepfunctions-canned-metrics.generated';\nimport { CfnActivity } from './stepfunctions.generated';\n\n/**\n * Properties for defining a new Step Functions Activity\n */\nexport interface ActivityProps {\n  /**\n   * The name for this activity.\n   *\n   * @default - If not supplied, a name is generated\n   */\n  readonly activityName?: string;\n}\n\n/**\n * Define a new Step Functions Activity\n */\nexport class Activity extends Resource implements IActivity {\n  /**\n   * Construct an Activity from an existing Activity ARN\n   */\n  public static fromActivityArn(scope: Construct, id: string, activityArn: string): IActivity {\n    class Imported extends Resource implements IActivity {\n      public get activityArn() { return activityArn; }\n      public get activityName() {\n        return Stack.of(this).splitArn(activityArn, ArnFormat.COLON_RESOURCE_NAME).resourceName || '';\n      }\n    }\n\n    return new Imported(scope, id);\n  }\n\n  /**\n   * Construct an Activity from an existing Activity Name\n   */\n  public static fromActivityName(scope: Construct, id: string, activityName: string): IActivity {\n    return Activity.fromActivityArn(scope, id, Stack.of(scope).formatArn({\n      service: 'states',\n      resource: 'activity',\n      resourceName: activityName,\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n    }));\n  }\n\n  /**\n   * @attribute\n   */\n  public readonly activityArn: string;\n\n  /**\n   * @attribute\n   */\n  public readonly activityName: string;\n\n  constructor(scope: Construct, id: string, props: ActivityProps = {}) {\n    super(scope, id, {\n      physicalName: props.activityName ||\n                Lazy.string({ produce: () => this.generateName() }),\n    });\n\n    const resource = new CfnActivity(this, 'Resource', {\n      name: this.physicalName!, // not null because of above call to `super`\n    });\n\n    this.activityArn = this.getResourceArnAttribute(resource.ref, {\n      service: 'states',\n      resource: 'activity',\n      resourceName: this.physicalName,\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n    });\n    this.activityName = this.getResourceNameAttribute(resource.attrName);\n  }\n\n  /**\n   * Grant the given identity permissions on this Activity\n   *\n   * @param identity The principal\n   * @param actions The list of desired actions\n   */\n  public grant(identity: iam.IGrantable, ...actions: string[]) {\n    return iam.Grant.addToPrincipal({\n      grantee: identity,\n      actions,\n      resourceArns: [this.activityArn],\n    });\n  }\n\n  /**\n   * Return the given named metric for this Activity\n   *\n   * @default sum over 5 minutes\n   */\n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/States',\n      metricName,\n      dimensions: { ActivityArn: this.activityArn },\n      statistic: 'sum',\n      ...props,\n    }).attachTo(this);\n  }\n\n  /**\n   * The interval, in milliseconds, between the time the activity starts and the time it closes.\n   *\n   * @default average over 5 minutes\n   */\n  public metricRunTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.activityRunTimeAverage, props);\n  }\n\n  /**\n   * The interval, in milliseconds, for which the activity stays in the schedule state.\n   *\n   * @default average over 5 minutes\n   */\n  public metricScheduleTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.activityScheduleTimeAverage, props);\n  }\n\n  /**\n   * The interval, in milliseconds, between the time the activity is scheduled and the time it closes.\n   *\n   * @default average over 5 minutes\n   */\n  public metricTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.activityTimeAverage, props);\n  }\n\n  /**\n   * Metric for the number of times this activity is scheduled\n   *\n   * @default sum over 5 minutes\n   */\n  public metricScheduled(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.activitiesScheduledSum, props);\n  }\n\n  /**\n   * Metric for the number of times this activity times out\n   *\n   * @default sum over 5 minutes\n   */\n  public metricTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.activitiesTimedOutSum, props);\n  }\n\n  /**\n   * Metric for the number of times this activity is started\n   *\n   * @default sum over 5 minutes\n   */\n  public metricStarted(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.activitiesStartedSum, props);\n  }\n\n  /**\n   * Metric for the number of times this activity succeeds\n   *\n   * @default sum over 5 minutes\n   */\n  public metricSucceeded(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.activitiesSucceededSum, props);\n  }\n\n  /**\n   * Metric for the number of times this activity fails\n   *\n   * @default sum over 5 minutes\n   */\n  public metricFailed(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.activitiesFailedSum, props);\n  }\n\n  /**\n   * Metric for the number of times the heartbeat times out for this activity\n   *\n   * @default sum over 5 minutes\n   */\n  public metricHeartbeatTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(StatesMetrics.activitiesHeartbeatTimedOutSum, props);\n  }\n\n  private generateName(): string {\n    const name = Names.uniqueId(this);\n    if (name.length > 80) {\n      return name.substring(0, 40) + name.substring(name.length - 40);\n    }\n    return name;\n  }\n\n  private cannedMetric(\n    fn: (dims: { ActivityArn: string }) => cloudwatch.MetricProps,\n    props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      ...fn({ ActivityArn: this.activityArn }),\n      ...props,\n    }).attachTo(this);\n  }\n}\n\n/**\n * Represents a Step Functions Activity\n * https://docs.aws.amazon.com/step-functions/latest/dg/concepts-activities.html\n */\nexport interface IActivity extends IResource {\n  /**\n   * The ARN of the activity\n   *\n   * @attribute\n   */\n  readonly activityArn: string;\n\n  /**\n   * The name of the activity\n   *\n   * @attribute\n   */\n  readonly activityName: string;\n}\n"],
  "mappings": "+MAAA,WAAA,QAAA,sBAAA,EACA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,YAAA,EAEA,yCAAA,QAAA,0CAAA,EACA,0BAAA,QAAA,2BAAA,EAiBA,MAAa,gBAAiB,QAAA,QAAQ,CAqCpC,YAAY,MAAkB,GAAY,MAAuB,CAAA,EAAE,CACjE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,cACV,OAAA,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,aAAY,CAAE,CAAE,EAC7D,6EAED,KAAM,UAAW,GAAI,2BAAA,YAAY,KAAM,WAAY,CACjD,KAAM,KAAK,aACZ,EAED,KAAK,YAAc,KAAK,wBAAwB,SAAS,IAAK,CAC5D,QAAS,SACT,SAAU,WACV,aAAc,KAAK,aACnB,UAAW,OAAA,UAAU,oBACtB,EACD,KAAK,aAAe,KAAK,yBAAyB,SAAS,QAAQ,QAjDvD,iBAAgB,MAAkB,GAAY,YAAmB,CAC7E,MAAM,gBAAiB,QAAA,QAAQ,IAClB,cAAW,CAAK,MAAO,YAAa,IACpC,eAAY,CACrB,MAAO,QAAA,MAAM,GAAG,IAAI,EAAE,SAAS,YAAa,OAAA,UAAU,mBAAmB,EAAE,cAAgB,EAC7F,EAGF,MAAO,IAAI,UAAS,MAAO,EAAE,QAMjB,kBAAiB,MAAkB,GAAY,aAAoB,CAC/E,MAAO,UAAS,gBAAgB,MAAO,GAAI,OAAA,MAAM,GAAG,KAAK,EAAE,UAAU,CACnE,QAAS,SACT,SAAU,WACV,aAAc,aACd,UAAW,OAAA,UAAU,oBACtB,CAAC,EAsCG,MAAM,YAA6B,QAAiB,yEAClD,IAAI,MAAM,eAAe,CAC9B,QAAS,SACT,QACA,aAAc,CAAC,KAAK,WAAW,EAChC,EAQI,OAAO,WAAoB,MAAgC,gFACzD,GAAI,YAAW,OAAO,CAC3B,UAAW,aACX,WACA,WAAY,CAAE,YAAa,KAAK,WAAW,EAC3C,UAAW,SACR,MACJ,EAAE,SAAS,IAAI,EAQX,cAAc,MAAgC,gFAC5C,KAAK,aAAa,yCAAA,cAAc,uBAAwB,KAAK,EAQ/D,mBAAmB,MAAgC,gFACjD,KAAK,aAAa,yCAAA,cAAc,4BAA6B,KAAK,EAQpE,WAAW,MAAgC,gFACzC,KAAK,aAAa,yCAAA,cAAc,oBAAqB,KAAK,EAQ5D,gBAAgB,MAAgC,gFAC9C,KAAK,aAAa,yCAAA,cAAc,uBAAwB,KAAK,EAQ/D,eAAe,MAAgC,gFAC7C,KAAK,aAAa,yCAAA,cAAc,sBAAuB,KAAK,EAQ9D,cAAc,MAAgC,gFAC5C,KAAK,aAAa,yCAAA,cAAc,qBAAsB,KAAK,EAQ7D,gBAAgB,MAAgC,gFAC9C,KAAK,aAAa,yCAAA,cAAc,uBAAwB,KAAK,EAQ/D,aAAa,MAAgC,gFAC3C,KAAK,aAAa,yCAAA,cAAc,oBAAqB,KAAK,EAQ5D,wBAAwB,MAAgC,gFACtD,KAAK,aAAa,yCAAA,cAAc,+BAAgC,KAAK,EAGtE,cAAY,CAClB,KAAM,MAAO,OAAA,MAAM,SAAS,IAAI,EAChC,MAAI,MAAK,OAAS,GACT,KAAK,UAAU,EAAG,EAAE,EAAI,KAAK,UAAU,KAAK,OAAS,EAAE,EAEzD,KAGD,aACN,GACA,MAAgC,CAChC,MAAO,IAAI,YAAW,OAAO,IACxB,GAAG,CAAE,YAAa,KAAK,WAAW,CAAE,KACpC,MACJ,EAAE,SAAS,IAAI,GApLpB,QAAA,SAAA",
  "names": []
}
