{
  "version": 3,
  "sources": ["state-machine-fragment.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Chain } from './chain';\nimport { Parallel, ParallelProps } from './states/parallel';\nimport { State } from './states/state';\nimport { IChainable, INextable } from './types';\n\n/**\n * Base class for reusable state machine fragments\n */\nexport abstract class StateMachineFragment extends Construct implements IChainable {\n  /**\n   * The start state of this state machine fragment\n   */\n  public abstract readonly startState: State;\n\n  /**\n   * The states to chain onto if this fragment is used\n   */\n  public abstract readonly endStates: INextable[];\n\n  public get id() {\n    return this.node.id;\n  }\n\n  /**\n   * Prefix the IDs of all states in this state machine fragment\n   *\n   * Use this to avoid multiple copies of the state machine all having the\n   * same state IDs.\n   *\n   * @param prefix The prefix to add. Will use construct ID by default.\n   */\n  public prefixStates(prefix?: string): StateMachineFragment {\n    State.prefixStates(this, prefix || `${this.id}: `);\n    return this;\n  }\n\n  /**\n   * Wrap all states in this state machine fragment up into a single state.\n   *\n   * This can be used to add retry or error handling onto this state\n   * machine fragment.\n   *\n   * Be aware that this changes the result of the inner state machine\n   * to be an array with the result of the state machine in it. Adjust\n   * your paths accordingly. For example, change 'outputPath' to\n   * '$[0]'.\n   */\n  public toSingleState(options: SingleStateOptions = {}): Parallel {\n    const stateId = options.stateId || this.id;\n    this.prefixStates(options.prefixStates || `${stateId}: `);\n\n    return new Parallel(this, stateId, options).branch(this);\n  }\n\n  /**\n   * Continue normal execution with the given state\n   */\n  public next(next: IChainable) {\n    return Chain.start(this).next(next);\n  }\n}\n\n/**\n * Options for creating a single state\n */\nexport interface SingleStateOptions extends ParallelProps {\n  /**\n   * ID of newly created containing state\n   *\n   * @default Construct ID of the StateMachineFragment\n   */\n  readonly stateId?: string;\n\n  /**\n   * String to prefix all stateIds in the state machine with\n   *\n   * @default stateId\n   */\n  readonly prefixStates?: string;\n}\n"],
  "mappings": "2NAAA,aAAA,QAAA,YAAA,EACA,QAAA,QAAA,SAAA,EACA,WAAA,QAAA,mBAAA,EACA,QAAA,QAAA,gBAAA,EAMA,MAAsB,4BAA6B,cAAA,SAAS,IAW/C,KAAE,CACX,MAAO,MAAK,KAAK,GAWZ,aAAa,OAAe,CACjC,eAAA,MAAM,aAAa,KAAM,QAAU,GAAG,KAAK,MAAM,EAC1C,KAcF,cAAc,QAA8B,CAAA,EAAE,mFACnD,KAAM,SAAU,QAAQ,SAAW,KAAK,GACxC,YAAK,aAAa,QAAQ,cAAgB,GAAG,WAAW,EAEjD,GAAI,YAAA,SAAS,KAAM,QAAS,OAAO,EAAE,OAAO,IAAI,EAMlD,KAAK,KAAgB,+EACnB,QAAA,MAAM,MAAM,IAAI,EAAE,KAAK,IAAI,GAlDtC,QAAA,qBAAA",
  "names": []
}
