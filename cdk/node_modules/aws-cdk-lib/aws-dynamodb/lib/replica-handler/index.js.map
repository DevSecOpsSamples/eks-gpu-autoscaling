{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["/* eslint-disable no-console */\nimport type { IsCompleteRequest, IsCompleteResponse, OnEventRequest, OnEventResponse } from '../../../custom-resources/lib/provider-framework/types';\nimport { DynamoDB } from 'aws-sdk'; // eslint-disable-line import/no-extraneous-dependencies\n\nexport async function onEventHandler(event: OnEventRequest): Promise<OnEventResponse> {\n  console.log('Event: %j', event);\n\n  const dynamodb = new DynamoDB();\n\n  const tableName = event.ResourceProperties.TableName;\n  const region = event.ResourceProperties.Region;\n\n  let updateTableAction: 'Create' | 'Update' | 'Delete' | undefined;\n  if (event.RequestType === 'Create' || event.RequestType === 'Delete') {\n    updateTableAction = event.RequestType;\n  } else { // Update\n    // There are two cases where an Update can happen:\n    // 1. A table replacement. In that case, we need to create the replica in the new Table\n    // (the replica for the \"old\" Table will be deleted when CFN issues a Delete event on the old physical resource id).\n    // 2. A customer has changed one of the properties of the Custom Resource,\n    // like 'waitForReplicationToFinish'. In that case, we don't have to do anything.\n    // To differentiate the two cases, we make an API call to DynamoDB to check whether a replica already exists.\n    const describeTableResult = await dynamodb.describeTable({\n      TableName: tableName,\n    }).promise();\n    console.log('Describe table: %j', describeTableResult);\n    const replicaExists = describeTableResult.Table?.Replicas?.some(replica => replica.RegionName === region);\n    updateTableAction = replicaExists ? undefined : 'Create';\n  }\n\n  if (updateTableAction) {\n    const data = await dynamodb.updateTable({\n      TableName: tableName,\n      ReplicaUpdates: [\n        {\n          [updateTableAction]: {\n            RegionName: region,\n          },\n        },\n      ],\n    }).promise();\n    console.log('Update table: %j', data);\n  } else {\n    console.log(\"Skipping updating Table, as a replica in '%s' already exists\", region);\n  }\n\n  return event.RequestType === 'Create' || event.RequestType === 'Update'\n    ? { PhysicalResourceId: `${tableName}-${region}` }\n    : {};\n}\n\nexport async function isCompleteHandler(event: IsCompleteRequest): Promise<IsCompleteResponse> {\n  console.log('Event: %j', event);\n\n  const dynamodb = new DynamoDB();\n\n  const data = await dynamodb.describeTable({\n    TableName: event.ResourceProperties.TableName,\n  }).promise();\n  console.log('Describe table: %j', data);\n\n  const tableActive = data.Table?.TableStatus === 'ACTIVE';\n  const replicas = data.Table?.Replicas ?? [];\n  const regionReplica = replicas.find(r => r.RegionName === event.ResourceProperties.Region);\n  const replicaActive = regionReplica?.ReplicaStatus === 'ACTIVE';\n  const skipReplicationCompletedWait = event.ResourceProperties.SkipReplicationCompletedWait === 'true';\n\n  switch (event.RequestType) {\n    case 'Create':\n    case 'Update':\n      // Complete when replica is reported as ACTIVE\n      return { IsComplete: tableActive && (replicaActive || skipReplicationCompletedWait) };\n    case 'Delete':\n      // Complete when replica is gone\n      return { IsComplete: tableActive && regionReplica === undefined };\n  }\n}\n"],
  "mappings": "4HAEA,KAAA,WAAA,QAAA,SAAA,EAEO,8BAA8B,MAAqB,WACxD,QAAQ,IAAI,YAAa,KAAK,EAE9B,KAAM,UAAW,GAAI,WAAA,SAEf,UAAY,MAAM,mBAAmB,UACrC,OAAS,MAAM,mBAAmB,OAExC,GAAI,mBACJ,GAAI,MAAM,cAAgB,UAAY,MAAM,cAAgB,SAC1D,kBAAoB,MAAM,gBACrB,CAOL,KAAM,qBAAsB,KAAM,UAAS,cAAc,CACvD,UAAW,UACZ,EAAE,QAAO,EACV,QAAQ,IAAI,qBAAsB,mBAAmB,EAErD,kBAAoB,AADD,KAAA,IAAG,oBAAoB,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,YAAQ,MAAA,KAAA,OAAA,OAAA,GAAE,KAAK,SAAW,QAAQ,aAAe,MAAM,GACpE,OAAY,SAGlD,GAAI,kBAAmB,CACrB,KAAM,MAAO,KAAM,UAAS,YAAY,CACtC,UAAW,UACX,eAAgB,CACd,EACG,mBAAoB,CACnB,WAAY,UAInB,EAAE,QAAO,EACV,QAAQ,IAAI,mBAAoB,IAAI,MAEpC,SAAQ,IAAI,+DAAgE,MAAM,EAGpF,MAAO,OAAM,cAAgB,UAAY,MAAM,cAAgB,SAC3D,CAAE,mBAAoB,GAAG,aAAa,QAAQ,EAC9C,CAAA,CACN,CA7CA,QAAA,eAAA,eA+CO,iCAAiC,MAAwB,cAC9D,QAAQ,IAAI,YAAa,KAAK,EAI9B,KAAM,MAAO,KAAM,AAFF,IAAI,WAAA,SAAQ,EAED,cAAc,CACxC,UAAW,MAAM,mBAAmB,UACrC,EAAE,QAAO,EACV,QAAQ,IAAI,qBAAsB,IAAI,EAEtC,KAAM,aAAc,KAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,eAAgB,SAE1C,cAAgB,AADR,KAAA,IAAG,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,YAAQ,MAAA,KAAA,OAAA,GAAI,CAAA,GACV,KAAK,GAAK,EAAE,aAAe,MAAM,mBAAmB,MAAM,EACnF,cAAgB,gBAAa,KAAA,OAAb,cAAe,iBAAkB,SACjD,6BAA+B,MAAM,mBAAmB,+BAAiC,OAE/F,OAAQ,MAAM,iBACP,aACA,SAEH,MAAO,CAAE,WAAY,aAAgB,gBAAiB,6BAA6B,MAChF,SAEH,MAAO,CAAE,WAAY,aAAe,gBAAkB,MAAS,EAErE,CAzBA,QAAA,kBAAA",
  "names": []
}
