{
  "version": 3,
  "sources": ["dynamodb-canned-metrics.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nexport class DynamoDBMetrics {\n  public static conditionalCheckFailedRequestsSum(dimensions: { TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ConditionalCheckFailedRequests',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static consumedReadCapacityUnitsSum(dimensions: { TableName: string }): MetricWithDims<{ TableName: string }>;\n  public static consumedReadCapacityUnitsSum(dimensions: { GlobalSecondaryIndexName: string, TableName: string }): MetricWithDims<{ GlobalSecondaryIndexName: string, TableName: string }>;\n  public static consumedReadCapacityUnitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ConsumedReadCapacityUnits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static consumedWriteCapacityUnitsSum(dimensions: { TableName: string }): MetricWithDims<{ TableName: string }>;\n  public static consumedWriteCapacityUnitsSum(dimensions: { GlobalSecondaryIndexName: string, TableName: string }): MetricWithDims<{ GlobalSecondaryIndexName: string, TableName: string }>;\n  public static consumedWriteCapacityUnitsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ConsumedWriteCapacityUnits',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static provisionedReadCapacityUnitsAverage(dimensions: { TableName: string }): MetricWithDims<{ TableName: string }>;\n  public static provisionedReadCapacityUnitsAverage(dimensions: { GlobalSecondaryIndexName: string, TableName: string }): MetricWithDims<{ GlobalSecondaryIndexName: string, TableName: string }>;\n  public static provisionedReadCapacityUnitsAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ProvisionedReadCapacityUnits',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static provisionedWriteCapacityUnitsAverage(dimensions: { TableName: string }): MetricWithDims<{ TableName: string }>;\n  public static provisionedWriteCapacityUnitsAverage(dimensions: { GlobalSecondaryIndexName: string, TableName: string }): MetricWithDims<{ GlobalSecondaryIndexName: string, TableName: string }>;\n  public static provisionedWriteCapacityUnitsAverage(dimensions: any) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ProvisionedWriteCapacityUnits',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static readThrottleEventsSum(dimensions: { TableName: string }): MetricWithDims<{ TableName: string }>;\n  public static readThrottleEventsSum(dimensions: { GlobalSecondaryIndexName: string, TableName: string }): MetricWithDims<{ GlobalSecondaryIndexName: string, TableName: string }>;\n  public static readThrottleEventsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ReadThrottleEvents',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static timeToLiveDeletedItemCountSum(dimensions: { TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'TimeToLiveDeletedItemCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static transactionConflictAverage(dimensions: { TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'TransactionConflict',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static writeThrottleEventsSum(dimensions: { TableName: string }): MetricWithDims<{ TableName: string }>;\n  public static writeThrottleEventsSum(dimensions: { GlobalSecondaryIndexName: string, TableName: string }): MetricWithDims<{ GlobalSecondaryIndexName: string, TableName: string }>;\n  public static writeThrottleEventsSum(dimensions: any) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'WriteThrottleEvents',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static successfulRequestLatencyAverage(dimensions: { Operation: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'SuccessfulRequestLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static systemErrorsSum(dimensions: { Operation: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'SystemErrors',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static throttledRequestsSum(dimensions: { Operation: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ThrottledRequests',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static returnedItemCountSum(dimensions: { Operation: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ReturnedItemCount',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static onlineIndexConsumedWriteCapacitySum(dimensions: { GlobalSecondaryIndexName: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'OnlineIndexConsumedWriteCapacity',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static onlineIndexPercentageProgressAverage(dimensions: { GlobalSecondaryIndexName: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'OnlineIndexPercentageProgress',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static onlineIndexThrottleEventsSum(dimensions: { GlobalSecondaryIndexName: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'OnlineIndexThrottleEvents',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n  public static ageOfOldestUnreplicatedRecordAverage(dimensions: { DelegatedOperation: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'AgeOfOldestUnreplicatedRecord',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static consumedChangeDataCaptureUnitsAverage(dimensions: { DelegatedOperation: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ConsumedChangeDataCaptureUnits',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static throttledPutRecordCountAverage(dimensions: { DelegatedOperation: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ThrottledPutRecordCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static pendingReplicationCountAverage(dimensions: { ReceivingRegion: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'PendingReplicationCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static replicationLatencyAverage(dimensions: { ReceivingRegion: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ReplicationLatency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static returnedBytesAverage(dimensions: { Operation: string, StreamLabel: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ReturnedBytes',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static returnedRecordsCountAverage(dimensions: { Operation: string, StreamLabel: string, TableName: string }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'ReturnedRecordsCount',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static accountMaxReadsMaximum(dimensions: {  }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'AccountMaxReads',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static accountMaxTableLevelReadsMaximum(dimensions: {  }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'AccountMaxTableLevelReads',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static accountMaxTableLevelWritesMaximum(dimensions: {  }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'AccountMaxTableLevelWrites',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static accountMaxWritesMaximum(dimensions: {  }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'AccountMaxWrites',\n      dimensionsMap: dimensions,\n      statistic: 'Maximum',\n    };\n  }\n  public static accountProvisionedReadCapacityUtilizationAverage(dimensions: {  }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'AccountProvisionedReadCapacityUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static accountProvisionedWriteCapacityUtilizationAverage(dimensions: {  }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'AccountProvisionedWriteCapacityUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static maxProvisionedTableReadCapacityUtilizationAverage(dimensions: {  }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'MaxProvisionedTableReadCapacityUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static maxProvisionedTableWriteCapacityUtilizationAverage(dimensions: {  }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'MaxProvisionedTableWriteCapacityUtilization',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static userErrorsSum(dimensions: {  }) {\n    return {\n      namespace: 'AWS/DynamoDB',\n      metricName: 'UserErrors',\n      dimensionsMap: dimensions,\n      statistic: 'Sum',\n    };\n  }\n}\ntype MetricWithDims<D> = { namespace: string, metricName: string, statistic: string, dimensionsMap: D };\n"],
  "mappings": "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",
  "names": []
}
