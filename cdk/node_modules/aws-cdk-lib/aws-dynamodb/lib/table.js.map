{
  "version": 3,
  "sources": ["table.ts"],
  "sourcesContent": ["import * as appscaling from '../../aws-applicationautoscaling';\nimport * as cloudwatch from '../../aws-cloudwatch';\nimport * as iam from '../../aws-iam';\nimport * as kinesis from '../../aws-kinesis';\nimport * as kms from '../../aws-kms';\nimport {\n  ArnFormat,\n  Aws, CfnCondition, CfnCustomResource, CfnResource, CustomResource, Duration,\n  Fn, IResource, Lazy, Names, RemovalPolicy, Resource, Stack, Token,\n} from '../../core';\nimport { Construct } from 'constructs';\nimport { DynamoDBMetrics } from './dynamodb-canned-metrics.generated';\nimport { CfnTable, CfnTableProps } from './dynamodb.generated';\nimport * as perms from './perms';\nimport { ReplicaProvider } from './replica-provider';\nimport { EnableScalingProps, IScalableTableAttribute } from './scalable-attribute-api';\nimport { ScalableTableAttribute } from './scalable-table-attribute';\n\nconst HASH_KEY_TYPE = 'HASH';\nconst RANGE_KEY_TYPE = 'RANGE';\n\n// https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html#limits-secondary-indexes\nconst MAX_LOCAL_SECONDARY_INDEX_COUNT = 5;\n\n/**\n * Options for configuring a system errors metric that considers multiple operations.\n */\nexport interface SystemErrorsForOperationsMetricOptions extends cloudwatch.MetricOptions {\n\n  /**\n   * The operations to apply the metric to.\n   *\n   * @default - All operations available by DynamoDB tables will be considered.\n   */\n  readonly operations?: Operation[];\n\n}\n\n/**\n * Supported DynamoDB table operations.\n */\nexport enum Operation {\n\n  /** GetItem */\n  GET_ITEM = 'GetItem',\n\n  /** BatchGetItem */\n  BATCH_GET_ITEM = 'BatchGetItem',\n\n  /** Scan */\n  SCAN = 'Scan',\n\n  /** Query */\n  QUERY = 'Query',\n\n  /** GetRecords */\n  GET_RECORDS = 'GetRecords',\n\n  /** PutItem */\n  PUT_ITEM = 'PutItem',\n\n  /** DeleteItem */\n  DELETE_ITEM = 'DeleteItem',\n\n  /** UpdateItem */\n  UPDATE_ITEM = 'UpdateItem',\n\n  /** BatchWriteItem */\n  BATCH_WRITE_ITEM = 'BatchWriteItem',\n\n  /** TransactWriteItems */\n  TRANSACT_WRITE_ITEMS = 'TransactWriteItems',\n\n  /** TransactGetItems */\n  TRANSACT_GET_ITEMS = 'TransactGetItems',\n\n  /** ExecuteTransaction */\n  EXECUTE_TRANSACTION = 'ExecuteTransaction',\n\n  /** BatchExecuteStatement */\n  BATCH_EXECUTE_STATEMENT = 'BatchExecuteStatement',\n\n  /** ExecuteStatement */\n  EXECUTE_STATEMENT = 'ExecuteStatement',\n\n}\n\n/**\n * Represents an attribute for describing the key schema for the table\n * and indexes.\n */\nexport interface Attribute {\n  /**\n   * The name of an attribute.\n   */\n  readonly name: string;\n\n  /**\n   * The data type of an attribute.\n   */\n  readonly type: AttributeType;\n}\n\n/**\n * What kind of server-side encryption to apply to this table.\n */\nexport enum TableEncryption {\n  /**\n   * Server-side KMS encryption with a master key owned by AWS.\n   */\n  DEFAULT = 'AWS_OWNED',\n\n  /**\n   * Server-side KMS encryption with a customer master key managed by customer.\n   * If `encryptionKey` is specified, this key will be used, otherwise, one will be defined.\n   *\n   * > **NOTE**: if `encryptionKey` is not specified and the `Table` construct creates\n   * > a KMS key for you, the key will be created with default permissions. If you are using\n   * > CDKv2, these permissions will be sufficient to enable the key for use with DynamoDB tables.\n   * > If you are using CDKv1, make sure the feature flag `@aws-cdk/aws-kms:defaultKeyPolicies`\n   * > is set to `true` in your `cdk.json`.\n   */\n  CUSTOMER_MANAGED = 'CUSTOMER_MANAGED',\n\n  /**\n   * Server-side KMS encryption with a master key managed by AWS.\n   */\n  AWS_MANAGED = 'AWS_MANAGED',\n}\n\n/**\n * Represents the table schema attributes.\n */\nexport interface SchemaOptions {\n  /**\n   * Partition key attribute definition.\n   */\n  readonly partitionKey: Attribute;\n\n  /**\n   * Sort key attribute definition.\n   *\n   * @default no sort key\n   */\n  readonly sortKey?: Attribute;\n}\n\n/**\n * Properties of a DynamoDB Table\n *\n * Use {@link TableProps} for all table properties\n */\nexport interface TableOptions extends SchemaOptions {\n  /**\n   * The read capacity for the table. Careful if you add Global Secondary Indexes, as\n   * those will share the table's provisioned throughput.\n   *\n   * Can only be provided if billingMode is Provisioned.\n   *\n   * @default 5\n   */\n  readonly readCapacity?: number;\n  /**\n   * The write capacity for the table. Careful if you add Global Secondary Indexes, as\n   * those will share the table's provisioned throughput.\n   *\n   * Can only be provided if billingMode is Provisioned.\n   *\n   * @default 5\n   */\n  readonly writeCapacity?: number;\n\n  /**\n   * Specify how you are charged for read and write throughput and how you manage capacity.\n   *\n   * @default PROVISIONED if `replicationRegions` is not specified, PAY_PER_REQUEST otherwise\n   */\n  readonly billingMode?: BillingMode;\n\n  /**\n   * Whether point-in-time recovery is enabled.\n   * @default - point-in-time recovery is disabled\n   */\n  readonly pointInTimeRecovery?: boolean;\n\n  /**\n   * Whether server-side encryption with an AWS managed customer master key is enabled.\n   *\n   * This property cannot be set if `encryption` and/or `encryptionKey` is set.\n   *\n   * @default - server-side encryption is enabled with an AWS owned customer master key\n   *\n   * @deprecated This property is deprecated. In order to obtain the same behavior as\n   * enabling this, set the `encryption` property to `TableEncryption.AWS_MANAGED` instead.\n   */\n  readonly serverSideEncryption?: boolean;\n\n  /**\n   * Specify the table class.\n   * @default STANDARD\n   */\n  readonly tableClass?: TableClass;\n\n  /**\n   * Whether server-side encryption with an AWS managed customer master key is enabled.\n   *\n   * This property cannot be set if `serverSideEncryption` is set.\n   *\n   * > **NOTE**: if you set this to `CUSTOMER_MANAGED` and `encryptionKey` is not\n   * > specified, the key that the Tablet generates for you will be created with\n   * > default permissions. If you are using CDKv2, these permissions will be\n   * > sufficient to enable the key for use with DynamoDB tables.  If you are\n   * > using CDKv1, make sure the feature flag\n   * > `@aws-cdk/aws-kms:defaultKeyPolicies` is set to `true` in your `cdk.json`.\n   *\n   * @default - server-side encryption is enabled with an AWS owned customer master key\n   */\n  readonly encryption?: TableEncryption;\n\n  /**\n   * External KMS key to use for table encryption.\n   *\n   * This property can only be set if `encryption` is set to `TableEncryption.CUSTOMER_MANAGED`.\n   *\n   * @default - If `encryption` is set to `TableEncryption.CUSTOMER_MANAGED` and this\n   * property is undefined, a new KMS key will be created and associated with this table.\n   */\n  readonly encryptionKey?: kms.IKey;\n\n  /**\n   * The name of TTL attribute.\n   * @default - TTL is disabled\n   */\n  readonly timeToLiveAttribute?: string;\n\n  /**\n   * When an item in the table is modified, StreamViewType determines what information\n   * is written to the stream for this table.\n   *\n   * @default - streams are disabled unless `replicationRegions` is specified\n   */\n  readonly stream?: StreamViewType;\n\n  /**\n   * The removal policy to apply to the DynamoDB Table.\n   *\n   * @default RemovalPolicy.RETAIN\n   */\n  readonly removalPolicy?: RemovalPolicy;\n\n  /**\n   * Regions where replica tables will be created\n   *\n   * @default - no replica tables are created\n   */\n  readonly replicationRegions?: string[];\n\n  /**\n   * The timeout for a table replication operation in a single region.\n   *\n   * @default Duration.minutes(30)\n   */\n  readonly replicationTimeout?: Duration;\n\n  /**\n   * Indicates whether CloudFormation stack waits for replication to finish.\n   * If set to false, the CloudFormation resource will mark the resource as\n   * created and replication will be completed asynchronously. This property is\n   * ignored if replicationRegions property is not set.\n   *\n   * DO NOT UNSET this property if adding/removing multiple replicationRegions\n   * in one deployment, as CloudFormation only supports one region replication\n   * at a time. CDK overcomes this limitation by waiting for replication to\n   * finish before starting new replicationRegion.\n   *\n   * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-globaltable.html#cfn-dynamodb-globaltable-replicas\n   * @default true\n   */\n  readonly waitForReplicationToFinish?: boolean;\n\n  /**\n   * Whether CloudWatch contributor insights is enabled.\n   *\n   * @default false\n   */\n  readonly contributorInsightsEnabled?: boolean;\n}\n\n/**\n * Properties for a DynamoDB Table\n */\nexport interface TableProps extends TableOptions {\n  /**\n   * Enforces a particular physical table name.\n   * @default <generated>\n   */\n  readonly tableName?: string;\n\n  /**\n   * Kinesis Data Stream to capture item-level changes for the table.\n   *\n   * @default - no Kinesis Data Stream\n   */\n  readonly kinesisStream?: kinesis.IStream;\n}\n\n/**\n * Properties for a secondary index\n */\nexport interface SecondaryIndexProps {\n  /**\n   * The name of the secondary index.\n   */\n  readonly indexName: string;\n\n  /**\n   * The set of attributes that are projected into the secondary index.\n   * @default ALL\n   */\n  readonly projectionType?: ProjectionType;\n\n  /**\n   * The non-key attributes that are projected into the secondary index.\n   * @default - No additional attributes\n   */\n  readonly nonKeyAttributes?: string[];\n}\n\n/**\n * Properties for a global secondary index\n */\nexport interface GlobalSecondaryIndexProps extends SecondaryIndexProps, SchemaOptions {\n  /**\n   * The read capacity for the global secondary index.\n   *\n   * Can only be provided if table billingMode is Provisioned or undefined.\n   *\n   * @default 5\n   */\n  readonly readCapacity?: number;\n\n  /**\n   * The write capacity for the global secondary index.\n   *\n   * Can only be provided if table billingMode is Provisioned or undefined.\n   *\n   * @default 5\n   */\n  readonly writeCapacity?: number;\n}\n\n/**\n * Properties for a local secondary index\n */\nexport interface LocalSecondaryIndexProps extends SecondaryIndexProps {\n  /**\n   * The attribute of a sort key for the local secondary index.\n   */\n  readonly sortKey: Attribute;\n}\n\n/**\n * An interface that represents a DynamoDB Table - either created with the CDK, or an existing one.\n */\nexport interface ITable extends IResource {\n  /**\n   * Arn of the dynamodb table.\n   *\n   * @attribute\n   */\n  readonly tableArn: string;\n\n  /**\n   * Table name of the dynamodb table.\n   *\n   * @attribute\n   */\n  readonly tableName: string;\n\n  /**\n   * ARN of the table's stream, if there is one.\n   *\n   * @attribute\n   */\n  readonly tableStreamArn?: string;\n\n  /**\n   *\n   * Optional KMS encryption key associated with this table.\n   */\n  readonly encryptionKey?: kms.IKey;\n\n  /**\n   * Adds an IAM policy statement associated with this table to an IAM\n   * principal's policy.\n   *\n   * If `encryptionKey` is present, appropriate grants to the key needs to be added\n   * separately using the `table.encryptionKey.grant*` methods.\n   *\n   * @param grantee The principal (no-op if undefined)\n   * @param actions The set of actions to allow (i.e. \"dynamodb:PutItem\", \"dynamodb:GetItem\", ...)\n   */\n  grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;\n\n  /**\n   * Adds an IAM policy statement associated with this table's stream to an\n   * IAM principal's policy.\n   *\n   * If `encryptionKey` is present, appropriate grants to the key needs to be added\n   * separately using the `table.encryptionKey.grant*` methods.\n   *\n   * @param grantee The principal (no-op if undefined)\n   * @param actions The set of actions to allow (i.e. \"dynamodb:DescribeStream\", \"dynamodb:GetRecords\", ...)\n   */\n  grantStream(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;\n\n  /**\n   * Permits an IAM principal all data read operations from this table:\n   * BatchGetItem, GetRecords, GetShardIterator, Query, GetItem, Scan.\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  grantReadData(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Permits an IAM Principal to list streams attached to current dynamodb table.\n   *\n   * @param grantee The principal (no-op if undefined)\n   */\n  grantTableListStreams(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Permits an IAM principal all stream data read operations for this\n   * table's stream:\n   * DescribeStream, GetRecords, GetShardIterator, ListStreams.\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  grantStreamRead(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Permits an IAM principal all data write operations to this table:\n   * BatchWriteItem, PutItem, UpdateItem, DeleteItem.\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  grantWriteData(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Permits an IAM principal to all data read/write operations to this table.\n   * BatchGetItem, GetRecords, GetShardIterator, Query, GetItem, Scan,\n   * BatchWriteItem, PutItem, UpdateItem, DeleteItem\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  grantReadWriteData(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Permits all DynamoDB operations (\"dynamodb:*\") to an IAM principal.\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  grantFullAccess(grantee: iam.IGrantable): iam.Grant;\n\n  /**\n   * Metric for the number of Errors executing all Lambdas\n   */\n  metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the consumed read capacity units\n   *\n   * @param props properties of a metric\n   */\n  metricConsumedReadCapacityUnits(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the consumed write capacity units\n   *\n   * @param props properties of a metric\n   */\n  metricConsumedWriteCapacityUnits(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the system errors\n   *\n   * @param props properties of a metric\n   *\n   * @deprecated use `metricSystemErrorsForOperations`\n   */\n  metricSystemErrors(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the system errors this table\n   *\n   * @param props properties of a metric\n   *\n   */\n  metricSystemErrorsForOperations(props?: SystemErrorsForOperationsMetricOptions): cloudwatch.IMetric;\n\n  /**\n   * Metric for the user errors\n   *\n   * @param props properties of a metric\n   */\n  metricUserErrors(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the conditional check failed requests\n   *\n   * @param props properties of a metric\n   */\n  metricConditionalCheckFailedRequests(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for throttled requests\n   *\n   * @param props properties of a metric\n   *\n   */\n  metricThrottledRequests(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n\n  /**\n   * Metric for the successful request latency\n   *\n   * @param props properties of a metric\n   *\n   */\n  metricSuccessfulRequestLatency(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n}\n\n/**\n * Reference to a dynamodb table.\n */\nexport interface TableAttributes {\n  /**\n   * The ARN of the dynamodb table.\n   * One of this, or {@link tableName}, is required.\n   *\n   * @default - no table arn\n   */\n  readonly tableArn?: string;\n\n  /**\n   * The table name of the dynamodb table.\n   * One of this, or {@link tableArn}, is required.\n   *\n   * @default - no table name\n   */\n  readonly tableName?: string;\n\n  /**\n   * The ARN of the table's stream.\n   *\n   * @default - no table stream\n   */\n  readonly tableStreamArn?: string;\n\n  /**\n   * KMS encryption key, if this table uses a customer-managed encryption key.\n   *\n   * @default - no key\n   */\n  readonly encryptionKey?: kms.IKey;\n\n  /**\n   * The name of the global indexes set for this Table.\n   * Note that you need to set either this property,\n   * or {@link localIndexes},\n   * if you want methods like grantReadData()\n   * to grant permissions for indexes as well as the table itself.\n   *\n   * @default - no global indexes\n   */\n  readonly globalIndexes?: string[];\n\n  /**\n   * The name of the local indexes set for this Table.\n   * Note that you need to set either this property,\n   * or {@link globalIndexes},\n   * if you want methods like grantReadData()\n   * to grant permissions for indexes as well as the table itself.\n   *\n   * @default - no local indexes\n   */\n  readonly localIndexes?: string[];\n}\n\nabstract class TableBase extends Resource implements ITable {\n  /**\n   * @attribute\n   */\n  public abstract readonly tableArn: string;\n\n  /**\n   * @attribute\n   */\n  public abstract readonly tableName: string;\n\n  /**\n   * @attribute\n   */\n  public abstract readonly tableStreamArn?: string;\n\n  /**\n   * KMS encryption key, if this table uses a customer-managed encryption key.\n   */\n  public abstract readonly encryptionKey?: kms.IKey;\n\n  protected readonly regionalArns = new Array<string>();\n\n  /**\n   * Adds an IAM policy statement associated with this table to an IAM\n   * principal's policy.\n   *\n   * If `encryptionKey` is present, appropriate grants to the key needs to be added\n   * separately using the `table.encryptionKey.grant*` methods.\n   *\n   * @param grantee The principal (no-op if undefined)\n   * @param actions The set of actions to allow (i.e. \"dynamodb:PutItem\", \"dynamodb:GetItem\", ...)\n   */\n  public grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions,\n      resourceArns: [\n        this.tableArn,\n        Lazy.string({ produce: () => this.hasIndex ? `${this.tableArn}/index/*` : Aws.NO_VALUE }),\n        ...this.regionalArns,\n        ...this.regionalArns.map(arn => Lazy.string({\n          produce: () => this.hasIndex ? `${arn}/index/*` : Aws.NO_VALUE,\n        })),\n      ],\n      scope: this,\n    });\n  }\n\n  /**\n   * Adds an IAM policy statement associated with this table's stream to an\n   * IAM principal's policy.\n   *\n   * If `encryptionKey` is present, appropriate grants to the key needs to be added\n   * separately using the `table.encryptionKey.grant*` methods.\n   *\n   * @param grantee The principal (no-op if undefined)\n   * @param actions The set of actions to allow (i.e. \"dynamodb:DescribeStream\", \"dynamodb:GetRecords\", ...)\n   */\n  public grantStream(grantee: iam.IGrantable, ...actions: string[]): iam.Grant {\n    if (!this.tableStreamArn) {\n      throw new Error(`DynamoDB Streams must be enabled on the table ${this.node.path}`);\n    }\n\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions,\n      resourceArns: [this.tableStreamArn],\n      scope: this,\n    });\n  }\n\n  /**\n   * Permits an IAM principal all data read operations from this table:\n   * BatchGetItem, GetRecords, GetShardIterator, Query, GetItem, Scan, DescribeTable.\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  public grantReadData(grantee: iam.IGrantable): iam.Grant {\n    const tableActions = perms.READ_DATA_ACTIONS.concat(perms.DESCRIBE_TABLE);\n    return this.combinedGrant(grantee, { keyActions: perms.KEY_READ_ACTIONS, tableActions });\n  }\n\n  /**\n   * Permits an IAM Principal to list streams attached to current dynamodb table.\n   *\n   * @param grantee The principal (no-op if undefined)\n   */\n  public grantTableListStreams(grantee: iam.IGrantable): iam.Grant {\n    if (!this.tableStreamArn) {\n      throw new Error(`DynamoDB Streams must be enabled on the table ${this.node.path}`);\n    }\n\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['dynamodb:ListStreams'],\n      resourceArns: ['*'],\n    });\n  }\n\n  /**\n   * Permits an IAM principal all stream data read operations for this\n   * table's stream:\n   * DescribeStream, GetRecords, GetShardIterator, ListStreams.\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  public grantStreamRead(grantee: iam.IGrantable): iam.Grant {\n    this.grantTableListStreams(grantee);\n    return this.combinedGrant(grantee, { keyActions: perms.KEY_READ_ACTIONS, streamActions: perms.READ_STREAM_DATA_ACTIONS });\n  }\n\n  /**\n   * Permits an IAM principal all data write operations to this table:\n   * BatchWriteItem, PutItem, UpdateItem, DeleteItem, DescribeTable.\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  public grantWriteData(grantee: iam.IGrantable): iam.Grant {\n    const tableActions = perms.WRITE_DATA_ACTIONS.concat(perms.DESCRIBE_TABLE);\n    const keyActions = perms.KEY_READ_ACTIONS.concat(perms.KEY_WRITE_ACTIONS);\n    return this.combinedGrant(grantee, { keyActions, tableActions });\n  }\n\n  /**\n   * Permits an IAM principal to all data read/write operations to this table.\n   * BatchGetItem, GetRecords, GetShardIterator, Query, GetItem, Scan,\n   * BatchWriteItem, PutItem, UpdateItem, DeleteItem, DescribeTable\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  public grantReadWriteData(grantee: iam.IGrantable): iam.Grant {\n    const tableActions = perms.READ_DATA_ACTIONS.concat(perms.WRITE_DATA_ACTIONS).concat(perms.DESCRIBE_TABLE);\n    const keyActions = perms.KEY_READ_ACTIONS.concat(perms.KEY_WRITE_ACTIONS);\n    return this.combinedGrant(grantee, { keyActions, tableActions });\n  }\n\n  /**\n   * Permits all DynamoDB operations (\"dynamodb:*\") to an IAM principal.\n   *\n   * Appropriate grants will also be added to the customer-managed KMS key\n   * if one was configured.\n   *\n   * @param grantee The principal to grant access to\n   */\n  public grantFullAccess(grantee: iam.IGrantable) {\n    const keyActions = perms.KEY_READ_ACTIONS.concat(perms.KEY_WRITE_ACTIONS);\n    return this.combinedGrant(grantee, { keyActions, tableActions: ['dynamodb:*'] });\n  }\n\n  /**\n   * Return the given named metric for this Table\n   *\n   * By default, the metric will be calculated as a sum over a period of 5 minutes.\n   * You can customize this by using the `statistic` and `period` properties.\n   */\n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/DynamoDB',\n      metricName,\n      dimensionsMap: {\n        TableName: this.tableName,\n      },\n      ...props,\n    }).attachTo(this);\n  }\n\n  /**\n   * Metric for the consumed read capacity units this table\n   *\n   * By default, the metric will be calculated as a sum over a period of 5 minutes.\n   * You can customize this by using the `statistic` and `period` properties.\n   */\n  public metricConsumedReadCapacityUnits(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(DynamoDBMetrics.consumedReadCapacityUnitsSum, props);\n  }\n\n  /**\n   * Metric for the consumed write capacity units this table\n   *\n   * By default, the metric will be calculated as a sum over a period of 5 minutes.\n   * You can customize this by using the `statistic` and `period` properties.\n   */\n  public metricConsumedWriteCapacityUnits(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.cannedMetric(DynamoDBMetrics.consumedWriteCapacityUnitsSum, props);\n  }\n\n  /**\n   * Metric for the system errors this table\n   *\n   * @deprecated use `metricSystemErrorsForOperations`.\n   */\n  public metricSystemErrors(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    if (!props?.dimensions?.Operation && !props?.dimensionsMap?.Operation) {\n      // 'Operation' must be passed because its an operational metric.\n      throw new Error(\"'Operation' dimension must be passed for the 'SystemErrors' metric.\");\n    }\n\n    const dimensionsMap = {\n      TableName: this.tableName,\n      ...props?.dimensions ?? {},\n      ...props?.dimensionsMap ?? {},\n    };\n\n    return this.metric('SystemErrors', { statistic: 'sum', ...props, dimensionsMap });\n  }\n\n  /**\n   * Metric for the user errors. Note that this metric reports user errors across all\n   * the tables in the account and region the table resides in.\n   *\n   * By default, the metric will be calculated as a sum over a period of 5 minutes.\n   * You can customize this by using the `statistic` and `period` properties.\n   */\n  public metricUserErrors(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    if (props?.dimensions) {\n      throw new Error(\"'dimensions' is not supported for the 'UserErrors' metric\");\n    }\n\n    // overriding 'dimensions' here because this metric is an account metric.\n    // see 'UserErrors' in https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/metrics-dimensions.html\n    return this.metric('UserErrors', { statistic: 'sum', ...props, dimensionsMap: {} });\n  }\n\n  /**\n   * Metric for the conditional check failed requests this table\n   *\n   * By default, the metric will be calculated as a sum over a period of 5 minutes.\n   * You can customize this by using the `statistic` and `period` properties.\n   */\n  public metricConditionalCheckFailedRequests(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.metric('ConditionalCheckFailedRequests', { statistic: 'sum', ...props });\n  }\n\n  /**\n   * How many requests are throttled on this table\n   *\n   * Default: sum over 5 minutes\n   *\n   * @deprecated Do not use this function. It returns an invalid metric. Use `metricThrottledRequestsForOperation` instead.\n   */\n  public metricThrottledRequests(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.metric('ThrottledRequests', { statistic: 'sum', ...props });\n  }\n\n  /**\n   * How many requests are throttled on this table, for the given operation\n   *\n   * Default: sum over 5 minutes\n   */\n  public metricThrottledRequestsForOperation(operation: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      ...DynamoDBMetrics.throttledRequestsSum({ Operation: operation, TableName: this.tableName }),\n      ...props,\n    }).attachTo(this);\n  }\n\n  /**\n   * Metric for the successful request latency this table.\n   *\n   * By default, the metric will be calculated as an average over a period of 5 minutes.\n   * You can customize this by using the `statistic` and `period` properties.\n   */\n  public metricSuccessfulRequestLatency(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    if (!props?.dimensions?.Operation && !props?.dimensionsMap?.Operation) {\n      throw new Error(\"'Operation' dimension must be passed for the 'SuccessfulRequestLatency' metric.\");\n    }\n\n    const dimensionsMap = {\n      TableName: this.tableName,\n      Operation: props.dimensionsMap?.Operation ?? props.dimensions?.Operation,\n    };\n\n    return new cloudwatch.Metric({\n      ...DynamoDBMetrics.successfulRequestLatencyAverage(dimensionsMap),\n      ...props,\n      dimensionsMap,\n    }).attachTo(this);\n  }\n\n  /**\n   * Metric for the system errors this table.\n   *\n   * This will sum errors across all possible operations.\n   * Note that by default, each individual metric will be calculated as a sum over a period of 5 minutes.\n   * You can customize this by using the `statistic` and `period` properties.\n   */\n  public metricSystemErrorsForOperations(props?: SystemErrorsForOperationsMetricOptions): cloudwatch.IMetric {\n\n    if (props?.dimensions?.Operation) {\n      throw new Error(\"The Operation dimension is not supported. Use the 'operations' property.\");\n    }\n\n    const operations = props?.operations ?? Object.values(Operation);\n\n    const values = this.createMetricsForOperations('SystemErrors', operations, { statistic: 'sum', ...props });\n\n    const sum = new cloudwatch.MathExpression({\n      expression: `${Object.keys(values).join(' + ')}`,\n      usingMetrics: { ...values },\n      color: props?.color,\n      label: 'Sum of errors across all operations',\n      period: props?.period,\n    });\n\n    return sum;\n  }\n\n  /**\n   * Create a map of metrics that can be used in a math expression.\n   *\n   * Using the return value of this function as the `usingMetrics` property in `cloudwatch.MathExpression` allows you to\n   * use the keys of this map as metric names inside you expression.\n   *\n   * @param metricName The metric name.\n   * @param operations The list of operations to create metrics for.\n   * @param props Properties for the individual metrics.\n   * @param metricNameMapper Mapper function to allow controlling the individual metric name per operation.\n   */\n  private createMetricsForOperations(metricName: string, operations: Operation[],\n    props?: cloudwatch.MetricOptions, metricNameMapper?: (op: Operation) => string): Record<string, cloudwatch.IMetric> {\n\n    const metrics: Record<string, cloudwatch.IMetric> = {};\n\n    const mapper = metricNameMapper ?? (op => op.toLowerCase());\n\n    if (props?.dimensions?.Operation) {\n      throw new Error('Invalid properties. Operation dimension is not supported when calculating operational metrics');\n    }\n\n    for (const operation of operations) {\n\n      const metric = this.metric(metricName, {\n        ...props,\n        dimensionsMap: {\n          TableName: this.tableName,\n          Operation: operation,\n          ...props?.dimensions,\n        },\n      });\n\n      const operationMetricName = mapper(operation);\n      const firstChar = operationMetricName.charAt(0);\n\n      if (firstChar === firstChar.toUpperCase()) {\n        // https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax\n        throw new Error(`Mapper generated an illegal operation metric name: ${operationMetricName}. Must start with a lowercase letter`);\n      }\n\n      metrics[operationMetricName] = metric;\n    }\n\n    return metrics;\n  }\n\n  protected abstract get hasIndex(): boolean;\n\n  /**\n   * Adds an IAM policy statement associated with this table to an IAM\n   * principal's policy.\n   * @param grantee The principal (no-op if undefined)\n   * @param opts Options for keyActions, tableActions and streamActions\n   */\n  private combinedGrant(\n    grantee: iam.IGrantable,\n    opts: { keyActions?: string[], tableActions?: string[], streamActions?: string[] },\n  ): iam.Grant {\n    if (opts.tableActions) {\n      const resources = [this.tableArn,\n        Lazy.string({ produce: () => this.hasIndex ? `${this.tableArn}/index/*` : Aws.NO_VALUE }),\n        ...this.regionalArns,\n        ...this.regionalArns.map(arn => Lazy.string({\n          produce: () => this.hasIndex ? `${arn}/index/*` : Aws.NO_VALUE,\n        }))];\n      const ret = iam.Grant.addToPrincipal({\n        grantee,\n        actions: opts.tableActions,\n        resourceArns: resources,\n        scope: this,\n      });\n      if (this.encryptionKey && opts.keyActions) {\n        this.encryptionKey.grant(grantee, ...opts.keyActions);\n      }\n      return ret;\n    }\n    if (opts.streamActions) {\n      if (!this.tableStreamArn) {\n        throw new Error(`DynamoDB Streams must be enabled on the table ${this.node.path}`);\n      }\n      const resources = [this.tableStreamArn];\n      const ret = iam.Grant.addToPrincipal({\n        grantee,\n        actions: opts.streamActions,\n        resourceArns: resources,\n        scope: this,\n      });\n      return ret;\n    }\n    throw new Error(`Unexpected 'action', ${opts.tableActions || opts.streamActions}`);\n  }\n\n  private cannedMetric(\n    fn: (dims: { TableName: string }) => cloudwatch.MetricProps,\n    props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      ...fn({ TableName: this.tableName }),\n      ...props,\n    }).attachTo(this);\n  }\n}\n\n/**\n * Provides a DynamoDB table.\n */\nexport class Table extends TableBase {\n  /**\n   * Permits an IAM Principal to list all DynamoDB Streams.\n   * @deprecated Use {@link #grantTableListStreams} for more granular permission\n   * @param grantee The principal (no-op if undefined)\n   */\n  public static grantListStreams(grantee: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['dynamodb:ListStreams'],\n      resourceArns: ['*'],\n    });\n  }\n\n  /**\n   * Creates a Table construct that represents an external table via table name.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param tableName The table's name.\n   */\n  public static fromTableName(scope: Construct, id: string, tableName: string): ITable {\n    return Table.fromTableAttributes(scope, id, { tableName });\n  }\n\n  /**\n   * Creates a Table construct that represents an external table via table arn.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param tableArn The table's ARN.\n   */\n  public static fromTableArn(scope: Construct, id: string, tableArn: string): ITable {\n    return Table.fromTableAttributes(scope, id, { tableArn });\n  }\n\n  /**\n   * Creates a Table construct that represents an external table.\n   *\n   * @param scope The parent creating construct (usually `this`).\n   * @param id The construct's name.\n   * @param attrs A `TableAttributes` object.\n   */\n  public static fromTableAttributes(scope: Construct, id: string, attrs: TableAttributes): ITable {\n\n    class Import extends TableBase {\n\n      public readonly tableName: string;\n      public readonly tableArn: string;\n      public readonly tableStreamArn?: string;\n      public readonly encryptionKey?: kms.IKey;\n      protected readonly hasIndex = (attrs.globalIndexes ?? []).length > 0 ||\n        (attrs.localIndexes ?? []).length > 0;\n\n      constructor(_tableArn: string, tableName: string, tableStreamArn?: string) {\n        super(scope, id);\n        this.tableArn = _tableArn;\n        this.tableName = tableName;\n        this.tableStreamArn = tableStreamArn;\n        this.encryptionKey = attrs.encryptionKey;\n      }\n    }\n\n    let name: string;\n    let arn: string;\n    const stack = Stack.of(scope);\n    if (!attrs.tableName) {\n      if (!attrs.tableArn) { throw new Error('One of tableName or tableArn is required!'); }\n\n      arn = attrs.tableArn;\n      const maybeTableName = stack.splitArn(attrs.tableArn, ArnFormat.SLASH_RESOURCE_NAME).resourceName;\n      if (!maybeTableName) { throw new Error('ARN for DynamoDB table must be in the form: ...'); }\n      name = maybeTableName;\n    } else {\n      if (attrs.tableArn) { throw new Error('Only one of tableArn or tableName can be provided'); }\n      name = attrs.tableName;\n      arn = stack.formatArn({\n        service: 'dynamodb',\n        resource: 'table',\n        resourceName: attrs.tableName,\n      });\n    }\n\n    return new Import(arn, name, attrs.tableStreamArn);\n  }\n\n  public readonly encryptionKey?: kms.IKey;\n\n  /**\n   * @attribute\n   */\n  public readonly tableArn: string;\n\n  /**\n   * @attribute\n   */\n  public readonly tableName: string;\n\n  /**\n   * @attribute\n   */\n  public readonly tableStreamArn: string | undefined;\n\n  private readonly table: CfnTable;\n\n  private readonly keySchema = new Array<CfnTable.KeySchemaProperty>();\n  private readonly attributeDefinitions = new Array<CfnTable.AttributeDefinitionProperty>();\n  private readonly globalSecondaryIndexes = new Array<CfnTable.GlobalSecondaryIndexProperty>();\n  private readonly localSecondaryIndexes = new Array<CfnTable.LocalSecondaryIndexProperty>();\n\n  private readonly secondaryIndexSchemas = new Map<string, SchemaOptions>();\n  private readonly nonKeyAttributes = new Set<string>();\n\n  private readonly tablePartitionKey: Attribute;\n  private readonly tableSortKey?: Attribute;\n\n  private readonly billingMode: BillingMode;\n  private readonly tableScaling: ScalableAttributePair = {};\n  private readonly indexScaling = new Map<string, ScalableAttributePair>();\n  private readonly scalingRole: iam.IRole;\n\n  private readonly globalReplicaCustomResources = new Array<CustomResource>();\n\n  constructor(scope: Construct, id: string, props: TableProps) {\n    super(scope, id, {\n      physicalName: props.tableName,\n    });\n\n    const { sseSpecification, encryptionKey } = this.parseEncryption(props);\n\n    let streamSpecification: CfnTable.StreamSpecificationProperty | undefined;\n    if (props.replicationRegions) {\n      if (props.stream && props.stream !== StreamViewType.NEW_AND_OLD_IMAGES) {\n        throw new Error('`stream` must be set to `NEW_AND_OLD_IMAGES` when specifying `replicationRegions`');\n      }\n      streamSpecification = { streamViewType: StreamViewType.NEW_AND_OLD_IMAGES };\n\n      this.billingMode = props.billingMode ?? BillingMode.PAY_PER_REQUEST;\n    } else {\n      this.billingMode = props.billingMode ?? BillingMode.PROVISIONED;\n      if (props.stream) {\n        streamSpecification = { streamViewType: props.stream };\n      }\n    }\n    this.validateProvisioning(props);\n\n    this.table = new CfnTable(this, 'Resource', {\n      tableName: this.physicalName,\n      keySchema: this.keySchema,\n      attributeDefinitions: this.attributeDefinitions,\n      globalSecondaryIndexes: Lazy.any({ produce: () => this.globalSecondaryIndexes }, { omitEmptyArray: true }),\n      localSecondaryIndexes: Lazy.any({ produce: () => this.localSecondaryIndexes }, { omitEmptyArray: true }),\n      pointInTimeRecoverySpecification: props.pointInTimeRecovery != null ? { pointInTimeRecoveryEnabled: props.pointInTimeRecovery } : undefined,\n      billingMode: this.billingMode === BillingMode.PAY_PER_REQUEST ? this.billingMode : undefined,\n      provisionedThroughput: this.billingMode === BillingMode.PAY_PER_REQUEST ? undefined : {\n        readCapacityUnits: props.readCapacity || 5,\n        writeCapacityUnits: props.writeCapacity || 5,\n      },\n      sseSpecification,\n      streamSpecification,\n      tableClass: props.tableClass,\n      timeToLiveSpecification: props.timeToLiveAttribute ? { attributeName: props.timeToLiveAttribute, enabled: true } : undefined,\n      contributorInsightsSpecification: props.contributorInsightsEnabled !== undefined ? { enabled: props.contributorInsightsEnabled } : undefined,\n      kinesisStreamSpecification: props.kinesisStream ? { streamArn: props.kinesisStream.streamArn } : undefined,\n    });\n    this.table.applyRemovalPolicy(props.removalPolicy);\n\n    this.encryptionKey = encryptionKey;\n\n    this.tableArn = this.getResourceArnAttribute(this.table.attrArn, {\n      service: 'dynamodb',\n      resource: 'table',\n      resourceName: this.physicalName,\n    });\n    this.tableName = this.getResourceNameAttribute(this.table.ref);\n\n    if (props.tableName) { this.node.addMetadata('aws:cdk:hasPhysicalName', this.tableName); }\n\n    this.tableStreamArn = streamSpecification ? this.table.attrStreamArn : undefined;\n\n    this.scalingRole = this.makeScalingRole();\n\n    this.addKey(props.partitionKey, HASH_KEY_TYPE);\n    this.tablePartitionKey = props.partitionKey;\n\n    if (props.sortKey) {\n      this.addKey(props.sortKey, RANGE_KEY_TYPE);\n      this.tableSortKey = props.sortKey;\n    }\n\n    if (props.replicationRegions && props.replicationRegions.length > 0) {\n      this.createReplicaTables(props.replicationRegions, props.replicationTimeout, props.waitForReplicationToFinish);\n    }\n\n    this.node.addValidation({ validate: () => this.validateTable() });\n  }\n\n  /**\n   * Add a global secondary index of table.\n   *\n   * @param props the property of global secondary index\n   */\n  public addGlobalSecondaryIndex(props: GlobalSecondaryIndexProps) {\n    this.validateProvisioning(props);\n    this.validateIndexName(props.indexName);\n\n    // build key schema and projection for index\n    const gsiKeySchema = this.buildIndexKeySchema(props.partitionKey, props.sortKey);\n    const gsiProjection = this.buildIndexProjection(props);\n\n    this.globalSecondaryIndexes.push({\n      indexName: props.indexName,\n      keySchema: gsiKeySchema,\n      projection: gsiProjection,\n      provisionedThroughput: this.billingMode === BillingMode.PAY_PER_REQUEST ? undefined : {\n        readCapacityUnits: props.readCapacity || 5,\n        writeCapacityUnits: props.writeCapacity || 5,\n      },\n    });\n\n    this.secondaryIndexSchemas.set(props.indexName, {\n      partitionKey: props.partitionKey,\n      sortKey: props.sortKey,\n    });\n\n    this.indexScaling.set(props.indexName, {});\n  }\n\n  /**\n   * Add a local secondary index of table.\n   *\n   * @param props the property of local secondary index\n   */\n  public addLocalSecondaryIndex(props: LocalSecondaryIndexProps) {\n    // https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html#limits-secondary-indexes\n    if (this.localSecondaryIndexes.length >= MAX_LOCAL_SECONDARY_INDEX_COUNT) {\n      throw new RangeError(`a maximum number of local secondary index per table is ${MAX_LOCAL_SECONDARY_INDEX_COUNT}`);\n    }\n\n    this.validateIndexName(props.indexName);\n\n    // build key schema and projection for index\n    const lsiKeySchema = this.buildIndexKeySchema(this.tablePartitionKey, props.sortKey);\n    const lsiProjection = this.buildIndexProjection(props);\n\n    this.localSecondaryIndexes.push({\n      indexName: props.indexName,\n      keySchema: lsiKeySchema,\n      projection: lsiProjection,\n    });\n\n    this.secondaryIndexSchemas.set(props.indexName, {\n      partitionKey: this.tablePartitionKey,\n      sortKey: props.sortKey,\n    });\n  }\n\n  /**\n   * Enable read capacity scaling for this table\n   *\n   * @returns An object to configure additional AutoScaling settings\n   */\n  public autoScaleReadCapacity(props: EnableScalingProps): IScalableTableAttribute {\n    if (this.tableScaling.scalableReadAttribute) {\n      throw new Error('Read AutoScaling already enabled for this table');\n    }\n    if (this.billingMode === BillingMode.PAY_PER_REQUEST) {\n      throw new Error('AutoScaling is not available for tables with PAY_PER_REQUEST billing mode');\n    }\n\n    return this.tableScaling.scalableReadAttribute = new ScalableTableAttribute(this, 'ReadScaling', {\n      serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,\n      resourceId: `table/${this.tableName}`,\n      dimension: 'dynamodb:table:ReadCapacityUnits',\n      role: this.scalingRole,\n      ...props,\n    });\n  }\n\n  /**\n   * Enable write capacity scaling for this table\n   *\n   * @returns An object to configure additional AutoScaling settings for this attribute\n   */\n  public autoScaleWriteCapacity(props: EnableScalingProps): IScalableTableAttribute {\n    if (this.tableScaling.scalableWriteAttribute) {\n      throw new Error('Write AutoScaling already enabled for this table');\n    }\n    if (this.billingMode === BillingMode.PAY_PER_REQUEST) {\n      throw new Error('AutoScaling is not available for tables with PAY_PER_REQUEST billing mode');\n    }\n\n    this.tableScaling.scalableWriteAttribute = new ScalableTableAttribute(this, 'WriteScaling', {\n      serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,\n      resourceId: `table/${this.tableName}`,\n      dimension: 'dynamodb:table:WriteCapacityUnits',\n      role: this.scalingRole,\n      ...props,\n    });\n    for (const globalReplicaCustomResource of this.globalReplicaCustomResources) {\n      globalReplicaCustomResource.node.addDependency(this.tableScaling.scalableWriteAttribute);\n    }\n    return this.tableScaling.scalableWriteAttribute;\n  }\n\n  /**\n   * Enable read capacity scaling for the given GSI\n   *\n   * @returns An object to configure additional AutoScaling settings for this attribute\n   */\n  public autoScaleGlobalSecondaryIndexReadCapacity(indexName: string, props: EnableScalingProps): IScalableTableAttribute {\n    if (this.billingMode === BillingMode.PAY_PER_REQUEST) {\n      throw new Error('AutoScaling is not available for tables with PAY_PER_REQUEST billing mode');\n    }\n    const attributePair = this.indexScaling.get(indexName);\n    if (!attributePair) {\n      throw new Error(`No global secondary index with name ${indexName}`);\n    }\n    if (attributePair.scalableReadAttribute) {\n      throw new Error('Read AutoScaling already enabled for this index');\n    }\n\n    return attributePair.scalableReadAttribute = new ScalableTableAttribute(this, `${indexName}ReadScaling`, {\n      serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,\n      resourceId: `table/${this.tableName}/index/${indexName}`,\n      dimension: 'dynamodb:index:ReadCapacityUnits',\n      role: this.scalingRole,\n      ...props,\n    });\n  }\n\n  /**\n   * Enable write capacity scaling for the given GSI\n   *\n   * @returns An object to configure additional AutoScaling settings for this attribute\n   */\n  public autoScaleGlobalSecondaryIndexWriteCapacity(indexName: string, props: EnableScalingProps): IScalableTableAttribute {\n    if (this.billingMode === BillingMode.PAY_PER_REQUEST) {\n      throw new Error('AutoScaling is not available for tables with PAY_PER_REQUEST billing mode');\n    }\n    const attributePair = this.indexScaling.get(indexName);\n    if (!attributePair) {\n      throw new Error(`No global secondary index with name ${indexName}`);\n    }\n    if (attributePair.scalableWriteAttribute) {\n      throw new Error('Write AutoScaling already enabled for this index');\n    }\n\n    return attributePair.scalableWriteAttribute = new ScalableTableAttribute(this, `${indexName}WriteScaling`, {\n      serviceNamespace: appscaling.ServiceNamespace.DYNAMODB,\n      resourceId: `table/${this.tableName}/index/${indexName}`,\n      dimension: 'dynamodb:index:WriteCapacityUnits',\n      role: this.scalingRole,\n      ...props,\n    });\n  }\n\n  /**\n   * Get schema attributes of table or index.\n   *\n   * @returns Schema of table or index.\n   */\n  public schema(indexName?: string): SchemaOptions {\n    if (!indexName) {\n      return {\n        partitionKey: this.tablePartitionKey,\n        sortKey: this.tableSortKey,\n      };\n    }\n    let schema = this.secondaryIndexSchemas.get(indexName);\n    if (!schema) {\n      throw new Error(`Cannot find schema for index: ${indexName}. Use 'addGlobalSecondaryIndex' or 'addLocalSecondaryIndex' to add index`);\n    }\n    return schema;\n  }\n\n  /**\n   * Validate the table construct.\n   *\n   * @returns an array of validation error message\n   */\n  private validateTable(): string[] {\n    const errors = new Array<string>();\n\n    if (!this.tablePartitionKey) {\n      errors.push('a partition key must be specified');\n    }\n    if (this.localSecondaryIndexes.length > 0 && !this.tableSortKey) {\n      errors.push('a sort key of the table must be specified to add local secondary indexes');\n    }\n\n    if (this.globalReplicaCustomResources.length > 0 && this.billingMode === BillingMode.PROVISIONED) {\n      const writeAutoScaleAttribute = this.tableScaling.scalableWriteAttribute;\n      if (!writeAutoScaleAttribute) {\n        errors.push('A global Table that uses PROVISIONED as the billing mode needs auto-scaled write capacity. ' +\n          'Use the autoScaleWriteCapacity() method to enable it.');\n      } else if (!writeAutoScaleAttribute._scalingPolicyCreated) {\n        errors.push('A global Table that uses PROVISIONED as the billing mode needs auto-scaled write capacity with a policy. ' +\n          'Call one of the scaleOn*() methods of the object returned from autoScaleWriteCapacity()');\n      }\n    }\n\n    return errors;\n  }\n\n  /**\n   * Validate read and write capacity are not specified for on-demand tables (billing mode PAY_PER_REQUEST).\n   *\n   * @param props read and write capacity properties\n   */\n  private validateProvisioning(props: { readCapacity?: number, writeCapacity?: number }): void {\n    if (this.billingMode === BillingMode.PAY_PER_REQUEST) {\n      if (props.readCapacity !== undefined || props.writeCapacity !== undefined) {\n        throw new Error('you cannot provision read and write capacity for a table with PAY_PER_REQUEST billing mode');\n      }\n    }\n  }\n\n  /**\n   * Validate index name to check if a duplicate name already exists.\n   *\n   * @param indexName a name of global or local secondary index\n   */\n  private validateIndexName(indexName: string) {\n    if (this.secondaryIndexSchemas.has(indexName)) {\n      // a duplicate index name causes validation exception, status code 400, while trying to create CFN stack\n      throw new Error(`a duplicate index name, ${indexName}, is not allowed`);\n    }\n  }\n\n  /**\n   * Validate non-key attributes by checking limits within secondary index, which may vary in future.\n   *\n   * @param nonKeyAttributes a list of non-key attribute names\n   */\n  private validateNonKeyAttributes(nonKeyAttributes: string[]) {\n    if (this.nonKeyAttributes.size + nonKeyAttributes.length > 100) {\n      // https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html#limits-secondary-indexes\n      throw new RangeError('a maximum number of nonKeyAttributes across all of secondary indexes is 100');\n    }\n\n    // store all non-key attributes\n    nonKeyAttributes.forEach(att => this.nonKeyAttributes.add(att));\n  }\n\n  private buildIndexKeySchema(partitionKey: Attribute, sortKey?: Attribute): CfnTable.KeySchemaProperty[] {\n    this.registerAttribute(partitionKey);\n    const indexKeySchema: CfnTable.KeySchemaProperty[] = [\n      { attributeName: partitionKey.name, keyType: HASH_KEY_TYPE },\n    ];\n\n    if (sortKey) {\n      this.registerAttribute(sortKey);\n      indexKeySchema.push({ attributeName: sortKey.name, keyType: RANGE_KEY_TYPE });\n    }\n\n    return indexKeySchema;\n  }\n\n  private buildIndexProjection(props: SecondaryIndexProps): CfnTable.ProjectionProperty {\n    if (props.projectionType === ProjectionType.INCLUDE && !props.nonKeyAttributes) {\n      // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-projectionobject.html\n      throw new Error(`non-key attributes should be specified when using ${ProjectionType.INCLUDE} projection type`);\n    }\n\n    if (props.projectionType !== ProjectionType.INCLUDE && props.nonKeyAttributes) {\n      // this combination causes validation exception, status code 400, while trying to create CFN stack\n      throw new Error(`non-key attributes should not be specified when not using ${ProjectionType.INCLUDE} projection type`);\n    }\n\n    if (props.nonKeyAttributes) {\n      this.validateNonKeyAttributes(props.nonKeyAttributes);\n    }\n\n    return {\n      projectionType: props.projectionType ?? ProjectionType.ALL,\n      nonKeyAttributes: props.nonKeyAttributes ?? undefined,\n    };\n  }\n\n  private findKey(keyType: string) {\n    return this.keySchema.find(prop => prop.keyType === keyType);\n  }\n\n  private addKey(attribute: Attribute, keyType: string) {\n    const existingProp = this.findKey(keyType);\n    if (existingProp) {\n      throw new Error(`Unable to set ${attribute.name} as a ${keyType} key, because ${existingProp.attributeName} is a ${keyType} key`);\n    }\n    this.registerAttribute(attribute);\n    this.keySchema.push({\n      attributeName: attribute.name,\n      keyType,\n    });\n    return this;\n  }\n\n  /**\n   * Register the key attribute of table or secondary index to assemble attribute definitions of TableResourceProps.\n   *\n   * @param attribute the key attribute of table or secondary index\n   */\n  private registerAttribute(attribute: Attribute) {\n    const { name, type } = attribute;\n    const existingDef = this.attributeDefinitions.find(def => def.attributeName === name);\n    if (existingDef && existingDef.attributeType !== type) {\n      throw new Error(`Unable to specify ${name} as ${type} because it was already defined as ${existingDef.attributeType}`);\n    }\n    if (!existingDef) {\n      this.attributeDefinitions.push({\n        attributeName: name,\n        attributeType: type,\n      });\n    }\n  }\n\n  /**\n   * Return the role that will be used for AutoScaling\n   */\n  private makeScalingRole(): iam.IRole {\n    // Use a Service Linked Role.\n    // https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-service-linked-roles.html\n    return iam.Role.fromRoleArn(this, 'ScalingRole', Stack.of(this).formatArn({\n      service: 'iam',\n      region: '',\n      resource: 'role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com',\n      resourceName: 'AWSServiceRoleForApplicationAutoScaling_DynamoDBTable',\n    }));\n  }\n\n  /**\n   * Creates replica tables\n   *\n   * @param regions regions where to create tables\n   */\n  private createReplicaTables(regions: string[], timeout?: Duration, waitForReplicationToFinish?: boolean) {\n    const stack = Stack.of(this);\n\n    if (!Token.isUnresolved(stack.region) && regions.includes(stack.region)) {\n      throw new Error('`replicationRegions` cannot include the region where this stack is deployed.');\n    }\n\n    const provider = ReplicaProvider.getOrCreate(this, { timeout });\n\n    // Documentation at https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/V2gt_IAM.html\n    // is currently incorrect. AWS Support recommends `dynamodb:*` in both source and destination regions\n\n    const onEventHandlerPolicy = new SourceTableAttachedPolicy(this, provider.onEventHandler.role!);\n    const isCompleteHandlerPolicy = new SourceTableAttachedPolicy(this, provider.isCompleteHandler.role!);\n\n    // Permissions in the source region\n    this.grant(onEventHandlerPolicy, 'dynamodb:*');\n    this.grant(isCompleteHandlerPolicy, 'dynamodb:DescribeTable');\n\n    let previousRegion: CustomResource | undefined;\n    let previousRegionCondition: CfnCondition | undefined;\n    for (const region of new Set(regions)) { // Remove duplicates\n      // Use multiple custom resources because multiple create/delete\n      // updates cannot be combined in a single API call.\n      const currentRegion = new CustomResource(this, `Replica${region}`, {\n        serviceToken: provider.provider.serviceToken,\n        resourceType: 'Custom::DynamoDBReplica',\n        properties: {\n          TableName: this.tableName,\n          Region: region,\n          SkipReplicationCompletedWait: waitForReplicationToFinish == null\n            ? undefined\n            // CFN changes Custom Resource properties to strings anyways,\n            // so let's do that ourselves to make it clear in the handler this is a string, not a boolean\n            : (!waitForReplicationToFinish).toString(),\n        },\n      });\n      currentRegion.node.addDependency(\n        onEventHandlerPolicy.policy,\n        isCompleteHandlerPolicy.policy,\n      );\n      this.globalReplicaCustomResources.push(currentRegion);\n\n      // Deploy time check to prevent from creating a replica in the region\n      // where this stack is deployed. Only needed for environment agnostic\n      // stacks.\n      let createReplica: CfnCondition | undefined;\n      if (Token.isUnresolved(stack.region)) {\n        createReplica = new CfnCondition(this, `StackRegionNotEquals${region}`, {\n          expression: Fn.conditionNot(Fn.conditionEquals(region, Aws.REGION)),\n        });\n        const cfnCustomResource = currentRegion.node.defaultChild as CfnCustomResource;\n        cfnCustomResource.cfnOptions.condition = createReplica;\n      }\n\n      // Save regional arns for grantXxx() methods\n      this.regionalArns.push(stack.formatArn({\n        region,\n        service: 'dynamodb',\n        resource: 'table',\n        resourceName: this.tableName,\n      }));\n\n      // We need to create/delete regions sequentially because we cannot\n      // have multiple table updates at the same time. The `isCompleteHandler`\n      // of the provider waits until the replica is in an ACTIVE state.\n      if (previousRegion) {\n        if (previousRegionCondition) {\n          // we can't simply use a Dependency,\n          // because the previousRegion is protected by the \"different region\" Condition,\n          // and you can't have Fn::If in DependsOn.\n          // Instead, rely on Ref adding a dependency implicitly!\n          const previousRegionCfnResource = previousRegion.node.defaultChild as CfnResource;\n          const currentRegionCfnResource = currentRegion.node.defaultChild as CfnResource;\n          currentRegionCfnResource.addMetadata('DynamoDbReplicationDependency',\n            Fn.conditionIf(previousRegionCondition.logicalId, previousRegionCfnResource.ref, Aws.NO_VALUE));\n        } else {\n          currentRegion.node.addDependency(previousRegion);\n        }\n      }\n\n      previousRegion = currentRegion;\n      previousRegionCondition = createReplica;\n    }\n\n    // Permissions in the destination regions (outside of the loop to\n    // minimize statements in the policy)\n    onEventHandlerPolicy.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n      actions: ['dynamodb:*'],\n      resources: this.regionalArns,\n    }));\n  }\n\n  /**\n   * Whether this table has indexes\n   */\n  protected get hasIndex(): boolean {\n    return this.globalSecondaryIndexes.length + this.localSecondaryIndexes.length > 0;\n  }\n\n  /**\n   * Set up key properties and return the Table encryption property from the\n   * user's configuration.\n   */\n  private parseEncryption(props: TableProps): { sseSpecification: CfnTableProps['sseSpecification'], encryptionKey?: kms.IKey } {\n    let encryptionType = props.encryption;\n\n    if (encryptionType != null && props.serverSideEncryption != null) {\n      throw new Error('Only one of encryption and serverSideEncryption can be specified, but both were provided');\n    }\n\n    if (props.serverSideEncryption && props.encryptionKey) {\n      throw new Error('encryptionKey cannot be specified when serverSideEncryption is specified. Use encryption instead');\n    }\n\n    if (encryptionType === undefined) {\n      encryptionType = props.encryptionKey != null\n        // If there is a configured encryptionKey, the encryption is implicitly CUSTOMER_MANAGED\n        ? TableEncryption.CUSTOMER_MANAGED\n        // Otherwise, if severSideEncryption is enabled, it's AWS_MANAGED; else undefined (do not set anything)\n        : props.serverSideEncryption ? TableEncryption.AWS_MANAGED : undefined;\n    }\n\n    if (encryptionType !== TableEncryption.CUSTOMER_MANAGED && props.encryptionKey) {\n      throw new Error('`encryptionKey cannot be specified unless encryption is set to TableEncryption.CUSTOMER_MANAGED (it was set to ${encryptionType})`');\n    }\n\n    if (encryptionType === TableEncryption.CUSTOMER_MANAGED && props.replicationRegions) {\n      throw new Error('TableEncryption.CUSTOMER_MANAGED is not supported by DynamoDB Global Tables (where replicationRegions was set)');\n    }\n\n    switch (encryptionType) {\n      case TableEncryption.CUSTOMER_MANAGED:\n        const encryptionKey = props.encryptionKey ?? new kms.Key(this, 'Key', {\n          description: `Customer-managed key auto-created for encrypting DynamoDB table at ${this.node.path}`,\n          enableKeyRotation: true,\n        });\n\n        return {\n          sseSpecification: { sseEnabled: true, kmsMasterKeyId: encryptionKey.keyArn, sseType: 'KMS' },\n          encryptionKey,\n        };\n\n      case TableEncryption.AWS_MANAGED:\n        // Not specifying \"sseType: 'KMS'\" here because it would cause phony changes to existing stacks.\n        return { sseSpecification: { sseEnabled: true } };\n\n      case TableEncryption.DEFAULT:\n        return { sseSpecification: { sseEnabled: false } };\n\n      case undefined:\n        // Not specifying \"sseEnabled: false\" here because it would cause phony changes to existing stacks.\n        return { sseSpecification: undefined };\n\n      default:\n        throw new Error(`Unexpected 'encryptionType': ${encryptionType}`);\n    }\n  }\n}\n\n/**\n * Data types for attributes within a table\n *\n * @see https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\n */\nexport enum AttributeType {\n  /** Up to 400KiB of binary data (which must be encoded as base64 before sending to DynamoDB) */\n  BINARY = 'B',\n  /** Numeric values made of up to 38 digits (positive, negative or zero) */\n  NUMBER = 'N',\n  /** Up to 400KiB of UTF-8 encoded text */\n  STRING = 'S',\n}\n\n/**\n * DynamoDB's Read/Write capacity modes.\n */\nexport enum BillingMode {\n  /**\n   * Pay only for what you use. You don't configure Read/Write capacity units.\n   */\n  PAY_PER_REQUEST = 'PAY_PER_REQUEST',\n  /**\n   * Explicitly specified Read/Write capacity units.\n   */\n  PROVISIONED = 'PROVISIONED',\n}\n\n/**\n * The set of attributes that are projected into the index\n *\n * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Projection.html\n */\nexport enum ProjectionType {\n  /** Only the index and primary keys are projected into the index. */\n  KEYS_ONLY = 'KEYS_ONLY',\n  /** Only the specified table attributes are projected into the index. The list of projected attributes is in `nonKeyAttributes`. */\n  INCLUDE = 'INCLUDE',\n  /** All of the table attributes are projected into the index. */\n  ALL = 'ALL'\n}\n\n/**\n * When an item in the table is modified, StreamViewType determines what information\n * is written to the stream for this table.\n *\n * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_StreamSpecification.html\n */\nexport enum StreamViewType {\n  /** The entire item, as it appears after it was modified, is written to the stream. */\n  NEW_IMAGE = 'NEW_IMAGE',\n  /** The entire item, as it appeared before it was modified, is written to the stream. */\n  OLD_IMAGE = 'OLD_IMAGE',\n  /** Both the new and the old item images of the item are written to the stream. */\n  NEW_AND_OLD_IMAGES = 'NEW_AND_OLD_IMAGES',\n  /** Only the key attributes of the modified item are written to the stream. */\n  KEYS_ONLY = 'KEYS_ONLY'\n}\n\n/**\n * DynamoDB's table class.\n *\n * @see https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.TableClasses.html\n */\nexport enum TableClass {\n  /** Default table class for DynamoDB. */\n  STANDARD = 'STANDARD',\n\n  /** Table class for DynamoDB that reduces storage costs compared to existing DynamoDB Standard tables. */\n  STANDARD_INFREQUENT_ACCESS = 'STANDARD_INFREQUENT_ACCESS',\n}\n\n/**\n * Just a convenient way to keep track of both attributes\n */\ninterface ScalableAttributePair {\n  scalableReadAttribute?: ScalableTableAttribute;\n  scalableWriteAttribute?: ScalableTableAttribute;\n}\n\n/**\n * An inline policy that is logically bound to the source table of a DynamoDB Global Tables\n * \"cluster\". This is here to ensure permissions are removed as part of (and not before) the\n * CleanUp phase of a stack update, when a replica is removed (or the entire \"cluster\" gets\n * replaced).\n *\n * If statements are added directly to the handler roles (as opposed to in a separate inline\n * policy resource), new permissions are in effect before clean up happens, and so replicas that\n * need to be dropped can no longer be due to lack of permissions.\n */\nclass SourceTableAttachedPolicy extends Construct implements iam.IGrantable {\n  public readonly grantPrincipal: iam.IPrincipal;\n  public readonly policy: iam.IManagedPolicy;\n\n  public constructor(sourceTable: Table, role: iam.IRole) {\n    super(sourceTable, `SourceTableAttachedManagedPolicy-${Names.nodeUniqueId(role.node)}`);\n\n    const policy = new iam.ManagedPolicy(this, 'Resource', {\n      // A CF update of the description property of a managed policy requires\n      // a replacement. Use the table name in the description to force a managed\n      // policy replacement when the table name changes. This way we preserve permissions\n      // to delete old replicas in case of a table replacement.\n      description: `DynamoDB replication managed policy for table ${sourceTable.tableName}`,\n      roles: [role],\n    });\n    this.policy = policy;\n    this.grantPrincipal = new SourceTableAttachedPrincipal(role, policy);\n  }\n}\n\n/**\n * An `IPrincipal` entity that can be used as the target of `grant` calls, used by the\n * `SourceTableAttachedPolicy` class so it can act as an `IGrantable`.\n */\nclass SourceTableAttachedPrincipal extends iam.PrincipalBase {\n  public constructor(private readonly role: iam.IRole, private readonly policy: iam.ManagedPolicy) {\n    super();\n  }\n\n  public get policyFragment(): iam.PrincipalPolicyFragment {\n    return this.role.policyFragment;\n  }\n\n  public addToPrincipalPolicy(statement: iam.PolicyStatement): iam.AddToPrincipalPolicyResult {\n    this.policy.addStatements(statement);\n    return {\n      policyDependable: this.policy,\n      statementAdded: true,\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
