{
  "version": 3,
  "sources": ["replica-provider.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport * as lambda from '../../aws-lambda';\nimport { Duration, NestedStack, Stack } from '../../core';\nimport * as cr from '../../custom-resources';\nimport { Construct } from 'constructs';\n\n/**\n * Properties for a ReplicaProvider\n */\nexport interface ReplicaProviderProps {\n  /**\n   * The timeout for the replication operation.\n   *\n   * @default Duration.minutes(30)\n   */\n  readonly timeout?: Duration;\n}\n\nexport class ReplicaProvider extends NestedStack {\n  /**\n   * Creates a stack-singleton resource provider nested stack.\n   */\n  public static getOrCreate(scope: Construct, props: ReplicaProviderProps = {}) {\n    const stack = Stack.of(scope);\n    const uid = '@aws-cdk/aws-dynamodb.ReplicaProvider';\n    return stack.node.tryFindChild(uid) as ReplicaProvider ?? new ReplicaProvider(stack, uid, props);\n  }\n\n  /**\n   * The custom resource provider.\n   */\n  public readonly provider: cr.Provider;\n\n  /**\n   * The onEvent handler\n   */\n  public readonly onEventHandler: lambda.Function;\n\n  /**\n   * The isComplete handler\n   */\n  public readonly isCompleteHandler: lambda.Function;\n\n  private constructor(scope: Construct, id: string, props: ReplicaProviderProps = {}) {\n    super(scope, id);\n\n    const code = lambda.Code.fromAsset(path.join(__dirname, 'replica-handler'));\n\n    // Issues UpdateTable API calls\n    this.onEventHandler = new lambda.Function(this, 'OnEventHandler', {\n      code,\n      runtime: lambda.Runtime.NODEJS_12_X,\n      handler: 'index.onEventHandler',\n      timeout: Duration.minutes(5),\n    });\n\n    // Checks if table is back to `ACTIVE` state\n    this.isCompleteHandler = new lambda.Function(this, 'IsCompleteHandler', {\n      code,\n      runtime: lambda.Runtime.NODEJS_12_X,\n      handler: 'index.isCompleteHandler',\n      timeout: Duration.seconds(30),\n    });\n\n    // Allows the creation of the `AWSServiceRoleForDynamoDBReplication` service linked role\n    this.onEventHandler.addToRolePolicy(\n      new iam.PolicyStatement({\n        actions: ['iam:CreateServiceLinkedRole'],\n        resources: [Stack.of(this).formatArn({\n          service: 'iam',\n          region: '', // IAM is region-less\n          resource: 'role',\n          resourceName: 'aws-service-role/replication.dynamodb.amazonaws.com/AWSServiceRoleForDynamoDBReplication',\n        })],\n      }),\n    );\n\n    // Required for replica table creation\n    this.onEventHandler.addToRolePolicy(\n      new iam.PolicyStatement({\n        actions: ['dynamodb:DescribeLimits'],\n        resources: ['*'],\n      }),\n    );\n\n    this.provider = new cr.Provider(this, 'Provider', {\n      onEventHandler: this.onEventHandler,\n      isCompleteHandler: this.isCompleteHandler,\n      queryInterval: Duration.seconds(10),\n      totalTimeout: props.timeout,\n    });\n  }\n}\n"],
  "mappings": "mGAAA,KAAA,MAAA,QAAA,MAAA,EACA,IAAA,QAAA,eAAA,EACA,OAAA,QAAA,kBAAA,EACA,OAAA,QAAA,YAAA,EACA,GAAA,QAAA,wBAAA,EAeA,MAAa,uBAAwB,QAAA,WAAW,CAyB9C,YAAoB,MAAkB,GAAY,MAA8B,CAAA,EAAE,CAChF,MAAM,MAAO,EAAE,EAEf,KAAM,MAAO,OAAO,KAAK,UAAU,KAAK,KAAK,UAAW,iBAAiB,CAAC,EAG1E,KAAK,eAAiB,GAAI,QAAO,SAAS,KAAM,iBAAkB,CAChE,KACA,QAAS,OAAO,QAAQ,YACxB,QAAS,uBACT,QAAS,OAAA,SAAS,QAAQ,CAAC,EAC5B,EAGD,KAAK,kBAAoB,GAAI,QAAO,SAAS,KAAM,oBAAqB,CACtE,KACA,QAAS,OAAO,QAAQ,YACxB,QAAS,0BACT,QAAS,OAAA,SAAS,QAAQ,EAAE,EAC7B,EAGD,KAAK,eAAe,gBAClB,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,6BAA6B,EACvC,UAAW,CAAC,OAAA,MAAM,GAAG,IAAI,EAAE,UAAU,CACnC,QAAS,MACT,OAAQ,GACR,SAAU,OACV,aAAc,2FACf,CAAC,EACH,CAAC,EAIJ,KAAK,eAAe,gBAClB,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,yBAAyB,EACnC,UAAW,CAAC,GAAG,EAChB,CAAC,EAGJ,KAAK,SAAW,GAAI,IAAG,SAAS,KAAM,WAAY,CAChD,eAAgB,KAAK,eACrB,kBAAmB,KAAK,kBACxB,cAAe,OAAA,SAAS,QAAQ,EAAE,EAClC,aAAc,MAAM,QACrB,QApEW,aAAY,MAAkB,MAA8B,CAAA,EAAE,QAC1E,KAAM,OAAQ,OAAA,MAAM,GAAG,KAAK,EACtB,IAAM,wCACZ,MAAA,IAAO,MAAM,KAAK,aAAa,GAAG,KAAoB,MAAA,KAAA,OAAA,GAAI,GAAI,iBAAgB,MAAO,IAAK,KAAK,GAPnG,QAAA,gBAAA",
  "names": []
}
