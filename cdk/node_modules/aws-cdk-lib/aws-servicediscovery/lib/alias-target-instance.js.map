{
  "version": 3,
  "sources": ["alias-target-instance.ts"],
  "sourcesContent": ["import { Names } from '../../core';\nimport { Construct } from 'constructs';\nimport { BaseInstanceProps, InstanceBase } from './instance';\nimport { NamespaceType } from './namespace';\nimport { DnsRecordType, IService, RoutingPolicy } from './service';\nimport { CfnInstance } from './servicediscovery.generated';\n\n/*\n * Properties for an AliasTargetInstance\n */\nexport interface AliasTargetInstanceProps extends BaseInstanceProps {\n  /**\n   * DNS name of the target\n   */\n  readonly dnsName: string;\n\n  /**\n   * The Cloudmap service this resource is registered to.\n   */\n  readonly service: IService;\n}\n\n/**\n * Instance that uses Route 53 Alias record type. Currently, the only resource types supported are Elastic Load\n * Balancers.\n *\n * @resource AWS::ServiceDiscovery::Instance\n */\nexport class AliasTargetInstance extends InstanceBase {\n  /**\n   * The Id of the instance\n   */\n  public readonly instanceId: string;\n\n  /**\n   * The Cloudmap service to which the instance is registered.\n   */\n  public readonly service: IService;\n\n  /**\n   * The Route53 DNS name of the alias target\n   */\n  public readonly dnsName: string;\n\n  constructor(scope: Construct, id: string, props: AliasTargetInstanceProps) {\n    super(scope, id);\n\n    if (props.service.namespace.type === NamespaceType.HTTP) {\n      throw new Error('Namespace associated with Service must be a DNS Namespace.');\n    }\n\n    // Should already be enforced when creating service, but validates if service is not instantiated with #createService\n    const dnsRecordType = props.service.dnsRecordType;\n    if (dnsRecordType !== DnsRecordType.A\n      && dnsRecordType !== DnsRecordType.AAAA\n      && dnsRecordType !== DnsRecordType.A_AAAA) {\n      throw new Error('Service must use `A` or `AAAA` records to register an AliasRecordTarget.');\n    }\n\n    if (props.service.routingPolicy !== RoutingPolicy.WEIGHTED) {\n      throw new Error('Service must use `WEIGHTED` routing policy.');\n    }\n\n    const resource = new CfnInstance(this, 'Resource', {\n      instanceAttributes: {\n        AWS_ALIAS_DNS_NAME: props.dnsName,\n        ...props.customAttributes,\n      },\n      instanceId: props.instanceId || Names.uniqueId(this),\n      serviceId: props.service.serviceId,\n    });\n\n    this.service = props.service;\n    this.instanceId = resource.ref;\n    this.dnsName = props.dnsName;\n  }\n}\n"],
  "mappings": "0NAAA,OAAA,QAAA,YAAA,EAEA,WAAA,QAAA,YAAA,EACA,YAAA,QAAA,aAAA,EACA,UAAA,QAAA,WAAA,EACA,6BAAA,QAAA,8BAAA,EAuBA,MAAa,2BAA4B,YAAA,YAAY,CAgBnD,YAAY,MAAkB,GAAY,MAA+B,CACvE,MAAM,MAAO,EAAE,EAEf,4FAAI,MAAM,QAAQ,UAAU,OAAS,YAAA,cAAc,KACjD,KAAM,IAAI,OAAM,4DAA4D,EAI9E,KAAM,eAAgB,MAAM,QAAQ,cACpC,GAAI,gBAAkB,UAAA,cAAc,GAC/B,gBAAkB,UAAA,cAAc,MAChC,gBAAkB,UAAA,cAAc,OACnC,KAAM,IAAI,OAAM,0EAA0E,EAG5F,GAAI,MAAM,QAAQ,gBAAkB,UAAA,cAAc,SAChD,KAAM,IAAI,OAAM,6CAA6C,EAG/D,KAAM,UAAW,GAAI,8BAAA,YAAY,KAAM,WAAY,CACjD,mBAAoB,CAClB,mBAAoB,MAAM,WACvB,MAAM,kBAEX,WAAY,MAAM,YAAc,OAAA,MAAM,SAAS,IAAI,EACnD,UAAW,MAAM,QAAQ,UAC1B,EAED,KAAK,QAAU,MAAM,QACrB,KAAK,WAAa,SAAS,IAC3B,KAAK,QAAU,MAAM,SA9CzB,QAAA,oBAAA",
  "names": []
}
