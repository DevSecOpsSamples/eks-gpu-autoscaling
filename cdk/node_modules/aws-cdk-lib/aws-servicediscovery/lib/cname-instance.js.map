{
  "version": 3,
  "sources": ["cname-instance.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { BaseInstanceProps, InstanceBase } from './instance';\nimport { NamespaceType } from './namespace';\nimport { DnsRecordType, IService } from './service';\nimport { CfnInstance } from './servicediscovery.generated';\n\n/*\n * Properties for a CnameInstance used for service#registerCnameInstance\n */\nexport interface CnameInstanceBaseProps extends BaseInstanceProps {\n  /**\n   * If the service configuration includes a CNAME record, the domain name that you want Route 53 to\n   * return in response to DNS queries, for example, example.com. This value is required if the\n   * service specified by ServiceId includes settings for an CNAME record.\n   */\n  readonly instanceCname: string;\n}\n\n/*\n * Properties for a CnameInstance\n */\nexport interface CnameInstanceProps extends CnameInstanceBaseProps {\n  /**\n   * The Cloudmap service this resource is registered to.\n   */\n  readonly service: IService;\n}\n\n/**\n * Instance that is accessible using a domain name (CNAME).\n * @resource AWS::ServiceDiscovery::Instance\n */\nexport class CnameInstance extends InstanceBase {\n  /**\n   * The Id of the instance\n   */\n  public readonly instanceId: string;\n\n  /**\n   * The Cloudmap service to which the instance is registered.\n   */\n  public readonly service: IService;\n\n  /**\n   * The domain name returned by DNS queries for the instance\n   */\n  public readonly cname: string;\n\n  constructor(scope: Construct, id: string, props: CnameInstanceProps) {\n    super(scope, id);\n\n    if (props.service.namespace.type === NamespaceType.HTTP) {\n      throw new Error('Namespace associated with Service must be a DNS Namespace.');\n    }\n\n    if (props.service.dnsRecordType !== DnsRecordType.CNAME) {\n      throw new Error('A `CnameIntance` can only be used with a service using a `CNAME` record.');\n    }\n\n    const resource = new CfnInstance(this, 'Resource', {\n      instanceId: props.instanceId || this.uniqueInstanceId(),\n      serviceId: props.service.serviceId,\n      instanceAttributes: {\n        AWS_INSTANCE_CNAME: props.instanceCname,\n        ...props.customAttributes,\n      },\n    });\n\n    this.service = props.service;\n    this.instanceId = resource.ref;\n    this.cname = props.instanceCname;\n  }\n}\n"],
  "mappings": "oNACA,WAAA,QAAA,YAAA,EACA,YAAA,QAAA,aAAA,EACA,UAAA,QAAA,WAAA,EACA,6BAAA,QAAA,8BAAA,EA4BA,MAAa,qBAAsB,YAAA,YAAY,CAgB7C,YAAY,MAAkB,GAAY,MAAyB,CACjE,MAAM,MAAO,EAAE,EAEf,sFAAI,MAAM,QAAQ,UAAU,OAAS,YAAA,cAAc,KACjD,KAAM,IAAI,OAAM,4DAA4D,EAG9E,GAAI,MAAM,QAAQ,gBAAkB,UAAA,cAAc,MAChD,KAAM,IAAI,OAAM,0EAA0E,EAG5F,KAAM,UAAW,GAAI,8BAAA,YAAY,KAAM,WAAY,CACjD,WAAY,MAAM,YAAc,KAAK,iBAAgB,EACrD,UAAW,MAAM,QAAQ,UACzB,mBAAoB,CAClB,mBAAoB,MAAM,iBACvB,MAAM,kBAEZ,EAED,KAAK,QAAU,MAAM,QACrB,KAAK,WAAa,SAAS,IAC3B,KAAK,MAAQ,MAAM,eAtCvB,QAAA,cAAA",
  "names": []
}
