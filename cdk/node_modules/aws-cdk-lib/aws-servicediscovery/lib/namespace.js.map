{
  "version": 3,
  "sources": ["namespace.ts"],
  "sourcesContent": ["import { IResource } from '../../core';\n\nexport interface INamespace extends IResource {\n  /**\n   * A name for the Namespace.\n   * @attribute\n   */\n  readonly namespaceName: string;\n\n  /**\n   * Namespace Id for the Namespace.\n   * @attribute\n   */\n  readonly namespaceId: string;\n\n  /**\n   * Namespace ARN for the Namespace.\n   * @attribute\n   */\n  readonly namespaceArn: string;\n\n  /**\n   * Type of Namespace\n   */\n  readonly type: NamespaceType;\n}\n\nexport interface BaseNamespaceProps {\n  /**\n   * A name for the Namespace.\n   */\n  readonly name: string;\n\n  /**\n   * A description of the Namespace.\n   *\n   * @default none\n   */\n  readonly description?: string;\n}\n\nexport enum NamespaceType {\n  /**\n   * Choose this option if you want your application to use only API calls to discover registered instances.\n   */\n  HTTP = 'HTTP',\n\n  /**\n   * Choose this option if you want your application to be able to discover instances using either API calls or using\n   * DNS queries in a VPC.\n   */\n  DNS_PRIVATE = 'DNS_PRIVATE',\n\n  /**\n   * Choose this option if you want your application to be able to discover instances using either API calls or using\n   * public DNS queries. You aren't required to use both methods.\n   */\n  DNS_PUBLIC = 'DNS_PUBLIC',\n}\n"],
  "mappings": "iGAyCA,GAAY,eAAZ,AAAA,UAAY,eAAa,CAIvB,eAAA,KAAA,OAMA,eAAA,YAAA,cAMA,eAAA,WAAA,YACF,GAjBY,cAAA,QAAA,eAAA,SAAA,cAAa,CAAA,EAAA",
  "names": []
}
