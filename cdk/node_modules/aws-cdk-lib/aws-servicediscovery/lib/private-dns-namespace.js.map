{
  "version": 3,
  "sources": ["private-dns-namespace.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { BaseNamespaceProps, INamespace, NamespaceType } from './namespace';\nimport { DnsServiceProps, Service } from './service';\nimport { CfnPrivateDnsNamespace } from './servicediscovery.generated';\n\nexport interface PrivateDnsNamespaceProps extends BaseNamespaceProps {\n  /**\n   * The Amazon VPC that you want to associate the namespace with.\n   */\n  readonly vpc: ec2.IVpc;\n}\n\nexport interface IPrivateDnsNamespace extends INamespace { }\n\nexport interface PrivateDnsNamespaceAttributes {\n  /**\n   * A name for the Namespace.\n   */\n  readonly namespaceName: string;\n\n  /**\n   * Namespace Id for the Namespace.\n   */\n  readonly namespaceId: string;\n\n  /**\n   * Namespace ARN for the Namespace.\n   */\n  readonly namespaceArn: string;\n}\n\n/**\n * Define a Service Discovery HTTP Namespace\n */\nexport class PrivateDnsNamespace extends Resource implements IPrivateDnsNamespace {\n\n  public static fromPrivateDnsNamespaceAttributes(scope: Construct, id: string, attrs: PrivateDnsNamespaceAttributes): IPrivateDnsNamespace {\n    class Import extends Resource implements IPrivateDnsNamespace {\n      public namespaceName = attrs.namespaceName;\n      public namespaceId = attrs.namespaceId;\n      public namespaceArn = attrs.namespaceArn;\n      public type = NamespaceType.DNS_PRIVATE;\n    }\n    return new Import(scope, id);\n  }\n\n  /**\n   * The name of the PrivateDnsNamespace.\n   */\n  public readonly namespaceName: string;\n\n  /**\n   * Namespace Id of the PrivateDnsNamespace.\n   */\n  public readonly namespaceId: string;\n\n  /**\n   * Namespace Arn of the namespace.\n   */\n  public readonly namespaceArn: string;\n\n  /**\n   * Type of the namespace.\n   */\n  public readonly type: NamespaceType;\n\n  constructor(scope: Construct, id: string, props: PrivateDnsNamespaceProps) {\n    super(scope, id);\n    if (props.vpc === undefined) {\n      throw new Error('VPC must be specified for PrivateDNSNamespaces');\n    }\n\n    const ns = new CfnPrivateDnsNamespace(this, 'Resource', {\n      name: props.name,\n      description: props.description,\n      vpc: props.vpc.vpcId,\n    });\n\n    this.namespaceName = props.name;\n    this.namespaceId = ns.attrId;\n    this.namespaceArn = ns.attrArn;\n    this.type = NamespaceType.DNS_PRIVATE;\n  }\n\n  /** @attribute */\n  public get privateDnsNamespaceArn() { return this.namespaceArn; }\n\n  /** @attribute */\n  public get privateDnsNamespaceName() { return this.namespaceName; }\n\n  /** @attribute */\n  public get privateDnsNamespaceId() { return this.namespaceId; }\n\n  /**\n   * Creates a service within the namespace\n   */\n  public createService(id: string, props?: DnsServiceProps): Service {\n    return new Service(this, id, {\n      namespace: this,\n      ...props,\n    });\n  }\n}\n"],
  "mappings": "0NACA,OAAA,QAAA,YAAA,EAEA,YAAA,QAAA,aAAA,EACA,UAAA,QAAA,WAAA,EACA,6BAAA,QAAA,8BAAA,EA+BA,MAAa,2BAA4B,QAAA,QAAQ,CAgC/C,YAAY,MAAkB,GAAY,MAA+B,CACvE,MAAM,MAAO,EAAE,EACf,4FAAI,MAAM,MAAQ,OAChB,KAAM,IAAI,OAAM,gDAAgD,EAGlE,KAAM,IAAK,GAAI,8BAAA,uBAAuB,KAAM,WAAY,CACtD,KAAM,MAAM,KACZ,YAAa,MAAM,YACnB,IAAK,MAAM,IAAI,MAChB,EAED,KAAK,cAAgB,MAAM,KAC3B,KAAK,YAAc,GAAG,OACtB,KAAK,aAAe,GAAG,QACvB,KAAK,KAAO,YAAA,cAAc,kBA7Cd,mCAAkC,MAAkB,GAAY,MAAoC,+FAChH,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACS,KAAA,cAAgB,MAAM,cACtB,KAAA,YAAc,MAAM,YACpB,KAAA,aAAe,MAAM,aACrB,KAAA,KAAO,YAAA,cAAc,WAC9B,EACA,MAAO,IAAI,QAAO,MAAO,EAAE,KA0ClB,yBAAsB,CAAK,MAAO,MAAK,YAAa,IAGpD,0BAAuB,CAAK,MAAO,MAAK,aAAc,IAGtD,wBAAqB,CAAK,MAAO,MAAK,WAAY,CAKtD,cAAc,GAAY,MAAuB,wFAC/C,GAAI,WAAA,QAAQ,KAAM,GAAI,CAC3B,UAAW,QACR,MACJ,GAlEL,QAAA,oBAAA",
  "names": []
}
