{
  "version": 3,
  "sources": ["http-namespace.ts"],
  "sourcesContent": ["import { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { BaseNamespaceProps, INamespace, NamespaceType } from './namespace';\nimport { BaseServiceProps, Service } from './service';\nimport { CfnHttpNamespace } from './servicediscovery.generated';\n\nexport interface HttpNamespaceProps extends BaseNamespaceProps {}\nexport interface IHttpNamespace extends INamespace { }\nexport interface HttpNamespaceAttributes {\n  /**\n   * A name for the Namespace.\n   */\n  readonly namespaceName: string;\n\n  /**\n   * Namespace Id for the Namespace.\n   */\n  readonly namespaceId: string;\n\n  /**\n   * Namespace ARN for the Namespace.\n   */\n  readonly namespaceArn: string;\n}\n\n/**\n * Define an HTTP Namespace\n */\nexport class HttpNamespace extends Resource implements IHttpNamespace {\n\n  public static fromHttpNamespaceAttributes(scope: Construct, id: string, attrs: HttpNamespaceAttributes): IHttpNamespace {\n    class Import extends Resource implements IHttpNamespace {\n      public namespaceName = attrs.namespaceName;\n      public namespaceId = attrs.namespaceId;\n      public namespaceArn = attrs.namespaceArn;\n      public type = NamespaceType.HTTP;\n    }\n    return new Import(scope, id);\n  }\n\n  /**\n   * A name for the namespace.\n   */\n  public readonly namespaceName: string;\n\n  /**\n   * Namespace Id for the namespace.\n   */\n  public readonly namespaceId: string;\n\n  /**\n   * Namespace Arn for the namespace.\n   */\n  public readonly namespaceArn: string;\n\n  /**\n   * Type of the namespace.\n   */\n  public readonly type: NamespaceType;\n\n  constructor(scope: Construct, id: string, props: HttpNamespaceProps) {\n    super(scope, id);\n\n    const ns = new CfnHttpNamespace(this, 'Resource', {\n      name: props.name,\n      description: props.description,\n    });\n\n    this.namespaceName = props.name;\n    this.namespaceId = ns.attrId;\n    this.namespaceArn = ns.attrArn;\n    this.type = NamespaceType.HTTP;\n  }\n\n  /** @attribute */\n  public get httpNamespaceArn() { return this.namespaceArn; }\n\n  /** @attribute */\n  public get httpNamespaceName() { return this.namespaceName; }\n\n  /** @attribute */\n  public get httpNamespaceId() { return this.namespaceId; }\n\n  /**\n   * Creates a service within the namespace\n   */\n  public createService(id: string, props?: BaseServiceProps): Service {\n    return new Service(this, id, {\n      namespace: this,\n      ...props,\n    });\n  }\n}\n"],
  "mappings": "oNAAA,OAAA,QAAA,YAAA,EAEA,YAAA,QAAA,aAAA,EACA,UAAA,QAAA,WAAA,EACA,6BAAA,QAAA,8BAAA,EAwBA,MAAa,qBAAsB,QAAA,QAAQ,CAgCzC,YAAY,MAAkB,GAAY,MAAyB,CACjE,MAAM,MAAO,EAAE,qFAEf,KAAM,IAAK,GAAI,8BAAA,iBAAiB,KAAM,WAAY,CAChD,KAAM,MAAM,KACZ,YAAa,MAAM,YACpB,EAED,KAAK,cAAgB,MAAM,KAC3B,KAAK,YAAc,GAAG,OACtB,KAAK,aAAe,GAAG,QACvB,KAAK,KAAO,YAAA,cAAc,WAzCd,6BAA4B,MAAkB,GAAY,MAA8B,yFACpG,MAAM,cAAe,QAAA,QAAQ,CAA7B,aAAA,qBACS,KAAA,cAAgB,MAAM,cACtB,KAAA,YAAc,MAAM,YACpB,KAAA,aAAe,MAAM,aACrB,KAAA,KAAO,YAAA,cAAc,IAC9B,EACA,MAAO,IAAI,QAAO,MAAO,EAAE,KAsClB,mBAAgB,CAAK,MAAO,MAAK,YAAa,IAG9C,oBAAiB,CAAK,MAAO,MAAK,aAAc,IAGhD,kBAAe,CAAK,MAAO,MAAK,WAAY,CAKhD,cAAc,GAAY,MAAwB,yFAChD,GAAI,WAAA,QAAQ,KAAM,GAAI,CAC3B,UAAW,QACR,MACJ,GA9DL,QAAA,cAAA",
  "names": []
}
