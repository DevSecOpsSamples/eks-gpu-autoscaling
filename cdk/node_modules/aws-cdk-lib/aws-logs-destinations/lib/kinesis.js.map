{
  "version": 3,
  "sources": ["kinesis.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as kinesis from '../../aws-kinesis';\nimport * as logs from '../../aws-logs';\nimport { Construct } from 'constructs';\n\n/**\n * Customize the Kinesis Logs Destination\n */\nexport interface KinesisDestinationProps {\n  /**\n   * The role to assume to write log events to the destination\n   *\n   * @default - A new Role is created\n   */\n  readonly role?: iam.IRole;\n}\n\n/**\n * Use a Kinesis stream as the destination for a log subscription\n */\nexport class KinesisDestination implements logs.ILogSubscriptionDestination {\n  /**\n   * @param stream The Kinesis stream to use as destination\n   * @param props The Kinesis Destination properties\n   *\n   */\n  constructor(private readonly stream: kinesis.IStream, private readonly props: KinesisDestinationProps = {}) {\n  }\n\n  public bind(scope: Construct, _sourceLogGroup: logs.ILogGroup): logs.LogSubscriptionDestinationConfig {\n    // Following example from https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html#DestinationKinesisExample\n    // Create a role to be assumed by CWL that can write to this stream and pass itself.\n    const id = 'CloudWatchLogsCanPutRecords';\n    const role = this.props.role ?? scope.node.tryFindChild(id) as iam.IRole ?? new iam.Role(scope, id, {\n      assumedBy: new iam.ServicePrincipal('logs.amazonaws.com'),\n    });\n    this.stream.grantWrite(role);\n    role.grantPassRole(role);\n    return { arn: this.stream.streamArn, role };\n  }\n}\n"],
  "mappings": "yNAAA,IAAA,QAAA,eAAA,EAoBA,MAAa,kBAAkB,CAM7B,YAA6B,OAA0C,MAAiC,CAAA,EAAE,CAA7E,KAAA,OAAA,OAA0C,KAAA,MAAA,+JAGhE,KAAK,MAAkB,gBAA+B,mFAG3D,KAAM,IAAK,8BACL,KAAI,IAAA,IAAG,KAAK,MAAM,QAAI,MAAA,KAAA,OAAA,GAAI,MAAM,KAAK,aAAa,EAAE,KAAc,MAAA,KAAA,OAAA,GAAI,GAAI,KAAI,KAAK,MAAO,GAAI,CAClG,UAAW,GAAI,KAAI,iBAAiB,oBAAoB,EACzD,EACD,YAAK,OAAO,WAAW,IAAI,EAC3B,KAAK,cAAc,IAAI,EAChB,CAAE,IAAK,KAAK,OAAO,UAAW,IAAI,GAlB7C,QAAA,mBAAA",
  "names": []
}
