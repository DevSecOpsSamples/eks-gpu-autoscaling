{
  "version": 3,
  "sources": ["trigger.ts"],
  "sourcesContent": ["import { join } from 'path';\nimport * as lambda from '../../aws-lambda';\nimport { CustomResource, CustomResourceProvider, CustomResourceProviderRuntime } from '../../core';\nimport { Construct, IConstruct, Node } from 'constructs';\n\n/**\n * Interface for triggers.\n */\nexport interface ITrigger extends IConstruct {\n  /**\n   * Adds trigger dependencies. Execute this trigger only after these construct\n   * scopes have been provisioned.\n   *\n   * @param scopes A list of construct scopes which this trigger will depend on.\n   */\n  executeAfter(...scopes: Construct[]): void;\n\n  /**\n   * Adds this trigger as a dependency on other constructs. This means that this\n   * trigger will get executed *before* the given construct(s).\n   *\n   * @param scopes A list of construct scopes which will take a dependency on\n   * this trigger.\n   */\n  executeBefore(...scopes: Construct[]): void;\n}\n\n/**\n * Options for `Trigger`.\n */\nexport interface TriggerOptions {\n  /**\n   * Adds trigger dependencies. Execute this trigger only after these construct\n   * scopes have been provisioned.\n   *\n   * You can also use `trigger.executeAfter()` to add additional dependencies.\n   *\n   * @default []\n   */\n  readonly executeAfter?: Construct[];\n\n  /**\n   * Adds this trigger as a dependency on other constructs. This means that this\n   * trigger will get executed *before* the given construct(s).\n   *\n   * You can also use `trigger.executeBefore()` to add additional dependants.\n   *\n   * @default []\n   */\n  readonly executeBefore?: Construct[];\n\n  /**\n   * Re-executes the trigger every time the handler changes.\n   *\n   * This implies that the trigger is associated with the `currentVersion` of\n   * the handler, which gets recreated every time the handler or its\n   * configuration is updated.\n   *\n   * @default true\n   */\n  readonly executeOnHandlerChange?: boolean;\n}\n\n/**\n * Props for `Trigger`.\n */\nexport interface TriggerProps extends TriggerOptions {\n  /**\n   * The AWS Lambda function of the handler to execute.\n   */\n  readonly handler: lambda.Function;\n}\n\n/**\n * Triggers an AWS Lambda function during deployment.\n */\nexport class Trigger extends Construct implements ITrigger {\n  constructor(scope: Construct, id: string, props: TriggerProps) {\n    super(scope, id);\n\n    const handlerArn = this.determineHandlerArn(props);\n    const provider = CustomResourceProvider.getOrCreateProvider(this, 'AWSCDK.TriggerCustomResourceProvider', {\n      runtime: CustomResourceProviderRuntime.NODEJS_14_X,\n      codeDirectory: join(__dirname, 'lambda'),\n      policyStatements: [\n        {\n          Effect: 'Allow',\n          Action: ['lambda:InvokeFunction'],\n          Resource: [handlerArn],\n        },\n      ],\n    });\n\n    new CustomResource(this, 'Default', {\n      resourceType: 'Custom::Trigger',\n      serviceToken: provider.serviceToken,\n      properties: {\n        HandlerArn: handlerArn,\n      },\n    });\n\n    this.executeAfter(...props.executeAfter ?? []);\n    this.executeBefore(...props.executeBefore ?? []);\n  }\n\n  public executeAfter(...scopes: Construct[]): void {\n    Node.of(this).addDependency(...scopes);\n  }\n\n  public executeBefore(...scopes: Construct[]): void {\n    for (const s of scopes) {\n      Node.of(s).addDependency(this);\n    }\n  }\n\n  private determineHandlerArn(props: TriggerProps) {\n    return props.handler.currentVersion.functionArn;\n    // const executeOnHandlerChange = props.executeOnHandlerChange ?? true;\n    // if (executeOnHandlerChange) {\n    // }\n\n    // return props.handler.functionArn;\n  }\n}\n\n/**\n * Determines\n */\nexport enum TriggerInvalidation {\n  /**\n   * The trigger will be executed every time the handler (or its configuration)\n   * changes. This is implemented by associated the trigger with the `currentVersion`\n   * of the AWS Lambda function, which gets recreated every time the handler changes.\n   */\n  HANDLER_CHANGE = 'WHEN_FUNCTION_CHANGES',\n}"],
  "mappings": "0OAAA,OAAA,QAAA,MAAA,EAEA,OAAA,QAAA,YAAA,EACA,aAAA,QAAA,YAAA,EAyEA,MAAa,eAAgB,cAAA,SAAS,CACpC,YAAY,MAAkB,GAAY,MAAmB,WAC3D,MAAM,MAAO,EAAE,mEAEf,KAAM,YAAa,KAAK,oBAAoB,KAAK,EAC3C,SAAW,OAAA,uBAAuB,oBAAoB,KAAM,uCAAwC,CACxG,QAAS,OAAA,8BAA8B,YACvC,cAAe,OAAA,KAAK,UAAW,QAAQ,EACvC,iBAAkB,CAChB,CACE,OAAQ,QACR,OAAQ,CAAC,uBAAuB,EAChC,SAAU,CAAC,UAAU,IAG1B,EAED,GAAI,QAAA,eAAe,KAAM,UAAW,CAClC,aAAc,kBACd,aAAc,SAAS,aACvB,WAAY,CACV,WAAY,YAEf,EAED,KAAK,aAAa,GAAA,IAAG,MAAM,gBAAY,MAAA,KAAA,OAAA,GAAI,CAAA,CAAE,EAC7C,KAAK,cAAc,GAAA,IAAG,MAAM,iBAAa,MAAA,KAAA,OAAA,GAAI,CAAA,CAAE,EAG1C,gBAAgB,OAAmB,CACxC,aAAA,KAAK,GAAG,IAAI,EAAE,cAAc,GAAG,MAAM,EAGhC,iBAAiB,OAAmB,CACzC,SAAW,KAAK,QACd,aAAA,KAAK,GAAG,CAAC,EAAE,cAAc,IAAI,EAIzB,oBAAoB,MAAmB,CAC7C,MAAO,OAAM,QAAQ,eAAe,aAxCxC,QAAA,QAAA,gGAoDA,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAM7B,qBAAA,eAAA,uBACF,GAPY,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,CAAA,EAAA",
  "names": []
}
