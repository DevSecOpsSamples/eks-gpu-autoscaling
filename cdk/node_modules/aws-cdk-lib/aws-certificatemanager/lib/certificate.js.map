{
  "version": 3,
  "sources": ["certificate.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport * as route53 from '../../aws-route53';\nimport { IResource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CertificateBase } from './certificate-base';\nimport { CfnCertificate } from './certificatemanager.generated';\nimport { apexDomain } from './util';\n\n/**\n * Represents a certificate in AWS Certificate Manager\n */\nexport interface ICertificate extends IResource {\n  /**\n   * The certificate's ARN\n   *\n   * @attribute\n   */\n  readonly certificateArn: string;\n\n  /**\n   * Return the DaysToExpiry metric for this AWS Certificate Manager\n   * Certificate. By default, this is the minimum value over 1 day.\n   *\n   * This metric is no longer emitted once the certificate has effectively\n   * expired, so alarms configured on this metric should probably treat missing\n   * data as \"breaching\".\n   */\n  metricDaysToExpiry(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n}\n\n/**\n * Properties for your certificate\n */\nexport interface CertificateProps {\n  /**\n   * Fully-qualified domain name to request a certificate for.\n   *\n   * May contain wildcards, such as ``*.domain.com``.\n   */\n  readonly domainName: string;\n\n  /**\n   * Alternative domain names on your certificate.\n   *\n   * Use this to register alternative domain names that represent the same site.\n   *\n   * @default - No additional FQDNs will be included as alternative domain names.\n   */\n  readonly subjectAlternativeNames?: string[];\n\n  /**\n   * What validation domain to use for every requested domain.\n   *\n   * Has to be a superdomain of the requested domain.\n   *\n   * @default - Apex domain is used for every domain that's not overridden.\n   * @deprecated use `validation` instead.\n   */\n  readonly validationDomains?: {[domainName: string]: string};\n\n  /**\n   * Validation method used to assert domain ownership\n   *\n   * @default ValidationMethod.EMAIL\n   * @deprecated use `validation` instead.\n   */\n  readonly validationMethod?: ValidationMethod;\n\n  /**\n   * How to validate this certificate\n   *\n   * @default CertificateValidation.fromEmail()\n   */\n  readonly validation?: CertificateValidation;\n}\n\n/**\n * Properties for certificate validation\n */\nexport interface CertificationValidationProps {\n  /**\n   * Validation method\n   *\n   * @default ValidationMethod.EMAIL\n   */\n  readonly method?: ValidationMethod;\n\n  /**\n   * Hosted zone to use for DNS validation\n   *\n   * @default - use email validation\n   */\n  readonly hostedZone?: route53.IHostedZone;\n\n  /**\n   * A map of hosted zones to use for DNS validation\n   *\n   * @default - use `hostedZone`\n   */\n  readonly hostedZones?: { [domainName: string]: route53.IHostedZone };\n\n  /**\n   * Validation domains to use for email validation\n   *\n   * @default - Apex domain\n   */\n  readonly validationDomains?: { [domainName: string]: string };\n}\n\n/**\n * How to validate a certificate\n */\nexport class CertificateValidation {\n  /**\n   * Validate the certificate with DNS\n   *\n   * IMPORTANT: If `hostedZone` is not specified, DNS records must be added\n   * manually and the stack will not complete creating until the records are\n   * added.\n   *\n   * @param hostedZone the hosted zone where DNS records must be created\n   */\n  public static fromDns(hostedZone?: route53.IHostedZone) {\n    return new CertificateValidation({\n      method: ValidationMethod.DNS,\n      hostedZone,\n    });\n  }\n\n  /**\n   * Validate the certificate with automatically created DNS records in multiple\n   * Amazon Route 53 hosted zones.\n   *\n   * @param hostedZones a map of hosted zones where DNS records must be created\n   * for the domains in the certificate\n   */\n  public static fromDnsMultiZone(hostedZones: { [domainName: string]: route53.IHostedZone }) {\n    return new CertificateValidation({\n      method: ValidationMethod.DNS,\n      hostedZones,\n    });\n  }\n\n  /**\n   * Validate the certificate with Email\n   *\n   * IMPORTANT: if you are creating a certificate as part of your stack, the stack\n   * will not complete creating until you read and follow the instructions in the\n   * email that you will receive.\n   *\n   * ACM will send validation emails to the following addresses:\n   *\n   *  admin@domain.com\n   *  administrator@domain.com\n   *  hostmaster@domain.com\n   *  postmaster@domain.com\n   *  webmaster@domain.com\n   *\n   * For every domain that you register.\n   *\n   * @param validationDomains a map of validation domains to use for domains in the certificate\n   */\n  public static fromEmail(validationDomains?: { [domainName: string]: string }) {\n    return new CertificateValidation({\n      method: ValidationMethod.EMAIL,\n      validationDomains,\n    });\n  }\n\n  /**\n   * The validation method\n   */\n  public readonly method: ValidationMethod;\n\n  /** @param props Certification validation properties */\n  private constructor(public readonly props: CertificationValidationProps) {\n    this.method = props.method ?? ValidationMethod.EMAIL;\n  }\n}\n\n/**\n * A certificate managed by AWS Certificate Manager\n */\nexport class Certificate extends CertificateBase implements ICertificate {\n  /**\n   * Import a certificate\n   */\n  public static fromCertificateArn(scope: Construct, id: string, certificateArn: string): ICertificate {\n    class Import extends CertificateBase {\n      public readonly certificateArn = certificateArn;\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The certificate's ARN\n   */\n  public readonly certificateArn: string;\n\n  constructor(scope: Construct, id: string, props: CertificateProps) {\n    super(scope, id);\n\n    let validation: CertificateValidation;\n    if (props.validation) {\n      validation = props.validation;\n    } else { // Deprecated props\n      if (props.validationMethod === ValidationMethod.DNS) {\n        validation = CertificateValidation.fromDns();\n      } else {\n        validation = CertificateValidation.fromEmail(props.validationDomains);\n      }\n    }\n\n    const allDomainNames = [props.domainName].concat(props.subjectAlternativeNames || []);\n\n    const cert = new CfnCertificate(this, 'Resource', {\n      domainName: props.domainName,\n      subjectAlternativeNames: props.subjectAlternativeNames,\n      domainValidationOptions: renderDomainValidation(validation, allDomainNames),\n      validationMethod: validation.method,\n    });\n\n    this.certificateArn = cert.ref;\n  }\n}\n\n/**\n * Method used to assert ownership of the domain\n */\nexport enum ValidationMethod {\n  /**\n   * Send email to a number of email addresses associated with the domain\n   *\n   * @see https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html\n   */\n  EMAIL = 'EMAIL',\n\n  /**\n   * Validate ownership by adding appropriate DNS records\n   *\n   * @see https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html\n   */\n  DNS = 'DNS',\n}\n\n// eslint-disable-next-line max-len\nfunction renderDomainValidation(validation: CertificateValidation, domainNames: string[]): CfnCertificate.DomainValidationOptionProperty[] | undefined {\n  const domainValidation: CfnCertificate.DomainValidationOptionProperty[] = [];\n\n  switch (validation.method) {\n    case ValidationMethod.DNS:\n      for (const domainName of getUniqueDnsDomainNames(domainNames)) {\n        const hostedZone = validation.props.hostedZones?.[domainName] ?? validation.props.hostedZone;\n        if (hostedZone) {\n          domainValidation.push({ domainName, hostedZoneId: hostedZone.hostedZoneId });\n        }\n      }\n      break;\n    case ValidationMethod.EMAIL:\n      for (const domainName of domainNames) {\n        const validationDomain = validation.props.validationDomains?.[domainName];\n        if (!validationDomain && Token.isUnresolved(domainName)) {\n          throw new Error('When using Tokens for domain names, \\'validationDomains\\' needs to be supplied');\n        }\n        domainValidation.push({ domainName, validationDomain: validationDomain ?? apexDomain(domainName) });\n      }\n      break;\n    default:\n      throw new Error(`Unknown validation method ${validation.method}`);\n  }\n\n  return domainValidation.length !== 0 ? domainValidation : undefined;\n}\n\n/**\n * Removes wildcard domains (*.example.com) where the base domain (example.com) is present.\n * This is because the DNS validation treats them as the same thing, and the automated CloudFormation\n * DNS validation errors out with the duplicate records.\n */\nfunction getUniqueDnsDomainNames(domainNames: string[]) {\n  return domainNames.filter(domain => {\n    return Token.isUnresolved(domain) || !domain.startsWith('*.') || !domainNames.includes(domain.replace('*.', ''));\n  });\n}\n"],
  "mappings": "4QAEA,OAAA,QAAA,YAAA,EAEA,mBAAA,QAAA,oBAAA,EACA,+BAAA,QAAA,gCAAA,EACA,OAAA,QAAA,QAAA,EA0GA,MAAa,qBAAqB,CA+DhC,YAAoC,MAAmC,QAAnC,KAAA,MAAA,MAClC,KAAK,OAAM,IAAG,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,iBAAiB,YAtDnC,SAAQ,WAAgC,gFAC7C,GAAI,uBAAsB,CAC/B,OAAQ,iBAAiB,IACzB,WACD,QAUW,kBAAiB,YAA0D,CACvF,MAAO,IAAI,uBAAsB,CAC/B,OAAQ,iBAAiB,IACzB,YACD,QAsBW,WAAU,kBAAoD,CAC1E,MAAO,IAAI,uBAAsB,CAC/B,OAAQ,iBAAiB,MACzB,kBACD,GAtDL,QAAA,sBAAA,wJAuEA,MAAa,mBAAoB,oBAAA,eAAe,CAiB9C,YAAY,MAAkB,GAAY,MAAuB,CAC/D,MAAM,MAAO,EAAE,qFAEf,GAAI,YACJ,AAAI,MAAM,WACR,WAAa,MAAM,WAEnB,AAAI,MAAM,mBAAqB,iBAAiB,IAC9C,WAAa,sBAAsB,QAAO,EAE1C,WAAa,sBAAsB,UAAU,MAAM,iBAAiB,EAIxE,KAAM,gBAAiB,CAAC,MAAM,UAAU,EAAE,OAAO,MAAM,yBAA2B,CAAA,CAAE,EAE9E,KAAO,GAAI,gCAAA,eAAe,KAAM,WAAY,CAChD,WAAY,MAAM,WAClB,wBAAyB,MAAM,wBAC/B,wBAAyB,uBAAuB,WAAY,cAAc,EAC1E,iBAAkB,WAAW,OAC9B,EAED,KAAK,eAAiB,KAAK,UApCf,oBAAmB,MAAkB,GAAY,eAAsB,CACnF,MAAM,cAAe,oBAAA,eAAe,CAApC,aAAA,qBACkB,KAAA,eAAiB,cACnC,EAEA,MAAO,IAAI,QAAO,MAAO,EAAE,GAT/B,QAAA,YAAA,0HA+CA,GAAY,kBAAZ,AAAA,UAAY,kBAAgB,CAM1B,kBAAA,MAAA,QAOA,kBAAA,IAAA,KACF,GAdY,iBAAA,QAAA,kBAAA,SAAA,iBAAgB,CAAA,EAAA,EAiB5B,gCAAgC,WAAmC,YAAqB,cACtF,KAAM,kBAAoE,CAAA,EAE1E,OAAQ,WAAW,YACZ,kBAAiB,IACpB,SAAW,cAAc,yBAAwB,WAAW,EAAG,CAC7D,KAAM,YAAU,IAAA,IAAG,WAAW,MAAM,eAAW,MAAA,KAAA,OAAA,OAAA,GAAG,eAAU,MAAA,KAAA,OAAA,GAAK,WAAW,MAAM,WAClF,AAAI,YACF,iBAAiB,KAAK,CAAE,WAAY,aAAc,WAAW,YAAY,CAAE,EAG/E,UACG,kBAAiB,MACpB,SAAW,cAAc,aAAa,CACpC,KAAM,kBAAgB,IAAG,WAAW,MAAM,qBAAiB,MAAA,KAAA,OAAA,OAAA,GAAG,YAC9D,GAAI,CAAC,kBAAoB,OAAA,MAAM,aAAa,UAAU,EACpD,KAAM,IAAI,OAAM,8EAAgF,EAElG,iBAAiB,KAAK,CAAE,WAAY,iBAAkB,kBAAgB,KAAhB,iBAAoB,OAAA,WAAW,UAAU,CAAC,CAAE,EAEpG,cAEA,KAAM,IAAI,OAAM,6BAA6B,WAAW,QAAQ,EAGpE,MAAO,kBAAiB,SAAW,EAAI,iBAAmB,MAC5D,CAOA,iCAAiC,YAAqB,CACpD,MAAO,aAAY,OAAO,QACjB,OAAA,MAAM,aAAa,MAAM,GAAK,CAAC,OAAO,WAAW,IAAI,GAAK,CAAC,YAAY,SAAS,OAAO,QAAQ,KAAM,EAAE,CAAC,CAChH,CACH",
  "names": []
}
