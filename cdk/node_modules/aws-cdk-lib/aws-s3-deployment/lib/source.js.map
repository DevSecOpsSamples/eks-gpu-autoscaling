{
  "version": 3,
  "sources": ["source.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport { join, dirname } from 'path';\nimport * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport * as s3_assets from '../../aws-s3-assets';\nimport { FileSystem, Stack } from '../../core';\nimport { renderData } from './render-data';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Source information.\n */\nexport interface SourceConfig {\n  /**\n   * The source bucket to deploy from.\n   */\n  readonly bucket: s3.IBucket;\n\n  /**\n   * An S3 object key in the source bucket that points to a zip file.\n   */\n  readonly zipObjectKey: string;\n\n  /**\n   * A set of markers to substitute in the source content.\n   * @default - no markers\n   */\n  readonly markers?: Record<string, any>;\n}\n\n/**\n * Bind context for ISources\n */\nexport interface DeploymentSourceContext {\n  /**\n   * The role for the handler\n   */\n  readonly handlerRole: iam.IRole;\n}\n\n/**\n * Represents a source for bucket deployments.\n */\nexport interface ISource {\n  /**\n   * Binds the source to a bucket deployment.\n   * @param scope The construct tree context.\n   */\n  bind(scope: Construct, context?: DeploymentSourceContext): SourceConfig;\n}\n\n/**\n * Specifies bucket deployment source.\n *\n * Usage:\n *\n *     Source.bucket(bucket, key)\n *     Source.asset('/local/path/to/directory')\n *     Source.asset('/local/path/to/a/file.zip')\n *     Source.data('hello/world/file.txt', 'Hello, world!')\n *     Source.data('config.json', { baz: topic.topicArn })\n *\n */\nexport class Source {\n  /**\n   * Uses a .zip file stored in an S3 bucket as the source for the destination bucket contents.\n   *\n   * Make sure you trust the producer of the archive.\n   *\n   * @param bucket The S3 Bucket\n   * @param zipObjectKey The S3 object key of the zip file with contents\n   */\n  public static bucket(bucket: s3.IBucket, zipObjectKey: string): ISource {\n    return {\n      bind: (_: Construct, context?: DeploymentSourceContext) => {\n        if (!context) {\n          throw new Error('To use a Source.bucket(), context must be provided');\n        }\n\n        bucket.grantRead(context.handlerRole);\n        return { bucket, zipObjectKey };\n      },\n    };\n  }\n\n  /**\n   * Uses a local asset as the deployment source.\n   *\n   * If the local asset is a .zip archive, make sure you trust the\n   * producer of the archive.\n   *\n   * @param path The path to a local .zip file or a directory\n   */\n  public static asset(path: string, options?: s3_assets.AssetOptions): ISource {\n    return {\n      bind(scope: Construct, context?: DeploymentSourceContext): SourceConfig {\n        if (!context) {\n          throw new Error('To use a Source.asset(), context must be provided');\n        }\n\n        let id = 1;\n        while (scope.node.tryFindChild(`Asset${id}`)) {\n          id++;\n        }\n        const asset = new s3_assets.Asset(scope, `Asset${id}`, {\n          path,\n          ...options,\n        });\n        if (!asset.isZipArchive) {\n          throw new Error('Asset path must be either a .zip file or a directory');\n        }\n        asset.grantRead(context.handlerRole);\n\n        return {\n          bucket: asset.bucket,\n          zipObjectKey: asset.s3ObjectKey,\n        };\n      },\n    };\n  }\n\n  /**\n   * Deploys an object with the specified string contents into the bucket. The\n   * content can include deploy-time values (such as `snsTopic.topicArn`) that\n   * will get resolved only during deployment.\n   *\n   * To store a JSON object use `Source.jsonData()`.\n   *\n   * @param objectKey The destination S3 object key (relative to the root of the\n   * S3 deployment).\n   * @param data The data to be stored in the object.\n   */\n  public static data(objectKey: string, data: string): ISource {\n    return {\n      bind: (scope: Construct, context?: DeploymentSourceContext) => {\n        const workdir = FileSystem.mkdtemp('s3-deployment');\n        const outputPath = join(workdir, objectKey);\n        const rendered = renderData(scope, data);\n        fs.mkdirSync(dirname(outputPath), { recursive: true });\n        fs.writeFileSync(outputPath, rendered.text);\n        const asset = this.asset(workdir).bind(scope, context);\n        return {\n          bucket: asset.bucket,\n          zipObjectKey: asset.zipObjectKey,\n          markers: rendered.markers,\n        };\n      },\n    };\n  }\n\n  /**\n   * Deploys an object with the specified JSON object into the bucket. The\n   * object can include deploy-time values (such as `snsTopic.topicArn`) that\n   * will get resolved only during deployment.\n   *\n   * @param objectKey The destination S3 object key (relative to the root of the\n   * S3 deployment).\n   * @param obj A JSON object.\n   */\n  public static jsonData(objectKey: string, obj: any): ISource {\n    return {\n      bind: (scope: Construct, context?: DeploymentSourceContext) => {\n        return Source.data(objectKey, Stack.of(scope).toJsonString(obj)).bind(scope, context);\n      },\n    };\n  }\n\n  private constructor() { }\n}\n"],
  "mappings": "6MAAA,GAAA,QAAA,IAAA,EACA,OAAA,QAAA,MAAA,EAGA,UAAA,QAAA,qBAAA,EACA,OAAA,QAAA,YAAA,EACA,cAAA,QAAA,eAAA,EA4DA,MAAa,MAAM,CAwGjB,aAAA,CAAA,OA/Fc,QAAO,OAAoB,aAAoB,mEACpD,CACL,KAAM,CAAC,EAAc,UAAqC,CACxD,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,oDAAoD,EAGtE,cAAO,UAAU,QAAQ,WAAW,EAC7B,CAAE,OAAQ,YAAY,CAC/B,SAYU,OAAM,KAAc,QAAgC,gFACzD,CACL,KAAK,MAAkB,QAAiC,CACtD,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,mDAAmD,EAGrE,GAAI,IAAK,EACT,KAAO,MAAM,KAAK,aAAa,QAAQ,IAAI,GACzC,KAEF,KAAM,OAAQ,GAAI,WAAU,MAAM,MAAO,QAAQ,KAAM,CACrD,QACG,QACJ,EACD,GAAI,CAAC,MAAM,aACT,KAAM,IAAI,OAAM,sDAAsD,EAExE,aAAM,UAAU,QAAQ,WAAW,EAE5B,CACL,OAAQ,MAAM,OACd,aAAc,MAAM,YAExB,SAeU,MAAK,UAAmB,KAAY,CAChD,MAAO,CACL,KAAM,CAAC,MAAkB,UAAqC,CAC5D,KAAM,SAAU,OAAA,WAAW,QAAQ,eAAe,EAC5C,WAAa,OAAA,KAAK,QAAS,SAAS,EACpC,SAAW,cAAA,WAAW,MAAO,IAAI,EACvC,GAAG,UAAU,OAAA,QAAQ,UAAU,EAAG,CAAE,UAAW,EAAI,CAAE,EACrD,GAAG,cAAc,WAAY,SAAS,IAAI,EAC1C,KAAM,OAAQ,KAAK,MAAM,OAAO,EAAE,KAAK,MAAO,OAAO,EACrD,MAAO,CACL,OAAQ,MAAM,OACd,aAAc,MAAM,aACpB,QAAS,SAAS,QAEtB,SAaU,UAAS,UAAmB,IAAQ,CAChD,MAAO,CACL,KAAM,CAAC,MAAkB,UAChB,OAAO,KAAK,UAAW,OAAA,MAAM,GAAG,KAAK,EAAE,aAAa,GAAG,CAAC,EAAE,KAAK,MAAO,OAAO,IAnG5F,QAAA,OAAA",
  "names": []
}
