{
  "version": 3,
  "sources": ["kinesis-fixed-canned-metrics.ts"],
  "sourcesContent": ["import { KinesisMetrics as CannedMetrics } from './kinesis-canned-metrics.generated';\n\n/**\n * This class is to consolidate all the metrics from Stream in just one place.\n *\n * Current generated canned metrics don't match the proper metrics from the service. If it is fixed\n * at the source this class can be removed and just use the generated one directly.\n *\n * Stream Metrics reference: https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html\n */\nexport class KinesisMetrics {\n  public static getRecordsBytesAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'GetRecords.Bytes',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static getRecordsSuccessAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'GetRecords.Success',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static getRecordsRecordsAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'GetRecords.Records',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static getRecordsLatencyAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'GetRecords.Latency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static putRecordBytesAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'PutRecord.Bytes',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static putRecordLatencyAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'PutRecord.Latency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static getRecordsIteratorAgeMillisecondsMaximum(dimensions: { StreamName: string }) {\n    return CannedMetrics.getRecordsIteratorAgeMillisecondsMaximum(dimensions);\n  }\n  public static putRecordSuccessAverage(dimensions: { StreamName: string }) {\n    return {\n      ...CannedMetrics.putRecordSuccessSum(dimensions),\n      statistic: 'Average',\n    };\n  }\n  public static putRecordsBytesAverage(dimensions: { StreamName: string }) {\n    return {\n      ...CannedMetrics.putRecordsBytesSum(dimensions),\n      statistic: 'Average',\n    };\n  }\n  public static putRecordsLatencyAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'PutRecords.Latency',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static putRecordsSuccessAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'PutRecords.Success',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static putRecordsTotalRecordsAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'PutRecords.TotalRecords',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static putRecordsSuccessfulRecordsAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'PutRecords.SuccessfulRecords',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static putRecordsFailedRecordsAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'PutRecords.FailedRecords',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static putRecordsThrottledRecordsAverage(dimensions: { StreamName: string }) {\n    return {\n      namespace: 'AWS/Kinesis',\n      metricName: 'PutRecords.ThrottledRecords',\n      dimensionsMap: dimensions,\n      statistic: 'Average',\n    };\n  }\n  public static incomingBytesAverage(dimensions: { StreamName: string }) {\n    return {\n      ...CannedMetrics.incomingBytesSum(dimensions),\n      statistic: 'Average',\n    };\n  }\n  public static incomingRecordsAverage(dimensions: { StreamName: string }) {\n    return {\n      ...CannedMetrics.incomingRecordsSum(dimensions),\n      statistic: 'Average',\n    };\n\n  }\n  public static readProvisionedThroughputExceededAverage(dimensions: { StreamName: string }) {\n    return {\n      ...CannedMetrics.readProvisionedThroughputExceededSum(dimensions),\n      statistic: 'Average',\n    };\n  }\n  public static writeProvisionedThroughputExceededAverage(dimensions: { StreamName: string }) {\n    return {\n      ...CannedMetrics.writeProvisionedThroughputExceededSum(dimensions),\n      statistic: 'Average',\n    };\n  }\n}\n"],
  "mappings": "kGAAA,KAAA,oCAAA,QAAA,oCAAA,EAUA,MAAa,cAAc,OACX,wBAAuB,WAAkC,CACrE,MAAO,CACL,UAAW,cACX,WAAY,mBACZ,cAAe,WACf,UAAW,iBAGD,0BAAyB,WAAkC,CACvE,MAAO,CACL,UAAW,cACX,WAAY,qBACZ,cAAe,WACf,UAAW,iBAGD,0BAAyB,WAAkC,CACvE,MAAO,CACL,UAAW,cACX,WAAY,qBACZ,cAAe,WACf,UAAW,iBAGD,0BAAyB,WAAkC,CACvE,MAAO,CACL,UAAW,cACX,WAAY,qBACZ,cAAe,WACf,UAAW,iBAGD,uBAAsB,WAAkC,CACpE,MAAO,CACL,UAAW,cACX,WAAY,kBACZ,cAAe,WACf,UAAW,iBAGD,yBAAwB,WAAkC,CACtE,MAAO,CACL,UAAW,cACX,WAAY,oBACZ,cAAe,WACf,UAAW,iBAGD,0CAAyC,WAAkC,CACvF,MAAO,oCAAA,eAAc,yCAAyC,UAAU,QAE5D,yBAAwB,WAAkC,CACtE,MAAO,IACF,mCAAA,eAAc,oBAAoB,UAAU,EAC/C,UAAW,iBAGD,wBAAuB,WAAkC,CACrE,MAAO,IACF,mCAAA,eAAc,mBAAmB,UAAU,EAC9C,UAAW,iBAGD,0BAAyB,WAAkC,CACvE,MAAO,CACL,UAAW,cACX,WAAY,qBACZ,cAAe,WACf,UAAW,iBAGD,0BAAyB,WAAkC,CACvE,MAAO,CACL,UAAW,cACX,WAAY,qBACZ,cAAe,WACf,UAAW,iBAGD,+BAA8B,WAAkC,CAC5E,MAAO,CACL,UAAW,cACX,WAAY,0BACZ,cAAe,WACf,UAAW,iBAGD,oCAAmC,WAAkC,CACjF,MAAO,CACL,UAAW,cACX,WAAY,+BACZ,cAAe,WACf,UAAW,iBAGD,gCAA+B,WAAkC,CAC7E,MAAO,CACL,UAAW,cACX,WAAY,2BACZ,cAAe,WACf,UAAW,iBAGD,mCAAkC,WAAkC,CAChF,MAAO,CACL,UAAW,cACX,WAAY,8BACZ,cAAe,WACf,UAAW,iBAGD,sBAAqB,WAAkC,CACnE,MAAO,IACF,mCAAA,eAAc,iBAAiB,UAAU,EAC5C,UAAW,iBAGD,wBAAuB,WAAkC,CACrE,MAAO,IACF,mCAAA,eAAc,mBAAmB,UAAU,EAC9C,UAAW,iBAID,0CAAyC,WAAkC,CACvF,MAAO,IACF,mCAAA,eAAc,qCAAqC,UAAU,EAChE,UAAW,iBAGD,2CAA0C,WAAkC,CACxF,MAAO,IACF,mCAAA,eAAc,sCAAsC,UAAU,EACjE,UAAW,YAtIjB,QAAA,eAAA",
  "names": []
}
