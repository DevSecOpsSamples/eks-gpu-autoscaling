import * as autoscaling from 'aws-cdk-lib/aws-autoscaling';
import * as ec2 from "aws-cdk-lib/aws-ec2";
import * as eks from "aws-cdk-lib/aws-eks";
import { CommonClusterOptions, FargateProfileOptions } from 'aws-cdk-lib/aws-eks';
import { Construct } from "constructs";
import { ClusterInfo, ClusterProvider } from "../spi";
import { AutoscalingNodeGroup, ManagedNodeGroup } from "./types";
export declare function clusterBuilder(): ClusterBuilder;
/**
 * Properties for the generic cluster provider, containing definitions of managed node groups,
 * auto-scaling groups, fargate profiles.
 */
export interface GenericClusterProviderProps extends eks.CommonClusterOptions {
    /**
     * Whether API server is private.
     */
    privateCluster?: boolean;
    /**
     * Array of managed node groups.
     */
    managedNodeGroups?: ManagedNodeGroup[];
    /**
     * Array of autoscaling node groups.
     */
    autoscalingNodeGroups?: AutoscalingNodeGroup[];
    /**
     * Fargate profiles
     */
    fargateProfiles?: {
        [key: string]: eks.FargateProfileOptions;
    };
}
export declare const defaultOptions: {
    version: eks.KubernetesVersion;
};
export declare class ClusterBuilder {
    private props;
    private privateCluster;
    private managedNodeGroups;
    private autoscalingNodeGroups;
    private fargateProfiles;
    constructor();
    withCommonOptions(options: Partial<CommonClusterOptions>): this;
    managedNodeGroup(...nodeGroups: ManagedNodeGroup[]): this;
    autoscalingGroup(...nodeGroups: AutoscalingNodeGroup[]): this;
    fargateProfile(name: string, options: FargateProfileOptions): this;
    build(): GenericClusterProvider;
}
/**
 * Cluster provider implementation that supports multiple node groups.
 */
export declare class GenericClusterProvider implements ClusterProvider {
    private readonly props;
    constructor(props: GenericClusterProviderProps);
    /**
     * @override
     */
    createCluster(scope: Construct, vpc: ec2.IVpc): ClusterInfo;
    /**
     * Template method that may be overridden by subclasses to create a specific cluster flavor (e.g. FargateCluster vs eks.Cluster)
     * @param scope
     * @param id
     * @param clusterOptions
     * @returns
     */
    protected internalCreateCluster(scope: Construct, id: string, clusterOptions: any): eks.Cluster;
    /**
     * Adds an autoscaling group to the cluster.
     * @param cluster
     * @param nodeGroup
     * @returns
     */
    addAutoScalingGroup(cluster: eks.Cluster, nodeGroup: AutoscalingNodeGroup): autoscaling.AutoScalingGroup;
    /**
     * Adds a fargate profile to the cluster
     */
    addFargateProfile(cluster: eks.Cluster, name: string, profileOptions: eks.FargateProfileOptions): void;
    /**
     * Adds a managed node group to the cluster.
     * @param cluster
     * @param nodeGroup
     * @returns
     */
    addManagedNodeGroup(cluster: eks.Cluster, nodeGroup: ManagedNodeGroup): eks.Nodegroup;
}
