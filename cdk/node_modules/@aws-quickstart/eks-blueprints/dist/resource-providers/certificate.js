"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateCertificateProvider = exports.ImportCertificateProvider = void 0;
const acm = require("aws-cdk-lib/aws-certificatemanager");
/**
 * Certificate provider that imports certificate into the current stack by arn.
 */
class ImportCertificateProvider {
    constructor(certificateArn, id) {
        this.certificateArn = certificateArn;
        this.id = id;
    }
    provide(context) {
        return acm.Certificate.fromCertificateArn(context.scope, this.id, this.certificateArn);
    }
}
exports.ImportCertificateProvider = ImportCertificateProvider;
/**
 * Certificate provider that creates a new certificate.
 * Expects a hosted zone to be registed for validation.
 */
class CreateCertificateProvider {
    /**
     * Creates the certificate provider.
     * @param name Name of this resource that other resource providers, add-ons and teams can use for look-up.
     * @param domainName
     * @param hostedZoneResourceName
     */
    constructor(name, domainName, hostedZoneResourceName) {
        this.name = name;
        this.domainName = domainName;
        this.hostedZoneResourceName = hostedZoneResourceName;
    }
    provide(context) {
        const hostedZone = context.get(this.hostedZoneResourceName);
        return new acm.Certificate(context.scope, this.name, {
            domainName: this.domainName,
            validation: acm.CertificateValidation.fromDns(hostedZone),
        });
    }
}
exports.CreateCertificateProvider = CreateCertificateProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVzb3VyY2UtcHJvdmlkZXJzL2NlcnRpZmljYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDBEQUEwRDtBQUcxRDs7R0FFRztBQUNILE1BQWEseUJBQXlCO0lBRWxDLFlBQTZCLGNBQXNCLEVBQW1CLEVBQVU7UUFBbkQsbUJBQWMsR0FBZCxjQUFjLENBQVE7UUFBbUIsT0FBRSxHQUFGLEVBQUUsQ0FBUTtJQUFHLENBQUM7SUFFcEYsT0FBTyxDQUFDLE9BQTRCO1FBQ2hDLE9BQU8sR0FBRyxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzNGLENBQUM7Q0FDSjtBQVBELDhEQU9DO0FBRUQ7OztHQUdHO0FBQ0gsTUFBYSx5QkFBeUI7SUFFbEM7Ozs7O09BS0c7SUFDSCxZQUFxQixJQUFhLEVBQVcsVUFBa0IsRUFBVyxzQkFBOEI7UUFBbkYsU0FBSSxHQUFKLElBQUksQ0FBUztRQUFXLGVBQVUsR0FBVixVQUFVLENBQVE7UUFBVywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQVE7SUFBRyxDQUFDO0lBRTVHLE9BQU8sQ0FBQyxPQUE0QjtRQUNoQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFjLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBRXpFLE9BQU8sSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNqRCxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsVUFBVSxFQUFFLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1NBQzFELENBQUMsQ0FBQztJQUNULENBQUM7Q0FDSjtBQWxCRCw4REFrQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzcGkgZnJvbSAnLi4vc3BpJztcbmltcG9ydCAqIGFzIGFjbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY2VydGlmaWNhdGVtYW5hZ2VyJztcbmltcG9ydCB7IElIb3N0ZWRab25lIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXJvdXRlNTMnO1xuXG4vKipcbiAqIENlcnRpZmljYXRlIHByb3ZpZGVyIHRoYXQgaW1wb3J0cyBjZXJ0aWZpY2F0ZSBpbnRvIHRoZSBjdXJyZW50IHN0YWNrIGJ5IGFybi4gXG4gKi9cbmV4cG9ydCBjbGFzcyBJbXBvcnRDZXJ0aWZpY2F0ZVByb3ZpZGVyIGltcGxlbWVudHMgc3BpLlJlc291cmNlUHJvdmlkZXI8YWNtLklDZXJ0aWZpY2F0ZT4ge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjZXJ0aWZpY2F0ZUFybjogc3RyaW5nLCBwcml2YXRlIHJlYWRvbmx5IGlkOiBzdHJpbmcpIHt9XG5cbiAgICBwcm92aWRlKGNvbnRleHQ6IHNwaS5SZXNvdXJjZUNvbnRleHQpIDogYWNtLklDZXJ0aWZpY2F0ZSB7XG4gICAgICAgIHJldHVybiBhY20uQ2VydGlmaWNhdGUuZnJvbUNlcnRpZmljYXRlQXJuKGNvbnRleHQuc2NvcGUsIHRoaXMuaWQsIHRoaXMuY2VydGlmaWNhdGVBcm4pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDZXJ0aWZpY2F0ZSBwcm92aWRlciB0aGF0IGNyZWF0ZXMgYSBuZXcgY2VydGlmaWNhdGUuIFxuICogRXhwZWN0cyBhIGhvc3RlZCB6b25lIHRvIGJlIHJlZ2lzdGVkIGZvciB2YWxpZGF0aW9uLiBcbiAqL1xuZXhwb3J0IGNsYXNzIENyZWF0ZUNlcnRpZmljYXRlUHJvdmlkZXIgaW1wbGVtZW50cyBzcGkuUmVzb3VyY2VQcm92aWRlcjxhY20uSUNlcnRpZmljYXRlPiB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBjZXJ0aWZpY2F0ZSBwcm92aWRlci5cbiAgICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoaXMgcmVzb3VyY2UgdGhhdCBvdGhlciByZXNvdXJjZSBwcm92aWRlcnMsIGFkZC1vbnMgYW5kIHRlYW1zIGNhbiB1c2UgZm9yIGxvb2stdXAuXG4gICAgICogQHBhcmFtIGRvbWFpbk5hbWUgXG4gICAgICogQHBhcmFtIGhvc3RlZFpvbmVSZXNvdXJjZU5hbWUgXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgbmFtZSA6IHN0cmluZywgcmVhZG9ubHkgZG9tYWluTmFtZTogc3RyaW5nLCByZWFkb25seSBob3N0ZWRab25lUmVzb3VyY2VOYW1lOiBzdHJpbmcpIHt9XG5cbiAgICBwcm92aWRlKGNvbnRleHQ6IHNwaS5SZXNvdXJjZUNvbnRleHQpIDogYWNtLklDZXJ0aWZpY2F0ZSB7XG4gICAgICAgIGNvbnN0IGhvc3RlZFpvbmUgPSBjb250ZXh0LmdldDxJSG9zdGVkWm9uZT4odGhpcy5ob3N0ZWRab25lUmVzb3VyY2VOYW1lKTtcblxuICAgICAgICByZXR1cm4gbmV3IGFjbS5DZXJ0aWZpY2F0ZShjb250ZXh0LnNjb3BlLCB0aGlzLm5hbWUsIHtcbiAgICAgICAgICAgIGRvbWFpbk5hbWU6IHRoaXMuZG9tYWluTmFtZSxcbiAgICAgICAgICAgIHZhbGlkYXRpb246IGFjbS5DZXJ0aWZpY2F0ZVZhbGlkYXRpb24uZnJvbURucyhob3N0ZWRab25lKSxcbiAgICAgICAgICB9KTsgICAgICAgXG4gICAgfVxufSJdfQ==