"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterInfo = exports.GlobalResources = exports.ResourceContext = void 0;
const assert = require("assert");
/**
 * Provides API to register resource providers and get access to the provided resources.
 */
class ResourceContext {
    constructor(scope, blueprintProps) {
        this.scope = scope;
        this.blueprintProps = blueprintProps;
        this.resources = new Map();
    }
    /**
     * Adds a new resource provider and specifies the name under which the provided resource will be registered,
     * @param name Specifies the name key under which the provided resources will be registered for subsequent look-ups.
     * @param provider Implementation of the resource provider interface
     * @returns the provided resource
     */
    add(name, provider) {
        const resource = provider.provide(this);
        assert(!this.resources.has(name), `Overwriting ${name} resource during execution is not allowed.`);
        this.resources.set(name, resource);
        return resource;
    }
    /**
     * Gets the provided resource by the supplied name.
     * @param name under which the resource provider was registered
     * @returns the resource or undefined if the specified resource was not found
     */
    get(name) {
        return this.resources.get(name);
    }
}
exports.ResourceContext = ResourceContext;
var GlobalResources;
(function (GlobalResources) {
    GlobalResources["Vpc"] = "vpc";
    GlobalResources["HostedZone"] = "hosted-zone";
    GlobalResources["Certificate"] = "certificate";
})(GlobalResources = exports.GlobalResources || (exports.GlobalResources = {}));
/**
 * Cluster info supplies required information on the cluster configuration, registered resources and add-ons
 * which could be leveraged by the framework, add-on implementations and teams.
 */
class ClusterInfo {
    /**
     * Constructor for ClusterInfo
     * @param props
     */
    constructor(cluster, version, nodeGroups, autoscalingGroups) {
        this.cluster = cluster;
        this.version = version;
        this.nodeGroups = nodeGroups;
        this.autoscalingGroups = autoscalingGroups;
        this.cluster = cluster;
        this.provisionedAddOns = new Map();
        this.scheduledAddOns = new Map();
    }
    /**
     * Provides the resource context object associated with this instance of the EKS Blueprint.
     * @returns resource context object
     */
    getResourceContext() {
        return this.resourceContext;
    }
    /**
     * Injection method to provide resource context.
     * @param resourceContext
     */
    setResourceContext(resourceContext) {
        this.resourceContext = resourceContext;
    }
    /**
     * Update provisionedAddOns map
     * @param addOn
     * @param construct
     */
    addProvisionedAddOn(addOn, construct) {
        this.provisionedAddOns.set(addOn, construct);
    }
    /**
     * Given the addOn name, return the provisioned addOn construct
     * @param addOn
     * @returns undefined
     */
    getProvisionedAddOn(addOn) {
        return this.provisionedAddOns.get(addOn);
    }
    /**
    * Returns all provisioned addons
    * @returns scheduledAddOns: Map<string, cdk.Construct>
    */
    getAllProvisionedAddons() {
        return this.provisionedAddOns;
    }
    /**
     * Set the preProvisionedAddOn map with the promise for the construct
     * of the addon being provisioned
     * @param addOn
     * @param promise
     */
    addScheduledAddOn(addOn, promise) {
        this.scheduledAddOns.set(addOn, promise);
    }
    /**
     * Returns the promise for the Addon construct
     * @param addOn
     * @returns Promise<cdk.Construct>
     */
    getScheduledAddOn(addOn) {
        return this.scheduledAddOns.get(addOn);
    }
    /**
     * Returns all scheduled addons
     * @returns scheduledAddOns: Map<string, Promise<cdk.Construct>>
     */
    getAllScheduledAddons() {
        return this.scheduledAddOns;
    }
    /**
     * Provides the resource registered under supplied name
     * @param name of the resource to be returned
     * @returns Resource object or undefined if no resource was found
     */
    getResource(name) {
        return this.resourceContext.get(name);
    }
    /**
     * Same as {@link getResource} but will fail if the specified resource is not found
     * @param name of the resource to be returned
     * @returns Resource object (fails if not found)
     */
    getRequiredResource(name) {
        const result = this.resourceContext.get(name);
        assert(result, `Required resource ${name} is missing.`);
        return result;
    }
}
exports.ClusterInfo = ClusterInfo;
//# sourceMappingURL=data:application/json;base64,