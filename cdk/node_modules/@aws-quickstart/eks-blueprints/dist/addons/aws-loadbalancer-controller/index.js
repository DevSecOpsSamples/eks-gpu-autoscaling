"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsLoadBalancerControllerAddOn = void 0;
const iam = require("aws-cdk-lib/aws-iam");
const helm_addon_1 = require("../helm-addon");
const iam_policy_1 = require("./iam-policy");
const registry_utils_1 = require("../../utils/registry-utils");
const AWS_LOAD_BALANCER_CONTROLLER = 'aws-load-balancer-controller';
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: AWS_LOAD_BALANCER_CONTROLLER,
    namespace: 'kube-system',
    chart: AWS_LOAD_BALANCER_CONTROLLER,
    repository: 'https://aws.github.io/eks-charts',
    release: AWS_LOAD_BALANCER_CONTROLLER,
    version: '1.3.3',
    enableShield: false,
    enableWaf: false,
    enableWafv2: false,
    createIngressClassResource: true,
    ingressClass: "alb"
};
class AwsLoadBalancerControllerAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        const cluster = clusterInfo.cluster;
        const serviceAccount = cluster.addServiceAccount('aws-load-balancer-controller', {
            name: AWS_LOAD_BALANCER_CONTROLLER,
            namespace: this.options.namespace,
        });
        (0, iam_policy_1.AwsLoadbalancerControllerIamPolicy)(cluster.stack.partition).Statement.forEach((statement) => {
            serviceAccount.addToPrincipalPolicy(iam.PolicyStatement.fromJson(statement));
        });
        const repo = registry_utils_1.registries.get(clusterInfo.cluster.stack.region) + "amazon/aws-load-balancer-controller";
        const awsLoadBalancerControllerChart = this.addHelmChart(clusterInfo, {
            clusterName: cluster.clusterName,
            serviceAccount: {
                create: false,
                name: serviceAccount.serviceAccountName,
            },
            // must disable waf features for aws-cn partition
            enableShield: this.options.enableShield,
            enableWaf: this.options.enableWaf,
            enableWafv2: this.options.enableWafv2,
            createIngressClassResource: this.options.createIngressClassResource,
            ingressClass: this.options.ingressClass,
            region: clusterInfo.cluster.stack.region,
            image: { repository: repo },
            vpcId: clusterInfo.cluster.vpc.vpcId,
        });
        awsLoadBalancerControllerChart.node.addDependency(serviceAccount);
        // return the Promise Construct for any teams that may depend on this
        return Promise.resolve(awsLoadBalancerControllerChart);
    }
}
exports.AwsLoadBalancerControllerAddOn = AwsLoadBalancerControllerAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2F3cy1sb2FkYmFsYW5jZXItY29udHJvbGxlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBMkM7QUFHM0MsOENBQThEO0FBQzlELDZDQUFrRTtBQUNsRSwrREFBd0Q7QUFtQ3hELE1BQU0sNEJBQTRCLEdBQUcsOEJBQThCLENBQUM7QUFFcEU7O0dBRUc7QUFDSCxNQUFNLFlBQVksR0FBbUM7SUFDakQsSUFBSSxFQUFFLDRCQUE0QjtJQUNsQyxTQUFTLEVBQUUsYUFBYTtJQUN4QixLQUFLLEVBQUUsNEJBQTRCO0lBQ25DLFVBQVUsRUFBRSxrQ0FBa0M7SUFDOUMsT0FBTyxFQUFFLDRCQUE0QjtJQUNyQyxPQUFPLEVBQUUsT0FBTztJQUNoQixZQUFZLEVBQUUsS0FBSztJQUNuQixTQUFTLEVBQUUsS0FBSztJQUNoQixXQUFXLEVBQUUsS0FBSztJQUNsQiwwQkFBMEIsRUFBRSxJQUFJO0lBQ2hDLFlBQVksRUFBRSxLQUFLO0NBQ3RCLENBQUM7QUFHRixNQUFhLDhCQUErQixTQUFRLHNCQUFTO0lBSXpELFlBQVksS0FBc0M7UUFDOUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxZQUFtQixFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUF1QyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBd0I7UUFDM0IsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUNwQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsOEJBQThCLEVBQUU7WUFDN0UsSUFBSSxFQUFFLDRCQUE0QjtZQUNsQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTO1NBQ3BDLENBQUMsQ0FBQztRQUVILElBQUEsK0NBQWtDLEVBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDeEYsY0FBYyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDakYsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLElBQUksR0FBRywyQkFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxxQ0FBcUMsQ0FBQztRQUN0RyxNQUFNLDhCQUE4QixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFO1lBQ2xFLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVztZQUNoQyxjQUFjLEVBQUU7Z0JBQ1osTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsSUFBSSxFQUFFLGNBQWMsQ0FBQyxrQkFBa0I7YUFDMUM7WUFDRCxpREFBaUQ7WUFDakQsWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWTtZQUN2QyxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTO1lBQ2pDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDckMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQkFBMEI7WUFDbkUsWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWTtZQUN2QyxNQUFNLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUN4QyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFO1lBQzNCLEtBQUssRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLO1NBQ3ZDLENBQUMsQ0FBQztRQUVILDhCQUE4QixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbEUscUVBQXFFO1FBQ3JFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDSjtBQXpDRCx3RUF5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpYW0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBDbHVzdGVySW5mbyB9IGZyb20gXCIuLi8uLi9zcGlcIjtcbmltcG9ydCB7IEhlbG1BZGRPbiwgSGVsbUFkZE9uVXNlclByb3BzIH0gZnJvbSBcIi4uL2hlbG0tYWRkb25cIjtcbmltcG9ydCB7IEF3c0xvYWRiYWxhbmNlckNvbnRyb2xsZXJJYW1Qb2xpY3kgfSBmcm9tIFwiLi9pYW0tcG9saWN5XCI7XG5pbXBvcnQgeyByZWdpc3RyaWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlZ2lzdHJ5LXV0aWxzXCI7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgYWRkLW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF3c0xvYWRCYWxhbmNlckNvbnRyb2xsZXJQcm9wcyBleHRlbmRzIEhlbG1BZGRPblVzZXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgU2hpZWxkIChtdXN0IGJlIGZhbHNlIGZvciBDTiBwYXJ0aXRpb24pXG4gICAgICovXG4gICAgZW5hYmxlU2hpZWxkPzogYm9vbGVhbixcblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSBXQUYgKG11c3QgYmUgZmFsc2UgZm9yIENOIHBhcnRpdGlvbilcbiAgICAgKi9cbiAgICBlbmFibGVXYWY6IGJvb2xlYW4sXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgV0FGVjIgKG11c3QgYmUgZmFsc2UgZm9yIENOIHBhcnRpdGlvbilcbiAgICAgKi9cbiAgICBlbmFibGVXYWZ2Mj86IGJvb2xlYW4sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGluZ3Jlc3NDbGFzcyB0byBiZSB1c2VkIGJ5IHRoZSBBTEIgY29udHJvbGxlclxuICAgICAqL1xuICAgIGNyZWF0ZUluZ3Jlc3NDbGFzc1Jlc291cmNlPzogYm9vbGVhblxuXG4gICAgLyoqXG4gICAgICogTmFtZSBvZiBpbmdyZXNzQ2xhc3MgdG8gdGhlIEFMQiBjb250cm9sbGVyIHdpbGwgc2F0aXNmeS4gSWYgbm90IHByb3ZpZGVkXG4gICAgICogdGhlIHZhbHVlIHdpbGwgYmUgZGVmYXVsdGVkIHRvIFwiYWxiXCJcbiAgICAgKi9cbiAgICBpbmdyZXNzQ2xhc3M/OiBzdHJpbmdcbn1cblxuXG5jb25zdCBBV1NfTE9BRF9CQUxBTkNFUl9DT05UUk9MTEVSID0gJ2F3cy1sb2FkLWJhbGFuY2VyLWNvbnRyb2xsZXInO1xuXG4vKipcbiAqIERlZmF1bHRzIG9wdGlvbnMgZm9yIHRoZSBhZGQtb25cbiAqL1xuY29uc3QgZGVmYXVsdFByb3BzOiBBd3NMb2FkQmFsYW5jZXJDb250cm9sbGVyUHJvcHMgPSB7XG4gICAgbmFtZTogQVdTX0xPQURfQkFMQU5DRVJfQ09OVFJPTExFUixcbiAgICBuYW1lc3BhY2U6ICdrdWJlLXN5c3RlbScsXG4gICAgY2hhcnQ6IEFXU19MT0FEX0JBTEFOQ0VSX0NPTlRST0xMRVIsXG4gICAgcmVwb3NpdG9yeTogJ2h0dHBzOi8vYXdzLmdpdGh1Yi5pby9la3MtY2hhcnRzJyxcbiAgICByZWxlYXNlOiBBV1NfTE9BRF9CQUxBTkNFUl9DT05UUk9MTEVSLFxuICAgIHZlcnNpb246ICcxLjMuMycsXG4gICAgZW5hYmxlU2hpZWxkOiBmYWxzZSxcbiAgICBlbmFibGVXYWY6IGZhbHNlLFxuICAgIGVuYWJsZVdhZnYyOiBmYWxzZSxcbiAgICBjcmVhdGVJbmdyZXNzQ2xhc3NSZXNvdXJjZTogdHJ1ZSxcbiAgICBpbmdyZXNzQ2xhc3M6IFwiYWxiXCJcbn07XG5cblxuZXhwb3J0IGNsYXNzIEF3c0xvYWRCYWxhbmNlckNvbnRyb2xsZXJBZGRPbiBleHRlbmRzIEhlbG1BZGRPbiB7XG5cbiAgICByZWFkb25seSBvcHRpb25zOiBBd3NMb2FkQmFsYW5jZXJDb250cm9sbGVyUHJvcHM7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IEF3c0xvYWRCYWxhbmNlckNvbnRyb2xsZXJQcm9wcykge1xuICAgICAgICBzdXBlcih7IC4uLmRlZmF1bHRQcm9wcyBhcyBhbnksIC4uLnByb3BzIH0pO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnByb3BzIGFzIEF3c0xvYWRCYWxhbmNlckNvbnRyb2xsZXJQcm9wcztcbiAgICB9XG5cbiAgICBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogUHJvbWlzZTxDb25zdHJ1Y3Q+IHtcbiAgICAgICAgY29uc3QgY2x1c3RlciA9IGNsdXN0ZXJJbmZvLmNsdXN0ZXI7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VBY2NvdW50ID0gY2x1c3Rlci5hZGRTZXJ2aWNlQWNjb3VudCgnYXdzLWxvYWQtYmFsYW5jZXItY29udHJvbGxlcicsIHtcbiAgICAgICAgICAgIG5hbWU6IEFXU19MT0FEX0JBTEFOQ0VSX0NPTlRST0xMRVIsXG4gICAgICAgICAgICBuYW1lc3BhY2U6IHRoaXMub3B0aW9ucy5uYW1lc3BhY2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIEF3c0xvYWRiYWxhbmNlckNvbnRyb2xsZXJJYW1Qb2xpY3koY2x1c3Rlci5zdGFjay5wYXJ0aXRpb24pLlN0YXRlbWVudC5mb3JFYWNoKChzdGF0ZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50LmFkZFRvUHJpbmNpcGFsUG9saWN5KGlhbS5Qb2xpY3lTdGF0ZW1lbnQuZnJvbUpzb24oc3RhdGVtZW50KSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXBvID0gcmVnaXN0cmllcy5nZXQoY2x1c3RlckluZm8uY2x1c3Rlci5zdGFjay5yZWdpb24pICsgXCJhbWF6b24vYXdzLWxvYWQtYmFsYW5jZXItY29udHJvbGxlclwiO1xuICAgICAgICBjb25zdCBhd3NMb2FkQmFsYW5jZXJDb250cm9sbGVyQ2hhcnQgPSB0aGlzLmFkZEhlbG1DaGFydChjbHVzdGVySW5mbywge1xuICAgICAgICAgICAgY2x1c3Rlck5hbWU6IGNsdXN0ZXIuY2x1c3Rlck5hbWUsXG4gICAgICAgICAgICBzZXJ2aWNlQWNjb3VudDoge1xuICAgICAgICAgICAgICAgIGNyZWF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogc2VydmljZUFjY291bnQuc2VydmljZUFjY291bnROYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIG11c3QgZGlzYWJsZSB3YWYgZmVhdHVyZXMgZm9yIGF3cy1jbiBwYXJ0aXRpb25cbiAgICAgICAgICAgIGVuYWJsZVNoaWVsZDogdGhpcy5vcHRpb25zLmVuYWJsZVNoaWVsZCxcbiAgICAgICAgICAgIGVuYWJsZVdhZjogdGhpcy5vcHRpb25zLmVuYWJsZVdhZixcbiAgICAgICAgICAgIGVuYWJsZVdhZnYyOiB0aGlzLm9wdGlvbnMuZW5hYmxlV2FmdjIsXG4gICAgICAgICAgICBjcmVhdGVJbmdyZXNzQ2xhc3NSZXNvdXJjZTogdGhpcy5vcHRpb25zLmNyZWF0ZUluZ3Jlc3NDbGFzc1Jlc291cmNlLFxuICAgICAgICAgICAgaW5ncmVzc0NsYXNzOiB0aGlzLm9wdGlvbnMuaW5ncmVzc0NsYXNzLFxuICAgICAgICAgICAgcmVnaW9uOiBjbHVzdGVySW5mby5jbHVzdGVyLnN0YWNrLnJlZ2lvbixcbiAgICAgICAgICAgIGltYWdlOiB7IHJlcG9zaXRvcnk6IHJlcG8gfSxcbiAgICAgICAgICAgIHZwY0lkOiBjbHVzdGVySW5mby5jbHVzdGVyLnZwYy52cGNJZCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdzTG9hZEJhbGFuY2VyQ29udHJvbGxlckNoYXJ0Lm5vZGUuYWRkRGVwZW5kZW5jeShzZXJ2aWNlQWNjb3VudCk7XG4gICAgICAgIC8vIHJldHVybiB0aGUgUHJvbWlzZSBDb25zdHJ1Y3QgZm9yIGFueSB0ZWFtcyB0aGF0IG1heSBkZXBlbmQgb24gdGhpc1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGF3c0xvYWRCYWxhbmNlckNvbnRyb2xsZXJDaGFydCk7XG4gICAgfVxufSJdfQ==