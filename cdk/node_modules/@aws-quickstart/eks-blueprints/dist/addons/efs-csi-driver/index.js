"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EfsCsiDriverAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const iam_policy_1 = require("./iam-policy");
const registry_utils_1 = require("../../utils/registry-utils");
const iam = require("aws-cdk-lib/aws-iam");
const utils_1 = require("../../utils");
const EFS_CSI_DRIVER = "aws-efs-csi-driver";
const EFS_CSI_CONTROLLER_SA = "efs-csi-controller-sa";
const EFS_REGISTRY_SUFFIX = "eks/aws-efs-csi-driver";
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    version: '2.2.4',
    namespace: "kube-system",
    repository: "https://kubernetes-sigs.github.io/aws-efs-csi-driver/",
    name: EFS_CSI_DRIVER,
    chart: EFS_CSI_DRIVER,
    replicaCount: 2
};
class EfsCsiDriverAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        // Create service account and policy
        const cluster = clusterInfo.cluster;
        const serviceAccount = cluster.addServiceAccount(EFS_CSI_CONTROLLER_SA, {
            name: EFS_CSI_CONTROLLER_SA,
            namespace: this.options.namespace,
        });
        (0, iam_policy_1.EfsDriverPolicyDocument)().Statement.forEach((statement) => {
            serviceAccount.addToPrincipalPolicy(iam.PolicyStatement.fromJson(statement));
        });
        // Lookup appropriate image repo
        const repo = registry_utils_1.registries.get(clusterInfo.cluster.stack.region) + EFS_REGISTRY_SUFFIX;
        // setup value for helm chart
        const chartValues = populateValues(this.options, cluster.clusterName, serviceAccount.serviceAccountName, repo);
        // Define chart
        const efsCsiDriverChart = this.addHelmChart(clusterInfo, chartValues);
        efsCsiDriverChart.node.addDependency(serviceAccount);
        // return the Promise Construct for any teams that may depend on this
        return Promise.resolve(efsCsiDriverChart);
    }
}
exports.EfsCsiDriverAddOn = EfsCsiDriverAddOn;
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 * @param clusterName Name of the cluster where to deploy the add-on
 * @param serviceAccountName Name of the service account used by the add-on
 * @param repository Repository to pull image for Add_on
 */
function populateValues(helmOptions, clusterName, serviceAccountName, repository) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, utils_1.setPath)(values, "clusterName", clusterName);
    (0, utils_1.setPath)(values, "controller.serviceAccount.create", false);
    (0, utils_1.setPath)(values, "controller.serviceAccount.name", serviceAccountName);
    (0, utils_1.setPath)(values, "replicaCount", helmOptions.replicaCount);
    (0, utils_1.setPath)(values, "image.repository", repository);
    return values;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2Vmcy1jc2ktZHJpdmVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLDhDQUE4RDtBQUM5RCw2Q0FBdUQ7QUFDdkQsK0RBQXlEO0FBQ3pELDJDQUEyQztBQUMzQyx1Q0FBb0M7QUFHcEMsTUFBTSxjQUFjLEdBQUcsb0JBQW9CLENBQUM7QUFDNUMsTUFBTSxxQkFBcUIsR0FBRyx1QkFBdUIsQ0FBQztBQUN0RCxNQUFNLG1CQUFtQixHQUFHLHdCQUF3QixDQUFDO0FBbUJyRDs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUFzQjtJQUNwQyxPQUFPLEVBQUUsT0FBTztJQUNoQixTQUFTLEVBQUUsYUFBYTtJQUN4QixVQUFVLEVBQUUsdURBQXVEO0lBQ25FLElBQUksRUFBRSxjQUFjO0lBQ3BCLEtBQUssRUFBRSxjQUFjO0lBQ3JCLFlBQVksRUFBRSxDQUFDO0NBQ2xCLENBQUM7QUFFRixNQUFhLGlCQUFrQixTQUFRLHNCQUFTO0lBSTVDLFlBQVksS0FBeUI7UUFDakMsS0FBSyxDQUFDLEVBQUUsR0FBRyxZQUFtQixFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUEwQixDQUFDO0lBQ25ELENBQUM7SUFFRCxNQUFNLENBQUMsV0FBd0I7UUFDM0Isb0NBQW9DO1FBQ3BDLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFDcEMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixFQUFFO1lBQ3BFLElBQUksRUFBRSxxQkFBcUI7WUFDM0IsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUztTQUNwQyxDQUFDLENBQUM7UUFDSCxJQUFBLG9DQUF1QixHQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3RELGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLENBQUMsQ0FBQyxDQUFDO1FBR0gsZ0NBQWdDO1FBQ2hDLE1BQU0sSUFBSSxHQUFHLDJCQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLG1CQUFtQixDQUFDO1FBQ3BGLDZCQUE2QjtRQUM3QixNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUvRyxlQUFlO1FBQ2YsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUV0RSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3JELHFFQUFxRTtRQUNyRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBQ0o7QUFqQ0QsOENBaUNDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBUyxjQUFjLENBQUMsV0FBOEIsRUFBRSxXQUFtQixFQUNuRCxrQkFBMEIsRUFBRSxVQUFrQjs7SUFDbEUsTUFBTSxNQUFNLEdBQUcsTUFBQSxXQUFXLENBQUMsTUFBTSxtQ0FBSSxFQUFFLENBQUM7SUFFeEMsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRyxXQUFXLENBQUMsQ0FBQztJQUM3QyxJQUFBLGVBQU8sRUFBQyxNQUFNLEVBQUUsa0NBQWtDLEVBQUcsS0FBSyxDQUFDLENBQUM7SUFDNUQsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLGdDQUFnQyxFQUFHLGtCQUFrQixDQUFDLENBQUM7SUFDdkUsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0QsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLGtCQUFrQixFQUFHLFVBQVUsQ0FBQyxDQUFDO0lBRWpELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHtDbHVzdGVySW5mbywgVmFsdWVzfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblVzZXJQcm9wcyB9IGZyb20gXCIuLi9oZWxtLWFkZG9uXCI7XG5pbXBvcnQgeyBFZnNEcml2ZXJQb2xpY3lEb2N1bWVudCB9IGZyb20gXCIuL2lhbS1wb2xpY3lcIjtcbmltcG9ydCB7IHJlZ2lzdHJpZXMgfSAgZnJvbSBcIi4uLy4uL3V0aWxzL3JlZ2lzdHJ5LXV0aWxzXCI7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtcbmltcG9ydCB7c2V0UGF0aH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cblxuY29uc3QgRUZTX0NTSV9EUklWRVIgPSBcImF3cy1lZnMtY3NpLWRyaXZlclwiO1xuY29uc3QgRUZTX0NTSV9DT05UUk9MTEVSX1NBID0gXCJlZnMtY3NpLWNvbnRyb2xsZXItc2FcIjtcbmNvbnN0IEVGU19SRUdJU1RSWV9TVUZGSVggPSBcImVrcy9hd3MtZWZzLWNzaS1kcml2ZXJcIjtcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBhZGQtb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRWZzQ3NpRHJpdmVyUHJvcHMgZXh0ZW5kcyBIZWxtQWRkT25Vc2VyUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFZlcnNpb24gb2YgdGhlIGRyaXZlciB0byBkZXBsb3kuIFVzZXMgY2hhcnQgdmVyc2lvbiAyLjIuMyBieSBkZWZhdWx0IGlmIHRoaXMgdmFsdWUgaXMgbm90IHByb3ZpZGVkXG4gICAgICovXG4gICAgdmVyc2lvbj86IHN0cmluZyxcbiAgICAvKioqXG4gICAgICogTnVtYmVyIG9mIHJlcGxpY2FzIHRvIGJlIGRlcGxveWVkLiBJZiBub3QgcHJvdmlkZWQsIGl0IGRlZmF1bHRzIHRvIDIuIE5vdGUgdGhhdCB0aGUgbnVtYmVyIG9mIHJlcGxpY2FzXG4gICAgICogc2hvdWxkIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSBjbHVzdGVyIG90aGVyd2lzZSBzb21lXG4gICAgICogcG9kcyB3aWxsIGJlIGxlZnQgb2YgcGVuZGluZyBzdGF0ZVxuICAgICAqL1xuICAgIHJlcGxpY2FDb3VudD86IG51bWJlclxuXG59XG5cbi8qKlxuICogRGVmYXVsdHMgb3B0aW9ucyBmb3IgdGhlIGFkZC1vblxuICovXG5jb25zdCBkZWZhdWx0UHJvcHM6IEVmc0NzaURyaXZlclByb3BzID0ge1xuICAgIHZlcnNpb246ICcyLjIuNCcsXG4gICAgbmFtZXNwYWNlOiBcImt1YmUtc3lzdGVtXCIsXG4gICAgcmVwb3NpdG9yeTogXCJodHRwczovL2t1YmVybmV0ZXMtc2lncy5naXRodWIuaW8vYXdzLWVmcy1jc2ktZHJpdmVyL1wiLFxuICAgIG5hbWU6IEVGU19DU0lfRFJJVkVSLFxuICAgIGNoYXJ0OiBFRlNfQ1NJX0RSSVZFUixcbiAgICByZXBsaWNhQ291bnQ6IDJcbn07XG5cbmV4cG9ydCBjbGFzcyBFZnNDc2lEcml2ZXJBZGRPbiBleHRlbmRzIEhlbG1BZGRPbiB7XG5cbiAgICByZWFkb25seSBvcHRpb25zOiBFZnNDc2lEcml2ZXJQcm9wcztcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogRWZzQ3NpRHJpdmVyUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoeyAuLi5kZWZhdWx0UHJvcHMgYXMgYW55LCAuLi5wcm9wcyB9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5wcm9wcyBhcyBFZnNDc2lEcml2ZXJQcm9wcztcbiAgICB9XG5cbiAgICBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogUHJvbWlzZTxDb25zdHJ1Y3Q+IHtcbiAgICAgICAgLy8gQ3JlYXRlIHNlcnZpY2UgYWNjb3VudCBhbmQgcG9saWN5XG4gICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBjbHVzdGVySW5mby5jbHVzdGVyO1xuICAgICAgICBjb25zdCBzZXJ2aWNlQWNjb3VudCA9IGNsdXN0ZXIuYWRkU2VydmljZUFjY291bnQoRUZTX0NTSV9DT05UUk9MTEVSX1NBLCB7XG4gICAgICAgICAgICBuYW1lOiBFRlNfQ1NJX0NPTlRST0xMRVJfU0EsXG4gICAgICAgICAgICBuYW1lc3BhY2U6IHRoaXMub3B0aW9ucy5uYW1lc3BhY2UsXG4gICAgICAgIH0pO1xuICAgICAgICBFZnNEcml2ZXJQb2xpY3lEb2N1bWVudCgpLlN0YXRlbWVudC5mb3JFYWNoKChzdGF0ZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50LmFkZFRvUHJpbmNpcGFsUG9saWN5KGlhbS5Qb2xpY3lTdGF0ZW1lbnQuZnJvbUpzb24oc3RhdGVtZW50KSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy8gTG9va3VwIGFwcHJvcHJpYXRlIGltYWdlIHJlcG9cbiAgICAgICAgY29uc3QgcmVwbyA9IHJlZ2lzdHJpZXMuZ2V0KGNsdXN0ZXJJbmZvLmNsdXN0ZXIuc3RhY2sucmVnaW9uKSArIEVGU19SRUdJU1RSWV9TVUZGSVg7XG4gICAgICAgIC8vIHNldHVwIHZhbHVlIGZvciBoZWxtIGNoYXJ0XG4gICAgICAgIGNvbnN0IGNoYXJ0VmFsdWVzID0gcG9wdWxhdGVWYWx1ZXModGhpcy5vcHRpb25zLCBjbHVzdGVyLmNsdXN0ZXJOYW1lLCBzZXJ2aWNlQWNjb3VudC5zZXJ2aWNlQWNjb3VudE5hbWUsIHJlcG8pO1xuXG4gICAgICAgIC8vIERlZmluZSBjaGFydFxuICAgICAgICBjb25zdCBlZnNDc2lEcml2ZXJDaGFydCA9IHRoaXMuYWRkSGVsbUNoYXJ0KGNsdXN0ZXJJbmZvLCBjaGFydFZhbHVlcyk7XG5cbiAgICAgICAgZWZzQ3NpRHJpdmVyQ2hhcnQubm9kZS5hZGREZXBlbmRlbmN5KHNlcnZpY2VBY2NvdW50KTtcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBQcm9taXNlIENvbnN0cnVjdCBmb3IgYW55IHRlYW1zIHRoYXQgbWF5IGRlcGVuZCBvbiB0aGlzXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZWZzQ3NpRHJpdmVyQ2hhcnQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBwb3B1bGF0ZVZhbHVlcyBwb3B1bGF0ZXMgdGhlIGFwcHJvcHJpYXRlIHZhbHVlcyB1c2VkIHRvIGN1c3RvbWl6ZSB0aGUgSGVsbSBjaGFydFxuICogQHBhcmFtIGhlbG1PcHRpb25zIFVzZXIgcHJvdmlkZWQgdmFsdWVzIHRvIGN1c3RvbWl6ZSB0aGUgY2hhcnRcbiAqIEBwYXJhbSBjbHVzdGVyTmFtZSBOYW1lIG9mIHRoZSBjbHVzdGVyIHdoZXJlIHRvIGRlcGxveSB0aGUgYWRkLW9uXG4gKiBAcGFyYW0gc2VydmljZUFjY291bnROYW1lIE5hbWUgb2YgdGhlIHNlcnZpY2UgYWNjb3VudCB1c2VkIGJ5IHRoZSBhZGQtb25cbiAqIEBwYXJhbSByZXBvc2l0b3J5IFJlcG9zaXRvcnkgdG8gcHVsbCBpbWFnZSBmb3IgQWRkX29uXG4gKi9cbmZ1bmN0aW9uIHBvcHVsYXRlVmFsdWVzKGhlbG1PcHRpb25zOiBFZnNDc2lEcml2ZXJQcm9wcywgY2x1c3Rlck5hbWU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogc3RyaW5nLCByZXBvc2l0b3J5OiBzdHJpbmcpOiBWYWx1ZXMge1xuICAgIGNvbnN0IHZhbHVlcyA9IGhlbG1PcHRpb25zLnZhbHVlcyA/PyB7fTtcblxuICAgIHNldFBhdGgodmFsdWVzLCBcImNsdXN0ZXJOYW1lXCIsICBjbHVzdGVyTmFtZSk7XG4gICAgc2V0UGF0aCh2YWx1ZXMsIFwiY29udHJvbGxlci5zZXJ2aWNlQWNjb3VudC5jcmVhdGVcIiwgIGZhbHNlKTtcbiAgICBzZXRQYXRoKHZhbHVlcywgXCJjb250cm9sbGVyLnNlcnZpY2VBY2NvdW50Lm5hbWVcIiwgIHNlcnZpY2VBY2NvdW50TmFtZSk7XG4gICAgc2V0UGF0aCh2YWx1ZXMsIFwicmVwbGljYUNvdW50XCIsICBoZWxtT3B0aW9ucy5yZXBsaWNhQ291bnQpO1xuICAgIHNldFBhdGgodmFsdWVzLCBcImltYWdlLnJlcG9zaXRvcnlcIiwgIHJlcG9zaXRvcnkpO1xuXG4gICAgcmV0dXJuIHZhbHVlcztcbn0iXX0=