"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubectlProvider = void 0;
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
/**
 * Kubectl provider for the add-ons and teams that is capable of helm and generic manifest deployments.
 * It exposes extenion mechanism and central points for logging, stack output, extension of functionality.
 */
class KubectlProvider {
    constructor(clusterInfo) {
        this.clusterInfo = clusterInfo;
    }
    addHelmChart(props) {
        return KubectlProvider.applyHelmDeployment(this.clusterInfo, props);
    }
    addManfiest(props) {
        return KubectlProvider.applyManifestDeployment(this.clusterInfo, props);
    }
}
exports.KubectlProvider = KubectlProvider;
KubectlProvider.applyHelmDeployment = function (clusterInfo, props) {
    return clusterInfo.cluster.addHelmChart(props.name, {
        repository: props.repository,
        namespace: props.namespace,
        createNamespace: props.createNamespace,
        chart: props.chart,
        version: props.version,
        release: props.release,
        timeout: props.timeout,
        wait: props.wait,
        values: props.values
    });
};
/**
 * Simple template provider for manifest based add-ons.
 * Replaces values in format {{key}} with the values passed in as values.
 * @param document where tempated parameters must be replaced
 * @param values values to replace (e.g. region will be passed as "region: us-west-1" and any occurrence of {{region}} will be replaced)
 * @returns
 */
KubectlProvider.applyManifestTemplate = function (document, values) {
    const valueMap = new Map(Object.entries(values));
    let data = JSON.stringify(document);
    valueMap.forEach((value, key) => {
        data.replace(`{{${key}}}`, value);
    });
    return JSON.parse(data);
};
KubectlProvider.applyManifestDeployment = function (clusterInfo, props) {
    const manifestDoc = KubectlProvider.applyManifestTemplate(props.manifest, props.values);
    return new aws_eks_1.KubernetesManifest(clusterInfo.cluster, props.name, {
        cluster: clusterInfo.cluster,
        manifest: manifestDoc,
        overwrite: true
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3ViZWN0bC1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGRvbnMvaGVsbS1hZGRvbi9rdWJlY3RsLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUF5RDtBQXVGekQ7OztHQUdHO0FBQ0gsTUFBYSxlQUFlO0lBRXhCLFlBQTZCLFdBQXlCO1FBQXpCLGdCQUFXLEdBQVgsV0FBVyxDQUFjO0lBQUcsQ0FBQztJQXlDbkQsWUFBWSxDQUFDLEtBQTBCO1FBQzFDLE9BQU8sZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVNLFdBQVcsQ0FBQyxLQUF5QjtRQUN4QyxPQUFPLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVFLENBQUM7O0FBakRMLDBDQWtEQztBQTlDaUIsbUNBQW1CLEdBQUcsVUFBUyxXQUF3QixFQUFFLEtBQTBCO0lBQzdGLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUUsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNqRCxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7UUFDNUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1FBQzFCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtRQUN0QyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7UUFDbEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ3RCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztRQUN0QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1FBQ2hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtLQUN2QixDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDVyxxQ0FBcUIsR0FBRyxVQUFTLFFBQWEsRUFBRSxNQUFjO0lBQ3hFLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFhLEVBQUUsR0FBVyxFQUFFLEVBQUU7UUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBQztBQUVZLHVDQUF1QixHQUFHLFVBQVMsV0FBd0IsRUFBRSxLQUF5QjtJQUNoRyxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEYsT0FBUSxJQUFJLDRCQUFrQixDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRTtRQUM5RCxPQUFPLEVBQUUsV0FBVyxDQUFDLE9BQU87UUFDNUIsUUFBUSxFQUFFLFdBQVc7UUFDckIsU0FBUyxFQUFFLElBQUk7S0FDaEIsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS3ViZXJuZXRlc01hbmlmZXN0IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1la3NcIjtcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgQ2x1c3RlckluZm8sIFZhbHVlcyB9IGZyb20gXCIuLi8uLlwiO1xuXG4vKipcbiAqIFN0cnVjdHVyZSB0aGF0IGRlZmluZXMgcHJvcGVydGllcyBmb3IgYSBnZW5lcmljIEhlbG0gY2hhcnQuIFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhlbG1DaGFydENvbmZpZ3VyYXRpb24ge1xuICAgIFxuICAgIC8qKlxuICAgICAqIE5hbWUgb2YgdGhlIGhlbG0gY2hhcnQgKGFkZC1vbilcbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgXG4gICAgLyoqXG4gICAgICogTmFtZXNwYWNlIHdoZXJlIGhlbG0gcmVsZWFzZSB3aWxsIGJlIGluc3RhbGxlZFxuICAgICAqL1xuICAgIG5hbWVzcGFjZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuXG4gICAgLyoqXG4gICAgICogQ2hhcnQgbmFtZVxuICAgICAqL1xuICAgIGNoYXJ0OiBzdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBIZWxtIGNoYXJ0IHZlcnNpb24uXG4gICAgICovXG4gICAgdmVyc2lvbjogc3RyaW5nLCBcblxuICAgIC8qKlxuICAgICAqIEhlbG0gcmVsZWFzZVxuICAgICAqL1xuICAgIHJlbGVhc2U6IHN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIEhlbG0gcmVwb3NpdG9yeVxuICAgICAqL1xuICAgIHJlcG9zaXRvcnk6IHN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsIHZhbHVlcyBmb3IgdGhlIGhlbG0gY2hhcnQuIFxuICAgICAqL1xuICAgIHZhbHVlcz86IFZhbHVlc1xufVxuXG4vKipcbiAqIEV4dGVuZHMgaGVsbSBjaGFydCBjb25maWd1cnRpb24gKHJlcG8vY2hhcnQpIHdpdGggZGVwbG95bWVudCBwYXJhbWV0ZXJzOiB2YWx1ZXMsIHRpbWVvdXQgYW5kIHdhaXQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSGVsbUNoYXJ0RGVwbG95bWVudCBleHRlbmRzIFJlcXVpcmVkPEhlbG1DaGFydENvbmZpZ3VyYXRpb24+IHtcbiAgICAvKipcbiAgICAgKiBEZXBsb3ltZW50IHdpbGwgd2FpdCBmb3IgYWxsIHBvZHMgdG8gY29tZSB1cC5cbiAgICAgKi9cbiAgICB3YWl0PzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFRpbWUgdG8gd2FpdC4gXG4gICAgICovXG4gICAgdGltZW91dD86IER1cmF0aW9uO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBuYW1lc3BhY2UgaWYgZG9lcyBub3QgZXhpc3RcbiAgICAgKi9cbiAgICBjcmVhdGVOYW1lc3BhY2U/OiBib29sZWFuO1xuXG59XG5cbi8qKlxuICogRGF0YSBzdHJ1Y3R1cmUgZGVmaW5lcyBwcm9wZXJ0aWVzIGZvciBrdWJlcm5ldGVzIG1hbmlmZXN0IGRlcGxveW1lbnQgKG5vbi1oZWxtKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNYW5pZmVzdENvbmZpZ3VyYXRpb24ge1xuICAgIG5hbWU6IHN0cmluZywgXG4gICAgbmFtZXNwYWNlOiBzdHJpbmcsIFxuICAgIG1hbmlmZXN0VXJsOiBzdHJpbmdcbn1cblxuLyoqXG4gKiBEYXRhIHN0cnVjdHVyZSBleHRlbmRzIEt1YmVybmV0ZXMgbWFuaWZlc3QgY29uZmlnaXVyYXRpb24gYW5kIGFsbG93cyBwYXNzaW5nIGRlcGxveW1lbnQgcGFyYW1ldGVycy5cbiAqIFN1Y2ggcGFyYW1ldGVycyBhcmUgZXhwZWN0ZWQgdG8gYmUgdGVtcGxhdGVkIHdpdGhpbiB2YWx1ZXMgaW5zaWRlIHRoZSBtYW5pZmVzdCBhcyB7e3BhcmFtZXRlci1rZXl9fS5cbiAqIEZvciBleGFtcGxlLCBpZiB2YWx1ZXMgY29udGFpbnMge3JlZ2lvbjogJ3VzLWVhc3QtMid9IHRoZW4gdGhlIG1hbmlmZXN0IGlzIGV4cGVjdGVkIHRvIGNvbnRhaW4gXG4gKiB7ICdzb21lLWF0dHJpYnV0ZScgOiB7e3JlZ2lvbn19LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1hbmlmZXN0RGVwbG95bWVudCBleHRlbmRzIE9taXQ8TWFuaWZlc3RDb25maWd1cmF0aW9uLCBcIm1hbmlmZXN0VXJsXCI+IHtcbiAgICBtYW5pZmVzdDogYW55LFxuICAgIHZhbHVlczogVmFsdWVzXG59XG5cbi8qKlxuICogS3ViZWN0bCBwcm92aWRlciBmb3IgdGhlIGFkZC1vbnMgYW5kIHRlYW1zIHRoYXQgaXMgY2FwYWJsZSBvZiBoZWxtIGFuZCBnZW5lcmljIG1hbmlmZXN0IGRlcGxveW1lbnRzLlxuICogSXQgZXhwb3NlcyBleHRlbmlvbiBtZWNoYW5pc20gYW5kIGNlbnRyYWwgcG9pbnRzIGZvciBsb2dnaW5nLCBzdGFjayBvdXRwdXQsIGV4dGVuc2lvbiBvZiBmdW5jdGlvbmFsaXR5LlxuICovXG5leHBvcnQgY2xhc3MgS3ViZWN0bFByb3ZpZGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY2x1c3RlckluZm8gOiBDbHVzdGVySW5mbykge31cblxuICAgIHB1YmxpYyBzdGF0aWMgYXBwbHlIZWxtRGVwbG95bWVudCA9IGZ1bmN0aW9uKGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbywgcHJvcHM6IEhlbG1DaGFydERlcGxveW1lbnQpIDogQ29uc3RydWN0IHtcbiAgICAgICAgcmV0dXJuIGNsdXN0ZXJJbmZvLmNsdXN0ZXIuYWRkSGVsbUNoYXJ0KCBwcm9wcy5uYW1lLCB7XG4gICAgICAgICAgICByZXBvc2l0b3J5OiBwcm9wcy5yZXBvc2l0b3J5LFxuICAgICAgICAgICAgbmFtZXNwYWNlOiBwcm9wcy5uYW1lc3BhY2UsXG4gICAgICAgICAgICBjcmVhdGVOYW1lc3BhY2U6IHByb3BzLmNyZWF0ZU5hbWVzcGFjZSxcbiAgICAgICAgICAgIGNoYXJ0OiBwcm9wcy5jaGFydCxcbiAgICAgICAgICAgIHZlcnNpb246IHByb3BzLnZlcnNpb24sXG4gICAgICAgICAgICByZWxlYXNlOiBwcm9wcy5yZWxlYXNlLFxuICAgICAgICAgICAgdGltZW91dDogcHJvcHMudGltZW91dCxcbiAgICAgICAgICAgIHdhaXQ6IHByb3BzLndhaXQsXG4gICAgICAgICAgICB2YWx1ZXM6IHByb3BzLnZhbHVlc1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2ltcGxlIHRlbXBsYXRlIHByb3ZpZGVyIGZvciBtYW5pZmVzdCBiYXNlZCBhZGQtb25zLiBcbiAgICAgKiBSZXBsYWNlcyB2YWx1ZXMgaW4gZm9ybWF0IHt7a2V5fX0gd2l0aCB0aGUgdmFsdWVzIHBhc3NlZCBpbiBhcyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGRvY3VtZW50IHdoZXJlIHRlbXBhdGVkIHBhcmFtZXRlcnMgbXVzdCBiZSByZXBsYWNlZFxuICAgICAqIEBwYXJhbSB2YWx1ZXMgdmFsdWVzIHRvIHJlcGxhY2UgKGUuZy4gcmVnaW9uIHdpbGwgYmUgcGFzc2VkIGFzIFwicmVnaW9uOiB1cy13ZXN0LTFcIiBhbmQgYW55IG9jY3VycmVuY2Ugb2Yge3tyZWdpb259fSB3aWxsIGJlIHJlcGxhY2VkKVxuICAgICAqIEByZXR1cm5zIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYXBwbHlNYW5pZmVzdFRlbXBsYXRlID0gZnVuY3Rpb24oZG9jdW1lbnQ6IGFueSwgdmFsdWVzOiBWYWx1ZXMpIDogYW55IHtcbiAgICAgICAgY29uc3QgdmFsdWVNYXAgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKHZhbHVlcykpO1xuICAgICAgICBsZXQgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRvY3VtZW50KTtcbiAgICAgICAgdmFsdWVNYXAuZm9yRWFjaCgodmFsdWU6IHN0cmluZywga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGRhdGEucmVwbGFjZShge3ske2tleX19fWAsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIGFwcGx5TWFuaWZlc3REZXBsb3ltZW50ID0gZnVuY3Rpb24oY2x1c3RlckluZm86IENsdXN0ZXJJbmZvLCBwcm9wczogTWFuaWZlc3REZXBsb3ltZW50KSB7XG4gICAgICAgIGNvbnN0IG1hbmlmZXN0RG9jID0gS3ViZWN0bFByb3ZpZGVyLmFwcGx5TWFuaWZlc3RUZW1wbGF0ZShwcm9wcy5tYW5pZmVzdCwgcHJvcHMudmFsdWVzKTtcbiAgICAgICAgcmV0dXJuICBuZXcgS3ViZXJuZXRlc01hbmlmZXN0KGNsdXN0ZXJJbmZvLmNsdXN0ZXIsIHByb3BzLm5hbWUsIHtcbiAgICAgICAgICBjbHVzdGVyOiBjbHVzdGVySW5mby5jbHVzdGVyLFxuICAgICAgICAgIG1hbmlmZXN0OiBtYW5pZmVzdERvYyxcbiAgICAgICAgICBvdmVyd3JpdGU6IHRydWUgIFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIGFkZEhlbG1DaGFydChwcm9wczogSGVsbUNoYXJ0RGVwbG95bWVudCkgOiBDb25zdHJ1Y3Qge1xuICAgICAgICByZXR1cm4gS3ViZWN0bFByb3ZpZGVyLmFwcGx5SGVsbURlcGxveW1lbnQodGhpcy5jbHVzdGVySW5mbywgcHJvcHMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRNYW5maWVzdChwcm9wczogTWFuaWZlc3REZXBsb3ltZW50KSA6IENvbnN0cnVjdCB7XG4gICAgICAgIHJldHVybiBLdWJlY3RsUHJvdmlkZXIuYXBwbHlNYW5pZmVzdERlcGxveW1lbnQodGhpcy5jbHVzdGVySW5mbywgcHJvcHMpO1xuICAgIH1cbn1cblxuXG4iXX0=