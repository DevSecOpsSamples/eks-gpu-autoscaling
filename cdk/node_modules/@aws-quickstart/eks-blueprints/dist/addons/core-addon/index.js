"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreAddOn = exports.CoreAddOnProps = void 0;
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const utils_1 = require("../../utils");
class CoreAddOnProps {
}
exports.CoreAddOnProps = CoreAddOnProps;
const DEFAULT_NAMESPACE = "kube-system";
/**
 * Implementation of EKS Managed add-ons.
 */
class CoreAddOn {
    constructor(coreAddOnProps) {
        this.coreAddOnProps = coreAddOnProps;
    }
    deploy(clusterInfo) {
        var _a;
        // Create a service account if user provides namespace and service account
        let serviceAccountRoleArn = undefined;
        if ((_a = this.coreAddOnProps) === null || _a === void 0 ? void 0 : _a.policyDocumentProvider) {
            const policyDoc = this.coreAddOnProps.policyDocumentProvider(clusterInfo.cluster.stack.partition);
            const serviceAccount = (0, utils_1.createServiceAccount)(clusterInfo.cluster, this.coreAddOnProps.addOnName, DEFAULT_NAMESPACE, policyDoc);
            serviceAccountRoleArn = serviceAccount.role.roleArn;
        }
        // Instantiate the Add-on
        return Promise.resolve(new aws_eks_1.CfnAddon(clusterInfo.cluster.stack, this.coreAddOnProps.addOnName + "-addOn", {
            addonName: this.coreAddOnProps.addOnName,
            addonVersion: this.coreAddOnProps.version,
            clusterName: clusterInfo.cluster.clusterName,
            serviceAccountRoleArn: serviceAccountRoleArn,
            resolveConflicts: "OVERWRITE"
        }));
    }
}
exports.CoreAddOn = CoreAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2NvcmUtYWRkb24vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaURBQStDO0FBSy9DLHVDQUFtRDtBQUVuRCxNQUFhLGNBQWM7Q0FjMUI7QUFkRCx3Q0FjQztBQUVELE1BQU0saUJBQWlCLEdBQUcsYUFBYSxDQUFDO0FBRXhDOztHQUVHO0FBQ0gsTUFBYSxTQUFTO0lBSWxCLFlBQVksY0FBOEI7UUFDdEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDekMsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3Qjs7UUFFM0IsMEVBQTBFO1FBQzFFLElBQUkscUJBQXFCLEdBQXVCLFNBQVMsQ0FBQztRQUUxRCxJQUFJLE1BQUEsSUFBSSxDQUFDLGNBQWMsMENBQUUsc0JBQXNCLEVBQUU7WUFDN0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNsRyxNQUFNLGNBQWMsR0FBRyxJQUFBLDRCQUFvQixFQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQzFGLGlCQUFpQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ2xDLHFCQUFxQixHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3ZEO1FBR0QseUJBQXlCO1FBQ3pCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FDbEIsSUFBSSxrQkFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxHQUFHLFFBQVEsRUFBRTtZQUNsRixTQUFTLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTO1lBQ3hDLFlBQVksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU87WUFDekMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVztZQUM1QyxxQkFBcUIsRUFBRSxxQkFBcUI7WUFDNUMsZ0JBQWdCLEVBQUUsV0FBVztTQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Q0FDSjtBQS9CRCw4QkErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZm5BZGRvbiB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWtzXCI7XG5pbXBvcnQgeyBDbHVzdGVyQWRkT24gfSBmcm9tIFwiLi4vLi5cIjtcbmltcG9ydCB7IENsdXN0ZXJJbmZvIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IFBvbGljeURvY3VtZW50IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtcbmltcG9ydCB7IGNyZWF0ZVNlcnZpY2VBY2NvdW50IH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3JlQWRkT25Qcm9wcyB7XG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgYWRkLW9uIHRvIGluc3RhbnRpYXRlXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWRkT25OYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVmVyc2lvbiBvZiB0aGUgYWRkLW9uIHRvIHVzZS4gTXVzdCBtYXRjaCB0aGUgdmVyc2lvbiBvZiB0aGUgY2x1c3RlciB3aGVyZSBpdFxuICAgICAqIHdpbGwgYmUgZGVwbG95ZWQgaXRcbiAgICAgKi9cbiAgICByZWFkb25seSB2ZXJzaW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUG9saWN5IGRvY3VtZW50IHByb3ZpZGVyIHJldHVybnMgdGhlIHBvbGljeSByZXF1aXJlZCBieSB0aGUgYWRkLW9uIHRvIGFsbG93IGl0IHRvIGludGVyYWN0IHdpdGggQVdTIHJlc291cmNlc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHBvbGljeURvY3VtZW50UHJvdmlkZXI/OiAocGFydGl0aW9uOiBzdHJpbmcpID0+IFBvbGljeURvY3VtZW50O1xufVxuXG5jb25zdCBERUZBVUxUX05BTUVTUEFDRSA9IFwia3ViZS1zeXN0ZW1cIjtcblxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBFS1MgTWFuYWdlZCBhZGQtb25zLlxuICovXG5leHBvcnQgY2xhc3MgQ29yZUFkZE9uIGltcGxlbWVudHMgQ2x1c3RlckFkZE9uIHtcblxuICAgIHJlYWRvbmx5IGNvcmVBZGRPblByb3BzOiBDb3JlQWRkT25Qcm9wcztcblxuICAgIGNvbnN0cnVjdG9yKGNvcmVBZGRPblByb3BzOiBDb3JlQWRkT25Qcm9wcykge1xuICAgICAgICB0aGlzLmNvcmVBZGRPblByb3BzID0gY29yZUFkZE9uUHJvcHM7XG4gICAgfVxuXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgc2VydmljZSBhY2NvdW50IGlmIHVzZXIgcHJvdmlkZXMgbmFtZXNwYWNlIGFuZCBzZXJ2aWNlIGFjY291bnRcbiAgICAgICAgbGV0IHNlcnZpY2VBY2NvdW50Um9sZUFybjogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzLmNvcmVBZGRPblByb3BzPy5wb2xpY3lEb2N1bWVudFByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBwb2xpY3lEb2MgPSB0aGlzLmNvcmVBZGRPblByb3BzLnBvbGljeURvY3VtZW50UHJvdmlkZXIoY2x1c3RlckluZm8uY2x1c3Rlci5zdGFjay5wYXJ0aXRpb24pO1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZUFjY291bnQgPSBjcmVhdGVTZXJ2aWNlQWNjb3VudChjbHVzdGVySW5mby5jbHVzdGVyLCB0aGlzLmNvcmVBZGRPblByb3BzLmFkZE9uTmFtZSxcbiAgICAgICAgICAgICAgICBERUZBVUxUX05BTUVTUEFDRSwgcG9saWN5RG9jKTtcbiAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50Um9sZUFybiA9IHNlcnZpY2VBY2NvdW50LnJvbGUucm9sZUFybjtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIEFkZC1vblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgICAgbmV3IENmbkFkZG9uKGNsdXN0ZXJJbmZvLmNsdXN0ZXIuc3RhY2ssIHRoaXMuY29yZUFkZE9uUHJvcHMuYWRkT25OYW1lICsgXCItYWRkT25cIiwge1xuICAgICAgICAgICAgYWRkb25OYW1lOiB0aGlzLmNvcmVBZGRPblByb3BzLmFkZE9uTmFtZSxcbiAgICAgICAgICAgIGFkZG9uVmVyc2lvbjogdGhpcy5jb3JlQWRkT25Qcm9wcy52ZXJzaW9uLFxuICAgICAgICAgICAgY2x1c3Rlck5hbWU6IGNsdXN0ZXJJbmZvLmNsdXN0ZXIuY2x1c3Rlck5hbWUsXG4gICAgICAgICAgICBzZXJ2aWNlQWNjb3VudFJvbGVBcm46IHNlcnZpY2VBY2NvdW50Um9sZUFybixcbiAgICAgICAgICAgIHJlc29sdmVDb25mbGljdHM6IFwiT1ZFUldSSVRFXCJcbiAgICAgICAgfSkpO1xuICAgIH1cbn0iXX0=