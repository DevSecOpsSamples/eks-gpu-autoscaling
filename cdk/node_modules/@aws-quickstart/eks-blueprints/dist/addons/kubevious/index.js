"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KubeviousAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
const utils_1 = require("../../utils");
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "blueprints-kubevious-addon",
    namespace: "kubevious",
    chart: "kubevious",
    version: "0.9.13",
    release: "kubevious",
    repository: "https://helm.kubevious.io",
    values: {},
    ingressEnabled: false,
    kubeviousServiceType: "ClusterIP",
};
/**
 * Main class to instantiate the Helm chart
 */
class KubeviousAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        let values = populateValues(this.options);
        const chart = this.addHelmChart(clusterInfo, values);
        return Promise.resolve(chart);
    }
}
exports.KubeviousAddOn = KubeviousAddOn;
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 */
function populateValues(helmOptions) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, utils_1.setPath)(values, "ingress.enabled", helmOptions.ingressEnabled);
    (0, utils_1.setPath)(values, "kubevious.service.type", helmOptions.kubeviousServiceType);
    // Generate a random password for MySQL DB root user
    (0, utils_1.setPath)(values, "mysql.generate_passwords", true);
    return values;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2t1YmV2aW91cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw4Q0FBOEU7QUFFOUUsdUNBQXNDO0FBcUJ0Qzs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUF5QztJQUN2RCxJQUFJLEVBQUUsNEJBQTRCO0lBQ2xDLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLEtBQUssRUFBRSxXQUFXO0lBQ2xCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLE9BQU8sRUFBRSxXQUFXO0lBQ3BCLFVBQVUsRUFBRywyQkFBMkI7SUFDeEMsTUFBTSxFQUFFLEVBQUU7SUFFVixjQUFjLEVBQUUsS0FBSztJQUNyQixvQkFBb0IsRUFBRSxXQUFXO0NBQ3BDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQWEsY0FBZSxTQUFRLHNCQUFTO0lBSXpDLFlBQVksS0FBMkI7UUFDbkMsS0FBSyxDQUFDLEVBQUMsR0FBRyxZQUFZLEVBQUUsR0FBRyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQTRCLENBQUM7SUFDckQsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3QjtRQUMzQixJQUFJLE1BQU0sR0FBVyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXJELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0o7QUFmRCx3Q0FlQztBQUVEOzs7R0FHRztBQUNILFNBQVMsY0FBYyxDQUFDLFdBQWdDOztJQUNwRCxNQUFNLE1BQU0sR0FBRyxNQUFBLFdBQVcsQ0FBQyxNQUFNLG1DQUFJLEVBQUUsQ0FBQztJQUV4QyxJQUFBLGVBQU8sRUFBQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hFLElBQUEsZUFBTyxFQUFDLE1BQU0sRUFBRSx3QkFBd0IsRUFBRyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUM3RSxvREFBb0Q7SUFDcEQsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLDBCQUEwQixFQUFHLElBQUksQ0FBQyxDQUFDO0lBRW5ELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgSGVsbUFkZE9uLCBIZWxtQWRkT25Vc2VyUHJvcHMsIEhlbG1BZGRPblByb3BzIH0gZnJvbSBcIi4uL2hlbG0tYWRkb25cIjtcbmltcG9ydCB7IENsdXN0ZXJJbmZvLCBWYWx1ZXMgfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBzZXRQYXRoIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5cblxuLyoqXG4gKiBVc2VyIHByb3ZpZGVkIG9wdGlvbnMgZm9yIHRoZSBIZWxtIENoYXJ0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgS3ViZXZpb3VzQWRkT25Qcm9wcyBleHRlbmRzIEhlbG1BZGRPblVzZXJQcm9wcyB7XG4gICAgLyoqXG4gICAgICogVmVyc2lvbiBvZiB0aGUgaGVsbSBjaGFydCB0byBkZXBsb3lcbiAgICAgKi9cbiAgICB2ZXJzaW9uPzogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBpbmdyZXNzIGZvciBhY2Nlc3MgdG8gS3ViZXZpb3VzXG4gICAgICovXG4gICAgaW5ncmVzc0VuYWJsZWQ/OiBib29sZWFuLFxuICAgIC8qKlxuICAgICAqIFR5cGUgb2Ygc2VydmljZSB0byBleHBvc2UgS3ViZXZpb3VzIFVJXG4gICAgICovXG4gICAga3ViZXZpb3VzU2VydmljZVR5cGU/OiBzdHJpbmcsXG59XG5cbi8qKlxuICogRGVmYXVsdCBwcm9wcyB0byBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgdGhlIEhlbG0gY2hhcnRcbiAqL1xuY29uc3QgZGVmYXVsdFByb3BzOiBIZWxtQWRkT25Qcm9wcyAmIEt1YmV2aW91c0FkZE9uUHJvcHMgPSB7XG4gICAgbmFtZTogXCJibHVlcHJpbnRzLWt1YmV2aW91cy1hZGRvblwiLFxuICAgIG5hbWVzcGFjZTogXCJrdWJldmlvdXNcIixcbiAgICBjaGFydDogXCJrdWJldmlvdXNcIixcbiAgICB2ZXJzaW9uOiBcIjAuOS4xM1wiLFxuICAgIHJlbGVhc2U6IFwia3ViZXZpb3VzXCIsXG4gICAgcmVwb3NpdG9yeTogIFwiaHR0cHM6Ly9oZWxtLmt1YmV2aW91cy5pb1wiLFxuICAgIHZhbHVlczoge30sXG5cbiAgICBpbmdyZXNzRW5hYmxlZDogZmFsc2UsXG4gICAga3ViZXZpb3VzU2VydmljZVR5cGU6IFwiQ2x1c3RlcklQXCIsXG59O1xuXG4vKipcbiAqIE1haW4gY2xhc3MgdG8gaW5zdGFudGlhdGUgdGhlIEhlbG0gY2hhcnRcbiAqL1xuZXhwb3J0IGNsYXNzIEt1YmV2aW91c0FkZE9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcblxuICAgIHJlYWRvbmx5IG9wdGlvbnM6IEt1YmV2aW91c0FkZE9uUHJvcHM7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IEt1YmV2aW91c0FkZE9uUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoey4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHN9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5wcm9wcyBhcyBLdWJldmlvdXNBZGRPblByb3BzO1xuICAgIH1cblxuICAgIGRlcGxveShjbHVzdGVySW5mbzogQ2x1c3RlckluZm8pOiBQcm9taXNlPENvbnN0cnVjdD4ge1xuICAgICAgICBsZXQgdmFsdWVzOiBWYWx1ZXMgPSBwb3B1bGF0ZVZhbHVlcyh0aGlzLm9wdGlvbnMpO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuYWRkSGVsbUNoYXJ0KGNsdXN0ZXJJbmZvLCB2YWx1ZXMpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2hhcnQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBwb3B1bGF0ZVZhbHVlcyBwb3B1bGF0ZXMgdGhlIGFwcHJvcHJpYXRlIHZhbHVlcyB1c2VkIHRvIGN1c3RvbWl6ZSB0aGUgSGVsbSBjaGFydFxuICogQHBhcmFtIGhlbG1PcHRpb25zIFVzZXIgcHJvdmlkZWQgdmFsdWVzIHRvIGN1c3RvbWl6ZSB0aGUgY2hhcnRcbiAqL1xuZnVuY3Rpb24gcG9wdWxhdGVWYWx1ZXMoaGVsbU9wdGlvbnM6IEt1YmV2aW91c0FkZE9uUHJvcHMpOiBWYWx1ZXMge1xuICAgIGNvbnN0IHZhbHVlcyA9IGhlbG1PcHRpb25zLnZhbHVlcyA/PyB7fTtcblxuICAgIHNldFBhdGgodmFsdWVzLCBcImluZ3Jlc3MuZW5hYmxlZFwiLCAgaGVsbU9wdGlvbnMuaW5ncmVzc0VuYWJsZWQpO1xuICAgIHNldFBhdGgodmFsdWVzLCBcImt1YmV2aW91cy5zZXJ2aWNlLnR5cGVcIiwgIGhlbG1PcHRpb25zLmt1YmV2aW91c1NlcnZpY2VUeXBlKTtcbiAgICAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBwYXNzd29yZCBmb3IgTXlTUUwgREIgcm9vdCB1c2VyXG4gICAgc2V0UGF0aCh2YWx1ZXMsIFwibXlzcWwuZ2VuZXJhdGVfcGFzc3dvcmRzXCIsICB0cnVlKTtcblxuICAgIHJldHVybiB2YWx1ZXM7XG59XG4iXX0=