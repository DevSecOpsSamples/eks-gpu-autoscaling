{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["import { arrayDiff } from './diff';\nimport { external } from './external';\n\nexport async function handler(event: AWSLambda.CloudFormationCustomResourceEvent) {\n  if (event.RequestType === 'Create') { return onCreate(event); }\n  if (event.RequestType === 'Update') { return onUpdate(event); }\n  if (event.RequestType === 'Delete') { return onDelete(event); }\n  throw new Error('invalid request type');\n}\n\nasync function onCreate(event: AWSLambda.CloudFormationCustomResourceCreateEvent) {\n  const issuerUrl = event.ResourceProperties.Url;\n  const thumbprints: string[] = (event.ResourceProperties.ThumbprintList ?? []).sort(); // keep sorted for UPDATE\n  const clients: string[] = (event.ResourceProperties.ClientIDList ?? []).sort();\n\n  if (thumbprints.length === 0) {\n    thumbprints.push(await external.downloadThumbprint(issuerUrl));\n  }\n\n  const resp = await external.createOpenIDConnectProvider({\n    Url: issuerUrl,\n    ClientIDList: clients,\n    ThumbprintList: thumbprints,\n  });\n\n  return {\n    PhysicalResourceId: resp.OpenIDConnectProviderArn,\n  };\n}\n\nasync function onUpdate(event: AWSLambda.CloudFormationCustomResourceUpdateEvent) {\n  const issuerUrl = event.ResourceProperties.Url;\n  const thumbprints: string[] = (event.ResourceProperties.ThumbprintList ?? []).sort(); // keep sorted for UPDATE\n  const clients: string[] = (event.ResourceProperties.ClientIDList ?? []).sort();\n\n  // determine which update we are talking about.\n  const oldIssuerUrl = event.OldResourceProperties.Url;\n\n  // if this is a URL update, then we basically create a new resource and cfn will delete the old one\n  // since the physical resource ID will change.\n  if (oldIssuerUrl !== issuerUrl) {\n    return onCreate({ ...event, RequestType: 'Create' });\n  }\n\n  const providerArn = event.PhysicalResourceId;\n\n  // if thumbprints changed, we can update in-place, but bear in mind that if the new thumbprint list\n  // is empty, we will grab it from the server like we do in CREATE\n  const oldThumbprints = (event.OldResourceProperties.ThumbprintList || []).sort();\n  if (JSON.stringify(oldThumbprints) !== JSON.stringify(thumbprints)) {\n    const thumbprintList = thumbprints.length > 0 ? thumbprints : [await external.downloadThumbprint(issuerUrl)];\n    external.log('updating thumbprint list from', oldThumbprints, 'to', thumbprints);\n    await external.updateOpenIDConnectProviderThumbprint({\n      OpenIDConnectProviderArn: providerArn,\n      ThumbprintList: thumbprintList,\n    });\n\n    // don't return, we might have more updates...\n  }\n\n  // if client ID list has changed, determine \"diff\" because the API is add/remove\n  const oldClients: string[] = (event.OldResourceProperties.ClientIDList || []).sort();\n  const diff = arrayDiff(oldClients, clients);\n  external.log(`client ID diff: ${JSON.stringify(diff)}`);\n\n  for (const addClient of diff.adds) {\n    external.log(`adding client id \"${addClient}\" to provider ${providerArn}`);\n    await external.addClientIDToOpenIDConnectProvider({\n      OpenIDConnectProviderArn: providerArn,\n      ClientID: addClient,\n    });\n  }\n\n  for (const deleteClient of diff.deletes) {\n    external.log(`removing client id \"${deleteClient}\" from provider ${providerArn}`);\n    await external.removeClientIDFromOpenIDConnectProvider({\n      OpenIDConnectProviderArn: providerArn,\n      ClientID: deleteClient,\n    });\n  }\n\n  return;\n}\n\nasync function onDelete(deleteEvent: AWSLambda.CloudFormationCustomResourceDeleteEvent) {\n  await external.deleteOpenIDConnectProvider({\n    OpenIDConnectProviderArn: deleteEvent.PhysicalResourceId,\n  });\n}\n"],
  "mappings": "2FAAA,KAAA,QAAA,QAAA,QAAA,EACA,WAAA,QAAA,YAAA,EAEO,uBAAuB,MAAkD,CAC9E,GAAI,MAAM,cAAgB,SAAY,MAAO,UAAS,KAAK,EAC3D,GAAI,MAAM,cAAgB,SAAY,MAAO,UAAS,KAAK,EAC3D,GAAI,MAAM,cAAgB,SAAY,MAAO,UAAS,KAAK,EAC3D,KAAM,IAAI,OAAM,sBAAsB,CACxC,CALA,QAAA,QAAA,QAOA,wBAAwB,MAAwD,WAC9E,KAAM,WAAY,MAAM,mBAAmB,IACrC,YAAwB,KAAC,MAAM,mBAAmB,kBAAc,MAAA,KAAA,OAAA,GAAI,CAAA,GAAI,KAAI,EAC5E,QAAoB,KAAC,MAAM,mBAAmB,gBAAY,MAAA,KAAA,OAAA,GAAI,CAAA,GAAI,KAAI,EAE5E,MAAI,aAAY,SAAW,GACzB,YAAY,KAAK,KAAM,YAAA,SAAS,mBAAmB,SAAS,CAAC,EASxD,CACL,mBAAoB,AAPT,MAAM,YAAA,SAAS,4BAA4B,CACtD,IAAK,UACL,aAAc,QACd,eAAgB,YACjB,GAG0B,yBAE7B,CAEA,wBAAwB,MAAwD,WAC9E,KAAM,WAAY,MAAM,mBAAmB,IACrC,YAAwB,KAAC,MAAM,mBAAmB,kBAAc,MAAA,KAAA,OAAA,GAAI,CAAA,GAAI,KAAI,EAC5E,QAAoB,KAAC,MAAM,mBAAmB,gBAAY,MAAA,KAAA,OAAA,GAAI,CAAA,GAAI,KAAI,EAO5E,GAAI,AAJiB,MAAM,sBAAsB,MAI5B,UACnB,MAAO,UAAS,IAAK,MAAO,YAAa,QAAQ,CAAE,EAGrD,KAAM,aAAc,MAAM,mBAIpB,eAAkB,OAAM,sBAAsB,gBAAkB,CAAA,GAAI,KAAI,EAC9E,GAAI,KAAK,UAAU,cAAc,IAAM,KAAK,UAAU,WAAW,EAAG,CAClE,KAAM,gBAAiB,YAAY,OAAS,EAAI,YAAc,CAAC,KAAM,YAAA,SAAS,mBAAmB,SAAS,CAAC,EAC3G,WAAA,SAAS,IAAI,gCAAiC,eAAgB,KAAM,WAAW,EAC/E,KAAM,YAAA,SAAS,sCAAsC,CACnD,yBAA0B,YAC1B,eAAgB,eACjB,EAMH,KAAM,YAAwB,OAAM,sBAAsB,cAAgB,CAAA,GAAI,KAAI,EAC5E,KAAO,OAAA,UAAU,WAAY,OAAO,EAC1C,WAAA,SAAS,IAAI,mBAAmB,KAAK,UAAU,IAAI,GAAG,EAEtD,SAAW,aAAa,MAAK,KAC3B,WAAA,SAAS,IAAI,qBAAqB,0BAA0B,aAAa,EACzE,KAAM,YAAA,SAAS,mCAAmC,CAChD,yBAA0B,YAC1B,SAAU,UACX,EAGH,SAAW,gBAAgB,MAAK,QAC9B,WAAA,SAAS,IAAI,uBAAuB,+BAA+B,aAAa,EAChF,KAAM,YAAA,SAAS,wCAAwC,CACrD,yBAA0B,YAC1B,SAAU,aACX,CAIL,CAEA,wBAAwB,YAA8D,CACpF,KAAM,YAAA,SAAS,4BAA4B,CACzC,yBAA0B,YAAY,mBACvC,CACH",
  "names": []
}
