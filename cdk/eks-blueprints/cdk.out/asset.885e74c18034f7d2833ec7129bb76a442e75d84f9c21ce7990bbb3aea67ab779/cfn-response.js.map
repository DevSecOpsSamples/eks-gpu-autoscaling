{
  "version": 3,
  "sources": ["cfn-response.ts"],
  "sourcesContent": ["/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport * as url from 'url';\nimport { httpRequest } from './outbound';\nimport { log } from './util';\n\nexport const CREATE_FAILED_PHYSICAL_ID_MARKER = 'AWSCDK::CustomResourceProviderFramework::CREATE_FAILED';\nexport const MISSING_PHYSICAL_ID_MARKER = 'AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID';\n\nexport interface CloudFormationResponseOptions {\n  readonly reason?: string;\n  readonly noEcho?: boolean;\n}\n\nexport interface CloudFormationEventContext {\n  StackId: string;\n  RequestId: string;\n  PhysicalResourceId?: string;\n  LogicalResourceId: string;\n  ResponseURL: string;\n  Data?: any\n}\n\nexport async function submitResponse(status: 'SUCCESS' | 'FAILED', event: CloudFormationEventContext, options: CloudFormationResponseOptions = { }) {\n  const json: AWSLambda.CloudFormationCustomResourceResponse = {\n    Status: status,\n    Reason: options.reason || status,\n    StackId: event.StackId,\n    RequestId: event.RequestId,\n    PhysicalResourceId: event.PhysicalResourceId || MISSING_PHYSICAL_ID_MARKER,\n    LogicalResourceId: event.LogicalResourceId,\n    NoEcho: options.noEcho,\n    Data: event.Data,\n  };\n\n  log('submit response to cloudformation', json);\n\n  const responseBody = JSON.stringify(json);\n\n  const parsedUrl = url.parse(event.ResponseURL);\n  await httpRequest({\n    hostname: parsedUrl.hostname,\n    path: parsedUrl.path,\n    method: 'PUT',\n    headers: {\n      'content-type': '',\n      'content-length': responseBody.length,\n    },\n  }, responseBody);\n}\n\nexport let includeStackTraces = true; // for unit tests\n\nexport function safeHandler(block: (event: any) => Promise<void>) {\n  return async (event: any) => {\n\n    // ignore DELETE event when the physical resource ID is the marker that\n    // indicates that this DELETE is a subsequent DELETE to a failed CREATE\n    // operation.\n    if (event.RequestType === 'Delete' && event.PhysicalResourceId === CREATE_FAILED_PHYSICAL_ID_MARKER) {\n      log('ignoring DELETE event caused by a failed CREATE event');\n      await submitResponse('SUCCESS', event);\n      return;\n    }\n\n    try {\n      await block(event);\n    } catch (e) {\n      // tell waiter state machine to retry\n      if (e instanceof Retry) {\n        log('retry requested by handler');\n        throw e;\n      }\n\n      if (!event.PhysicalResourceId) {\n        // special case: if CREATE fails, which usually implies, we usually don't\n        // have a physical resource id. in this case, the subsequent DELETE\n        // operation does not have any meaning, and will likely fail as well. to\n        // address this, we use a marker so the provider framework can simply\n        // ignore the subsequent DELETE.\n        if (event.RequestType === 'Create') {\n          log('CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored');\n          event.PhysicalResourceId = CREATE_FAILED_PHYSICAL_ID_MARKER;\n        } else {\n          // otherwise, if PhysicalResourceId is not specified, something is\n          // terribly wrong because all other events should have an ID.\n          log(`ERROR: Malformed event. \"PhysicalResourceId\" is required: ${JSON.stringify(event)}`);\n        }\n      }\n\n      // this is an actual error, fail the activity altogether and exist.\n      await submitResponse('FAILED', event, {\n        reason: includeStackTraces ? e.stack : e.message,\n      });\n    }\n  };\n}\n\nexport class Retry extends Error { }\n"],
  "mappings": "2OAEA,KAAA,KAAA,QAAA,KAAA,EACA,WAAA,QAAA,YAAA,EACA,OAAA,QAAA,QAAA,EAEa,QAAA,iCAAmC,yDACnC,QAAA,2BAA6B,+DAgBnC,8BAA8B,OAA8B,MAAmC,QAAyC,CAAA,EAAG,CAChJ,KAAM,MAAuD,CAC3D,OAAQ,OACR,OAAQ,QAAQ,QAAU,OAC1B,QAAS,MAAM,QACf,UAAW,MAAM,UACjB,mBAAoB,MAAM,oBAAsB,QAAA,2BAChD,kBAAmB,MAAM,kBACzB,OAAQ,QAAQ,OAChB,KAAM,MAAM,MAGd,OAAA,IAAI,oCAAqC,IAAI,EAE7C,KAAM,cAAe,KAAK,UAAU,IAAI,EAElC,UAAY,IAAI,MAAM,MAAM,WAAW,EAC7C,KAAM,YAAA,YAAY,CAChB,SAAU,UAAU,SACpB,KAAM,UAAU,KAChB,OAAQ,MACR,QAAS,CACP,eAAgB,GAChB,iBAAkB,aAAa,SAEhC,YAAY,CACjB,CA1BA,QAAA,eAAA,eA4BW,QAAA,mBAAqB,GAEhC,qBAA4B,MAAoC,CAC9D,MAAO,MAAO,QAAc,CAK1B,GAAI,MAAM,cAAgB,UAAY,MAAM,qBAAuB,QAAA,iCAAkC,CACnG,OAAA,IAAI,uDAAuD,EAC3D,KAAM,gBAAe,UAAW,KAAK,EACrC,OAGF,GAAI,CACF,KAAM,OAAM,KAAK,QACV,EAAP,CAEA,GAAI,YAAa,OACf,aAAA,IAAI,4BAA4B,EAC1B,EAGR,AAAK,MAAM,oBAMT,CAAI,MAAM,cAAgB,SACxB,QAAA,IAAI,4GAA4G,EAChH,MAAM,mBAAqB,QAAA,kCAI3B,OAAA,IAAI,6DAA6D,KAAK,UAAU,KAAK,GAAG,GAK5F,KAAM,gBAAe,SAAU,MAAO,CACpC,OAAQ,QAAA,mBAAqB,EAAE,MAAQ,EAAE,QAC1C,EAEL,CACF,CA3CA,QAAA,YAAA,YA6CA,MAAa,aAAc,MAAK,EAAhC,QAAA,MAAA",
  "names": []
}
