{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["/* eslint-disable no-console */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { IsCompleteResponse } from '../../../custom-resources/lib/provider-framework/types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as aws from 'aws-sdk';\nimport { ClusterResourceHandler } from './cluster';\nimport { EksClient } from './common';\nimport * as consts from './consts';\nimport { FargateProfileResourceHandler } from './fargate';\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies\nconst ProxyAgent = require('proxy-agent');\n\naws.config.logger = console;\naws.config.update({\n  httpOptions: { agent: new ProxyAgent() },\n});\n\nlet eks: aws.EKS | undefined;\n\nconst defaultEksClient: EksClient = {\n  createCluster: req => getEksClient().createCluster(req).promise(),\n  deleteCluster: req => getEksClient().deleteCluster(req).promise(),\n  describeCluster: req => getEksClient().describeCluster(req).promise(),\n  describeUpdate: req => getEksClient().describeUpdate(req).promise(),\n  updateClusterConfig: req => getEksClient().updateClusterConfig(req).promise(),\n  updateClusterVersion: req => getEksClient().updateClusterVersion(req).promise(),\n  createFargateProfile: req => getEksClient().createFargateProfile(req).promise(),\n  deleteFargateProfile: req => getEksClient().deleteFargateProfile(req).promise(),\n  describeFargateProfile: req => getEksClient().describeFargateProfile(req).promise(),\n  configureAssumeRole: req => {\n    console.log(JSON.stringify({ assumeRole: req }, undefined, 2));\n    const creds = new aws.ChainableTemporaryCredentials({\n      params: req,\n    });\n\n    eks = new aws.EKS({ credentials: creds });\n  },\n};\n\nfunction getEksClient() {\n  if (!eks) {\n    throw new Error('EKS client not initialized (call \"configureAssumeRole\")');\n  }\n\n  return eks;\n}\n\nexport async function onEvent(event: AWSLambda.CloudFormationCustomResourceEvent) {\n  const provider = createResourceHandler(event);\n  return provider.onEvent();\n}\n\nexport async function isComplete(event: AWSLambda.CloudFormationCustomResourceEvent): Promise<IsCompleteResponse> {\n  const provider = createResourceHandler(event);\n  return provider.isComplete();\n}\n\nfunction createResourceHandler(event: AWSLambda.CloudFormationCustomResourceEvent) {\n  switch (event.ResourceType) {\n    case consts.CLUSTER_RESOURCE_TYPE: return new ClusterResourceHandler(defaultEksClient, event);\n    case consts.FARGATE_PROFILE_RESOURCE_TYPE: return new FargateProfileResourceHandler(defaultEksClient, event);\n    default:\n      throw new Error(`Unsupported resource type \"${event.ResourceType}`);\n  }\n}\n"],
  "mappings": "8GAIA,KAAA,KAAA,QAAA,SAAA,EACA,UAAA,QAAA,WAAA,EAEA,OAAA,QAAA,UAAA,EACA,UAAA,QAAA,WAAA,EAGM,WAAa,QAAQ,aAAa,EAExC,IAAI,OAAO,OAAS,QACpB,IAAI,OAAO,OAAO,CAChB,YAAa,CAAE,MAAO,GAAI,WAAY,EACvC,EAED,GAAI,KAEJ,KAAM,kBAA8B,CAClC,cAAe,KAAO,aAAY,EAAG,cAAc,GAAG,EAAE,QAAO,EAC/D,cAAe,KAAO,aAAY,EAAG,cAAc,GAAG,EAAE,QAAO,EAC/D,gBAAiB,KAAO,aAAY,EAAG,gBAAgB,GAAG,EAAE,QAAO,EACnE,eAAgB,KAAO,aAAY,EAAG,eAAe,GAAG,EAAE,QAAO,EACjE,oBAAqB,KAAO,aAAY,EAAG,oBAAoB,GAAG,EAAE,QAAO,EAC3E,qBAAsB,KAAO,aAAY,EAAG,qBAAqB,GAAG,EAAE,QAAO,EAC7E,qBAAsB,KAAO,aAAY,EAAG,qBAAqB,GAAG,EAAE,QAAO,EAC7E,qBAAsB,KAAO,aAAY,EAAG,qBAAqB,GAAG,EAAE,QAAO,EAC7E,uBAAwB,KAAO,aAAY,EAAG,uBAAuB,GAAG,EAAE,QAAO,EACjF,oBAAqB,KAAM,CACzB,QAAQ,IAAI,KAAK,UAAU,CAAE,WAAY,GAAG,EAAI,OAAW,CAAC,CAAC,EAC7D,KAAM,OAAQ,GAAI,KAAI,8BAA8B,CAClD,OAAQ,IACT,EAED,IAAM,GAAI,KAAI,IAAI,CAAE,YAAa,KAAK,CAAE,CAC1C,GAGF,uBAAqB,CACnB,GAAI,CAAC,IACH,KAAM,IAAI,OAAM,yDAAyD,EAG3E,MAAO,IACT,CAEO,uBAAuB,MAAkD,CAE9E,MAAO,AADU,uBAAsB,KAAK,EAC5B,QAAO,CACzB,CAHA,QAAA,QAAA,QAKO,0BAA0B,MAAkD,CAEjF,MAAO,AADU,uBAAsB,KAAK,EAC5B,WAAU,CAC5B,CAHA,QAAA,WAAA,WAKA,+BAA+B,MAAkD,CAC/E,OAAQ,MAAM,kBACP,QAAO,sBAAuB,MAAO,IAAI,WAAA,uBAAuB,iBAAkB,KAAK,MACvF,QAAO,8BAA+B,MAAO,IAAI,WAAA,8BAA8B,iBAAkB,KAAK,UAEzG,KAAM,IAAI,OAAM,8BAA8B,MAAM,cAAc,EAExE",
  "names": []
}
