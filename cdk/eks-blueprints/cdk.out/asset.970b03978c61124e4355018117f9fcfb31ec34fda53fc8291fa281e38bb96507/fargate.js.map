{
  "version": 3,
  "sources": ["fargate.ts"],
  "sourcesContent": ["import * as aws from 'aws-sdk'; // eslint-disable-line import/no-extraneous-dependencies\nimport { ResourceHandler } from './common';\n\nconst MAX_NAME_LEN = 63;\n\nexport class FargateProfileResourceHandler extends ResourceHandler {\n  protected async onCreate() {\n    const fargateProfileName = this.event.ResourceProperties.Config.fargateProfileName ?? this.generateProfileName();\n\n    const createFargateProfile: aws.EKS.CreateFargateProfileRequest = {\n      fargateProfileName,\n      ...this.event.ResourceProperties.Config,\n    };\n\n    this.log({ createFargateProfile });\n    const createFargateProfileResponse = await this.eks.createFargateProfile(createFargateProfile);\n    this.log({ createFargateProfileResponse });\n\n    if (!createFargateProfileResponse.fargateProfile) {\n      throw new Error('invalid CreateFargateProfile response');\n    }\n\n    return {\n      PhysicalResourceId: createFargateProfileResponse.fargateProfile.fargateProfileName,\n      Data: {\n        fargateProfileArn: createFargateProfileResponse.fargateProfile.fargateProfileArn,\n      },\n    };\n  }\n\n  protected async onDelete() {\n    if (!this.physicalResourceId) {\n      throw new Error('Cannot delete a profile without a physical id');\n    }\n\n    const deleteFargateProfile: aws.EKS.DeleteFargateProfileRequest = {\n      clusterName: this.event.ResourceProperties.Config.clusterName,\n      fargateProfileName: this.physicalResourceId,\n    };\n\n    this.log({ deleteFargateProfile });\n    const deleteFargateProfileResponse = await this.eks.deleteFargateProfile(deleteFargateProfile);\n    this.log({ deleteFargateProfileResponse });\n\n    return;\n  }\n\n  protected async onUpdate() {\n    // all updates require a replacement. as long as name is generated, we are\n    // good. if name is explicit, update will fail, which is common when trying\n    // to replace cfn resources with explicit physical names\n    return this.onCreate();\n  }\n\n  protected async isCreateComplete() {\n    return this.isUpdateComplete();\n  }\n\n  protected async isUpdateComplete() {\n    const status = await this.queryStatus();\n    return {\n      IsComplete: status === 'ACTIVE',\n    };\n  }\n\n  protected async isDeleteComplete() {\n    const status = await this.queryStatus();\n    return {\n      IsComplete: status === 'NOT_FOUND',\n    };\n  }\n\n  /**\n   * Generates a fargate profile name.\n   */\n  private generateProfileName() {\n    const suffix = this.requestId.replace(/-/g, ''); // 32 chars\n    const offset = MAX_NAME_LEN - suffix.length - 1;\n    const prefix = this.logicalResourceId.slice(0, offset > 0 ? offset : 0);\n    return `${prefix}-${suffix}`;\n  }\n\n  /**\n   * Queries the Fargate profile's current status and returns the status or\n   * NOT_FOUND if the profile doesn't exist (i.e. it has been deleted).\n   */\n  private async queryStatus(): Promise<aws.EKS.FargateProfileStatus | 'NOT_FOUND' | undefined> {\n    if (!this.physicalResourceId) {\n      throw new Error('Unable to determine status for fargate profile without a resource name');\n    }\n\n    const describeFargateProfile: aws.EKS.DescribeFargateProfileRequest = {\n      clusterName: this.event.ResourceProperties.Config.clusterName,\n      fargateProfileName: this.physicalResourceId,\n    };\n\n    try {\n\n      this.log({ describeFargateProfile });\n      const describeFargateProfileResponse = await this.eks.describeFargateProfile(describeFargateProfile);\n      this.log({ describeFargateProfileResponse });\n      const status = describeFargateProfileResponse.fargateProfile?.status;\n\n      if (status === 'CREATE_FAILED' || status === 'DELETE_FAILED') {\n        throw new Error(status);\n      }\n\n      return status;\n    } catch (describeFargateProfileError) {\n      if (describeFargateProfileError.code === 'ResourceNotFoundException') {\n        this.log('received ResourceNotFoundException, this means the profile has been deleted (or never existed)');\n        return 'NOT_FOUND';\n      }\n\n      this.log({ describeFargateProfileError });\n      throw describeFargateProfileError;\n    }\n  }\n}\n"],
  "mappings": "iHACA,KAAA,UAAA,QAAA,UAAA,EAEM,aAAe,GAErB,MAAa,qCAAsC,UAAA,eAAe,MAChD,WAAQ,QAGtB,KAAM,sBAA4D,CAChE,mBAHsB,IAAG,KAAK,MAAM,mBAAmB,OAAO,sBAAkB,MAAA,KAAA,OAAA,GAAI,KAAK,oBAAmB,KAIzG,KAAK,MAAM,mBAAmB,QAGnC,KAAK,IAAI,CAAE,oBAAoB,CAAE,EACjC,KAAM,8BAA+B,KAAM,MAAK,IAAI,qBAAqB,oBAAoB,EAG7F,GAFA,KAAK,IAAI,CAAE,4BAA4B,CAAE,EAErC,CAAC,6BAA6B,eAChC,KAAM,IAAI,OAAM,uCAAuC,EAGzD,MAAO,CACL,mBAAoB,6BAA6B,eAAe,mBAChE,KAAM,CACJ,kBAAmB,6BAA6B,eAAe,yBAKrD,WAAQ,CACtB,GAAI,CAAC,KAAK,mBACR,KAAM,IAAI,OAAM,+CAA+C,EAGjE,KAAM,sBAA4D,CAChE,YAAa,KAAK,MAAM,mBAAmB,OAAO,YAClD,mBAAoB,KAAK,oBAG3B,KAAK,IAAI,CAAE,oBAAoB,CAAE,EACjC,KAAM,8BAA+B,KAAM,MAAK,IAAI,qBAAqB,oBAAoB,EAC7F,KAAK,IAAI,CAAE,4BAA4B,CAAE,OAK3B,WAAQ,CAItB,MAAO,MAAK,SAAQ,OAGN,mBAAgB,CAC9B,MAAO,MAAK,iBAAgB,OAGd,mBAAgB,CAE9B,MAAO,CACL,WAAY,AAFC,KAAM,MAAK,YAAW,IAEZ,eAIX,mBAAgB,CAE9B,MAAO,CACL,WAAY,AAFC,KAAM,MAAK,YAAW,IAEZ,aAOnB,qBAAmB,CACzB,KAAM,QAAS,KAAK,UAAU,QAAQ,KAAM,EAAE,EACxC,OAAS,aAAe,OAAO,OAAS,EAE9C,MAAO,GADQ,KAAK,kBAAkB,MAAM,EAAG,OAAS,EAAI,OAAS,CAAC,KAClD,cAOR,cAAW,QACvB,GAAI,CAAC,KAAK,mBACR,KAAM,IAAI,OAAM,wEAAwE,EAG1F,KAAM,wBAAgE,CACpE,YAAa,KAAK,MAAM,mBAAmB,OAAO,YAClD,mBAAoB,KAAK,oBAG3B,GAAI,CAEF,KAAK,IAAI,CAAE,sBAAsB,CAAE,EACnC,KAAM,gCAAiC,KAAM,MAAK,IAAI,uBAAuB,sBAAsB,EACnG,KAAK,IAAI,CAAE,8BAA8B,CAAE,EAC3C,KAAM,QAAM,IAAG,+BAA+B,kBAAc,MAAA,KAAA,OAAA,OAAA,GAAE,OAE9D,GAAI,SAAW,iBAAmB,SAAW,gBAC3C,KAAM,IAAI,OAAM,MAAM,EAGxB,MAAO,cACA,4BAAP,CACA,GAAI,4BAA4B,OAAS,4BACvC,YAAK,IAAI,gGAAgG,EAClG,YAGT,WAAK,IAAI,CAAE,2BAA2B,CAAE,EAClC,8BA9GZ,QAAA,8BAAA",
  "names": []
}
